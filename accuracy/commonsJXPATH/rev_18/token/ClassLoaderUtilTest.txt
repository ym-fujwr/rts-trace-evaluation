package
org
.
apache
.
commons
.
jxpath
.
util
;
import
java
.
io
.
ByteArrayOutputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
lang
.
reflect
.
InvocationTargetException
;
import
java
.
lang
.
reflect
.
Method
;
import
java
.
net
.
URL
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathContext
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathException
;
import
junit
.
framework
.
TestCase
;
public
class
ClassLoaderUtilTest
extends
TestCase
{
private
static
final
String
TEST_CASE_CLASS_NAME
=
"org.apache.commons.jxpath.util.ClassLoaderUtilTest"
;
private
static
final
String
EXAMPLE_CLASS_NAME
=
"org.apache.commons.jxpath.util.ClassLoadingExampleClass"
;
private
ClassLoader
orginalContextClassLoader
;
public
void
setUp
(
)
{
this
.
orginalContextClassLoader
=
Thread
.
currentThread
(
)
.
getContextClassLoader
(
)
;
}
public
void
tearDown
(
)
{
Thread
.
currentThread
(
)
.
setContextClassLoader
(
this
.
orginalContextClassLoader
)
;
}
public
void
testClassLoadFailWithoutContextClassLoader
(
)
{
Thread
.
currentThread
(
)
.
setContextClassLoader
(
null
)
;
ClassLoader
cl
=
new
TestClassLoader
(
getClass
(
)
.
getClassLoader
(
)
)
;
executeTestMethodUnderClassLoader
(
cl
,
"callExampleMessageMethodAndAssertClassNotFoundJXPathException"
)
;
}
public
void
testClassLoadSuccessWithContextClassLoader
(
)
{
Thread
.
currentThread
(
)
.
setContextClassLoader
(
getClass
(
)
.
getClassLoader
(
)
)
;
ClassLoader
cl
=
new
TestClassLoader
(
getClass
(
)
.
getClassLoader
(
)
)
;
executeTestMethodUnderClassLoader
(
cl
,
"callExampleMessageMethodAndAssertSuccess"
)
;
}
public
void
testCurrentClassLoaderFallback
(
)
{
ClassLoader
cl
=
new
TestClassLoader
(
getClass
(
)
.
getClassLoader
(
)
)
;
Thread
.
currentThread
(
)
.
setContextClassLoader
(
cl
)
;
callExampleMessageMethodAndAssertSuccess
(
)
;
}
public
void
testClassLoadSuccessWithoutContextClassLoader
(
)
{
Thread
.
currentThread
(
)
.
setContextClassLoader
(
null
)
;
callExampleMessageMethodAndAssertSuccess
(
)
;
}
public
static
void
callExampleMessageMethodAndAssertClassNotFoundJXPathException
(
)
{
JXPathContext
context
=
JXPathContext
.
newContext
(
new
Object
(
)
)
;
try
{
context
.
selectSingleNode
(
EXAMPLE_CLASS_NAME
+
".getMessage()"
)
;
fail
(
"We should not be able to load "
+
EXAMPLE_CLASS_NAME
+
"."
)
;
}
catch
(
Exception
e
)
{
assertTrue
(
e
instanceof
JXPathException
)
;
}
}
public
static
void
callExampleMessageMethodAndAssertSuccess
(
)
{
JXPathContext
context
=
JXPathContext
.
newContext
(
new
Object
(
)
)
;
Object
value
;
try
{
value
=
context
.
selectSingleNode
(
EXAMPLE_CLASS_NAME
+
".getMessage()"
)
;
assertEquals
(
"an example class"
,
value
)
;
}
catch
(
Exception
e
)
{
fail
(
e
.
getMessage
(
)
)
;
}
}
private
void
executeTestMethodUnderClassLoader
(
ClassLoader
cl
,
String
methodName
)
{
Class
testClass
=
null
;
try
{
testClass
=
cl
.
loadClass
(
TEST_CASE_CLASS_NAME
)
;
}
catch
(
ClassNotFoundException
e
)
{
fail
(
e
.
getMessage
(
)
)
;
}
Method
testMethod
=
null
;
try
{
testMethod
=
testClass
.
getMethod
(
methodName
,
null
)
;
}
catch
(
SecurityException
e
)
{
fail
(
e
.
getMessage
(
)
)
;
}
catch
(
NoSuchMethodException
e
)
{
fail
(
e
.
getMessage
(
)
)
;
}
try
{
testMethod
.
invoke
(
null
,
null
)
;
}
catch
(
IllegalArgumentException
e
)
{
fail
(
e
.
getMessage
(
)
)
;
}
catch
(
IllegalAccessException
e
)
{
fail
(
e
.
getMessage
(
)
)
;
}
catch
(
InvocationTargetException
e
)
{
if
(
e
.
getCause
(
)
instanceof
RuntimeException
)
{
throw
(
RuntimeException
)
e
.
getCause
(
)
;
}
}
}
private
static
class
TestClassLoader
extends
ClassLoader
{
private
Class
testCaseClass
=
null
;
public
TestClassLoader
(
ClassLoader
classLoader
)
{
super
(
classLoader
)
;
}
public
synchronized
Class
loadClass
(
String
name
,
boolean
resolved
)
throws
ClassNotFoundException
{
if
(
EXAMPLE_CLASS_NAME
.
equals
(
name
)
)
{
throw
new
ClassNotFoundException
(
)
;
}
else
if
(
TEST_CASE_CLASS_NAME
.
equals
(
name
)
)
{
if
(
testCaseClass
==
null
)
{
URL
clazzUrl
=
this
.
getParent
(
)
.
getResource
(
"org/apache/commons/jxpath/util/ClassLoaderUtilTest.class"
)
;
ByteArrayOutputStream
out
=
new
ByteArrayOutputStream
(
)
;
InputStream
in
=
null
;
try
{
in
=
clazzUrl
.
openStream
(
)
;
byte
[
]
buffer
=
new
byte
[
2048
]
;
for
(
int
read
=
in
.
read
(
buffer
)
;
read
>
-
1
;
read
=
in
.
read
(
buffer
)
)
{
out
.
write
(
buffer
,
0
,
read
)
;
}
}
catch
(
IOException
e
)
{
throw
new
ClassNotFoundException
(
"Could not read class from resource "
+
clazzUrl
+
"."
,
e
)
;
}
finally
{
try
{
in
.
close
(
)
;
}
catch
(
Exception
e
)
{
}
try
{
out
.
close
(
)
;
}
catch
(
Exception
e
)
{
}
}
byte
[
]
clazzBytes
=
out
.
toByteArray
(
)
;
this
.
testCaseClass
=
this
.
defineClass
(
TEST_CASE_CLASS_NAME
,
clazzBytes
,
0
,
clazzBytes
.
length
)
;
}
return
this
.
testCaseClass
;
}
return
this
.
getParent
(
)
.
loadClass
(
name
)
;
}
}
}
<EOF>
