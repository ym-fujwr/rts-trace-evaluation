package
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
beans
;
import
java
.
beans
.
IndexedPropertyDescriptor
;
import
java
.
beans
.
PropertyDescriptor
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathBeanInfo
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathContext
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathInvalidAccessException
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodePointer
;
import
org
.
apache
.
commons
.
jxpath
.
util
.
ValueUtils
;
public
class
BeanPropertyPointer
extends
PropertyPointer
{
private
static
final
long
serialVersionUID
=
-
6008991447676468786L
;
private
static
final
Object
UNINITIALIZED
=
new
Object
(
)
;
private
String
propertyName
;
private
JXPathBeanInfo
beanInfo
;
private
Object
baseValue
=
UNINITIALIZED
;
private
Object
value
=
UNINITIALIZED
;
private
transient
String
[
]
names
;
private
transient
PropertyDescriptor
[
]
propertyDescriptors
;
private
transient
PropertyDescriptor
propertyDescriptor
;
public
BeanPropertyPointer
(
NodePointer
parent
,
JXPathBeanInfo
beanInfo
)
{
super
(
parent
)
;
this
.
beanInfo
=
beanInfo
;
}
public
boolean
isContainer
(
)
{
return
true
;
}
public
int
getPropertyCount
(
)
{
if
(
beanInfo
.
isAtomic
(
)
)
{
return
0
;
}
return
getPropertyDescriptors
(
)
.
length
;
}
public
String
[
]
getPropertyNames
(
)
{
if
(
names
==
null
)
{
PropertyDescriptor
[
]
pds
=
getPropertyDescriptors
(
)
;
names
=
new
String
[
pds
.
length
]
;
for
(
int
i
=
0
;
i
<
names
.
length
;
i
++
)
{
names
[
i
]
=
pds
[
i
]
.
getName
(
)
;
}
}
return
names
;
}
public
void
setPropertyName
(
String
propertyName
)
{
setPropertyIndex
(
UNSPECIFIED_PROPERTY
)
;
this
.
propertyName
=
propertyName
;
}
public
void
setPropertyIndex
(
int
index
)
{
if
(
propertyIndex
!=
index
)
{
super
.
setPropertyIndex
(
index
)
;
propertyName
=
null
;
propertyDescriptor
=
null
;
baseValue
=
UNINITIALIZED
;
value
=
UNINITIALIZED
;
}
}
public
Object
getBaseValue
(
)
{
if
(
baseValue
==
UNINITIALIZED
)
{
PropertyDescriptor
pd
=
getPropertyDescriptor
(
)
;
if
(
pd
==
null
)
{
return
null
;
}
baseValue
=
ValueUtils
.
getValue
(
getBean
(
)
,
pd
)
;
}
return
baseValue
;
}
public
void
setIndex
(
int
index
)
{
if
(
this
.
index
==
index
)
{
return
;
}
if
(
this
.
index
!=
WHOLE_COLLECTION
||
index
!=
0
||
isCollection
(
)
)
{
super
.
setIndex
(
index
)
;
value
=
UNINITIALIZED
;
}
}
public
Object
getImmediateNode
(
)
{
if
(
value
==
UNINITIALIZED
)
{
if
(
index
==
WHOLE_COLLECTION
)
{
value
=
ValueUtils
.
getValue
(
getBaseValue
(
)
)
;
}
else
{
PropertyDescriptor
pd
=
getPropertyDescriptor
(
)
;
if
(
pd
==
null
)
{
value
=
null
;
}
else
{
value
=
ValueUtils
.
getValue
(
getBean
(
)
,
pd
,
index
)
;
}
}
}
return
value
;
}
protected
boolean
isActualProperty
(
)
{
return
getPropertyDescriptor
(
)
!=
null
;
}
public
boolean
isCollection
(
)
{
PropertyDescriptor
pd
=
getPropertyDescriptor
(
)
;
if
(
pd
==
null
)
{
return
false
;
}
if
(
pd
instanceof
IndexedPropertyDescriptor
)
{
return
true
;
}
int
hint
=
ValueUtils
.
getCollectionHint
(
pd
.
getPropertyType
(
)
)
;
if
(
hint
==
-
1
)
{
return
false
;
}
if
(
hint
==
1
)
{
return
true
;
}
Object
value
=
getBaseValue
(
)
;
return
value
!=
null
&&
ValueUtils
.
isCollection
(
value
)
;
}
public
int
getLength
(
)
{
PropertyDescriptor
pd
=
getPropertyDescriptor
(
)
;
if
(
pd
==
null
)
{
return
1
;
}
if
(
pd
instanceof
IndexedPropertyDescriptor
)
{
return
ValueUtils
.
getIndexedPropertyLength
(
getBean
(
)
,
(
IndexedPropertyDescriptor
)
pd
)
;
}
int
hint
=
ValueUtils
.
getCollectionHint
(
pd
.
getPropertyType
(
)
)
;
if
(
hint
==
-
1
)
{
return
1
;
}
return
super
.
getLength
(
)
;
}
public
void
setValue
(
Object
value
)
{
PropertyDescriptor
pd
=
getPropertyDescriptor
(
)
;
if
(
pd
==
null
)
{
throw
new
JXPathInvalidAccessException
(
"Cannot set property: "
+
asPath
(
)
+
" - no such property"
)
;
}
if
(
index
==
WHOLE_COLLECTION
)
{
ValueUtils
.
setValue
(
getBean
(
)
,
pd
,
value
)
;
}
else
{
ValueUtils
.
setValue
(
getBean
(
)
,
pd
,
index
,
value
)
;
}
this
.
value
=
value
;
}
public
NodePointer
createPath
(
JXPathContext
context
)
{
if
(
getImmediateNode
(
)
==
null
)
{
super
.
createPath
(
context
)
;
baseValue
=
UNINITIALIZED
;
value
=
UNINITIALIZED
;
}
return
this
;
}
public
void
remove
(
)
{
if
(
index
==
WHOLE_COLLECTION
)
{
setValue
(
null
)
;
}
else
if
(
isCollection
(
)
)
{
Object
o
=
getBaseValue
(
)
;
Object
collection
=
ValueUtils
.
remove
(
getBaseValue
(
)
,
index
)
;
if
(
collection
!=
o
)
{
ValueUtils
.
setValue
(
getBean
(
)
,
getPropertyDescriptor
(
)
,
collection
)
;
}
}
else
if
(
index
==
0
)
{
index
=
WHOLE_COLLECTION
;
setValue
(
null
)
;
}
}
public
String
getPropertyName
(
)
{
if
(
propertyName
==
null
)
{
PropertyDescriptor
pd
=
getPropertyDescriptor
(
)
;
if
(
pd
!=
null
)
{
propertyName
=
pd
.
getName
(
)
;
}
}
return
propertyName
!=
null
?
propertyName
:
"*"
;
}
private
PropertyDescriptor
getPropertyDescriptor
(
)
{
if
(
propertyDescriptor
==
null
)
{
int
inx
=
getPropertyIndex
(
)
;
if
(
inx
==
UNSPECIFIED_PROPERTY
)
{
propertyDescriptor
=
beanInfo
.
getPropertyDescriptor
(
propertyName
)
;
}
else
{
PropertyDescriptor
[
]
propertyDescriptors
=
getPropertyDescriptors
(
)
;
if
(
inx
>=
0
&&
inx
<
propertyDescriptors
.
length
)
{
propertyDescriptor
=
propertyDescriptors
[
inx
]
;
}
else
{
propertyDescriptor
=
null
;
}
}
}
return
propertyDescriptor
;
}
protected
synchronized
PropertyDescriptor
[
]
getPropertyDescriptors
(
)
{
if
(
propertyDescriptors
==
null
)
{
propertyDescriptors
=
beanInfo
.
getPropertyDescriptors
(
)
;
}
return
propertyDescriptors
;
}
}
<EOF>
