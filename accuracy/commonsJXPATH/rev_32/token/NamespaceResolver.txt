package
org
.
apache
.
commons
.
jxpath
.
ri
;
import
java
.
io
.
Serializable
;
import
java
.
util
.
HashMap
;
import
org
.
apache
.
commons
.
jxpath
.
Pointer
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodeIterator
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodePointer
;
public
class
NamespaceResolver
implements
Cloneable
,
Serializable
{
private
static
final
long
serialVersionUID
=
1085590057838651311L
;
protected
final
NamespaceResolver
parent
;
protected
HashMap
namespaceMap
=
new
HashMap
(
)
;
protected
HashMap
reverseMap
=
new
HashMap
(
)
;
protected
NodePointer
pointer
;
private
boolean
sealed
;
protected
static
String
getPrefix
(
final
NodePointer
pointer
,
final
String
namespaceURI
)
{
NodePointer
currentPointer
=
pointer
;
while
(
currentPointer
!=
null
)
{
final
NodeIterator
ni
=
currentPointer
.
namespaceIterator
(
)
;
for
(
int
position
=
1
;
ni
!=
null
&&
ni
.
setPosition
(
position
)
;
position
++
)
{
final
NodePointer
nsPointer
=
ni
.
getNodePointer
(
)
;
final
String
uri
=
nsPointer
.
getNamespaceURI
(
)
;
if
(
uri
.
equals
(
namespaceURI
)
)
{
final
String
prefix
=
nsPointer
.
getName
(
)
.
getName
(
)
;
if
(
!
""
.
equals
(
prefix
)
)
{
return
prefix
;
}
}
}
currentPointer
=
currentPointer
.
getParent
(
)
;
}
return
null
;
}
public
NamespaceResolver
(
)
{
this
(
null
)
;
}
public
NamespaceResolver
(
final
NamespaceResolver
parent
)
{
this
.
parent
=
parent
;
}
public
synchronized
void
registerNamespace
(
final
String
prefix
,
final
String
namespaceURI
)
{
if
(
isSealed
(
)
)
{
throw
new
IllegalStateException
(
"Cannot register namespaces on a sealed NamespaceResolver"
)
;
}
namespaceMap
.
put
(
prefix
,
namespaceURI
)
;
reverseMap
.
put
(
namespaceURI
,
prefix
)
;
}
public
void
setNamespaceContextPointer
(
final
NodePointer
pointer
)
{
this
.
pointer
=
pointer
;
}
public
Pointer
getNamespaceContextPointer
(
)
{
if
(
pointer
==
null
&&
parent
!=
null
)
{
return
parent
.
getNamespaceContextPointer
(
)
;
}
return
pointer
;
}
public
synchronized
String
getNamespaceURI
(
final
String
prefix
)
{
final
String
uri
=
getExternallyRegisteredNamespaceURI
(
prefix
)
;
return
uri
==
null
&&
pointer
!=
null
?
pointer
.
getNamespaceURI
(
prefix
)
:
uri
;
}
protected
synchronized
String
getExternallyRegisteredNamespaceURI
(
final
String
prefix
)
{
final
String
uri
=
(
String
)
namespaceMap
.
get
(
prefix
)
;
return
uri
==
null
&&
parent
!=
null
?
parent
.
getExternallyRegisteredNamespaceURI
(
prefix
)
:
uri
;
}
public
synchronized
String
getPrefix
(
final
String
namespaceURI
)
{
final
String
prefix
=
getExternallyRegisteredPrefix
(
namespaceURI
)
;
return
prefix
==
null
&&
pointer
!=
null
?
getPrefix
(
pointer
,
namespaceURI
)
:
prefix
;
}
protected
synchronized
String
getExternallyRegisteredPrefix
(
final
String
namespaceURI
)
{
final
String
prefix
=
(
String
)
reverseMap
.
get
(
namespaceURI
)
;
return
prefix
==
null
&&
parent
!=
null
?
parent
.
getExternallyRegisteredPrefix
(
namespaceURI
)
:
prefix
;
}
public
boolean
isSealed
(
)
{
return
sealed
;
}
public
void
seal
(
)
{
sealed
=
true
;
if
(
parent
!=
null
)
{
parent
.
seal
(
)
;
}
}
@
Override
public
Object
clone
(
)
{
try
{
final
NamespaceResolver
result
=
(
NamespaceResolver
)
super
.
clone
(
)
;
result
.
sealed
=
false
;
return
result
;
}
catch
(
final
CloneNotSupportedException
e
)
{
e
.
printStackTrace
(
)
;
return
null
;
}
}
}
<EOF>
