package
org
.
apache
.
commons
.
jxpath
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
File
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
InputStreamReader
;
import
java
.
util
.
Properties
;
import
org
.
apache
.
commons
.
jxpath
.
util
.
ClassLoaderUtil
;
public
abstract
class
JXPathContextFactory
{
public
static
final
String
FACTORY_NAME_PROPERTY
=
"org.apache.commons.jxpath.JXPathContextFactory"
;
private
static
final
String
DEFAULT_FACTORY_CLASS
=
"org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl"
;
private
static
final
String
FACTORY_IMPL_NAME
=
findFactory
(
FACTORY_NAME_PROPERTY
,
DEFAULT_FACTORY_CLASS
)
;
protected
JXPathContextFactory
(
)
{
}
public
static
JXPathContextFactory
newInstance
(
)
{
JXPathContextFactory
factoryImpl
;
try
{
final
Class
clazz
=
ClassLoaderUtil
.
getClass
(
FACTORY_IMPL_NAME
,
true
)
;
factoryImpl
=
(
JXPathContextFactory
)
clazz
.
getConstructor
(
)
.
newInstance
(
)
;
}
catch
(
final
ReflectiveOperationException
ie
)
{
throw
new
JXPathContextFactoryConfigurationError
(
ie
)
;
}
return
factoryImpl
;
}
public
abstract
JXPathContext
newContext
(
JXPathContext
parentContext
,
Object
contextBean
)
;
private
static
boolean
debug
=
false
;
static
{
try
{
debug
=
System
.
getProperty
(
"jxpath.debug"
)
!=
null
;
}
catch
(
final
SecurityException
ignore
)
{
}
}
private
static
String
findFactory
(
final
String
property
,
final
String
defaultFactory
)
{
try
{
final
String
systemProp
=
System
.
getProperty
(
property
)
;
if
(
systemProp
!=
null
)
{
if
(
debug
)
{
System
.
err
.
println
(
"JXPath: found system property"
+
systemProp
)
;
}
return
systemProp
;
}
}
catch
(
final
SecurityException
ignore
)
{
}
try
{
final
String
javah
=
System
.
getProperty
(
"java.home"
)
;
final
String
configFile
=
javah
+
File
.
separator
+
"lib"
+
File
.
separator
+
"jxpath.properties"
;
final
File
f
=
new
File
(
configFile
)
;
if
(
f
.
exists
(
)
)
{
final
Properties
props
=
new
Properties
(
)
;
final
FileInputStream
fis
=
new
FileInputStream
(
f
)
;
try
{
props
.
load
(
fis
)
;
}
finally
{
if
(
fis
!=
null
)
{
try
{
fis
.
close
(
)
;
}
catch
(
final
IOException
ignore
)
{
}
}
}
final
String
factory
=
props
.
getProperty
(
property
)
;
if
(
factory
!=
null
)
{
if
(
debug
)
{
System
.
err
.
println
(
"JXPath: found java.home property "
+
factory
)
;
}
return
factory
;
}
}
}
catch
(
final
IOException
ex
)
{
if
(
debug
)
{
ex
.
printStackTrace
(
)
;
}
}
final
String
serviceId
=
"META-INF/services/"
+
property
;
try
{
final
ClassLoader
cl
=
JXPathContextFactory
.
class
.
getClassLoader
(
)
;
InputStream
is
;
if
(
cl
==
null
)
{
is
=
ClassLoader
.
getSystemResourceAsStream
(
serviceId
)
;
}
else
{
is
=
cl
.
getResourceAsStream
(
serviceId
)
;
}
if
(
is
!=
null
)
{
if
(
debug
)
{
System
.
err
.
println
(
"JXPath: found  "
+
serviceId
)
;
}
final
BufferedReader
rd
=
new
BufferedReader
(
new
InputStreamReader
(
is
,
"UTF-8"
)
)
;
String
factory
=
null
;
try
{
factory
=
rd
.
readLine
(
)
;
}
finally
{
try
{
rd
.
close
(
)
;
}
catch
(
final
IOException
ignore
)
{
}
}
if
(
factory
!=
null
&&
!
""
.
equals
(
factory
)
)
{
if
(
debug
)
{
System
.
err
.
println
(
"JXPath: loaded from services: "
+
factory
)
;
}
return
factory
;
}
}
}
catch
(
final
Exception
ex
)
{
if
(
debug
)
{
ex
.
printStackTrace
(
)
;
}
}
return
defaultFactory
;
}
}
<EOF>
