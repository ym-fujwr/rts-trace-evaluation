package
org
.
apache
.
commons
.
net
.
io
;
import
java
.
io
.
IOException
;
import
java
.
io
.
Writer
;
public
final
class
DotTerminatedMessageWriter
extends
Writer
{
private
static
final
int
NOTHING_SPECIAL_STATE
=
0
;
private
static
final
int
LAST_WAS_CR_STATE
=
1
;
private
static
final
int
LAST_WAS_NL_STATE
=
2
;
private
int
state
;
private
Writer
output
;
public
DotTerminatedMessageWriter
(
final
Writer
output
)
{
super
(
output
)
;
this
.
output
=
output
;
this
.
state
=
NOTHING_SPECIAL_STATE
;
}
@
Override
public
void
close
(
)
throws
IOException
{
synchronized
(
lock
)
{
if
(
output
==
null
)
{
return
;
}
if
(
state
==
LAST_WAS_CR_STATE
)
{
output
.
write
(
'\n'
)
;
}
else
if
(
state
!=
LAST_WAS_NL_STATE
)
{
output
.
write
(
"\r\n"
)
;
}
output
.
write
(
".\r\n"
)
;
output
.
flush
(
)
;
output
=
null
;
}
}
@
Override
public
void
flush
(
)
throws
IOException
{
synchronized
(
lock
)
{
output
.
flush
(
)
;
}
}
@
Override
public
void
write
(
final
char
[
]
buffer
)
throws
IOException
{
write
(
buffer
,
0
,
buffer
.
length
)
;
}
@
Override
public
void
write
(
final
char
[
]
buffer
,
int
offset
,
int
length
)
throws
IOException
{
synchronized
(
lock
)
{
while
(
length
--
>
0
)
{
write
(
buffer
[
offset
++
]
)
;
}
}
}
@
Override
public
void
write
(
final
int
ch
)
throws
IOException
{
synchronized
(
lock
)
{
switch
(
ch
)
{
case
'\r'
:
state
=
LAST_WAS_CR_STATE
;
output
.
write
(
'\r'
)
;
return
;
case
'\n'
:
if
(
state
!=
LAST_WAS_CR_STATE
)
{
output
.
write
(
'\r'
)
;
}
output
.
write
(
'\n'
)
;
state
=
LAST_WAS_NL_STATE
;
return
;
case
'.'
:
if
(
state
==
LAST_WAS_NL_STATE
)
{
output
.
write
(
'.'
)
;
}
default
:
state
=
NOTHING_SPECIAL_STATE
;
output
.
write
(
ch
)
;
}
}
}
@
Override
public
void
write
(
final
String
string
)
throws
IOException
{
write
(
string
.
toCharArray
(
)
)
;
}
@
Override
public
void
write
(
final
String
string
,
final
int
offset
,
final
int
length
)
throws
IOException
{
write
(
string
.
toCharArray
(
)
,
offset
,
length
)
;
}
}
<EOF>
