package
org
.
apache
.
commons
.
net
.
tftp
;
import
java
.
net
.
DatagramPacket
;
import
java
.
net
.
InetAddress
;
public
abstract
class
TFTPPacket
{
static
final
int
MIN_PACKET_SIZE
=
4
;
public
static
final
int
READ_REQUEST
=
1
;
public
static
final
int
WRITE_REQUEST
=
2
;
public
static
final
int
DATA
=
3
;
public
static
final
int
ACKNOWLEDGEMENT
=
4
;
public
static
final
int
ERROR
=
5
;
public
static
final
int
SEGMENT_SIZE
=
512
;
public
static
final
TFTPPacket
newTFTPPacket
(
final
DatagramPacket
datagram
)
throws
TFTPPacketException
{
final
byte
[
]
data
;
TFTPPacket
packet
=
null
;
if
(
datagram
.
getLength
(
)
<
MIN_PACKET_SIZE
)
{
throw
new
TFTPPacketException
(
"Bad packet. Datagram data length is too short."
)
;
}
data
=
datagram
.
getData
(
)
;
switch
(
data
[
1
]
)
{
case
READ_REQUEST
:
packet
=
new
TFTPReadRequestPacket
(
datagram
)
;
break
;
case
WRITE_REQUEST
:
packet
=
new
TFTPWriteRequestPacket
(
datagram
)
;
break
;
case
DATA
:
packet
=
new
TFTPDataPacket
(
datagram
)
;
break
;
case
ACKNOWLEDGEMENT
:
packet
=
new
TFTPAckPacket
(
datagram
)
;
break
;
case
ERROR
:
packet
=
new
TFTPErrorPacket
(
datagram
)
;
break
;
default
:
throw
new
TFTPPacketException
(
"Bad packet.  Invalid TFTP operator code."
)
;
}
return
packet
;
}
int
type
;
int
port
;
InetAddress
address
;
TFTPPacket
(
final
int
type
,
final
InetAddress
address
,
final
int
port
)
{
this
.
type
=
type
;
this
.
address
=
address
;
this
.
port
=
port
;
}
public
final
InetAddress
getAddress
(
)
{
return
address
;
}
public
final
int
getPort
(
)
{
return
port
;
}
public
final
int
getType
(
)
{
return
type
;
}
public
abstract
DatagramPacket
newDatagram
(
)
;
abstract
DatagramPacket
newDatagram
(
DatagramPacket
datagram
,
byte
[
]
data
)
;
public
final
void
setAddress
(
final
InetAddress
address
)
{
this
.
address
=
address
;
}
public
final
void
setPort
(
final
int
port
)
{
this
.
port
=
port
;
}
@
Override
public
String
toString
(
)
{
return
address
+
" "
+
port
+
" "
+
type
;
}
}
<EOF>
