package
org
.
apache
.
commons
.
net
.
ftp
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
BufferedWriter
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStreamReader
;
import
java
.
io
.
OutputStreamWriter
;
import
java
.
io
.
Reader
;
import
java
.
net
.
Inet4Address
;
import
java
.
net
.
Inet6Address
;
import
java
.
net
.
InetAddress
;
import
java
.
net
.
SocketException
;
import
java
.
net
.
SocketTimeoutException
;
import
java
.
util
.
ArrayList
;
import
org
.
apache
.
commons
.
net
.
MalformedServerReplyException
;
import
org
.
apache
.
commons
.
net
.
ProtocolCommandSupport
;
import
org
.
apache
.
commons
.
net
.
SocketClient
;
import
org
.
apache
.
commons
.
net
.
io
.
CRLFLineReader
;
import
org
.
apache
.
commons
.
net
.
util
.
NetConstants
;
public
class
FTP
extends
SocketClient
{
public
static
final
int
DEFAULT_DATA_PORT
=
20
;
public
static
final
int
DEFAULT_PORT
=
21
;
public
static
final
int
ASCII_FILE_TYPE
=
0
;
public
static
final
int
EBCDIC_FILE_TYPE
=
1
;
public
static
final
int
BINARY_FILE_TYPE
=
2
;
public
static
final
int
LOCAL_FILE_TYPE
=
3
;
public
static
final
int
NON_PRINT_TEXT_FORMAT
=
4
;
public
static
final
int
TELNET_TEXT_FORMAT
=
5
;
public
static
final
int
CARRIAGE_CONTROL_TEXT_FORMAT
=
6
;
public
static
final
int
FILE_STRUCTURE
=
7
;
public
static
final
int
RECORD_STRUCTURE
=
8
;
public
static
final
int
PAGE_STRUCTURE
=
9
;
public
static
final
int
STREAM_TRANSFER_MODE
=
10
;
public
static
final
int
BLOCK_TRANSFER_MODE
=
11
;
public
static
final
int
COMPRESSED_TRANSFER_MODE
=
12
;
public
static
final
String
DEFAULT_CONTROL_ENCODING
=
"ISO-8859-1"
;
public
static
final
int
REPLY_CODE_LEN
=
3
;
private
static
final
String
modes
=
"AEILNTCFRPSBC"
;
protected
int
_replyCode
;
protected
ArrayList
<
String
>
_replyLines
;
protected
boolean
_newReplyString
;
protected
String
_replyString
;
protected
String
_controlEncoding
;
protected
ProtocolCommandSupport
_commandSupport_
;
protected
boolean
strictMultilineParsing
;
private
boolean
strictReplyParsing
=
true
;
protected
BufferedReader
_controlInput_
;
protected
BufferedWriter
_controlOutput_
;
public
FTP
(
)
{
setDefaultPort
(
DEFAULT_PORT
)
;
_replyLines
=
new
ArrayList
<
>
(
)
;
_newReplyString
=
false
;
_replyString
=
null
;
_controlEncoding
=
DEFAULT_CONTROL_ENCODING
;
_commandSupport_
=
new
ProtocolCommandSupport
(
this
)
;
}
protected
void
__getReplyNoReport
(
)
throws
IOException
{
getReply
(
false
)
;
}
protected
void
__noop
(
)
throws
IOException
{
final
String
msg
=
buildMessage
(
FTPCmd
.
NOOP
.
getCommand
(
)
,
null
)
;
send
(
msg
)
;
__getReplyNoReport
(
)
;
}
@
Override
protected
void
_connectAction_
(
)
throws
IOException
{
_connectAction_
(
null
)
;
}
protected
void
_connectAction_
(
final
Reader
socketIsReader
)
throws
IOException
{
super
.
_connectAction_
(
)
;
if
(
socketIsReader
==
null
)
{
_controlInput_
=
new
CRLFLineReader
(
new
InputStreamReader
(
_input_
,
getControlEncoding
(
)
)
)
;
}
else
{
_controlInput_
=
new
CRLFLineReader
(
socketIsReader
)
;
}
_controlOutput_
=
new
BufferedWriter
(
new
OutputStreamWriter
(
_output_
,
getControlEncoding
(
)
)
)
;
if
(
connectTimeout
>
0
)
{
final
int
original
=
_socket_
.
getSoTimeout
(
)
;
_socket_
.
setSoTimeout
(
connectTimeout
)
;
try
{
getReply
(
)
;
if
(
FTPReply
.
isPositivePreliminary
(
_replyCode
)
)
{
getReply
(
)
;
}
}
catch
(
final
SocketTimeoutException
e
)
{
final
IOException
ioe
=
new
IOException
(
"Timed out waiting for initial connect reply"
)
;
ioe
.
initCause
(
e
)
;
throw
ioe
;
}
finally
{
_socket_
.
setSoTimeout
(
original
)
;
}
}
else
{
getReply
(
)
;
if
(
FTPReply
.
isPositivePreliminary
(
_replyCode
)
)
{
getReply
(
)
;
}
}
}
public
int
abor
(
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
ABOR
)
;
}
public
int
acct
(
final
String
account
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
ACCT
,
account
)
;
}
public
int
allo
(
final
int
bytes
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
ALLO
,
Integer
.
toString
(
bytes
)
)
;
}
public
int
allo
(
final
int
bytes
,
final
int
recordSize
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
ALLO
,
Integer
.
toString
(
bytes
)
+
" R "
+
Integer
.
toString
(
recordSize
)
)
;
}
public
int
allo
(
final
long
bytes
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
ALLO
,
Long
.
toString
(
bytes
)
)
;
}
public
int
allo
(
final
long
bytes
,
final
int
recordSize
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
ALLO
,
Long
.
toString
(
bytes
)
+
" R "
+
Integer
.
toString
(
recordSize
)
)
;
}
public
int
appe
(
final
String
pathname
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
APPE
,
pathname
)
;
}
private
String
buildMessage
(
final
String
command
,
final
String
args
)
{
final
StringBuilder
__commandBuffer
=
new
StringBuilder
(
)
;
__commandBuffer
.
append
(
command
)
;
if
(
args
!=
null
)
{
__commandBuffer
.
append
(
' '
)
;
__commandBuffer
.
append
(
args
)
;
}
__commandBuffer
.
append
(
SocketClient
.
NETASCII_EOL
)
;
return
__commandBuffer
.
toString
(
)
;
}
public
int
cdup
(
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
CDUP
)
;
}
public
int
cwd
(
final
String
directory
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
CWD
,
directory
)
;
}
public
int
dele
(
final
String
pathname
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
DELE
,
pathname
)
;
}
@
Override
public
void
disconnect
(
)
throws
IOException
{
super
.
disconnect
(
)
;
_controlInput_
=
null
;
_controlOutput_
=
null
;
_newReplyString
=
false
;
_replyString
=
null
;
}
public
int
eprt
(
final
InetAddress
host
,
final
int
port
)
throws
IOException
{
final
int
num
;
final
StringBuilder
info
=
new
StringBuilder
(
)
;
String
h
;
h
=
host
.
getHostAddress
(
)
;
num
=
h
.
indexOf
(
'%'
)
;
if
(
num
>
0
)
{
h
=
h
.
substring
(
0
,
num
)
;
}
info
.
append
(
"|"
)
;
if
(
host
instanceof
Inet4Address
)
{
info
.
append
(
"1"
)
;
}
else
if
(
host
instanceof
Inet6Address
)
{
info
.
append
(
"2"
)
;
}
info
.
append
(
"|"
)
;
info
.
append
(
h
)
;
info
.
append
(
"|"
)
;
info
.
append
(
port
)
;
info
.
append
(
"|"
)
;
return
sendCommand
(
FTPCmd
.
EPRT
,
info
.
toString
(
)
)
;
}
public
int
epsv
(
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
EPSV
)
;
}
public
int
feat
(
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
FEAT
)
;
}
@
Override
protected
ProtocolCommandSupport
getCommandSupport
(
)
{
return
_commandSupport_
;
}
public
String
getControlEncoding
(
)
{
return
_controlEncoding
;
}
public
int
getReply
(
)
throws
IOException
{
return
getReply
(
true
)
;
}
private
int
getReply
(
final
boolean
reportReply
)
throws
IOException
{
final
int
length
;
_newReplyString
=
true
;
_replyLines
.
clear
(
)
;
String
line
=
_controlInput_
.
readLine
(
)
;
if
(
line
==
null
)
{
throw
new
FTPConnectionClosedException
(
"Connection closed without indication."
)
;
}
length
=
line
.
length
(
)
;
if
(
length
<
REPLY_CODE_LEN
)
{
throw
new
MalformedServerReplyException
(
"Truncated server reply: "
+
line
)
;
}
String
code
=
null
;
try
{
code
=
line
.
substring
(
0
,
REPLY_CODE_LEN
)
;
_replyCode
=
Integer
.
parseInt
(
code
)
;
}
catch
(
final
NumberFormatException
e
)
{
throw
new
MalformedServerReplyException
(
"Could not parse response code.\nServer Reply: "
+
line
)
;
}
_replyLines
.
add
(
line
)
;
if
(
length
>
REPLY_CODE_LEN
)
{
final
char
sep
=
line
.
charAt
(
REPLY_CODE_LEN
)
;
if
(
sep
==
'-'
)
{
do
{
line
=
_controlInput_
.
readLine
(
)
;
if
(
line
==
null
)
{
throw
new
FTPConnectionClosedException
(
"Connection closed without indication."
)
;
}
_replyLines
.
add
(
line
)
;
}
while
(
isStrictMultilineParsing
(
)
?
strictCheck
(
line
,
code
)
:
lenientCheck
(
line
)
)
;
}
else
if
(
isStrictReplyParsing
(
)
)
{
if
(
length
==
REPLY_CODE_LEN
+
1
)
{
throw
new
MalformedServerReplyException
(
"Truncated server reply: '"
+
line
+
"'"
)
;
}
if
(
sep
!=
' '
)
{
throw
new
MalformedServerReplyException
(
"Invalid server reply: '"
+
line
+
"'"
)
;
}
}
}
else
if
(
isStrictReplyParsing
(
)
)
{
throw
new
MalformedServerReplyException
(
"Truncated server reply: '"
+
line
+
"'"
)
;
}
if
(
reportReply
)
{
fireReplyReceived
(
_replyCode
,
getReplyString
(
)
)
;
}
if
(
_replyCode
==
FTPReply
.
SERVICE_NOT_AVAILABLE
)
{
throw
new
FTPConnectionClosedException
(
"FTP response 421 received.  Server closed connection."
)
;
}
return
_replyCode
;
}
public
int
getReplyCode
(
)
{
return
_replyCode
;
}
public
String
getReplyString
(
)
{
final
StringBuilder
buffer
;
if
(
!
_newReplyString
)
{
return
_replyString
;
}
buffer
=
new
StringBuilder
(
256
)
;
for
(
final
String
line
:
_replyLines
)
{
buffer
.
append
(
line
)
;
buffer
.
append
(
SocketClient
.
NETASCII_EOL
)
;
}
_newReplyString
=
false
;
return
_replyString
=
buffer
.
toString
(
)
;
}
String
getReplyString
(
final
int
index
)
{
return
_replyLines
.
get
(
index
)
;
}
public
String
[
]
getReplyStrings
(
)
{
return
_replyLines
.
toArray
(
NetConstants
.
EMPTY_STRING_ARRAY
)
;
}
public
int
help
(
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
HELP
)
;
}
public
int
help
(
final
String
command
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
HELP
,
command
)
;
}
public
boolean
isStrictMultilineParsing
(
)
{
return
strictMultilineParsing
;
}
public
boolean
isStrictReplyParsing
(
)
{
return
strictReplyParsing
;
}
private
boolean
lenientCheck
(
final
String
line
)
{
return
!
(
line
.
length
(
)
>
REPLY_CODE_LEN
&&
line
.
charAt
(
REPLY_CODE_LEN
)
!=
'-'
&&
Character
.
isDigit
(
line
.
charAt
(
0
)
)
)
;
}
public
int
list
(
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
LIST
)
;
}
public
int
list
(
final
String
pathname
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
LIST
,
pathname
)
;
}
public
int
mdtm
(
final
String
file
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
MDTM
,
file
)
;
}
public
int
mfmt
(
final
String
pathname
,
final
String
timeval
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
MFMT
,
timeval
+
" "
+
pathname
)
;
}
public
int
mkd
(
final
String
pathname
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
MKD
,
pathname
)
;
}
public
int
mlsd
(
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
MLSD
)
;
}
public
int
mlsd
(
final
String
path
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
MLSD
,
path
)
;
}
public
int
mlst
(
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
MLST
)
;
}
public
int
mlst
(
final
String
path
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
MLST
,
path
)
;
}
public
int
mode
(
final
int
mode
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
MODE
,
modes
.
substring
(
mode
,
mode
+
1
)
)
;
}
public
int
nlst
(
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
NLST
)
;
}
public
int
nlst
(
final
String
pathname
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
NLST
,
pathname
)
;
}
public
int
noop
(
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
NOOP
)
;
}
public
int
pass
(
final
String
password
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
PASS
,
password
)
;
}
public
int
pasv
(
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
PASV
)
;
}
public
int
port
(
final
InetAddress
host
,
final
int
port
)
throws
IOException
{
int
num
;
final
StringBuilder
info
=
new
StringBuilder
(
24
)
;
info
.
append
(
host
.
getHostAddress
(
)
.
replace
(
'.'
,
','
)
)
;
num
=
port
>
>
>
8
;
info
.
append
(
','
)
;
info
.
append
(
num
)
;
info
.
append
(
','
)
;
num
=
port
&
0xff
;
info
.
append
(
num
)
;
return
sendCommand
(
FTPCmd
.
PORT
,
info
.
toString
(
)
)
;
}
public
int
pwd
(
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
PWD
)
;
}
public
int
quit
(
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
QUIT
)
;
}
public
int
rein
(
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
REIN
)
;
}
public
int
rest
(
final
String
marker
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
REST
,
marker
)
;
}
public
int
retr
(
final
String
pathname
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
RETR
,
pathname
)
;
}
public
int
rmd
(
final
String
pathname
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
RMD
,
pathname
)
;
}
public
int
rnfr
(
final
String
pathname
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
RNFR
,
pathname
)
;
}
public
int
rnto
(
final
String
pathname
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
RNTO
,
pathname
)
;
}
private
void
send
(
final
String
message
)
throws
IOException
,
FTPConnectionClosedException
,
SocketException
{
try
{
_controlOutput_
.
write
(
message
)
;
_controlOutput_
.
flush
(
)
;
}
catch
(
final
SocketException
e
)
{
if
(
!
isConnected
(
)
)
{
throw
new
FTPConnectionClosedException
(
"Connection unexpectedly closed."
)
;
}
throw
e
;
}
}
public
int
sendCommand
(
final
FTPCmd
command
)
throws
IOException
{
return
sendCommand
(
command
,
null
)
;
}
public
int
sendCommand
(
final
FTPCmd
command
,
final
String
args
)
throws
IOException
{
return
sendCommand
(
command
.
getCommand
(
)
,
args
)
;
}
public
int
sendCommand
(
final
int
command
)
throws
IOException
{
return
sendCommand
(
command
,
null
)
;
}
@
Deprecated
public
int
sendCommand
(
final
int
command
,
final
String
args
)
throws
IOException
{
return
sendCommand
(
FTPCommand
.
getCommand
(
command
)
,
args
)
;
}
public
int
sendCommand
(
final
String
command
)
throws
IOException
{
return
sendCommand
(
command
,
null
)
;
}
public
int
sendCommand
(
final
String
command
,
final
String
args
)
throws
IOException
{
if
(
_controlOutput_
==
null
)
{
throw
new
IOException
(
"Connection is not open"
)
;
}
final
String
message
=
buildMessage
(
command
,
args
)
;
send
(
message
)
;
fireCommandSent
(
command
,
message
)
;
return
getReply
(
)
;
}
public
void
setControlEncoding
(
final
String
encoding
)
{
_controlEncoding
=
encoding
;
}
public
void
setStrictMultilineParsing
(
final
boolean
strictMultilineParsing
)
{
this
.
strictMultilineParsing
=
strictMultilineParsing
;
}
public
void
setStrictReplyParsing
(
final
boolean
strictReplyParsing
)
{
this
.
strictReplyParsing
=
strictReplyParsing
;
}
public
int
site
(
final
String
parameters
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
SITE
,
parameters
)
;
}
public
int
size
(
final
String
parameters
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
SIZE
,
parameters
)
;
}
public
int
smnt
(
final
String
dir
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
SMNT
,
dir
)
;
}
public
int
stat
(
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
STAT
)
;
}
public
int
stat
(
final
String
pathname
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
STAT
,
pathname
)
;
}
public
int
stor
(
final
String
pathname
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
STOR
,
pathname
)
;
}
public
int
stou
(
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
STOU
)
;
}
public
int
stou
(
final
String
pathname
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
STOU
,
pathname
)
;
}
private
boolean
strictCheck
(
final
String
line
,
final
String
code
)
{
return
!
(
line
.
startsWith
(
code
)
&&
line
.
charAt
(
REPLY_CODE_LEN
)
==
' '
)
;
}
public
int
stru
(
final
int
structure
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
STRU
,
modes
.
substring
(
structure
,
structure
+
1
)
)
;
}
public
int
syst
(
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
SYST
)
;
}
public
int
type
(
final
int
fileType
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
TYPE
,
modes
.
substring
(
fileType
,
fileType
+
1
)
)
;
}
public
int
type
(
final
int
fileType
,
final
int
formatOrByteSize
)
throws
IOException
{
final
StringBuilder
arg
=
new
StringBuilder
(
)
;
arg
.
append
(
modes
.
charAt
(
fileType
)
)
;
arg
.
append
(
' '
)
;
if
(
fileType
==
LOCAL_FILE_TYPE
)
{
arg
.
append
(
formatOrByteSize
)
;
}
else
{
arg
.
append
(
modes
.
charAt
(
formatOrByteSize
)
)
;
}
return
sendCommand
(
FTPCmd
.
TYPE
,
arg
.
toString
(
)
)
;
}
public
int
user
(
final
String
username
)
throws
IOException
{
return
sendCommand
(
FTPCmd
.
USER
,
username
)
;
}
}
<EOF>
