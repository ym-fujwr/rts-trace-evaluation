package
org
.
apache
.
commons
.
net
.
ftp
.
parser
;
import
org
.
apache
.
commons
.
net
.
ftp
.
FTPClientConfig
;
import
org
.
apache
.
commons
.
net
.
ftp
.
FTPFileEntryParser
;
import
junit
.
framework
.
TestCase
;
public
class
DefaultFTPFileEntryParserFactoryTest
extends
TestCase
{
private
void
checkParserClass
(
final
FTPFileEntryParserFactory
fact
,
final
String
key
,
final
Class
<
?
>
expected
)
{
final
FTPClientConfig
config
=
key
==
null
?
new
FTPClientConfig
(
)
:
new
FTPClientConfig
(
key
)
;
final
FTPFileEntryParser
parser
=
fact
.
createFileEntryParser
(
config
)
;
assertNotNull
(
parser
)
;
assertTrue
(
"Expected "
+
expected
.
getCanonicalName
(
)
+
" got "
+
parser
.
getClass
(
)
.
getCanonicalName
(
)
,
expected
.
isInstance
(
parser
)
)
;
}
public
void
testDefaultParserFactory
(
)
{
final
DefaultFTPFileEntryParserFactory
factory
=
new
DefaultFTPFileEntryParserFactory
(
)
;
FTPFileEntryParser
parser
=
factory
.
createFileEntryParser
(
"unix"
)
;
assertTrue
(
parser
instanceof
UnixFTPEntryParser
)
;
parser
=
factory
.
createFileEntryParser
(
"UNIX"
)
;
assertTrue
(
parser
instanceof
UnixFTPEntryParser
)
;
assertFalse
(
(
(
UnixFTPEntryParser
)
parser
)
.
trimLeadingSpaces
)
;
parser
=
factory
.
createFileEntryParser
(
"UNIX_LTRIM"
)
;
assertTrue
(
parser
instanceof
UnixFTPEntryParser
)
;
assertTrue
(
(
(
UnixFTPEntryParser
)
parser
)
.
trimLeadingSpaces
)
;
parser
=
factory
.
createFileEntryParser
(
"Unix"
)
;
assertTrue
(
parser
instanceof
UnixFTPEntryParser
)
;
parser
=
factory
.
createFileEntryParser
(
"EnterpriseUnix"
)
;
assertTrue
(
parser
instanceof
UnixFTPEntryParser
)
;
assertFalse
(
parser
instanceof
EnterpriseUnixFTPEntryParser
)
;
parser
=
factory
.
createFileEntryParser
(
"UnixFTPEntryParser"
)
;
assertTrue
(
parser
instanceof
UnixFTPEntryParser
)
;
try
{
parser
=
factory
.
createFileEntryParser
(
"NT"
)
;
fail
(
"Exception should have been thrown. \"NT\" is not a recognized key"
)
;
}
catch
(
final
ParserInitializationException
pie
)
{
assertNull
(
pie
.
getCause
(
)
)
;
assertTrue
(
pie
.
getMessage
(
)
+
"should contain 'Unknown parser type:'"
,
pie
.
getMessage
(
)
.
contains
(
"Unknown parser type:"
)
)
;
}
parser
=
factory
.
createFileEntryParser
(
"WindowsNT"
)
;
assertTrue
(
parser
instanceof
CompositeFileEntryParser
)
;
parser
=
factory
.
createFileEntryParser
(
"ThigaVMSaMaJig"
)
;
assertTrue
(
parser
instanceof
VMSFTPEntryParser
)
;
parser
=
factory
.
createFileEntryParser
(
"OS/2"
)
;
assertTrue
(
parser
instanceof
OS2FTPEntryParser
)
;
parser
=
factory
.
createFileEntryParser
(
"OS/400"
)
;
assertTrue
(
parser
instanceof
CompositeFileEntryParser
)
;
parser
=
factory
.
createFileEntryParser
(
"AS/400"
)
;
assertTrue
(
parser
instanceof
CompositeFileEntryParser
)
;
parser
=
factory
.
createFileEntryParser
(
"UNKNOWN Type: L8"
)
;
try
{
parser
=
factory
.
createFileEntryParser
(
"OS2FTPFileEntryParser"
)
;
fail
(
"Exception should have been thrown. \"OS2FTPFileEntryParser\" is not a recognized key"
)
;
}
catch
(
final
ParserInitializationException
pie
)
{
assertNull
(
pie
.
getCause
(
)
)
;
}
parser
=
factory
.
createFileEntryParser
(
"org.apache.commons.net.ftp.parser.OS2FTPEntryParser"
)
;
assertTrue
(
parser
instanceof
OS2FTPEntryParser
)
;
try
{
factory
.
createFileEntryParser
(
"org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory"
)
;
fail
(
"Exception should have been thrown. \"DefaultFTPFileEntryParserFactory\" does not implement FTPFileEntryParser"
)
;
}
catch
(
final
ParserInitializationException
pie
)
{
final
Throwable
root
=
pie
.
getCause
(
)
;
assertTrue
(
root
instanceof
ClassCastException
)
;
}
try
{
factory
.
createFileEntryParser
(
"org.apache.commons.net.ftp.parser.FTPFileEntryParserFactory"
)
;
fail
(
"ParserInitializationException should have been thrown."
)
;
}
catch
(
final
ParserInitializationException
pie
)
{
final
Throwable
root
=
pie
.
getCause
(
)
;
assertTrue
(
root
instanceof
InstantiationException
)
;
}
try
{
factory
.
createFileEntryParser
(
"org.apache.commons.net.ftp.FTPFileEntryParserImpl"
)
;
fail
(
"ParserInitializationException should have been thrown."
)
;
}
catch
(
final
ParserInitializationException
pie
)
{
final
Throwable
root
=
pie
.
getCause
(
)
;
assertTrue
(
root
instanceof
InstantiationException
)
;
}
}
public
void
testDefaultParserFactoryConfig
(
)
throws
Exception
{
final
DefaultFTPFileEntryParserFactory
factory
=
new
DefaultFTPFileEntryParserFactory
(
)
;
try
{
factory
.
createFileEntryParser
(
(
FTPClientConfig
)
null
)
;
fail
(
"Expected NullPointerException"
)
;
}
catch
(
final
NullPointerException
npe
)
{
}
checkParserClass
(
factory
,
null
,
UnixFTPEntryParser
.
class
)
;
checkParserClass
(
factory
,
FTPClientConfig
.
SYST_OS400
,
OS400FTPEntryParser
.
class
)
;
checkParserClass
(
factory
,
FTPClientConfig
.
SYST_AS400
,
CompositeFileEntryParser
.
class
)
;
checkParserClass
(
factory
,
FTPClientConfig
.
SYST_L8
,
UnixFTPEntryParser
.
class
)
;
checkParserClass
(
factory
,
FTPClientConfig
.
SYST_MVS
,
MVSFTPEntryParser
.
class
)
;
checkParserClass
(
factory
,
FTPClientConfig
.
SYST_NETWARE
,
NetwareFTPEntryParser
.
class
)
;
checkParserClass
(
factory
,
FTPClientConfig
.
SYST_NT
,
NTFTPEntryParser
.
class
)
;
checkParserClass
(
factory
,
FTPClientConfig
.
SYST_OS2
,
OS2FTPEntryParser
.
class
)
;
checkParserClass
(
factory
,
FTPClientConfig
.
SYST_UNIX
,
UnixFTPEntryParser
.
class
)
;
checkParserClass
(
factory
,
FTPClientConfig
.
SYST_VMS
,
VMSFTPEntryParser
.
class
)
;
checkParserClass
(
factory
,
FTPClientConfig
.
SYST_MACOS_PETER
,
MacOsPeterFTPEntryParser
.
class
)
;
checkParserClass
(
factory
,
"WINDOWS"
,
NTFTPEntryParser
.
class
)
;
checkParserClass
(
factory
,
"Windows"
,
CompositeFileEntryParser
.
class
)
;
checkParserClass
(
factory
,
"OS/400"
,
OS400FTPEntryParser
.
class
)
;
checkParserClass
(
factory
,
"OS/400 v1"
,
CompositeFileEntryParser
.
class
)
;
}
}
<EOF>
