package
org
.
apache
.
commons
.
net
.
ftp
;
import
java
.
io
.
IOException
;
import
java
.
io
.
Serializable
;
import
java
.
time
.
Instant
;
import
java
.
util
.
Calendar
;
import
java
.
util
.
Date
;
import
java
.
util
.
Formatter
;
import
java
.
util
.
TimeZone
;
public
class
FTPFile
implements
Serializable
{
private
static
final
long
serialVersionUID
=
9010790363003271996L
;
public
static
final
int
FILE_TYPE
=
0
;
public
static
final
int
DIRECTORY_TYPE
=
1
;
public
static
final
int
SYMBOLIC_LINK_TYPE
=
2
;
public
static
final
int
UNKNOWN_TYPE
=
3
;
public
static
final
int
USER_ACCESS
=
0
;
public
static
final
int
GROUP_ACCESS
=
1
;
public
static
final
int
WORLD_ACCESS
=
2
;
public
static
final
int
READ_PERMISSION
=
0
;
public
static
final
int
WRITE_PERMISSION
=
1
;
public
static
final
int
EXECUTE_PERMISSION
=
2
;
private
int
type
=
UNKNOWN_TYPE
;
private
int
hardLinkCount
;
private
long
size
=
-
1
;
private
String
rawListing
;
private
String
user
=
""
;
private
String
group
=
""
;
private
String
name
;
private
String
link
;
private
Calendar
calendar
;
private
final
boolean
[
]
[
]
permissions
;
public
FTPFile
(
)
{
permissions
=
new
boolean
[
3
]
[
3
]
;
}
FTPFile
(
final
String
rawListing
)
{
this
.
permissions
=
null
;
this
.
rawListing
=
rawListing
;
}
private
char
formatType
(
)
{
switch
(
type
)
{
case
FILE_TYPE
:
return
'-'
;
case
DIRECTORY_TYPE
:
return
'd'
;
case
SYMBOLIC_LINK_TYPE
:
return
'l'
;
default
:
return
'?'
;
}
}
public
String
getGroup
(
)
{
return
group
;
}
public
int
getHardLinkCount
(
)
{
return
hardLinkCount
;
}
public
String
getLink
(
)
{
return
link
;
}
public
String
getName
(
)
{
return
name
;
}
public
String
getRawListing
(
)
{
return
rawListing
;
}
public
long
getSize
(
)
{
return
size
;
}
public
Calendar
getTimestamp
(
)
{
return
calendar
;
}
public
Instant
getTimestampInstant
(
)
{
return
calendar
==
null
?
null
:
calendar
.
toInstant
(
)
;
}
public
int
getType
(
)
{
return
type
;
}
public
String
getUser
(
)
{
return
user
;
}
public
boolean
hasPermission
(
final
int
access
,
final
int
permission
)
{
if
(
permissions
==
null
)
{
return
false
;
}
return
permissions
[
access
]
[
permission
]
;
}
public
boolean
isDirectory
(
)
{
return
type
==
DIRECTORY_TYPE
;
}
public
boolean
isFile
(
)
{
return
type
==
FILE_TYPE
;
}
public
boolean
isSymbolicLink
(
)
{
return
type
==
SYMBOLIC_LINK_TYPE
;
}
public
boolean
isUnknown
(
)
{
return
type
==
UNKNOWN_TYPE
;
}
public
boolean
isValid
(
)
{
return
permissions
!=
null
;
}
private
String
permissionToString
(
final
int
access
)
{
final
StringBuilder
sb
=
new
StringBuilder
(
)
;
if
(
hasPermission
(
access
,
READ_PERMISSION
)
)
{
sb
.
append
(
'r'
)
;
}
else
{
sb
.
append
(
'-'
)
;
}
if
(
hasPermission
(
access
,
WRITE_PERMISSION
)
)
{
sb
.
append
(
'w'
)
;
}
else
{
sb
.
append
(
'-'
)
;
}
if
(
hasPermission
(
access
,
EXECUTE_PERMISSION
)
)
{
sb
.
append
(
'x'
)
;
}
else
{
sb
.
append
(
'-'
)
;
}
return
sb
.
toString
(
)
;
}
public
void
setGroup
(
final
String
group
)
{
this
.
group
=
group
;
}
public
void
setHardLinkCount
(
final
int
links
)
{
this
.
hardLinkCount
=
links
;
}
public
void
setLink
(
final
String
link
)
{
this
.
link
=
link
;
}
public
void
setName
(
final
String
name
)
{
this
.
name
=
name
;
}
public
void
setPermission
(
final
int
access
,
final
int
permission
,
final
boolean
value
)
{
permissions
[
access
]
[
permission
]
=
value
;
}
public
void
setRawListing
(
final
String
rawListing
)
{
this
.
rawListing
=
rawListing
;
}
public
void
setSize
(
final
long
size
)
{
this
.
size
=
size
;
}
public
void
setTimestamp
(
final
Calendar
date
)
{
this
.
calendar
=
date
;
}
public
void
setType
(
final
int
type
)
{
this
.
type
=
type
;
}
public
void
setUser
(
final
String
user
)
{
this
.
user
=
user
;
}
public
String
toFormattedString
(
)
{
return
toFormattedString
(
null
)
;
}
public
String
toFormattedString
(
final
String
timezone
)
{
if
(
!
isValid
(
)
)
{
return
"[Invalid: could not parse file entry]"
;
}
final
StringBuilder
sb
=
new
StringBuilder
(
)
;
try
(
final
Formatter
fmt
=
new
Formatter
(
sb
)
)
{
sb
.
append
(
formatType
(
)
)
;
sb
.
append
(
permissionToString
(
USER_ACCESS
)
)
;
sb
.
append
(
permissionToString
(
GROUP_ACCESS
)
)
;
sb
.
append
(
permissionToString
(
WORLD_ACCESS
)
)
;
fmt
.
format
(
" %4d"
,
Integer
.
valueOf
(
getHardLinkCount
(
)
)
)
;
fmt
.
format
(
" %-8s %-8s"
,
getUser
(
)
,
getGroup
(
)
)
;
fmt
.
format
(
" %8d"
,
Long
.
valueOf
(
getSize
(
)
)
)
;
Calendar
timestamp
=
getTimestamp
(
)
;
if
(
timestamp
!=
null
)
{
if
(
timezone
!=
null
)
{
final
TimeZone
newZone
=
TimeZone
.
getTimeZone
(
timezone
)
;
if
(
!
newZone
.
equals
(
timestamp
.
getTimeZone
(
)
)
)
{
final
Date
original
=
timestamp
.
getTime
(
)
;
final
Calendar
newStamp
=
Calendar
.
getInstance
(
newZone
)
;
newStamp
.
setTime
(
original
)
;
timestamp
=
newStamp
;
}
}
fmt
.
format
(
" %1$tY-%1$tm-%1$td"
,
timestamp
)
;
if
(
timestamp
.
isSet
(
Calendar
.
HOUR_OF_DAY
)
)
{
fmt
.
format
(
" %1$tH"
,
timestamp
)
;
if
(
timestamp
.
isSet
(
Calendar
.
MINUTE
)
)
{
fmt
.
format
(
":%1$tM"
,
timestamp
)
;
if
(
timestamp
.
isSet
(
Calendar
.
SECOND
)
)
{
fmt
.
format
(
":%1$tS"
,
timestamp
)
;
if
(
timestamp
.
isSet
(
Calendar
.
MILLISECOND
)
)
{
fmt
.
format
(
".%1$tL"
,
timestamp
)
;
}
}
}
fmt
.
format
(
" %1$tZ"
,
timestamp
)
;
}
}
sb
.
append
(
' '
)
;
sb
.
append
(
getName
(
)
)
;
}
return
sb
.
toString
(
)
;
}
@
Override
public
String
toString
(
)
{
return
getRawListing
(
)
;
}
private
void
writeObject
(
final
java
.
io
.
ObjectOutputStream
out
)
throws
IOException
{
throw
new
UnsupportedOperationException
(
"Serialization is not supported"
)
;
}
private
void
readObject
(
final
java
.
io
.
ObjectInputStream
in
)
throws
IOException
,
ClassNotFoundException
{
throw
new
UnsupportedOperationException
(
"Serialization is not supported"
)
;
}
}
<EOF>
