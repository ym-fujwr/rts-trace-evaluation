package
org
.
apache
.
commons
.
net
.
tftp
;
import
java
.
net
.
DatagramPacket
;
import
java
.
net
.
InetAddress
;
public
abstract
class
TFTPRequestPacket
extends
TFTPPacket
{
static
final
String
[
]
modeStrings
=
{
"netascii"
,
"octet"
}
;
private
static
final
byte
[
]
modeBytes
[
]
=
{
{
(
byte
)
'n'
,
(
byte
)
'e'
,
(
byte
)
't'
,
(
byte
)
'a'
,
(
byte
)
's'
,
(
byte
)
'c'
,
(
byte
)
'i'
,
(
byte
)
'i'
,
0
}
,
{
(
byte
)
'o'
,
(
byte
)
'c'
,
(
byte
)
't'
,
(
byte
)
'e'
,
(
byte
)
't'
,
0
}
}
;
private
final
int
mode
;
private
final
String
fileName
;
TFTPRequestPacket
(
final
InetAddress
destination
,
final
int
port
,
final
int
type
,
final
String
fileName
,
final
int
mode
)
{
super
(
type
,
destination
,
port
)
;
this
.
fileName
=
fileName
;
this
.
mode
=
mode
;
}
TFTPRequestPacket
(
final
int
type
,
final
DatagramPacket
datagram
)
throws
TFTPPacketException
{
super
(
type
,
datagram
.
getAddress
(
)
,
datagram
.
getPort
(
)
)
;
final
byte
[
]
data
=
datagram
.
getData
(
)
;
if
(
getType
(
)
!=
data
[
1
]
)
{
throw
new
TFTPPacketException
(
"TFTP operator code does not match type."
)
;
}
final
StringBuilder
buffer
=
new
StringBuilder
(
)
;
int
index
=
2
;
int
length
=
datagram
.
getLength
(
)
;
while
(
index
<
length
&&
data
[
index
]
!=
0
)
{
buffer
.
append
(
(
char
)
data
[
index
]
)
;
++
index
;
}
this
.
fileName
=
buffer
.
toString
(
)
;
if
(
index
>=
length
)
{
throw
new
TFTPPacketException
(
"Bad file name and mode format."
)
;
}
buffer
.
setLength
(
0
)
;
++
index
;
while
(
index
<
length
&&
data
[
index
]
!=
0
)
{
buffer
.
append
(
(
char
)
data
[
index
]
)
;
++
index
;
}
final
String
modeString
=
buffer
.
toString
(
)
.
toLowerCase
(
java
.
util
.
Locale
.
ENGLISH
)
;
length
=
modeStrings
.
length
;
int
mode
=
0
;
for
(
index
=
0
;
index
<
length
;
index
++
)
{
if
(
modeString
.
equals
(
modeStrings
[
index
]
)
)
{
mode
=
index
;
break
;
}
}
this
.
mode
=
mode
;
if
(
index
>=
length
)
{
throw
new
TFTPPacketException
(
"Unrecognized TFTP transfer mode: "
+
modeString
)
;
}
}
public
final
String
getFilename
(
)
{
return
fileName
;
}
public
final
int
getMode
(
)
{
return
mode
;
}
@
Override
public
final
DatagramPacket
newDatagram
(
)
{
final
int
fileLength
;
final
int
modeLength
;
final
byte
[
]
data
;
fileLength
=
fileName
.
length
(
)
;
modeLength
=
modeBytes
[
mode
]
.
length
;
data
=
new
byte
[
fileLength
+
modeLength
+
4
]
;
data
[
0
]
=
0
;
data
[
1
]
=
(
byte
)
type
;
System
.
arraycopy
(
fileName
.
getBytes
(
)
,
0
,
data
,
2
,
fileLength
)
;
data
[
fileLength
+
2
]
=
0
;
System
.
arraycopy
(
modeBytes
[
mode
]
,
0
,
data
,
fileLength
+
3
,
modeLength
)
;
return
new
DatagramPacket
(
data
,
data
.
length
,
address
,
port
)
;
}
@
Override
final
DatagramPacket
newDatagram
(
final
DatagramPacket
datagram
,
final
byte
[
]
data
)
{
final
int
fileLength
;
final
int
modeLength
;
fileLength
=
fileName
.
length
(
)
;
modeLength
=
modeBytes
[
mode
]
.
length
;
data
[
0
]
=
0
;
data
[
1
]
=
(
byte
)
type
;
System
.
arraycopy
(
fileName
.
getBytes
(
)
,
0
,
data
,
2
,
fileLength
)
;
data
[
fileLength
+
2
]
=
0
;
System
.
arraycopy
(
modeBytes
[
mode
]
,
0
,
data
,
fileLength
+
3
,
modeLength
)
;
datagram
.
setAddress
(
address
)
;
datagram
.
setPort
(
port
)
;
datagram
.
setData
(
data
)
;
datagram
.
setLength
(
fileLength
+
modeLength
+
3
)
;
return
datagram
;
}
}
<EOF>
