package
org
.
apache
.
commons
.
net
.
io
;
import
java
.
io
.
FilterOutputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
OutputStream
;
public
final
class
FromNetASCIIOutputStream
extends
FilterOutputStream
{
private
boolean
lastWasCR
;
public
FromNetASCIIOutputStream
(
final
OutputStream
output
)
{
super
(
output
)
;
lastWasCR
=
false
;
}
@
Override
public
synchronized
void
close
(
)
throws
IOException
{
if
(
FromNetASCIIInputStream
.
_noConversionRequired
)
{
super
.
close
(
)
;
return
;
}
if
(
lastWasCR
)
{
out
.
write
(
'\r'
)
;
}
super
.
close
(
)
;
}
@
Override
public
synchronized
void
write
(
final
byte
buffer
[
]
)
throws
IOException
{
write
(
buffer
,
0
,
buffer
.
length
)
;
}
@
Override
public
synchronized
void
write
(
final
byte
buffer
[
]
,
int
offset
,
int
length
)
throws
IOException
{
if
(
FromNetASCIIInputStream
.
_noConversionRequired
)
{
out
.
write
(
buffer
,
offset
,
length
)
;
return
;
}
while
(
length
--
>
0
)
{
writeInt
(
buffer
[
offset
++
]
)
;
}
}
@
Override
public
synchronized
void
write
(
final
int
ch
)
throws
IOException
{
if
(
FromNetASCIIInputStream
.
_noConversionRequired
)
{
out
.
write
(
ch
)
;
return
;
}
writeInt
(
ch
)
;
}
private
void
writeInt
(
final
int
ch
)
throws
IOException
{
switch
(
ch
)
{
case
'\r'
:
lastWasCR
=
true
;
break
;
case
'\n'
:
if
(
lastWasCR
)
{
out
.
write
(
FromNetASCIIInputStream
.
_lineSeparatorBytes
)
;
lastWasCR
=
false
;
break
;
}
lastWasCR
=
false
;
out
.
write
(
'\n'
)
;
break
;
default
:
if
(
lastWasCR
)
{
out
.
write
(
'\r'
)
;
lastWasCR
=
false
;
}
out
.
write
(
ch
)
;
break
;
}
}
}
<EOF>
