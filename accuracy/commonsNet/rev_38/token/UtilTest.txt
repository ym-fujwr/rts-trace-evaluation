package
org
.
apache
.
commons
.
net
.
util
;
import
java
.
io
.
ByteArrayInputStream
;
import
java
.
io
.
ByteArrayOutputStream
;
import
java
.
io
.
CharArrayReader
;
import
java
.
io
.
CharArrayWriter
;
import
java
.
io
.
Closeable
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
OutputStream
;
import
java
.
io
.
Reader
;
import
java
.
io
.
Writer
;
import
java
.
net
.
Socket
;
import
org
.
apache
.
commons
.
net
.
io
.
CopyStreamEvent
;
import
org
.
apache
.
commons
.
net
.
io
.
CopyStreamListener
;
import
org
.
apache
.
commons
.
net
.
io
.
Util
;
import
org
.
junit
.
Assert
;
import
org
.
junit
.
Test
;
public
class
UtilTest
{
static
class
CSL
implements
CopyStreamListener
{
final
long
expectedTotal
;
final
int
expectedBytes
;
final
long
expectedSize
;
CSL
(
final
long
totalBytesTransferred
,
final
int
bytesTransferred
,
final
long
streamSize
)
{
this
.
expectedTotal
=
totalBytesTransferred
;
this
.
expectedBytes
=
bytesTransferred
;
this
.
expectedSize
=
streamSize
;
}
@
Override
public
void
bytesTransferred
(
final
CopyStreamEvent
event
)
{
}
@
Override
public
void
bytesTransferred
(
final
long
totalBytesTransferred
,
final
int
bytesTransferred
,
final
long
streamSize
)
{
Assert
.
assertEquals
(
"Wrong total"
,
expectedTotal
,
totalBytesTransferred
)
;
Assert
.
assertEquals
(
"Wrong streamSize"
,
expectedSize
,
streamSize
)
;
Assert
.
assertEquals
(
"Wrong bytes"
,
expectedBytes
,
bytesTransferred
)
;
}
}
static
class
CSLtotal
implements
CopyStreamListener
{
final
long
expectedTotal
;
final
long
expectedBytes
;
volatile
long
totalBytesTransferredTotal
;
volatile
long
bytesTransferredTotal
;
CSLtotal
(
final
long
totalBytesTransferred
,
final
long
bytesTransferred
)
{
this
.
expectedTotal
=
totalBytesTransferred
;
this
.
expectedBytes
=
bytesTransferred
;
}
@
Override
public
void
bytesTransferred
(
final
CopyStreamEvent
event
)
{
}
@
Override
public
void
bytesTransferred
(
final
long
totalBytesTransferred
,
final
int
bytesTransferred
,
final
long
streamSize
)
{
Assert
.
assertEquals
(
"Wrong bytes"
,
expectedBytes
,
bytesTransferred
)
;
this
.
totalBytesTransferredTotal
=
totalBytesTransferred
;
this
.
bytesTransferredTotal
+=
bytesTransferred
;
}
void
checkExpected
(
)
{
Assert
.
assertEquals
(
"Wrong totalBytesTransferred total"
,
expectedTotal
,
totalBytesTransferredTotal
)
;
Assert
.
assertEquals
(
"Total should equal sum of parts"
,
totalBytesTransferredTotal
,
bytesTransferredTotal
)
;
}
}
private
final
Writer
dest
=
new
CharArrayWriter
(
)
;
private
final
Reader
source
=
new
CharArrayReader
(
new
char
[
]
{
'a'
}
)
;
private
final
InputStream
src
=
new
ByteArrayInputStream
(
new
byte
[
]
{
'z'
}
)
;
private
final
OutputStream
dst
=
new
ByteArrayOutputStream
(
)
;
@
Test
public
void
testcloseQuietly
(
)
{
Util
.
closeQuietly
(
(
Closeable
)
null
)
;
Util
.
closeQuietly
(
(
Socket
)
null
)
;
}
@
Test
public
void
testNET550_Reader
(
)
throws
Exception
{
final
char
[
]
buff
=
new
char
[
]
{
'a'
,
'b'
,
'c'
,
'd'
}
;
final
int
bufflen
=
buff
.
length
;
{
final
Reader
rdr
=
new
CharArrayReader
(
buff
)
;
final
CSLtotal
listener
=
new
CSLtotal
(
bufflen
,
1
)
;
Util
.
copyReader
(
rdr
,
dest
,
1
,
0
,
listener
)
;
listener
.
checkExpected
(
)
;
}
{
final
Reader
rdr
=
new
CharArrayReader
(
buff
)
;
final
CSLtotal
listener
=
new
CSLtotal
(
bufflen
,
2
)
;
Util
.
copyReader
(
rdr
,
dest
,
2
,
0
,
listener
)
;
listener
.
checkExpected
(
)
;
}
{
final
Reader
rdr
=
new
CharArrayReader
(
buff
)
;
final
CSLtotal
listener
=
new
CSLtotal
(
bufflen
,
bufflen
)
;
Util
.
copyReader
(
rdr
,
dest
,
20
,
0
,
listener
)
;
listener
.
checkExpected
(
)
;
}
{
final
Reader
rdr
=
new
CharArrayReader
(
buff
)
;
final
CSLtotal
listener
=
new
CSLtotal
(
bufflen
,
bufflen
)
;
Util
.
copyReader
(
rdr
,
dest
,
-
1
,
0
,
listener
)
;
listener
.
checkExpected
(
)
;
}
{
final
Reader
rdr
=
new
CharArrayReader
(
buff
)
;
final
CSLtotal
listener
=
new
CSLtotal
(
bufflen
,
bufflen
)
;
Util
.
copyReader
(
rdr
,
dest
,
0
,
0
,
listener
)
;
listener
.
checkExpected
(
)
;
}
}
@
Test
public
void
testNET550_Stream
(
)
throws
Exception
{
final
byte
[
]
buff
=
new
byte
[
]
{
'a'
,
'b'
,
'c'
,
'd'
}
;
final
int
bufflen
=
buff
.
length
;
{
final
InputStream
is
=
new
ByteArrayInputStream
(
buff
)
;
final
CSLtotal
listener
=
new
CSLtotal
(
bufflen
,
1
)
;
Util
.
copyStream
(
is
,
dst
,
1
,
0
,
listener
)
;
listener
.
checkExpected
(
)
;
}
{
final
InputStream
is
=
new
ByteArrayInputStream
(
buff
)
;
final
CSLtotal
listener
=
new
CSLtotal
(
bufflen
,
2
)
;
Util
.
copyStream
(
is
,
dst
,
2
,
0
,
listener
)
;
listener
.
checkExpected
(
)
;
}
{
final
InputStream
is
=
new
ByteArrayInputStream
(
buff
)
;
final
CSLtotal
listener
=
new
CSLtotal
(
bufflen
,
bufflen
)
;
Util
.
copyStream
(
is
,
dst
,
20
,
0
,
listener
)
;
listener
.
checkExpected
(
)
;
}
{
final
InputStream
is
=
new
ByteArrayInputStream
(
buff
)
;
final
CSLtotal
listener
=
new
CSLtotal
(
bufflen
,
bufflen
)
;
Util
.
copyStream
(
is
,
dst
,
-
1
,
0
,
listener
)
;
listener
.
checkExpected
(
)
;
}
{
final
InputStream
is
=
new
ByteArrayInputStream
(
buff
)
;
final
CSLtotal
listener
=
new
CSLtotal
(
bufflen
,
bufflen
)
;
Util
.
copyStream
(
is
,
dst
,
0
,
0
,
listener
)
;
listener
.
checkExpected
(
)
;
}
}
@
Test
public
void
testReader_1
(
)
throws
Exception
{
final
long
streamSize
=
0
;
final
int
bufferSize
=
-
1
;
Util
.
copyReader
(
source
,
dest
,
bufferSize
,
streamSize
,
new
CSL
(
1
,
1
,
streamSize
)
)
;
}
@
Test
public
void
testReader0
(
)
throws
Exception
{
final
long
streamSize
=
0
;
final
int
bufferSize
=
0
;
Util
.
copyReader
(
source
,
dest
,
bufferSize
,
streamSize
,
new
CSL
(
1
,
1
,
streamSize
)
)
;
}
@
Test
public
void
testReader1
(
)
throws
Exception
{
final
long
streamSize
=
0
;
final
int
bufferSize
=
1
;
Util
.
copyReader
(
source
,
dest
,
bufferSize
,
streamSize
,
new
CSL
(
1
,
1
,
streamSize
)
)
;
}
@
Test
public
void
testStream_1
(
)
throws
Exception
{
final
long
streamSize
=
0
;
final
int
bufferSize
=
-
1
;
Util
.
copyStream
(
src
,
dst
,
bufferSize
,
streamSize
,
new
CSL
(
1
,
1
,
streamSize
)
)
;
}
@
Test
public
void
testStream0
(
)
throws
Exception
{
final
long
streamSize
=
0
;
final
int
bufferSize
=
0
;
Util
.
copyStream
(
src
,
dst
,
bufferSize
,
streamSize
,
new
CSL
(
1
,
1
,
streamSize
)
)
;
}
@
Test
public
void
testStream1
(
)
throws
Exception
{
final
long
streamSize
=
0
;
final
int
bufferSize
=
1
;
Util
.
copyStream
(
src
,
dst
,
bufferSize
,
streamSize
,
new
CSL
(
1
,
1
,
streamSize
)
)
;
}
}
<EOF>
