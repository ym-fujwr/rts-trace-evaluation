package
org
.
apache
.
commons
.
net
.
telnet
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
OutputStream
;
import
java
.
net
.
ServerSocket
;
import
java
.
net
.
Socket
;
public
class
TelnetTestSimpleServer
implements
Runnable
{
ServerSocket
serverSocket
;
Socket
clientSocket
;
Thread
listener
;
public
TelnetTestSimpleServer
(
final
int
port
)
throws
IOException
{
serverSocket
=
new
ServerSocket
(
port
)
;
listener
=
new
Thread
(
this
)
;
listener
.
start
(
)
;
}
public
void
disconnect
(
)
{
if
(
clientSocket
==
null
)
{
return
;
}
synchronized
(
clientSocket
)
{
try
{
clientSocket
.
notify
(
)
;
}
catch
(
final
Exception
e
)
{
System
.
err
.
println
(
"Exception in notify, "
+
e
.
getMessage
(
)
)
;
}
}
}
public
InputStream
getInputStream
(
)
throws
IOException
{
if
(
clientSocket
!=
null
)
{
return
clientSocket
.
getInputStream
(
)
;
}
return
null
;
}
public
OutputStream
getOutputStream
(
)
throws
IOException
{
if
(
clientSocket
!=
null
)
{
return
clientSocket
.
getOutputStream
(
)
;
}
return
null
;
}
@
Override
public
void
run
(
)
{
boolean
bError
=
false
;
while
(
!
bError
)
{
try
{
clientSocket
=
serverSocket
.
accept
(
)
;
synchronized
(
clientSocket
)
{
try
{
clientSocket
.
wait
(
)
;
}
catch
(
final
Exception
e
)
{
System
.
err
.
println
(
"Exception in wait, "
+
e
.
getMessage
(
)
)
;
}
try
{
clientSocket
.
close
(
)
;
}
catch
(
final
Exception
e
)
{
System
.
err
.
println
(
"Exception in close, "
+
e
.
getMessage
(
)
)
;
}
}
}
catch
(
final
IOException
e
)
{
bError
=
true
;
}
}
try
{
serverSocket
.
close
(
)
;
}
catch
(
final
Exception
e
)
{
System
.
err
.
println
(
"Exception in close, "
+
e
.
getMessage
(
)
)
;
}
}
public
void
stop
(
)
{
listener
.
interrupt
(
)
;
try
{
serverSocket
.
close
(
)
;
}
catch
(
final
Exception
e
)
{
System
.
err
.
println
(
"Exception in close, "
+
e
.
getMessage
(
)
)
;
}
}
}
<EOF>
