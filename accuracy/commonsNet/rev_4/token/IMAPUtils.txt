package
org
.
apache
.
commons
.
net
.
examples
.
mail
;
import
java
.
io
.
IOException
;
import
java
.
net
.
URI
;
import
org
.
apache
.
commons
.
net
.
ProtocolCommandListener
;
import
org
.
apache
.
commons
.
net
.
imap
.
IMAPClient
;
import
org
.
apache
.
commons
.
net
.
imap
.
IMAPSClient
;
class
IMAPUtils
{
static
IMAPClient
imapLogin
(
final
URI
uri
,
final
int
defaultTimeout
,
final
ProtocolCommandListener
listener
)
throws
IOException
{
final
String
userInfo
=
uri
.
getUserInfo
(
)
;
if
(
userInfo
==
null
)
{
throw
new
IllegalArgumentException
(
"Missing userInfo details"
)
;
}
final
String
[
]
userpass
=
userInfo
.
split
(
":"
)
;
if
(
userpass
.
length
!=
2
)
{
throw
new
IllegalArgumentException
(
"Invalid userInfo details: '"
+
userInfo
+
"'"
)
;
}
final
String
username
=
userpass
[
0
]
;
String
password
=
userpass
[
1
]
;
password
=
Utils
.
getPassword
(
username
,
password
)
;
final
IMAPClient
imap
;
final
String
scheme
=
uri
.
getScheme
(
)
;
if
(
"imaps"
.
equalsIgnoreCase
(
scheme
)
)
{
System
.
out
.
println
(
"Using secure protocol"
)
;
imap
=
new
IMAPSClient
(
true
)
;
}
else
if
(
"imap"
.
equalsIgnoreCase
(
scheme
)
)
{
imap
=
new
IMAPClient
(
)
;
}
else
{
throw
new
IllegalArgumentException
(
"Invalid protocol: "
+
scheme
)
;
}
final
int
port
=
uri
.
getPort
(
)
;
if
(
port
!=
-
1
)
{
imap
.
setDefaultPort
(
port
)
;
}
imap
.
setDefaultTimeout
(
defaultTimeout
)
;
if
(
listener
!=
null
)
{
imap
.
addProtocolCommandListener
(
listener
)
;
}
final
String
server
=
uri
.
getHost
(
)
;
System
.
out
.
println
(
"Connecting to server "
+
server
+
" on "
+
imap
.
getDefaultPort
(
)
)
;
try
{
imap
.
connect
(
server
)
;
System
.
out
.
println
(
"Successfully connected"
)
;
}
catch
(
final
IOException
e
)
{
throw
new
RuntimeException
(
"Could not connect to server."
,
e
)
;
}
if
(
!
imap
.
login
(
username
,
password
)
)
{
imap
.
disconnect
(
)
;
throw
new
RuntimeException
(
"Could not login to server. Check login details."
)
;
}
return
imap
;
}
}
<EOF>
