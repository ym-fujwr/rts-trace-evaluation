package
org
.
apache
.
commons
.
net
;
import
java
.
net
.
DatagramSocket
;
import
java
.
net
.
InetAddress
;
import
java
.
net
.
SocketException
;
import
java
.
nio
.
charset
.
Charset
;
public
abstract
class
DatagramSocketClient
{
private
static
final
DatagramSocketFactory
DEFAULT_SOCKET_FACTORY
=
new
DefaultDatagramSocketFactory
(
)
;
private
Charset
charset
=
Charset
.
defaultCharset
(
)
;
protected
int
_timeout_
;
protected
DatagramSocket
_socket_
;
protected
boolean
_isOpen_
;
protected
DatagramSocketFactory
_socketFactory_
;
public
DatagramSocketClient
(
)
{
_socket_
=
null
;
_timeout_
=
0
;
_isOpen_
=
false
;
_socketFactory_
=
DEFAULT_SOCKET_FACTORY
;
}
public
void
close
(
)
{
if
(
_socket_
!=
null
)
{
_socket_
.
close
(
)
;
}
_socket_
=
null
;
_isOpen_
=
false
;
}
public
Charset
getCharset
(
)
{
return
charset
;
}
@
Deprecated
public
String
getCharsetName
(
)
{
return
charset
.
name
(
)
;
}
public
int
getDefaultTimeout
(
)
{
return
_timeout_
;
}
public
InetAddress
getLocalAddress
(
)
{
return
_socket_
.
getLocalAddress
(
)
;
}
public
int
getLocalPort
(
)
{
return
_socket_
.
getLocalPort
(
)
;
}
public
int
getSoTimeout
(
)
throws
SocketException
{
return
_socket_
.
getSoTimeout
(
)
;
}
public
boolean
isOpen
(
)
{
return
_isOpen_
;
}
public
void
open
(
)
throws
SocketException
{
_socket_
=
_socketFactory_
.
createDatagramSocket
(
)
;
_socket_
.
setSoTimeout
(
_timeout_
)
;
_isOpen_
=
true
;
}
public
void
open
(
final
int
port
)
throws
SocketException
{
_socket_
=
_socketFactory_
.
createDatagramSocket
(
port
)
;
_socket_
.
setSoTimeout
(
_timeout_
)
;
_isOpen_
=
true
;
}
public
void
open
(
final
int
port
,
final
InetAddress
laddr
)
throws
SocketException
{
_socket_
=
_socketFactory_
.
createDatagramSocket
(
port
,
laddr
)
;
_socket_
.
setSoTimeout
(
_timeout_
)
;
_isOpen_
=
true
;
}
public
void
setCharset
(
final
Charset
charset
)
{
this
.
charset
=
charset
;
}
public
void
setDatagramSocketFactory
(
final
DatagramSocketFactory
factory
)
{
if
(
factory
==
null
)
{
_socketFactory_
=
DEFAULT_SOCKET_FACTORY
;
}
else
{
_socketFactory_
=
factory
;
}
}
public
void
setDefaultTimeout
(
final
int
timeout
)
{
_timeout_
=
timeout
;
}
public
void
setSoTimeout
(
final
int
timeout
)
throws
SocketException
{
_socket_
.
setSoTimeout
(
timeout
)
;
}
}
<EOF>
