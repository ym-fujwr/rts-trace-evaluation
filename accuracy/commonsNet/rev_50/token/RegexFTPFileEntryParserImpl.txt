package
org
.
apache
.
commons
.
net
.
ftp
.
parser
;
import
java
.
util
.
regex
.
MatchResult
;
import
java
.
util
.
regex
.
Matcher
;
import
java
.
util
.
regex
.
Pattern
;
import
java
.
util
.
regex
.
PatternSyntaxException
;
import
org
.
apache
.
commons
.
net
.
ftp
.
FTPFileEntryParserImpl
;
public
abstract
class
RegexFTPFileEntryParserImpl
extends
FTPFileEntryParserImpl
{
private
Pattern
pattern
;
private
MatchResult
result
;
protected
Matcher
_matcher_
;
public
RegexFTPFileEntryParserImpl
(
final
String
regex
)
{
compileRegex
(
regex
,
0
)
;
}
public
RegexFTPFileEntryParserImpl
(
final
String
regex
,
final
int
flags
)
{
compileRegex
(
regex
,
flags
)
;
}
private
void
compileRegex
(
final
String
regex
,
final
int
flags
)
{
try
{
pattern
=
Pattern
.
compile
(
regex
,
flags
)
;
}
catch
(
final
PatternSyntaxException
pse
)
{
throw
new
IllegalArgumentException
(
"Unparseable regex supplied: "
+
regex
)
;
}
}
public
int
getGroupCnt
(
)
{
if
(
this
.
result
==
null
)
{
return
0
;
}
return
this
.
result
.
groupCount
(
)
;
}
public
String
getGroupsAsString
(
)
{
final
StringBuilder
b
=
new
StringBuilder
(
)
;
for
(
int
i
=
1
;
i
<=
this
.
result
.
groupCount
(
)
;
i
++
)
{
b
.
append
(
i
)
.
append
(
") "
)
.
append
(
this
.
result
.
group
(
i
)
)
.
append
(
System
.
lineSeparator
(
)
)
;
}
return
b
.
toString
(
)
;
}
public
String
group
(
final
int
matchnum
)
{
if
(
this
.
result
==
null
)
{
return
null
;
}
return
this
.
result
.
group
(
matchnum
)
;
}
public
boolean
matches
(
final
String
s
)
{
this
.
result
=
null
;
_matcher_
=
pattern
.
matcher
(
s
)
;
if
(
_matcher_
.
matches
(
)
)
{
this
.
result
=
_matcher_
.
toMatchResult
(
)
;
}
return
null
!=
this
.
result
;
}
public
boolean
setRegex
(
final
String
regex
)
{
compileRegex
(
regex
,
0
)
;
return
true
;
}
public
boolean
setRegex
(
final
String
regex
,
final
int
flags
)
{
compileRegex
(
regex
,
flags
)
;
return
true
;
}
}
<EOF>
