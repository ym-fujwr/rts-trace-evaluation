package
org
.
apache
.
commons
.
net
.
ftp
.
parser
;
import
java
.
util
.
regex
.
Pattern
;
import
org
.
apache
.
commons
.
net
.
ftp
.
Configurable
;
import
org
.
apache
.
commons
.
net
.
ftp
.
FTPClientConfig
;
import
org
.
apache
.
commons
.
net
.
ftp
.
FTPFileEntryParser
;
public
class
DefaultFTPFileEntryParserFactory
implements
FTPFileEntryParserFactory
{
private
static
final
String
JAVA_IDENTIFIER
=
"\\p{javaJavaIdentifierStart}(\\p{javaJavaIdentifierPart})*"
;
private
static
final
String
JAVA_QUALIFIED_NAME
=
"("
+
JAVA_IDENTIFIER
+
"\\.)+"
+
JAVA_IDENTIFIER
;
private
static
final
Pattern
JAVA_QUALIFIED_NAME_PATTERN
=
Pattern
.
compile
(
JAVA_QUALIFIED_NAME
)
;
@
Override
public
FTPFileEntryParser
createFileEntryParser
(
final
FTPClientConfig
config
)
throws
ParserInitializationException
{
final
String
key
=
config
.
getServerSystemKey
(
)
;
return
createFileEntryParser
(
key
,
config
)
;
}
@
Override
public
FTPFileEntryParser
createFileEntryParser
(
final
String
key
)
{
if
(
key
==
null
)
{
throw
new
ParserInitializationException
(
"Parser key cannot be null"
)
;
}
return
createFileEntryParser
(
key
,
null
)
;
}
private
FTPFileEntryParser
createFileEntryParser
(
final
String
key
,
final
FTPClientConfig
config
)
{
FTPFileEntryParser
parser
=
null
;
if
(
JAVA_QUALIFIED_NAME_PATTERN
.
matcher
(
key
)
.
matches
(
)
)
{
try
{
final
Class
<
?
>
parserClass
=
Class
.
forName
(
key
)
;
try
{
parser
=
(
FTPFileEntryParser
)
parserClass
.
newInstance
(
)
;
}
catch
(
final
ClassCastException
e
)
{
throw
new
ParserInitializationException
(
parserClass
.
getName
(
)
+
" does not implement the interface "
+
"org.apache.commons.net.ftp.FTPFileEntryParser."
,
e
)
;
}
catch
(
final
Exception
|
ExceptionInInitializerError
e
)
{
throw
new
ParserInitializationException
(
"Error initializing parser"
,
e
)
;
}
}
catch
(
final
ClassNotFoundException
e
)
{
}
}
if
(
parser
==
null
)
{
final
String
ukey
=
key
.
toUpperCase
(
java
.
util
.
Locale
.
ENGLISH
)
;
if
(
ukey
.
contains
(
FTPClientConfig
.
SYST_UNIX_TRIM_LEADING
)
)
{
parser
=
new
UnixFTPEntryParser
(
config
,
true
)
;
}
else
if
(
ukey
.
contains
(
FTPClientConfig
.
SYST_UNIX
)
)
{
parser
=
new
UnixFTPEntryParser
(
config
,
false
)
;
}
else
if
(
ukey
.
contains
(
FTPClientConfig
.
SYST_VMS
)
)
{
parser
=
new
VMSVersioningFTPEntryParser
(
config
)
;
}
else
if
(
ukey
.
contains
(
FTPClientConfig
.
SYST_NT
)
)
{
parser
=
createNTFTPEntryParser
(
config
)
;
}
else
if
(
ukey
.
contains
(
FTPClientConfig
.
SYST_OS2
)
)
{
parser
=
new
OS2FTPEntryParser
(
config
)
;
}
else
if
(
ukey
.
contains
(
FTPClientConfig
.
SYST_OS400
)
||
ukey
.
contains
(
FTPClientConfig
.
SYST_AS400
)
)
{
parser
=
createOS400FTPEntryParser
(
config
)
;
}
else
if
(
ukey
.
contains
(
FTPClientConfig
.
SYST_MVS
)
)
{
parser
=
new
MVSFTPEntryParser
(
)
;
}
else
if
(
ukey
.
contains
(
FTPClientConfig
.
SYST_NETWARE
)
)
{
parser
=
new
NetwareFTPEntryParser
(
config
)
;
}
else
if
(
ukey
.
contains
(
FTPClientConfig
.
SYST_MACOS_PETER
)
)
{
parser
=
new
MacOsPeterFTPEntryParser
(
config
)
;
}
else
if
(
ukey
.
contains
(
FTPClientConfig
.
SYST_L8
)
)
{
parser
=
new
UnixFTPEntryParser
(
config
)
;
}
else
{
throw
new
ParserInitializationException
(
"Unknown parser type: "
+
key
)
;
}
}
if
(
parser
instanceof
Configurable
)
{
(
(
Configurable
)
parser
)
.
configure
(
config
)
;
}
return
parser
;
}
public
FTPFileEntryParser
createMVSEntryParser
(
)
{
return
new
MVSFTPEntryParser
(
)
;
}
public
FTPFileEntryParser
createNetwareFTPEntryParser
(
)
{
return
new
NetwareFTPEntryParser
(
)
;
}
public
FTPFileEntryParser
createNTFTPEntryParser
(
)
{
return
createNTFTPEntryParser
(
null
)
;
}
private
FTPFileEntryParser
createNTFTPEntryParser
(
final
FTPClientConfig
config
)
{
if
(
config
!=
null
&&
FTPClientConfig
.
SYST_NT
.
equals
(
config
.
getServerSystemKey
(
)
)
)
{
return
new
NTFTPEntryParser
(
config
)
;
}
final
FTPClientConfig
config2
=
config
!=
null
?
new
FTPClientConfig
(
config
)
:
null
;
return
new
CompositeFileEntryParser
(
new
FTPFileEntryParser
[
]
{
new
NTFTPEntryParser
(
config
)
,
new
UnixFTPEntryParser
(
config2
,
config2
!=
null
&&
FTPClientConfig
.
SYST_UNIX_TRIM_LEADING
.
equals
(
config2
.
getServerSystemKey
(
)
)
)
}
)
;
}
public
FTPFileEntryParser
createOS2FTPEntryParser
(
)
{
return
new
OS2FTPEntryParser
(
)
;
}
public
FTPFileEntryParser
createOS400FTPEntryParser
(
)
{
return
createOS400FTPEntryParser
(
null
)
;
}
private
FTPFileEntryParser
createOS400FTPEntryParser
(
final
FTPClientConfig
config
)
{
if
(
config
!=
null
&&
FTPClientConfig
.
SYST_OS400
.
equals
(
config
.
getServerSystemKey
(
)
)
)
{
return
new
OS400FTPEntryParser
(
config
)
;
}
final
FTPClientConfig
config2
=
config
!=
null
?
new
FTPClientConfig
(
config
)
:
null
;
return
new
CompositeFileEntryParser
(
new
FTPFileEntryParser
[
]
{
new
OS400FTPEntryParser
(
config
)
,
new
UnixFTPEntryParser
(
config2
,
config2
!=
null
&&
FTPClientConfig
.
SYST_UNIX_TRIM_LEADING
.
equals
(
config2
.
getServerSystemKey
(
)
)
)
}
)
;
}
public
FTPFileEntryParser
createUnixFTPEntryParser
(
)
{
return
new
UnixFTPEntryParser
(
)
;
}
public
FTPFileEntryParser
createVMSVersioningFTPEntryParser
(
)
{
return
new
VMSVersioningFTPEntryParser
(
)
;
}
}
<EOF>
