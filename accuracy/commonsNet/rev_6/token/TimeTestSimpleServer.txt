package
org
.
apache
.
commons
.
net
.
time
;
import
java
.
io
.
DataOutputStream
;
import
java
.
io
.
IOException
;
import
java
.
net
.
ServerSocket
;
import
java
.
net
.
Socket
;
public
class
TimeTestSimpleServer
implements
Runnable
{
public
static
final
long
SECONDS_1900_TO_1970
=
2208988800L
;
public
static
final
int
DEFAULT_PORT
=
37
;
public
static
void
main
(
final
String
[
]
args
)
{
final
TimeTestSimpleServer
server
=
new
TimeTestSimpleServer
(
)
;
try
{
server
.
start
(
)
;
}
catch
(
final
IOException
e
)
{
}
}
private
ServerSocket
server
;
private
final
int
port
;
private
boolean
running
;
public
TimeTestSimpleServer
(
)
{
port
=
DEFAULT_PORT
;
}
public
TimeTestSimpleServer
(
final
int
port
)
{
this
.
port
=
port
;
}
public
void
connect
(
)
throws
IOException
{
if
(
server
==
null
)
{
server
=
new
ServerSocket
(
port
)
;
}
}
public
int
getPort
(
)
{
return
server
==
null
?
port
:
server
.
getLocalPort
(
)
;
}
public
boolean
isRunning
(
)
{
return
running
;
}
@
Override
public
void
run
(
)
{
Socket
socket
=
null
;
while
(
running
)
{
try
{
socket
=
server
.
accept
(
)
;
final
DataOutputStream
os
=
new
DataOutputStream
(
socket
.
getOutputStream
(
)
)
;
final
int
time
=
(
int
)
(
(
System
.
currentTimeMillis
(
)
+
500
)
/
1000
+
SECONDS_1900_TO_1970
)
;
os
.
writeInt
(
time
)
;
os
.
flush
(
)
;
}
catch
(
final
IOException
e
)
{
}
finally
{
if
(
socket
!=
null
)
{
try
{
socket
.
close
(
)
;
}
catch
(
final
IOException
e
)
{
System
.
err
.
println
(
"close socket error: "
+
e
)
;
}
}
}
}
}
public
void
start
(
)
throws
IOException
{
if
(
server
==
null
)
{
connect
(
)
;
}
if
(
!
running
)
{
running
=
true
;
new
Thread
(
this
)
.
start
(
)
;
}
}
public
void
stop
(
)
{
running
=
false
;
if
(
server
!=
null
)
{
try
{
server
.
close
(
)
;
}
catch
(
final
IOException
e
)
{
System
.
err
.
println
(
"close socket error: "
+
e
)
;
}
server
=
null
;
}
}
}
<EOF>
