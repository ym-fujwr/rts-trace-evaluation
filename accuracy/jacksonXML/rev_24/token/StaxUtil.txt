package
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
util
;
import
java
.
io
.
IOException
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
import
javax
.
xml
.
stream
.
*
;
import
com
.
fasterxml
.
jackson
.
core
.
Base64Variant
;
import
com
.
fasterxml
.
jackson
.
core
.
Base64Variants
;
import
com
.
fasterxml
.
jackson
.
core
.
JsonGenerationException
;
import
com
.
fasterxml
.
jackson
.
core
.
JsonGenerator
;
import
com
.
fasterxml
.
jackson
.
core
.
JsonParseException
;
import
com
.
fasterxml
.
jackson
.
core
.
JsonParser
;
public
class
StaxUtil
{
public
static
<
T
>
T
throwAsParseException
(
XMLStreamException
e
,
JsonParser
p
)
throws
IOException
{
Throwable
t
=
_unwrap
(
e
)
;
throw
new
JsonParseException
(
p
,
_message
(
t
,
e
)
,
t
)
;
}
public
static
<
T
>
T
throwAsGenerationException
(
XMLStreamException
e
,
JsonGenerator
g
)
throws
IOException
{
Throwable
t
=
_unwrap
(
e
)
;
throw
new
JsonGenerationException
(
_message
(
t
,
e
)
,
t
,
g
)
;
}
private
static
Throwable
_unwrap
(
Throwable
t
)
{
while
(
t
.
getCause
(
)
!=
null
)
{
t
=
t
.
getCause
(
)
;
}
if
(
t
instanceof
Error
)
throw
(
Error
)
t
;
if
(
t
instanceof
RuntimeException
)
throw
(
RuntimeException
)
t
;
return
t
;
}
private
static
String
_message
(
Throwable
t1
,
Throwable
t2
)
{
String
msg
=
t1
.
getMessage
(
)
;
if
(
msg
==
null
)
{
msg
=
t2
.
getMessage
(
)
;
}
return
msg
;
}
public
static
String
sanitizeXmlTypeName
(
String
name
)
{
if
(
name
==
null
)
{
return
null
;
}
StringBuilder
sb
;
int
changes
=
0
;
if
(
name
.
endsWith
(
"[]"
)
)
{
do
{
name
=
name
.
substring
(
0
,
name
.
length
(
)
-
2
)
;
++
changes
;
}
while
(
name
.
endsWith
(
"[]"
)
)
;
sb
=
new
StringBuilder
(
name
)
;
if
(
name
.
endsWith
(
"s"
)
)
{
sb
.
append
(
"es"
)
;
}
else
{
sb
.
append
(
's'
)
;
}
}
else
{
sb
=
new
StringBuilder
(
name
)
;
}
for
(
int
i
=
0
,
len
=
name
.
length
(
)
;
i
<
len
;
++
i
)
{
char
c
=
name
.
charAt
(
i
)
;
if
(
c
>
127
)
continue
;
if
(
c
>=
'a'
&&
c
<=
'z'
)
continue
;
if
(
c
>=
'A'
&&
c
<=
'Z'
)
continue
;
if
(
c
>=
'0'
&&
c
<=
'9'
)
continue
;
if
(
c
==
'_'
||
c
==
'.'
||
c
==
'-'
)
continue
;
++
changes
;
if
(
c
==
'$'
)
{
sb
.
setCharAt
(
i
,
'.'
)
;
}
else
{
sb
.
setCharAt
(
i
,
'_'
)
;
}
}
if
(
changes
==
0
)
{
return
name
;
}
return
sb
.
toString
(
)
;
}
public
static
org
.
codehaus
.
stax2
.
typed
.
Base64Variant
toStax2Base64Variant
(
Base64Variant
j64b
)
{
return
Base64Mapper
.
instance
.
map
(
j64b
)
;
}
public
static
XMLInputFactory
defaultInputFactory
(
ClassLoader
cl
)
{
try
{
return
XMLInputFactory
.
newFactory
(
XMLInputFactory
.
class
.
getName
(
)
,
cl
)
;
}
catch
(
FactoryConfigurationError
|
NoSuchMethodError
e
)
{
return
XMLInputFactory
.
newInstance
(
)
;
}
}
public
static
XMLOutputFactory
defaultOutputFactory
(
ClassLoader
cl
)
{
try
{
return
XMLOutputFactory
.
newFactory
(
XMLOutputFactory
.
class
.
getName
(
)
,
cl
)
;
}
catch
(
FactoryConfigurationError
|
NoSuchMethodError
e
)
{
return
XMLOutputFactory
.
newInstance
(
)
;
}
}
private
static
class
Base64Mapper
{
public
final
static
Base64Mapper
instance
=
new
Base64Mapper
(
)
;
private
final
Map
<
String
,
org
.
codehaus
.
stax2
.
typed
.
Base64Variant
>
j2stax2
=
new
HashMap
<
>
(
)
;
{
j2stax2
.
put
(
Base64Variants
.
MIME
.
getName
(
)
,
org
.
codehaus
.
stax2
.
typed
.
Base64Variants
.
MIME
)
;
j2stax2
.
put
(
Base64Variants
.
MIME_NO_LINEFEEDS
.
getName
(
)
,
org
.
codehaus
.
stax2
.
typed
.
Base64Variants
.
MIME_NO_LINEFEEDS
)
;
j2stax2
.
put
(
Base64Variants
.
MODIFIED_FOR_URL
.
getName
(
)
,
org
.
codehaus
.
stax2
.
typed
.
Base64Variants
.
MODIFIED_FOR_URL
)
;
j2stax2
.
put
(
Base64Variants
.
PEM
.
getName
(
)
,
org
.
codehaus
.
stax2
.
typed
.
Base64Variants
.
PEM
)
;
}
private
Base64Mapper
(
)
{
}
public
org
.
codehaus
.
stax2
.
typed
.
Base64Variant
map
(
Base64Variant
j64b
)
{
org
.
codehaus
.
stax2
.
typed
.
Base64Variant
result
=
j2stax2
.
get
(
j64b
.
getName
(
)
)
;
if
(
result
==
null
)
{
result
=
org
.
codehaus
.
stax2
.
typed
.
Base64Variants
.
getDefaultVariant
(
)
;
}
return
result
;
}
}
}
<EOF>
