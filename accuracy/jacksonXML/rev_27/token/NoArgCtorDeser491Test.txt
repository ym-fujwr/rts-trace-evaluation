package
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
deser
.
creator
;
import
com
.
fasterxml
.
jackson
.
annotation
.
*
;
import
com
.
fasterxml
.
jackson
.
databind
.
ObjectMapper
;
import
com
.
fasterxml
.
jackson
.
databind
.
json
.
JsonMapper
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
XmlMapper
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
XmlTestBase
;
public
class
NoArgCtorDeser491Test
extends
XmlTestBase
{
@
JsonTypeInfo
(
use
=
JsonTypeInfo
.
Id
.
NAME
,
include
=
JsonTypeInfo
.
As
.
EXISTING_PROPERTY
,
property
=
"type"
,
defaultImpl
=
DefaultProblem
.
class
,
visible
=
true
)
@
JsonRootName
(
"problem"
)
interface
Problem
{
String
DEFAULT_TYPE
=
"about:blank"
;
int
DEFAULT_STATUS
=
500
;
String
getType
(
)
;
int
getStatus
(
)
;
}
static
class
DefaultProblem
implements
Problem
{
private
final
String
type
;
private
final
int
status
;
@
JsonCreator
DefaultProblem
(
@
JsonProperty
(
"type"
)
String
type
,
@
JsonProperty
(
"status"
)
Integer
status
)
{
this
.
type
=
type
!=
null
?
type
:
Problem
.
DEFAULT_TYPE
;
this
.
status
=
status
!=
null
?
status
:
Problem
.
DEFAULT_STATUS
;
}
@
Override
public
String
getType
(
)
{
return
type
;
}
@
Override
public
int
getStatus
(
)
{
return
status
;
}
}
private
static
final
ObjectMapper
JSON_MAPPER
=
new
JsonMapper
(
)
;
private
static
final
XmlMapper
XML_MAPPER
=
newMapper
(
)
;
public
void
test_empty_Problem_JSON_deserialization
(
)
throws
Exception
{
Problem
problem
=
JSON_MAPPER
.
readValue
(
"{}"
,
Problem
.
class
)
;
assertEquals
(
Problem
.
DEFAULT_TYPE
,
problem
.
getType
(
)
)
;
assertEquals
(
Problem
.
DEFAULT_STATUS
,
problem
.
getStatus
(
)
)
;
}
public
void
test_empty_Problem_XML_deserialization
(
)
throws
Exception
{
Problem
problem
=
XML_MAPPER
.
readValue
(
"<problem />"
,
Problem
.
class
)
;
assertEquals
(
Problem
.
DEFAULT_TYPE
,
problem
.
getType
(
)
)
;
assertEquals
(
Problem
.
DEFAULT_STATUS
,
problem
.
getStatus
(
)
)
;
problem
=
XML_MAPPER
.
readValue
(
"<problem>\n</problem>"
,
Problem
.
class
)
;
assertEquals
(
Problem
.
DEFAULT_TYPE
,
problem
.
getType
(
)
)
;
assertEquals
(
Problem
.
DEFAULT_STATUS
,
problem
.
getStatus
(
)
)
;
}
}
<EOF>
