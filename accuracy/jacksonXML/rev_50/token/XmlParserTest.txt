package
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
stream
;
import
java
.
io
.
*
;
import
com
.
fasterxml
.
jackson
.
core
.
*
;
import
com
.
fasterxml
.
jackson
.
core
.
JsonParser
.
NumberType
;
import
com
.
fasterxml
.
jackson
.
databind
.
JsonNode
;
import
com
.
fasterxml
.
jackson
.
databind
.
ObjectMapper
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
XmlFactory
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
XmlMapper
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
XmlTestBase
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
deser
.
FromXmlParser
;
public
class
XmlParserTest
extends
XmlTestBase
{
protected
final
JsonFactory
_jsonFactory
=
new
JsonFactory
(
)
;
protected
final
XmlMapper
_xmlMapper
=
newMapper
(
)
;
protected
XmlFactory
_xmlFactory
=
_xmlMapper
.
getFactory
(
)
;
public
void
testSimplest
(
)
throws
Exception
{
final
String
XML
=
"<root><leaf>abc</leaf></root>"
;
try
(
JsonParser
p
=
_xmlMapper
.
createParser
(
XML
)
)
{
assertToken
(
JsonToken
.
START_OBJECT
,
p
.
nextToken
(
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
p
.
nextToken
(
)
)
;
assertEquals
(
"leaf"
,
p
.
currentName
(
)
)
;
assertToken
(
JsonToken
.
VALUE_STRING
,
p
.
nextToken
(
)
)
;
assertEquals
(
"abc"
,
p
.
getText
(
)
)
;
assertToken
(
JsonToken
.
END_OBJECT
,
p
.
nextToken
(
)
)
;
assertNull
(
p
.
nextToken
(
)
)
;
}
}
public
void
testSimpleWithEmpty
(
)
throws
Exception
{
final
String
XML
=
"<root><leaf /></root>"
;
try
(
JsonParser
p
=
_xmlMapper
.
reader
(
)
.
with
(
FromXmlParser
.
Feature
.
EMPTY_ELEMENT_AS_NULL
)
.
createParser
(
XML
)
)
{
assertTrue
(
(
(
FromXmlParser
)
p
)
.
isEnabled
(
FromXmlParser
.
Feature
.
EMPTY_ELEMENT_AS_NULL
)
)
;
assertToken
(
JsonToken
.
START_OBJECT
,
p
.
nextToken
(
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
p
.
nextToken
(
)
)
;
assertEquals
(
"leaf"
,
p
.
currentName
(
)
)
;
assertToken
(
JsonToken
.
VALUE_NULL
,
p
.
nextToken
(
)
)
;
assertToken
(
JsonToken
.
END_OBJECT
,
p
.
nextToken
(
)
)
;
assertNull
(
p
.
nextToken
(
)
)
;
}
try
(
JsonParser
p
=
_xmlMapper
.
reader
(
)
.
without
(
FromXmlParser
.
Feature
.
EMPTY_ELEMENT_AS_NULL
)
.
createParser
(
XML
)
)
{
assertFalse
(
(
(
FromXmlParser
)
p
)
.
isEnabled
(
FromXmlParser
.
Feature
.
EMPTY_ELEMENT_AS_NULL
)
)
;
assertToken
(
JsonToken
.
START_OBJECT
,
p
.
nextToken
(
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
p
.
nextToken
(
)
)
;
assertEquals
(
"leaf"
,
p
.
currentName
(
)
)
;
assertToken
(
JsonToken
.
VALUE_STRING
,
p
.
nextToken
(
)
)
;
assertEquals
(
""
,
p
.
getText
(
)
)
;
assertToken
(
JsonToken
.
END_OBJECT
,
p
.
nextToken
(
)
)
;
assertNull
(
p
.
nextToken
(
)
)
;
}
}
public
void
testRootScalar
(
)
throws
Exception
{
final
String
XML
=
"<data>value</data>"
;
try
(
JsonParser
p
=
_xmlMapper
.
createParser
(
XML
)
)
{
assertToken
(
JsonToken
.
START_OBJECT
,
p
.
nextToken
(
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
p
.
nextToken
(
)
)
;
assertEquals
(
""
,
p
.
currentName
(
)
)
;
assertToken
(
JsonToken
.
VALUE_STRING
,
p
.
nextToken
(
)
)
;
assertEquals
(
"value"
,
p
.
getText
(
)
)
;
assertToken
(
JsonToken
.
END_OBJECT
,
p
.
nextToken
(
)
)
;
assertNull
(
p
.
nextToken
(
)
)
;
assertNull
(
p
.
nextToken
(
)
)
;
}
}
public
void
testRootMixed
(
)
throws
Exception
{
final
String
XML
=
"<data>value<child>abc</child></data>"
;
try
(
JsonParser
p
=
_xmlMapper
.
createParser
(
XML
)
)
{
assertToken
(
JsonToken
.
START_OBJECT
,
p
.
nextToken
(
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
p
.
nextToken
(
)
)
;
assertEquals
(
""
,
p
.
currentName
(
)
)
;
assertToken
(
JsonToken
.
VALUE_STRING
,
p
.
nextToken
(
)
)
;
assertEquals
(
"value"
,
p
.
getText
(
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
p
.
nextToken
(
)
)
;
assertEquals
(
"child"
,
p
.
currentName
(
)
)
;
assertToken
(
JsonToken
.
VALUE_STRING
,
p
.
nextToken
(
)
)
;
assertEquals
(
"abc"
,
p
.
getText
(
)
)
;
assertToken
(
JsonToken
.
END_OBJECT
,
p
.
nextToken
(
)
)
;
assertNull
(
p
.
nextToken
(
)
)
;
}
}
public
void
testSimpleNested
(
)
throws
Exception
{
assertEquals
(
"{\"a\":{\"b\":{\"c\":\"xyz\"}}}"
,
_readXmlWriteJson
(
"<root><a><b><c>xyz</c></b></a></root>"
)
)
;
}
public
void
testRoundTripWithSample
(
)
throws
Exception
{
JsonNode
root
=
new
ObjectMapper
(
)
.
readTree
(
SAMPLE_DOC_JSON_SPEC
)
;
String
xml
=
_xmlMapper
.
writeValueAsString
(
root
)
;
JsonParser
p
=
_xmlMapper
.
createParser
(
xml
)
;
assertToken
(
JsonToken
.
START_OBJECT
,
p
.
nextToken
(
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
p
.
nextToken
(
)
)
;
verifyFieldName
(
p
,
"Image"
)
;
assertToken
(
JsonToken
.
START_OBJECT
,
p
.
nextToken
(
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
p
.
nextToken
(
)
)
;
verifyFieldName
(
p
,
"Width"
)
;
assertToken
(
JsonToken
.
VALUE_STRING
,
p
.
nextToken
(
)
)
;
assertEquals
(
String
.
valueOf
(
SAMPLE_SPEC_VALUE_WIDTH
)
,
p
.
getText
(
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
p
.
nextToken
(
)
)
;
verifyFieldName
(
p
,
"Height"
)
;
assertToken
(
JsonToken
.
VALUE_STRING
,
p
.
nextToken
(
)
)
;
assertEquals
(
String
.
valueOf
(
SAMPLE_SPEC_VALUE_HEIGHT
)
,
p
.
getText
(
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
p
.
nextToken
(
)
)
;
verifyFieldName
(
p
,
"Title"
)
;
assertToken
(
JsonToken
.
VALUE_STRING
,
p
.
nextToken
(
)
)
;
assertEquals
(
SAMPLE_SPEC_VALUE_TITLE
,
getAndVerifyText
(
p
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
p
.
nextToken
(
)
)
;
verifyFieldName
(
p
,
"Thumbnail"
)
;
assertToken
(
JsonToken
.
START_OBJECT
,
p
.
nextToken
(
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
p
.
nextToken
(
)
)
;
verifyFieldName
(
p
,
"Url"
)
;
assertToken
(
JsonToken
.
VALUE_STRING
,
p
.
nextToken
(
)
)
;
assertEquals
(
SAMPLE_SPEC_VALUE_TN_URL
,
getAndVerifyText
(
p
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
p
.
nextToken
(
)
)
;
verifyFieldName
(
p
,
"Height"
)
;
assertToken
(
JsonToken
.
VALUE_STRING
,
p
.
nextToken
(
)
)
;
assertEquals
(
String
.
valueOf
(
SAMPLE_SPEC_VALUE_TN_HEIGHT
)
,
p
.
getText
(
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
p
.
nextToken
(
)
)
;
verifyFieldName
(
p
,
"Width"
)
;
assertToken
(
JsonToken
.
VALUE_STRING
,
p
.
nextToken
(
)
)
;
assertEquals
(
SAMPLE_SPEC_VALUE_TN_WIDTH
,
getAndVerifyText
(
p
)
)
;
assertToken
(
JsonToken
.
END_OBJECT
,
p
.
nextToken
(
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
p
.
nextToken
(
)
)
;
verifyFieldName
(
p
,
"IDs"
)
;
assertToken
(
JsonToken
.
VALUE_STRING
,
p
.
nextToken
(
)
)
;
assertEquals
(
String
.
valueOf
(
SAMPLE_SPEC_VALUE_TN_ID1
)
,
getAndVerifyText
(
p
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
p
.
nextToken
(
)
)
;
verifyFieldName
(
p
,
"IDs"
)
;
assertToken
(
JsonToken
.
VALUE_STRING
,
p
.
nextToken
(
)
)
;
assertEquals
(
String
.
valueOf
(
SAMPLE_SPEC_VALUE_TN_ID2
)
,
getAndVerifyText
(
p
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
p
.
nextToken
(
)
)
;
verifyFieldName
(
p
,
"IDs"
)
;
assertToken
(
JsonToken
.
VALUE_STRING
,
p
.
nextToken
(
)
)
;
assertEquals
(
String
.
valueOf
(
SAMPLE_SPEC_VALUE_TN_ID3
)
,
getAndVerifyText
(
p
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
p
.
nextToken
(
)
)
;
verifyFieldName
(
p
,
"IDs"
)
;
assertToken
(
JsonToken
.
VALUE_STRING
,
p
.
nextToken
(
)
)
;
assertEquals
(
String
.
valueOf
(
SAMPLE_SPEC_VALUE_TN_ID4
)
,
getAndVerifyText
(
p
)
)
;
assertToken
(
JsonToken
.
END_OBJECT
,
p
.
nextToken
(
)
)
;
assertToken
(
JsonToken
.
END_OBJECT
,
p
.
nextToken
(
)
)
;
p
.
close
(
)
;
}
public
void
testForceElementAsArray
(
)
throws
Exception
{
final
String
XML
=
"<array><elem>value</elem><elem><property>123</property></elem><elem>1</elem></array>"
;
FromXmlParser
xp
=
(
FromXmlParser
)
_xmlFactory
.
createParser
(
new
StringReader
(
XML
)
)
;
assertToken
(
JsonToken
.
START_OBJECT
,
xp
.
nextToken
(
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
xp
.
nextToken
(
)
)
;
assertEquals
(
"elem"
,
xp
.
currentName
(
)
)
;
assertToken
(
JsonToken
.
VALUE_STRING
,
xp
.
nextToken
(
)
)
;
assertEquals
(
"value"
,
xp
.
getText
(
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
xp
.
nextToken
(
)
)
;
assertEquals
(
"elem"
,
xp
.
currentName
(
)
)
;
assertToken
(
JsonToken
.
START_OBJECT
,
xp
.
nextToken
(
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
xp
.
nextToken
(
)
)
;
assertEquals
(
"property"
,
xp
.
currentName
(
)
)
;
assertToken
(
JsonToken
.
VALUE_STRING
,
xp
.
nextToken
(
)
)
;
assertEquals
(
"123"
,
xp
.
getText
(
)
)
;
assertToken
(
JsonToken
.
END_OBJECT
,
xp
.
nextToken
(
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
xp
.
nextToken
(
)
)
;
assertEquals
(
"elem"
,
xp
.
currentName
(
)
)
;
assertToken
(
JsonToken
.
VALUE_STRING
,
xp
.
nextToken
(
)
)
;
assertEquals
(
"1"
,
xp
.
getText
(
)
)
;
assertToken
(
JsonToken
.
END_OBJECT
,
xp
.
nextToken
(
)
)
;
xp
.
close
(
)
;
xp
=
(
FromXmlParser
)
_xmlMapper
.
createParser
(
XML
)
;
assertTrue
(
xp
.
getParsingContext
(
)
.
inRoot
(
)
)
;
assertToken
(
JsonToken
.
START_OBJECT
,
xp
.
nextToken
(
)
)
;
assertTrue
(
xp
.
getParsingContext
(
)
.
inObject
(
)
)
;
assertTrue
(
"Should 'convert' START_OBJECT to START_ARRAY"
,
xp
.
isExpectedStartArrayToken
(
)
)
;
assertToken
(
JsonToken
.
START_ARRAY
,
xp
.
getCurrentToken
(
)
)
;
assertTrue
(
xp
.
getParsingContext
(
)
.
inArray
(
)
)
;
assertToken
(
JsonToken
.
VALUE_STRING
,
xp
.
nextToken
(
)
)
;
assertTrue
(
xp
.
getParsingContext
(
)
.
inArray
(
)
)
;
assertEquals
(
"value"
,
xp
.
getText
(
)
)
;
assertToken
(
JsonToken
.
START_OBJECT
,
xp
.
nextToken
(
)
)
;
assertTrue
(
xp
.
getParsingContext
(
)
.
inObject
(
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
xp
.
nextToken
(
)
)
;
assertEquals
(
"property"
,
xp
.
currentName
(
)
)
;
assertToken
(
JsonToken
.
VALUE_STRING
,
xp
.
nextToken
(
)
)
;
assertEquals
(
"123"
,
xp
.
getText
(
)
)
;
StringWriter
w
=
new
StringWriter
(
)
;
assertEquals
(
3
,
xp
.
getText
(
w
)
)
;
assertEquals
(
"123"
,
w
.
toString
(
)
)
;
assertTrue
(
xp
.
getParsingContext
(
)
.
inObject
(
)
)
;
assertToken
(
JsonToken
.
END_OBJECT
,
xp
.
nextToken
(
)
)
;
assertTrue
(
xp
.
getParsingContext
(
)
.
inArray
(
)
)
;
assertToken
(
JsonToken
.
VALUE_STRING
,
xp
.
nextToken
(
)
)
;
assertTrue
(
xp
.
getParsingContext
(
)
.
inArray
(
)
)
;
assertEquals
(
"1"
,
xp
.
getText
(
)
)
;
assertToken
(
JsonToken
.
END_ARRAY
,
xp
.
nextToken
(
)
)
;
assertTrue
(
xp
.
getParsingContext
(
)
.
inRoot
(
)
)
;
xp
.
close
(
)
;
}
public
void
testXmlAttributes
(
)
throws
Exception
{
final
String
XML
=
"<data max=\"7\" offset=\"9\"/>"
;
FromXmlParser
xp
=
(
FromXmlParser
)
_xmlMapper
.
createParser
(
XML
)
;
assertToken
(
JsonToken
.
START_OBJECT
,
xp
.
nextToken
(
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
xp
.
nextToken
(
)
)
;
assertEquals
(
"max"
,
xp
.
currentName
(
)
)
;
assertToken
(
JsonToken
.
VALUE_STRING
,
xp
.
nextToken
(
)
)
;
assertEquals
(
"7"
,
xp
.
getText
(
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
xp
.
nextToken
(
)
)
;
assertEquals
(
"offset"
,
xp
.
currentName
(
)
)
;
StringWriter
w
=
new
StringWriter
(
)
;
assertEquals
(
6
,
xp
.
getText
(
w
)
)
;
assertEquals
(
"offset"
,
w
.
toString
(
)
)
;
assertToken
(
JsonToken
.
VALUE_STRING
,
xp
.
nextToken
(
)
)
;
assertEquals
(
"9"
,
xp
.
getText
(
)
)
;
w
=
new
StringWriter
(
)
;
assertEquals
(
1
,
xp
.
getText
(
w
)
)
;
assertEquals
(
"9"
,
w
.
toString
(
)
)
;
assertToken
(
JsonToken
.
END_OBJECT
,
xp
.
nextToken
(
)
)
;
xp
.
close
(
)
;
}
public
void
testMixedContent
(
)
throws
Exception
{
String
exp
=
a2q
(
"{'':'first','a':'123','':'second','b':'456','':'last'}"
)
;
String
result
=
_readXmlWriteJson
(
"<root>first<a>123</a>second<b>456</b>last</root>"
)
;
assertEquals
(
exp
,
result
)
;
}
public
void
testInferredNumbers
(
)
throws
Exception
{
final
String
XML
=
"<data value1='abc' value2='42'>123456789012</data>"
;
FromXmlParser
xp
=
(
FromXmlParser
)
_xmlMapper
.
createParser
(
XML
)
;
assertToken
(
JsonToken
.
START_OBJECT
,
xp
.
nextToken
(
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
xp
.
nextToken
(
)
)
;
assertEquals
(
"value1"
,
xp
.
currentName
(
)
)
;
assertToken
(
JsonToken
.
VALUE_STRING
,
xp
.
nextToken
(
)
)
;
assertFalse
(
xp
.
isExpectedNumberIntToken
(
)
)
;
assertEquals
(
"abc"
,
xp
.
getText
(
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
xp
.
nextToken
(
)
)
;
assertEquals
(
"value2"
,
xp
.
currentName
(
)
)
;
assertToken
(
JsonToken
.
VALUE_STRING
,
xp
.
nextToken
(
)
)
;
assertTrue
(
xp
.
isExpectedNumberIntToken
(
)
)
;
assertEquals
(
JsonToken
.
VALUE_NUMBER_INT
,
xp
.
currentToken
(
)
)
;
assertEquals
(
NumberType
.
INT
,
xp
.
getNumberType
(
)
)
;
assertEquals
(
42
,
xp
.
getIntValue
(
)
)
;
assertToken
(
JsonToken
.
FIELD_NAME
,
xp
.
nextToken
(
)
)
;
assertEquals
(
""
,
xp
.
currentName
(
)
)
;
assertToken
(
JsonToken
.
VALUE_STRING
,
xp
.
nextToken
(
)
)
;
assertTrue
(
xp
.
isExpectedNumberIntToken
(
)
)
;
assertEquals
(
JsonToken
.
VALUE_NUMBER_INT
,
xp
.
currentToken
(
)
)
;
assertEquals
(
NumberType
.
LONG
,
xp
.
getNumberType
(
)
)
;
assertEquals
(
123456789012L
,
xp
.
getLongValue
(
)
)
;
assertToken
(
JsonToken
.
END_OBJECT
,
xp
.
nextToken
(
)
)
;
xp
.
close
(
)
;
}
private
String
_readXmlWriteJson
(
String
xml
)
throws
IOException
{
return
_readXmlWriteJson
(
_xmlFactory
,
xml
)
;
}
private
String
_readXmlWriteJson
(
XmlFactory
xmlFactory
,
String
xml
)
throws
IOException
{
StringWriter
w
=
new
StringWriter
(
)
;
try
(
JsonParser
p
=
xmlFactory
.
createParser
(
xml
)
)
{
try
(
JsonGenerator
jg
=
_jsonFactory
.
createGenerator
(
w
)
)
{
while
(
p
.
nextToken
(
)
!=
null
)
{
jg
.
copyCurrentEvent
(
p
)
;
}
}
}
return
w
.
toString
(
)
;
}
}
<EOF>
