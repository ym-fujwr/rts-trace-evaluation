package
com
.
fasterxml
.
jackson
.
dataformat
.
xml
;
import
com
.
fasterxml
.
jackson
.
databind
.
AnnotationIntrospector
;
import
com
.
fasterxml
.
jackson
.
databind
.
module
.
SimpleModule
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
deser
.
FromXmlParser
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
deser
.
XmlBeanDeserializerModifier
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
ser
.
XmlBeanSerializerModifier
;
public
class
JacksonXmlModule
extends
SimpleModule
implements
java
.
io
.
Serializable
{
private
static
final
long
serialVersionUID
=
1L
;
protected
boolean
_cfgDefaultUseWrapper
=
JacksonXmlAnnotationIntrospector
.
DEFAULT_USE_WRAPPER
;
protected
String
_cfgNameForTextElement
=
FromXmlParser
.
DEFAULT_UNNAMED_TEXT_PROPERTY
;
public
JacksonXmlModule
(
)
{
super
(
"JacksonXmlModule"
,
PackageVersion
.
VERSION
)
;
}
@
SuppressWarnings
(
"deprecation"
)
@
Override
public
void
setupModule
(
SetupContext
context
)
{
context
.
addBeanSerializerModifier
(
new
XmlBeanSerializerModifier
(
)
)
;
context
.
addBeanDeserializerModifier
(
new
XmlBeanDeserializerModifier
(
_cfgNameForTextElement
)
)
;
context
.
insertAnnotationIntrospector
(
_constructIntrospector
(
)
)
;
if
(
_cfgNameForTextElement
!=
FromXmlParser
.
DEFAULT_UNNAMED_TEXT_PROPERTY
)
{
XmlMapper
m
=
(
XmlMapper
)
context
.
getOwner
(
)
;
m
.
setXMLTextElementName
(
_cfgNameForTextElement
)
;
}
super
.
setupModule
(
context
)
;
}
public
void
setDefaultUseWrapper
(
boolean
state
)
{
_cfgDefaultUseWrapper
=
state
;
}
public
void
setXMLTextElementName
(
String
name
)
{
_cfgNameForTextElement
=
name
;
}
protected
AnnotationIntrospector
_constructIntrospector
(
)
{
return
new
JacksonXmlAnnotationIntrospector
(
_cfgDefaultUseWrapper
)
;
}
}
<EOF>
