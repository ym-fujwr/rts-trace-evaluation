package
com
.
zaxxer
.
nuprocess
.
codec
;
import
com
.
zaxxer
.
nuprocess
.
NuProcess
;
import
com
.
zaxxer
.
nuprocess
.
NuProcessHandler
;
import
java
.
nio
.
ByteBuffer
;
import
java
.
nio
.
CharBuffer
;
import
java
.
nio
.
charset
.
Charset
;
import
java
.
nio
.
charset
.
CharsetEncoder
;
import
java
.
nio
.
charset
.
CoderResult
;
public
final
class
NuCharsetEncoder
{
private
final
NuCharsetEncoderHandler
handler
;
private
final
CharsetEncoder
encoder
;
private
final
CharBuffer
charBuffer
;
public
NuCharsetEncoder
(
NuCharsetEncoderHandler
handler
,
Charset
charset
)
{
this
(
handler
,
charset
.
newEncoder
(
)
)
;
}
public
NuCharsetEncoder
(
NuCharsetEncoderHandler
handler
,
CharsetEncoder
encoder
)
{
this
.
handler
=
handler
;
this
.
encoder
=
encoder
;
this
.
charBuffer
=
CharBuffer
.
allocate
(
NuProcess
.
BUFFER_CAPACITY
)
;
}
public
boolean
onStdinReady
(
ByteBuffer
buffer
)
{
boolean
endOfInput
=
!
this
.
handler
.
onStdinReady
(
charBuffer
)
;
CoderResult
encoderResult
=
encoder
.
encode
(
charBuffer
,
buffer
,
endOfInput
)
;
buffer
.
flip
(
)
;
charBuffer
.
compact
(
)
;
if
(
encoderResult
.
isError
(
)
)
{
this
.
handler
.
onEncoderError
(
encoderResult
)
;
}
if
(
encoderResult
.
isOverflow
(
)
)
{
return
true
;
}
else
if
(
endOfInput
)
{
CoderResult
flushResult
=
encoder
.
flush
(
buffer
)
;
return
flushResult
.
isOverflow
(
)
;
}
else
{
return
true
;
}
}
}
<EOF>
