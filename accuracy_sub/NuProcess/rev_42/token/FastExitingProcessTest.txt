package
com
.
zaxxer
.
nuprocess
;
import
static
org
.
hamcrest
.
Matchers
.
equalTo
;
import
static
org
.
hamcrest
.
Matchers
.
is
;
import
static
org
.
hamcrest
.
Matchers
.
nullValue
;
import
static
org
.
junit
.
Assert
.
assertThat
;
import
java
.
io
.
ByteArrayOutputStream
;
import
java
.
nio
.
ByteBuffer
;
import
java
.
nio
.
channels
.
Channels
;
import
java
.
nio
.
channels
.
WritableByteChannel
;
import
java
.
util
.
concurrent
.
TimeUnit
;
import
org
.
junit
.
Test
;
import
com
.
sun
.
jna
.
Platform
;
public
class
FastExitingProcessTest
{
private
static
class
Handler
extends
NuAbstractProcessHandler
{
final
ByteArrayOutputStream
stdoutBytes
=
new
ByteArrayOutputStream
(
)
;
final
WritableByteChannel
stdoutBytesChannel
=
Channels
.
newChannel
(
stdoutBytes
)
;
int
exitCode
=
-
1
;
Exception
stdoutException
;
@
Override
public
void
onExit
(
int
exitCode
)
{
this
.
exitCode
=
exitCode
;
}
@
Override
public
void
onStdout
(
ByteBuffer
buffer
,
boolean
closed
)
{
try
{
stdoutBytesChannel
.
write
(
buffer
)
;
}
catch
(
Exception
e
)
{
stdoutException
=
e
;
}
}
}
@
Test
public
void
whenProcessWritesToStdoutThenExitsThenHandlerReceivesOutput
(
)
throws
Exception
{
System
.
setProperty
(
"nuprocess.test.afterStartSleep"
,
""
+
TimeUnit
.
MILLISECONDS
.
toNanos
(
50
)
)
;
try
{
for
(
int
i
=
0
;
i
<
250
;
i
++
)
{
Handler
handler
=
new
Handler
(
)
;
NuProcess
process
;
if
(
Platform
.
isWindows
(
)
)
{
process
=
new
NuProcessBuilder
(
handler
,
"cmd.exe"
,
"/c"
,
"echo"
,
"hello"
)
.
start
(
)
;
}
else
{
process
=
new
NuProcessBuilder
(
handler
,
"echo"
,
"hello"
)
.
start
(
)
;
}
int
retVal
=
process
.
waitFor
(
Long
.
MAX_VALUE
,
TimeUnit
.
SECONDS
)
;
assertThat
(
"Process should exit cleanly"
,
retVal
,
equalTo
(
0
)
)
;
assertThat
(
"Process callback should indicate clean exit"
,
handler
.
exitCode
,
equalTo
(
0
)
)
;
assertThat
(
"No exceptions thrown writing to stdout"
,
handler
.
stdoutException
,
is
(
nullValue
(
)
)
)
;
assertThat
(
"Stdout should contain expected output"
,
handler
.
stdoutBytes
.
toString
(
"UTF-8"
)
,
equalTo
(
String
.
format
(
"hello%n"
)
)
)
;
}
}
finally
{
System
.
clearProperty
(
"nuprocess.test.afterStartSleep"
)
;
}
}
}
<EOF>
