package
org
.
apache
.
commons
.
jxpath
.
ri
.
compiler
;
import
org
.
apache
.
commons
.
jxpath
.
Pointer
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
Compiler
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
EvalContext
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
QName
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
axes
.
AncestorContext
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
axes
.
AttributeContext
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
axes
.
ChildContext
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
axes
.
DescendantContext
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
axes
.
InitialContext
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
axes
.
NamespaceContext
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
axes
.
ParentContext
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
axes
.
PrecedingOrFollowingContext
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
axes
.
PredicateContext
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
axes
.
SelfContext
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
axes
.
SimplePathInterpreter
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
axes
.
UnionContext
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodePointer
;
public
abstract
class
Path
extends
Expression
{
private
Step
[
]
steps
;
private
boolean
basicKnown
=
false
;
private
boolean
basic
;
public
Path
(
Step
[
]
steps
)
{
this
.
steps
=
steps
;
}
public
Step
[
]
getSteps
(
)
{
return
steps
;
}
public
boolean
computeContextDependent
(
)
{
if
(
steps
!=
null
)
{
for
(
int
i
=
0
;
i
<
steps
.
length
;
i
++
)
{
if
(
steps
[
i
]
.
isContextDependent
(
)
)
{
return
true
;
}
}
}
return
false
;
}
public
synchronized
boolean
isSimplePath
(
)
{
if
(
!
basicKnown
)
{
basicKnown
=
true
;
basic
=
true
;
Step
[
]
steps
=
getSteps
(
)
;
for
(
int
i
=
0
;
i
<
steps
.
length
;
i
++
)
{
if
(
!
isSimpleStep
(
steps
[
i
]
)
)
{
basic
=
false
;
break
;
}
}
}
return
basic
;
}
protected
boolean
isSimpleStep
(
Step
step
)
{
if
(
step
.
getAxis
(
)
==
Compiler
.
AXIS_SELF
)
{
NodeTest
nodeTest
=
step
.
getNodeTest
(
)
;
if
(
!
(
nodeTest
instanceof
NodeTypeTest
)
)
{
return
false
;
}
int
nodeType
=
(
(
NodeTypeTest
)
nodeTest
)
.
getNodeType
(
)
;
if
(
nodeType
!=
Compiler
.
NODE_TYPE_NODE
)
{
return
false
;
}
return
areBasicPredicates
(
step
.
getPredicates
(
)
)
;
}
if
(
step
.
getAxis
(
)
==
Compiler
.
AXIS_CHILD
||
step
.
getAxis
(
)
==
Compiler
.
AXIS_ATTRIBUTE
)
{
NodeTest
nodeTest
=
step
.
getNodeTest
(
)
;
if
(
!
(
nodeTest
instanceof
NodeNameTest
)
)
{
return
false
;
}
if
(
(
(
NodeNameTest
)
nodeTest
)
.
isWildcard
(
)
)
{
return
false
;
}
return
areBasicPredicates
(
step
.
getPredicates
(
)
)
;
}
return
false
;
}
protected
boolean
areBasicPredicates
(
Expression
[
]
predicates
)
{
if
(
predicates
!=
null
&&
predicates
.
length
!=
0
)
{
boolean
firstIndex
=
true
;
for
(
int
i
=
0
;
i
<
predicates
.
length
;
i
++
)
{
if
(
predicates
[
i
]
instanceof
NameAttributeTest
)
{
if
(
(
(
NameAttributeTest
)
predicates
[
i
]
)
.
getNameTestExpression
(
)
.
isContextDependent
(
)
)
{
return
false
;
}
}
else
if
(
predicates
[
i
]
.
isContextDependent
(
)
)
{
return
false
;
}
else
{
if
(
!
firstIndex
)
{
return
false
;
}
firstIndex
=
false
;
}
}
}
return
true
;
}
protected
Pointer
getSingleNodePointerForSteps
(
EvalContext
context
)
{
if
(
steps
.
length
==
0
)
{
return
context
.
getSingleNodePointer
(
)
;
}
if
(
isSimplePath
(
)
)
{
NodePointer
ptr
=
(
NodePointer
)
context
.
getSingleNodePointer
(
)
;
return
SimplePathInterpreter
.
interpretSimpleLocationPath
(
context
,
ptr
,
steps
)
;
}
return
searchForPath
(
context
)
;
}
protected
Pointer
searchForPath
(
EvalContext
context
)
{
EvalContext
ctx
=
buildContextChain
(
context
,
steps
.
length
,
true
)
;
Pointer
pointer
=
ctx
.
getSingleNodePointer
(
)
;
if
(
pointer
!=
null
)
{
return
pointer
;
}
for
(
int
i
=
steps
.
length
;
--
i
>
0
;
)
{
if
(
!
isSimpleStep
(
steps
[
i
]
)
)
{
return
null
;
}
ctx
=
buildContextChain
(
context
,
i
,
true
)
;
if
(
ctx
.
hasNext
(
)
)
{
Pointer
partial
=
(
Pointer
)
ctx
.
next
(
)
;
if
(
ctx
.
hasNext
(
)
)
{
return
null
;
}
if
(
partial
instanceof
NodePointer
)
{
return
SimplePathInterpreter
.
createNullPointer
(
context
,
(
NodePointer
)
partial
,
steps
,
i
)
;
}
}
}
return
null
;
}
protected
EvalContext
evalSteps
(
EvalContext
context
)
{
return
buildContextChain
(
context
,
steps
.
length
,
false
)
;
}
protected
EvalContext
buildContextChain
(
EvalContext
context
,
int
stepCount
,
boolean
createInitialContext
)
{
if
(
createInitialContext
)
{
context
=
new
InitialContext
(
context
)
;
}
if
(
steps
.
length
==
0
)
{
return
context
;
}
for
(
int
i
=
0
;
i
<
stepCount
;
i
++
)
{
context
=
createContextForStep
(
context
,
steps
[
i
]
.
getAxis
(
)
,
steps
[
i
]
.
getNodeTest
(
)
)
;
Expression
[
]
predicates
=
steps
[
i
]
.
getPredicates
(
)
;
if
(
predicates
!=
null
)
{
for
(
int
j
=
0
;
j
<
predicates
.
length
;
j
++
)
{
if
(
j
!=
0
)
{
context
=
new
UnionContext
(
context
,
new
EvalContext
[
]
{
context
}
)
;
}
context
=
new
PredicateContext
(
context
,
predicates
[
j
]
)
;
}
}
}
return
context
;
}
protected
EvalContext
createContextForStep
(
EvalContext
context
,
int
axis
,
NodeTest
nodeTest
)
{
if
(
nodeTest
instanceof
NodeNameTest
)
{
QName
qname
=
(
(
NodeNameTest
)
nodeTest
)
.
getNodeName
(
)
;
String
prefix
=
qname
.
getPrefix
(
)
;
if
(
prefix
!=
null
)
{
String
namespaceURI
=
context
.
getJXPathContext
(
)
.
getNamespaceURI
(
prefix
)
;
nodeTest
=
new
NodeNameTest
(
qname
,
namespaceURI
)
;
}
}
switch
(
axis
)
{
case
Compiler
.
AXIS_ANCESTOR
:
return
new
AncestorContext
(
context
,
false
,
nodeTest
)
;
case
Compiler
.
AXIS_ANCESTOR_OR_SELF
:
return
new
AncestorContext
(
context
,
true
,
nodeTest
)
;
case
Compiler
.
AXIS_ATTRIBUTE
:
return
new
AttributeContext
(
context
,
nodeTest
)
;
case
Compiler
.
AXIS_CHILD
:
return
new
ChildContext
(
context
,
nodeTest
,
false
,
false
)
;
case
Compiler
.
AXIS_DESCENDANT
:
return
new
DescendantContext
(
context
,
false
,
nodeTest
)
;
case
Compiler
.
AXIS_DESCENDANT_OR_SELF
:
return
new
DescendantContext
(
context
,
true
,
nodeTest
)
;
case
Compiler
.
AXIS_FOLLOWING
:
return
new
PrecedingOrFollowingContext
(
context
,
nodeTest
,
false
)
;
case
Compiler
.
AXIS_FOLLOWING_SIBLING
:
return
new
ChildContext
(
context
,
nodeTest
,
true
,
false
)
;
case
Compiler
.
AXIS_NAMESPACE
:
return
new
NamespaceContext
(
context
,
nodeTest
)
;
case
Compiler
.
AXIS_PARENT
:
return
new
ParentContext
(
context
,
nodeTest
)
;
case
Compiler
.
AXIS_PRECEDING
:
return
new
PrecedingOrFollowingContext
(
context
,
nodeTest
,
true
)
;
case
Compiler
.
AXIS_PRECEDING_SIBLING
:
return
new
ChildContext
(
context
,
nodeTest
,
true
,
true
)
;
case
Compiler
.
AXIS_SELF
:
return
new
SelfContext
(
context
,
nodeTest
)
;
default
:
return
null
;
}
}
}
<EOF>
