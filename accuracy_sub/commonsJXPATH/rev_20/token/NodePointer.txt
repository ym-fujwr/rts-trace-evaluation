package
org
.
apache
.
commons
.
jxpath
.
ri
.
model
;
import
java
.
util
.
HashSet
;
import
java
.
util
.
Locale
;
import
org
.
apache
.
commons
.
jxpath
.
AbstractFactory
;
import
org
.
apache
.
commons
.
jxpath
.
ExceptionHandler
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathContext
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathException
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathNotFoundException
;
import
org
.
apache
.
commons
.
jxpath
.
NodeSet
;
import
org
.
apache
.
commons
.
jxpath
.
Pointer
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
Compiler
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
JXPathContextReferenceImpl
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
NamespaceResolver
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
QName
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
compiler
.
NodeNameTest
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
compiler
.
NodeTest
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
compiler
.
NodeTypeTest
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
beans
.
NullPointer
;
public
abstract
class
NodePointer
implements
Pointer
{
private
static
final
long
serialVersionUID
=
8117201322861007777L
;
public
static
final
int
WHOLE_COLLECTION
=
Integer
.
MIN_VALUE
;
public
static
final
String
UNKNOWN_NAMESPACE
=
"<<unknown namespace>>"
;
protected
int
index
=
WHOLE_COLLECTION
;
private
boolean
attribute
=
false
;
private
NamespaceResolver
namespaceResolver
;
private
ExceptionHandler
exceptionHandler
;
private
transient
Object
rootNode
;
public
static
NodePointer
newNodePointer
(
QName
name
,
Object
bean
,
Locale
locale
)
{
NodePointer
pointer
;
if
(
bean
==
null
)
{
pointer
=
new
NullPointer
(
name
,
locale
)
;
return
pointer
;
}
NodePointerFactory
[
]
factories
=
JXPathContextReferenceImpl
.
getNodePointerFactories
(
)
;
for
(
int
i
=
0
;
i
<
factories
.
length
;
i
++
)
{
pointer
=
factories
[
i
]
.
createNodePointer
(
name
,
bean
,
locale
)
;
if
(
pointer
!=
null
)
{
return
pointer
;
}
}
throw
new
JXPathException
(
"Could not allocate a NodePointer for object of "
+
bean
.
getClass
(
)
)
;
}
public
static
NodePointer
newChildNodePointer
(
NodePointer
parent
,
QName
name
,
Object
bean
)
{
NodePointerFactory
[
]
factories
=
JXPathContextReferenceImpl
.
getNodePointerFactories
(
)
;
for
(
int
i
=
0
;
i
<
factories
.
length
;
i
++
)
{
NodePointer
pointer
=
factories
[
i
]
.
createNodePointer
(
parent
,
name
,
bean
)
;
if
(
pointer
!=
null
)
{
return
pointer
;
}
}
throw
new
JXPathException
(
"Could not allocate a NodePointer for object of "
+
bean
.
getClass
(
)
)
;
}
protected
NodePointer
parent
;
protected
Locale
locale
;
protected
NodePointer
(
NodePointer
parent
)
{
this
.
parent
=
parent
;
}
protected
NodePointer
(
NodePointer
parent
,
Locale
locale
)
{
this
.
parent
=
parent
;
this
.
locale
=
locale
;
}
public
NamespaceResolver
getNamespaceResolver
(
)
{
if
(
namespaceResolver
==
null
&&
parent
!=
null
)
{
namespaceResolver
=
parent
.
getNamespaceResolver
(
)
;
}
return
namespaceResolver
;
}
public
void
setNamespaceResolver
(
NamespaceResolver
namespaceResolver
)
{
this
.
namespaceResolver
=
namespaceResolver
;
}
public
NodePointer
getParent
(
)
{
NodePointer
pointer
=
parent
;
while
(
pointer
!=
null
&&
pointer
.
isContainer
(
)
)
{
pointer
=
pointer
.
getImmediateParentPointer
(
)
;
}
return
pointer
;
}
public
NodePointer
getImmediateParentPointer
(
)
{
return
parent
;
}
public
void
setAttribute
(
boolean
attribute
)
{
this
.
attribute
=
attribute
;
}
public
boolean
isAttribute
(
)
{
return
attribute
;
}
public
boolean
isRoot
(
)
{
return
parent
==
null
;
}
public
abstract
boolean
isLeaf
(
)
;
public
boolean
isNode
(
)
{
return
!
isContainer
(
)
;
}
public
boolean
isContainer
(
)
{
return
false
;
}
public
int
getIndex
(
)
{
return
index
;
}
public
void
setIndex
(
int
index
)
{
this
.
index
=
index
;
}
public
abstract
boolean
isCollection
(
)
;
public
abstract
int
getLength
(
)
;
public
Object
getValue
(
)
{
NodePointer
valuePointer
=
getValuePointer
(
)
;
if
(
valuePointer
!=
this
)
{
return
valuePointer
.
getValue
(
)
;
}
return
getNode
(
)
;
}
public
NodePointer
getValuePointer
(
)
{
NodePointer
ivp
=
getImmediateValuePointer
(
)
;
return
ivp
==
this
?
this
:
ivp
.
getValuePointer
(
)
;
}
public
NodePointer
getImmediateValuePointer
(
)
{
return
this
;
}
public
boolean
isActual
(
)
{
return
index
==
WHOLE_COLLECTION
||
index
>=
0
&&
index
<
getLength
(
)
;
}
public
abstract
QName
getName
(
)
;
public
abstract
Object
getBaseValue
(
)
;
public
Object
getNodeValue
(
)
{
return
getNode
(
)
;
}
public
Object
getNode
(
)
{
return
getValuePointer
(
)
.
getImmediateNode
(
)
;
}
public
synchronized
Object
getRootNode
(
)
{
if
(
rootNode
==
null
)
{
rootNode
=
parent
==
null
?
getImmediateNode
(
)
:
parent
.
getRootNode
(
)
;
}
return
rootNode
;
}
public
abstract
Object
getImmediateNode
(
)
;
public
abstract
void
setValue
(
Object
value
)
;
public
abstract
int
compareChildNodePointers
(
NodePointer
pointer1
,
NodePointer
pointer2
)
;
public
boolean
testNode
(
NodeTest
test
)
{
if
(
test
==
null
)
{
return
true
;
}
if
(
test
instanceof
NodeNameTest
)
{
if
(
isContainer
(
)
)
{
return
false
;
}
NodeNameTest
nodeNameTest
=
(
NodeNameTest
)
test
;
QName
testName
=
nodeNameTest
.
getNodeName
(
)
;
QName
nodeName
=
getName
(
)
;
if
(
nodeName
==
null
)
{
return
false
;
}
String
testPrefix
=
testName
.
getPrefix
(
)
;
String
nodePrefix
=
nodeName
.
getPrefix
(
)
;
if
(
!
safeEquals
(
testPrefix
,
nodePrefix
)
)
{
String
testNS
=
getNamespaceURI
(
testPrefix
)
;
String
nodeNS
=
getNamespaceURI
(
nodePrefix
)
;
if
(
!
safeEquals
(
testNS
,
nodeNS
)
)
{
return
false
;
}
}
if
(
nodeNameTest
.
isWildcard
(
)
)
{
return
true
;
}
return
testName
.
getName
(
)
.
equals
(
nodeName
.
getName
(
)
)
;
}
return
test
instanceof
NodeTypeTest
&&
(
(
NodeTypeTest
)
test
)
.
getNodeType
(
)
==
Compiler
.
NODE_TYPE_NODE
&&
isNode
(
)
;
}
public
NodePointer
createPath
(
JXPathContext
context
,
Object
value
)
{
setValue
(
value
)
;
return
this
;
}
public
void
remove
(
)
{
}
public
NodePointer
createPath
(
JXPathContext
context
)
{
return
this
;
}
public
NodePointer
createChild
(
JXPathContext
context
,
QName
name
,
int
index
,
Object
value
)
{
throw
new
JXPathException
(
"Cannot create an object for path "
+
asPath
(
)
+
"/"
+
name
+
"["
+
(
index
+
1
)
+
"]"
+
", operation is not allowed for this type of node"
)
;
}
public
NodePointer
createChild
(
JXPathContext
context
,
QName
name
,
int
index
)
{
throw
new
JXPathException
(
"Cannot create an object for path "
+
asPath
(
)
+
"/"
+
name
+
"["
+
(
index
+
1
)
+
"]"
+
", operation is not allowed for this type of node"
)
;
}
public
NodePointer
createAttribute
(
JXPathContext
context
,
QName
name
)
{
throw
new
JXPathException
(
"Cannot create an attribute for path "
+
asPath
(
)
+
"/@"
+
name
+
", operation is not allowed for this type of node"
)
;
}
public
Locale
getLocale
(
)
{
if
(
locale
==
null
&&
parent
!=
null
)
{
locale
=
parent
.
getLocale
(
)
;
}
return
locale
;
}
public
boolean
isLanguage
(
String
lang
)
{
Locale
loc
=
getLocale
(
)
;
String
name
=
loc
.
toString
(
)
.
replace
(
'_'
,
'-'
)
;
return
name
.
toUpperCase
(
Locale
.
ENGLISH
)
.
startsWith
(
lang
.
toUpperCase
(
Locale
.
ENGLISH
)
)
;
}
public
NodeIterator
childIterator
(
NodeTest
test
,
boolean
reverse
,
NodePointer
startWith
)
{
NodePointer
valuePointer
=
getValuePointer
(
)
;
return
valuePointer
==
null
||
valuePointer
==
this
?
null
:
valuePointer
.
childIterator
(
test
,
reverse
,
startWith
)
;
}
public
NodeIterator
attributeIterator
(
QName
qname
)
{
NodePointer
valuePointer
=
getValuePointer
(
)
;
return
valuePointer
==
null
||
valuePointer
==
this
?
null
:
valuePointer
.
attributeIterator
(
qname
)
;
}
public
NodeIterator
namespaceIterator
(
)
{
return
null
;
}
public
NodePointer
namespacePointer
(
String
namespace
)
{
return
null
;
}
public
String
getNamespaceURI
(
String
prefix
)
{
return
null
;
}
public
String
getNamespaceURI
(
)
{
return
null
;
}
protected
boolean
isDefaultNamespace
(
String
prefix
)
{
if
(
prefix
==
null
)
{
return
true
;
}
String
namespace
=
getNamespaceURI
(
prefix
)
;
return
namespace
!=
null
&&
namespace
.
equals
(
getDefaultNamespaceURI
(
)
)
;
}
protected
String
getDefaultNamespaceURI
(
)
{
return
null
;
}
public
Pointer
getPointerByID
(
JXPathContext
context
,
String
id
)
{
return
context
.
getPointerByID
(
id
)
;
}
public
Pointer
getPointerByKey
(
JXPathContext
context
,
String
key
,
String
value
)
{
return
context
.
getPointerByKey
(
key
,
value
)
;
}
public
NodeSet
getNodeSetByKey
(
JXPathContext
context
,
String
key
,
Object
value
)
{
return
context
.
getNodeSetByKey
(
key
,
value
)
;
}
public
String
asPath
(
)
{
if
(
parent
!=
null
&&
parent
.
isContainer
(
)
)
{
return
parent
.
asPath
(
)
;
}
StringBuffer
buffer
=
new
StringBuffer
(
)
;
if
(
parent
!=
null
)
{
buffer
.
append
(
parent
.
asPath
(
)
)
;
}
if
(
buffer
.
length
(
)
==
0
||
buffer
.
charAt
(
buffer
.
length
(
)
-
1
)
!=
'/'
)
{
buffer
.
append
(
'/'
)
;
}
if
(
attribute
)
{
buffer
.
append
(
'@'
)
;
}
buffer
.
append
(
getName
(
)
)
;
if
(
index
!=
WHOLE_COLLECTION
&&
isCollection
(
)
)
{
buffer
.
append
(
'['
)
.
append
(
index
+
1
)
.
append
(
']'
)
;
}
return
buffer
.
toString
(
)
;
}
public
Object
clone
(
)
{
try
{
NodePointer
ptr
=
(
NodePointer
)
super
.
clone
(
)
;
if
(
parent
!=
null
)
{
ptr
.
parent
=
(
NodePointer
)
parent
.
clone
(
)
;
}
return
ptr
;
}
catch
(
CloneNotSupportedException
ex
)
{
ex
.
printStackTrace
(
)
;
}
return
null
;
}
public
String
toString
(
)
{
return
asPath
(
)
;
}
public
int
compareTo
(
Object
object
)
{
if
(
object
==
this
)
{
return
0
;
}
NodePointer
pointer
=
(
NodePointer
)
object
;
if
(
safeEquals
(
parent
,
pointer
.
parent
)
)
{
return
parent
==
null
?
0
:
parent
.
compareChildNodePointers
(
this
,
pointer
)
;
}
int
depth1
=
0
;
NodePointer
p1
=
this
;
HashSet
parents1
=
new
HashSet
(
)
;
while
(
p1
!=
null
)
{
depth1
++
;
p1
=
p1
.
parent
;
if
(
p1
!=
null
)
{
parents1
.
add
(
p1
)
;
}
}
boolean
commonParentFound
=
false
;
int
depth2
=
0
;
NodePointer
p2
=
pointer
;
while
(
p2
!=
null
)
{
depth2
++
;
p2
=
p2
.
parent
;
if
(
parents1
.
contains
(
p2
)
)
{
commonParentFound
=
true
;
}
}
return
commonParentFound
?
compareNodePointers
(
this
,
depth1
,
pointer
,
depth2
)
:
0
;
}
private
int
compareNodePointers
(
NodePointer
p1
,
int
depth1
,
NodePointer
p2
,
int
depth2
)
{
if
(
depth1
<
depth2
)
{
int
r
=
compareNodePointers
(
p1
,
depth1
,
p2
.
parent
,
depth2
-
1
)
;
return
r
==
0
?
-
1
:
r
;
}
if
(
depth1
>
depth2
)
{
int
r
=
compareNodePointers
(
p1
.
parent
,
depth1
-
1
,
p2
,
depth2
)
;
return
r
==
0
?
1
:
r
;
}
if
(
safeEquals
(
p1
,
p2
)
)
{
return
0
;
}
if
(
depth1
==
1
)
{
throw
new
JXPathException
(
"Cannot compare pointers that do not belong to the same tree: '"
+
p1
+
"' and '"
+
p2
+
"'"
)
;
}
int
r
=
compareNodePointers
(
p1
.
parent
,
depth1
-
1
,
p2
.
parent
,
depth2
-
1
)
;
return
r
==
0
?
p1
.
parent
.
compareChildNodePointers
(
p1
,
p2
)
:
r
;
}
public
void
printPointerChain
(
)
{
printDeep
(
this
,
""
)
;
}
public
void
setExceptionHandler
(
ExceptionHandler
exceptionHandler
)
{
this
.
exceptionHandler
=
exceptionHandler
;
}
public
void
handle
(
Throwable
t
,
NodePointer
originator
)
{
if
(
exceptionHandler
!=
null
)
{
exceptionHandler
.
handle
(
t
,
originator
)
;
return
;
}
if
(
parent
!=
null
)
{
parent
.
handle
(
t
,
originator
)
;
}
}
public
void
handle
(
Throwable
t
)
{
handle
(
t
,
this
)
;
}
protected
String
escape
(
String
string
)
{
final
char
[
]
c
=
new
char
[
]
{
'\''
,
'"'
}
;
final
String
[
]
esc
=
new
String
[
]
{
"&apos;"
,
"&quot;"
}
;
StringBuffer
sb
=
null
;
for
(
int
i
=
0
;
sb
==
null
&&
i
<
c
.
length
;
i
++
)
{
if
(
string
.
indexOf
(
c
[
i
]
)
>=
0
)
{
sb
=
new
StringBuffer
(
string
)
;
}
}
if
(
sb
==
null
)
{
return
string
;
}
for
(
int
i
=
0
;
i
<
c
.
length
;
i
++
)
{
if
(
string
.
indexOf
(
c
[
i
]
)
<
0
)
{
continue
;
}
int
pos
=
0
;
while
(
pos
<
sb
.
length
(
)
)
{
if
(
sb
.
charAt
(
pos
)
==
c
[
i
]
)
{
sb
.
replace
(
pos
,
pos
+
1
,
esc
[
i
]
)
;
pos
+=
esc
[
i
]
.
length
(
)
;
}
else
{
pos
++
;
}
}
}
return
sb
.
toString
(
)
;
}
protected
AbstractFactory
getAbstractFactory
(
JXPathContext
context
)
{
AbstractFactory
factory
=
context
.
getFactory
(
)
;
if
(
factory
==
null
)
{
throw
new
JXPathException
(
"Factory is not set on the JXPathContext - cannot create path: "
+
asPath
(
)
)
;
}
return
factory
;
}
private
static
void
printDeep
(
NodePointer
pointer
,
String
indent
)
{
if
(
indent
.
length
(
)
==
0
)
{
System
.
err
.
println
(
"POINTER: "
+
pointer
+
"("
+
pointer
.
getClass
(
)
.
getName
(
)
+
")"
)
;
}
else
{
System
.
err
.
println
(
indent
+
" of "
+
pointer
+
"("
+
pointer
.
getClass
(
)
.
getName
(
)
+
")"
)
;
}
if
(
pointer
.
getImmediateParentPointer
(
)
!=
null
)
{
printDeep
(
pointer
.
getImmediateParentPointer
(
)
,
indent
+
"  "
)
;
}
}
private
static
boolean
safeEquals
(
Object
o1
,
Object
o2
)
{
return
o1
==
o2
||
o1
!=
null
&&
o1
.
equals
(
o2
)
;
}
public
static
NodePointer
verify
(
NodePointer
nodePointer
)
{
if
(
!
nodePointer
.
isActual
(
)
)
{
NodePointer
parent
=
nodePointer
.
getImmediateParentPointer
(
)
;
if
(
parent
==
null
||
!
parent
.
isContainer
(
)
||
!
parent
.
isActual
(
)
)
{
throw
new
JXPathNotFoundException
(
"No value for xpath: "
+
nodePointer
)
;
}
}
return
nodePointer
;
}
}
<EOF>
