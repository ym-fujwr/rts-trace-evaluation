package
org
.
apache
.
commons
.
jxpath
.
ri
.
axes
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Collections
;
import
java
.
util
.
List
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathException
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
Compiler
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
EvalContext
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
InfoSetUtil
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
QName
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
compiler
.
Expression
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
compiler
.
NameAttributeTest
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
compiler
.
NodeNameTest
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
compiler
.
NodeTest
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
compiler
.
Step
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodeIterator
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodePointer
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
beans
.
LangAttributePointer
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
beans
.
NullElementPointer
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
beans
.
NullPropertyPointer
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
beans
.
PropertyOwnerPointer
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
beans
.
PropertyPointer
;
public
class
SimplePathInterpreter
{
private
static
final
QName
QNAME_NAME
=
new
QName
(
null
,
"name"
)
;
private
static
final
int
PERFECT_MATCH
=
1000
;
public
static
NodePointer
interpretSimpleLocationPath
(
final
EvalContext
context
,
final
NodePointer
root
,
final
Step
[
]
steps
)
{
final
NodePointer
pointer
=
doStep
(
context
,
root
,
steps
,
0
)
;
return
pointer
;
}
public
static
NodePointer
interpretSimpleExpressionPath
(
final
EvalContext
context
,
final
NodePointer
root
,
final
Expression
[
]
predicates
,
final
Step
[
]
steps
)
{
final
NodePointer
pointer
=
doPredicate
(
context
,
root
,
steps
,
-
1
,
predicates
,
0
)
;
return
pointer
;
}
private
static
NodePointer
doStep
(
final
EvalContext
context
,
NodePointer
parent
,
final
Step
[
]
steps
,
final
int
currentStep
)
{
if
(
parent
==
null
)
{
return
null
;
}
if
(
currentStep
==
steps
.
length
)
{
return
parent
;
}
parent
=
valuePointer
(
parent
)
;
final
Step
step
=
steps
[
currentStep
]
;
final
Expression
[
]
predicates
=
step
.
getPredicates
(
)
;
if
(
parent
instanceof
PropertyOwnerPointer
)
{
if
(
predicates
==
null
||
predicates
.
length
==
0
)
{
return
doStepNoPredicatesPropertyOwner
(
context
,
(
PropertyOwnerPointer
)
parent
,
steps
,
currentStep
)
;
}
return
doStepPredicatesPropertyOwner
(
context
,
(
PropertyOwnerPointer
)
parent
,
steps
,
currentStep
)
;
}
if
(
predicates
==
null
||
predicates
.
length
==
0
)
{
return
doStepNoPredicatesStandard
(
context
,
parent
,
steps
,
currentStep
)
;
}
return
doStepPredicatesStandard
(
context
,
parent
,
steps
,
currentStep
)
;
}
private
static
NodePointer
doStepNoPredicatesPropertyOwner
(
final
EvalContext
context
,
final
PropertyOwnerPointer
parentPointer
,
final
Step
[
]
steps
,
final
int
currentStep
)
{
final
Step
step
=
steps
[
currentStep
]
;
NodePointer
childPointer
=
createChildPointerForStep
(
parentPointer
,
step
)
;
if
(
childPointer
==
null
)
{
return
null
;
}
if
(
!
childPointer
.
isActual
(
)
)
{
return
createNullPointer
(
context
,
parentPointer
,
steps
,
currentStep
)
;
}
if
(
currentStep
==
steps
.
length
-
1
)
{
return
childPointer
;
}
if
(
childPointer
.
isCollection
(
)
)
{
int
bestQuality
=
0
;
childPointer
=
(
NodePointer
)
childPointer
.
clone
(
)
;
NodePointer
bestMatch
=
null
;
final
int
count
=
childPointer
.
getLength
(
)
;
for
(
int
i
=
0
;
i
<
count
;
i
++
)
{
childPointer
.
setIndex
(
i
)
;
final
NodePointer
pointer
=
doStep
(
context
,
childPointer
,
steps
,
currentStep
+
1
)
;
final
int
quality
=
computeQuality
(
pointer
)
;
if
(
quality
==
PERFECT_MATCH
)
{
return
pointer
;
}
else
if
(
quality
>
bestQuality
)
{
bestQuality
=
quality
;
bestMatch
=
(
NodePointer
)
pointer
.
clone
(
)
;
}
}
if
(
bestMatch
!=
null
)
{
return
bestMatch
;
}
return
createNullPointer
(
context
,
childPointer
,
steps
,
currentStep
)
;
}
return
doStep
(
context
,
childPointer
,
steps
,
currentStep
+
1
)
;
}
private
static
NodePointer
doStepNoPredicatesStandard
(
final
EvalContext
context
,
final
NodePointer
parentPointer
,
final
Step
[
]
steps
,
final
int
currentStep
)
{
final
Step
step
=
steps
[
currentStep
]
;
if
(
step
.
getAxis
(
)
==
Compiler
.
AXIS_SELF
)
{
return
doStep
(
context
,
parentPointer
,
steps
,
currentStep
+
1
)
;
}
int
bestQuality
=
0
;
NodePointer
bestMatch
=
null
;
final
NodeIterator
it
=
getNodeIterator
(
context
,
parentPointer
,
step
)
;
if
(
it
!=
null
)
{
for
(
int
i
=
1
;
it
.
setPosition
(
i
)
;
i
++
)
{
final
NodePointer
childPointer
=
it
.
getNodePointer
(
)
;
if
(
steps
.
length
==
currentStep
+
1
)
{
return
childPointer
;
}
final
NodePointer
pointer
=
doStep
(
context
,
childPointer
,
steps
,
currentStep
+
1
)
;
final
int
quality
=
computeQuality
(
pointer
)
;
if
(
quality
==
PERFECT_MATCH
)
{
return
pointer
;
}
if
(
quality
>
bestQuality
)
{
bestQuality
=
quality
;
bestMatch
=
(
NodePointer
)
pointer
.
clone
(
)
;
}
}
}
return
bestMatch
!=
null
?
bestMatch
:
createNullPointer
(
context
,
parentPointer
,
steps
,
currentStep
)
;
}
private
static
NodePointer
doStepPredicatesPropertyOwner
(
final
EvalContext
context
,
final
PropertyOwnerPointer
parentPointer
,
final
Step
[
]
steps
,
final
int
currentStep
)
{
final
Step
step
=
steps
[
currentStep
]
;
final
Expression
[
]
predicates
=
step
.
getPredicates
(
)
;
final
NodePointer
childPointer
=
createChildPointerForStep
(
parentPointer
,
step
)
;
if
(
!
childPointer
.
isActual
(
)
)
{
return
createNullPointer
(
context
,
parentPointer
,
steps
,
currentStep
)
;
}
return
doPredicate
(
context
,
childPointer
,
steps
,
currentStep
,
predicates
,
0
)
;
}
private
static
NodePointer
createChildPointerForStep
(
final
PropertyOwnerPointer
parentPointer
,
final
Step
step
)
{
final
int
axis
=
step
.
getAxis
(
)
;
if
(
axis
==
Compiler
.
AXIS_CHILD
||
axis
==
Compiler
.
AXIS_ATTRIBUTE
)
{
final
QName
name
=
(
(
NodeNameTest
)
step
.
getNodeTest
(
)
)
.
getNodeName
(
)
;
if
(
axis
==
Compiler
.
AXIS_ATTRIBUTE
&&
isLangAttribute
(
name
)
)
{
return
new
LangAttributePointer
(
parentPointer
)
;
}
if
(
parentPointer
.
isValidProperty
(
name
)
)
{
final
NodePointer
childPointer
=
parentPointer
.
getPropertyPointer
(
)
;
(
(
PropertyPointer
)
childPointer
)
.
setPropertyName
(
name
.
toString
(
)
)
;
childPointer
.
setAttribute
(
axis
==
Compiler
.
AXIS_ATTRIBUTE
)
;
return
childPointer
;
}
return
null
;
}
return
parentPointer
;
}
private
static
NodePointer
doStepPredicatesStandard
(
final
EvalContext
context
,
final
NodePointer
parent
,
final
Step
[
]
steps
,
final
int
currentStep
)
{
final
Step
step
=
steps
[
currentStep
]
;
final
Expression
[
]
predicates
=
step
.
getPredicates
(
)
;
final
int
axis
=
step
.
getAxis
(
)
;
if
(
axis
==
Compiler
.
AXIS_SELF
)
{
return
doPredicate
(
context
,
parent
,
steps
,
currentStep
,
predicates
,
0
)
;
}
final
Expression
predicate
=
predicates
[
0
]
;
if
(
predicates
.
length
==
1
)
{
final
NodeIterator
it
=
getNodeIterator
(
context
,
parent
,
step
)
;
NodePointer
pointer
=
null
;
if
(
it
!=
null
)
{
if
(
predicate
instanceof
NameAttributeTest
)
{
final
String
key
=
keyFromPredicate
(
context
,
predicate
)
;
for
(
int
i
=
1
;
it
.
setPosition
(
i
)
;
i
++
)
{
final
NodePointer
ptr
=
it
.
getNodePointer
(
)
;
if
(
isNameAttributeEqual
(
ptr
,
key
)
)
{
pointer
=
ptr
;
break
;
}
}
}
else
{
final
int
index
=
indexFromPredicate
(
context
,
predicate
)
;
if
(
it
.
setPosition
(
index
+
1
)
)
{
pointer
=
it
.
getNodePointer
(
)
;
}
}
}
if
(
pointer
!=
null
)
{
return
doStep
(
context
,
pointer
,
steps
,
currentStep
+
1
)
;
}
}
else
{
final
NodeIterator
it
=
getNodeIterator
(
context
,
parent
,
step
)
;
if
(
it
!=
null
)
{
final
List
list
=
new
ArrayList
(
)
;
for
(
int
i
=
1
;
it
.
setPosition
(
i
)
;
i
++
)
{
list
.
add
(
it
.
getNodePointer
(
)
)
;
}
final
NodePointer
pointer
=
doPredicatesStandard
(
context
,
list
,
steps
,
currentStep
,
predicates
,
0
)
;
if
(
pointer
!=
null
)
{
return
pointer
;
}
}
}
return
createNullPointer
(
context
,
parent
,
steps
,
currentStep
)
;
}
private
static
NodePointer
doPredicate
(
final
EvalContext
context
,
final
NodePointer
parent
,
final
Step
[
]
steps
,
final
int
currentStep
,
final
Expression
[
]
predicates
,
final
int
currentPredicate
)
{
if
(
currentPredicate
==
predicates
.
length
)
{
return
doStep
(
context
,
parent
,
steps
,
currentStep
+
1
)
;
}
final
Expression
predicate
=
predicates
[
currentPredicate
]
;
if
(
predicate
instanceof
NameAttributeTest
)
{
return
doPredicateName
(
context
,
parent
,
steps
,
currentStep
,
predicates
,
currentPredicate
)
;
}
return
doPredicateIndex
(
context
,
parent
,
steps
,
currentStep
,
predicates
,
currentPredicate
)
;
}
private
static
NodePointer
doPredicateName
(
final
EvalContext
context
,
final
NodePointer
parent
,
final
Step
[
]
steps
,
final
int
currentStep
,
final
Expression
[
]
predicates
,
final
int
currentPredicate
)
{
final
Expression
predicate
=
predicates
[
currentPredicate
]
;
final
String
key
=
keyFromPredicate
(
context
,
predicate
)
;
NodePointer
child
=
valuePointer
(
parent
)
;
if
(
child
instanceof
PropertyOwnerPointer
)
{
final
PropertyPointer
pointer
=
(
(
PropertyOwnerPointer
)
child
)
.
getPropertyPointer
(
)
;
pointer
.
setPropertyName
(
key
)
;
if
(
pointer
.
isActual
(
)
)
{
return
doPredicate
(
context
,
pointer
,
steps
,
currentStep
,
predicates
,
currentPredicate
+
1
)
;
}
}
else
if
(
child
.
isCollection
(
)
)
{
NodePointer
bestMatch
=
null
;
int
bestQuality
=
0
;
child
=
(
NodePointer
)
child
.
clone
(
)
;
final
int
count
=
child
.
getLength
(
)
;
for
(
int
i
=
0
;
i
<
count
;
i
++
)
{
child
.
setIndex
(
i
)
;
final
NodePointer
valuePointer
=
valuePointer
(
child
)
;
NodePointer
pointer
;
if
(
valuePointer
instanceof
PropertyOwnerPointer
||
valuePointer
.
isCollection
(
)
)
{
pointer
=
doPredicateName
(
context
,
valuePointer
,
steps
,
currentStep
,
predicates
,
currentPredicate
)
;
}
else
if
(
isNameAttributeEqual
(
valuePointer
,
key
)
)
{
pointer
=
doPredicate
(
context
,
valuePointer
,
steps
,
currentStep
,
predicates
,
currentPredicate
+
1
)
;
}
else
{
pointer
=
null
;
}
if
(
pointer
!=
null
)
{
final
int
quality
=
computeQuality
(
pointer
)
;
if
(
quality
==
PERFECT_MATCH
)
{
return
pointer
;
}
if
(
quality
>
bestQuality
)
{
bestMatch
=
(
NodePointer
)
pointer
.
clone
(
)
;
bestQuality
=
quality
;
}
}
}
if
(
bestMatch
!=
null
)
{
return
bestMatch
;
}
}
else
{
final
NodePointer
found
=
doPredicatesStandard
(
context
,
Collections
.
singletonList
(
child
)
,
steps
,
currentStep
,
predicates
,
currentPredicate
)
;
if
(
found
!=
null
)
{
return
found
;
}
}
return
createNullPointerForPredicates
(
context
,
child
,
steps
,
currentStep
,
predicates
,
currentPredicate
)
;
}
private
static
NodePointer
doPredicatesStandard
(
final
EvalContext
context
,
final
List
parents
,
final
Step
[
]
steps
,
final
int
currentStep
,
final
Expression
[
]
predicates
,
final
int
currentPredicate
)
{
if
(
parents
.
size
(
)
==
0
)
{
return
null
;
}
if
(
currentPredicate
==
predicates
.
length
)
{
final
NodePointer
pointer
=
(
NodePointer
)
parents
.
get
(
0
)
;
return
doStep
(
context
,
pointer
,
steps
,
currentStep
+
1
)
;
}
final
Expression
predicate
=
predicates
[
currentPredicate
]
;
if
(
predicate
instanceof
NameAttributeTest
)
{
final
String
key
=
keyFromPredicate
(
context
,
predicate
)
;
final
List
newList
=
new
ArrayList
(
)
;
for
(
int
i
=
0
;
i
<
parents
.
size
(
)
;
i
++
)
{
final
NodePointer
pointer
=
(
NodePointer
)
parents
.
get
(
i
)
;
if
(
isNameAttributeEqual
(
pointer
,
key
)
)
{
newList
.
add
(
pointer
)
;
}
}
if
(
newList
.
size
(
)
==
0
)
{
return
null
;
}
return
doPredicatesStandard
(
context
,
newList
,
steps
,
currentStep
,
predicates
,
currentPredicate
+
1
)
;
}
else
{
final
int
index
=
indexFromPredicate
(
context
,
predicate
)
;
if
(
index
<
0
||
index
>=
parents
.
size
(
)
)
{
return
null
;
}
final
NodePointer
ptr
=
(
NodePointer
)
parents
.
get
(
index
)
;
return
doPredicate
(
context
,
ptr
,
steps
,
currentStep
,
predicates
,
currentPredicate
+
1
)
;
}
}
private
static
NodePointer
doPredicateIndex
(
final
EvalContext
context
,
final
NodePointer
parent
,
final
Step
[
]
steps
,
final
int
currentStep
,
final
Expression
[
]
predicates
,
final
int
currentPredicate
)
{
final
Expression
predicate
=
predicates
[
currentPredicate
]
;
final
int
index
=
indexFromPredicate
(
context
,
predicate
)
;
NodePointer
pointer
=
parent
;
if
(
isCollectionElement
(
pointer
,
index
)
)
{
pointer
=
(
NodePointer
)
pointer
.
clone
(
)
;
pointer
.
setIndex
(
index
)
;
return
doPredicate
(
context
,
pointer
,
steps
,
currentStep
,
predicates
,
currentPredicate
+
1
)
;
}
return
createNullPointerForPredicates
(
context
,
parent
,
steps
,
currentStep
,
predicates
,
currentPredicate
)
;
}
private
static
int
indexFromPredicate
(
final
EvalContext
context
,
final
Expression
predicate
)
{
Object
value
=
predicate
.
computeValue
(
context
)
;
if
(
value
instanceof
EvalContext
)
{
value
=
(
(
EvalContext
)
value
)
.
getSingleNodePointer
(
)
;
}
if
(
value
instanceof
NodePointer
)
{
value
=
(
(
NodePointer
)
value
)
.
getValue
(
)
;
}
if
(
value
==
null
)
{
throw
new
JXPathException
(
"Predicate value is null: "
+
predicate
)
;
}
if
(
value
instanceof
Number
)
{
final
double
round
=
0.5
;
return
(
int
)
(
InfoSetUtil
.
doubleValue
(
value
)
+
round
)
-
1
;
}
return
InfoSetUtil
.
booleanValue
(
value
)
?
0
:
-
1
;
}
private
static
String
keyFromPredicate
(
final
EvalContext
context
,
final
Expression
predicate
)
{
final
Expression
expr
=
(
(
NameAttributeTest
)
predicate
)
.
getNameTestExpression
(
)
;
return
InfoSetUtil
.
stringValue
(
expr
.
computeValue
(
context
)
)
;
}
private
static
int
computeQuality
(
NodePointer
pointer
)
{
int
quality
=
PERFECT_MATCH
;
while
(
pointer
!=
null
&&
!
pointer
.
isActual
(
)
)
{
quality
--
;
pointer
=
pointer
.
getImmediateParentPointer
(
)
;
}
return
quality
;
}
private
static
boolean
isNameAttributeEqual
(
final
NodePointer
pointer
,
final
String
name
)
{
final
NodeIterator
it
=
pointer
.
attributeIterator
(
QNAME_NAME
)
;
return
it
!=
null
&&
it
.
setPosition
(
1
)
&&
name
.
equals
(
it
.
getNodePointer
(
)
.
getValue
(
)
)
;
}
private
static
boolean
isCollectionElement
(
final
NodePointer
pointer
,
final
int
index
)
{
return
pointer
.
isActual
(
)
&&
(
index
==
0
||
pointer
.
isCollection
(
)
&&
index
>=
0
&&
index
<
pointer
.
getLength
(
)
)
;
}
private
static
NodePointer
valuePointer
(
final
NodePointer
pointer
)
{
return
pointer
==
null
?
null
:
pointer
.
getValuePointer
(
)
;
}
public
static
NodePointer
createNullPointer
(
final
EvalContext
context
,
NodePointer
parent
,
final
Step
[
]
steps
,
final
int
currentStep
)
{
if
(
currentStep
==
steps
.
length
)
{
return
parent
;
}
parent
=
valuePointer
(
parent
)
;
final
Step
step
=
steps
[
currentStep
]
;
final
int
axis
=
step
.
getAxis
(
)
;
if
(
axis
==
Compiler
.
AXIS_CHILD
||
axis
==
Compiler
.
AXIS_ATTRIBUTE
)
{
final
NullPropertyPointer
pointer
=
new
NullPropertyPointer
(
parent
)
;
final
QName
name
=
(
(
NodeNameTest
)
step
.
getNodeTest
(
)
)
.
getNodeName
(
)
;
pointer
.
setPropertyName
(
name
.
toString
(
)
)
;
pointer
.
setAttribute
(
axis
==
Compiler
.
AXIS_ATTRIBUTE
)
;
parent
=
pointer
;
}
final
Expression
[
]
predicates
=
step
.
getPredicates
(
)
;
return
createNullPointerForPredicates
(
context
,
parent
,
steps
,
currentStep
,
predicates
,
0
)
;
}
private
static
NodePointer
createNullPointerForPredicates
(
final
EvalContext
context
,
NodePointer
parent
,
final
Step
[
]
steps
,
final
int
currentStep
,
final
Expression
[
]
predicates
,
final
int
currentPredicate
)
{
for
(
int
i
=
currentPredicate
;
i
<
predicates
.
length
;
i
++
)
{
final
Expression
predicate
=
predicates
[
i
]
;
if
(
predicate
instanceof
NameAttributeTest
)
{
final
String
key
=
keyFromPredicate
(
context
,
predicate
)
;
parent
=
valuePointer
(
parent
)
;
final
NullPropertyPointer
pointer
=
new
NullPropertyPointer
(
parent
)
;
pointer
.
setNameAttributeValue
(
key
)
;
parent
=
pointer
;
}
else
{
final
int
index
=
indexFromPredicate
(
context
,
predicate
)
;
if
(
parent
instanceof
NullPropertyPointer
)
{
parent
.
setIndex
(
index
)
;
}
else
{
parent
=
new
NullElementPointer
(
parent
,
index
)
;
}
}
}
return
createNullPointer
(
context
,
parent
,
steps
,
currentStep
+
1
)
;
}
private
static
NodeIterator
getNodeIterator
(
final
EvalContext
context
,
final
NodePointer
pointer
,
final
Step
step
)
{
if
(
step
.
getAxis
(
)
==
Compiler
.
AXIS_CHILD
)
{
NodeTest
nodeTest
=
step
.
getNodeTest
(
)
;
final
QName
qname
=
(
(
NodeNameTest
)
nodeTest
)
.
getNodeName
(
)
;
final
String
prefix
=
qname
.
getPrefix
(
)
;
if
(
prefix
!=
null
)
{
final
String
namespaceURI
=
context
.
getJXPathContext
(
)
.
getNamespaceURI
(
prefix
)
;
nodeTest
=
new
NodeNameTest
(
qname
,
namespaceURI
)
;
}
return
pointer
.
childIterator
(
nodeTest
,
false
,
null
)
;
}
if
(
!
(
step
.
getNodeTest
(
)
instanceof
NodeNameTest
)
)
{
throw
new
UnsupportedOperationException
(
"Not supported node test for attributes: "
+
step
.
getNodeTest
(
)
)
;
}
return
pointer
.
attributeIterator
(
(
(
NodeNameTest
)
step
.
getNodeTest
(
)
)
.
getNodeName
(
)
)
;
}
private
static
boolean
isLangAttribute
(
final
QName
name
)
{
return
name
.
getPrefix
(
)
!=
null
&&
name
.
getPrefix
(
)
.
equals
(
"xml"
)
&&
name
.
getName
(
)
.
equals
(
"lang"
)
;
}
}
<EOF>
