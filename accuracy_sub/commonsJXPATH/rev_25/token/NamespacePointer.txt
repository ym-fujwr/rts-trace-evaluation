package
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
dom
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
Compiler
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
QName
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
compiler
.
NodeTest
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
compiler
.
NodeTypeTest
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodePointer
;
public
class
NamespacePointer
extends
NodePointer
{
private
final
String
prefix
;
private
String
namespaceURI
;
private
static
final
long
serialVersionUID
=
-
7622456151550131709L
;
public
NamespacePointer
(
final
NodePointer
parent
,
final
String
prefix
)
{
super
(
parent
)
;
this
.
prefix
=
prefix
;
}
public
NamespacePointer
(
final
NodePointer
parent
,
final
String
prefix
,
final
String
namespaceURI
)
{
super
(
parent
)
;
this
.
prefix
=
prefix
;
this
.
namespaceURI
=
namespaceURI
;
}
@
Override
public
QName
getName
(
)
{
return
new
QName
(
prefix
)
;
}
@
Override
public
Object
getBaseValue
(
)
{
return
null
;
}
@
Override
public
boolean
isCollection
(
)
{
return
false
;
}
@
Override
public
int
getLength
(
)
{
return
1
;
}
@
Override
public
Object
getImmediateNode
(
)
{
return
getNamespaceURI
(
)
;
}
@
Override
public
String
getNamespaceURI
(
)
{
if
(
namespaceURI
==
null
)
{
namespaceURI
=
parent
.
getNamespaceURI
(
prefix
)
;
}
return
namespaceURI
;
}
@
Override
public
boolean
isLeaf
(
)
{
return
true
;
}
@
Override
public
void
setValue
(
final
Object
value
)
{
throw
new
UnsupportedOperationException
(
"Cannot modify DOM trees"
)
;
}
@
Override
public
boolean
testNode
(
final
NodeTest
nodeTest
)
{
return
nodeTest
==
null
||
nodeTest
instanceof
NodeTypeTest
&&
(
(
NodeTypeTest
)
nodeTest
)
.
getNodeType
(
)
==
Compiler
.
NODE_TYPE_NODE
;
}
@
Override
public
String
asPath
(
)
{
final
StringBuffer
buffer
=
new
StringBuffer
(
)
;
if
(
parent
!=
null
)
{
buffer
.
append
(
parent
.
asPath
(
)
)
;
if
(
buffer
.
length
(
)
==
0
||
buffer
.
charAt
(
buffer
.
length
(
)
-
1
)
!=
'/'
)
{
buffer
.
append
(
'/'
)
;
}
}
buffer
.
append
(
"namespace::"
)
;
buffer
.
append
(
prefix
)
;
return
buffer
.
toString
(
)
;
}
@
Override
public
int
hashCode
(
)
{
return
prefix
.
hashCode
(
)
;
}
@
Override
public
boolean
equals
(
final
Object
object
)
{
if
(
object
==
this
)
{
return
true
;
}
if
(
!
(
object
instanceof
NamespacePointer
)
)
{
return
false
;
}
final
NamespacePointer
other
=
(
NamespacePointer
)
object
;
return
prefix
.
equals
(
other
.
prefix
)
;
}
@
Override
public
int
compareChildNodePointers
(
final
NodePointer
pointer1
,
final
NodePointer
pointer2
)
{
return
0
;
}
}
<EOF>
