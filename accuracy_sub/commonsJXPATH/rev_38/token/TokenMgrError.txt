package
org
.
apache
.
commons
.
jxpath
.
ri
.
parser
;
public
class
TokenMgrError
extends
Error
{
private
static
final
long
serialVersionUID
=
1L
;
static
final
int
LEXICAL_ERROR
=
0
;
static
final
int
STATIC_LEXER_ERROR
=
1
;
static
final
int
INVALID_LEXICAL_STATE
=
2
;
static
final
int
LOOP_DETECTED
=
3
;
int
errorCode
;
public
static
final
String
addEscapes
(
final
String
str
)
{
final
StringBuilder
retval
=
new
StringBuilder
(
)
;
char
ch
;
for
(
int
i
=
0
;
i
<
str
.
length
(
)
;
i
++
)
{
switch
(
str
.
charAt
(
i
)
)
{
case
0
:
continue
;
case
'\b'
:
retval
.
append
(
"\\b"
)
;
continue
;
case
'\t'
:
retval
.
append
(
"\\t"
)
;
continue
;
case
'\n'
:
retval
.
append
(
"\\n"
)
;
continue
;
case
'\f'
:
retval
.
append
(
"\\f"
)
;
continue
;
case
'\r'
:
retval
.
append
(
"\\r"
)
;
continue
;
case
'\"'
:
retval
.
append
(
"\\\""
)
;
continue
;
case
'\''
:
retval
.
append
(
"\\\'"
)
;
continue
;
case
'\\'
:
retval
.
append
(
"\\\\"
)
;
continue
;
default
:
if
(
(
ch
=
str
.
charAt
(
i
)
)
<
0x20
||
ch
>
0x7e
)
{
final
String
s
=
"0000"
+
Integer
.
toString
(
ch
,
16
)
;
retval
.
append
(
"\\u"
+
s
.
substring
(
s
.
length
(
)
-
4
,
s
.
length
(
)
)
)
;
}
else
{
retval
.
append
(
ch
)
;
}
continue
;
}
}
return
retval
.
toString
(
)
;
}
protected
static
String
LexicalError
(
final
boolean
EOFSeen
,
final
int
lexState
,
final
int
errorLine
,
final
int
errorColumn
,
final
String
errorAfter
,
final
char
curChar
)
{
return
"Lexical error at line "
+
errorLine
+
", column "
+
errorColumn
+
".  Encountered: "
+
(
EOFSeen
?
"<EOF> "
:
"\""
+
addEscapes
(
String
.
valueOf
(
curChar
)
)
+
"\""
+
" ("
+
(
int
)
curChar
+
"), "
)
+
"after : \""
+
addEscapes
(
errorAfter
)
+
"\""
;
}
@
Override
public
String
getMessage
(
)
{
return
super
.
getMessage
(
)
;
}
public
TokenMgrError
(
)
{
}
public
TokenMgrError
(
final
String
message
,
final
int
reason
)
{
super
(
message
)
;
errorCode
=
reason
;
}
public
TokenMgrError
(
final
boolean
EOFSeen
,
final
int
lexState
,
final
int
errorLine
,
final
int
errorColumn
,
final
String
errorAfter
,
final
char
curChar
,
final
int
reason
)
{
this
(
LexicalError
(
EOFSeen
,
lexState
,
errorLine
,
errorColumn
,
errorAfter
,
curChar
)
,
reason
)
;
position
=
errorColumn
-
1
;
character
=
curChar
;
}
private
int
position
;
private
char
character
;
public
int
getPosition
(
)
{
return
position
;
}
public
char
getCharacter
(
)
{
return
character
;
}
}
<EOF>
