package
org
.
apache
.
commons
.
jxpath
.
ri
.
model
;
import
org
.
apache
.
commons
.
jxpath
.
AbstractFactory
;
import
org
.
apache
.
commons
.
jxpath
.
IdentityManager
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathContext
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathException
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathTestCase
;
import
org
.
apache
.
commons
.
jxpath
.
Pointer
;
import
org
.
apache
.
commons
.
jxpath
.
Variables
;
import
org
.
apache
.
commons
.
jxpath
.
xml
.
DocumentContainer
;
public
abstract
class
XMLModelTestCase
extends
JXPathTestCase
{
protected
JXPathContext
context
;
@
Override
public
void
setUp
(
)
{
if
(
context
==
null
)
{
final
DocumentContainer
docCtr
=
createDocumentContainer
(
)
;
context
=
createContext
(
)
;
final
Variables
vars
=
context
.
getVariables
(
)
;
vars
.
declareVariable
(
"document"
,
docCtr
.
getValue
(
)
)
;
vars
.
declareVariable
(
"container"
,
docCtr
)
;
vars
.
declareVariable
(
"element"
,
context
.
getPointer
(
"vendor/location/address/street"
)
.
getNode
(
)
)
;
}
}
protected
abstract
String
getModel
(
)
;
protected
DocumentContainer
createDocumentContainer
(
)
{
return
new
DocumentContainer
(
JXPathTestCase
.
class
.
getResource
(
"Vendor.xml"
)
,
getModel
(
)
)
;
}
protected
abstract
AbstractFactory
getAbstractFactory
(
)
;
protected
JXPathContext
createContext
(
)
{
final
JXPathContext
context
=
JXPathContext
.
newContext
(
createDocumentContainer
(
)
)
;
context
.
setFactory
(
getAbstractFactory
(
)
)
;
context
.
registerNamespace
(
"product"
,
"productNS"
)
;
return
context
;
}
protected
abstract
String
getXMLSignature
(
Object
node
,
boolean
elements
,
boolean
attributes
,
boolean
text
,
boolean
pi
)
;
protected
void
assertXMLSignature
(
final
JXPathContext
context
,
final
String
path
,
final
String
signature
,
final
boolean
elements
,
final
boolean
attributes
,
final
boolean
text
,
final
boolean
pi
)
{
final
Object
node
=
context
.
getPointer
(
path
)
.
getNode
(
)
;
final
String
sig
=
getXMLSignature
(
node
,
elements
,
attributes
,
text
,
pi
)
;
assertEquals
(
"XML Signature mismatch: "
,
signature
,
sig
)
;
}
public
void
testDocumentOrder
(
)
{
assertDocumentOrder
(
context
,
"vendor/location"
,
"vendor/location/address/street"
,
-
1
)
;
assertDocumentOrder
(
context
,
"vendor/location[@id = '100']"
,
"vendor/location[@id = '101']"
,
-
1
)
;
assertDocumentOrder
(
context
,
"vendor//price:amount"
,
"vendor/location"
,
1
)
;
}
public
void
testSetValue
(
)
{
assertXPathSetValue
(
context
,
"vendor/location[@id = '100']"
,
"New Text"
)
;
assertXMLSignature
(
context
,
"vendor/location[@id = '100']"
,
"<E>New Text</E>"
,
false
,
false
,
true
,
false
)
;
assertXPathSetValue
(
context
,
"vendor/location[@id = '101']"
,
"Replacement Text"
)
;
assertXMLSignature
(
context
,
"vendor/location[@id = '101']"
,
"<E>Replacement Text</E>"
,
false
,
false
,
true
,
false
)
;
}
public
void
testCreatePath
(
)
{
assertXPathCreatePath
(
context
,
"/vendor[1]/location[3]"
,
""
,
"/vendor[1]/location[3]"
)
;
assertXPathCreatePath
(
context
,
"/vendor[1]/location[3]/address/street"
,
""
,
"/vendor[1]/location[3]/address[1]/street[1]"
)
;
assertXPathCreatePath
(
context
,
"/vendor[1]/location[2]/@manager"
,
""
,
"/vendor[1]/location[2]/@manager"
)
;
assertXPathCreatePath
(
context
,
"/vendor[1]/location[1]/@name"
,
"local"
,
"/vendor[1]/location[1]/@name"
)
;
assertXPathCreatePathAndSetValue
(
context
,
"/vendor[1]/location[4]/@manager"
,
""
,
"/vendor[1]/location[4]/@manager"
)
;
context
.
registerNamespace
(
"price"
,
"priceNS"
)
;
assertXPathCreatePath
(
context
,
"/vendor[1]/price:foo/price:bar"
,
""
,
"/vendor[1]/price:foo[1]/price:bar[1]"
)
;
}
public
void
testCreatePathAndSetValue
(
)
{
assertXPathCreatePathAndSetValue
(
context
,
"vendor/location[3]"
,
""
,
"/vendor[1]/location[3]"
)
;
assertXPathCreatePathAndSetValue
(
context
,
"vendor/location[3]/address/street"
,
"Lemon Circle"
,
"/vendor[1]/location[3]/address[1]/street[1]"
)
;
assertXPathCreatePathAndSetValue
(
context
,
"vendor/location[2]/@manager"
,
"John Doe"
,
"/vendor[1]/location[2]/@manager"
)
;
assertXPathCreatePathAndSetValue
(
context
,
"vendor/location[1]/@manager"
,
"John Doe"
,
"/vendor[1]/location[1]/@manager"
)
;
assertXPathCreatePathAndSetValue
(
context
,
"/vendor[1]/location[4]/@manager"
,
"James Dow"
,
"/vendor[1]/location[4]/@manager"
)
;
assertXPathCreatePathAndSetValue
(
context
,
"vendor/product/product:name/attribute::price:language"
,
"English"
,
"/vendor[1]/product[1]/product:name[1]/@price:language"
)
;
context
.
registerNamespace
(
"price"
,
"priceNS"
)
;
assertXPathCreatePathAndSetValue
(
context
,
"/vendor[1]/price:foo/price:bar"
,
"123.20"
,
"/vendor[1]/price:foo[1]/price:bar[1]"
)
;
}
public
void
testRemovePath
(
)
{
context
.
removePath
(
"vendor/location[@id = '101']//street/text()"
)
;
assertEquals
(
"Remove DOM text"
,
""
,
context
.
getValue
(
"vendor/location[@id = '101']//street"
)
)
;
context
.
removePath
(
"vendor/location[@id = '101']//street"
)
;
assertEquals
(
"Remove DOM element"
,
Double
.
valueOf
(
0
)
,
context
.
getValue
(
"count(vendor/location[@id = '101']//street)"
)
)
;
context
.
removePath
(
"vendor/location[@id = '100']/@name"
)
;
assertEquals
(
"Remove DOM attribute"
,
Double
.
valueOf
(
0
)
,
context
.
getValue
(
"count(vendor/location[@id = '100']/@name)"
)
)
;
}
public
void
testID
(
)
{
context
.
setIdentityManager
(
new
IdentityManager
(
)
{
@
Override
public
Pointer
getPointerByID
(
final
JXPathContext
context
,
final
String
id
)
{
NodePointer
ptr
=
(
NodePointer
)
context
.
getPointer
(
"/"
)
;
ptr
=
ptr
.
getValuePointer
(
)
;
return
ptr
.
getPointerByID
(
context
,
id
)
;
}
}
)
;
assertXPathValueAndPointer
(
context
,
"id(101)//street"
,
"Tangerine Drive"
,
"id('101')/address[1]/street[1]"
)
;
assertXPathPointerLenient
(
context
,
"id(105)/address/street"
,
"id(105)/address/street"
)
;
}
public
void
testAxisChild
(
)
{
assertXPathValue
(
context
,
"vendor/location/address/street"
,
"Orchard Road"
)
;
assertXPathValue
(
context
,
"vendor/location/address/city"
,
"Fruit Market"
)
;
assertXPathValue
(
context
,
"local-name(vendor/product/price:amount)"
,
"amount"
)
;
assertXPathValue
(
context
,
"local-name(vendor/location)"
,
"location"
)
;
assertXPathValue
(
context
,
"name(vendor/product/price:amount)"
,
"value:amount"
)
;
assertXPathValue
(
context
,
"name(vendor/location)"
,
"location"
)
;
assertXPathValue
(
context
,
"namespace-uri(vendor/product/price:amount)"
,
"priceNS"
)
;
assertXPathValue
(
context
,
"vendor/product/prix"
,
"934.99"
)
;
assertXPathValue
(
context
,
"/vendor/contact[@name='jim']"
,
"Jim"
)
;
boolean
nsv
=
false
;
try
{
context
.
setLenient
(
false
)
;
context
.
getValue
(
"/vendor/contact[@name='jane']"
)
;
}
catch
(
final
JXPathException
ex
)
{
nsv
=
true
;
}
assertTrue
(
"No such value: /vendor/contact[@name='jim']"
,
nsv
)
;
nsv
=
false
;
try
{
context
.
setLenient
(
false
)
;
context
.
getValue
(
"/vendor/contact[@name='jane']/*"
)
;
}
catch
(
final
JXPathException
ex
)
{
nsv
=
true
;
}
assertTrue
(
"No such value: /vendor/contact[@name='jane']/*"
,
nsv
)
;
assertXPathValue
(
context
,
"count(vendor/product/price:*)"
,
Double
.
valueOf
(
2
)
)
;
assertXPathValue
(
context
,
"count(vendor/product/*)"
,
Double
.
valueOf
(
4
)
)
;
assertXPathValue
(
context
,
"vendor/product/price:amount"
,
"45.95"
)
;
context
.
registerNamespace
(
"x"
,
"temp"
)
;
assertXPathValue
(
context
,
"vendor/x:pos//number"
,
"109"
)
;
}
public
void
testAxisChildIndexPredicate
(
)
{
assertXPathValue
(
context
,
"vendor/location[2]/address/street"
,
"Tangerine Drive"
)
;
}
public
void
testAxisDescendant
(
)
{
assertXPathValue
(
context
,
"//street"
,
"Orchard Road"
)
;
assertXPathValue
(
context
,
"count(//price:*)"
,
Double
.
valueOf
(
2
)
)
;
assertXPathValueIterator
(
context
,
"vendor//saleEnds"
,
list
(
"never"
)
)
;
assertXPathValueIterator
(
context
,
"vendor//promotion"
,
list
(
""
)
)
;
assertXPathValueIterator
(
context
,
"vendor//saleEnds[../@stores = 'all']"
,
list
(
"never"
)
)
;
assertXPathValueIterator
(
context
,
"vendor//promotion[../@stores = 'all']"
,
list
(
""
)
)
;
}
public
void
testAxisParent
(
)
{
assertXPathPointer
(
context
,
"//street/.."
,
"/vendor[1]/location[1]/address[1]"
)
;
assertXPathPointerIterator
(
context
,
"//street/.."
,
list
(
"/vendor[1]/location[2]/address[1]"
,
"/vendor[1]/location[1]/address[1]"
)
)
;
assertXPathValue
(
context
,
"vendor/product/price:sale/saleEnds/parent::price:*"
+
"/saleEnds"
,
"never"
)
;
}
public
void
testAxisFollowingSibling
(
)
{
assertXPathValue
(
context
,
"vendor/location[.//employeeCount = 10]/"
+
"following-sibling::location//street"
,
"Tangerine Drive"
)
;
assertXPathPointer
(
context
,
"vendor/location[.//employeeCount = 10]/"
+
"following-sibling::location//street"
,
"/vendor[1]/location[2]/address[1]/street[1]"
)
;
}
public
void
testAxisPrecedingSibling
(
)
{
assertXPathPointer
(
context
,
"//location[2]/preceding-sibling::location//street"
,
"/vendor[1]/location[1]/address[1]/street[1]"
)
;
}
public
void
testAxisPreceding
(
)
{
assertXPathPointer
(
context
,
"//location[2]/preceding-sibling::location//street"
,
"/vendor[1]/location[1]/address[1]/street[1]"
)
;
assertXPathPointer
(
context
,
"//location[2]/preceding::*[1]"
,
"/vendor[1]/location[1]/employeeCount[1]"
)
;
assertXPathPointer
(
context
,
"//location[2]/preceding::node()[3]"
,
"/vendor[1]/location[1]/employeeCount[1]/text()[1]"
)
;
assertXPathPointer
(
context
,
"//location[2]/preceding::node()[4]"
,
"/vendor[1]/location[1]/employeeCount[1]"
)
;
}
public
void
testAxisAttribute
(
)
{
assertXPathValue
(
context
,
"vendor/location/@id"
,
"100"
)
;
assertXPathPointer
(
context
,
"vendor/location/@id"
,
"/vendor[1]/location[1]/@id"
)
;
assertXPathValueIterator
(
context
,
"vendor/location/@id"
,
list
(
"100"
,
"101"
)
)
;
assertXPathValue
(
context
,
"vendor/product/price:amount/@price:discount"
,
"10%"
)
;
assertXPathValue
(
context
,
"namespace-uri(vendor/product/price:amount/@price:discount)"
,
"priceNS"
)
;
assertXPathValue
(
context
,
"local-name(vendor/product/price:amount/@price:discount)"
,
"discount"
)
;
assertXPathValue
(
context
,
"name(vendor/product/price:amount/@price:discount)"
,
"price:discount"
)
;
assertXPathValue
(
context
,
"vendor/product/price:amount/@discount"
,
"20%"
)
;
assertXPathValue
(
context
,
"namespace-uri(vendor/product/price:amount/@discount)"
,
""
)
;
assertXPathValue
(
context
,
"local-name(vendor/product/price:amount/@discount)"
,
"discount"
)
;
assertXPathValue
(
context
,
"name(vendor/product/price:amount/@discount)"
,
"discount"
)
;
assertXPathValueIterator
(
context
,
"vendor/product/price:amount/@price:*"
,
list
(
"10%"
)
)
;
assertXPathValueIterator
(
context
,
"vendor/location[1]/@*"
,
set
(
"100"
,
""
,
"local"
)
)
;
assertXPathValueIterator
(
context
,
"vendor/product/price:amount/@*"
,
set
(
"10%"
,
"20%"
)
)
;
assertXPathValueIterator
(
context
,
"vendor/product/price:amount/attribute::node()"
,
set
(
"10%"
,
"20%"
)
)
;
assertXPathValueIterator
(
context
,
"vendor/product/price:amount/@*[namespace-uri() = '']"
,
list
(
"20%"
)
)
;
assertXPathValue
(
context
,
"vendor/location/@manager"
,
""
)
;
assertXPathValueLenient
(
context
,
"vendor/location/@missing"
,
null
)
;
assertXPathValueLenient
(
context
,
"vendor/location/@miss:missing"
,
null
)
;
assertXPathValue
(
context
,
"vendor/location[@id='101']//street"
,
"Tangerine Drive"
)
;
assertXPathValueIterator
(
context
,
"/vendor/location[1]/@*[name()!= 'manager']"
,
list
(
"100"
,
"local"
)
)
;
}
public
void
testAxisNamespace
(
)
{
assertXPathValueAndPointer
(
context
,
"vendor/product/prix/namespace::price"
,
"priceNS"
,
"/vendor[1]/product[1]/prix[1]/namespace::price"
)
;
assertXPathValue
(
context
,
"count(vendor/product/namespace::*)"
,
Double
.
valueOf
(
3
)
)
;
assertXPathValue
(
context
,
"name(vendor/product/prix/namespace::price)"
,
"price"
)
;
assertXPathValue
(
context
,
"local-name(vendor/product/prix/namespace::price)"
,
"price"
)
;
}
public
void
testAxisAncestor
(
)
{
assertXPathValue
(
context
,
"vendor/product/price:sale/saleEnds/"
+
"ancestor::price:sale/saleEnds"
,
"never"
)
;
assertXPathValue
(
context
,
"vendor/product/price:sale/saleEnds/ancestor::price:*"
+
"/saleEnds"
,
"never"
)
;
}
public
void
testAxisAncestorOrSelf
(
)
{
assertXPathValue
(
context
,
"vendor/product/price:sale/"
+
"ancestor-or-self::price:sale/saleEnds"
,
"never"
)
;
}
public
void
testAxisFollowing
(
)
{
assertXPathValueIterator
(
context
,
"vendor/contact/following::location//street"
,
list
(
"Orchard Road"
,
"Tangerine Drive"
)
)
;
assertXPathValue
(
context
,
"//location/following::price:sale/saleEnds"
,
"never"
)
;
assertXPathPointer
(
context
,
"//location[2]/following::node()[2]"
,
"/vendor[1]/product[1]"
)
;
}
public
void
testAxisSelf
(
)
{
assertXPathValue
(
context
,
"//price:sale/self::price:sale/saleEnds"
,
"never"
)
;
assertXPathValueLenient
(
context
,
"//price:sale/self::x/saleEnds"
,
null
)
;
}
public
void
testNodeTypeComment
(
)
{
assertXPathValue
(
context
,
"//product/comment()"
,
"We are not buying this product, ever"
)
;
}
public
void
testNodeTypeText
(
)
{
assertXPathValue
(
context
,
"//product/text()[. != '']"
,
"We love this product."
)
;
assertXPathPointer
(
context
,
"//product/text()"
,
"/vendor[1]/product[1]/text()[1]"
)
;
}
public
void
testNodeTypeProcessingInstruction
(
)
{
assertXPathValue
(
context
,
"//product/processing-instruction()"
,
"do not show anybody"
)
;
assertXPathValue
(
context
,
"//product/processing-instruction('report')"
,
"average only"
)
;
assertXPathPointer
(
context
,
"//product/processing-instruction('report')"
,
"/vendor[1]/product[1]/processing-instruction('report')[1]"
)
;
assertXPathValue
(
context
,
"name(//product/processing-instruction()[1])"
,
"security"
)
;
}
public
void
testLang
(
)
{
assertXPathValue
(
context
,
"//product/prix/@xml:lang"
,
"fr"
)
;
assertXPathValue
(
context
,
"//product/prix[lang('fr')]"
,
"934.99"
)
;
assertXPathValue
(
context
,
"//product/price:sale[lang('en')]/saleEnds"
,
"never"
)
;
}
public
void
testDocument
(
)
{
assertXPathValue
(
context
,
"$document/vendor/location[1]//street"
,
"Orchard Road"
)
;
assertXPathPointer
(
context
,
"$document/vendor/location[1]//street"
,
"$document/vendor[1]/location[1]/address[1]/street[1]"
)
;
assertXPathValue
(
context
,
"$document/vendor//street"
,
"Orchard Road"
)
;
}
public
void
testContainer
(
)
{
assertXPathValue
(
context
,
"$container/vendor//street"
,
"Orchard Road"
)
;
assertXPathValue
(
context
,
"$container//street"
,
"Orchard Road"
)
;
assertXPathPointer
(
context
,
"$container//street"
,
"$container/vendor[1]/location[1]/address[1]/street[1]"
)
;
assertXPathValue
(
context
,
"number(vendor/location/employeeCount)"
,
Double
.
valueOf
(
10
)
)
;
}
public
void
testElementInVariable
(
)
{
assertXPathValue
(
context
,
"$element"
,
"Orchard Road"
)
;
}
public
void
testTypeConversions
(
)
{
assertXPathValue
(
context
,
"vendor/location/employeeCount + 1"
,
Double
.
valueOf
(
11
)
)
;
assertXPathValue
(
context
,
"vendor/location/employeeCount and true()"
,
Boolean
.
TRUE
)
;
}
public
void
testBooleanFunction
(
)
{
assertXPathValue
(
context
,
"boolean(vendor//saleEnds[../@stores = 'all'])"
,
Boolean
.
TRUE
)
;
assertXPathValue
(
context
,
"boolean(vendor//promotion[../@stores = 'all'])"
,
Boolean
.
TRUE
)
;
assertXPathValue
(
context
,
"boolean(vendor//promotion[../@stores = 'some'])"
,
Boolean
.
FALSE
)
;
}
public
void
testFunctionsLastAndPosition
(
)
{
assertXPathPointer
(
context
,
"vendor//location[last()]"
,
"/vendor[1]/location[2]"
)
;
}
public
void
testNamespaceMapping
(
)
{
context
.
registerNamespace
(
"rate"
,
"priceNS"
)
;
context
.
registerNamespace
(
"goods"
,
"productNS"
)
;
assertEquals
(
"Context node namespace resolution"
,
"priceNS"
,
context
.
getNamespaceURI
(
"price"
)
)
;
assertEquals
(
"Registered namespace resolution"
,
"priceNS"
,
context
.
getNamespaceURI
(
"rate"
)
)
;
assertXPathValue
(
context
,
"count(vendor/product/rate:*)"
,
Double
.
valueOf
(
2
)
)
;
assertXPathValue
(
context
,
"vendor[1]/product[1]/rate:amount[1]/@rate:discount"
,
"10%"
)
;
assertXPathValue
(
context
,
"vendor[1]/product[1]/rate:amount[1]/@price:discount"
,
"10%"
)
;
assertXPathValue
(
context
,
"vendor[1]/product[1]/price:amount[1]/@rate:discount"
,
"10%"
)
;
assertXPathValue
(
context
,
"vendor[1]/product[1]/price:amount[1]/@price:discount"
,
"10%"
)
;
assertXPathValueAndPointer
(
context
,
"//product:name"
,
"Box of oranges"
,
"/vendor[1]/product[1]/goods:name[1]"
)
;
final
JXPathContext
childCtx
=
JXPathContext
.
newContext
(
context
,
context
.
getContextBean
(
)
)
;
assertXPathValueAndPointer
(
childCtx
,
"//product:name"
,
"Box of oranges"
,
"/vendor[1]/product[1]/goods:name[1]"
)
;
final
JXPathContext
relativeCtx
=
context
.
getRelativeContext
(
context
.
getPointer
(
"/vendor"
)
)
;
assertXPathValueAndPointer
(
relativeCtx
,
"product/product:name"
,
"Box of oranges"
,
"/vendor[1]/product[1]/goods:name[1]"
)
;
}
public
void
testUnion
(
)
{
assertXPathValue
(
context
,
"/vendor[1]/contact[1] | /vendor[1]/contact[4]"
,
"John"
)
;
assertXPathValue
(
context
,
"/vendor[1]/contact[4] | /vendor[1]/contact[1]"
,
"John"
)
;
}
public
void
testNodes
(
)
{
final
Pointer
pointer
=
context
.
getPointer
(
"/vendor[1]/contact[1]"
)
;
assertFalse
(
pointer
.
getNode
(
)
.
equals
(
pointer
.
getValue
(
)
)
)
;
}
}
<EOF>
