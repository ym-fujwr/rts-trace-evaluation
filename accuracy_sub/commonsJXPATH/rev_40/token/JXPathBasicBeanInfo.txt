package
org
.
apache
.
commons
.
jxpath
;
import
java
.
beans
.
BeanInfo
;
import
java
.
beans
.
IntrospectionException
;
import
java
.
beans
.
Introspector
;
import
java
.
beans
.
PropertyDescriptor
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
Comparator
;
import
java
.
util
.
HashMap
;
public
class
JXPathBasicBeanInfo
implements
JXPathBeanInfo
{
private
static
final
long
serialVersionUID
=
-
3863803443111484155L
;
private
static
final
Comparator
PROPERTY_DESCRIPTOR_COMPARATOR
=
new
Comparator
(
)
{
@
Override
public
int
compare
(
final
Object
left
,
final
Object
right
)
{
return
(
(
PropertyDescriptor
)
left
)
.
getName
(
)
.
compareTo
(
(
(
PropertyDescriptor
)
right
)
.
getName
(
)
)
;
}
}
;
private
boolean
atomic
=
false
;
private
final
Class
clazz
;
private
Class
dynamicPropertyHandlerClass
;
private
transient
PropertyDescriptor
[
]
propertyDescriptors
;
private
transient
HashMap
propertyDescriptorMap
;
public
JXPathBasicBeanInfo
(
final
Class
clazz
)
{
this
.
clazz
=
clazz
;
}
public
JXPathBasicBeanInfo
(
final
Class
clazz
,
final
boolean
atomic
)
{
this
.
clazz
=
clazz
;
this
.
atomic
=
atomic
;
}
public
JXPathBasicBeanInfo
(
final
Class
clazz
,
final
Class
dynamicPropertyHandlerClass
)
{
this
.
clazz
=
clazz
;
this
.
atomic
=
false
;
this
.
dynamicPropertyHandlerClass
=
dynamicPropertyHandlerClass
;
}
@
Override
public
boolean
isAtomic
(
)
{
return
atomic
;
}
@
Override
public
boolean
isDynamic
(
)
{
return
dynamicPropertyHandlerClass
!=
null
;
}
@
Override
public
synchronized
PropertyDescriptor
[
]
getPropertyDescriptors
(
)
{
if
(
propertyDescriptors
==
null
)
{
if
(
clazz
==
Object
.
class
)
{
propertyDescriptors
=
new
PropertyDescriptor
[
0
]
;
}
else
{
try
{
BeanInfo
bi
;
if
(
clazz
.
isInterface
(
)
)
{
bi
=
Introspector
.
getBeanInfo
(
clazz
)
;
}
else
{
bi
=
Introspector
.
getBeanInfo
(
clazz
,
Object
.
class
)
;
}
final
PropertyDescriptor
[
]
pds
=
bi
.
getPropertyDescriptors
(
)
;
final
PropertyDescriptor
[
]
descriptors
=
new
PropertyDescriptor
[
pds
.
length
]
;
System
.
arraycopy
(
pds
,
0
,
descriptors
,
0
,
pds
.
length
)
;
Arrays
.
sort
(
descriptors
,
PROPERTY_DESCRIPTOR_COMPARATOR
)
;
propertyDescriptors
=
descriptors
;
}
catch
(
final
IntrospectionException
ex
)
{
ex
.
printStackTrace
(
)
;
return
new
PropertyDescriptor
[
0
]
;
}
}
}
if
(
propertyDescriptors
.
length
==
0
)
{
return
propertyDescriptors
;
}
final
PropertyDescriptor
[
]
result
=
new
PropertyDescriptor
[
propertyDescriptors
.
length
]
;
System
.
arraycopy
(
propertyDescriptors
,
0
,
result
,
0
,
propertyDescriptors
.
length
)
;
return
result
;
}
@
Override
public
synchronized
PropertyDescriptor
getPropertyDescriptor
(
final
String
propertyName
)
{
if
(
propertyDescriptorMap
==
null
)
{
propertyDescriptorMap
=
new
HashMap
(
)
;
final
PropertyDescriptor
[
]
pds
=
getPropertyDescriptors
(
)
;
for
(
final
PropertyDescriptor
pd
:
pds
)
{
propertyDescriptorMap
.
put
(
pd
.
getName
(
)
,
pd
)
;
}
}
return
(
PropertyDescriptor
)
propertyDescriptorMap
.
get
(
propertyName
)
;
}
@
Override
public
Class
getDynamicPropertyHandlerClass
(
)
{
return
dynamicPropertyHandlerClass
;
}
@
Override
public
String
toString
(
)
{
final
StringBuilder
buffer
=
new
StringBuilder
(
)
;
buffer
.
append
(
"BeanInfo [class = "
)
;
buffer
.
append
(
clazz
.
getName
(
)
)
;
if
(
isDynamic
(
)
)
{
buffer
.
append
(
", dynamic"
)
;
}
if
(
isAtomic
(
)
)
{
buffer
.
append
(
", atomic"
)
;
}
buffer
.
append
(
", properties = "
)
;
final
PropertyDescriptor
[
]
jpds
=
getPropertyDescriptors
(
)
;
for
(
final
PropertyDescriptor
jpd
:
jpds
)
{
buffer
.
append
(
"\n    "
)
;
buffer
.
append
(
jpd
.
getPropertyType
(
)
)
;
buffer
.
append
(
": "
)
;
buffer
.
append
(
jpd
.
getName
(
)
)
;
}
buffer
.
append
(
"]"
)
;
return
buffer
.
toString
(
)
;
}
}
<EOF>
