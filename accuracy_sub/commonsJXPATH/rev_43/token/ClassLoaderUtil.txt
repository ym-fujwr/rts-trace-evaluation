package
org
.
apache
.
commons
.
jxpath
.
util
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
import
java
.
util
.
Objects
;
public
class
ClassLoaderUtil
{
private
static
Map
abbreviationMap
=
new
HashMap
(
)
;
private
static
void
addAbbreviation
(
final
String
primitive
,
final
String
abbreviation
)
{
abbreviationMap
.
put
(
primitive
,
abbreviation
)
;
}
static
{
addAbbreviation
(
"int"
,
"I"
)
;
addAbbreviation
(
"boolean"
,
"Z"
)
;
addAbbreviation
(
"float"
,
"F"
)
;
addAbbreviation
(
"long"
,
"J"
)
;
addAbbreviation
(
"short"
,
"S"
)
;
addAbbreviation
(
"byte"
,
"B"
)
;
addAbbreviation
(
"double"
,
"D"
)
;
addAbbreviation
(
"char"
,
"C"
)
;
}
public
static
Class
getClass
(
final
ClassLoader
classLoader
,
final
String
className
,
final
boolean
initialize
)
throws
ClassNotFoundException
{
Class
clazz
;
if
(
abbreviationMap
.
containsKey
(
className
)
)
{
final
String
clsName
=
"["
+
abbreviationMap
.
get
(
className
)
;
clazz
=
Class
.
forName
(
clsName
,
initialize
,
classLoader
)
.
getComponentType
(
)
;
}
else
{
clazz
=
Class
.
forName
(
toCanonicalName
(
className
)
,
initialize
,
classLoader
)
;
}
return
clazz
;
}
public
static
Class
getClass
(
final
ClassLoader
classLoader
,
final
String
className
)
throws
ClassNotFoundException
{
return
getClass
(
classLoader
,
className
,
true
)
;
}
public
static
Class
getClass
(
final
String
className
)
throws
ClassNotFoundException
{
return
getClass
(
className
,
true
)
;
}
public
static
Class
getClass
(
final
String
className
,
final
boolean
initialize
)
throws
ClassNotFoundException
{
final
ClassLoader
contextCL
=
Thread
.
currentThread
(
)
.
getContextClassLoader
(
)
;
final
ClassLoader
currentCL
=
ClassLoaderUtil
.
class
.
getClassLoader
(
)
;
if
(
contextCL
!=
null
)
{
try
{
return
getClass
(
contextCL
,
className
,
initialize
)
;
}
catch
(
final
ClassNotFoundException
ignore
)
{
}
}
return
getClass
(
currentCL
,
className
,
initialize
)
;
}
private
static
String
toCanonicalName
(
String
className
)
{
Objects
.
requireNonNull
(
className
,
"className"
)
;
if
(
className
.
endsWith
(
"[]"
)
)
{
final
StringBuilder
classNameBuffer
=
new
StringBuilder
(
)
;
while
(
className
.
endsWith
(
"[]"
)
)
{
className
=
className
.
substring
(
0
,
className
.
length
(
)
-
2
)
;
classNameBuffer
.
append
(
"["
)
;
}
final
String
abbreviation
=
(
String
)
abbreviationMap
.
get
(
className
)
;
if
(
abbreviation
!=
null
)
{
classNameBuffer
.
append
(
abbreviation
)
;
}
else
{
classNameBuffer
.
append
(
"L"
)
.
append
(
className
)
.
append
(
";"
)
;
}
className
=
classNameBuffer
.
toString
(
)
;
}
return
className
;
}
}
<EOF>
