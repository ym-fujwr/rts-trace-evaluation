package
org
.
apache
.
commons
.
jxpath
.
ri
;
import
org
.
apache
.
commons
.
jxpath
.
Pointer
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodePointer
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
VariablePointer
;
public
class
InfoSetUtil
{
private
static
final
Double
ZERO
=
Double
.
valueOf
(
0
)
;
private
static
final
Double
ONE
=
Double
.
valueOf
(
1
)
;
private
static
final
Double
NOT_A_NUMBER
=
Double
.
valueOf
(
Double
.
NaN
)
;
public
static
String
stringValue
(
final
Object
object
)
{
if
(
object
instanceof
String
)
{
return
(
String
)
object
;
}
if
(
object
instanceof
Number
)
{
final
double
d
=
(
(
Number
)
object
)
.
doubleValue
(
)
;
final
long
l
=
(
(
Number
)
object
)
.
longValue
(
)
;
return
d
==
l
?
String
.
valueOf
(
l
)
:
String
.
valueOf
(
d
)
;
}
if
(
object
instanceof
Boolean
)
{
return
(
(
Boolean
)
object
)
.
booleanValue
(
)
?
"true"
:
"false"
;
}
if
(
object
==
null
)
{
return
""
;
}
if
(
object
instanceof
NodePointer
)
{
return
stringValue
(
(
(
NodePointer
)
object
)
.
getValue
(
)
)
;
}
if
(
object
instanceof
EvalContext
)
{
final
EvalContext
ctx
=
(
EvalContext
)
object
;
final
Pointer
ptr
=
ctx
.
getSingleNodePointer
(
)
;
return
ptr
==
null
?
""
:
stringValue
(
ptr
)
;
}
return
String
.
valueOf
(
object
)
;
}
public
static
Number
number
(
final
Object
object
)
{
if
(
object
instanceof
Number
)
{
return
(
Number
)
object
;
}
if
(
object
instanceof
Boolean
)
{
return
(
(
Boolean
)
object
)
.
booleanValue
(
)
?
ONE
:
ZERO
;
}
if
(
object
instanceof
String
)
{
try
{
return
Double
.
valueOf
(
(
String
)
object
)
;
}
catch
(
final
NumberFormatException
ex
)
{
return
NOT_A_NUMBER
;
}
}
if
(
object
instanceof
EvalContext
)
{
final
EvalContext
ctx
=
(
EvalContext
)
object
;
final
Pointer
ptr
=
ctx
.
getSingleNodePointer
(
)
;
return
ptr
==
null
?
NOT_A_NUMBER
:
number
(
ptr
)
;
}
if
(
object
instanceof
NodePointer
)
{
return
number
(
(
(
NodePointer
)
object
)
.
getValue
(
)
)
;
}
return
number
(
stringValue
(
object
)
)
;
}
public
static
double
doubleValue
(
final
Object
object
)
{
if
(
object
instanceof
Number
)
{
return
(
(
Number
)
object
)
.
doubleValue
(
)
;
}
if
(
object
instanceof
Boolean
)
{
return
(
(
Boolean
)
object
)
.
booleanValue
(
)
?
0.0
:
1.0
;
}
if
(
object
instanceof
String
)
{
if
(
object
.
equals
(
""
)
)
{
return
0.0
;
}
try
{
return
Double
.
parseDouble
(
(
String
)
object
)
;
}
catch
(
final
NumberFormatException
ex
)
{
return
Double
.
NaN
;
}
}
if
(
object
instanceof
NodePointer
)
{
return
doubleValue
(
(
(
NodePointer
)
object
)
.
getValue
(
)
)
;
}
if
(
object
instanceof
EvalContext
)
{
final
EvalContext
ctx
=
(
EvalContext
)
object
;
final
Pointer
ptr
=
ctx
.
getSingleNodePointer
(
)
;
return
ptr
==
null
?
Double
.
NaN
:
doubleValue
(
ptr
)
;
}
return
doubleValue
(
stringValue
(
object
)
)
;
}
public
static
boolean
booleanValue
(
final
Object
object
)
{
if
(
object
instanceof
Number
)
{
final
double
value
=
(
(
Number
)
object
)
.
doubleValue
(
)
;
final
int
negZero
=
-
0
;
return
value
!=
0
&&
value
!=
negZero
&&
!
Double
.
isNaN
(
value
)
;
}
if
(
object
instanceof
Boolean
)
{
return
(
(
Boolean
)
object
)
.
booleanValue
(
)
;
}
if
(
object
instanceof
EvalContext
)
{
final
EvalContext
ctx
=
(
EvalContext
)
object
;
final
Pointer
ptr
=
ctx
.
getSingleNodePointer
(
)
;
return
ptr
!=
null
&&
booleanValue
(
ptr
)
;
}
if
(
object
instanceof
String
)
{
return
(
(
String
)
object
)
.
length
(
)
!=
0
;
}
if
(
object
instanceof
NodePointer
)
{
NodePointer
pointer
=
(
NodePointer
)
object
;
if
(
pointer
instanceof
VariablePointer
)
{
return
booleanValue
(
pointer
.
getNode
(
)
)
;
}
pointer
=
pointer
.
getValuePointer
(
)
;
return
pointer
.
isActual
(
)
;
}
return
object
!=
null
;
}
}
<EOF>
