package
org
.
apache
.
commons
.
net
.
smtp
;
import
java
.
io
.
BufferedWriter
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStreamReader
;
import
java
.
io
.
OutputStreamWriter
;
import
javax
.
net
.
ssl
.
HostnameVerifier
;
import
javax
.
net
.
ssl
.
KeyManager
;
import
javax
.
net
.
ssl
.
SSLContext
;
import
javax
.
net
.
ssl
.
SSLHandshakeException
;
import
javax
.
net
.
ssl
.
SSLSocket
;
import
javax
.
net
.
ssl
.
SSLSocketFactory
;
import
javax
.
net
.
ssl
.
TrustManager
;
import
org
.
apache
.
commons
.
net
.
io
.
CRLFLineReader
;
import
org
.
apache
.
commons
.
net
.
util
.
SSLContextUtils
;
import
org
.
apache
.
commons
.
net
.
util
.
SSLSocketUtils
;
public
class
SMTPSClient
extends
SMTPClient
{
private
static
final
String
DEFAULT_PROTOCOL
=
"TLS"
;
private
final
boolean
isImplicit
;
private
final
String
protocol
;
private
SSLContext
context
;
private
String
[
]
suites
;
private
String
[
]
protocols
;
private
TrustManager
trustManager
;
private
KeyManager
keyManager
;
private
HostnameVerifier
hostnameVerifier
;
private
boolean
tlsEndpointChecking
;
public
SMTPSClient
(
)
{
this
(
DEFAULT_PROTOCOL
,
false
)
;
}
public
SMTPSClient
(
final
boolean
implicit
)
{
this
(
DEFAULT_PROTOCOL
,
implicit
)
;
}
public
SMTPSClient
(
final
boolean
implicit
,
final
SSLContext
ctx
)
{
isImplicit
=
implicit
;
context
=
ctx
;
protocol
=
DEFAULT_PROTOCOL
;
}
public
SMTPSClient
(
final
SSLContext
context
)
{
this
(
false
,
context
)
;
}
public
SMTPSClient
(
final
String
proto
)
{
this
(
proto
,
false
)
;
}
public
SMTPSClient
(
final
String
proto
,
final
boolean
implicit
)
{
protocol
=
proto
;
isImplicit
=
implicit
;
}
public
SMTPSClient
(
final
String
proto
,
final
boolean
implicit
,
final
String
encoding
)
{
super
(
encoding
)
;
protocol
=
proto
;
isImplicit
=
implicit
;
}
@
Override
protected
void
_connectAction_
(
)
throws
IOException
{
if
(
isImplicit
)
{
applySocketAttributes
(
)
;
performSSLNegotiation
(
)
;
}
super
.
_connectAction_
(
)
;
}
public
boolean
execTLS
(
)
throws
IOException
{
if
(
!
SMTPReply
.
isPositiveCompletion
(
sendCommand
(
"STARTTLS"
)
)
)
{
return
false
;
}
performSSLNegotiation
(
)
;
return
true
;
}
public
String
[
]
getEnabledCipherSuites
(
)
{
if
(
_socket_
instanceof
SSLSocket
)
{
return
(
(
SSLSocket
)
_socket_
)
.
getEnabledCipherSuites
(
)
;
}
return
null
;
}
public
String
[
]
getEnabledProtocols
(
)
{
if
(
_socket_
instanceof
SSLSocket
)
{
return
(
(
SSLSocket
)
_socket_
)
.
getEnabledProtocols
(
)
;
}
return
null
;
}
public
HostnameVerifier
getHostnameVerifier
(
)
{
return
hostnameVerifier
;
}
public
KeyManager
getKeyManager
(
)
{
return
keyManager
;
}
public
TrustManager
getTrustManager
(
)
{
return
trustManager
;
}
private
void
initSSLContext
(
)
throws
IOException
{
if
(
context
==
null
)
{
context
=
SSLContextUtils
.
createSSLContext
(
protocol
,
getKeyManager
(
)
,
getTrustManager
(
)
)
;
}
}
public
boolean
isEndpointCheckingEnabled
(
)
{
return
tlsEndpointChecking
;
}
private
void
performSSLNegotiation
(
)
throws
IOException
{
initSSLContext
(
)
;
final
SSLSocketFactory
ssf
=
context
.
getSocketFactory
(
)
;
final
String
host
=
_hostname_
!=
null
?
_hostname_
:
getRemoteAddress
(
)
.
getHostAddress
(
)
;
final
int
port
=
getRemotePort
(
)
;
final
SSLSocket
socket
=
(
SSLSocket
)
ssf
.
createSocket
(
_socket_
,
host
,
port
,
true
)
;
socket
.
setEnableSessionCreation
(
true
)
;
socket
.
setUseClientMode
(
true
)
;
if
(
tlsEndpointChecking
)
{
SSLSocketUtils
.
enableEndpointNameVerification
(
socket
)
;
}
if
(
protocols
!=
null
)
{
socket
.
setEnabledProtocols
(
protocols
)
;
}
if
(
suites
!=
null
)
{
socket
.
setEnabledCipherSuites
(
suites
)
;
}
socket
.
startHandshake
(
)
;
_socket_
=
socket
;
_input_
=
socket
.
getInputStream
(
)
;
_output_
=
socket
.
getOutputStream
(
)
;
reader
=
new
CRLFLineReader
(
new
InputStreamReader
(
_input_
,
encoding
)
)
;
writer
=
new
BufferedWriter
(
new
OutputStreamWriter
(
_output_
,
encoding
)
)
;
if
(
hostnameVerifier
!=
null
&&
!
hostnameVerifier
.
verify
(
host
,
socket
.
getSession
(
)
)
)
{
throw
new
SSLHandshakeException
(
"Hostname doesn't match certificate"
)
;
}
}
public
void
setEnabledCipherSuites
(
final
String
[
]
cipherSuites
)
{
suites
=
cipherSuites
.
clone
(
)
;
}
public
void
setEnabledProtocols
(
final
String
[
]
protocolVersions
)
{
protocols
=
protocolVersions
.
clone
(
)
;
}
public
void
setEndpointCheckingEnabled
(
final
boolean
enable
)
{
tlsEndpointChecking
=
enable
;
}
public
void
setHostnameVerifier
(
final
HostnameVerifier
newHostnameVerifier
)
{
hostnameVerifier
=
newHostnameVerifier
;
}
public
void
setKeyManager
(
final
KeyManager
newKeyManager
)
{
keyManager
=
newKeyManager
;
}
public
void
setTrustManager
(
final
TrustManager
newTrustManager
)
{
trustManager
=
newTrustManager
;
}
}
<EOF>
