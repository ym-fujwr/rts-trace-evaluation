package
org
.
apache
.
commons
.
net
.
imap
;
import
java
.
io
.
IOException
;
import
java
.
util
.
regex
.
Matcher
;
import
java
.
util
.
regex
.
Pattern
;
import
org
.
apache
.
commons
.
net
.
MalformedServerReplyException
;
public
final
class
IMAPReply
{
public
static
final
int
OK
=
0
;
public
static
final
int
NO
=
1
;
public
static
final
int
BAD
=
2
;
public
static
final
int
CONT
=
3
;
public
static
final
int
PARTIAL
=
3
;
private
static
final
String
IMAP_OK
=
"OK"
;
private
static
final
String
IMAP_NO
=
"NO"
;
private
static
final
String
IMAP_BAD
=
"BAD"
;
private
static
final
String
IMAP_UNTAGGED_PREFIX
=
"* "
;
private
static
final
String
IMAP_CONTINUATION_PREFIX
=
"+"
;
private
static
final
String
TAGGED_RESPONSE
=
"^\\w+ (\\S+).*"
;
private
static
final
Pattern
TAGGED_PATTERN
=
Pattern
.
compile
(
TAGGED_RESPONSE
)
;
private
static
final
String
UNTAGGED_RESPONSE
=
"^\\* (\\S+).*"
;
private
static
final
Pattern
UNTAGGED_PATTERN
=
Pattern
.
compile
(
UNTAGGED_RESPONSE
)
;
private
static
final
Pattern
LITERAL_PATTERN
=
Pattern
.
compile
(
"\\{(\\d+)\\}$"
)
;
public
static
int
getReplyCode
(
final
String
line
)
throws
IOException
{
return
getReplyCode
(
line
,
TAGGED_PATTERN
)
;
}
private
static
int
getReplyCode
(
final
String
line
,
final
Pattern
pattern
)
throws
IOException
{
if
(
isContinuation
(
line
)
)
{
return
CONT
;
}
final
Matcher
m
=
pattern
.
matcher
(
line
)
;
if
(
m
.
matches
(
)
)
{
final
String
code
=
m
.
group
(
1
)
;
if
(
code
.
equals
(
IMAP_OK
)
)
{
return
OK
;
}
if
(
code
.
equals
(
IMAP_BAD
)
)
{
return
BAD
;
}
if
(
code
.
equals
(
IMAP_NO
)
)
{
return
NO
;
}
}
throw
new
MalformedServerReplyException
(
"Received unexpected IMAP protocol response from server: '"
+
line
+
"'."
)
;
}
public
static
int
getUntaggedReplyCode
(
final
String
line
)
throws
IOException
{
return
getReplyCode
(
line
,
UNTAGGED_PATTERN
)
;
}
public
static
boolean
isContinuation
(
final
int
replyCode
)
{
return
replyCode
==
CONT
;
}
public
static
boolean
isContinuation
(
final
String
line
)
{
return
line
.
startsWith
(
IMAP_CONTINUATION_PREFIX
)
;
}
public
static
boolean
isSuccess
(
final
int
replyCode
)
{
return
replyCode
==
OK
;
}
public
static
boolean
isUntagged
(
final
String
line
)
{
return
line
.
startsWith
(
IMAP_UNTAGGED_PREFIX
)
;
}
public
static
int
literalCount
(
final
String
line
)
{
final
Matcher
m
=
LITERAL_PATTERN
.
matcher
(
line
)
;
if
(
m
.
find
(
)
)
{
return
Integer
.
parseInt
(
m
.
group
(
1
)
)
;
}
return
-
1
;
}
private
IMAPReply
(
)
{
}
}
<EOF>
