package
org
.
apache
.
commons
.
net
.
nntp
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
BufferedWriter
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStreamReader
;
import
java
.
io
.
OutputStreamWriter
;
import
java
.
nio
.
charset
.
Charset
;
import
java
.
nio
.
charset
.
StandardCharsets
;
import
org
.
apache
.
commons
.
net
.
MalformedServerReplyException
;
import
org
.
apache
.
commons
.
net
.
ProtocolCommandSupport
;
import
org
.
apache
.
commons
.
net
.
SocketClient
;
import
org
.
apache
.
commons
.
net
.
io
.
CRLFLineReader
;
public
class
NNTP
extends
SocketClient
{
public
static
final
int
DEFAULT_PORT
=
119
;
private
static
final
Charset
DEFAULT_ENCODING
=
StandardCharsets
.
ISO_8859_1
;
boolean
_isAllowedToPost
;
private
int
replyCode
;
private
String
replyString
;
protected
BufferedReader
_reader_
;
protected
BufferedWriter
_writer_
;
protected
ProtocolCommandSupport
_commandSupport_
;
public
NNTP
(
)
{
setDefaultPort
(
DEFAULT_PORT
)
;
replyString
=
null
;
_reader_
=
null
;
_writer_
=
null
;
_isAllowedToPost
=
false
;
_commandSupport_
=
new
ProtocolCommandSupport
(
this
)
;
}
@
Override
protected
void
_connectAction_
(
)
throws
IOException
{
super
.
_connectAction_
(
)
;
_reader_
=
new
CRLFLineReader
(
new
InputStreamReader
(
_input_
,
DEFAULT_ENCODING
)
)
;
_writer_
=
new
BufferedWriter
(
new
OutputStreamWriter
(
_output_
,
DEFAULT_ENCODING
)
)
;
getReply
(
)
;
_isAllowedToPost
=
replyCode
==
NNTPReply
.
SERVER_READY_POSTING_ALLOWED
;
}
public
int
article
(
)
throws
IOException
{
return
sendCommand
(
NNTPCommand
.
ARTICLE
)
;
}
@
Deprecated
public
int
article
(
final
int
a
)
throws
IOException
{
return
article
(
(
long
)
a
)
;
}
public
int
article
(
final
long
articleNumber
)
throws
IOException
{
return
sendCommand
(
NNTPCommand
.
ARTICLE
,
Long
.
toString
(
articleNumber
)
)
;
}
public
int
article
(
final
String
messageId
)
throws
IOException
{
return
sendCommand
(
NNTPCommand
.
ARTICLE
,
messageId
)
;
}
public
int
authinfoPass
(
final
String
password
)
throws
IOException
{
final
String
passParameter
=
"PASS "
+
password
;
return
sendCommand
(
NNTPCommand
.
AUTHINFO
,
passParameter
)
;
}
public
int
authinfoUser
(
final
String
username
)
throws
IOException
{
final
String
userParameter
=
"USER "
+
username
;
return
sendCommand
(
NNTPCommand
.
AUTHINFO
,
userParameter
)
;
}
public
int
body
(
)
throws
IOException
{
return
sendCommand
(
NNTPCommand
.
BODY
)
;
}
@
Deprecated
public
int
body
(
final
int
a
)
throws
IOException
{
return
body
(
(
long
)
a
)
;
}
public
int
body
(
final
long
articleNumber
)
throws
IOException
{
return
sendCommand
(
NNTPCommand
.
BODY
,
Long
.
toString
(
articleNumber
)
)
;
}
public
int
body
(
final
String
messageId
)
throws
IOException
{
return
sendCommand
(
NNTPCommand
.
BODY
,
messageId
)
;
}
@
Override
public
void
disconnect
(
)
throws
IOException
{
super
.
disconnect
(
)
;
_reader_
=
null
;
_writer_
=
null
;
replyString
=
null
;
_isAllowedToPost
=
false
;
}
@
Override
protected
ProtocolCommandSupport
getCommandSupport
(
)
{
return
_commandSupport_
;
}
public
int
getReply
(
)
throws
IOException
{
replyString
=
_reader_
.
readLine
(
)
;
if
(
replyString
==
null
)
{
throw
new
NNTPConnectionClosedException
(
"Connection closed without indication."
)
;
}
if
(
replyString
.
length
(
)
<
3
)
{
throw
new
MalformedServerReplyException
(
"Truncated server reply: "
+
replyString
)
;
}
try
{
replyCode
=
Integer
.
parseInt
(
replyString
.
substring
(
0
,
3
)
)
;
}
catch
(
final
NumberFormatException
e
)
{
throw
new
MalformedServerReplyException
(
"Could not parse response code.\nServer Reply: "
+
replyString
)
;
}
fireReplyReceived
(
replyCode
,
replyString
+
SocketClient
.
NETASCII_EOL
)
;
if
(
replyCode
==
NNTPReply
.
SERVICE_DISCONTINUED
)
{
throw
new
NNTPConnectionClosedException
(
"NNTP response 400 received.  Server closed connection."
)
;
}
return
replyCode
;
}
public
int
getReplyCode
(
)
{
return
replyCode
;
}
public
String
getReplyString
(
)
{
return
replyString
;
}
public
int
group
(
final
String
newsgroup
)
throws
IOException
{
return
sendCommand
(
NNTPCommand
.
GROUP
,
newsgroup
)
;
}
public
int
head
(
)
throws
IOException
{
return
sendCommand
(
NNTPCommand
.
HEAD
)
;
}
@
Deprecated
public
int
head
(
final
int
a
)
throws
IOException
{
return
head
(
(
long
)
a
)
;
}
public
int
head
(
final
long
articleNumber
)
throws
IOException
{
return
sendCommand
(
NNTPCommand
.
HEAD
,
Long
.
toString
(
articleNumber
)
)
;
}
public
int
head
(
final
String
messageId
)
throws
IOException
{
return
sendCommand
(
NNTPCommand
.
HEAD
,
messageId
)
;
}
public
int
help
(
)
throws
IOException
{
return
sendCommand
(
NNTPCommand
.
HELP
)
;
}
public
int
ihave
(
final
String
messageId
)
throws
IOException
{
return
sendCommand
(
NNTPCommand
.
IHAVE
,
messageId
)
;
}
public
boolean
isAllowedToPost
(
)
{
return
_isAllowedToPost
;
}
public
int
last
(
)
throws
IOException
{
return
sendCommand
(
NNTPCommand
.
LAST
)
;
}
public
int
list
(
)
throws
IOException
{
return
sendCommand
(
NNTPCommand
.
LIST
)
;
}
public
int
listActive
(
final
String
wildmat
)
throws
IOException
{
final
StringBuilder
command
=
new
StringBuilder
(
"ACTIVE "
)
;
command
.
append
(
wildmat
)
;
return
sendCommand
(
NNTPCommand
.
LIST
,
command
.
toString
(
)
)
;
}
public
int
newgroups
(
final
String
date
,
final
String
time
,
final
boolean
GMT
,
final
String
distributions
)
throws
IOException
{
final
StringBuilder
buffer
=
new
StringBuilder
(
)
;
buffer
.
append
(
date
)
;
buffer
.
append
(
' '
)
;
buffer
.
append
(
time
)
;
if
(
GMT
)
{
buffer
.
append
(
' '
)
;
buffer
.
append
(
"GMT"
)
;
}
if
(
distributions
!=
null
)
{
buffer
.
append
(
" <"
)
;
buffer
.
append
(
distributions
)
;
buffer
.
append
(
'>'
)
;
}
return
sendCommand
(
NNTPCommand
.
NEWGROUPS
,
buffer
.
toString
(
)
)
;
}
public
int
newnews
(
final
String
newsgroups
,
final
String
date
,
final
String
time
,
final
boolean
GMT
,
final
String
distributions
)
throws
IOException
{
final
StringBuilder
buffer
=
new
StringBuilder
(
)
;
buffer
.
append
(
newsgroups
)
;
buffer
.
append
(
' '
)
;
buffer
.
append
(
date
)
;
buffer
.
append
(
' '
)
;
buffer
.
append
(
time
)
;
if
(
GMT
)
{
buffer
.
append
(
' '
)
;
buffer
.
append
(
"GMT"
)
;
}
if
(
distributions
!=
null
)
{
buffer
.
append
(
" <"
)
;
buffer
.
append
(
distributions
)
;
buffer
.
append
(
'>'
)
;
}
return
sendCommand
(
NNTPCommand
.
NEWNEWS
,
buffer
.
toString
(
)
)
;
}
public
int
next
(
)
throws
IOException
{
return
sendCommand
(
NNTPCommand
.
NEXT
)
;
}
public
int
post
(
)
throws
IOException
{
return
sendCommand
(
NNTPCommand
.
POST
)
;
}
public
int
quit
(
)
throws
IOException
{
return
sendCommand
(
NNTPCommand
.
QUIT
)
;
}
public
int
sendCommand
(
final
int
command
)
throws
IOException
{
return
sendCommand
(
command
,
null
)
;
}
public
int
sendCommand
(
final
int
command
,
final
String
args
)
throws
IOException
{
return
sendCommand
(
NNTPCommand
.
getCommand
(
command
)
,
args
)
;
}
public
int
sendCommand
(
final
String
command
)
throws
IOException
{
return
sendCommand
(
command
,
null
)
;
}
public
int
sendCommand
(
final
String
command
,
final
String
args
)
throws
IOException
{
final
StringBuilder
__commandBuffer
=
new
StringBuilder
(
)
;
__commandBuffer
.
append
(
command
)
;
if
(
args
!=
null
)
{
__commandBuffer
.
append
(
' '
)
;
__commandBuffer
.
append
(
args
)
;
}
__commandBuffer
.
append
(
SocketClient
.
NETASCII_EOL
)
;
final
String
message
;
_writer_
.
write
(
message
=
__commandBuffer
.
toString
(
)
)
;
_writer_
.
flush
(
)
;
fireCommandSent
(
command
,
message
)
;
return
getReply
(
)
;
}
public
int
stat
(
)
throws
IOException
{
return
sendCommand
(
NNTPCommand
.
STAT
)
;
}
@
Deprecated
public
int
stat
(
final
int
a
)
throws
IOException
{
return
stat
(
(
long
)
a
)
;
}
public
int
stat
(
final
long
articleNumber
)
throws
IOException
{
return
sendCommand
(
NNTPCommand
.
STAT
,
Long
.
toString
(
articleNumber
)
)
;
}
public
int
stat
(
final
String
messageId
)
throws
IOException
{
return
sendCommand
(
NNTPCommand
.
STAT
,
messageId
)
;
}
public
int
xhdr
(
final
String
header
,
final
String
selectedArticles
)
throws
IOException
{
final
StringBuilder
command
=
new
StringBuilder
(
header
)
;
command
.
append
(
" "
)
;
command
.
append
(
selectedArticles
)
;
return
sendCommand
(
NNTPCommand
.
XHDR
,
command
.
toString
(
)
)
;
}
public
int
xover
(
final
String
selectedArticles
)
throws
IOException
{
return
sendCommand
(
NNTPCommand
.
XOVER
,
selectedArticles
)
;
}
}
<EOF>
