package
org
.
apache
.
commons
.
net
.
finger
;
import
java
.
io
.
BufferedOutputStream
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
DataOutputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
InputStreamReader
;
import
org
.
apache
.
commons
.
net
.
SocketClient
;
import
org
.
apache
.
commons
.
net
.
util
.
Charsets
;
public
class
FingerClient
extends
SocketClient
{
public
static
final
int
DEFAULT_PORT
=
79
;
private
static
final
String
LONG_FLAG
=
"/W "
;
private
final
transient
char
[
]
buffer
=
new
char
[
1024
]
;
public
FingerClient
(
)
{
setDefaultPort
(
DEFAULT_PORT
)
;
}
public
InputStream
getInputStream
(
final
boolean
longOutput
)
throws
IOException
{
return
getInputStream
(
longOutput
,
""
)
;
}
public
InputStream
getInputStream
(
final
boolean
longOutput
,
final
String
username
)
throws
IOException
{
return
getInputStream
(
longOutput
,
username
,
null
)
;
}
public
InputStream
getInputStream
(
final
boolean
longOutput
,
final
String
username
,
final
String
encoding
)
throws
IOException
{
final
DataOutputStream
output
;
final
StringBuilder
buffer
=
new
StringBuilder
(
64
)
;
if
(
longOutput
)
{
buffer
.
append
(
LONG_FLAG
)
;
}
buffer
.
append
(
username
)
;
buffer
.
append
(
SocketClient
.
NETASCII_EOL
)
;
final
byte
[
]
encodedQuery
=
buffer
.
toString
(
)
.
getBytes
(
Charsets
.
toCharset
(
encoding
)
.
name
(
)
)
;
output
=
new
DataOutputStream
(
new
BufferedOutputStream
(
_output_
,
1024
)
)
;
output
.
write
(
encodedQuery
,
0
,
encodedQuery
.
length
)
;
output
.
flush
(
)
;
return
_input_
;
}
public
String
query
(
final
boolean
longOutput
)
throws
IOException
{
return
query
(
longOutput
,
""
)
;
}
public
String
query
(
final
boolean
longOutput
,
final
String
username
)
throws
IOException
{
int
read
;
final
StringBuilder
result
=
new
StringBuilder
(
buffer
.
length
)
;
try
(
final
BufferedReader
input
=
new
BufferedReader
(
new
InputStreamReader
(
getInputStream
(
longOutput
,
username
)
,
getCharset
(
)
)
)
)
{
while
(
true
)
{
read
=
input
.
read
(
buffer
,
0
,
buffer
.
length
)
;
if
(
read
<=
0
)
{
break
;
}
result
.
append
(
buffer
,
0
,
read
)
;
}
}
return
result
.
toString
(
)
;
}
}
<EOF>
