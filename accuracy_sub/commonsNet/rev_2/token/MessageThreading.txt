package
org
.
apache
.
commons
.
net
.
examples
.
nntp
;
import
java
.
io
.
IOException
;
import
java
.
io
.
PrintWriter
;
import
java
.
net
.
SocketException
;
import
org
.
apache
.
commons
.
net
.
PrintCommandListener
;
import
org
.
apache
.
commons
.
net
.
nntp
.
Article
;
import
org
.
apache
.
commons
.
net
.
nntp
.
NNTPClient
;
import
org
.
apache
.
commons
.
net
.
nntp
.
NewsgroupInfo
;
import
org
.
apache
.
commons
.
net
.
nntp
.
Threader
;
public
class
MessageThreading
{
public
static
void
main
(
final
String
[
]
args
)
throws
SocketException
,
IOException
{
if
(
args
.
length
!=
2
&&
args
.
length
!=
4
)
{
System
.
out
.
println
(
"Usage: MessageThreading <hostname> <groupname> [<user> <password>]"
)
;
return
;
}
final
String
hostname
=
args
[
0
]
;
final
String
newsgroup
=
args
[
1
]
;
final
NNTPClient
client
=
new
NNTPClient
(
)
;
client
.
addProtocolCommandListener
(
new
PrintCommandListener
(
new
PrintWriter
(
System
.
out
)
,
true
)
)
;
client
.
connect
(
hostname
)
;
if
(
args
.
length
==
4
)
{
final
String
user
=
args
[
2
]
;
final
String
password
=
args
[
3
]
;
if
(
!
client
.
authenticate
(
user
,
password
)
)
{
System
.
out
.
println
(
"Authentication failed for user "
+
user
+
"!"
)
;
System
.
exit
(
1
)
;
}
}
final
String
fmt
[
]
=
client
.
listOverviewFmt
(
)
;
if
(
fmt
!=
null
)
{
System
.
out
.
println
(
"LIST OVERVIEW.FMT:"
)
;
for
(
final
String
s
:
fmt
)
{
System
.
out
.
println
(
s
)
;
}
}
else
{
System
.
out
.
println
(
"Failed to get OVERVIEW.FMT"
)
;
}
final
NewsgroupInfo
group
=
new
NewsgroupInfo
(
)
;
client
.
selectNewsgroup
(
newsgroup
,
group
)
;
final
long
lowArticleNumber
=
group
.
getFirstArticleLong
(
)
;
final
long
highArticleNumber
=
lowArticleNumber
+
5000
;
System
.
out
.
println
(
"Retrieving articles between ["
+
lowArticleNumber
+
"] and ["
+
highArticleNumber
+
"]"
)
;
final
Iterable
<
Article
>
articles
=
client
.
iterateArticleInfo
(
lowArticleNumber
,
highArticleNumber
)
;
System
.
out
.
println
(
"Building message thread tree..."
)
;
final
Threader
threader
=
new
Threader
(
)
;
final
Article
root
=
(
Article
)
threader
.
thread
(
articles
)
;
Article
.
printThread
(
root
,
0
)
;
}
public
MessageThreading
(
)
{
}
}
<EOF>
