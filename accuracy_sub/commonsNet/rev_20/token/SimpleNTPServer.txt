package
org
.
apache
.
commons
.
net
.
examples
.
ntp
;
import
java
.
io
.
IOException
;
import
java
.
net
.
DatagramPacket
;
import
java
.
net
.
DatagramSocket
;
import
org
.
apache
.
commons
.
net
.
ntp
.
NtpUtils
;
import
org
.
apache
.
commons
.
net
.
ntp
.
NtpV3Impl
;
import
org
.
apache
.
commons
.
net
.
ntp
.
NtpV3Packet
;
import
org
.
apache
.
commons
.
net
.
ntp
.
TimeStamp
;
public
class
SimpleNTPServer
implements
Runnable
{
public
static
void
main
(
final
String
[
]
args
)
{
int
port
=
NtpV3Packet
.
NTP_PORT
;
if
(
args
.
length
!=
0
)
{
try
{
port
=
Integer
.
parseInt
(
args
[
0
]
)
;
}
catch
(
final
NumberFormatException
nfe
)
{
nfe
.
printStackTrace
(
)
;
}
}
final
SimpleNTPServer
timeServer
=
new
SimpleNTPServer
(
port
)
;
try
{
timeServer
.
start
(
)
;
}
catch
(
final
IOException
e
)
{
e
.
printStackTrace
(
)
;
}
}
private
int
port
;
private
volatile
boolean
running
;
private
boolean
started
;
private
DatagramSocket
socket
;
public
SimpleNTPServer
(
)
{
this
(
NtpV3Packet
.
NTP_PORT
)
;
}
public
SimpleNTPServer
(
final
int
port
)
{
if
(
port
<
0
)
{
throw
new
IllegalArgumentException
(
)
;
}
this
.
port
=
port
;
}
public
void
connect
(
)
throws
IOException
{
if
(
socket
==
null
)
{
socket
=
new
DatagramSocket
(
port
)
;
if
(
port
==
0
)
{
port
=
socket
.
getLocalPort
(
)
;
}
System
.
out
.
println
(
"Running NTP service on port "
+
port
+
"/UDP"
)
;
}
}
public
int
getPort
(
)
{
return
port
;
}
protected
void
handlePacket
(
final
DatagramPacket
request
,
final
long
rcvTime
)
throws
IOException
{
final
NtpV3Packet
message
=
new
NtpV3Impl
(
)
;
message
.
setDatagramPacket
(
request
)
;
System
.
out
.
printf
(
"NTP packet from %s mode=%s%n"
,
request
.
getAddress
(
)
.
getHostAddress
(
)
,
NtpUtils
.
getModeName
(
message
.
getMode
(
)
)
)
;
if
(
message
.
getMode
(
)
==
NtpV3Packet
.
MODE_CLIENT
)
{
final
NtpV3Packet
response
=
new
NtpV3Impl
(
)
;
response
.
setStratum
(
1
)
;
response
.
setMode
(
NtpV3Packet
.
MODE_SERVER
)
;
response
.
setVersion
(
NtpV3Packet
.
VERSION_3
)
;
response
.
setPrecision
(
-
20
)
;
response
.
setPoll
(
0
)
;
response
.
setRootDelay
(
62
)
;
response
.
setRootDispersion
(
(
int
)
(
16.51
*
65.536
)
)
;
response
.
setOriginateTimeStamp
(
message
.
getTransmitTimeStamp
(
)
)
;
response
.
setReceiveTimeStamp
(
TimeStamp
.
getNtpTime
(
rcvTime
)
)
;
response
.
setReferenceTime
(
response
.
getReceiveTimeStamp
(
)
)
;
response
.
setReferenceId
(
0x4C434C00
)
;
response
.
setTransmitTime
(
TimeStamp
.
getNtpTime
(
System
.
currentTimeMillis
(
)
)
)
;
final
DatagramPacket
dp
=
response
.
getDatagramPacket
(
)
;
dp
.
setPort
(
request
.
getPort
(
)
)
;
dp
.
setAddress
(
request
.
getAddress
(
)
)
;
socket
.
send
(
dp
)
;
}
}
public
boolean
isRunning
(
)
{
return
running
;
}
public
boolean
isStarted
(
)
{
return
started
;
}
@
Override
public
void
run
(
)
{
running
=
true
;
final
byte
buffer
[
]
=
new
byte
[
48
]
;
final
DatagramPacket
request
=
new
DatagramPacket
(
buffer
,
buffer
.
length
)
;
do
{
try
{
socket
.
receive
(
request
)
;
final
long
rcvTime
=
System
.
currentTimeMillis
(
)
;
handlePacket
(
request
,
rcvTime
)
;
}
catch
(
final
IOException
e
)
{
if
(
running
)
{
e
.
printStackTrace
(
)
;
}
}
}
while
(
running
)
;
}
public
void
start
(
)
throws
IOException
{
if
(
socket
==
null
)
{
connect
(
)
;
}
if
(
!
started
)
{
started
=
true
;
new
Thread
(
this
)
.
start
(
)
;
}
}
public
void
stop
(
)
{
running
=
false
;
if
(
socket
!=
null
)
{
socket
.
close
(
)
;
socket
=
null
;
}
started
=
false
;
}
}
<EOF>
