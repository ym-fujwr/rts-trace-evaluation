package
org
.
apache
.
commons
.
net
.
nntp
;
import
java
.
io
.
PrintStream
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Collections
;
import
org
.
apache
.
commons
.
net
.
util
.
NetConstants
;
public
class
Article
implements
Threadable
{
public
static
void
printThread
(
final
Article
article
)
{
printThread
(
article
,
0
,
System
.
out
)
;
}
public
static
void
printThread
(
final
Article
article
,
final
int
depth
)
{
printThread
(
article
,
depth
,
System
.
out
)
;
}
public
static
void
printThread
(
final
Article
article
,
final
int
depth
,
final
PrintStream
ps
)
{
for
(
int
i
=
0
;
i
<
depth
;
++
i
)
{
ps
.
print
(
"==>"
)
;
}
ps
.
println
(
article
.
getSubject
(
)
+
"\t"
+
article
.
getFrom
(
)
+
"\t"
+
article
.
getArticleId
(
)
)
;
if
(
article
.
kid
!=
null
)
{
printThread
(
article
.
kid
,
depth
+
1
)
;
}
if
(
article
.
next
!=
null
)
{
printThread
(
article
.
next
,
depth
)
;
}
}
public
static
void
printThread
(
final
Article
article
,
final
PrintStream
ps
)
{
printThread
(
article
,
0
,
ps
)
;
}
private
long
articleNumber
;
private
String
subject
;
private
String
date
;
private
String
articleId
;
private
String
simplifiedSubject
;
private
String
from
;
private
ArrayList
<
String
>
references
;
private
boolean
isReply
;
public
Article
kid
,
next
;
public
Article
(
)
{
articleNumber
=
-
1
;
}
@
Deprecated
public
void
addHeaderField
(
final
String
name
,
final
String
val
)
{
}
public
void
addReference
(
final
String
msgId
)
{
if
(
msgId
==
null
||
msgId
.
isEmpty
(
)
)
{
return
;
}
if
(
references
==
null
)
{
references
=
new
ArrayList
<
>
(
)
;
}
isReply
=
true
;
Collections
.
addAll
(
references
,
msgId
.
split
(
" "
)
)
;
}
private
void
flushSubjectCache
(
)
{
simplifiedSubject
=
null
;
}
public
String
getArticleId
(
)
{
return
articleId
;
}
@
Deprecated
public
int
getArticleNumber
(
)
{
return
(
int
)
articleNumber
;
}
public
long
getArticleNumberLong
(
)
{
return
articleNumber
;
}
public
String
getDate
(
)
{
return
date
;
}
public
String
getFrom
(
)
{
return
from
;
}
public
String
[
]
getReferences
(
)
{
if
(
references
==
null
)
{
return
NetConstants
.
EMPTY_STRING_ARRAY
;
}
return
references
.
toArray
(
NetConstants
.
EMPTY_STRING_ARRAY
)
;
}
public
String
getSubject
(
)
{
return
subject
;
}
@
Override
public
boolean
isDummy
(
)
{
return
(
articleNumber
==
-
1
)
;
}
@
Override
public
Threadable
makeDummy
(
)
{
return
new
Article
(
)
;
}
@
Override
public
String
messageThreadId
(
)
{
return
articleId
;
}
@
Override
public
String
[
]
messageThreadReferences
(
)
{
return
getReferences
(
)
;
}
public
void
setArticleId
(
final
String
string
)
{
articleId
=
string
;
}
@
Deprecated
public
void
setArticleNumber
(
final
int
a
)
{
articleNumber
=
a
;
}
public
void
setArticleNumber
(
final
long
l
)
{
articleNumber
=
l
;
}
@
Override
public
void
setChild
(
final
Threadable
child
)
{
this
.
kid
=
(
Article
)
child
;
flushSubjectCache
(
)
;
}
public
void
setDate
(
final
String
string
)
{
date
=
string
;
}
public
void
setFrom
(
final
String
string
)
{
from
=
string
;
}
@
Override
public
void
setNext
(
final
Threadable
next
)
{
this
.
next
=
(
Article
)
next
;
flushSubjectCache
(
)
;
}
public
void
setSubject
(
final
String
string
)
{
subject
=
string
;
}
@
Override
public
String
simplifiedSubject
(
)
{
if
(
simplifiedSubject
==
null
)
{
simplifySubject
(
)
;
}
return
simplifiedSubject
;
}
private
void
simplifySubject
(
)
{
int
start
=
0
;
final
String
subject
=
getSubject
(
)
;
final
int
len
=
subject
.
length
(
)
;
boolean
done
=
false
;
while
(
!
done
)
{
done
=
true
;
while
(
start
<
len
&&
subject
.
charAt
(
start
)
==
' '
)
{
start
++
;
}
if
(
start
<
(
len
-
2
)
&&
(
subject
.
charAt
(
start
)
==
'r'
||
subject
.
charAt
(
start
)
==
'R'
)
&&
(
subject
.
charAt
(
start
+
1
)
==
'e'
||
subject
.
charAt
(
start
+
1
)
==
'E'
)
)
{
if
(
subject
.
charAt
(
start
+
2
)
==
':'
)
{
start
+=
3
;
done
=
false
;
}
else
if
(
start
<
(
len
-
2
)
&&
(
subject
.
charAt
(
start
+
2
)
==
'['
||
subject
.
charAt
(
start
+
2
)
==
'('
)
)
{
int
i
=
start
+
3
;
while
(
i
<
len
&&
subject
.
charAt
(
i
)
>=
'0'
&&
subject
.
charAt
(
i
)
<=
'9'
)
{
i
++
;
}
if
(
i
<
(
len
-
1
)
&&
(
subject
.
charAt
(
i
)
==
']'
||
subject
.
charAt
(
i
)
==
')'
)
&&
subject
.
charAt
(
i
+
1
)
==
':'
)
{
start
=
i
+
2
;
done
=
false
;
}
}
}
if
(
"(no subject)"
.
equals
(
simplifiedSubject
)
)
{
simplifiedSubject
=
""
;
}
int
end
=
len
;
while
(
end
>
start
&&
subject
.
charAt
(
end
-
1
)
<
' '
)
{
end
--
;
}
if
(
start
==
0
&&
end
==
len
)
{
simplifiedSubject
=
subject
;
}
else
{
simplifiedSubject
=
subject
.
substring
(
start
,
end
)
;
}
}
}
@
Override
public
boolean
subjectIsReply
(
)
{
return
isReply
;
}
@
Override
public
String
toString
(
)
{
return
articleNumber
+
" "
+
articleId
+
" "
+
subject
;
}
}
<EOF>
