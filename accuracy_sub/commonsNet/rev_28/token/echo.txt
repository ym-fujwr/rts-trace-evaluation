package
org
.
apache
.
commons
.
net
.
examples
.
unix
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStreamReader
;
import
java
.
io
.
InterruptedIOException
;
import
java
.
io
.
OutputStreamWriter
;
import
java
.
io
.
PrintWriter
;
import
java
.
net
.
InetAddress
;
import
java
.
net
.
SocketException
;
import
org
.
apache
.
commons
.
net
.
echo
.
EchoTCPClient
;
import
org
.
apache
.
commons
.
net
.
echo
.
EchoUDPClient
;
public
final
class
echo
{
public
static
void
echoTCP
(
final
String
host
)
throws
IOException
{
final
EchoTCPClient
client
=
new
EchoTCPClient
(
)
;
final
BufferedReader
input
;
final
BufferedReader
echoInput
;
final
PrintWriter
echoOutput
;
String
line
;
client
.
setDefaultTimeout
(
60000
)
;
client
.
connect
(
host
)
;
System
.
out
.
println
(
"Connected to "
+
host
+
"."
)
;
input
=
new
BufferedReader
(
new
InputStreamReader
(
System
.
in
)
)
;
echoOutput
=
new
PrintWriter
(
new
OutputStreamWriter
(
client
.
getOutputStream
(
)
)
,
true
)
;
echoInput
=
new
BufferedReader
(
new
InputStreamReader
(
client
.
getInputStream
(
)
)
)
;
while
(
(
line
=
input
.
readLine
(
)
)
!=
null
)
{
echoOutput
.
println
(
line
)
;
System
.
out
.
println
(
echoInput
.
readLine
(
)
)
;
}
echoOutput
.
close
(
)
;
echoInput
.
close
(
)
;
echoInput
.
close
(
)
;
client
.
disconnect
(
)
;
}
public
static
void
echoUDP
(
final
String
host
)
throws
IOException
{
int
length
,
count
;
byte
[
]
data
;
String
line
;
final
BufferedReader
input
;
final
InetAddress
address
;
final
EchoUDPClient
client
;
input
=
new
BufferedReader
(
new
InputStreamReader
(
System
.
in
)
)
;
address
=
InetAddress
.
getByName
(
host
)
;
client
=
new
EchoUDPClient
(
)
;
client
.
open
(
)
;
client
.
setSoTimeout
(
5000
)
;
System
.
out
.
println
(
"Ready to echo to "
+
host
+
"."
)
;
while
(
(
line
=
input
.
readLine
(
)
)
!=
null
)
{
data
=
line
.
getBytes
(
)
;
client
.
send
(
data
,
address
)
;
count
=
0
;
do
{
try
{
length
=
client
.
receive
(
data
)
;
}
catch
(
final
SocketException
e
)
{
System
.
err
.
println
(
"SocketException: Timed out and dropped packet"
)
;
break
;
}
catch
(
final
InterruptedIOException
e
)
{
System
.
err
.
println
(
"InterruptedIOException: Timed out and dropped packet"
)
;
break
;
}
System
.
out
.
print
(
new
String
(
data
,
0
,
length
)
)
;
count
+=
length
;
}
while
(
count
<
data
.
length
)
;
System
.
out
.
println
(
)
;
}
client
.
close
(
)
;
}
public
static
void
main
(
final
String
[
]
args
)
{
if
(
args
.
length
==
1
)
{
try
{
echoTCP
(
args
[
0
]
)
;
}
catch
(
final
IOException
e
)
{
e
.
printStackTrace
(
)
;
System
.
exit
(
1
)
;
}
}
else
if
(
args
.
length
==
2
&&
args
[
0
]
.
equals
(
"-udp"
)
)
{
try
{
echoUDP
(
args
[
1
]
)
;
}
catch
(
final
IOException
e
)
{
e
.
printStackTrace
(
)
;
System
.
exit
(
1
)
;
}
}
else
{
System
.
err
.
println
(
"Usage: echo [-udp] <hostname>"
)
;
System
.
exit
(
1
)
;
}
}
}
<EOF>
