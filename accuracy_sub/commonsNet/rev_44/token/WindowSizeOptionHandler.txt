package
org
.
apache
.
commons
.
net
.
telnet
;
public
class
WindowSizeOptionHandler
extends
TelnetOptionHandler
{
protected
static
final
int
WINDOW_SIZE
=
31
;
private
int
width
=
80
;
private
int
height
=
24
;
public
WindowSizeOptionHandler
(
final
int
nWidth
,
final
int
nHeight
)
{
super
(
TelnetOption
.
WINDOW_SIZE
,
false
,
false
,
false
,
false
)
;
width
=
nWidth
;
height
=
nHeight
;
}
public
WindowSizeOptionHandler
(
final
int
nWidth
,
final
int
nHeight
,
final
boolean
initlocal
,
final
boolean
initremote
,
final
boolean
acceptlocal
,
final
boolean
acceptremote
)
{
super
(
TelnetOption
.
WINDOW_SIZE
,
initlocal
,
initremote
,
acceptlocal
,
acceptremote
)
;
width
=
nWidth
;
height
=
nHeight
;
}
@
Override
public
int
[
]
startSubnegotiationLocal
(
)
{
final
int
nCompoundWindowSize
=
width
*
0x10000
+
height
;
int
nResponseSize
=
5
;
int
nIndex
;
int
nShift
;
int
nTurnedOnBits
;
if
(
width
%
0x100
==
0xFF
)
{
nResponseSize
+=
1
;
}
if
(
width
/
0x100
==
0xFF
)
{
nResponseSize
+=
1
;
}
if
(
height
%
0x100
==
0xFF
)
{
nResponseSize
+=
1
;
}
if
(
height
/
0x100
==
0xFF
)
{
nResponseSize
+=
1
;
}
final
int
response
[
]
=
new
int
[
nResponseSize
]
;
response
[
0
]
=
WINDOW_SIZE
;
for
(
nIndex
=
1
,
nShift
=
24
;
nIndex
<
nResponseSize
;
nIndex
++
,
nShift
-=
8
)
{
nTurnedOnBits
=
0xFF
;
nTurnedOnBits
<<=
nShift
;
response
[
nIndex
]
=
(
nCompoundWindowSize
&
nTurnedOnBits
)
>
>
>
nShift
;
if
(
response
[
nIndex
]
==
0xff
)
{
nIndex
++
;
response
[
nIndex
]
=
0xff
;
}
}
return
response
;
}
}
<EOF>
