package
org
.
apache
.
commons
.
net
.
telnet
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
OutputStream
;
public
class
TelnetTestResponder
implements
Runnable
{
InputStream
_is
;
OutputStream
_os
;
String
_inputs
[
]
,
_outputs
[
]
;
long
_timeout
;
public
TelnetTestResponder
(
final
InputStream
is
,
final
OutputStream
os
,
final
String
inputs
[
]
,
final
String
outputs
[
]
,
final
long
timeout
)
{
_is
=
is
;
_os
=
os
;
_timeout
=
timeout
;
_inputs
=
inputs
;
_outputs
=
outputs
;
final
Thread
reader
=
new
Thread
(
this
)
;
reader
.
start
(
)
;
}
@
Override
public
void
run
(
)
{
boolean
result
=
false
;
final
byte
buffer
[
]
=
new
byte
[
32
]
;
final
long
starttime
=
System
.
currentTimeMillis
(
)
;
try
{
final
StringBuilder
readbytes
=
new
StringBuilder
(
)
;
while
(
!
result
&&
System
.
currentTimeMillis
(
)
-
starttime
<
_timeout
)
{
if
(
_is
.
available
(
)
>
0
)
{
final
int
ret_read
=
_is
.
read
(
buffer
)
;
readbytes
.
append
(
new
String
(
buffer
,
0
,
ret_read
)
)
;
for
(
int
ii
=
0
;
ii
<
_inputs
.
length
;
ii
++
)
{
if
(
readbytes
.
indexOf
(
_inputs
[
ii
]
)
>=
0
)
{
Thread
.
sleep
(
1000
*
ii
)
;
_os
.
write
(
_outputs
[
ii
]
.
getBytes
(
)
)
;
result
=
true
;
}
}
}
else
{
Thread
.
sleep
(
500
)
;
}
}
}
catch
(
final
Exception
e
)
{
System
.
err
.
println
(
"Error while waiting endstring. "
+
e
.
getMessage
(
)
)
;
}
}
}
<EOF>
