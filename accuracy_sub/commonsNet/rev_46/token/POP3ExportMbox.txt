package
org
.
apache
.
commons
.
net
.
examples
.
mail
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
File
;
import
java
.
io
.
FileOutputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
OutputStreamWriter
;
import
java
.
nio
.
charset
.
StandardCharsets
;
import
java
.
text
.
SimpleDateFormat
;
import
java
.
util
.
Date
;
import
java
.
util
.
regex
.
Matcher
;
import
java
.
util
.
regex
.
Pattern
;
import
org
.
apache
.
commons
.
net
.
pop3
.
POP3Client
;
import
org
.
apache
.
commons
.
net
.
pop3
.
POP3MessageInfo
;
import
org
.
apache
.
commons
.
net
.
pop3
.
POP3SClient
;
public
final
class
POP3ExportMbox
{
private
static
final
Pattern
PATFROM
=
Pattern
.
compile
(
">*From "
)
;
public
static
void
main
(
final
String
[
]
args
)
{
int
argIdx
;
String
file
=
null
;
for
(
argIdx
=
0
;
argIdx
<
args
.
length
;
argIdx
++
)
{
if
(
!
args
[
argIdx
]
.
equals
(
"-F"
)
)
{
break
;
}
file
=
args
[
++
argIdx
]
;
}
final
int
argCount
=
args
.
length
-
argIdx
;
if
(
argCount
<
3
)
{
System
.
err
.
println
(
"Usage: POP3Mail [-F file/directory] <server[:port]> <username> <password|-|*|VARNAME> [TLS [true=implicit]]"
)
;
System
.
exit
(
1
)
;
}
final
String
arg0
[
]
=
args
[
argIdx
++
]
.
split
(
":"
)
;
final
String
server
=
arg0
[
0
]
;
final
String
username
=
args
[
argIdx
++
]
;
String
password
=
args
[
argIdx
++
]
;
try
{
password
=
Utils
.
getPassword
(
username
,
password
)
;
}
catch
(
final
IOException
e1
)
{
System
.
err
.
println
(
"Could not retrieve password: "
+
e1
.
getMessage
(
)
)
;
return
;
}
final
String
proto
=
argCount
>
3
?
args
[
argIdx
++
]
:
null
;
final
boolean
implicit
=
argCount
>
4
&&
Boolean
.
parseBoolean
(
args
[
argIdx
++
]
)
;
final
POP3Client
pop3
;
if
(
proto
!=
null
)
{
System
.
out
.
println
(
"Using secure protocol: "
+
proto
)
;
pop3
=
new
POP3SClient
(
proto
,
implicit
)
;
}
else
{
pop3
=
new
POP3Client
(
)
;
}
final
int
port
;
if
(
arg0
.
length
==
2
)
{
port
=
Integer
.
parseInt
(
arg0
[
1
]
)
;
}
else
{
port
=
pop3
.
getDefaultPort
(
)
;
}
System
.
out
.
println
(
"Connecting to server "
+
server
+
" on "
+
port
)
;
pop3
.
setDefaultTimeout
(
60000
)
;
try
{
pop3
.
connect
(
server
)
;
}
catch
(
final
IOException
e
)
{
System
.
err
.
println
(
"Could not connect to server."
)
;
e
.
printStackTrace
(
)
;
return
;
}
try
{
if
(
!
pop3
.
login
(
username
,
password
)
)
{
System
.
err
.
println
(
"Could not login to server.  Check password."
)
;
pop3
.
disconnect
(
)
;
return
;
}
final
POP3MessageInfo
status
=
pop3
.
status
(
)
;
if
(
status
==
null
)
{
System
.
err
.
println
(
"Could not retrieve status."
)
;
pop3
.
logout
(
)
;
pop3
.
disconnect
(
)
;
return
;
}
System
.
out
.
println
(
"Status: "
+
status
)
;
final
int
count
=
status
.
number
;
if
(
file
!=
null
)
{
System
.
out
.
println
(
"Getting messages: "
+
count
)
;
final
File
mbox
=
new
File
(
file
)
;
if
(
mbox
.
isDirectory
(
)
)
{
System
.
out
.
println
(
"Writing dir: "
+
mbox
)
;
for
(
int
i
=
1
;
i
<=
count
;
i
++
)
{
try
(
final
OutputStreamWriter
fw
=
new
OutputStreamWriter
(
new
FileOutputStream
(
new
File
(
mbox
,
i
+
".eml"
)
)
,
StandardCharsets
.
ISO_8859_1
)
)
{
writeFile
(
pop3
,
fw
,
i
)
;
}
}
}
else
{
System
.
out
.
println
(
"Writing file: "
+
mbox
)
;
try
(
final
OutputStreamWriter
fw
=
new
OutputStreamWriter
(
new
FileOutputStream
(
mbox
)
,
StandardCharsets
.
ISO_8859_1
)
)
{
for
(
int
i
=
1
;
i
<=
count
;
i
++
)
{
writeMbox
(
pop3
,
fw
,
i
)
;
}
}
}
}
pop3
.
logout
(
)
;
pop3
.
disconnect
(
)
;
}
catch
(
final
IOException
e
)
{
e
.
printStackTrace
(
)
;
return
;
}
}
private
static
boolean
startsWith
(
final
String
input
,
final
Pattern
pat
)
{
final
Matcher
m
=
pat
.
matcher
(
input
)
;
return
m
.
lookingAt
(
)
;
}
private
static
void
writeFile
(
final
POP3Client
pop3
,
final
OutputStreamWriter
fw
,
final
int
i
)
throws
IOException
{
try
(
final
BufferedReader
r
=
(
BufferedReader
)
pop3
.
retrieveMessage
(
i
)
)
{
String
line
;
while
(
(
line
=
r
.
readLine
(
)
)
!=
null
)
{
fw
.
write
(
line
)
;
fw
.
write
(
"\n"
)
;
}
}
}
private
static
void
writeMbox
(
final
POP3Client
pop3
,
final
OutputStreamWriter
fw
,
final
int
i
)
throws
IOException
{
final
SimpleDateFormat
DATE_FORMAT
=
new
SimpleDateFormat
(
"EEE MMM dd HH:mm:ss yyyy"
)
;
final
String
replyTo
=
"MAILER-DAEMON"
;
final
Date
received
=
new
Date
(
)
;
try
(
final
BufferedReader
r
=
(
BufferedReader
)
pop3
.
retrieveMessage
(
i
)
)
{
fw
.
append
(
"From "
)
;
fw
.
append
(
replyTo
)
;
fw
.
append
(
' '
)
;
fw
.
append
(
DATE_FORMAT
.
format
(
received
)
)
;
fw
.
append
(
"\n"
)
;
String
line
;
while
(
(
line
=
r
.
readLine
(
)
)
!=
null
)
{
if
(
startsWith
(
line
,
PATFROM
)
)
{
fw
.
write
(
">"
)
;
}
fw
.
write
(
line
)
;
fw
.
write
(
"\n"
)
;
}
fw
.
write
(
"\n"
)
;
}
}
}
<EOF>
