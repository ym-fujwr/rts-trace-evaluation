package
org
.
apache
.
commons
.
net
.
ntp
;
import
java
.
net
.
DatagramPacket
;
import
java
.
net
.
InetAddress
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
public
class
TimeInfo
{
private
final
NtpV3Packet
message
;
private
List
<
String
>
comments
;
private
Long
delayMillis
;
private
Long
offsetMillis
;
private
final
long
returnTimeMillis
;
private
boolean
detailsComputed
;
public
TimeInfo
(
final
NtpV3Packet
message
,
final
long
returnTimeMillis
)
{
this
(
message
,
returnTimeMillis
,
null
,
true
)
;
}
public
TimeInfo
(
final
NtpV3Packet
msgPacket
,
final
long
returnTimeMillis
,
final
boolean
doComputeDetails
)
{
this
(
msgPacket
,
returnTimeMillis
,
null
,
doComputeDetails
)
;
}
public
TimeInfo
(
final
NtpV3Packet
message
,
final
long
returnTimeMillis
,
final
List
<
String
>
comments
)
{
this
(
message
,
returnTimeMillis
,
comments
,
true
)
;
}
public
TimeInfo
(
final
NtpV3Packet
message
,
final
long
returnTimeMillis
,
final
List
<
String
>
comments
,
final
boolean
doComputeDetails
)
{
if
(
message
==
null
)
{
throw
new
IllegalArgumentException
(
"message cannot be null"
)
;
}
this
.
returnTimeMillis
=
returnTimeMillis
;
this
.
message
=
message
;
this
.
comments
=
comments
;
if
(
doComputeDetails
)
{
computeDetails
(
)
;
}
}
public
void
addComment
(
final
String
comment
)
{
if
(
comments
==
null
)
{
comments
=
new
ArrayList
<
>
(
)
;
}
comments
.
add
(
comment
)
;
}
public
void
computeDetails
(
)
{
if
(
detailsComputed
)
{
return
;
}
detailsComputed
=
true
;
if
(
comments
==
null
)
{
comments
=
new
ArrayList
<
>
(
)
;
}
final
TimeStamp
origNtpTime
=
message
.
getOriginateTimeStamp
(
)
;
final
long
origTimeMillis
=
origNtpTime
.
getTime
(
)
;
final
TimeStamp
rcvNtpTime
=
message
.
getReceiveTimeStamp
(
)
;
final
long
rcvTimeMillis
=
rcvNtpTime
.
getTime
(
)
;
final
TimeStamp
xmitNtpTime
=
message
.
getTransmitTimeStamp
(
)
;
final
long
xmitTimeMillis
=
xmitNtpTime
.
getTime
(
)
;
if
(
origNtpTime
.
ntpValue
(
)
==
0
)
{
if
(
xmitNtpTime
.
ntpValue
(
)
!=
0
)
{
offsetMillis
=
Long
.
valueOf
(
xmitTimeMillis
-
returnTimeMillis
)
;
comments
.
add
(
"Error: zero orig time -- cannot compute delay"
)
;
}
else
{
comments
.
add
(
"Error: zero orig time -- cannot compute delay/offset"
)
;
}
}
else
if
(
rcvNtpTime
.
ntpValue
(
)
==
0
||
xmitNtpTime
.
ntpValue
(
)
==
0
)
{
comments
.
add
(
"Warning: zero rcvNtpTime or xmitNtpTime"
)
;
if
(
origTimeMillis
>
returnTimeMillis
)
{
comments
.
add
(
"Error: OrigTime > DestRcvTime"
)
;
}
else
{
delayMillis
=
Long
.
valueOf
(
returnTimeMillis
-
origTimeMillis
)
;
}
if
(
rcvNtpTime
.
ntpValue
(
)
!=
0
)
{
offsetMillis
=
Long
.
valueOf
(
rcvTimeMillis
-
origTimeMillis
)
;
}
else
if
(
xmitNtpTime
.
ntpValue
(
)
!=
0
)
{
offsetMillis
=
Long
.
valueOf
(
xmitTimeMillis
-
returnTimeMillis
)
;
}
}
else
{
long
delayValueMillis
=
returnTimeMillis
-
origTimeMillis
;
if
(
xmitTimeMillis
<
rcvTimeMillis
)
{
comments
.
add
(
"Error: xmitTime < rcvTime"
)
;
}
else
{
final
long
deltaMillis
=
xmitTimeMillis
-
rcvTimeMillis
;
if
(
deltaMillis
<=
delayValueMillis
)
{
delayValueMillis
-=
deltaMillis
;
}
else
if
(
deltaMillis
-
delayValueMillis
==
1
)
{
if
(
delayValueMillis
!=
0
)
{
comments
.
add
(
"Info: processing time > total network time by 1 ms -> assume zero delay"
)
;
delayValueMillis
=
0
;
}
}
else
{
comments
.
add
(
"Warning: processing time > total network time"
)
;
}
}
delayMillis
=
Long
.
valueOf
(
delayValueMillis
)
;
if
(
origTimeMillis
>
returnTimeMillis
)
{
comments
.
add
(
"Error: OrigTime > DestRcvTime"
)
;
}
offsetMillis
=
Long
.
valueOf
(
(
(
rcvTimeMillis
-
origTimeMillis
)
+
(
xmitTimeMillis
-
returnTimeMillis
)
)
/
2
)
;
}
}
@
Override
public
boolean
equals
(
final
Object
obj
)
{
if
(
this
==
obj
)
{
return
true
;
}
if
(
obj
==
null
||
getClass
(
)
!=
obj
.
getClass
(
)
)
{
return
false
;
}
final
TimeInfo
other
=
(
TimeInfo
)
obj
;
return
returnTimeMillis
==
other
.
returnTimeMillis
&&
message
.
equals
(
other
.
message
)
;
}
public
InetAddress
getAddress
(
)
{
final
DatagramPacket
pkt
=
message
.
getDatagramPacket
(
)
;
return
pkt
==
null
?
null
:
pkt
.
getAddress
(
)
;
}
public
List
<
String
>
getComments
(
)
{
return
comments
;
}
public
Long
getDelay
(
)
{
return
delayMillis
;
}
public
NtpV3Packet
getMessage
(
)
{
return
message
;
}
public
Long
getOffset
(
)
{
return
offsetMillis
;
}
public
long
getReturnTime
(
)
{
return
returnTimeMillis
;
}
@
Override
public
int
hashCode
(
)
{
final
int
prime
=
31
;
int
result
=
(
int
)
returnTimeMillis
;
result
=
prime
*
result
+
message
.
hashCode
(
)
;
return
result
;
}
}
<EOF>
