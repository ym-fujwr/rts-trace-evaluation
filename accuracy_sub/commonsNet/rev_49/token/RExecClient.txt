package
org
.
apache
.
commons
.
net
.
bsd
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
OutputStream
;
import
java
.
net
.
ServerSocket
;
import
java
.
net
.
Socket
;
import
java
.
nio
.
charset
.
StandardCharsets
;
import
org
.
apache
.
commons
.
net
.
SocketClient
;
import
org
.
apache
.
commons
.
net
.
io
.
SocketInputStream
;
import
org
.
apache
.
commons
.
net
.
util
.
NetConstants
;
public
class
RExecClient
extends
SocketClient
{
protected
static
final
char
NULL_CHAR
=
'\0'
;
public
static
final
int
DEFAULT_PORT
=
512
;
private
boolean
remoteVerificationEnabled
;
protected
InputStream
_errorStream_
;
public
RExecClient
(
)
{
_errorStream_
=
null
;
setDefaultPort
(
DEFAULT_PORT
)
;
}
InputStream
createErrorStream
(
)
throws
IOException
{
final
Socket
socket
;
try
(
final
ServerSocket
server
=
_serverSocketFactory_
.
createServerSocket
(
0
,
1
,
getLocalAddress
(
)
)
)
{
_output_
.
write
(
Integer
.
toString
(
server
.
getLocalPort
(
)
)
.
getBytes
(
StandardCharsets
.
UTF_8
)
)
;
_output_
.
write
(
NULL_CHAR
)
;
_output_
.
flush
(
)
;
socket
=
server
.
accept
(
)
;
}
if
(
remoteVerificationEnabled
&&
!
verifyRemote
(
socket
)
)
{
socket
.
close
(
)
;
throw
new
IOException
(
"Security violation: unexpected connection attempt by "
+
socket
.
getInetAddress
(
)
.
getHostAddress
(
)
)
;
}
return
new
SocketInputStream
(
socket
,
socket
.
getInputStream
(
)
)
;
}
@
Override
public
void
disconnect
(
)
throws
IOException
{
if
(
_errorStream_
!=
null
)
{
_errorStream_
.
close
(
)
;
}
_errorStream_
=
null
;
super
.
disconnect
(
)
;
}
public
InputStream
getErrorStream
(
)
{
return
_errorStream_
;
}
public
InputStream
getInputStream
(
)
{
return
_input_
;
}
public
OutputStream
getOutputStream
(
)
{
return
_output_
;
}
public
final
boolean
isRemoteVerificationEnabled
(
)
{
return
remoteVerificationEnabled
;
}
public
void
rexec
(
final
String
username
,
final
String
password
,
final
String
command
)
throws
IOException
{
rexec
(
username
,
password
,
command
,
false
)
;
}
public
void
rexec
(
final
String
username
,
final
String
password
,
final
String
command
,
final
boolean
separateErrorStream
)
throws
IOException
{
int
ch
;
if
(
separateErrorStream
)
{
_errorStream_
=
createErrorStream
(
)
;
}
else
{
_output_
.
write
(
NULL_CHAR
)
;
}
_output_
.
write
(
username
.
getBytes
(
getCharset
(
)
)
)
;
_output_
.
write
(
NULL_CHAR
)
;
_output_
.
write
(
password
.
getBytes
(
getCharset
(
)
)
)
;
_output_
.
write
(
NULL_CHAR
)
;
_output_
.
write
(
command
.
getBytes
(
getCharset
(
)
)
)
;
_output_
.
write
(
NULL_CHAR
)
;
_output_
.
flush
(
)
;
ch
=
_input_
.
read
(
)
;
if
(
ch
>
0
)
{
final
StringBuilder
buffer
=
new
StringBuilder
(
)
;
while
(
(
ch
=
_input_
.
read
(
)
)
!=
NetConstants
.
EOS
&&
ch
!=
'\n'
)
{
buffer
.
append
(
(
char
)
ch
)
;
}
throw
new
IOException
(
buffer
.
toString
(
)
)
;
}
if
(
ch
<
0
)
{
throw
new
IOException
(
"Server closed connection."
)
;
}
}
public
final
void
setRemoteVerificationEnabled
(
final
boolean
enable
)
{
remoteVerificationEnabled
=
enable
;
}
}
<EOF>
