diff --git a/src/main/java/org/davidmoten/hilbert/Ranges2.java b/src/main/java/org/davidmoten/hilbert/Ranges2.java
index 87d0fe3..cf981a8 100644
--- a/src/main/java/org/davidmoten/hilbert/Ranges2.java
+++ b/src/main/java/org/davidmoten/hilbert/Ranges2.java
@@ -36 +36 @@ public class Ranges2 implements Iterable<Range> {
-            // add old head to set
+            // add old head to set (now that the distanceToPrevious has been calculated) 
@@ -46,0 +47 @@ public class Ranges2 implements Iterable<Range> {
+                // also replace its predecessor 
@@ -56 +57,6 @@ public class Ranges2 implements Iterable<Range> {
-                first.previous().setNext(n);
+                Node firstPrevious = first.previous();
+                if (firstPrevious == ranges) {
+                    ranges = n;
+                } else {
+                    first.previous().previous().setNext(n);
+                }
@@ -88,0 +95,4 @@ public class Ranges2 implements Iterable<Range> {
+    public void println() {
+        forEach(System.out::println);
+    }
+
diff --git a/src/test/java/org/davidmoten/hilbert/Ranges2Test.java b/src/test/java/org/davidmoten/hilbert/Ranges2Test.java
index 7223a12..b2c1cab 100644
--- a/src/test/java/org/davidmoten/hilbert/Ranges2Test.java
+++ b/src/test/java/org/davidmoten/hilbert/Ranges2Test.java
@@ -2,0 +3,5 @@ package org.davidmoten.hilbert;
+import static org.junit.Assert.assertEquals;
+
+import java.util.ArrayList;
+import java.util.List;
+
@@ -4,0 +10,2 @@ import org.junit.Test;
+import com.github.davidmoten.guavamini.Lists;
+
@@ -8 +15,6 @@ public class Ranges2Test {
-    public void testRemovesCorrectRange() {
+    public void testMaxSizeNotExceededWhenMaxIs2() {
+        Ranges2 r = new Ranges2(2);
+        r.add(Range.create(1));
+        r.add(Range.create(10));
+        checkIs(r, 10, 10, 1, 1);
+    }
@@ -9,0 +22,2 @@ public class Ranges2Test {
+    @Test
+    public void testMaxSizeExceededWhenMaxIs2() {
@@ -13 +26,0 @@ public class Ranges2Test {
-        r.add(Range.create(11));
@@ -14,0 +28,2 @@ public class Ranges2Test {
+        checkIs(r, 10, 12, 1, 1);
+    }
@@ -16 +31,15 @@ public class Ranges2Test {
-        r.forEach(System.out::println);
+    @Test
+    public void testMaxSizeExceededWhenMaxIs3() {
+        Ranges2 r = new Ranges2(3);
+        r.add(Range.create(1));
+        r.add(Range.create(10));
+        r.add(Range.create(12));
+        r.add(Range.create(18));
+        r.println();
+        checkIs(r, 18, 18, 10, 12, 1, 1);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void testBufferSizeOneThrows() {
+        new Ranges2(1);
+    }
@@ -17,0 +47,5 @@ public class Ranges2Test {
+    @Test(expected = IllegalArgumentException.class)
+    public void testRangeDecreasingThrows() {
+        Ranges2 r = new Ranges2(3);
+        r.add(Range.create(5, 6));
+        r.add(Range.create(1, 2));
@@ -19,0 +54,7 @@ public class Ranges2Test {
+    private void checkIs(Ranges2 r, int... ords) {
+        List<Range> list = new ArrayList<>();
+        for (int i = 0; i < ords.length; i += 2) {
+            list.add(Range.create(ords[i], ords[i + 1]));
+        }
+        assertEquals(list, Lists.newArrayList(r));
+    }
