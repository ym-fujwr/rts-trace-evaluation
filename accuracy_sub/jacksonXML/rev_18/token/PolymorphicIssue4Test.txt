package
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
failing
;
import
com
.
fasterxml
.
jackson
.
annotation
.
JsonTypeInfo
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
XmlMapper
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
XmlTestBase
;
public
class
PolymorphicIssue4Test
extends
XmlTestBase
{
@
JsonTypeInfo
(
use
=
JsonTypeInfo
.
Id
.
CLASS
,
include
=
JsonTypeInfo
.
As
.
WRAPPER_ARRAY
)
static
class
BaseTypeWithClassArray
{
}
static
class
SubTypeWithClassArray
extends
BaseTypeWithClassArray
{
public
String
name
;
public
SubTypeWithClassArray
(
)
{
}
public
SubTypeWithClassArray
(
String
s
)
{
name
=
s
;
}
}
@
JsonTypeInfo
(
use
=
JsonTypeInfo
.
Id
.
CLASS
,
include
=
JsonTypeInfo
.
As
.
WRAPPER_OBJECT
)
static
class
BaseTypeWithClassObject
{
}
static
class
SubTypeWithClassObject
extends
BaseTypeWithClassObject
{
public
String
name
;
public
SubTypeWithClassObject
(
)
{
}
public
SubTypeWithClassObject
(
String
s
)
{
name
=
s
;
}
}
static
class
ClassArrayWrapper
{
public
BaseTypeWithClassArray
wrapped
;
public
ClassArrayWrapper
(
)
{
}
public
ClassArrayWrapper
(
String
s
)
{
wrapped
=
new
SubTypeWithClassArray
(
s
)
;
}
}
protected
final
XmlMapper
MAPPER
=
newMapper
(
)
;
public
void
testAsClassArray
(
)
throws
Exception
{
String
xml
=
MAPPER
.
writeValueAsString
(
new
SubTypeWithClassArray
(
"Foobar"
)
)
;
Object
result
=
MAPPER
.
readValue
(
xml
,
BaseTypeWithClassArray
.
class
)
;
assertNotNull
(
result
)
;
assertEquals
(
SubTypeWithClassArray
.
class
,
result
.
getClass
(
)
)
;
assertEquals
(
"Foobar"
,
(
(
SubTypeWithClassArray
)
result
)
.
name
)
;
}
public
void
testAsWrappedClassArray
(
)
throws
Exception
{
String
xml
=
MAPPER
.
writeValueAsString
(
new
ClassArrayWrapper
(
"Foobar"
)
)
;
ClassArrayWrapper
result
=
MAPPER
.
readValue
(
xml
,
ClassArrayWrapper
.
class
)
;
assertNotNull
(
result
)
;
assertEquals
(
SubTypeWithClassArray
.
class
,
result
.
wrapped
.
getClass
(
)
)
;
assertEquals
(
"Foobar"
,
(
(
SubTypeWithClassArray
)
result
.
wrapped
)
.
name
)
;
}
}
<EOF>
