package
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
failing
;
import
com
.
fasterxml
.
jackson
.
annotation
.
JsonTypeInfo
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
XmlMapper
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
XmlTestBase
;
public
class
EnumIssue9Test
extends
XmlTestBase
{
static
enum
TestEnum
{
A
,
B
,
C
;
}
static
class
UntypedEnumBean
{
@
JsonTypeInfo
(
use
=
JsonTypeInfo
.
Id
.
CLASS
,
include
=
JsonTypeInfo
.
As
.
PROPERTY
,
property
=
"__type"
)
public
Object
value
;
public
UntypedEnumBean
(
)
{
}
public
UntypedEnumBean
(
TestEnum
v
)
{
value
=
v
;
}
}
private
final
XmlMapper
MAPPER
=
newMapper
(
)
;
public
void
testUntypedEnum
(
)
throws
Exception
{
String
xml
=
MAPPER
.
writeValueAsString
(
new
UntypedEnumBean
(
TestEnum
.
B
)
)
;
UntypedEnumBean
result
=
MAPPER
.
readValue
(
xml
,
UntypedEnumBean
.
class
)
;
assertNotNull
(
result
)
;
assertNotNull
(
result
.
value
)
;
Object
ob
=
result
.
value
;
if
(
TestEnum
.
class
!=
ob
.
getClass
(
)
)
{
fail
(
"Failed to deserialize TestEnum (got "
+
ob
.
getClass
(
)
.
getName
(
)
+
") from: "
+
xml
)
;
}
assertEquals
(
TestEnum
.
B
,
result
.
value
)
;
}
}
<EOF>
