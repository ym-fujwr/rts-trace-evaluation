package
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
util
;
import
javax
.
xml
.
namespace
.
QName
;
import
com
.
fasterxml
.
jackson
.
databind
.
*
;
import
com
.
fasterxml
.
jackson
.
databind
.
cfg
.
MapperConfig
;
import
com
.
fasterxml
.
jackson
.
databind
.
introspect
.
AnnotatedClass
;
import
com
.
fasterxml
.
jackson
.
databind
.
type
.
ClassKey
;
import
com
.
fasterxml
.
jackson
.
databind
.
util
.
LRUMap
;
public
class
XmlRootNameLookup
implements
java
.
io
.
Serializable
{
private
static
final
long
serialVersionUID
=
1L
;
public
final
static
QName
ROOT_NAME_FOR_NULL
=
new
QName
(
"null"
)
;
protected
final
transient
LRUMap
<
ClassKey
,
QName
>
_rootNames
;
public
XmlRootNameLookup
(
)
{
_rootNames
=
new
LRUMap
<
ClassKey
,
QName
>
(
40
,
200
)
;
}
protected
Object
readResolve
(
)
{
if
(
_rootNames
==
null
)
{
return
new
XmlRootNameLookup
(
)
;
}
return
this
;
}
public
QName
findRootName
(
JavaType
rootType
,
MapperConfig
<
?
>
config
)
{
return
findRootName
(
rootType
.
getRawClass
(
)
,
config
)
;
}
public
QName
findRootName
(
Class
<
?
>
rootType
,
MapperConfig
<
?
>
config
)
{
ClassKey
key
=
new
ClassKey
(
rootType
)
;
QName
name
;
synchronized
(
_rootNames
)
{
name
=
_rootNames
.
get
(
key
)
;
}
if
(
name
!=
null
)
{
return
name
;
}
name
=
_findRootName
(
config
,
rootType
)
;
synchronized
(
_rootNames
)
{
_rootNames
.
put
(
key
,
name
)
;
}
return
name
;
}
protected
QName
_findRootName
(
MapperConfig
<
?
>
config
,
Class
<
?
>
rootType
)
{
BeanDescription
beanDesc
=
config
.
introspectClassAnnotations
(
rootType
)
;
AnnotationIntrospector
intr
=
config
.
getAnnotationIntrospector
(
)
;
AnnotatedClass
ac
=
beanDesc
.
getClassInfo
(
)
;
String
localName
=
null
;
String
ns
=
null
;
PropertyName
root
=
intr
.
findRootName
(
ac
)
;
if
(
root
!=
null
)
{
localName
=
root
.
getSimpleName
(
)
;
ns
=
root
.
getNamespace
(
)
;
}
if
(
localName
==
null
||
localName
.
length
(
)
==
0
)
{
localName
=
StaxUtil
.
sanitizeXmlTypeName
(
rootType
.
getSimpleName
(
)
)
;
return
_qname
(
ns
,
localName
)
;
}
if
(
ns
==
null
||
ns
.
isEmpty
(
)
)
{
ns
=
_findNamespace
(
config
,
intr
,
ac
)
;
}
return
_qname
(
ns
,
localName
)
;
}
private
QName
_qname
(
String
ns
,
String
localName
)
{
if
(
ns
==
null
)
{
ns
=
""
;
}
return
new
QName
(
ns
,
localName
)
;
}
private
String
_findNamespace
(
MapperConfig
<
?
>
config
,
AnnotationIntrospector
ai
,
AnnotatedClass
ann
)
{
for
(
AnnotationIntrospector
intr
:
ai
.
allIntrospectors
(
)
)
{
if
(
intr
instanceof
AnnotationIntrospector
.
XmlExtensions
)
{
String
ns
=
(
(
AnnotationIntrospector
.
XmlExtensions
)
intr
)
.
findNamespace
(
config
,
ann
)
;
if
(
ns
!=
null
)
{
return
ns
;
}
}
}
return
null
;
}
}
<EOF>
