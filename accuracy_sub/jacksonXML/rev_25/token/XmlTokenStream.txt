package
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
deser
;
import
java
.
io
.
IOException
;
import
javax
.
xml
.
XMLConstants
;
import
javax
.
xml
.
stream
.
*
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
XmlNameProcessor
;
import
org
.
codehaus
.
stax2
.
XMLStreamLocation2
;
import
org
.
codehaus
.
stax2
.
XMLStreamReader2
;
import
org
.
codehaus
.
stax2
.
ri
.
Stax2ReaderAdapter
;
import
com
.
fasterxml
.
jackson
.
core
.
JsonLocation
;
import
com
.
fasterxml
.
jackson
.
core
.
io
.
ContentReference
;
public
class
XmlTokenStream
{
public
final
static
int
XML_START_ELEMENT
=
1
;
public
final
static
int
XML_END_ELEMENT
=
2
;
public
final
static
int
XML_ATTRIBUTE_NAME
=
3
;
public
final
static
int
XML_ATTRIBUTE_VALUE
=
4
;
public
final
static
int
XML_TEXT
=
5
;
public
final
static
int
XML_ROOT_TEXT
=
7
;
public
final
static
int
XML_END
=
8
;
private
final
static
int
REPLAY_START_DUP
=
1
;
private
final
static
int
REPLAY_END
=
2
;
private
final
static
int
REPLAY_START_DELAYED
=
3
;
private
final
static
String
XSI_NAMESPACE
=
XMLConstants
.
W3C_XML_SCHEMA_INSTANCE_NS_URI
;
protected
final
XMLStreamReader2
_xmlReader
;
protected
final
ContentReference
_sourceReference
;
protected
int
_formatFeatures
;
protected
boolean
_cfgProcessXsiNil
;
protected
XmlNameProcessor
_nameProcessor
;
protected
int
_currentState
;
protected
int
_attributeCount
;
protected
boolean
_xsiNilFound
;
protected
boolean
_startElementAfterText
;
protected
int
_nextAttributeIndex
;
protected
String
_localName
;
protected
String
_namespaceURI
;
protected
String
_textValue
;
protected
boolean
_repeatCurrentToken
;
protected
XmlNameProcessor
.
XmlName
_nameToDecode
=
new
XmlNameProcessor
.
XmlName
(
)
;
protected
int
_repeatElement
;
protected
ElementWrapper
_currentWrapper
;
protected
String
_nextLocalName
;
protected
String
_nextNamespaceURI
;
public
XmlTokenStream
(
XMLStreamReader
xmlReader
,
ContentReference
sourceRef
,
int
formatFeatures
,
XmlNameProcessor
nameProcessor
)
{
_sourceReference
=
sourceRef
;
_formatFeatures
=
formatFeatures
;
_cfgProcessXsiNil
=
FromXmlParser
.
Feature
.
PROCESS_XSI_NIL
.
enabledIn
(
_formatFeatures
)
;
_xmlReader
=
Stax2ReaderAdapter
.
wrapIfNecessary
(
xmlReader
)
;
_nameProcessor
=
nameProcessor
;
}
public
int
initialize
(
)
throws
XMLStreamException
{
if
(
_xmlReader
.
getEventType
(
)
!=
XMLStreamConstants
.
START_ELEMENT
)
{
throw
new
IllegalArgumentException
(
"Invalid XMLStreamReader passed: should be pointing to START_ELEMENT ("
+
XMLStreamConstants
.
START_ELEMENT
+
"), instead got "
+
_xmlReader
.
getEventType
(
)
)
;
}
_checkXsiAttributes
(
)
;
_decodeElementName
(
_xmlReader
.
getNamespaceURI
(
)
,
_xmlReader
.
getLocalName
(
)
)
;
if
(
_xmlReader
.
isEmptyElement
(
)
&&
FromXmlParser
.
Feature
.
EMPTY_ELEMENT_AS_NULL
.
enabledIn
(
_formatFeatures
)
&&
!
_xsiNilFound
&&
_attributeCount
<
1
)
{
_textValue
=
null
;
_startElementAfterText
=
false
;
return
(
_currentState
=
XML_ROOT_TEXT
)
;
}
return
(
_currentState
=
XML_START_ELEMENT
)
;
}
public
XMLStreamReader2
getXmlReader
(
)
{
return
_xmlReader
;
}
protected
void
setFormatFeatures
(
int
f
)
{
_formatFeatures
=
f
;
_cfgProcessXsiNil
=
FromXmlParser
.
Feature
.
PROCESS_XSI_NIL
.
enabledIn
(
f
)
;
}
public
int
next
(
)
throws
XMLStreamException
{
if
(
_repeatCurrentToken
)
{
_repeatCurrentToken
=
false
;
return
_currentState
;
}
if
(
_repeatElement
!=
0
)
{
return
(
_currentState
=
_handleRepeatElement
(
)
)
;
}
return
_next
(
)
;
}
public
void
skipEndElement
(
)
throws
IOException
,
XMLStreamException
{
int
type
=
next
(
)
;
if
(
type
!=
XML_END_ELEMENT
)
{
throw
new
IOException
(
String
.
format
(
"Internal error: Expected END_ELEMENT, got event of type %s"
,
_stateDesc
(
type
)
)
)
;
}
}
public
int
getCurrentToken
(
)
{
return
_currentState
;
}
public
String
getText
(
)
{
return
_textValue
;
}
public
String
getLocalName
(
)
{
return
_localName
;
}
public
String
getNamespaceURI
(
)
{
return
_namespaceURI
;
}
public
boolean
hasXsiNil
(
)
{
return
_xsiNilFound
;
}
public
void
closeCompletely
(
)
throws
XMLStreamException
{
_xmlReader
.
closeCompletely
(
)
;
}
public
void
close
(
)
throws
XMLStreamException
{
_xmlReader
.
close
(
)
;
}
public
JsonLocation
getCurrentLocation
(
)
{
return
_extractLocation
(
_xmlReader
.
getLocationInfo
(
)
.
getCurrentLocation
(
)
)
;
}
public
JsonLocation
getTokenLocation
(
)
{
return
_extractLocation
(
_xmlReader
.
getLocationInfo
(
)
.
getStartLocation
(
)
)
;
}
protected
void
repeatStartElement
(
)
{
if
(
_currentState
!=
XML_START_ELEMENT
)
{
if
(
_currentState
==
XML_END_ELEMENT
)
{
return
;
}
throw
new
IllegalStateException
(
"Current state not XML_START_ELEMENT but "
+
_currentStateDesc
(
)
)
;
}
if
(
_currentWrapper
==
null
)
{
_currentWrapper
=
ElementWrapper
.
matchingWrapper
(
null
,
_localName
,
_namespaceURI
)
;
}
else
{
_currentWrapper
=
ElementWrapper
.
matchingWrapper
(
_currentWrapper
.
getParent
(
)
,
_localName
,
_namespaceURI
)
;
}
_repeatElement
=
REPLAY_START_DUP
;
}
protected
void
pushbackCurrentToken
(
)
{
_repeatCurrentToken
=
true
;
}
protected
void
skipAttributes
(
)
{
switch
(
_currentState
)
{
case
XML_ATTRIBUTE_NAME
:
_attributeCount
=
0
;
_currentState
=
XML_START_ELEMENT
;
break
;
case
XML_START_ELEMENT
:
break
;
case
XML_TEXT
:
break
;
default
:
throw
new
IllegalStateException
(
"Current state not XML_START_ELEMENT or XML_ATTRIBUTE_NAME but "
+
_currentStateDesc
(
)
)
;
}
}
private
final
int
_next
(
)
throws
XMLStreamException
{
switch
(
_currentState
)
{
case
XML_ATTRIBUTE_VALUE
:
++
_nextAttributeIndex
;
case
XML_START_ELEMENT
:
if
(
_xsiNilFound
)
{
_xsiNilFound
=
false
;
_xmlReader
.
skipElement
(
)
;
return
_handleEndElement
(
)
;
}
if
(
_nextAttributeIndex
<
_attributeCount
)
{
_decodeAttributeName
(
_xmlReader
.
getAttributeNamespace
(
_nextAttributeIndex
)
,
_xmlReader
.
getAttributeLocalName
(
_nextAttributeIndex
)
)
;
_textValue
=
_xmlReader
.
getAttributeValue
(
_nextAttributeIndex
)
;
return
(
_currentState
=
XML_ATTRIBUTE_NAME
)
;
}
String
text
=
_collectUntilTag
(
)
;
final
boolean
startElementNext
=
_xmlReader
.
getEventType
(
)
==
XMLStreamReader
.
START_ELEMENT
;
if
(
startElementNext
)
{
if
(
_allWs
(
text
)
)
{
_startElementAfterText
=
false
;
return
_initStartElement
(
)
;
}
_startElementAfterText
=
true
;
_textValue
=
text
;
return
(
_currentState
=
XML_TEXT
)
;
}
if
(
text
!=
null
)
{
_startElementAfterText
=
false
;
_textValue
=
text
;
return
(
_currentState
=
XML_TEXT
)
;
}
_startElementAfterText
=
false
;
return
_handleEndElement
(
)
;
case
XML_ATTRIBUTE_NAME
:
return
(
_currentState
=
XML_ATTRIBUTE_VALUE
)
;
case
XML_TEXT
:
if
(
_startElementAfterText
)
{
_startElementAfterText
=
false
;
return
_initStartElement
(
)
;
}
return
_handleEndElement
(
)
;
case
XML_ROOT_TEXT
:
close
(
)
;
return
(
_currentState
=
XML_END
)
;
case
XML_END
:
return
XML_END
;
}
switch
(
_skipAndCollectTextUntilTag
(
)
)
{
case
XMLStreamConstants
.
END_DOCUMENT
:
close
(
)
;
return
(
_currentState
=
XML_END
)
;
case
XMLStreamConstants
.
END_ELEMENT
:
if
(
!
_allWs
(
_textValue
)
)
{
return
(
_currentState
=
XML_TEXT
)
;
}
return
_handleEndElement
(
)
;
}
if
(
!
_allWs
(
_textValue
)
)
{
_startElementAfterText
=
true
;
return
(
_currentState
=
XML_TEXT
)
;
}
return
_initStartElement
(
)
;
}
private
final
String
_collectUntilTag
(
)
throws
XMLStreamException
{
if
(
_xmlReader
.
isEmptyElement
(
)
)
{
_xmlReader
.
next
(
)
;
if
(
FromXmlParser
.
Feature
.
EMPTY_ELEMENT_AS_NULL
.
enabledIn
(
_formatFeatures
)
)
{
return
null
;
}
return
""
;
}
CharSequence
chars
=
null
;
while
(
true
)
{
switch
(
_xmlReader
.
next
(
)
)
{
case
XMLStreamConstants
.
START_ELEMENT
:
return
(
chars
==
null
)
?
""
:
chars
.
toString
(
)
;
case
XMLStreamConstants
.
END_ELEMENT
:
case
XMLStreamConstants
.
END_DOCUMENT
:
return
(
chars
==
null
)
?
""
:
chars
.
toString
(
)
;
case
XMLStreamConstants
.
CHARACTERS
:
case
XMLStreamConstants
.
CDATA
:
{
String
str
=
_getText
(
_xmlReader
)
;
if
(
chars
==
null
)
{
chars
=
str
;
}
else
{
if
(
chars
instanceof
String
)
{
chars
=
new
StringBuilder
(
chars
)
;
}
(
(
StringBuilder
)
chars
)
.
append
(
str
)
;
}
}
break
;
default
:
}
}
}
private
final
int
_skipAndCollectTextUntilTag
(
)
throws
XMLStreamException
{
CharSequence
chars
=
null
;
while
(
_xmlReader
.
hasNext
(
)
)
{
int
type
;
switch
(
type
=
_xmlReader
.
next
(
)
)
{
case
XMLStreamConstants
.
START_ELEMENT
:
case
XMLStreamConstants
.
END_ELEMENT
:
case
XMLStreamConstants
.
END_DOCUMENT
:
_textValue
=
(
chars
==
null
)
?
""
:
chars
.
toString
(
)
;
return
type
;
case
XMLStreamConstants
.
CHARACTERS
:
case
XMLStreamConstants
.
CDATA
:
{
String
str
=
_getText
(
_xmlReader
)
;
if
(
chars
==
null
)
{
chars
=
str
;
}
else
{
if
(
chars
instanceof
String
)
{
chars
=
new
StringBuilder
(
chars
)
;
}
(
(
StringBuilder
)
chars
)
.
append
(
str
)
;
}
}
break
;
default
:
}
}
throw
new
IllegalStateException
(
"Expected to find a tag, instead reached end of input"
)
;
}
private
final
String
_getText
(
XMLStreamReader2
r
)
throws
XMLStreamException
{
try
{
return
r
.
getText
(
)
;
}
catch
(
RuntimeException
e
)
{
Throwable
cause
=
e
.
getCause
(
)
;
if
(
cause
instanceof
XMLStreamException
)
{
throw
(
XMLStreamException
)
cause
;
}
throw
e
;
}
}
private
final
int
_initStartElement
(
)
throws
XMLStreamException
{
final
String
ns
=
_xmlReader
.
getNamespaceURI
(
)
;
final
String
localName
=
_xmlReader
.
getLocalName
(
)
;
_checkXsiAttributes
(
)
;
if
(
_currentWrapper
!=
null
)
{
if
(
_currentWrapper
.
matchesWrapper
(
localName
,
ns
)
)
{
_currentWrapper
=
_currentWrapper
.
intermediateWrapper
(
)
;
}
else
{
_localName
=
_currentWrapper
.
getWrapperLocalName
(
)
;
_namespaceURI
=
_currentWrapper
.
getWrapperNamespace
(
)
;
_currentWrapper
=
_currentWrapper
.
getParent
(
)
;
_nextLocalName
=
localName
;
_nextNamespaceURI
=
ns
;
_repeatElement
=
REPLAY_START_DELAYED
;
return
(
_currentState
=
XML_END_ELEMENT
)
;
}
}
_decodeElementName
(
ns
,
localName
)
;
return
(
_currentState
=
XML_START_ELEMENT
)
;
}
private
final
void
_checkXsiAttributes
(
)
{
int
count
=
_xmlReader
.
getAttributeCount
(
)
;
_attributeCount
=
count
;
if
(
count
>=
1
)
{
if
(
_cfgProcessXsiNil
&&
"nil"
.
equals
(
_xmlReader
.
getAttributeLocalName
(
0
)
)
)
{
if
(
XSI_NAMESPACE
.
equals
(
_xmlReader
.
getAttributeNamespace
(
0
)
)
)
{
_nextAttributeIndex
=
1
;
_xsiNilFound
=
"true"
.
equals
(
_xmlReader
.
getAttributeValue
(
0
)
)
;
return
;
}
}
}
_nextAttributeIndex
=
0
;
_xsiNilFound
=
false
;
}
protected
void
_decodeElementName
(
String
namespaceURI
,
String
localName
)
{
_nameToDecode
.
namespace
=
namespaceURI
;
_nameToDecode
.
localPart
=
localName
;
_nameProcessor
.
decodeName
(
_nameToDecode
)
;
_namespaceURI
=
_nameToDecode
.
namespace
;
_localName
=
_nameToDecode
.
localPart
;
}
protected
void
_decodeAttributeName
(
String
namespaceURI
,
String
localName
)
{
_nameToDecode
.
namespace
=
namespaceURI
;
_nameToDecode
.
localPart
=
localName
;
_nameProcessor
.
decodeName
(
_nameToDecode
)
;
_namespaceURI
=
_nameToDecode
.
namespace
;
_localName
=
_nameToDecode
.
localPart
;
}
protected
int
_handleRepeatElement
(
)
throws
XMLStreamException
{
int
type
=
_repeatElement
;
_repeatElement
=
0
;
if
(
type
==
REPLAY_START_DUP
)
{
_currentWrapper
=
_currentWrapper
.
intermediateWrapper
(
)
;
return
XML_START_ELEMENT
;
}
if
(
type
==
REPLAY_END
)
{
_decodeElementName
(
_xmlReader
.
getNamespaceURI
(
)
,
_xmlReader
.
getLocalName
(
)
)
;
if
(
_currentWrapper
!=
null
)
{
_currentWrapper
=
_currentWrapper
.
getParent
(
)
;
}
return
XML_END_ELEMENT
;
}
if
(
type
==
REPLAY_START_DELAYED
)
{
if
(
_currentWrapper
!=
null
)
{
_currentWrapper
=
_currentWrapper
.
intermediateWrapper
(
)
;
}
_decodeElementName
(
_nextNamespaceURI
,
_nextLocalName
)
;
_nextLocalName
=
null
;
_nextNamespaceURI
=
null
;
return
XML_START_ELEMENT
;
}
throw
new
IllegalStateException
(
"Unrecognized type to repeat: "
+
type
)
;
}
private
final
int
_handleEndElement
(
)
{
if
(
_currentWrapper
!=
null
)
{
ElementWrapper
w
=
_currentWrapper
;
if
(
w
.
isMatching
(
)
)
{
_repeatElement
=
REPLAY_END
;
_localName
=
w
.
getWrapperLocalName
(
)
;
_namespaceURI
=
w
.
getWrapperNamespace
(
)
;
_currentWrapper
=
_currentWrapper
.
getParent
(
)
;
}
else
{
_currentWrapper
=
_currentWrapper
.
getParent
(
)
;
_localName
=
""
;
_namespaceURI
=
""
;
}
}
else
{
_localName
=
""
;
_namespaceURI
=
""
;
}
return
(
_currentState
=
XML_END_ELEMENT
)
;
}
private
JsonLocation
_extractLocation
(
XMLStreamLocation2
location
)
{
if
(
location
==
null
)
{
return
new
JsonLocation
(
_sourceReference
,
-
1
,
-
1
,
-
1
)
;
}
return
new
JsonLocation
(
_sourceReference
,
location
.
getCharacterOffset
(
)
,
location
.
getLineNumber
(
)
,
location
.
getColumnNumber
(
)
)
;
}
protected
static
boolean
_allWs
(
String
str
)
{
final
int
len
=
(
str
==
null
)
?
0
:
str
.
length
(
)
;
if
(
len
>
0
)
{
for
(
int
i
=
0
;
i
<
len
;
++
i
)
{
if
(
str
.
charAt
(
i
)
>
' '
)
{
return
false
;
}
}
}
return
true
;
}
protected
String
_currentStateDesc
(
)
{
return
_stateDesc
(
_currentState
)
;
}
protected
String
_stateDesc
(
int
state
)
{
switch
(
state
)
{
case
XML_START_ELEMENT
:
return
"XML_START_ELEMENT"
;
case
XML_END_ELEMENT
:
return
"XML_END_ELEMENT"
;
case
XML_ATTRIBUTE_NAME
:
return
"XML_ATTRIBUTE_NAME"
;
case
XML_ATTRIBUTE_VALUE
:
return
"XML_ATTRIBUTE_VALUE"
;
case
XML_TEXT
:
return
"XML_TEXT"
;
case
XML_ROOT_TEXT
:
return
"XML_ROOT_TEXT"
;
case
XML_END
:
return
"XML_END"
;
}
return
"N/A ("
+
_currentState
+
")"
;
}
}
<EOF>
