package
com
.
fasterxml
.
jackson
.
dataformat
.
xml
;
import
javax
.
xml
.
stream
.
XMLInputFactory
;
import
javax
.
xml
.
stream
.
XMLOutputFactory
;
import
com
.
fasterxml
.
jackson
.
core
.
TSFBuilder
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
deser
.
FromXmlParser
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
ser
.
ToXmlGenerator
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
util
.
StaxUtil
;
public
class
XmlFactoryBuilder
extends
TSFBuilder
<
XmlFactory
,
XmlFactoryBuilder
>
{
protected
int
_formatParserFeatures
;
protected
int
_formatGeneratorFeatures
;
protected
XMLInputFactory
_xmlInputFactory
;
protected
XMLOutputFactory
_xmlOutputFactory
;
protected
String
_nameForTextElement
;
protected
ClassLoader
_classLoaderForStax
;
protected
XmlNameProcessor
_nameProcessor
;
protected
XmlFactoryBuilder
(
)
{
_formatParserFeatures
=
XmlFactory
.
DEFAULT_XML_PARSER_FEATURE_FLAGS
;
_formatGeneratorFeatures
=
XmlFactory
.
DEFAULT_XML_GENERATOR_FEATURE_FLAGS
;
_classLoaderForStax
=
null
;
_nameProcessor
=
XmlNameProcessors
.
newPassthroughProcessor
(
)
;
}
public
XmlFactoryBuilder
(
XmlFactory
base
)
{
super
(
base
)
;
_formatParserFeatures
=
base
.
_xmlParserFeatures
;
_formatGeneratorFeatures
=
base
.
_xmlGeneratorFeatures
;
_xmlInputFactory
=
base
.
_xmlInputFactory
;
_xmlOutputFactory
=
base
.
_xmlOutputFactory
;
_nameForTextElement
=
base
.
_cfgNameForTextElement
;
_nameProcessor
=
base
.
_nameProcessor
;
_classLoaderForStax
=
null
;
}
public
int
formatParserFeaturesMask
(
)
{
return
_formatParserFeatures
;
}
public
int
formatGeneratorFeaturesMask
(
)
{
return
_formatGeneratorFeatures
;
}
public
String
nameForTextElement
(
)
{
return
_nameForTextElement
;
}
public
XMLInputFactory
xmlInputFactory
(
)
{
if
(
_xmlInputFactory
==
null
)
{
return
defaultInputFactory
(
)
;
}
return
_xmlInputFactory
;
}
protected
XMLInputFactory
defaultInputFactory
(
)
{
XMLInputFactory
xmlIn
=
StaxUtil
.
defaultInputFactory
(
_classLoaderForStax
)
;
xmlIn
.
setProperty
(
XMLInputFactory
.
IS_SUPPORTING_EXTERNAL_ENTITIES
,
Boolean
.
FALSE
)
;
xmlIn
.
setProperty
(
XMLInputFactory
.
SUPPORT_DTD
,
Boolean
.
FALSE
)
;
return
xmlIn
;
}
public
XMLOutputFactory
xmlOutputFactory
(
)
{
if
(
_xmlOutputFactory
==
null
)
{
return
defaultOutputFactory
(
)
;
}
return
_xmlOutputFactory
;
}
protected
XMLOutputFactory
defaultOutputFactory
(
)
{
XMLOutputFactory
xmlOut
=
StaxUtil
.
defaultOutputFactory
(
_classLoaderForStax
)
;
xmlOut
.
setProperty
(
XMLOutputFactory
.
IS_REPAIRING_NAMESPACES
,
Boolean
.
TRUE
)
;
return
xmlOut
;
}
protected
ClassLoader
staxClassLoader
(
)
{
return
(
_classLoaderForStax
==
null
)
?
getClass
(
)
.
getClassLoader
(
)
:
_classLoaderForStax
;
}
public
XmlNameProcessor
xmlNameProcessor
(
)
{
return
_nameProcessor
;
}
public
XmlFactoryBuilder
enable
(
FromXmlParser
.
Feature
f
)
{
_formatParserFeatures
|=
f
.
getMask
(
)
;
return
_this
(
)
;
}
public
XmlFactoryBuilder
enable
(
FromXmlParser
.
Feature
first
,
FromXmlParser
.
Feature
...
other
)
{
_formatParserFeatures
|=
first
.
getMask
(
)
;
for
(
FromXmlParser
.
Feature
f
:
other
)
{
_formatParserFeatures
|=
f
.
getMask
(
)
;
}
return
_this
(
)
;
}
public
XmlFactoryBuilder
disable
(
FromXmlParser
.
Feature
f
)
{
_formatParserFeatures
&=
~
f
.
getMask
(
)
;
return
_this
(
)
;
}
public
XmlFactoryBuilder
disable
(
FromXmlParser
.
Feature
first
,
FromXmlParser
.
Feature
...
other
)
{
_formatParserFeatures
&=
~
first
.
getMask
(
)
;
for
(
FromXmlParser
.
Feature
f
:
other
)
{
_formatParserFeatures
&=
~
f
.
getMask
(
)
;
}
return
_this
(
)
;
}
public
XmlFactoryBuilder
configure
(
FromXmlParser
.
Feature
f
,
boolean
state
)
{
return
state
?
enable
(
f
)
:
disable
(
f
)
;
}
public
XmlFactoryBuilder
enable
(
ToXmlGenerator
.
Feature
f
)
{
_formatGeneratorFeatures
|=
f
.
getMask
(
)
;
return
_this
(
)
;
}
public
XmlFactoryBuilder
enable
(
ToXmlGenerator
.
Feature
first
,
ToXmlGenerator
.
Feature
...
other
)
{
_formatGeneratorFeatures
|=
first
.
getMask
(
)
;
for
(
ToXmlGenerator
.
Feature
f
:
other
)
{
_formatGeneratorFeatures
|=
f
.
getMask
(
)
;
}
return
_this
(
)
;
}
public
XmlFactoryBuilder
disable
(
ToXmlGenerator
.
Feature
f
)
{
_formatGeneratorFeatures
&=
~
f
.
getMask
(
)
;
return
_this
(
)
;
}
public
XmlFactoryBuilder
disable
(
ToXmlGenerator
.
Feature
first
,
ToXmlGenerator
.
Feature
...
other
)
{
_formatGeneratorFeatures
&=
~
first
.
getMask
(
)
;
for
(
ToXmlGenerator
.
Feature
f
:
other
)
{
_formatGeneratorFeatures
&=
~
f
.
getMask
(
)
;
}
return
_this
(
)
;
}
public
XmlFactoryBuilder
configure
(
ToXmlGenerator
.
Feature
f
,
boolean
state
)
{
return
state
?
enable
(
f
)
:
disable
(
f
)
;
}
public
XmlFactoryBuilder
nameForTextElement
(
String
name
)
{
_nameForTextElement
=
name
;
return
_this
(
)
;
}
public
XmlFactoryBuilder
xmlInputFactory
(
XMLInputFactory
xmlIn
)
{
_xmlInputFactory
=
xmlIn
;
return
_this
(
)
;
}
public
XmlFactoryBuilder
xmlOutputFactory
(
XMLOutputFactory
xmlOut
)
{
_xmlOutputFactory
=
xmlOut
;
return
_this
(
)
;
}
@
Deprecated
public
XmlFactoryBuilder
inputFactory
(
XMLInputFactory
xmlIn
)
{
return
xmlInputFactory
(
xmlIn
)
;
}
@
Deprecated
public
XmlFactoryBuilder
outputFactory
(
XMLOutputFactory
xmlOut
)
{
return
xmlOutputFactory
(
xmlOut
)
;
}
public
XmlFactoryBuilder
staxClassLoader
(
ClassLoader
cl
)
{
_classLoaderForStax
=
cl
;
return
_this
(
)
;
}
public
XmlFactoryBuilder
xmlNameProcessor
(
XmlNameProcessor
nameProcessor
)
{
_nameProcessor
=
nameProcessor
;
return
_this
(
)
;
}
@
Override
public
XmlFactory
build
(
)
{
return
new
XmlFactory
(
this
)
;
}
}
<EOF>
