package
com
.
fasterxml
.
jackson
.
dataformat
.
xml
;
import
java
.
io
.
*
;
import
javax
.
xml
.
stream
.
*
;
import
org
.
codehaus
.
stax2
.
XMLInputFactory2
;
import
org
.
codehaus
.
stax2
.
io
.
Stax2ByteArraySource
;
import
org
.
codehaus
.
stax2
.
io
.
Stax2CharArraySource
;
import
com
.
fasterxml
.
jackson
.
core
.
*
;
import
com
.
fasterxml
.
jackson
.
core
.
format
.
InputAccessor
;
import
com
.
fasterxml
.
jackson
.
core
.
format
.
MatchStrength
;
import
com
.
fasterxml
.
jackson
.
core
.
io
.
IOContext
;
import
com
.
fasterxml
.
jackson
.
core
.
util
.
VersionUtil
;
import
com
.
fasterxml
.
jackson
.
databind
.
util
.
ClassUtil
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
deser
.
FromXmlParser
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
ser
.
ToXmlGenerator
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
util
.
StaxUtil
;
public
class
XmlFactory
extends
JsonFactory
{
private
static
final
long
serialVersionUID
=
1
;
public
final
static
String
FORMAT_NAME_XML
=
"XML"
;
final
static
int
DEFAULT_XML_PARSER_FEATURE_FLAGS
=
FromXmlParser
.
Feature
.
collectDefaults
(
)
;
final
static
int
DEFAULT_XML_GENERATOR_FEATURE_FLAGS
=
ToXmlGenerator
.
Feature
.
collectDefaults
(
)
;
protected
int
_xmlParserFeatures
;
protected
int
_xmlGeneratorFeatures
;
protected
transient
XMLInputFactory
_xmlInputFactory
;
protected
transient
XMLOutputFactory
_xmlOutputFactory
;
protected
String
_cfgNameForTextElement
;
protected
XmlNameProcessor
_nameProcessor
;
public
XmlFactory
(
)
{
this
(
null
,
null
,
null
)
;
}
public
XmlFactory
(
ObjectCodec
oc
)
{
this
(
oc
,
null
,
null
)
;
}
public
XmlFactory
(
XMLInputFactory
xmlIn
)
{
this
(
null
,
xmlIn
,
null
)
;
}
public
XmlFactory
(
XMLInputFactory
xmlIn
,
XMLOutputFactory
xmlOut
)
{
this
(
null
,
xmlIn
,
xmlOut
)
;
}
public
XmlFactory
(
ObjectCodec
oc
,
XMLInputFactory
xmlIn
,
XMLOutputFactory
xmlOut
)
{
this
(
oc
,
DEFAULT_XML_PARSER_FEATURE_FLAGS
,
DEFAULT_XML_GENERATOR_FEATURE_FLAGS
,
xmlIn
,
xmlOut
,
null
)
;
}
public
XmlFactory
(
ObjectCodec
oc
,
int
xpFeatures
,
int
xgFeatures
,
XMLInputFactory
xmlIn
,
XMLOutputFactory
xmlOut
,
String
nameForTextElem
)
{
this
(
oc
,
xpFeatures
,
xgFeatures
,
xmlIn
,
xmlOut
,
nameForTextElem
,
XmlNameProcessors
.
newPassthroughProcessor
(
)
)
;
}
protected
XmlFactory
(
ObjectCodec
oc
,
int
xpFeatures
,
int
xgFeatures
,
XMLInputFactory
xmlIn
,
XMLOutputFactory
xmlOut
,
String
nameForTextElem
,
XmlNameProcessor
nameProcessor
)
{
super
(
oc
)
;
_nameProcessor
=
nameProcessor
;
_xmlParserFeatures
=
xpFeatures
;
_xmlGeneratorFeatures
=
xgFeatures
;
_cfgNameForTextElement
=
nameForTextElem
;
if
(
xmlIn
==
null
)
{
xmlIn
=
StaxUtil
.
defaultInputFactory
(
getClass
(
)
.
getClassLoader
(
)
)
;
xmlIn
.
setProperty
(
XMLInputFactory
.
IS_SUPPORTING_EXTERNAL_ENTITIES
,
Boolean
.
FALSE
)
;
xmlIn
.
setProperty
(
XMLInputFactory
.
SUPPORT_DTD
,
Boolean
.
FALSE
)
;
}
if
(
xmlOut
==
null
)
{
xmlOut
=
StaxUtil
.
defaultOutputFactory
(
getClass
(
)
.
getClassLoader
(
)
)
;
xmlOut
.
setProperty
(
XMLOutputFactory
.
IS_REPAIRING_NAMESPACES
,
Boolean
.
TRUE
)
;
}
_initFactories
(
xmlIn
,
xmlOut
)
;
_xmlInputFactory
=
xmlIn
;
_xmlOutputFactory
=
xmlOut
;
}
protected
XmlFactory
(
XmlFactory
src
,
ObjectCodec
oc
)
{
super
(
src
,
oc
)
;
_xmlParserFeatures
=
src
.
_xmlParserFeatures
;
_xmlGeneratorFeatures
=
src
.
_xmlGeneratorFeatures
;
_cfgNameForTextElement
=
src
.
_cfgNameForTextElement
;
_xmlInputFactory
=
src
.
_xmlInputFactory
;
_xmlOutputFactory
=
src
.
_xmlOutputFactory
;
_nameProcessor
=
src
.
_nameProcessor
;
}
protected
XmlFactory
(
XmlFactoryBuilder
b
)
{
super
(
b
,
false
)
;
_xmlParserFeatures
=
b
.
formatParserFeaturesMask
(
)
;
_xmlGeneratorFeatures
=
b
.
formatGeneratorFeaturesMask
(
)
;
_cfgNameForTextElement
=
b
.
nameForTextElement
(
)
;
_xmlInputFactory
=
b
.
xmlInputFactory
(
)
;
_xmlOutputFactory
=
b
.
xmlOutputFactory
(
)
;
_nameProcessor
=
b
.
xmlNameProcessor
(
)
;
_initFactories
(
_xmlInputFactory
,
_xmlOutputFactory
)
;
}
public
static
XmlFactoryBuilder
builder
(
)
{
return
new
XmlFactoryBuilder
(
)
;
}
@
Override
public
XmlFactoryBuilder
rebuild
(
)
{
return
new
XmlFactoryBuilder
(
this
)
;
}
protected
void
_initFactories
(
XMLInputFactory
xmlIn
,
XMLOutputFactory
xmlOut
)
{
xmlOut
.
setProperty
(
XMLOutputFactory
.
IS_REPAIRING_NAMESPACES
,
Boolean
.
TRUE
)
;
xmlIn
.
setProperty
(
XMLInputFactory
.
IS_COALESCING
,
Boolean
.
TRUE
)
;
}
@
Override
public
XmlFactory
copy
(
)
{
_checkInvalidCopy
(
XmlFactory
.
class
)
;
return
new
XmlFactory
(
this
,
null
)
;
}
@
Override
public
Version
version
(
)
{
return
PackageVersion
.
VERSION
;
}
protected
transient
String
_jdkXmlInFactory
;
protected
transient
String
_jdkXmlOutFactory
;
@
Override
protected
Object
readResolve
(
)
{
if
(
_jdkXmlInFactory
==
null
)
{
throw
new
IllegalStateException
(
"No XMLInputFactory class name read during JDK deserialization"
)
;
}
if
(
_jdkXmlOutFactory
==
null
)
{
throw
new
IllegalStateException
(
"No XMLOutputFactory class name read during JDK deserialization"
)
;
}
final
XMLInputFactory
inf
;
XMLOutputFactory
outf
;
try
{
inf
=
(
XMLInputFactory
)
Class
.
forName
(
_jdkXmlInFactory
)
.
getDeclaredConstructor
(
)
.
newInstance
(
)
;
outf
=
(
XMLOutputFactory
)
Class
.
forName
(
_jdkXmlOutFactory
)
.
getDeclaredConstructor
(
)
.
newInstance
(
)
;
}
catch
(
Exception
e
)
{
throw
new
IllegalArgumentException
(
e
)
;
}
return
new
XmlFactory
(
_objectCodec
,
_xmlParserFeatures
,
_xmlGeneratorFeatures
,
inf
,
outf
,
_cfgNameForTextElement
)
;
}
private
void
readObject
(
ObjectInputStream
in
)
throws
IOException
,
ClassNotFoundException
{
in
.
defaultReadObject
(
)
;
_jdkXmlInFactory
=
in
.
readUTF
(
)
;
_jdkXmlOutFactory
=
in
.
readUTF
(
)
;
}
private
void
writeObject
(
ObjectOutputStream
out
)
throws
IOException
{
out
.
defaultWriteObject
(
)
;
out
.
writeUTF
(
_xmlInputFactory
.
getClass
(
)
.
getName
(
)
)
;
out
.
writeUTF
(
_xmlOutputFactory
.
getClass
(
)
.
getName
(
)
)
;
}
public
void
setXMLTextElementName
(
String
name
)
{
_cfgNameForTextElement
=
name
;
}
public
String
getXMLTextElementName
(
)
{
return
_cfgNameForTextElement
;
}
public
final
XmlFactory
configure
(
FromXmlParser
.
Feature
f
,
boolean
state
)
{
if
(
state
)
{
enable
(
f
)
;
}
else
{
disable
(
f
)
;
}
return
this
;
}
public
XmlFactory
enable
(
FromXmlParser
.
Feature
f
)
{
_xmlParserFeatures
|=
f
.
getMask
(
)
;
return
this
;
}
public
XmlFactory
disable
(
FromXmlParser
.
Feature
f
)
{
_xmlParserFeatures
&=
~
f
.
getMask
(
)
;
return
this
;
}
public
final
boolean
isEnabled
(
FromXmlParser
.
Feature
f
)
{
return
(
_xmlParserFeatures
&
f
.
getMask
(
)
)
!=
0
;
}
@
Override
public
int
getFormatParserFeatures
(
)
{
return
_xmlParserFeatures
;
}
@
Override
public
int
getFormatGeneratorFeatures
(
)
{
return
_xmlGeneratorFeatures
;
}
public
XmlNameProcessor
getXmlNameProcessor
(
)
{
return
_nameProcessor
;
}
public
void
setXmlNameProcessor
(
XmlNameProcessor
processor
)
{
_nameProcessor
=
processor
;
}
public
final
XmlFactory
configure
(
ToXmlGenerator
.
Feature
f
,
boolean
state
)
{
if
(
state
)
{
enable
(
f
)
;
}
else
{
disable
(
f
)
;
}
return
this
;
}
public
XmlFactory
enable
(
ToXmlGenerator
.
Feature
f
)
{
_xmlGeneratorFeatures
|=
f
.
getMask
(
)
;
return
this
;
}
public
XmlFactory
disable
(
ToXmlGenerator
.
Feature
f
)
{
_xmlGeneratorFeatures
&=
~
f
.
getMask
(
)
;
return
this
;
}
public
final
boolean
isEnabled
(
ToXmlGenerator
.
Feature
f
)
{
return
(
_xmlGeneratorFeatures
&
f
.
getMask
(
)
)
!=
0
;
}
public
XMLInputFactory
getXMLInputFactory
(
)
{
return
_xmlInputFactory
;
}
@
Deprecated
public
void
setXMLInputFactory
(
XMLInputFactory
f
)
{
_xmlInputFactory
=
f
;
}
public
XMLOutputFactory
getXMLOutputFactory
(
)
{
return
_xmlOutputFactory
;
}
@
Deprecated
public
void
setXMLOutputFactory
(
XMLOutputFactory
f
)
{
_xmlOutputFactory
=
f
;
}
@
Override
public
String
getFormatName
(
)
{
return
FORMAT_NAME_XML
;
}
@
Override
public
MatchStrength
hasFormat
(
InputAccessor
acc
)
throws
IOException
{
return
hasXMLFormat
(
acc
)
;
}
@
Override
public
boolean
requiresCustomCodec
(
)
{
return
true
;
}
@
Override
public
boolean
canUseCharArrays
(
)
{
return
false
;
}
@
Override
public
Class
<
FromXmlParser
.
Feature
>
getFormatReadFeatureType
(
)
{
return
FromXmlParser
.
Feature
.
class
;
}
@
Override
public
Class
<
ToXmlGenerator
.
Feature
>
getFormatWriteFeatureType
(
)
{
return
ToXmlGenerator
.
Feature
.
class
;
}
@
SuppressWarnings
(
"resource"
)
@
Override
public
JsonParser
createParser
(
String
content
)
throws
IOException
{
Reader
r
=
new
StringReader
(
content
)
;
IOContext
ctxt
=
_createContext
(
_createContentReference
(
r
)
,
true
)
;
if
(
_inputDecorator
!=
null
)
{
r
=
_inputDecorator
.
decorate
(
ctxt
,
r
)
;
}
return
_createParser
(
r
,
ctxt
)
;
}
@
Override
public
ToXmlGenerator
createGenerator
(
OutputStream
out
)
throws
IOException
{
return
createGenerator
(
out
,
JsonEncoding
.
UTF8
)
;
}
@
Override
public
ToXmlGenerator
createGenerator
(
OutputStream
out
,
JsonEncoding
enc
)
throws
IOException
{
final
IOContext
ctxt
=
_createContext
(
_createContentReference
(
out
)
,
false
)
;
ctxt
.
setEncoding
(
enc
)
;
return
new
ToXmlGenerator
(
ctxt
,
_generatorFeatures
,
_xmlGeneratorFeatures
,
_objectCodec
,
_createXmlWriter
(
ctxt
,
out
)
,
_nameProcessor
)
;
}
@
Override
public
ToXmlGenerator
createGenerator
(
Writer
out
)
throws
IOException
{
final
IOContext
ctxt
=
_createContext
(
_createContentReference
(
out
)
,
false
)
;
return
new
ToXmlGenerator
(
ctxt
,
_generatorFeatures
,
_xmlGeneratorFeatures
,
_objectCodec
,
_createXmlWriter
(
ctxt
,
out
)
,
_nameProcessor
)
;
}
@
SuppressWarnings
(
"resource"
)
@
Override
public
ToXmlGenerator
createGenerator
(
File
f
,
JsonEncoding
enc
)
throws
IOException
{
OutputStream
out
=
new
FileOutputStream
(
f
)
;
final
IOContext
ctxt
=
_createContext
(
_createContentReference
(
out
)
,
true
)
;
ctxt
.
setEncoding
(
enc
)
;
return
new
ToXmlGenerator
(
ctxt
,
_generatorFeatures
,
_xmlGeneratorFeatures
,
_objectCodec
,
_createXmlWriter
(
ctxt
,
out
)
,
_nameProcessor
)
;
}
public
FromXmlParser
createParser
(
XMLStreamReader
sr
)
throws
IOException
{
if
(
sr
.
getEventType
(
)
!=
XMLStreamConstants
.
START_ELEMENT
)
{
sr
=
_initializeXmlReader
(
sr
)
;
}
FromXmlParser
xp
=
new
FromXmlParser
(
_createContext
(
_createContentReference
(
sr
)
,
false
)
,
_parserFeatures
,
_xmlParserFeatures
,
_objectCodec
,
sr
,
_nameProcessor
)
;
if
(
_cfgNameForTextElement
!=
null
)
{
xp
.
setXMLTextElementName
(
_cfgNameForTextElement
)
;
}
return
xp
;
}
public
ToXmlGenerator
createGenerator
(
XMLStreamWriter
sw
)
throws
IOException
{
sw
=
_initializeXmlWriter
(
sw
)
;
IOContext
ctxt
=
_createContext
(
_createContentReference
(
sw
)
,
false
)
;
return
new
ToXmlGenerator
(
ctxt
,
_generatorFeatures
,
_xmlGeneratorFeatures
,
_objectCodec
,
sw
,
_nameProcessor
)
;
}
@
Override
protected
FromXmlParser
_createParser
(
InputStream
in
,
IOContext
ctxt
)
throws
IOException
{
XMLStreamReader
sr
;
try
{
sr
=
_xmlInputFactory
.
createXMLStreamReader
(
in
)
;
}
catch
(
XMLStreamException
e
)
{
return
StaxUtil
.
throwAsParseException
(
e
,
null
)
;
}
sr
=
_initializeXmlReader
(
sr
)
;
FromXmlParser
xp
=
new
FromXmlParser
(
ctxt
,
_parserFeatures
,
_xmlParserFeatures
,
_objectCodec
,
sr
,
_nameProcessor
)
;
if
(
_cfgNameForTextElement
!=
null
)
{
xp
.
setXMLTextElementName
(
_cfgNameForTextElement
)
;
}
return
xp
;
}
@
Override
protected
FromXmlParser
_createParser
(
Reader
r
,
IOContext
ctxt
)
throws
IOException
{
XMLStreamReader
sr
;
try
{
sr
=
_xmlInputFactory
.
createXMLStreamReader
(
r
)
;
}
catch
(
XMLStreamException
e
)
{
return
StaxUtil
.
throwAsParseException
(
e
,
null
)
;
}
sr
=
_initializeXmlReader
(
sr
)
;
FromXmlParser
xp
=
new
FromXmlParser
(
ctxt
,
_parserFeatures
,
_xmlParserFeatures
,
_objectCodec
,
sr
,
_nameProcessor
)
;
if
(
_cfgNameForTextElement
!=
null
)
{
xp
.
setXMLTextElementName
(
_cfgNameForTextElement
)
;
}
return
xp
;
}
@
Override
protected
FromXmlParser
_createParser
(
char
[
]
data
,
int
offset
,
int
len
,
IOContext
ctxt
,
boolean
recycleBuffer
)
throws
IOException
{
XMLStreamReader
sr
;
try
{
if
(
_xmlInputFactory
instanceof
XMLInputFactory2
)
{
sr
=
_xmlInputFactory
.
createXMLStreamReader
(
new
Stax2CharArraySource
(
data
,
offset
,
len
)
)
;
}
else
{
sr
=
_xmlInputFactory
.
createXMLStreamReader
(
new
CharArrayReader
(
data
,
offset
,
len
)
)
;
}
}
catch
(
XMLStreamException
e
)
{
return
StaxUtil
.
throwAsParseException
(
e
,
null
)
;
}
sr
=
_initializeXmlReader
(
sr
)
;
FromXmlParser
xp
=
new
FromXmlParser
(
ctxt
,
_parserFeatures
,
_xmlParserFeatures
,
_objectCodec
,
sr
,
_nameProcessor
)
;
if
(
_cfgNameForTextElement
!=
null
)
{
xp
.
setXMLTextElementName
(
_cfgNameForTextElement
)
;
}
return
xp
;
}
@
Override
protected
FromXmlParser
_createParser
(
byte
[
]
data
,
int
offset
,
int
len
,
IOContext
ctxt
)
throws
IOException
{
XMLStreamReader
sr
;
try
{
if
(
_xmlInputFactory
instanceof
XMLInputFactory2
)
{
sr
=
_xmlInputFactory
.
createXMLStreamReader
(
new
Stax2ByteArraySource
(
data
,
offset
,
len
)
)
;
}
else
{
try
{
sr
=
_xmlInputFactory
.
createXMLStreamReader
(
new
ByteArrayInputStream
(
data
,
offset
,
len
)
)
;
}
catch
(
ArrayIndexOutOfBoundsException
e
)
{
throw
new
JsonParseException
(
null
,
"Internal processing error by `XMLInputFactory` of type "
+
ClassUtil
.
classNameOf
(
_xmlInputFactory
)
+
" when trying to create a parser ("
+
"consider using Woodstox instead): "
+
e
.
getMessage
(
)
)
;
}
}
}
catch
(
XMLStreamException
e
)
{
return
StaxUtil
.
throwAsParseException
(
e
,
null
)
;
}
sr
=
_initializeXmlReader
(
sr
)
;
FromXmlParser
xp
=
new
FromXmlParser
(
ctxt
,
_parserFeatures
,
_xmlParserFeatures
,
_objectCodec
,
sr
,
_nameProcessor
)
;
if
(
_cfgNameForTextElement
!=
null
)
{
xp
.
setXMLTextElementName
(
_cfgNameForTextElement
)
;
}
return
xp
;
}
@
Override
protected
JsonGenerator
_createGenerator
(
Writer
out
,
IOContext
ctxt
)
throws
IOException
{
VersionUtil
.
throwInternal
(
)
;
return
null
;
}
protected
XMLStreamWriter
_createXmlWriter
(
IOContext
ctxt
,
OutputStream
out
)
throws
IOException
{
XMLStreamWriter
sw
;
try
{
sw
=
_xmlOutputFactory
.
createXMLStreamWriter
(
_decorate
(
ctxt
,
out
)
,
"UTF-8"
)
;
}
catch
(
Exception
e
)
{
throw
new
JsonGenerationException
(
e
.
getMessage
(
)
,
e
,
null
)
;
}
return
_initializeXmlWriter
(
sw
)
;
}
protected
XMLStreamWriter
_createXmlWriter
(
IOContext
ctxt
,
Writer
w
)
throws
IOException
{
XMLStreamWriter
sw
;
try
{
sw
=
_xmlOutputFactory
.
createXMLStreamWriter
(
_decorate
(
ctxt
,
w
)
)
;
}
catch
(
Exception
e
)
{
throw
new
JsonGenerationException
(
e
.
getMessage
(
)
,
e
,
null
)
;
}
return
_initializeXmlWriter
(
sw
)
;
}
protected
final
XMLStreamWriter
_initializeXmlWriter
(
XMLStreamWriter
sw
)
throws
IOException
{
try
{
sw
.
setDefaultNamespace
(
""
)
;
}
catch
(
Exception
e
)
{
throw
new
JsonGenerationException
(
e
.
getMessage
(
)
,
e
,
null
)
;
}
return
sw
;
}
protected
final
XMLStreamReader
_initializeXmlReader
(
XMLStreamReader
sr
)
throws
IOException
{
try
{
while
(
sr
.
next
(
)
!=
XMLStreamConstants
.
START_ELEMENT
)
{
;
}
}
catch
(
Exception
e
)
{
throw
new
JsonParseException
(
null
,
e
.
getMessage
(
)
,
e
)
;
}
return
sr
;
}
private
final
static
byte
UTF8_BOM_1
=
(
byte
)
0xEF
;
private
final
static
byte
UTF8_BOM_2
=
(
byte
)
0xBB
;
private
final
static
byte
UTF8_BOM_3
=
(
byte
)
0xBF
;
private
final
static
byte
BYTE_x
=
(
byte
)
'x'
;
private
final
static
byte
BYTE_m
=
(
byte
)
'm'
;
private
final
static
byte
BYTE_l
=
(
byte
)
'l'
;
private
final
static
byte
BYTE_D
=
(
byte
)
'D'
;
private
final
static
byte
BYTE_LT
=
(
byte
)
'<'
;
private
final
static
byte
BYTE_QMARK
=
(
byte
)
'?'
;
private
final
static
byte
BYTE_EXCL
=
(
byte
)
'!'
;
private
final
static
byte
BYTE_HYPHEN
=
(
byte
)
'-'
;
public
static
MatchStrength
hasXMLFormat
(
InputAccessor
acc
)
throws
IOException
{
if
(
!
acc
.
hasMoreBytes
(
)
)
{
return
MatchStrength
.
INCONCLUSIVE
;
}
byte
b
=
acc
.
nextByte
(
)
;
if
(
b
==
UTF8_BOM_1
)
{
if
(
!
acc
.
hasMoreBytes
(
)
)
{
return
MatchStrength
.
INCONCLUSIVE
;
}
if
(
acc
.
nextByte
(
)
!=
UTF8_BOM_2
)
{
return
MatchStrength
.
NO_MATCH
;
}
if
(
!
acc
.
hasMoreBytes
(
)
)
{
return
MatchStrength
.
INCONCLUSIVE
;
}
if
(
acc
.
nextByte
(
)
!=
UTF8_BOM_3
)
{
return
MatchStrength
.
NO_MATCH
;
}
if
(
!
acc
.
hasMoreBytes
(
)
)
{
return
MatchStrength
.
INCONCLUSIVE
;
}
b
=
acc
.
nextByte
(
)
;
}
boolean
maybeXmlDecl
=
(
b
==
BYTE_LT
)
;
if
(
!
maybeXmlDecl
)
{
int
ch
=
skipSpace
(
acc
,
b
)
;
if
(
ch
<
0
)
{
return
MatchStrength
.
INCONCLUSIVE
;
}
b
=
(
byte
)
ch
;
if
(
b
!=
BYTE_LT
)
{
return
MatchStrength
.
NO_MATCH
;
}
}
if
(
!
acc
.
hasMoreBytes
(
)
)
{
return
MatchStrength
.
INCONCLUSIVE
;
}
b
=
acc
.
nextByte
(
)
;
if
(
b
==
BYTE_QMARK
)
{
b
=
acc
.
nextByte
(
)
;
if
(
b
==
BYTE_x
)
{
if
(
maybeXmlDecl
)
{
if
(
acc
.
hasMoreBytes
(
)
&&
acc
.
nextByte
(
)
==
BYTE_m
)
{
if
(
acc
.
hasMoreBytes
(
)
&&
acc
.
nextByte
(
)
==
BYTE_l
)
{
return
MatchStrength
.
FULL_MATCH
;
}
}
}
return
MatchStrength
.
SOLID_MATCH
;
}
if
(
validXmlNameStartChar
(
acc
,
b
)
)
{
return
MatchStrength
.
SOLID_MATCH
;
}
}
else
if
(
b
==
BYTE_EXCL
)
{
if
(
!
acc
.
hasMoreBytes
(
)
)
{
return
MatchStrength
.
INCONCLUSIVE
;
}
b
=
acc
.
nextByte
(
)
;
if
(
b
==
BYTE_HYPHEN
)
{
if
(
!
acc
.
hasMoreBytes
(
)
)
{
return
MatchStrength
.
INCONCLUSIVE
;
}
if
(
acc
.
nextByte
(
)
==
BYTE_HYPHEN
)
{
return
MatchStrength
.
SOLID_MATCH
;
}
}
else
if
(
b
==
BYTE_D
)
{
return
tryMatch
(
acc
,
"OCTYPE"
,
MatchStrength
.
SOLID_MATCH
)
;
}
}
else
{
if
(
validXmlNameStartChar
(
acc
,
b
)
)
{
return
MatchStrength
.
SOLID_MATCH
;
}
}
return
MatchStrength
.
NO_MATCH
;
}
private
final
static
boolean
validXmlNameStartChar
(
InputAccessor
acc
,
byte
b
)
throws
IOException
{
int
ch
=
(
int
)
b
&
0xFF
;
if
(
ch
>=
'A'
)
{
return
true
;
}
return
false
;
}
private
final
static
MatchStrength
tryMatch
(
InputAccessor
acc
,
String
matchStr
,
MatchStrength
fullMatchStrength
)
throws
IOException
{
for
(
int
i
=
0
,
len
=
matchStr
.
length
(
)
;
i
<
len
;
++
i
)
{
if
(
!
acc
.
hasMoreBytes
(
)
)
{
return
MatchStrength
.
INCONCLUSIVE
;
}
if
(
acc
.
nextByte
(
)
!=
matchStr
.
charAt
(
i
)
)
{
return
MatchStrength
.
NO_MATCH
;
}
}
return
fullMatchStrength
;
}
private
final
static
int
skipSpace
(
InputAccessor
acc
,
byte
b
)
throws
IOException
{
while
(
true
)
{
int
ch
=
(
int
)
b
&
0xFF
;
if
(
!
(
ch
==
' '
||
ch
==
'\r'
||
ch
==
'\n'
||
ch
==
'\t'
)
)
{
return
ch
;
}
if
(
!
acc
.
hasMoreBytes
(
)
)
{
return
-
1
;
}
b
=
acc
.
nextByte
(
)
;
ch
=
(
int
)
b
&
0xFF
;
}
}
protected
OutputStream
_decorate
(
IOContext
ioCtxt
,
OutputStream
out
)
throws
IOException
{
if
(
_outputDecorator
!=
null
)
{
OutputStream
out2
=
_outputDecorator
.
decorate
(
ioCtxt
,
out
)
;
if
(
out2
!=
null
)
{
return
out2
;
}
}
return
out
;
}
protected
Writer
_decorate
(
IOContext
ioCtxt
,
Writer
out
)
throws
IOException
{
if
(
_outputDecorator
!=
null
)
{
Writer
out2
=
_outputDecorator
.
decorate
(
ioCtxt
,
out
)
;
if
(
out2
!=
null
)
{
return
out2
;
}
}
return
out
;
}
}
<EOF>
