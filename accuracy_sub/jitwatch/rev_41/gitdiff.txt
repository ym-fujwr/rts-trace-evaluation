diff --git a/src/main/java/org/adoptopenjdk/jitwatch/core/JITWatchConfig.java b/src/main/java/org/adoptopenjdk/jitwatch/core/JITWatchConfig.java
index 07c183d3..29751208 100644
--- a/src/main/java/org/adoptopenjdk/jitwatch/core/JITWatchConfig.java
+++ b/src/main/java/org/adoptopenjdk/jitwatch/core/JITWatchConfig.java
@@ -2 +2 @@
- * Copyright (c) 2013-2021 Chris Newland.
+ * Copyright (c) 2013-2022 Chris Newland.
@@ -87,0 +88 @@ public class JITWatchConfig
+	private static final String KEY_NO_PROMPT_HSDIS = SANDBOX_PREFIX + ".no.prompt.hsdis";
@@ -120,2 +121,3 @@ public class JITWatchConfig
-	private File propertiesFile = (CONFIG_OVERRIDE != null) ? new File(CONFIG_OVERRIDE)
-			: new File(System.getProperty("user.dir"), PROPERTIES_FILENAME);
+	private File propertiesFile = (CONFIG_OVERRIDE != null) ?
+			new File(CONFIG_OVERRIDE) :
+			new File(System.getProperty("user.dir"), PROPERTIES_FILENAME);
@@ -126,0 +129,2 @@ public class JITWatchConfig
+	private boolean noPromptHsdis = false;
+
@@ -177,2 +181 @@ public class JITWatchConfig
-	@Override
-	public JITWatchConfig clone()
+	@Override public JITWatchConfig clone()
@@ -354,0 +358,2 @@ public class JITWatchConfig
+
+		noPromptHsdis = loadBooleanFromProperty(loadedProps, KEY_NO_PROMPT_HSDIS, false);
@@ -616,0 +622 @@ public class JITWatchConfig
+		putProperty(loadedProps, KEY_NO_PROMPT_HSDIS, Boolean.toString(noPromptHsdis));
@@ -849 +855 @@ public class JITWatchConfig
-	
+
@@ -922 +928,11 @@ public class JITWatchConfig
-}
+
+	public boolean isNoPromptHsdis()
+	{
+		return noPromptHsdis;
+	}
+
+	public void setNoPromptHsdis(boolean noPromptHsdis)
+	{
+		this.noPromptHsdis = noPromptHsdis;
+	}
+}
\ No newline at end of file
diff --git a/src/main/java/org/adoptopenjdk/jitwatch/loader/BytecodeLoader.java b/src/main/java/org/adoptopenjdk/jitwatch/loader/BytecodeLoader.java
index 69eea89a..70e0e3db 100644
--- a/src/main/java/org/adoptopenjdk/jitwatch/loader/BytecodeLoader.java
+++ b/src/main/java/org/adoptopenjdk/jitwatch/loader/BytecodeLoader.java
@@ -2 +2 @@
- * Copyright (c) 2013-2021 Chris Newland.
+ * Copyright (c) 2013-2022 Chris Newland.
@@ -157 +157 @@ public final class BytecodeLoader
-		
+
@@ -175 +175,3 @@ public final class BytecodeLoader
-		javapProcess.execute(classLocations, fqClassName);
+		Map<String, String> environment = new HashMap<>();
+
+		javapProcess.execute(classLocations, fqClassName, environment);
diff --git a/src/main/java/org/adoptopenjdk/jitwatch/process/AbstractProcess.java b/src/main/java/org/adoptopenjdk/jitwatch/process/AbstractProcess.java
index 978b4e0a..45db1658 100644
--- a/src/main/java/org/adoptopenjdk/jitwatch/process/AbstractProcess.java
+++ b/src/main/java/org/adoptopenjdk/jitwatch/process/AbstractProcess.java
@@ -2 +2 @@
- * Copyright (c) 2013-2021 Chris Newland.
+ * Copyright (c) 2013-2022 Chris Newland.
@@ -30 +30 @@ public abstract class AbstractProcess implements IExternalProcess
-	
+
@@ -59,2 +59 @@ public abstract class AbstractProcess implements IExternalProcess
-	@Override
-	public String getOutputStream()
+	@Override public String getOutputStream()
@@ -79,2 +78 @@ public abstract class AbstractProcess implements IExternalProcess
-	@Override
-	public String getErrorStream()
+	@Override public String getErrorStream()
@@ -116 +114 @@ public abstract class AbstractProcess implements IExternalProcess
-	protected boolean runCommands(List<String> commands, ILogListener logListener)
+	protected boolean runCommands(List<String> commands, Map<String, String> environment, ILogListener logListener)
@@ -118 +116 @@ public abstract class AbstractProcess implements IExternalProcess
-		return runCommands(commands, null, null, logListener);
+		return runCommands(commands, null, environment, logListener);
@@ -137 +135 @@ public abstract class AbstractProcess implements IExternalProcess
-		
+
@@ -150,0 +149,2 @@ public abstract class AbstractProcess implements IExternalProcess
+
+					logListener.handleLogEntry("Environment: " + entry.getKey() + "=" + entry.getValue());
@@ -172 +172 @@ public abstract class AbstractProcess implements IExternalProcess
-			
+
diff --git a/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/CompilerGroovy.java b/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/CompilerGroovy.java
index f0f077c6..3ad1312e 100644
--- a/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/CompilerGroovy.java
+++ b/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/CompilerGroovy.java
@@ -2 +2 @@
- * Copyright (c) 2013-2016 Chris Newland.
+ * Copyright (c) 2013-2022 Chris Newland.
@@ -15,0 +16 @@ import java.util.List;
+import java.util.Map;
@@ -41 +42 @@ public class CompilerGroovy extends AbstractProcess implements ICompiler
-	public boolean compile(List<File> sourceFiles, List<String> classpathEntries, File outputDir, ILogListener logListener)
+	public boolean compile(List<File> sourceFiles, List<String> classpathEntries, File outputDir, Map<String, String> environment, ILogListener logListener)
@@ -66 +67 @@ public class CompilerGroovy extends AbstractProcess implements ICompiler
-		return runCommands(commands, logListener);
+		return runCommands(commands, environment, logListener);
diff --git a/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/CompilerJRuby.java b/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/CompilerJRuby.java
index bd5d5f05..e6cd6416 100644
--- a/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/CompilerJRuby.java
+++ b/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/CompilerJRuby.java
@@ -2 +2 @@
- * Copyright (c) 2013-2016 Chris Newland.
+ * Copyright (c) 2013-2022 Chris Newland.
@@ -15,4 +15 @@ import java.nio.file.Paths;
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
+import java.util.*;
@@ -47 +44 @@ public class CompilerJRuby extends AbstractProcess implements ICompiler
-	public boolean compile(List<File> sourceFiles, List<String> classpathEntries, File outputDir, ILogListener logListener)
+	public boolean compile(List<File> sourceFiles, List<String> classpathEntries, File outputDir, Map<String, String> environment, ILogListener logListener)
@@ -77 +74 @@ public class CompilerJRuby extends AbstractProcess implements ICompiler
-		return runCommands(commands, logListener);
+		return runCommands(commands, environment, logListener);
diff --git a/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/CompilerJava.java b/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/CompilerJava.java
index ea0db730..92e18c5d 100644
--- a/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/CompilerJava.java
+++ b/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/CompilerJava.java
@@ -2 +2 @@
- * Copyright (c) 2013-2016 Chris Newland.
+ * Copyright (c) 2013-2022 Chris Newland.
@@ -15,0 +16 @@ import java.util.List;
+import java.util.Map;
@@ -46 +47 @@ public class CompilerJava extends AbstractProcess implements ICompiler
-	public boolean compile(List<File> sourceFiles, List<String> classpathEntries, File outputDir, ILogListener logListener)
+	public boolean compile(List<File> sourceFiles, List<String> classpathEntries, File outputDir, Map<String, String> environment, ILogListener logListener)
@@ -71 +72 @@ public class CompilerJava extends AbstractProcess implements ICompiler
-		return runCommands(commands, logListener);
+		return runCommands(commands, environment, logListener);
diff --git a/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/CompilerJavaScript.java b/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/CompilerJavaScript.java
index ee5c08ac..4868ebee 100644
--- a/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/CompilerJavaScript.java
+++ b/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/CompilerJavaScript.java
@@ -2 +2 @@
- * Copyright (c) 2013-2016 Chris Newland.
+ * Copyright (c) 2013-2022 Chris Newland.
@@ -15,0 +16 @@ import java.util.List;
+import java.util.Map;
@@ -41 +42 @@ public class CompilerJavaScript extends AbstractProcess implements ICompiler
-	public boolean compile(List<File> sourceFiles, List<String> classpathEntries, File outputDir, ILogListener logListener)
+	public boolean compile(List<File> sourceFiles, List<String> classpathEntries, File outputDir, Map<String, String> environment, ILogListener logListener)
@@ -67 +68 @@ public class CompilerJavaScript extends AbstractProcess implements ICompiler
-		return runCommands(commands, logListener);
+		return runCommands(commands, environment, logListener);
diff --git a/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/CompilerKotlin.java b/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/CompilerKotlin.java
index 6f8807bf..10ab50b0 100644
--- a/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/CompilerKotlin.java
+++ b/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/CompilerKotlin.java
@@ -2 +2 @@
- * Copyright (c) 2013-2016 Chris Newland.
+ * Copyright (c) 2013-2022 Chris Newland.
@@ -15,0 +16 @@ import java.util.List;
+import java.util.Map;
@@ -42 +43 @@ public class CompilerKotlin extends AbstractProcess implements ICompiler
-	public boolean compile(List<File> sourceFiles, List<String> classpathEntries, File outputDir, ILogListener logListener)
+	public boolean compile(List<File> sourceFiles, List<String> classpathEntries, File outputDir, Map<String, String> environment, ILogListener logListener)
@@ -69 +70 @@ public class CompilerKotlin extends AbstractProcess implements ICompiler
-		return runCommands(commands, logListener);
+		return runCommands(commands, environment, logListener);
diff --git a/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/CompilerScala.java b/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/CompilerScala.java
index bba0ff20..a654c6f1 100644
--- a/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/CompilerScala.java
+++ b/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/CompilerScala.java
@@ -2 +2 @@
- * Copyright (c) 2013-2016 Chris Newland.
+ * Copyright (c) 2013-2022 Chris Newland.
@@ -16,0 +17 @@ import java.util.List;
+import java.util.Map;
@@ -46 +47 @@ public class CompilerScala extends AbstractProcess implements ICompiler
-	public boolean compile(List<File> sourceFiles, List<String> classpathEntries, File outputDir, ILogListener logListener)
+	public boolean compile(List<File> sourceFiles, List<String> classpathEntries, File outputDir, Map<String, String> environment,ILogListener logListener)
@@ -73 +74 @@ public class CompilerScala extends AbstractProcess implements ICompiler
-		boolean success = runCommands(commands, logListener);
+		boolean success = runCommands(commands, environment, logListener);
diff --git a/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/ICompiler.java b/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/ICompiler.java
index 7b663457..35d7e910 100644
--- a/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/ICompiler.java
+++ b/src/main/java/org/adoptopenjdk/jitwatch/process/compiler/ICompiler.java
@@ -2 +2 @@
- * Copyright (c) 2013-2016 Chris Newland.
+ * Copyright (c) 2013-2022 Chris Newland.
@@ -10,0 +11 @@ import java.util.List;
+import java.util.Map;
@@ -17 +18 @@ public interface ICompiler extends IExternalProcess
-	public boolean compile(List<File> sourceFiles, List<String> classpathEntries, File outputDir, ILogListener logListener) throws IOException;
+	public boolean compile(List<File> sourceFiles, List<String> classpathEntries, File outputDir, Map<String, String> environment, ILogListener logListener) throws IOException;
diff --git a/src/main/java/org/adoptopenjdk/jitwatch/process/javap/JavapProcess.java b/src/main/java/org/adoptopenjdk/jitwatch/process/javap/JavapProcess.java
index 311c6711..171dd5cb 100644
--- a/src/main/java/org/adoptopenjdk/jitwatch/process/javap/JavapProcess.java
+++ b/src/main/java/org/adoptopenjdk/jitwatch/process/javap/JavapProcess.java
@@ -2 +2 @@
- * Copyright (c) 2013-2021 Chris Newland.
+ * Copyright (c) 2013-2022 Chris Newland.
@@ -13,4 +13 @@ import java.nio.file.Paths;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.List;
+import java.util.*;
@@ -19,2 +15,0 @@ import org.adoptopenjdk.jitwatch.process.AbstractProcess;
-import com.chrisnewland.freelogj.Logger;
-import com.chrisnewland.freelogj.LoggerFactory;
@@ -93 +88 @@ public class JavapProcess extends AbstractProcess
-	public boolean execute(Collection<String> classLocations, String fqClassName)
+	public boolean execute(Collection<String> classLocations, String fqClassName, Map<String, String> environment)
@@ -99 +94 @@ public class JavapProcess extends AbstractProcess
-		return runCommands(commands, null);
+		return runCommands(commands, environment, null);
@@ -101 +96 @@ public class JavapProcess extends AbstractProcess
-}
+}
\ No newline at end of file
diff --git a/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/IRuntime.java b/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/IRuntime.java
index 50f568bc..4475dc78 100644
--- a/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/IRuntime.java
+++ b/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/IRuntime.java
@@ -2 +2 @@
- * Copyright (c) 2013-2016 Chris Newland.
+ * Copyright (c) 2013-2022 Chris Newland.
@@ -9,0 +10 @@ import java.util.List;
+import java.util.Map;
@@ -16 +17 @@ public interface IRuntime extends IExternalProcess
-	public boolean execute(String className, List<String> classpathEntries, List<String> vmOptions, ILogListener logListener);
+	public boolean execute(String className, List<String> classpathEntries, List<String> vmOptions, Map<String, String> environment, ILogListener logListener);
diff --git a/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/RuntimeGroovy.java b/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/RuntimeGroovy.java
index 6127b0d9..e7ad8db5 100644
--- a/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/RuntimeGroovy.java
+++ b/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/RuntimeGroovy.java
@@ -2 +2 @@
- * Copyright (c) 2013-2016 Chris Newland.
+ * Copyright (c) 2013-2022 Chris Newland.
@@ -16,0 +17 @@ import java.util.List;
+import java.util.Map;
@@ -65 +66 @@ public class RuntimeGroovy extends AbstractProcess implements IRuntime
-	public boolean execute(String className, List<String> classpathEntries, List<String> vmOptions, ILogListener logListener)
+	public boolean execute(String className, List<String> classpathEntries, List<String> vmOptions, Map<String, String> environment, ILogListener logListener)
@@ -84 +85 @@ public class RuntimeGroovy extends AbstractProcess implements IRuntime
-		return runCommands(commands, logListener);
+		return runCommands(commands, environment, logListener);
diff --git a/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/RuntimeJRuby.java b/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/RuntimeJRuby.java
index 15b4e40c..05bbedb6 100644
--- a/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/RuntimeJRuby.java
+++ b/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/RuntimeJRuby.java
@@ -16,0 +17 @@ import java.util.List;
+import java.util.Map;
@@ -42 +43 @@ public class RuntimeJRuby extends AbstractProcess implements IRuntime
-	public boolean execute(String className, List<String> classpathEntries, List<String> vmOptions, ILogListener logListener)
+	public boolean execute(String className, List<String> classpathEntries, List<String> vmOptions, Map<String, String> environment, ILogListener logListener)
@@ -62 +63 @@ public class RuntimeJRuby extends AbstractProcess implements IRuntime
-		return runCommands(commands, logListener);
+		return runCommands(commands, environment, logListener);
diff --git a/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/RuntimeJava.java b/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/RuntimeJava.java
index 4591c203..f85650e8 100644
--- a/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/RuntimeJava.java
+++ b/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/RuntimeJava.java
@@ -2 +2 @@
- * Copyright (c) 2013-2017 Chris Newland.
+ * Copyright (c) 2013-2022 Chris Newland.
@@ -20,0 +21 @@ import java.util.List;
+import java.util.Map;
@@ -50,2 +51,2 @@ public class RuntimeJava extends AbstractProcess implements IRuntime
-	@Override
-	public boolean execute(String className, List<String> classpathEntries, List<String> vmOptions, ILogListener logListener)
+	@Override public boolean execute(String className, List<String> classpathEntries, List<String> vmOptions,
+			Map<String, String> environment, ILogListener logListener)
@@ -71 +72 @@ public class RuntimeJava extends AbstractProcess implements IRuntime
-		return runCommands(commands, logListener);
+		return runCommands(commands, environment, logListener);
@@ -74,2 +75 @@ public class RuntimeJava extends AbstractProcess implements IRuntime
-	@Override
-	public String getClassToExecute(File fileToRun)
+	@Override public String getClassToExecute(File fileToRun)
@@ -78 +78 @@ public class RuntimeJava extends AbstractProcess implements IRuntime
-		
+
@@ -82 +82 @@ public class RuntimeJava extends AbstractProcess implements IRuntime
-			
+
@@ -86 +86 @@ public class RuntimeJava extends AbstractProcess implements IRuntime
-				
+
@@ -97 +97 @@ public class RuntimeJava extends AbstractProcess implements IRuntime
-		
+
@@ -102,2 +102 @@ public class RuntimeJava extends AbstractProcess implements IRuntime
-	@Override
-	public String getClassForTriView(File fileToRun)
+	@Override public String getClassForTriView(File fileToRun)
diff --git a/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/RuntimeJavaScript.java b/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/RuntimeJavaScript.java
index b20dbdaf..2385f73e 100644
--- a/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/RuntimeJavaScript.java
+++ b/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/RuntimeJavaScript.java
@@ -2 +2 @@
- * Copyright (c) 2013-2016 Chris Newland.
+ * Copyright (c) 2013-2022 Chris Newland.
@@ -13,0 +14 @@ import java.util.List;
+import java.util.Map;
@@ -39 +40 @@ public class RuntimeJavaScript extends AbstractProcess implements IRuntime
-	public boolean execute(String className, List<String> classpathEntries, List<String> vmOptions, ILogListener logListener)
+	public boolean execute(String className, List<String> classpathEntries, List<String> vmOptions, Map<String, String> environment, ILogListener logListener)
@@ -62 +63 @@ public class RuntimeJavaScript extends AbstractProcess implements IRuntime
-		return runCommands(commands, logListener);
+		return runCommands(commands, environment, logListener);
diff --git a/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/RuntimeKotlin.java b/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/RuntimeKotlin.java
index d9669c98..cc6e7b11 100644
--- a/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/RuntimeKotlin.java
+++ b/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/RuntimeKotlin.java
@@ -2 +2 @@
- * Copyright (c) 2013-2016 Chris Newland.
+ * Copyright (c) 2013-2022 Chris Newland.
@@ -15,0 +16 @@ import java.util.List;
+import java.util.Map;
@@ -48 +49 @@ public class RuntimeKotlin extends AbstractProcess implements IRuntime
-	public boolean execute(String className, List<String> classpathEntries, List<String> vmOptions, ILogListener logListener)
+	public boolean execute(String className, List<String> classpathEntries, List<String> vmOptions, Map<String, String> environment, ILogListener logListener)
@@ -68 +69 @@ public class RuntimeKotlin extends AbstractProcess implements IRuntime
-		return runCommands(commands, logListener);
+		return runCommands(commands, environment,logListener);
diff --git a/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/RuntimeScala.java b/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/RuntimeScala.java
index 30242903..16a59608 100644
--- a/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/RuntimeScala.java
+++ b/src/main/java/org/adoptopenjdk/jitwatch/process/runtime/RuntimeScala.java
@@ -2 +2 @@
- * Copyright (c) 2013-2016 Chris Newland.
+ * Copyright (c) 2013-2022 Chris Newland.
@@ -16,0 +17 @@ import java.util.List;
+import java.util.Map;
@@ -42 +43 @@ public class RuntimeScala extends AbstractProcess implements IRuntime
-	public boolean execute(String className, List<String> classpathEntries, List<String> vmOptions, ILogListener logListener)
+	public boolean execute(String className, List<String> classpathEntries, List<String> vmOptions, Map<String, String> environment, ILogListener logListener)
@@ -62 +63 @@ public class RuntimeScala extends AbstractProcess implements IRuntime
-		return runCommands(commands, logListener);
+		return runCommands(commands, environment, logListener);
diff --git a/src/main/java/org/adoptopenjdk/jitwatch/util/DisassemblyUtil.java b/src/main/java/org/adoptopenjdk/jitwatch/util/DisassemblyUtil.java
index 9638afac..37f53f40 100644
--- a/src/main/java/org/adoptopenjdk/jitwatch/util/DisassemblyUtil.java
+++ b/src/main/java/org/adoptopenjdk/jitwatch/util/DisassemblyUtil.java
@@ -2 +2 @@
- * Copyright (c) 2013-2021 Chris Newland.
+ * Copyright (c) 2013-2022 Chris Newland.
@@ -29 +29 @@ public final class DisassemblyUtil
-		boolean found = false;
+		boolean found = downloadedDisassemblerPresent();
@@ -51 +51,16 @@ public final class DisassemblyUtil
-	private static String getDisassemblerFilename()
+	public static String getDynamicLibraryPath()
+	{
+		switch (OSUtil.getOperatingSystem())
+		{
+		case WIN:
+			return "PATH";
+		case MAC:
+			return "DYLD_LIBRARY_PATH";
+		case LINUX:
+			return "LD_LIBRARY_PATH";
+		}
+
+		throw new RuntimeException("Unknown OS");
+	}
+
+	public static String getDisassemblerFilename()
@@ -61,23 +76 @@ public final class DisassemblyUtil
-		String binaryName = null;
-
-		switch (arch)
-		{
-		case X86_32:
-			binaryName = "hsdis-i386";
-			break;
-
-		case X86_64:
-			binaryName = "hsdis-amd64";
-			break;
-
-		case ARM_32:
-			binaryName = "hsdis-arm";
-			break;
-
-		case ARM_64:
-			binaryName = "hsdis-arm";
-			break;
-
-		default:
-			break;
-		}
+		String binaryName = "hsdis-" + System.getProperty("os.arch");
@@ -108,0 +102,5 @@ public final class DisassemblyUtil
+	public static boolean downloadedDisassemblerPresent()
+	{
+		return new File(getDisassemblerFilename()).exists();
+	}
+
@@ -112,0 +111,26 @@ public final class DisassemblyUtil
+		// first check the dynamic library path in case user has overridden JDK location for hsdis
+		String dynLibPath = System.getenv(getDynamicLibraryPath());
+
+		if (dynLibPath != null)
+		{
+			String[] dirs = dynLibPath.split(":");
+
+			for (String dir : dirs)
+			{
+				Path path = Paths.get(dir, binaryName);
+
+				if (DEBUG_LOGGING_ASSEMBLY)
+				{
+					logger.debug("looking in {}", path);
+				}
+
+				File file = path.toFile();
+
+				if (file.exists() && file.isFile())
+				{
+					return path;
+				}
+			}
+		}
+
+		// next search JDK
@@ -159 +183,2 @@ public final class DisassemblyUtil
-		if (OSUtil.OperatingSystem.LINUX == OSUtil.getOperatingSystem())
+		// finally search for locally downloaded
+		if (downloadedDisassemblerPresent())
@@ -161,23 +186 @@ public final class DisassemblyUtil
-			String dynLibPath = System.getenv("LD_LIBRARY_PATH");
-
-			if (dynLibPath != null)
-			{
-				String[] dirs = dynLibPath.split(":");
-
-				for (String dir : dirs)
-				{
-					Path path = Paths.get(dir, binaryName);
-
-					if (DEBUG_LOGGING_ASSEMBLY)
-					{
-						logger.debug("looking in {}", path);
-					}
-
-					File file = path.toFile();
-
-					if (file.exists() && file.isFile())
-					{
-						return path;
-					}
-				}
-			}
+			return Paths.get(getDisassemblerFilename());
@@ -188 +191 @@ public final class DisassemblyUtil
-}
+}
\ No newline at end of file
diff --git a/src/main/java/org/adoptopenjdk/jitwatch/util/NetUtil.java b/src/main/java/org/adoptopenjdk/jitwatch/util/NetUtil.java
index 7b10042c..a2cb90c4 100644
--- a/src/main/java/org/adoptopenjdk/jitwatch/util/NetUtil.java
+++ b/src/main/java/org/adoptopenjdk/jitwatch/util/NetUtil.java
@@ -2 +2 @@
- * Copyright (c) 2013-2021 Chris Newland.
+ * Copyright (c) 2013-2022 Chris Newland.
@@ -11,3 +11 @@ import com.chrisnewland.freelogj.LoggerFactory;
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStreamReader;
+import java.io.*;
@@ -15,0 +14,2 @@ import java.net.URL;
+import java.nio.Buffer;
+import java.nio.file.Path;
@@ -27 +27 @@ public final class NetUtil
-	public static String fetchURL(String toFetch)
+	public static String fetchURL(String url)
@@ -31,8 +31,2 @@ public final class NetUtil
-		BufferedReader in = null;
-
-		try
-		{			
-			URL url = new URL(toFetch);
-
-			in = new BufferedReader(new InputStreamReader(url.openStream()));
-
+		try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new URL(url).openStream())))
+		{
@@ -41,2 +35,2 @@ public final class NetUtil
-			while ((inputLine = in.readLine()) != null)
-			{				
+			while ((inputLine = bufferedReader.readLine()) != null)
+			{
@@ -45 +38,0 @@ public final class NetUtil
-
@@ -49 +42 @@ public final class NetUtil
-			logger.error("", e);
+			logger.error("Bad URL: {}", url, e);
@@ -53 +46 @@ public final class NetUtil
-			logger.error("", e);
+			logger.error("Could not download {}", url, e);
@@ -55 +48,8 @@ public final class NetUtil
-		finally
+
+		return builder.toString();
+	}
+
+	public static boolean fetchBinary(String url, Path targetPath)
+	{
+		try (BufferedInputStream bufferedInputStream = new BufferedInputStream(new URL(url).openStream());
+				BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(targetPath.toFile())))
@@ -57 +57,5 @@ public final class NetUtil
-			if (in != null)
+			byte[] data = new byte[1024];
+
+			int read;
+
+			while ((read = bufferedInputStream.read(data)) != -1)
@@ -59,7 +63 @@ public final class NetUtil
-				try
-				{
-					in.close();
-				}
-				catch (IOException ioe)
-				{
-				}
+				bufferedOutputStream.write(data, 0, read);
@@ -67,0 +66,10 @@ public final class NetUtil
+		catch (MalformedURLException e)
+		{
+			logger.error("Bad URL: {}", url, e);
+			return false;
+		}
+		catch (IOException e)
+		{
+			logger.error("Could not download {}", url, e);
+			return false;
+		}
@@ -69 +77 @@ public final class NetUtil
-		return builder.toString();
+		return true;
@@ -71 +79 @@ public final class NetUtil
-}
+}
\ No newline at end of file
diff --git a/src/main/java/org/adoptopenjdk/jitwatch/util/OSUtil.java b/src/main/java/org/adoptopenjdk/jitwatch/util/OSUtil.java
index 28b5aa54..b957ec7d 100644
--- a/src/main/java/org/adoptopenjdk/jitwatch/util/OSUtil.java
+++ b/src/main/java/org/adoptopenjdk/jitwatch/util/OSUtil.java
@@ -2 +2 @@
- * Copyright (c) 2013-2021 Chris Newland.
+ * Copyright (c) 2013-2022 Chris Newland.
@@ -54 +54,3 @@ public final class OSUtil
-			if (arch.contains("arm"))
+			arch = arch.toLowerCase();
+
+			if (arch.contains("arm") || arch.contains("aarch"))
@@ -80 +82 @@ public final class OSUtil
-}
+}
\ No newline at end of file
diff --git a/src/test/java/org/adoptopenjdk/jitwatch/test/TestBytecodeLoaderWithInnerClasses.java b/src/test/java/org/adoptopenjdk/jitwatch/test/TestBytecodeLoaderWithInnerClasses.java
index 20adfb69..1550c6c6 100644
--- a/src/test/java/org/adoptopenjdk/jitwatch/test/TestBytecodeLoaderWithInnerClasses.java
+++ b/src/test/java/org/adoptopenjdk/jitwatch/test/TestBytecodeLoaderWithInnerClasses.java
@@ -17,5 +17 @@ import java.nio.file.Paths;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
+import java.util.*;
@@ -88,2 +84 @@ public class TestBytecodeLoaderWithInnerClasses
-	@Before
-	public void setUp()
+	@Before public void setUp()
@@ -111 +106,3 @@ public class TestBytecodeLoaderWithInnerClasses
-			boolean success = compiler.compile(sources, compileClasspath, pathToTempClassDir.toFile(), new NullLogListener());
+			boolean success = compiler.compile(sources, compileClasspath, pathToTempClassDir.toFile(), Collections.emptyMap(),
+					new NullLogListener());
+
@@ -137,2 +134 @@ public class TestBytecodeLoaderWithInnerClasses
-	@After
-	public void tearDown()
+	@After public void tearDown()
@@ -157,2 +153 @@ public class TestBytecodeLoaderWithInnerClasses
-	@Test
-	public void testCompilationCreatedCorrectOutputs()
+	@Test public void testCompilationCreatedCorrectOutputs()
@@ -195,2 +190 @@ public class TestBytecodeLoaderWithInnerClasses
-	@Test
-	public void testSearchFromSourceOuterClassConstructor()
+	@Test public void testSearchFromSourceOuterClassConstructor()
@@ -215,2 +209 @@ public class TestBytecodeLoaderWithInnerClasses
-	@Test
-	public void testSearchFromSourceOuterClassMethod()
+	@Test public void testSearchFromSourceOuterClassMethod()
@@ -231,2 +224 @@ public class TestBytecodeLoaderWithInnerClasses
-	@Test
-	public void testSearchFromSourceInner1ClassConstructor()
+	@Test public void testSearchFromSourceInner1ClassConstructor()
@@ -253,2 +245 @@ public class TestBytecodeLoaderWithInnerClasses
-	@Test
-	public void testSearchFromSourceInner1ClassMethod()
+	@Test public void testSearchFromSourceInner1ClassMethod()
@@ -269,2 +260 @@ public class TestBytecodeLoaderWithInnerClasses
-	@Test
-	public void testSearchFromSourceInner2ClassConstructor()
+	@Test public void testSearchFromSourceInner2ClassConstructor()
@@ -291,2 +281 @@ public class TestBytecodeLoaderWithInnerClasses
-	@Test
-	public void testSearchFromSourceInner2ClassMethod()
+	@Test public void testSearchFromSourceInner2ClassMethod()
@@ -307,2 +296 @@ public class TestBytecodeLoaderWithInnerClasses
-	@Test
-	public void testSearchFromBytecodeOuterClassConstructor()
+	@Test public void testSearchFromBytecodeOuterClassConstructor()
@@ -325,2 +313 @@ public class TestBytecodeLoaderWithInnerClasses
-	@Test
-	public void testSearchFromBytecodeOuterClassMethod()
+	@Test public void testSearchFromBytecodeOuterClassMethod()
@@ -337,2 +324 @@ public class TestBytecodeLoaderWithInnerClasses
-	@Test
-	public void testSearchFromBytecodeInner1ClassConstructor()
+	@Test public void testSearchFromBytecodeInner1ClassConstructor()
@@ -355,2 +341 @@ public class TestBytecodeLoaderWithInnerClasses
-	@Test
-	public void testSearchFromBytecodeInner1ClassMethod()
+	@Test public void testSearchFromBytecodeInner1ClassMethod()
@@ -366,3 +351,2 @@ public class TestBytecodeLoaderWithInnerClasses
-	
-	@Test
-	public void testSearchFromBytecodeInner2ClassConstructor()
+
+	@Test public void testSearchFromBytecodeInner2ClassConstructor()
@@ -372,4 +356,4 @@ public class TestBytecodeLoaderWithInnerClasses
-//		 line 36: 0
-//		 line 37: 9
-//		 line 39: 17
-//		 line 40: 21
+		//		 line 36: 0
+		//		 line 37: 9
+		//		 line 39: 17
+		//		 line 40: 21
@@ -383,2 +367 @@ public class TestBytecodeLoaderWithInnerClasses
-	@Test
-	public void testSearchFromBytecodeInner2ClassMethod()
+	@Test public void testSearchFromBytecodeInner2ClassMethod()
@@ -388,2 +371,2 @@ public class TestBytecodeLoaderWithInnerClasses
-//		 line 44: 0
-//		 line 45: 8
+		//		 line 44: 0
+		//		 line 45: 8
diff --git a/src/test/java/org/adoptopenjdk/jitwatch/test/TestCompilationUtil.java b/src/test/java/org/adoptopenjdk/jitwatch/test/TestCompilationUtil.java
index 19a2e56a..be35a9e6 100644
--- a/src/test/java/org/adoptopenjdk/jitwatch/test/TestCompilationUtil.java
+++ b/src/test/java/org/adoptopenjdk/jitwatch/test/TestCompilationUtil.java
@@ -2 +2 @@
- * Copyright (c) 2013-2016 Chris Newland.
+ * Copyright (c) 2013-2022 Chris Newland.
@@ -16,0 +17 @@ import java.util.ArrayList;
+import java.util.Collections;
@@ -32,2 +33 @@ public class TestCompilationUtil
-	@Before
-	public void setUp()
+	@Before public void setUp()
@@ -46 +46 @@ public class TestCompilationUtil
-				.toFile();
+							  .toFile();
@@ -49 +49 @@ public class TestCompilationUtil
-				.toFile();
+							 .toFile();
@@ -55,2 +55 @@ public class TestCompilationUtil
-	@After
-	public void tearDown()
+	@After public void tearDown()
@@ -70,2 +69 @@ public class TestCompilationUtil
-	@Test
-	public void testCompileSimple()
+	@Test public void testCompileSimple()
@@ -96 +94,2 @@ public class TestCompilationUtil
-			boolean success = compiler.compile(sources, compileClasspath, tempDirPath.toFile(), new NullLogListener());
+			boolean success = compiler.compile(sources, compileClasspath, tempDirPath.toFile(), Collections.emptyMap(),
+					new NullLogListener());
diff --git a/src/test/java/org/adoptopenjdk/jitwatch/test/TestExecutionUtil.java b/src/test/java/org/adoptopenjdk/jitwatch/test/TestExecutionUtil.java
index f55d4e04..4ac09f36 100644
--- a/src/test/java/org/adoptopenjdk/jitwatch/test/TestExecutionUtil.java
+++ b/src/test/java/org/adoptopenjdk/jitwatch/test/TestExecutionUtil.java
@@ -2 +2 @@
- * Copyright (c) 2013-2021 Chris Newland.
+ * Copyright (c) 2013-2022 Chris Newland.
@@ -14,0 +15 @@ import java.util.ArrayList;
+import java.util.Collections;
@@ -53 +54,2 @@ public class TestExecutionUtil
-			boolean success = executor.execute(DummyClassWithMain.class.getCanonicalName(), cp, options, new StdLogListener());
+			boolean success = executor.execute(DummyClassWithMain.class.getCanonicalName(), cp, options, Collections.emptyMap(),
+					new StdLogListener());
