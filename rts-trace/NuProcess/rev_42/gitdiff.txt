diff --git a/src/main/java/com/zaxxer/nuprocess/internal/BasePosixProcess.java b/src/main/java/com/zaxxer/nuprocess/internal/BasePosixProcess.java
index 6b526e3..39c86ce 100644
--- a/src/main/java/com/zaxxer/nuprocess/internal/BasePosixProcess.java
+++ b/src/main/java/com/zaxxer/nuprocess/internal/BasePosixProcess.java
@@ -92 +92 @@ public abstract class BasePosixProcess implements NuProcess
-      IS_SOFTEXIT_DETECTION = Boolean.parseBoolean(System.getProperty("com.zaxxer.nuprocess.softExitDetection", "true"));
+      IS_SOFTEXIT_DETECTION = Boolean.valueOf(System.getProperty("com.zaxxer.nuprocess.softExitDetection", "true"));
@@ -96 +96 @@ public abstract class BasePosixProcess implements NuProcess
-      if (Boolean.parseBoolean(System.getProperty("com.zaxxer.nuprocess.enableShutdownHook", "true"))) {
+      if (Boolean.valueOf(System.getProperty("com.zaxxer.nuprocess.enableShutdownHook", "true"))) {
@@ -140,0 +141,12 @@ public abstract class BasePosixProcess implements NuProcess
+   /**
+    * Check the launched process and return {@code true} if launch was successful,
+    * or {@code false} if there was an error in launch.
+    *
+    * @return {@code true} on success, {@code false} on failure
+    */
+   protected boolean checkLaunch()
+   {
+      // Can be overridden by subclasses for post-launch checks
+      return true;
+   }
+
@@ -312 +323,0 @@ public abstract class BasePosixProcess implements NuProcess
-         LOGGER.log(Level.WARNING, "Exception thrown from handler", e);
@@ -492 +503 @@ public abstract class BasePosixProcess implements NuProcess
-         LOGGER.log(Level.SEVERE, "Exception thrown handling writes to stdin " + processHandler, e);
+         Logger.getLogger(getClass().getName()).log(Level.SEVERE, "Exception thrown handling writes to stdin " + processHandler, e);
@@ -568 +578,0 @@ public abstract class BasePosixProcess implements NuProcess
-         LOGGER.log(Level.WARNING, "Exception thrown from handler", e);
@@ -579 +588,0 @@ public abstract class BasePosixProcess implements NuProcess
-         LOGGER.log(Level.WARNING, "Exception thrown from handler", e);
@@ -584,0 +594,2 @@ public abstract class BasePosixProcess implements NuProcess
+      int rc;
+
@@ -590 +601 @@ public abstract class BasePosixProcess implements NuProcess
-         int rc = LibC.pipe(in);
+         rc = LibC.pipe(in);
@@ -619,14 +630,19 @@ public abstract class BasePosixProcess implements NuProcess
-      // Add stdin pipe descriptors
-      unique.add(in[0]);
-      unique.add(in[1]);
-      // Add stdout pipe descriptors
-      unique.add(out[0]);
-      unique.add(out[1]);
-      // Add stderr pipe descriptors
-      unique.add(err[0]);
-      unique.add(err[1]);
-      // Remove 0, in case any of the above desriptors weren't allocated
-      unique.remove(0);
-
-      for (int fd : unique) {
-         LibC.close(fd);
+      if (in != null) {
+         unique.add(in[0]);
+         unique.add(in[1]);
+      }
+
+      if (out != null) {
+         unique.add(out[0]);
+         unique.add(out[1]);
+      }
+
+      if (err != null) {
+         unique.add(err[0]);
+         unique.add(err[1]);
+      }
+
+      for (int fildes : unique) {
+         if (fildes != 0) {
+            LibC.close(fildes);
+         }
diff --git a/src/main/java/com/zaxxer/nuprocess/internal/LibJava10.java b/src/main/java/com/zaxxer/nuprocess/internal/LibJava10.java
index 4bc4b89..bb85244 100644
--- a/src/main/java/com/zaxxer/nuprocess/internal/LibJava10.java
+++ b/src/main/java/com/zaxxer/nuprocess/internal/LibJava10.java
@@ -24 +23,0 @@ import com.sun.jna.NativeLibrary;
-import java.io.IOException;
@@ -75 +74 @@ public class LibJava10
-   ) throws IOException;
+   );
diff --git a/src/main/java/com/zaxxer/nuprocess/internal/LibJava8.java b/src/main/java/com/zaxxer/nuprocess/internal/LibJava8.java
index ba7a1c4..caf21fe 100644
--- a/src/main/java/com/zaxxer/nuprocess/internal/LibJava8.java
+++ b/src/main/java/com/zaxxer/nuprocess/internal/LibJava8.java
@@ -24 +23,0 @@ import com.sun.jna.NativeLibrary;
-import java.io.IOException;
@@ -74 +73 @@ public class LibJava8
-   ) throws IOException;
+   );
diff --git a/src/main/java/com/zaxxer/nuprocess/linux/LinuxProcess.java b/src/main/java/com/zaxxer/nuprocess/linux/LinuxProcess.java
index a0ff29f..203e80a 100644
--- a/src/main/java/com/zaxxer/nuprocess/linux/LinuxProcess.java
+++ b/src/main/java/com/zaxxer/nuprocess/linux/LinuxProcess.java
@@ -19,0 +20 @@ import com.sun.jna.JNIEnv;
+import com.sun.jna.ptr.IntByReference;
@@ -26 +26,0 @@ import com.zaxxer.nuprocess.internal.LibC;
-import java.io.IOException;
@@ -30,0 +31 @@ import java.util.logging.Level;
+import static com.zaxxer.nuprocess.internal.LibC.*;
@@ -65,0 +67 @@ public class LinuxProcess extends BasePosixProcess
+
@@ -69,0 +72,2 @@ public class LinuxProcess extends BasePosixProcess
+         closePipes();
+
@@ -94,0 +99 @@ public class LinuxProcess extends BasePosixProcess
+
@@ -98,0 +104,2 @@ public class LinuxProcess extends BasePosixProcess
+         closePipes();
+
@@ -115 +122 @@ public class LinuxProcess extends BasePosixProcess
-   private void prepareProcess(List<String> command, String[] environment, Path cwd) throws IOException
+   private void prepareProcess(List<String> command, String[] environment, Path cwd)
@@ -136,0 +144 @@ public class LinuxProcess extends BasePosixProcess
+      // See https://github.com/JetBrains/jdk8u_jdk/blob/master/src/solaris/classes/java/lang/ProcessImpl.java#L96
@@ -138,32 +146,14 @@ public class LinuxProcess extends BasePosixProcess
-      try {
-         // createPipes() returns the parent ends of the pipes, but forkAndExec requires the child ends
-         int[] child_fds = {stdinWidow, stdoutWidow, stderrWidow};
-
-         if (JVM_MAJOR_VERSION >= 10) {
-            pid = com.zaxxer.nuprocess.internal.LibJava10.Java_java_lang_ProcessImpl_forkAndExec(
-                    JNIEnv.CURRENT,
-                    this,
-                    LaunchMechanism.VFORK.ordinal() + 1,
-                    toCString(System.getProperty("java.home") + "/lib/jspawnhelper"), // used on Linux
-                    toCString(cmdarray[0]),
-                    argBlock, args.length,
-                    envBlock, environment.length,
-                    (cwd != null ? toCString(cwd.toString()) : null),
-                    child_fds,
-                    (byte) 0 /*redirectErrorStream*/);
-         }
-         else {
-            // See https://github.com/JetBrains/jdk8u_jdk/blob/master/src/solaris/classes/java/lang/UNIXProcess.java#L247
-            // Native source code: https://github.com/JetBrains/jdk8u_jdk/blob/master/src/solaris/native/java/lang/UNIXProcess_md.c#L566
-            pid = com.zaxxer.nuprocess.internal.LibJava8.Java_java_lang_UNIXProcess_forkAndExec(
-                    JNIEnv.CURRENT,
-                    this,
-                    LaunchMechanism.VFORK.ordinal() + 1,
-                    toCString(System.getProperty("java.home") + "/lib/jspawnhelper"), // used on Linux
-                    toCString(cmdarray[0]),
-                    argBlock, args.length,
-                    envBlock, environment.length,
-                    (cwd != null ? toCString(cwd.toString()) : null),
-                    child_fds,
-                    (byte) 0 /*redirectErrorStream*/);
-         }
+      int[] child_fds = {stdinWidow, stdoutWidow, stderrWidow};
+
+      if (JVM_MAJOR_VERSION >= 10) {
+         pid = com.zaxxer.nuprocess.internal.LibJava10.Java_java_lang_ProcessImpl_forkAndExec(
+               JNIEnv.CURRENT,
+               this,
+               LaunchMechanism.VFORK.ordinal() + 1,
+               toCString(System.getProperty("java.home") + "/lib/jspawnhelper"), // used on Linux
+               toCString(cmdarray[0]),
+               argBlock, args.length,
+               envBlock, environment.length,
+               (cwd != null ? toCString(cwd.toString()) : null),
+               child_fds,
+               (byte) 0 /*redirectErrorStream*/);
@@ -171,4 +161,14 @@ public class LinuxProcess extends BasePosixProcess
-      finally {
-         // If we call createPipes, even if launching the process then fails, we need to ensure
-         // the child side of the pipes are closed. The parent side will be closed in onExit
-         closePipes();
+      else {
+         // See https://github.com/JetBrains/jdk8u_jdk/blob/master/src/solaris/classes/java/lang/UNIXProcess.java#L247
+         // Native source code: https://github.com/JetBrains/jdk8u_jdk/blob/master/src/solaris/native/java/lang/UNIXProcess_md.c#L566
+         pid = com.zaxxer.nuprocess.internal.LibJava8.Java_java_lang_UNIXProcess_forkAndExec(
+               JNIEnv.CURRENT,
+               this,
+               LaunchMechanism.VFORK.ordinal() + 1,
+               toCString(System.getProperty("java.home") + "/lib/jspawnhelper"), // used on Linux
+               toCString(cmdarray[0]),
+               argBlock, args.length,
+               envBlock, environment.length,
+               (cwd != null ? toCString(cwd.toString()) : null),
+               child_fds,
+               (byte) 0 /*redirectErrorStream*/);
@@ -185,0 +186,35 @@ public class LinuxProcess extends BasePosixProcess
+   @Override
+   protected boolean checkLaunch()
+   {
+      // This is necessary on Linux because spawn failures are not reflected in the rc, and this will reap
+      // any zombies due to launch failure
+      IntByReference ret = new IntByReference();
+      int waitpidRc = LibC.waitpid(pid, ret, LibC.WNOHANG);
+      int status = ret.getValue();
+      boolean cleanExit = waitpidRc == pid && WIFEXITED(status) && WEXITSTATUS(status) == 0;
+
+      if (cleanExit) {
+         // If the process already exited cleanly, make sure we run epoll to dispatch any stdout/stderr sent
+         // before we tear everything down.
+         cleanlyExitedBeforeProcess.set(true);
+      }
+      else if (waitpidRc != 0) {
+         if (WIFEXITED(status)) {
+            status = WEXITSTATUS(status);
+            if (status == 127) {
+               onExit(Integer.MIN_VALUE);
+            }
+            else {
+               onExit(status);
+            }
+         }
+         else if (WIFSIGNALED(status)) {
+            onExit(WTERMSIG(status));
+         }
+
+         return false;
+      }
+
+      return true;
+   }
+
@@ -199 +234 @@ public class LinuxProcess extends BasePosixProcess
-      int count = environment.length; // This implicitly adds an extra null byte for each entry
+      int count = environment.length;
diff --git a/src/main/java/com/zaxxer/nuprocess/osx/OsxProcess.java b/src/main/java/com/zaxxer/nuprocess/osx/OsxProcess.java
index d60b017..46f48d7 100644
--- a/src/main/java/com/zaxxer/nuprocess/osx/OsxProcess.java
+++ b/src/main/java/com/zaxxer/nuprocess/osx/OsxProcess.java
@@ -63,0 +64,5 @@ class OsxProcess extends BasePosixProcess
+
+         if (!checkLaunch()) {
+            return null;
+         }
+
@@ -102,0 +108,5 @@ class OsxProcess extends BasePosixProcess
+
+         if (!checkLaunch()) {
+            return;
+         }
+
