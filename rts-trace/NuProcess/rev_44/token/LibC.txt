package
com
.
zaxxer
.
nuprocess
.
internal
;
import
com
.
sun
.
jna
.
*
;
import
com
.
sun
.
jna
.
ptr
.
IntByReference
;
import
com
.
zaxxer
.
nuprocess
.
internal
.
Constants
.
OperatingSystem
;
import
java
.
nio
.
ByteBuffer
;
import
static
com
.
zaxxer
.
nuprocess
.
internal
.
Constants
.
OS
;
@
SuppressWarnings
(
"WeakerAccess"
)
public
class
LibC
{
static
{
if
(
OS
==
OperatingSystem
.
MAC
)
{
O_NONBLOCK
=
0x0004
;
}
else
{
O_NONBLOCK
=
2048
;
}
Native
.
register
(
NativeLibrary
.
getProcess
(
)
)
;
}
public
static
native
int
pipe
(
int
[
]
fildes
)
;
public
static
native
int
posix_spawnattr_init
(
Pointer
posix_spawnattr_t
)
;
public
static
native
int
posix_spawnattr_destroy
(
Pointer
posix_spawnattr_t
)
;
public
static
native
int
posix_spawnattr_setflags
(
Pointer
posix_spawnattr_t
,
short
flags
)
;
public
static
native
int
posix_spawn_file_actions_init
(
Pointer
posix_spawn_file_actions_t
)
;
public
static
native
int
posix_spawn_file_actions_destroy
(
Pointer
posix_spawn_file_actions_t
)
;
public
static
native
int
posix_spawn_file_actions_addclose
(
Pointer
actions
,
int
filedes
)
;
public
static
native
int
posix_spawn_file_actions_adddup2
(
Pointer
actions
,
int
fildes
,
int
newfildes
)
;
public
static
native
int
posix_spawnp
(
IntByReference
restrict_pid
,
String
restrict_path
,
Pointer
file_actions
,
Pointer
restrict_attrp
,
StringArray
argv
,
Pointer
envp
)
;
public
static
native
int
fcntl
(
int
fildes
,
int
cmd
)
;
public
static
native
int
fcntl
(
int
fildes
,
int
cmd
,
long
argO
)
;
public
static
native
int
close
(
int
fildes
)
;
public
static
native
int
write
(
int
fildes
,
ByteBuffer
buf
,
int
nbyte
)
;
public
static
native
int
read
(
int
fildes
,
ByteBuffer
buf
,
int
nbyte
)
;
public
static
native
int
getpid
(
)
;
public
static
native
int
kill
(
int
pid
,
int
sig
)
;
public
static
native
int
waitpid
(
int
pid
,
IntByReference
status
,
int
options
)
;
public
static
native
Pointer
signal
(
int
signal
,
Pointer
func
)
;
public
static
native
String
getcwd
(
Pointer
buf
,
int
size
)
;
public
interface
SyscallLibrary
extends
Library
{
public
static
final
int
SYS___pthread_chdir
=
348
;
int
syscall
(
int
syscall_number
,
Object
...
args
)
;
}
public
static
SyscallLibrary
SYSCALL
=
(
SyscallLibrary
)
Native
.
loadLibrary
(
Platform
.
C_LIBRARY_NAME
,
SyscallLibrary
.
class
)
;
public
static
final
int
F_GETFL
=
3
;
public
static
final
int
F_SETFL
=
4
;
public
static
final
int
O_NONBLOCK
;
public
static
final
int
EINTR
=
4
;
public
static
final
int
ECHILD
=
10
;
public
static
final
int
WNOHANG
=
0x00000001
;
public
static
final
short
POSIX_SPAWN_START_SUSPENDED
=
0x0080
;
public
static
final
short
POSIX_SPAWN_CLOEXEC_DEFAULT
=
0x4000
;
public
static
final
int
SIGKILL
=
9
;
public
static
final
int
SIGTERM
=
15
;
public
static
final
int
SIGCONT
=
19
;
public
static
final
int
SIGUSR2
=
31
;
public
static
final
Pointer
SIG_IGN
=
Pointer
.
createConstant
(
1
)
;
public
static
int
WEXITSTATUS
(
int
status
)
{
return
(
(
(
status
)
&
0xff00
)
>
>
8
)
;
}
public
static
int
WTERMSIG
(
int
status
)
{
return
(
(
status
)
&
0x7f
)
;
}
public
static
int
WSTOPSIG
(
int
status
)
{
return
WEXITSTATUS
(
status
)
;
}
public
static
boolean
WIFEXITED
(
int
status
)
{
return
(
(
status
)
&
0x7f
)
==
0
;
}
public
static
boolean
WIFSIGNALED
(
int
status
)
{
return
(
(
(
byte
)
(
(
(
status
)
&
0x7f
)
+
1
)
>
>
1
)
>
0
)
;
}
public
static
boolean
WIFSTOPPED
(
int
status
)
{
return
WTERMSIG
(
status
)
!=
0
;
}
public
static
int
W_EXITCODE
(
int
ret
,
int
sig
)
{
return
(
(
ret
)
<
<
8
|
(
sig
)
)
;
}
public
static
int
W_STOPCODE
(
int
sig
)
{
return
(
(
sig
)
<
<
8
|
0x7f
)
;
}
public
interface
SignalFunction
extends
Callback
{
void
invoke
(
int
signal
)
;
}
}
<EOF>
