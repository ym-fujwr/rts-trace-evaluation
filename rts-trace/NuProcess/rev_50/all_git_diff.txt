diff --git a/CHANGES.md b/CHANGES.md
index 01a3dc5..d9b3819 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -1,19 +0,0 @@
-Changes in 2.0.5
-
- * Fix command line injection vulnerability (CVE-2022-39243) (#143)
-
-Changes in 2.0.4
-
- * Add `Automatic-Module-Name` to `MANIFEST.MF` to better support Java 9+ modules (#142)
-
-Changes in 2.0.3
-
- * Add handling for `EINTR` during `epoll_wait` and `ESRCH` from `kill` to prevent zombie processes (#125, #131)
- * Remove static `EpollEvent` queue to avoid blocking under heavy load, which can lead to leaking zombie processes if a blocked thread is interrupted (#138)
-
-Changes in 2.0.2
-
- * Ensure pipes are closed after failing to start a process on Linux, to prevent leaking descriptors (#120)
- * Reduce pipe buffer size on Windows to increase process throughput to `stdout` and `stderr` (#118)
- * Update JNA dependency to v5.8.0 to pick up support for the Apple M1 (#123)
-
@@ -22,2 +3,2 @@ Changes in 2.0.1
- * Fix race condition between the `onStdinReady()` and `userWantsWrite()` methods that causes the state to
-   become incorrect, resulting in failure to continue processing wanted `stdin` writes (#113)
+ * Fix race condition between the onStdinReady() and userWantsWrite() methods that causes the state to
+   become incorrect, resulting in failure to continue processing wanted stdin writes
@@ -27,0 +9 @@ Changes in 2.0.0
+
@@ -28,0 +11 @@ Changes in 2.0.0
+
@@ -34 +17 @@ Changes in 1.2.6
-   a wide variety of JVMs. (#107)
+   a wide variety of JVMs.
@@ -38,2 +21,3 @@ Changes in 1.2.5
- * Handle `SystemRoot` case-insensitively (Windows) (#103).
- * Compatibility changes for JNA 5.2.0 (#99).
+ * Handle SystemRoot case-insensitively (Windows).
+ 
+ * Comptibility changes for JNA 5.2.0.
@@ -43,2 +27,3 @@ Changes in 1.2.4
- * Fix structure alignment (`ALIGN_GNUC`) on various platforms (#94).
- * Add support for JDK 10/11. (#92)
+ * Fix structure alignment (ALIGN_GNUC) on various platforms.
+
+ * Add support for JDK 10/11.
@@ -48 +33 @@ Changes in 1.2.3
- * Resolve launch issue on Linux/macOS w/Zulu JVM.
+ * Resolve launch issue on Linux/MacOS X w/Zulu JVM.
@@ -56 +41 @@ Changes in 1.2.1
-* On macOS, continue to use `posix_spawnp` directly, `POSIX_SPAWN_START_SUSPENDED` solves a lot of potential race conditions that we have to contend with on Linux.
+* On OS X, continue to use posix_spawnp directly, POSIX_SPAWN_START_SUSPENDED solves a lot of potential race conditions that we have to contend with on Linux.
@@ -59,2 +44 @@ Changes in 1.2.0
-
- * Spawn processes on Linux and macOS using JVM internal method `Java_java_lang_UNIXProcess_forkAndExec`.
+ * Spawn processes on Linux and MacOS X using JVM internal method Java_java_lang_UNIXProcess_forkAndExec.
@@ -64,3 +48,5 @@ Changes in 1.1.3
- * Add constructor with `Pointer` to `LibKevent.Kevent` (#82) that reduces reflection code executed in JNA.
- * Change to Linux `epoll` implementation that massively decreases the amount of memory used.
- * Optimize `epoll_wait` loop to avoid memory churn. (#80)
+ * Add constructor with Pointer to LibKevent.Kevent (#82) that reduces reflection code executed in JNA.
+
+ * Change to Linux epoll implementation that massively decreases the amount of memory used.
+ 
+ * Optimize epoll_wait loop to avoid memory churn. (#80)
@@ -70 +56 @@ Changes in 1.1.2
- * Fix issue on macOS where pipes would leak after many calls to `closeStdin`
+ * Fix issue on Mac OS X where pipes would leak after many calls to closeStdin
@@ -74 +60 @@ Changes in 1.1.1
- * Fixed issue where calling `writeStdin` with a buffer larger than 65kb would hang.
+ * Fixed issue where calling writeStdin with a buffer larger than 65kb would hang.
@@ -78,3 +64,5 @@ Changes in 1.1.0
- * Expose new `NuProcess.getPID()` method on all platforms.
- * Fix wrong position and limit value on `inBuffer` caused by incorrect `inBuffer` clear.
- * Fix source of memory leak and `DirectWriteTest` failure on macOS; clear `wantsWrite` 
+ * Expose new NuProcess.getPID() method on all platforms.
+
+ * Fix wrong position and limit value on inBuffer caused by incorrect inBuffer clear.
+
+ * Fix source of memory leak and DirectWriteTest failure on MacOS X; clear wantsWrite 
@@ -82 +70,2 @@ Changes in 1.1.0
- * Remove `System.exit()` call from unit test.
+
+ * Remove System.exit() call from unit test.
@@ -86,0 +76 @@ Changes in 1.0.4
+
@@ -88,3 +78,5 @@ Changes in 1.0.4
- * Introduce 'force' parameter to `NuProcess.closeStdin()`, and enqueue special
-   tombstone marker into the `pendingWrites` queue for non-forced closes.
- * Remove use of `sun.misc.Unsafe`.
+
+ * Introduce 'force' parameter to NuProcess.closeStdin(), and enqueue special
+   tombstone marker into the pendingWrites queue for non-forced closes.
+
+ * Remove use of sun.misc.Unsafe.
@@ -94 +86,2 @@ Changes in 1.0.3
- * Remove dependency on `jna-platform`.
+ * Remove dependency on jna-platform.
+
@@ -95,0 +89 @@ Changes in 1.0.3
+
@@ -96,0 +91 @@ Changes in 1.0.3
+
@@ -101,2 +96,3 @@ Changes in 1.0.2
- * Process `cwd` support for Mac, Linux, and Win32.
- * Remove `ThreadLocal` usage for macOS.
+ * Process cwd support for Mac, Linux, and Win32.
+
+ * Remove ThreadLocal usage for MacOS X.
@@ -106,2 +102,3 @@ Changes in 1.0.1
- * Performance improvements for macOS `kqueue` / `kevent`.
- * Fix issue where `stdout` and `stderr` are empty for quick exiting processes.
+ * Performance improvements for OS X kqueue / kevent.
+
+ * Fix issue where stdout and stderr are empty for quick exiting processes.
diff --git a/README.md b/README.md
index 878e661..6d37244 100644
--- a/README.md
+++ b/README.md
@@ -30 +30 @@ Java process and the spawned processes:
-        <version>2.0.5</version>
+        <version>2.0.2</version>
diff --git a/pom.xml b/pom.xml
index 1cdff0f..fca7613 100644
--- a/pom.xml
+++ b/pom.xml
@@ -7 +7 @@
-    <version>2.0.6-SNAPSHOT</version>
+    <version>2.0.5-SNAPSHOT</version>
diff --git a/src/main/java/com/zaxxer/nuprocess/NuProcessBuilder.java b/src/main/java/com/zaxxer/nuprocess/NuProcessBuilder.java
index ac18538..890cfc1 100644
--- a/src/main/java/com/zaxxer/nuprocess/NuProcessBuilder.java
+++ b/src/main/java/com/zaxxer/nuprocess/NuProcessBuilder.java
@@ -293,6 +292,0 @@ public class NuProcessBuilder
-   private void ensureNoNullCharacters(String environment) {
-      if (environment.indexOf('\u0000') >= 0) {
-         throw new IllegalArgumentException("Environment may not contain null characters");
-      }
-   }
-
@@ -304,5 +298 @@ public class NuProcessBuilder
-         String key = entrySet.getKey();
-         String value = entrySet.getValue();
-         ensureNoNullCharacters(key);
-         ensureNoNullCharacters(value);
-         env[i++] = key + "=" + value;
+         env[i++] = entrySet.getKey() + "=" + entrySet.getValue();
diff --git a/src/test/java/com/zaxxer/nuprocess/RunTest.java b/src/test/java/com/zaxxer/nuprocess/RunTest.java
index 8953b45..5207ddd 100644
--- a/src/test/java/com/zaxxer/nuprocess/RunTest.java
+++ b/src/test/java/com/zaxxer/nuprocess/RunTest.java
@@ -31 +30,0 @@ import java.nio.file.Paths;
-import java.util.Collections;
@@ -346,30 +344,0 @@ public class RunTest
-   @Test(expected = IllegalArgumentException.class)
-   public void nullEnvironmentKeyViaConstructor() {
-      NuProcessBuilder pb = new NuProcessBuilder(Collections.singletonList(command),
-              Collections.singletonMap("FOO=foo\0BAD=bad", ""));
-      pb.setProcessListener(new NullProcessHandler());
-      pb.run();
-   }
-
-   @Test(expected = IllegalArgumentException.class)
-   public void nullEnvironmentValueViaConstructor() {
-      NuProcessBuilder pb = new NuProcessBuilder(Collections.singletonList(command),
-              Collections.singletonMap("FOO", "foo\0BAD=bad"));
-      pb.setProcessListener(new NullProcessHandler());
-      pb.run();
-   }
-
-   @Test(expected = IllegalArgumentException.class)
-   public void nullEnvironmentKeyViaEnvironmentMutation() {
-      NuProcessBuilder pb = new NuProcessBuilder(new NullProcessHandler(), command);
-      pb.environment().put("FOO=foo\0BAD=bad", "");
-      pb.start();
-   }
-
-   @Test(expected = IllegalArgumentException.class)
-   public void nullEnvironmentValueViaEnvironmentMutation() {
-      NuProcessBuilder pb = new NuProcessBuilder(new NullProcessHandler(), command);
-      pb.environment().put("FOO", "foo\0BAD=bad");
-      pb.start();
-   }
-
