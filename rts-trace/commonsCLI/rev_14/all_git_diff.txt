diff --git a/pom.xml b/pom.xml
index 82361a24..a58928d9 100644
--- a/pom.xml
+++ b/pom.xml
@@ -185,5 +184,0 @@
-    <dependency>
-      <groupId>org.junit.jupiter</groupId>
-      <artifactId>junit-jupiter-api</artifactId>
-      <scope>test</scope>
-    </dependency>
@@ -224 +219 @@
-    <spotbugs.plugin.version>4.7.3.0</spotbugs.plugin.version>
+    <spotbugs.plugin.version>4.7.2.1</spotbugs.plugin.version>
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index cd7402f1..a097dc7c 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -58 +58 @@
-        Bump spotbugs-maven-plugin from 4.5.3.0 to 4.7.3.0 #98, #108, #115, #117, #126, #145.
+        Bump spotbugs-maven-plugin from 4.5.3.0 to 4.7.2.0 #98, #108, #115, #117, #126.
diff --git a/src/test/java/org/apache/commons/cli/TypeHandlerTest.java b/src/test/java/org/apache/commons/cli/TypeHandlerTest.java
index de9e89c6..03fd8711 100644
--- a/src/test/java/org/apache/commons/cli/TypeHandlerTest.java
+++ b/src/test/java/org/apache/commons/cli/TypeHandlerTest.java
@@ -20 +19,0 @@ package org.apache.commons.cli;
-import static org.junit.jupiter.api.Assertions.assertThrows;
@@ -47,4 +46,3 @@ public class TypeHandlerTest {
-    @Test
-    public void testCreateValueClass_notFound() {
-        assertThrows(ParseException.class, () ->
-                TypeHandler.createValue("what ever", PatternOptionBuilder.CLASS_VALUE));
+    @Test(expected = ParseException.class)
+    public void testCreateValueClass_notFound() throws Exception {
+        TypeHandler.createValue("what ever", PatternOptionBuilder.CLASS_VALUE);
@@ -53,4 +51,3 @@ public class TypeHandlerTest {
-    @Test
-    public void testCreateValueDate() {
-        assertThrows(UnsupportedOperationException.class, () ->
-                TypeHandler.createValue("what ever", PatternOptionBuilder.DATE_VALUE));
+    @Test(expected = UnsupportedOperationException.class)
+    public void testCreateValueDate() throws Exception {
+        TypeHandler.createValue("what ever", PatternOptionBuilder.DATE_VALUE);
@@ -67,4 +64,3 @@ public class TypeHandlerTest {
-    @Test
-    public void testCreateValueExistingFile_nonExistingFile() {
-        assertThrows(ParseException.class, () ->
-                TypeHandler.createValue("non-existing.file", PatternOptionBuilder.EXISTING_FILE_VALUE));
+    @Test(expected = ParseException.class)
+    public void testCreateValueExistingFile_nonExistingFile() throws Exception {
+        TypeHandler.createValue("non-existing.file", PatternOptionBuilder.EXISTING_FILE_VALUE);
@@ -79,4 +75,3 @@ public class TypeHandlerTest {
-    @Test
-    public void testCreateValueFiles() {
-        assertThrows(UnsupportedOperationException.class, () ->
-                TypeHandler.createValue("some.files", PatternOptionBuilder.FILES_VALUE));
+    @Test(expected = UnsupportedOperationException.class)
+    public void testCreateValueFiles() throws Exception {
+        TypeHandler.createValue("some.files", PatternOptionBuilder.FILES_VALUE);
@@ -85,4 +80,3 @@ public class TypeHandlerTest {
-    @Test
-    public void testCreateValueInteger_failure() {
-        assertThrows(ParseException.class, () ->
-                TypeHandler.createValue("just-a-string", Integer.class));
+    @Test(expected = ParseException.class)
+    public void testCreateValueInteger_failure() throws Exception {
+        TypeHandler.createValue("just-a-string", Integer.class);
@@ -101,4 +95,3 @@ public class TypeHandlerTest {
-    @Test
-    public void testCreateValueNumber_noNumber() {
-        assertThrows(ParseException.class, () ->
-                TypeHandler.createValue("not a number", PatternOptionBuilder.NUMBER_VALUE));
+    @Test(expected = ParseException.class)
+    public void testCreateValueNumber_noNumber() throws Exception {
+        TypeHandler.createValue("not a number", PatternOptionBuilder.NUMBER_VALUE);
@@ -113,4 +106,3 @@ public class TypeHandlerTest {
-    @Test
-    public void testCreateValueObject_notInstantiableClass() {
-        assertThrows(ParseException.class, () ->
-                TypeHandler.createValue(NotInstantiable.class.getName(), PatternOptionBuilder.OBJECT_VALUE));
+    @Test(expected = ParseException.class)
+    public void testCreateValueObject_notInstantiableClass() throws Exception {
+        TypeHandler.createValue(NotInstantiable.class.getName(), PatternOptionBuilder.OBJECT_VALUE);
@@ -119,4 +111,3 @@ public class TypeHandlerTest {
-    @Test
-    public void testCreateValueObject_unknownClass() {
-        assertThrows(ParseException.class, () ->
-                TypeHandler.createValue("unknown", PatternOptionBuilder.OBJECT_VALUE));
+    @Test(expected = ParseException.class)
+    public void testCreateValueObject_unknownClass() throws Exception {
+        TypeHandler.createValue("unknown", PatternOptionBuilder.OBJECT_VALUE);
@@ -137,4 +128,3 @@ public class TypeHandlerTest {
-    @Test
-    public void testCreateValueURL_malformed() {
-        assertThrows(ParseException.class, () ->
-                TypeHandler.createValue("malformed-url", PatternOptionBuilder.URL_VALUE));
+    @Test(expected = ParseException.class)
+    public void testCreateValueURL_malformed() throws Exception {
+        TypeHandler.createValue("malformed-url", PatternOptionBuilder.URL_VALUE);
@@ -142 +131,0 @@ public class TypeHandlerTest {
-
