package
org
.
apache
.
commons
.
cli
;
import
static
org
.
junit
.
Assert
.
assertEquals
;
import
static
org
.
junit
.
Assert
.
assertFalse
;
import
static
org
.
junit
.
Assert
.
assertNull
;
import
static
org
.
junit
.
Assert
.
assertTrue
;
import
static
org
.
junit
.
Assert
.
fail
;
import
org
.
junit
.
Test
;
@
SuppressWarnings
(
"deprecation"
)
public
class
OptionBuilderTest
{
@
Test
public
void
testBaseOptionCharOpt
(
)
{
final
Option
base
=
OptionBuilder
.
withDescription
(
"option description"
)
.
create
(
'o'
)
;
assertEquals
(
"o"
,
base
.
getOpt
(
)
)
;
assertEquals
(
"option description"
,
base
.
getDescription
(
)
)
;
assertFalse
(
base
.
hasArg
(
)
)
;
}
@
Test
public
void
testBaseOptionStringOpt
(
)
{
final
Option
base
=
OptionBuilder
.
withDescription
(
"option description"
)
.
create
(
"o"
)
;
assertEquals
(
"o"
,
base
.
getOpt
(
)
)
;
assertEquals
(
"option description"
,
base
.
getDescription
(
)
)
;
assertFalse
(
base
.
hasArg
(
)
)
;
}
@
Test
public
void
testBuilderIsResettedAlways
(
)
{
try
{
OptionBuilder
.
withDescription
(
"JUnit"
)
.
create
(
'"'
)
;
fail
(
"IllegalArgumentException expected"
)
;
}
catch
(
final
IllegalArgumentException
e
)
{
}
assertNull
(
"we inherited a description"
,
OptionBuilder
.
create
(
'x'
)
.
getDescription
(
)
)
;
try
{
OptionBuilder
.
withDescription
(
"JUnit"
)
.
create
(
)
;
fail
(
"IllegalArgumentException expected"
)
;
}
catch
(
final
IllegalArgumentException
e
)
{
}
assertNull
(
"we inherited a description"
,
OptionBuilder
.
create
(
'x'
)
.
getDescription
(
)
)
;
}
@
Test
public
void
testCompleteOption
(
)
{
final
Option
simple
=
OptionBuilder
.
withLongOpt
(
"simple option"
)
.
hasArg
(
)
.
isRequired
(
)
.
hasArgs
(
)
.
withType
(
Float
.
class
)
.
withDescription
(
"this is a simple option"
)
.
create
(
's'
)
;
assertEquals
(
"s"
,
simple
.
getOpt
(
)
)
;
assertEquals
(
"simple option"
,
simple
.
getLongOpt
(
)
)
;
assertEquals
(
"this is a simple option"
,
simple
.
getDescription
(
)
)
;
assertEquals
(
simple
.
getType
(
)
,
Float
.
class
)
;
assertTrue
(
simple
.
hasArg
(
)
)
;
assertTrue
(
simple
.
isRequired
(
)
)
;
assertTrue
(
simple
.
hasArgs
(
)
)
;
}
@
Test
public
void
testCreateIncompleteOption
(
)
{
try
{
OptionBuilder
.
hasArg
(
)
.
create
(
)
;
fail
(
"Incomplete option should be rejected"
)
;
}
catch
(
final
IllegalArgumentException
e
)
{
OptionBuilder
.
create
(
"opt"
)
;
}
}
@
Test
public
void
testIllegalOptions
(
)
{
try
{
OptionBuilder
.
withDescription
(
"option description"
)
.
create
(
'"'
)
;
fail
(
"IllegalArgumentException not caught"
)
;
}
catch
(
final
IllegalArgumentException
exp
)
{
}
try
{
OptionBuilder
.
create
(
"opt`"
)
;
fail
(
"IllegalArgumentException not caught"
)
;
}
catch
(
final
IllegalArgumentException
exp
)
{
}
try
{
OptionBuilder
.
create
(
"opt"
)
;
}
catch
(
final
IllegalArgumentException
exp
)
{
fail
(
"IllegalArgumentException caught"
)
;
}
}
@
Test
public
void
testOptionArgNumbers
(
)
{
final
Option
opt
=
OptionBuilder
.
withDescription
(
"option description"
)
.
hasArgs
(
2
)
.
create
(
'o'
)
;
assertEquals
(
2
,
opt
.
getArgs
(
)
)
;
}
@
Test
public
void
testSpecialOptChars
(
)
throws
Exception
{
final
Option
opt1
=
OptionBuilder
.
withDescription
(
"help options"
)
.
create
(
'?'
)
;
assertEquals
(
"?"
,
opt1
.
getOpt
(
)
)
;
final
Option
opt2
=
OptionBuilder
.
withDescription
(
"read from stdin"
)
.
create
(
'@'
)
;
assertEquals
(
"@"
,
opt2
.
getOpt
(
)
)
;
try
{
OptionBuilder
.
create
(
' '
)
;
fail
(
"IllegalArgumentException not caught"
)
;
}
catch
(
final
IllegalArgumentException
e
)
{
}
}
@
Test
public
void
testTwoCompleteOptions
(
)
{
Option
simple
=
OptionBuilder
.
withLongOpt
(
"simple option"
)
.
hasArg
(
)
.
isRequired
(
)
.
hasArgs
(
)
.
withType
(
Float
.
class
)
.
withDescription
(
"this is a simple option"
)
.
create
(
's'
)
;
assertEquals
(
"s"
,
simple
.
getOpt
(
)
)
;
assertEquals
(
"simple option"
,
simple
.
getLongOpt
(
)
)
;
assertEquals
(
"this is a simple option"
,
simple
.
getDescription
(
)
)
;
assertEquals
(
simple
.
getType
(
)
,
Float
.
class
)
;
assertTrue
(
simple
.
hasArg
(
)
)
;
assertTrue
(
simple
.
isRequired
(
)
)
;
assertTrue
(
simple
.
hasArgs
(
)
)
;
simple
=
OptionBuilder
.
withLongOpt
(
"dimple option"
)
.
hasArg
(
)
.
withDescription
(
"this is a dimple option"
)
.
create
(
'd'
)
;
assertEquals
(
"d"
,
simple
.
getOpt
(
)
)
;
assertEquals
(
"dimple option"
,
simple
.
getLongOpt
(
)
)
;
assertEquals
(
"this is a dimple option"
,
simple
.
getDescription
(
)
)
;
assertEquals
(
String
.
class
,
simple
.
getType
(
)
)
;
assertTrue
(
simple
.
hasArg
(
)
)
;
assertFalse
(
simple
.
isRequired
(
)
)
;
assertFalse
(
simple
.
hasArgs
(
)
)
;
}
}
<EOF>
