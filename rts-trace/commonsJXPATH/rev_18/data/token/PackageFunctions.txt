package
org
.
apache
.
commons
.
jxpath
;
import
java
.
lang
.
reflect
.
Constructor
;
import
java
.
lang
.
reflect
.
Method
;
import
java
.
util
.
Collection
;
import
java
.
util
.
Collections
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
Set
;
import
org
.
apache
.
commons
.
jxpath
.
functions
.
ConstructorFunction
;
import
org
.
apache
.
commons
.
jxpath
.
functions
.
MethodFunction
;
import
org
.
apache
.
commons
.
jxpath
.
util
.
ClassLoaderUtil
;
import
org
.
apache
.
commons
.
jxpath
.
util
.
MethodLookupUtils
;
import
org
.
apache
.
commons
.
jxpath
.
util
.
TypeUtils
;
public
class
PackageFunctions
implements
Functions
{
private
String
classPrefix
;
private
String
namespace
;
private
static
final
Object
[
]
EMPTY_ARRAY
=
new
Object
[
0
]
;
public
PackageFunctions
(
String
classPrefix
,
String
namespace
)
{
this
.
classPrefix
=
classPrefix
;
this
.
namespace
=
namespace
;
}
public
Set
getUsedNamespaces
(
)
{
return
Collections
.
singleton
(
namespace
)
;
}
public
Function
getFunction
(
String
namespace
,
String
name
,
Object
[
]
parameters
)
{
if
(
(
namespace
==
null
&&
this
.
namespace
!=
null
)
||
(
namespace
!=
null
&&
!
namespace
.
equals
(
this
.
namespace
)
)
)
{
return
null
;
}
if
(
parameters
==
null
)
{
parameters
=
EMPTY_ARRAY
;
}
if
(
parameters
.
length
>=
1
)
{
Object
target
=
TypeUtils
.
convert
(
parameters
[
0
]
,
Object
.
class
)
;
if
(
target
!=
null
)
{
Method
method
=
MethodLookupUtils
.
lookupMethod
(
target
.
getClass
(
)
,
name
,
parameters
)
;
if
(
method
!=
null
)
{
return
new
MethodFunction
(
method
)
;
}
if
(
target
instanceof
NodeSet
)
{
target
=
(
(
NodeSet
)
target
)
.
getPointers
(
)
;
}
method
=
MethodLookupUtils
.
lookupMethod
(
target
.
getClass
(
)
,
name
,
parameters
)
;
if
(
method
!=
null
)
{
return
new
MethodFunction
(
method
)
;
}
if
(
target
instanceof
Collection
)
{
Iterator
iter
=
(
(
Collection
)
target
)
.
iterator
(
)
;
if
(
iter
.
hasNext
(
)
)
{
target
=
iter
.
next
(
)
;
if
(
target
instanceof
Pointer
)
{
target
=
(
(
Pointer
)
target
)
.
getValue
(
)
;
}
}
else
{
target
=
null
;
}
}
}
if
(
target
!=
null
)
{
Method
method
=
MethodLookupUtils
.
lookupMethod
(
target
.
getClass
(
)
,
name
,
parameters
)
;
if
(
method
!=
null
)
{
return
new
MethodFunction
(
method
)
;
}
}
}
String
fullName
=
classPrefix
+
name
;
int
inx
=
fullName
.
lastIndexOf
(
'.'
)
;
if
(
inx
==
-
1
)
{
return
null
;
}
String
className
=
fullName
.
substring
(
0
,
inx
)
;
String
methodName
=
fullName
.
substring
(
inx
+
1
)
;
Class
functionClass
;
try
{
functionClass
=
ClassLoaderUtil
.
getClass
(
className
,
true
)
;
}
catch
(
ClassNotFoundException
ex
)
{
throw
new
JXPathException
(
"Cannot invoke extension function "
+
(
namespace
!=
null
?
namespace
+
":"
+
name
:
name
)
,
ex
)
;
}
if
(
methodName
.
equals
(
"new"
)
)
{
Constructor
constructor
=
MethodLookupUtils
.
lookupConstructor
(
functionClass
,
parameters
)
;
if
(
constructor
!=
null
)
{
return
new
ConstructorFunction
(
constructor
)
;
}
}
else
{
Method
method
=
MethodLookupUtils
.
lookupStaticMethod
(
functionClass
,
methodName
,
parameters
)
;
if
(
method
!=
null
)
{
return
new
MethodFunction
(
method
)
;
}
}
return
null
;
}
}
<EOF>
