diff --git a/src/main/java/org/apache/commons/jxpath/AbstractFactory.java b/src/main/java/org/apache/commons/jxpath/AbstractFactory.java
index fbff7eb6..08504256 100644
--- a/src/main/java/org/apache/commons/jxpath/AbstractFactory.java
+++ b/src/main/java/org/apache/commons/jxpath/AbstractFactory.java
@@ -52,2 +52,2 @@ public abstract class AbstractFactory {
-    public boolean createObject(final JXPathContext context, final Pointer pointer,
-                                final Object parent, final String name, final int index) {
+    public boolean createObject(JXPathContext context, Pointer pointer,
+                                Object parent, String name, int index) {
@@ -66 +66 @@ public abstract class AbstractFactory {
-    public boolean declareVariable(final JXPathContext context, final String name) {
+    public boolean declareVariable(JXPathContext context, String name) {
diff --git a/src/main/java/org/apache/commons/jxpath/BasicNodeSet.java b/src/main/java/org/apache/commons/jxpath/BasicNodeSet.java
index aa1a293f..2f70f4eb 100644
--- a/src/main/java/org/apache/commons/jxpath/BasicNodeSet.java
+++ b/src/main/java/org/apache/commons/jxpath/BasicNodeSet.java
@@ -28 +28 @@ public class BasicNodeSet implements NodeSet {
-    private final List pointers = new ArrayList();
+    private List pointers = new ArrayList();
@@ -37 +37 @@ public class BasicNodeSet implements NodeSet {
-    public void add(final Pointer pointer) {
+    public void add(Pointer pointer) {
@@ -47 +47 @@ public class BasicNodeSet implements NodeSet {
-    public void add(final NodeSet nodeSet) {
+    public void add(NodeSet nodeSet) {
@@ -57 +57 @@ public class BasicNodeSet implements NodeSet {
-    public void remove(final Pointer pointer) {
+    public void remove(Pointer pointer) {
@@ -63 +62,0 @@ public class BasicNodeSet implements NodeSet {
-    @Override
@@ -71 +69,0 @@ public class BasicNodeSet implements NodeSet {
-    @Override
@@ -76 +74 @@ public class BasicNodeSet implements NodeSet {
-                final Pointer pointer = (Pointer) pointers.get(i);
+                Pointer pointer = (Pointer) pointers.get(i);
@@ -84 +81,0 @@ public class BasicNodeSet implements NodeSet {
-    @Override
@@ -89 +86 @@ public class BasicNodeSet implements NodeSet {
-                final Pointer pointer = (Pointer) pointers.get(i);
+                Pointer pointer = (Pointer) pointers.get(i);
@@ -97 +93,0 @@ public class BasicNodeSet implements NodeSet {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/BasicVariables.java b/src/main/java/org/apache/commons/jxpath/BasicVariables.java
index 74e8ecdf..6b4b5adc 100644
--- a/src/main/java/org/apache/commons/jxpath/BasicVariables.java
+++ b/src/main/java/org/apache/commons/jxpath/BasicVariables.java
@@ -30 +30 @@ public class BasicVariables implements Variables {
-    private final HashMap vars = new HashMap();
+    private HashMap vars = new HashMap();
@@ -40,2 +40 @@ public class BasicVariables implements Variables {
-    @Override
-    public boolean isDeclaredVariable(final String varName) {
+    public boolean isDeclaredVariable(String varName) {
@@ -53,2 +52 @@ public class BasicVariables implements Variables {
-    @Override
-    public Object getVariable(final String varName) {
+    public Object getVariable(String varName) {
@@ -72,2 +70 @@ public class BasicVariables implements Variables {
-    @Override
-    public void declareVariable(final String varName, final Object value) {
+    public void declareVariable(String varName, Object value) {
@@ -82,2 +79 @@ public class BasicVariables implements Variables {
-    @Override
-    public void undeclareVariable(final String varName) {
+    public void undeclareVariable(String varName) {
@@ -87 +82,0 @@ public class BasicVariables implements Variables {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ClassFunctions.java b/src/main/java/org/apache/commons/jxpath/ClassFunctions.java
index 9e77b595..0c69d13e 100644
--- a/src/main/java/org/apache/commons/jxpath/ClassFunctions.java
+++ b/src/main/java/org/apache/commons/jxpath/ClassFunctions.java
@@ -52 +52 @@ public class ClassFunctions implements Functions {
-    private static final Object[] EMPTY_ARRAY = {};
+    private static final Object[] EMPTY_ARRAY = new Object[0];
@@ -54,2 +54,2 @@ public class ClassFunctions implements Functions {
-    private final Class functionClass;
-    private final String namespace;
+    private Class functionClass;
+    private String namespace;
@@ -62 +62 @@ public class ClassFunctions implements Functions {
-    public ClassFunctions(final Class functionClass, final String namespace) {
+    public ClassFunctions(Class functionClass, String namespace) {
@@ -72 +71,0 @@ public class ClassFunctions implements Functions {
-    @Override
@@ -89 +87,0 @@ public class ClassFunctions implements Functions {
-    @Override
@@ -91,2 +89,2 @@ public class ClassFunctions implements Functions {
-        final String namespace,
-        final String name,
+        String namespace,
+        String name,
@@ -108 +106 @@ public class ClassFunctions implements Functions {
-            final Constructor constructor =
+            Constructor constructor =
diff --git a/src/main/java/org/apache/commons/jxpath/FunctionLibrary.java b/src/main/java/org/apache/commons/jxpath/FunctionLibrary.java
index dfd4e75c..a87a778b 100644
--- a/src/main/java/org/apache/commons/jxpath/FunctionLibrary.java
+++ b/src/main/java/org/apache/commons/jxpath/FunctionLibrary.java
@@ -40 +40 @@ public class FunctionLibrary implements Functions {
-    public void addFunctions(final Functions functions) {
+    public void addFunctions(Functions functions) {
@@ -51 +51 @@ public class FunctionLibrary implements Functions {
-    public void removeFunctions(final Functions functions) {
+    public void removeFunctions(Functions functions) {
@@ -63 +62,0 @@ public class FunctionLibrary implements Functions {
-    @Override
@@ -76,4 +75,3 @@ public class FunctionLibrary implements Functions {
-    @Override
-    public Function getFunction(final String namespace, final String name,
-            final Object[] parameters) {
-        final Object candidates = functionCache().get(namespace);
+    public Function getFunction(String namespace, String name,
+            Object[] parameters) {
+        Object candidates = functionCache().get(namespace);
@@ -87,2 +85,2 @@ public class FunctionLibrary implements Functions {
-            final List list = (List) candidates;
-            final int count = list.size();
+            List list = (List) candidates;
+            int count = list.size();
@@ -90 +88 @@ public class FunctionLibrary implements Functions {
-                final Function function =
+                Function function =
@@ -110 +108 @@ public class FunctionLibrary implements Functions {
-            final int count = allFunctions.size();
+            int count = allFunctions.size();
@@ -112,5 +110,5 @@ public class FunctionLibrary implements Functions {
-                final Functions funcs = (Functions) allFunctions.get(i);
-                final Set namespaces = funcs.getUsedNamespaces();
-                for (final Iterator it = namespaces.iterator(); it.hasNext();) {
-                    final String ns = (String) it.next();
-                    final Object candidates = byNamespace.get(ns);
+                Functions funcs = (Functions) allFunctions.get(i);
+                Set namespaces = funcs.getUsedNamespaces();
+                for (Iterator it = namespaces.iterator(); it.hasNext();) {
+                    String ns = (String) it.next();
+                    Object candidates = byNamespace.get(ns);
@@ -121 +119 @@ public class FunctionLibrary implements Functions {
-                        final List lst = new ArrayList();
+                        List lst = new ArrayList();
diff --git a/src/main/java/org/apache/commons/jxpath/JXPathAbstractFactoryException.java b/src/main/java/org/apache/commons/jxpath/JXPathAbstractFactoryException.java
index dadb6d1d..93fcbbb5 100644
--- a/src/main/java/org/apache/commons/jxpath/JXPathAbstractFactoryException.java
+++ b/src/main/java/org/apache/commons/jxpath/JXPathAbstractFactoryException.java
@@ -32 +32 @@ public class JXPathAbstractFactoryException extends JXPathException {
-    public JXPathAbstractFactoryException(final String message) {
+    public JXPathAbstractFactoryException(String message) {
diff --git a/src/main/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java b/src/main/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java
index 00f6d8a4..1823e041 100644
--- a/src/main/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java
+++ b/src/main/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java
@@ -39,2 +39 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-        @Override
-        public int compare(final Object left, final Object right) {
+        public int compare(Object left, Object right) {
@@ -47 +46 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-    private final Class clazz;
+    private Class clazz;
@@ -56 +55 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-    public JXPathBasicBeanInfo(final Class clazz) {
+    public JXPathBasicBeanInfo(Class clazz) {
@@ -66 +65 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-    public JXPathBasicBeanInfo(final Class clazz, final boolean atomic) {
+    public JXPathBasicBeanInfo(Class clazz, boolean atomic) {
@@ -76 +75 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-    public JXPathBasicBeanInfo(final Class clazz, final Class dynamicPropertyHandlerClass) {
+    public JXPathBasicBeanInfo(Class clazz, Class dynamicPropertyHandlerClass) {
@@ -87 +85,0 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-    @Override
@@ -96 +93,0 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-    @Override
@@ -101 +97,0 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-    @Override
@@ -116,2 +112,2 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-                    final PropertyDescriptor[] pds = bi.getPropertyDescriptors();
-                    final PropertyDescriptor[] descriptors = new PropertyDescriptor[pds.length];
+                    PropertyDescriptor[] pds = bi.getPropertyDescriptors();
+                    PropertyDescriptor[] descriptors = new PropertyDescriptor[pds.length];
@@ -122 +118 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-                catch (final IntrospectionException ex) {
+                catch (IntrospectionException ex) {
@@ -131 +127 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-        final PropertyDescriptor[] result = new PropertyDescriptor[propertyDescriptors.length];
+        PropertyDescriptor[] result = new PropertyDescriptor[propertyDescriptors.length];
@@ -136,2 +132 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-    @Override
-    public synchronized PropertyDescriptor getPropertyDescriptor(final String propertyName) {
+    public synchronized PropertyDescriptor getPropertyDescriptor(String propertyName) {
@@ -140,3 +135,3 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-            final PropertyDescriptor[] pds = getPropertyDescriptors();
-            for (final PropertyDescriptor pd : pds) {
-                propertyDescriptorMap.put(pd.getName(), pd);
+            PropertyDescriptor[] pds = getPropertyDescriptors();
+            for (int i = 0; i < pds.length; i++) {
+                propertyDescriptorMap.put(pds[i].getName(), pds[i]);
@@ -153 +147,0 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-    @Override
@@ -158 +151,0 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-    @Override
@@ -160 +153 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-        final StringBuffer buffer = new StringBuffer();
+        StringBuffer buffer = new StringBuffer();
@@ -170,2 +163,2 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-        final PropertyDescriptor[] jpds = getPropertyDescriptors();
-        for (final PropertyDescriptor jpd : jpds) {
+        PropertyDescriptor[] jpds = getPropertyDescriptors();
+        for (int i = 0; i < jpds.length; i++) {
@@ -173 +166 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-            buffer.append(jpd.getPropertyType());
+            buffer.append(jpds[i].getPropertyType());
@@ -175 +168 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-            buffer.append(jpd.getName());
+            buffer.append(jpds[i].getName());
diff --git a/src/main/java/org/apache/commons/jxpath/JXPathContext.java b/src/main/java/org/apache/commons/jxpath/JXPathContext.java
index c4aac2c6..fe22e281 100644
--- a/src/main/java/org/apache/commons/jxpath/JXPathContext.java
+++ b/src/main/java/org/apache/commons/jxpath/JXPathContext.java
@@ -377 +377 @@ import org.apache.commons.jxpath.util.KeyManagerUtils;
- * class that retrieve a pointer will generally behave in the following way,
+ * class that retrieve a pointer will generally behave in the following way, 
@@ -379 +379 @@ import org.apache.commons.jxpath.util.KeyManagerUtils;
- *
+ * 
@@ -385 +385 @@ import org.apache.commons.jxpath.util.KeyManagerUtils;
- *          express the absence: might be a Java <code>null</code> or a
+ *          express the absence: might be a Java <code>null</code> or a 
@@ -434 +434 @@ public abstract class JXPathContext {
-    public static JXPathContext newContext(final Object contextBean) {
+    public static JXPathContext newContext(Object contextBean) {
@@ -447,2 +447,2 @@ public abstract class JXPathContext {
-            final JXPathContext parentContext,
-            final Object contextBean) {
+            JXPathContext parentContext,
+            Object contextBean) {
@@ -469 +469 @@ public abstract class JXPathContext {
-    protected JXPathContext(final JXPathContext parentContext, final Object contextBean) {
+    protected JXPathContext(JXPathContext parentContext, Object contextBean) {
@@ -510 +510 @@ public abstract class JXPathContext {
-    public void setVariables(final Variables vars) {
+    public void setVariables(Variables vars) {
@@ -533 +533 @@ public abstract class JXPathContext {
-    public void setFunctions(final Functions functions) {
+    public void setFunctions(Functions functions) {
@@ -557 +557 @@ public abstract class JXPathContext {
-    public void setFactory(final AbstractFactory factory) {
+    public void setFactory(AbstractFactory factory) {
@@ -581 +581 @@ public abstract class JXPathContext {
-    public synchronized void setLocale(final Locale locale) {
+    public synchronized void setLocale(Locale locale) {
@@ -610,2 +610,2 @@ public abstract class JXPathContext {
-    public synchronized void setDecimalFormatSymbols(final String name,
-            final DecimalFormatSymbols symbols) {
+    public synchronized void setDecimalFormatSymbols(String name,
+            DecimalFormatSymbols symbols) {
@@ -624 +624 @@ public abstract class JXPathContext {
-    public synchronized DecimalFormatSymbols getDecimalFormatSymbols(final String name) {
+    public synchronized DecimalFormatSymbols getDecimalFormatSymbols(String name) {
@@ -641 +641 @@ public abstract class JXPathContext {
-    public synchronized void setLenient(final boolean lenient) {
+    public synchronized void setLenient(boolean lenient) {
@@ -667 +667 @@ public abstract class JXPathContext {
-    public static CompiledExpression compile(final String xpath) {
+    public static CompiledExpression compile(String xpath) {
@@ -692,2 +692,2 @@ public abstract class JXPathContext {
-    public Object selectSingleNode(final String xpath) {
-        final Pointer pointer = getPointer(xpath);
+    public Object selectSingleNode(String xpath) {
+        Pointer pointer = getPointer(xpath);
@@ -703,3 +703,3 @@ public abstract class JXPathContext {
-    public List selectNodes(final String xpath) {
-        final ArrayList list = new ArrayList();
-        final Iterator iterator = iteratePointers(xpath);
+    public List selectNodes(String xpath) {
+        ArrayList list = new ArrayList();
+        Iterator iterator = iteratePointers(xpath);
@@ -707 +707 @@ public abstract class JXPathContext {
-            final Pointer pointer = (Pointer) iterator.next();
+            Pointer pointer = (Pointer) iterator.next();
@@ -828 +828 @@ public abstract class JXPathContext {
-    public void setIdentityManager(final IdentityManager idManager) {
+    public void setIdentityManager(IdentityManager idManager) {
@@ -850,2 +850,2 @@ public abstract class JXPathContext {
-    public Pointer getPointerByID(final String id) {
-        final IdentityManager manager = getIdentityManager();
+    public Pointer getPointerByID(String id) {
+        IdentityManager manager = getIdentityManager();
@@ -865 +865 @@ public abstract class JXPathContext {
-    public void setKeyManager(final KeyManager keyManager) {
+    public void setKeyManager(KeyManager keyManager) {
@@ -887,2 +887,2 @@ public abstract class JXPathContext {
-    public Pointer getPointerByKey(final String key, final String value) {
-        final KeyManager manager = getKeyManager();
+    public Pointer getPointerByKey(String key, String value) {
+        KeyManager manager = getKeyManager();
@@ -903,2 +903,2 @@ public abstract class JXPathContext {
-    public NodeSet getNodeSetByKey(final String key, final Object value) {
-        final KeyManager manager = getKeyManager();
+    public NodeSet getNodeSetByKey(String key, Object value) {
+        KeyManager manager = getKeyManager();
@@ -919 +919 @@ public abstract class JXPathContext {
-    public void registerNamespace(final String prefix, final String namespaceURI) {
+    public void registerNamespace(String prefix, String namespaceURI) {
@@ -934 +934 @@ public abstract class JXPathContext {
-    public String getNamespaceURI(final String prefix) {
+    public String getNamespaceURI(String prefix) {
@@ -945 +945 @@ public abstract class JXPathContext {
-    public String getPrefix(final String namespaceURI) {
+    public String getPrefix(String namespaceURI) {
@@ -959 +959 @@ public abstract class JXPathContext {
-    public void setNamespaceContextPointer(final Pointer namespaceContextPointer) {
+    public void setNamespaceContextPointer(Pointer namespaceContextPointer) {
@@ -981 +981 @@ public abstract class JXPathContext {
-    public void setExceptionHandler(final ExceptionHandler exceptionHandler) {
+    public void setExceptionHandler(ExceptionHandler exceptionHandler) {
diff --git a/src/main/java/org/apache/commons/jxpath/JXPathContextFactory.java b/src/main/java/org/apache/commons/jxpath/JXPathContextFactory.java
index 5a0cfa35..529e695c 100644
--- a/src/main/java/org/apache/commons/jxpath/JXPathContextFactory.java
+++ b/src/main/java/org/apache/commons/jxpath/JXPathContextFactory.java
@@ -103 +103 @@ public abstract class JXPathContextFactory {
-            final Class clazz = ClassLoaderUtil.getClass( FACTORY_IMPL_NAME, true );
+            Class clazz = ClassLoaderUtil.getClass( FACTORY_IMPL_NAME, true );
@@ -106 +106,7 @@ public abstract class JXPathContextFactory {
-        catch (final ClassNotFoundException | IllegalAccessException | InstantiationException ie) {
+        catch (ClassNotFoundException cnfe) {
+            throw new JXPathContextFactoryConfigurationError(cnfe);
+        }
+        catch (IllegalAccessException iae) {
+            throw new JXPathContextFactoryConfigurationError(iae);
+        }
+        catch (InstantiationException ie) {
@@ -138 +144 @@ public abstract class JXPathContextFactory {
-        catch (final SecurityException ignore) {
+        catch (SecurityException se) { //NOPMD
@@ -151 +157 @@ public abstract class JXPathContextFactory {
-    private static String findFactory(final String property, final String defaultFactory) {
+    private static String findFactory(String property, String defaultFactory) {
@@ -154 +160 @@ public abstract class JXPathContextFactory {
-            final String systemProp = System.getProperty(property);
+            String systemProp = System.getProperty(property);
@@ -164 +170 @@ public abstract class JXPathContextFactory {
-        catch (final SecurityException ignore) {
+        catch (SecurityException se) { //NOPMD
@@ -170,2 +176,2 @@ public abstract class JXPathContextFactory {
-            final String javah = System.getProperty("java.home");
-            final String configFile =
+            String javah = System.getProperty("java.home");
+            String configFile =
@@ -177 +183 @@ public abstract class JXPathContextFactory {
-            final File f = new File(configFile);
+            File f = new File(configFile);
@@ -179,2 +185,2 @@ public abstract class JXPathContextFactory {
-                final Properties props = new Properties();
-                final FileInputStream fis = new FileInputStream(f);
+                Properties props = new Properties();
+                FileInputStream fis = new FileInputStream(f);
@@ -189 +195 @@ public abstract class JXPathContextFactory {
-                        catch (final IOException ignore) {
+                        catch (IOException e) { //NOPMD
@@ -194 +200 @@ public abstract class JXPathContextFactory {
-                final String factory = props.getProperty(property);
+                String factory = props.getProperty(property);
@@ -204 +210 @@ public abstract class JXPathContextFactory {
-        catch (final IOException ex) {
+        catch (IOException ex) {
@@ -210 +216 @@ public abstract class JXPathContextFactory {
-        final String serviceId = "META-INF/services/" + property;
+        String serviceId = "META-INF/services/" + property;
@@ -213 +219 @@ public abstract class JXPathContextFactory {
-            final ClassLoader cl = JXPathContextFactory.class.getClassLoader();
+            ClassLoader cl = JXPathContextFactory.class.getClassLoader();
@@ -226 +232 @@ public abstract class JXPathContextFactory {
-                final BufferedReader rd = new BufferedReader(new InputStreamReader(is, "UTF-8"));
+                BufferedReader rd = new BufferedReader(new InputStreamReader(is, "UTF-8"));
@@ -236 +242 @@ public abstract class JXPathContextFactory {
-                    catch (final IOException ignore) {
+                    catch (IOException e) { //NOPMD
@@ -250 +256 @@ public abstract class JXPathContextFactory {
-        catch (final Exception ex) {
+        catch (Exception ex) {
diff --git a/src/main/java/org/apache/commons/jxpath/JXPathContextFactoryConfigurationError.java b/src/main/java/org/apache/commons/jxpath/JXPathContextFactoryConfigurationError.java
index 106f1cfe..7b04aa81 100644
--- a/src/main/java/org/apache/commons/jxpath/JXPathContextFactoryConfigurationError.java
+++ b/src/main/java/org/apache/commons/jxpath/JXPathContextFactoryConfigurationError.java
@@ -27 +26,0 @@ public class JXPathContextFactoryConfigurationError extends Error {
-    private static final long serialVersionUID = 1L;
@@ -29 +28 @@ public class JXPathContextFactoryConfigurationError extends Error {
-    private final Exception exception;
+    private Exception exception;
@@ -35,0 +35 @@ public class JXPathContextFactoryConfigurationError extends Error {
+         super();
@@ -45 +45 @@ public class JXPathContextFactoryConfigurationError extends Error {
-    public JXPathContextFactoryConfigurationError(final String msg) {
+    public JXPathContextFactoryConfigurationError(String msg) {
@@ -58 +58 @@ public class JXPathContextFactoryConfigurationError extends Error {
-    public JXPathContextFactoryConfigurationError(final Exception e) {
+    public JXPathContextFactoryConfigurationError(Exception e) {
@@ -71 +71 @@ public class JXPathContextFactoryConfigurationError extends Error {
-    public JXPathContextFactoryConfigurationError(final Exception e, final String msg) {
+    public JXPathContextFactoryConfigurationError(Exception e, String msg) {
@@ -84 +83,0 @@ public class JXPathContextFactoryConfigurationError extends Error {
-    @Override
@@ -86 +85 @@ public class JXPathContextFactoryConfigurationError extends Error {
-        final String message = super.getMessage();
+        String message = super.getMessage();
diff --git a/src/main/java/org/apache/commons/jxpath/JXPathException.java b/src/main/java/org/apache/commons/jxpath/JXPathException.java
index e1d50a71..9cc7f25b 100644
--- a/src/main/java/org/apache/commons/jxpath/JXPathException.java
+++ b/src/main/java/org/apache/commons/jxpath/JXPathException.java
@@ -27 +27 @@ public class JXPathException extends RuntimeException {
-    private final Throwable exception;
+    private Throwable exception;
@@ -34,0 +35 @@ public class JXPathException extends RuntimeException {
+         super();
@@ -44 +45 @@ public class JXPathException extends RuntimeException {
-    public JXPathException(final String msg) {
+    public JXPathException(String msg) {
@@ -57 +58 @@ public class JXPathException extends RuntimeException {
-    public JXPathException(final Throwable e) {
+    public JXPathException(Throwable e) {
@@ -69 +70 @@ public class JXPathException extends RuntimeException {
-    public JXPathException(final String msg, final Throwable e) {
+    public JXPathException(String msg, Throwable e) {
@@ -82 +82,0 @@ public class JXPathException extends RuntimeException {
-    @Override
@@ -84 +84 @@ public class JXPathException extends RuntimeException {
-        final String message = super.getMessage();
+        String message = super.getMessage();
@@ -88 +88 @@ public class JXPathException extends RuntimeException {
-        final StringBuffer buf = new StringBuffer();
+        StringBuffer buf = new StringBuffer();
@@ -92 +92 @@ public class JXPathException extends RuntimeException {
-        final String eMsg = exception.getMessage();
+        String eMsg = exception.getMessage();
@@ -111 +110,0 @@ public class JXPathException extends RuntimeException {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/JXPathFunctionNotFoundException.java b/src/main/java/org/apache/commons/jxpath/JXPathFunctionNotFoundException.java
index 40ec35ef..00a2d4f9 100644
--- a/src/main/java/org/apache/commons/jxpath/JXPathFunctionNotFoundException.java
+++ b/src/main/java/org/apache/commons/jxpath/JXPathFunctionNotFoundException.java
@@ -31 +31 @@ public class JXPathFunctionNotFoundException extends JXPathException {
-    public JXPathFunctionNotFoundException(final String message) {
+    public JXPathFunctionNotFoundException(String message) {
diff --git a/src/main/java/org/apache/commons/jxpath/JXPathIntrospector.java b/src/main/java/org/apache/commons/jxpath/JXPathIntrospector.java
index 61dc3dba..da470722 100644
--- a/src/main/java/org/apache/commons/jxpath/JXPathIntrospector.java
+++ b/src/main/java/org/apache/commons/jxpath/JXPathIntrospector.java
@@ -67,2 +67,2 @@ public class JXPathIntrospector {
-    public static void registerAtomicClass(final Class beanClass) {
-        synchronized (byClass) {
+    public static void registerAtomicClass(Class beanClass) {
+        synchronized (byClass) { 
@@ -81,3 +81,3 @@ public class JXPathIntrospector {
-    public static void registerDynamicClass(final Class beanClass,
-            final Class dynamicPropertyHandlerClass) {
-        final JXPathBasicBeanInfo bi =
+    public static void registerDynamicClass(Class beanClass,
+            Class dynamicPropertyHandlerClass) {
+        JXPathBasicBeanInfo bi =
@@ -112 +112 @@ public class JXPathIntrospector {
-    public static JXPathBeanInfo getBeanInfo(final Class beanClass) {
+    public static JXPathBeanInfo getBeanInfo(Class beanClass) {
@@ -135 +135 @@ public class JXPathIntrospector {
-    private static JXPathBeanInfo findDynamicBeanInfo(final Class beanClass) {
+    private static JXPathBeanInfo findDynamicBeanInfo(Class beanClass) {
@@ -144 +144 @@ public class JXPathIntrospector {
-        final Class[] interfaces = beanClass.getInterfaces();
+        Class[] interfaces = beanClass.getInterfaces();
@@ -146,2 +146,2 @@ public class JXPathIntrospector {
-            for (final Class element : interfaces) {
-                beanInfo = findDynamicBeanInfo(element);
+            for (int i = 0; i < interfaces.length; i++) {
+                beanInfo = findDynamicBeanInfo(interfaces[i]);
@@ -154 +154 @@ public class JXPathIntrospector {
-        final Class sup = beanClass.getSuperclass();
+        Class sup = beanClass.getSuperclass();
@@ -174,2 +174,2 @@ public class JXPathIntrospector {
-    private static synchronized JXPathBeanInfo findInformant(final Class beanClass) {
-        final String name = beanClass.getName() + "XBeanInfo";
+    private static synchronized JXPathBeanInfo findInformant(Class beanClass) {
+        String name = beanClass.getName() + "XBeanInfo";
@@ -179 +179 @@ public class JXPathIntrospector {
-        catch (final Exception ignore) { // NOPMD
+        catch (Exception ex) { //NOPMD
@@ -189 +189 @@ public class JXPathIntrospector {
-        catch (final Exception ignore) { // NOPMD
+        catch (Exception ex) { //NOPMD
@@ -205 +205 @@ public class JXPathIntrospector {
-    private static Object instantiate(final Class sibling, final String className)
+    private static Object instantiate(Class sibling, String className)
@@ -209 +209 @@ public class JXPathIntrospector {
-        final ClassLoader cl = sibling.getClassLoader();
+        ClassLoader cl = sibling.getClassLoader();
@@ -212 +212 @@ public class JXPathIntrospector {
-                final Class cls = cl.loadClass(className);
+                Class cls = cl.loadClass(className);
@@ -215 +215 @@ public class JXPathIntrospector {
-            catch (final Exception ex) { //NOPMD
+            catch (Exception ex) { //NOPMD
@@ -221 +221 @@ public class JXPathIntrospector {
-        final Class cls = ClassLoaderUtil.getClass(className);
+        Class cls = ClassLoaderUtil.getClass(className);
diff --git a/src/main/java/org/apache/commons/jxpath/JXPathInvalidAccessException.java b/src/main/java/org/apache/commons/jxpath/JXPathInvalidAccessException.java
index 7042b2d3..1776dba3 100644
--- a/src/main/java/org/apache/commons/jxpath/JXPathInvalidAccessException.java
+++ b/src/main/java/org/apache/commons/jxpath/JXPathInvalidAccessException.java
@@ -32 +32 @@ public class JXPathInvalidAccessException extends JXPathException {
-    public JXPathInvalidAccessException(final String message) {
+    public JXPathInvalidAccessException(String message) {
@@ -41 +41 @@ public class JXPathInvalidAccessException extends JXPathException {
-    public JXPathInvalidAccessException(final String message, final Throwable ex) {
+    public JXPathInvalidAccessException(String message, Throwable ex) {
diff --git a/src/main/java/org/apache/commons/jxpath/JXPathInvalidSyntaxException.java b/src/main/java/org/apache/commons/jxpath/JXPathInvalidSyntaxException.java
index a82a7522..5c4b43a3 100644
--- a/src/main/java/org/apache/commons/jxpath/JXPathInvalidSyntaxException.java
+++ b/src/main/java/org/apache/commons/jxpath/JXPathInvalidSyntaxException.java
@@ -30 +30 @@ public class JXPathInvalidSyntaxException extends JXPathException {
-    public JXPathInvalidSyntaxException(final String message) {
+    public JXPathInvalidSyntaxException(String message) {
diff --git a/src/main/java/org/apache/commons/jxpath/JXPathNotFoundException.java b/src/main/java/org/apache/commons/jxpath/JXPathNotFoundException.java
index 56020eb9..f1f52487 100644
--- a/src/main/java/org/apache/commons/jxpath/JXPathNotFoundException.java
+++ b/src/main/java/org/apache/commons/jxpath/JXPathNotFoundException.java
@@ -30 +30 @@ public class JXPathNotFoundException extends JXPathException {
-    public JXPathNotFoundException(final String message) {
+    public JXPathNotFoundException(String message) {
diff --git a/src/main/java/org/apache/commons/jxpath/JXPathTypeConversionException.java b/src/main/java/org/apache/commons/jxpath/JXPathTypeConversionException.java
index 8af26d21..6f5aaa39 100644
--- a/src/main/java/org/apache/commons/jxpath/JXPathTypeConversionException.java
+++ b/src/main/java/org/apache/commons/jxpath/JXPathTypeConversionException.java
@@ -31 +31 @@ public class JXPathTypeConversionException extends JXPathException {
-    public JXPathTypeConversionException(final String message) {
+    public JXPathTypeConversionException(String message) {
@@ -40 +40 @@ public class JXPathTypeConversionException extends JXPathException {
-    public JXPathTypeConversionException(final String message, final Exception ex) {
+    public JXPathTypeConversionException(String message, Exception ex) {
diff --git a/src/main/java/org/apache/commons/jxpath/MapDynamicPropertyHandler.java b/src/main/java/org/apache/commons/jxpath/MapDynamicPropertyHandler.java
index fb519529..7b949aea 100644
--- a/src/main/java/org/apache/commons/jxpath/MapDynamicPropertyHandler.java
+++ b/src/main/java/org/apache/commons/jxpath/MapDynamicPropertyHandler.java
@@ -28,6 +28,5 @@ public class MapDynamicPropertyHandler implements DynamicPropertyHandler {
-    @Override
-    public String[] getPropertyNames(final Object object) {
-        final Map map = (Map) object;
-        final Set set = map.keySet();
-        final String[] names = new String[set.size()];
-        final Iterator it = set.iterator();
+    public String[] getPropertyNames(Object object) {
+        Map map = (Map) object;
+        Set set = map.keySet();
+        String[] names = new String[set.size()];
+        Iterator it = set.iterator();
@@ -40,2 +39 @@ public class MapDynamicPropertyHandler implements DynamicPropertyHandler {
-    @Override
-    public Object getProperty(final Object object, final String propertyName) {
+    public Object getProperty(Object object, String propertyName) {
@@ -45,2 +43 @@ public class MapDynamicPropertyHandler implements DynamicPropertyHandler {
-    @Override
-    public void setProperty(final Object object, final String propertyName, final Object value) {
+    public void setProperty(Object object, String propertyName, Object value) {
diff --git a/src/main/java/org/apache/commons/jxpath/XMLDocumentContainer.java b/src/main/java/org/apache/commons/jxpath/XMLDocumentContainer.java
index 6ca37586..708bb454 100644
--- a/src/main/java/org/apache/commons/jxpath/XMLDocumentContainer.java
+++ b/src/main/java/org/apache/commons/jxpath/XMLDocumentContainer.java
@@ -40 +39,0 @@ import org.apache.commons.jxpath.xml.DocumentContainer;
-@Deprecated
@@ -43 +41,0 @@ public class XMLDocumentContainer implements Container {
-    private static final long serialVersionUID = 1L;
@@ -54 +52 @@ public class XMLDocumentContainer implements Container {
-    public XMLDocumentContainer(final URL xmlURL) {
+    public XMLDocumentContainer(URL xmlURL) {
@@ -63 +61 @@ public class XMLDocumentContainer implements Container {
-    public XMLDocumentContainer(final Source source) {
+    public XMLDocumentContainer(Source source) {
@@ -74 +71,0 @@ public class XMLDocumentContainer implements Container {
-    @Override
@@ -79,2 +76,2 @@ public class XMLDocumentContainer implements Container {
-                    final DOMResult result = new DOMResult();
-                    final Transformer trans =
+                    DOMResult result = new DOMResult();
+                    Transformer trans =
@@ -89 +86 @@ public class XMLDocumentContainer implements Container {
-            catch (final Exception ex) {
+            catch (Exception ex) {
@@ -94 +91 @@ public class XMLDocumentContainer implements Container {
-                            : source != null
+                            : (source != null
@@ -96 +93 @@ public class XMLDocumentContainer implements Container {
-                                : "<<undefined source>>"),
+                                : "<<undefined source>>")),
@@ -107,2 +104 @@ public class XMLDocumentContainer implements Container {
-    @Override
-    public void setValue(final Object value) {
+    public void setValue(Object value) {
diff --git a/src/main/java/org/apache/commons/jxpath/functions/ConstructorFunction.java b/src/main/java/org/apache/commons/jxpath/functions/ConstructorFunction.java
index 9c07f45f..f3b6bdea 100644
--- a/src/main/java/org/apache/commons/jxpath/functions/ConstructorFunction.java
+++ b/src/main/java/org/apache/commons/jxpath/functions/ConstructorFunction.java
@@ -31 +31 @@ public class ConstructorFunction implements Function {
-    private static final Object[] EMPTY_ARRAY = {};
+    private static final Object[] EMPTY_ARRAY = new Object[0];
@@ -33 +33 @@ public class ConstructorFunction implements Function {
-    private final Constructor constructor;
+    private Constructor constructor;
@@ -39 +39 @@ public class ConstructorFunction implements Function {
-    public ConstructorFunction(final Constructor constructor) {
+    public ConstructorFunction(Constructor constructor) {
@@ -49,2 +49 @@ public class ConstructorFunction implements Function {
-    @Override
-    public Object invoke(final ExpressionContext context, Object[] parameters) {
+    public Object invoke(ExpressionContext context, Object[] parameters) {
@@ -57 +56 @@ public class ConstructorFunction implements Function {
-            final Class[] types = constructor.getParameterTypes();
+            Class[] types = constructor.getParameterTypes();
diff --git a/src/main/java/org/apache/commons/jxpath/functions/MethodFunction.java b/src/main/java/org/apache/commons/jxpath/functions/MethodFunction.java
index 28dd87d3..c7694305 100644
--- a/src/main/java/org/apache/commons/jxpath/functions/MethodFunction.java
+++ b/src/main/java/org/apache/commons/jxpath/functions/MethodFunction.java
@@ -34,2 +34,2 @@ public class MethodFunction implements Function {
-    private final Method method;
-    private static final Object[] EMPTY_ARRAY = {};
+    private Method method;
+    private static final Object[] EMPTY_ARRAY = new Object[0];
@@ -41 +41 @@ public class MethodFunction implements Function {
-    public MethodFunction(final Method method) {
+    public MethodFunction(Method method) {
@@ -45,2 +45 @@ public class MethodFunction implements Function {
-    @Override
-    public Object invoke(final ExpressionContext context, Object[] parameters) {
+    public Object invoke(ExpressionContext context, Object[] parameters) {
@@ -56 +55 @@ public class MethodFunction implements Function {
-                final Class[] types = method.getParameterTypes();
+                Class[] types = method.getParameterTypes();
@@ -72 +71 @@ public class MethodFunction implements Function {
-                final Class[] types = method.getParameterTypes();
+                Class[] types = method.getParameterTypes();
@@ -102 +100,0 @@ public class MethodFunction implements Function {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/Compiler.java b/src/main/java/org/apache/commons/jxpath/ri/Compiler.java
index c2406374..4dfc2025 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/Compiler.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/Compiler.java
@@ -47,4 +47,4 @@ public interface Compiler {
-    int NODE_TYPE_NODE = 1;
-    int NODE_TYPE_TEXT = 2;
-    int NODE_TYPE_COMMENT = 3;
-    int NODE_TYPE_PI = 4;
+    public static final int NODE_TYPE_NODE = 1;
+    public static final int NODE_TYPE_TEXT = 2;
+    public static final int NODE_TYPE_COMMENT = 3;
+    public static final int NODE_TYPE_PI = 4;
@@ -52,13 +52,13 @@ public interface Compiler {
-    int AXIS_SELF = 1;
-    int AXIS_CHILD = 2;
-    int AXIS_PARENT = 3;
-    int AXIS_ANCESTOR = 4;
-    int AXIS_ATTRIBUTE = 5;
-    int AXIS_NAMESPACE = 6;
-    int AXIS_PRECEDING = 7;
-    int AXIS_FOLLOWING = 8;
-    int AXIS_DESCENDANT = 9;
-    int AXIS_ANCESTOR_OR_SELF = 10;
-    int AXIS_FOLLOWING_SIBLING = 11;
-    int AXIS_PRECEDING_SIBLING = 12;
-    int AXIS_DESCENDANT_OR_SELF = 13;
+    public static final int AXIS_SELF = 1;
+    public static final int AXIS_CHILD = 2;
+    public static final int AXIS_PARENT = 3;
+    public static final int AXIS_ANCESTOR = 4;
+    public static final int AXIS_ATTRIBUTE = 5;
+    public static final int AXIS_NAMESPACE = 6;
+    public static final int AXIS_PRECEDING = 7;
+    public static final int AXIS_FOLLOWING = 8;
+    public static final int AXIS_DESCENDANT = 9;
+    public static final int AXIS_ANCESTOR_OR_SELF = 10;
+    public static final int AXIS_FOLLOWING_SIBLING = 11;
+    public static final int AXIS_PRECEDING_SIBLING = 12;
+    public static final int AXIS_DESCENDANT_OR_SELF = 13;
@@ -66,30 +66,30 @@ public interface Compiler {
-    int FUNCTION_LAST = 1;
-    int FUNCTION_POSITION = 2;
-    int FUNCTION_COUNT = 3;
-    int FUNCTION_ID = 4;
-    int FUNCTION_LOCAL_NAME = 5;
-    int FUNCTION_NAMESPACE_URI = 6;
-    int FUNCTION_NAME = 7;
-    int FUNCTION_STRING = 8;
-    int FUNCTION_CONCAT = 9;
-    int FUNCTION_STARTS_WITH = 10;
-    int FUNCTION_CONTAINS = 11;
-    int FUNCTION_SUBSTRING_BEFORE = 12;
-    int FUNCTION_SUBSTRING_AFTER = 13;
-    int FUNCTION_SUBSTRING = 14;
-    int FUNCTION_STRING_LENGTH = 15;
-    int FUNCTION_NORMALIZE_SPACE = 16;
-    int FUNCTION_TRANSLATE = 17;
-    int FUNCTION_BOOLEAN = 18;
-    int FUNCTION_NOT = 19;
-    int FUNCTION_TRUE = 20;
-    int FUNCTION_FALSE = 21;
-    int FUNCTION_LANG = 22;
-    int FUNCTION_NUMBER = 23;
-    int FUNCTION_SUM = 24;
-    int FUNCTION_FLOOR = 25;
-    int FUNCTION_CEILING = 26;
-    int FUNCTION_ROUND = 27;
-    int FUNCTION_NULL = 28;
-    int FUNCTION_KEY = 29;
-    int FUNCTION_FORMAT_NUMBER = 30;
+    public static final int FUNCTION_LAST = 1;
+    public static final int FUNCTION_POSITION = 2;
+    public static final int FUNCTION_COUNT = 3;
+    public static final int FUNCTION_ID = 4;
+    public static final int FUNCTION_LOCAL_NAME = 5;
+    public static final int FUNCTION_NAMESPACE_URI = 6;
+    public static final int FUNCTION_NAME = 7;
+    public static final int FUNCTION_STRING = 8;
+    public static final int FUNCTION_CONCAT = 9;
+    public static final int FUNCTION_STARTS_WITH = 10;
+    public static final int FUNCTION_CONTAINS = 11;
+    public static final int FUNCTION_SUBSTRING_BEFORE = 12;
+    public static final int FUNCTION_SUBSTRING_AFTER = 13;
+    public static final int FUNCTION_SUBSTRING = 14;
+    public static final int FUNCTION_STRING_LENGTH = 15;
+    public static final int FUNCTION_NORMALIZE_SPACE = 16;
+    public static final int FUNCTION_TRANSLATE = 17;
+    public static final int FUNCTION_BOOLEAN = 18;
+    public static final int FUNCTION_NOT = 19;
+    public static final int FUNCTION_TRUE = 20;
+    public static final int FUNCTION_FALSE = 21;
+    public static final int FUNCTION_LANG = 22;
+    public static final int FUNCTION_NUMBER = 23;
+    public static final int FUNCTION_SUM = 24;
+    public static final int FUNCTION_FLOOR = 25;
+    public static final int FUNCTION_CEILING = 26;
+    public static final int FUNCTION_ROUND = 27;
+    public static final int FUNCTION_NULL = 28;
+    public static final int FUNCTION_KEY = 29;
+    public static final int FUNCTION_FORMAT_NUMBER = 30;
@@ -97 +97 @@ public interface Compiler {
-    int FUNCTION_ENDS_WITH = 31;
+    public static final int FUNCTION_ENDS_WITH = 31;
diff --git a/src/main/java/org/apache/commons/jxpath/ri/EvalContext.java b/src/main/java/org/apache/commons/jxpath/ri/EvalContext.java
index 5167628e..8239fbf8 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/EvalContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/EvalContext.java
@@ -62 +62 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
-    public EvalContext(final EvalContext parentContext) {
+    public EvalContext(EvalContext parentContext) {
@@ -66 +65,0 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
-    @Override
@@ -71 +69,0 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
-    @Override
@@ -76 +73,0 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
-    @Override
@@ -107 +103,0 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
-    @Override
@@ -125 +120,0 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
-    @Override
@@ -170 +164,0 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
-    @Override
@@ -181,2 +175,2 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
-        final HashSet set = new HashSet();
-        final ArrayList list = new ArrayList();
+        HashSet set = new HashSet();
+        ArrayList list = new ArrayList();
@@ -185 +179 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
-                final NodePointer pointer = getCurrentNodePointer();
+                NodePointer pointer = getCurrentNodePointer();
@@ -206 +200 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
-    protected void sortPointers(final List l) {
+    protected void sortPointers(List l) {
@@ -224 +217,0 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
-    @Override
@@ -226 +219 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
-        final int pos = position;
+        int pos = position;
@@ -230 +223 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
-        final List list = new ArrayList();
+        List list = new ArrayList();
@@ -256 +249 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
-        final BasicNodeSet set = new BasicNodeSet();
+        BasicNodeSet set = new BasicNodeSet();
@@ -276 +268,0 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
-    @Override
@@ -278 +270 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
-        final Pointer ptr = getContextNodePointer();
+        Pointer ptr = getContextNodePointer();
@@ -384 +376 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
-    public boolean setPosition(final int position) {
+    public boolean setPosition(int position) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/InfoSetUtil.java b/src/main/java/org/apache/commons/jxpath/ri/InfoSetUtil.java
index b50e0510..05efd05b 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/InfoSetUtil.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/InfoSetUtil.java
@@ -28,3 +28,3 @@ public class InfoSetUtil {
-    private static final Double ZERO = Double.valueOf(0);
-    private static final Double ONE = Double.valueOf(1);
-    private static final Double NOT_A_NUMBER = Double.valueOf(Double.NaN);
+    private static final Double ZERO = new Double(0);
+    private static final Double ONE = new Double(1);
+    private static final Double NOT_A_NUMBER = new Double(Double.NaN);
@@ -37 +37 @@ public class InfoSetUtil {
-    public static String stringValue(final Object object) {
+    public static String stringValue(Object object) {
@@ -42,2 +42,2 @@ public class InfoSetUtil {
-            final double d = ((Number) object).doubleValue();
-            final long l = ((Number) object).longValue();
+            double d = ((Number) object).doubleValue();
+            long l = ((Number) object).longValue();
@@ -56,2 +56,2 @@ public class InfoSetUtil {
-            final EvalContext ctx = (EvalContext) object;
-            final Pointer ptr = ctx.getSingleNodePointer();
+            EvalContext ctx = (EvalContext) object;
+            Pointer ptr = ctx.getSingleNodePointer();
@@ -68 +68 @@ public class InfoSetUtil {
-    public static Number number(final Object object) {
+    public static Number number(Object object) {
@@ -77 +77 @@ public class InfoSetUtil {
-                return Double.valueOf((String) object);
+                return new Double((String) object);
@@ -79 +79 @@ public class InfoSetUtil {
-            catch (final NumberFormatException ex) {
+            catch (NumberFormatException ex) {
@@ -84,2 +84,2 @@ public class InfoSetUtil {
-            final EvalContext ctx = (EvalContext) object;
-            final Pointer ptr = ctx.getSingleNodePointer();
+            EvalContext ctx = (EvalContext) object;
+            Pointer ptr = ctx.getSingleNodePointer();
@@ -99 +99 @@ public class InfoSetUtil {
-    public static double doubleValue(final Object object) {
+    public static double doubleValue(Object object) {
@@ -113 +113 @@ public class InfoSetUtil {
-            catch (final NumberFormatException ex) {
+            catch (NumberFormatException ex) {
@@ -121,2 +121,2 @@ public class InfoSetUtil {
-            final EvalContext ctx = (EvalContext) object;
-            final Pointer ptr = ctx.getSingleNodePointer();
+            EvalContext ctx = (EvalContext) object;
+            Pointer ptr = ctx.getSingleNodePointer();
@@ -133 +133 @@ public class InfoSetUtil {
-    public static boolean booleanValue(final Object object) {
+    public static boolean booleanValue(Object object) {
@@ -135 +135 @@ public class InfoSetUtil {
-            final double value = ((Number) object).doubleValue();
+            double value = ((Number) object).doubleValue();
@@ -143,3 +143,3 @@ public class InfoSetUtil {
-            final EvalContext ctx = (EvalContext) object;
-            final Pointer ptr = ctx.getSingleNodePointer();
-            return ptr != null && booleanValue(ptr);
+            EvalContext ctx = (EvalContext) object;
+            Pointer ptr = ctx.getSingleNodePointer();
+            return ptr == null ? false : booleanValue(ptr);
diff --git a/src/main/java/org/apache/commons/jxpath/ri/JXPathCompiledExpression.java b/src/main/java/org/apache/commons/jxpath/ri/JXPathCompiledExpression.java
index 7f89c12e..00c0e8c9 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/JXPathCompiledExpression.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/JXPathCompiledExpression.java
@@ -31,2 +31,2 @@ public class JXPathCompiledExpression implements CompiledExpression {
-    private final String xpath;
-    private final Expression expression;
+    private String xpath;
+    private Expression expression;
@@ -39 +39 @@ public class JXPathCompiledExpression implements CompiledExpression {
-    public JXPathCompiledExpression(final String xpath, final Expression expression) {
+    public JXPathCompiledExpression(String xpath, Expression expression) {
@@ -60 +59,0 @@ public class JXPathCompiledExpression implements CompiledExpression {
-    @Override
@@ -65,2 +64 @@ public class JXPathCompiledExpression implements CompiledExpression {
-    @Override
-    public Object getValue(final JXPathContext context) {
+    public Object getValue(JXPathContext context) {
@@ -71,2 +69 @@ public class JXPathCompiledExpression implements CompiledExpression {
-    @Override
-    public Object getValue(final JXPathContext context, final Class requiredType) {
+    public Object getValue(JXPathContext context, Class requiredType) {
@@ -77,2 +74 @@ public class JXPathCompiledExpression implements CompiledExpression {
-    @Override
-    public void setValue(final JXPathContext context, final Object value) {
+    public void setValue(JXPathContext context, Object value) {
@@ -83,2 +79 @@ public class JXPathCompiledExpression implements CompiledExpression {
-    @Override
-    public Pointer createPath(final JXPathContext context) {
+    public Pointer createPath(JXPathContext context) {
@@ -89,2 +84 @@ public class JXPathCompiledExpression implements CompiledExpression {
-    @Override
-    public Pointer createPathAndSetValue(final JXPathContext context, final Object value) {
+    public Pointer createPathAndSetValue(JXPathContext context, Object value) {
@@ -95,2 +89 @@ public class JXPathCompiledExpression implements CompiledExpression {
-    @Override
-    public Iterator iterate(final JXPathContext context) {
+    public Iterator iterate(JXPathContext context) {
@@ -101,2 +94 @@ public class JXPathCompiledExpression implements CompiledExpression {
-    @Override
-    public Pointer getPointer(final JXPathContext context, final String xpath) {
+    public Pointer getPointer(JXPathContext context, String xpath) {
@@ -107,2 +99 @@ public class JXPathCompiledExpression implements CompiledExpression {
-    @Override
-    public Iterator iteratePointers(final JXPathContext context) {
+    public Iterator iteratePointers(JXPathContext context) {
@@ -113,2 +104 @@ public class JXPathCompiledExpression implements CompiledExpression {
-    @Override
-    public void removePath(final JXPathContext context) {
+    public void removePath(JXPathContext context) {
@@ -118,2 +108 @@ public class JXPathCompiledExpression implements CompiledExpression {
-    @Override
-    public void removeAll(final JXPathContext context) {
+    public void removeAll(JXPathContext context) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/JXPathContextFactoryReferenceImpl.java b/src/main/java/org/apache/commons/jxpath/ri/JXPathContextFactoryReferenceImpl.java
index 59216615..5c55c135 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/JXPathContextFactoryReferenceImpl.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/JXPathContextFactoryReferenceImpl.java
@@ -33 +32,0 @@ public class JXPathContextFactoryReferenceImpl extends JXPathContextFactory {
-    @Override
@@ -35,2 +34,2 @@ public class JXPathContextFactoryReferenceImpl extends JXPathContextFactory {
-        final JXPathContext parentContext,
-        final Object contextBean) {
+        JXPathContext parentContext,
+        Object contextBean) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java b/src/main/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java
index 96b1281b..999a4715 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java
@@ -85 +85 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-        final Object domFactory = allocateConditionally(
+        Object domFactory = allocateConditionally(
@@ -93 +93 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-        final Object jdomFactory = allocateConditionally(
+        Object jdomFactory = allocateConditionally(
@@ -101 +101 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-        final Object dynaBeanFactory =
+        Object dynaBeanFactory =
@@ -123,4 +123,3 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-                @Override
-                public int compare(final Object a, final Object b) {
-                    final int orderA = ((NodePointerFactory) a).getOrder();
-                    final int orderB = ((NodePointerFactory) b).getOrder();
+                public int compare(Object a, Object b) {
+                    int orderA = ((NodePointerFactory) a).getOrder();
+                    int orderB = ((NodePointerFactory) b).getOrder();
@@ -139 +138 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public static void addNodePointerFactory(final NodePointerFactory factory) {
+    public static void addNodePointerFactory(NodePointerFactory factory) {
@@ -148 +147 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-     *
+     * 
@@ -153 +152 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public static boolean removeNodePointerFactory(final NodePointerFactory factory) {
+    public static boolean removeNodePointerFactory(NodePointerFactory factory) {
@@ -180,2 +179,2 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    protected JXPathContextReferenceImpl(final JXPathContext parentContext,
-            final Object contextBean) {
+    protected JXPathContextReferenceImpl(JXPathContext parentContext,
+            Object contextBean) {
@@ -191,2 +190,2 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public JXPathContextReferenceImpl(final JXPathContext parentContext,
-            final Object contextBean, final Pointer contextPointer) {
+    public JXPathContextReferenceImpl(JXPathContext parentContext,
+            Object contextBean, Pointer contextPointer) {
@@ -235,2 +234 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    @Override
-    protected CompiledExpression compilePath(final String xpath) {
+    protected CompiledExpression compilePath(String xpath) {
@@ -245 +243 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    private Expression compileExpression(final String xpath) {
+    private Expression compileExpression(String xpath) {
@@ -251 +249 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-                final SoftReference ref = (SoftReference) compiled.get(xpath);
+                SoftReference ref = (SoftReference) compiled.get(xpath);
@@ -270 +268 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-                    final Iterator it = compiled.entrySet().iterator();
+                    Iterator it = compiled.entrySet().iterator();
@@ -272 +270 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-                        final Entry me = (Entry) it.next();
+                        Entry me = (Entry) it.next();
@@ -295,3 +293,2 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    @Override
-    public Object getValue(final String xpath) {
-        final Expression expression = compileExpression(xpath);
+    public Object getValue(String xpath) {
+        Expression expression = compileExpression(xpath);
@@ -369 +366 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public Object getValue(final String xpath, final Expression expr) {
+    public Object getValue(String xpath, Expression expr) {
@@ -379 +376 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-            final EvalContext ctx = (EvalContext) result;
+            EvalContext ctx = (EvalContext) result;
@@ -403,3 +400,2 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    @Override
-    public Object getValue(final String xpath, final Class requiredType) {
-        final Expression expr = compileExpression(xpath);
+    public Object getValue(String xpath, Class requiredType) {
+        Expression expr = compileExpression(xpath);
@@ -416 +412 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public Object getValue(final String xpath, final Expression expr, final Class requiredType) {
+    public Object getValue(String xpath, Expression expr, Class requiredType) {
@@ -440,2 +436 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    @Override
-    public Iterator iterate(final String xpath) {
+    public Iterator iterate(String xpath) {
@@ -453 +448 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public Iterator iterate(final String xpath, final Expression expr) {
+    public Iterator iterate(String xpath, Expression expr) {
@@ -457,2 +452 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    @Override
-    public Pointer getPointer(final String xpath) {
+    public Pointer getPointer(String xpath) {
@@ -468 +462 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public Pointer getPointer(final String xpath, final Expression expr) {
+    public Pointer getPointer(String xpath, Expression expr) {
@@ -483,2 +477 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    @Override
-    public void setValue(final String xpath, final Object value) {
+    public void setValue(String xpath, Object value) {
@@ -494 +487 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public void setValue(final String xpath, final Expression expr, final Object value) {
+    public void setValue(String xpath, Expression expr, Object value) {
@@ -498 +491 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-        catch (final Throwable ex) {
+        catch (Throwable ex) {
@@ -504,2 +497 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    @Override
-    public Pointer createPath(final String xpath) {
+    public Pointer createPath(String xpath) {
@@ -515 +507 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public Pointer createPath(final String xpath, final Expression expr) {
+    public Pointer createPath(String xpath, Expression expr) {
@@ -517 +509 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-            final Object result = expr.computeValue(getEvalContext());
+            Object result = expr.computeValue(getEvalContext());
@@ -524 +516 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-                final EvalContext ctx = (EvalContext) result;
+                EvalContext ctx = (EvalContext) result;
@@ -534 +526 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-        catch (final Throwable ex) {
+        catch (Throwable ex) {
@@ -541,2 +533 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    @Override
-    public Pointer createPathAndSetValue(final String xpath, final Object value) {
+    public Pointer createPathAndSetValue(String xpath, Object value) {
@@ -553,2 +544,2 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public Pointer createPathAndSetValue(final String xpath, final Expression expr,
-            final Object value) {
+    public Pointer createPathAndSetValue(String xpath, Expression expr,
+            Object value) {
@@ -558 +549 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-        catch (final Throwable ex) {
+        catch (Throwable ex) {
@@ -573,3 +564,3 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    private Pointer setValue(final String xpath, final Expression expr, final Object value,
-            final boolean create) {
-        final Object result = expr.computeValue(getEvalContext());
+    private Pointer setValue(String xpath, Expression expr, Object value,
+            boolean create) {
+        Object result = expr.computeValue(getEvalContext());
@@ -582 +573 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-            final EvalContext ctx = (EvalContext) result;
+            EvalContext ctx = (EvalContext) result;
@@ -607 +598 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    private void checkSimplePath(final Expression expr) {
+    private void checkSimplePath(Expression expr) {
@@ -625,2 +616 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    @Override
-    public Iterator iteratePointers(final String xpath) {
+    public Iterator iteratePointers(String xpath) {
@@ -639 +629 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public Iterator iteratePointers(final String xpath, final Expression expr) {
+    public Iterator iteratePointers(String xpath, Expression expr) {
@@ -643,2 +633 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    @Override
-    public void removePath(final String xpath) {
+    public void removePath(String xpath) {
@@ -653 +642 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public void removePath(final String xpath, final Expression expr) {
+    public void removePath(String xpath, Expression expr) {
@@ -655 +644 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-            final NodePointer pointer = (NodePointer) getPointer(xpath, expr);
+            NodePointer pointer = (NodePointer) getPointer(xpath, expr);
@@ -660 +649 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-        catch (final Throwable ex) {
+        catch (Throwable ex) {
@@ -667,2 +656 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    @Override
-    public void removeAll(final String xpath) {
+    public void removeAll(String xpath) {
@@ -677 +665 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public void removeAll(final String xpath, final Expression expr) {
+    public void removeAll(String xpath, Expression expr) {
@@ -679 +667 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-            final ArrayList list = new ArrayList();
+            ArrayList list = new ArrayList();
@@ -687 +675 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-                final NodePointer pointer = (NodePointer) it.next();
+                NodePointer pointer = (NodePointer) it.next();
@@ -694 +682 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-        catch (final Throwable ex) {
+        catch (Throwable ex) {
@@ -701,3 +689,2 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    @Override
-    public JXPathContext getRelativeContext(final Pointer pointer) {
-        final Object contextBean = pointer.getNode();
+    public JXPathContext getRelativeContext(Pointer pointer) {
+        Object contextBean = pointer.getNode();
@@ -712 +698,0 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    @Override
@@ -748 +734 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public NodePointer getVariablePointer(final QName name) {
+    public NodePointer getVariablePointer(QName name) {
@@ -759,3 +745,3 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public Function getFunction(final QName functionName, final Object[] parameters) {
-        final String namespace = functionName.getPrefix();
-        final String name = functionName.getName();
+    public Function getFunction(QName functionName, Object[] parameters) {
+        String namespace = functionName.getPrefix();
+        String name = functionName.getName();
@@ -779,2 +765 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    @Override
-    public void registerNamespace(final String prefix, final String namespaceURI) {
+    public void registerNamespace(String prefix, String namespaceURI) {
@@ -787,2 +772 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    @Override
-    public String getNamespaceURI(final String prefix) {
+    public String getNamespaceURI(String prefix) {
@@ -796,2 +780 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    @Override
-    public String getPrefix(final String namespaceURI) {
+    public String getPrefix(String namespaceURI) {
@@ -801,2 +784 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    @Override
-    public void setNamespaceContextPointer(final Pointer pointer) {
+    public void setNamespaceContextPointer(Pointer pointer) {
@@ -809 +790,0 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    @Override
@@ -826,2 +807 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    @Override
-    public void setExceptionHandler(final ExceptionHandler exceptionHandler) {
+    public void setExceptionHandler(ExceptionHandler exceptionHandler) {
@@ -840,2 +820,2 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public static Object allocateConditionally(final String className,
-            final String existenceCheckClassName) {
+    public static Object allocateConditionally(String className,
+            String existenceCheckClassName) {
@@ -846 +826 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-            catch (final ClassNotFoundException ex) {
+            catch (ClassNotFoundException ex) {
@@ -849 +829 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-            final Class cls = ClassLoaderUtil.getClass(className, true);
+            Class cls = ClassLoaderUtil.getClass(className, true);
@@ -852 +832 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-        catch (final Exception ex) {
+        catch (Exception ex) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/NamespaceResolver.java b/src/main/java/org/apache/commons/jxpath/ri/NamespaceResolver.java
index 2713e317..7ff07167 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/NamespaceResolver.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/NamespaceResolver.java
@@ -49 +49 @@ public class NamespaceResolver implements Cloneable, Serializable {
-    protected static String getPrefix(final NodePointer pointer, final String namespaceURI) {
+    protected static String getPrefix(final NodePointer pointer, String namespaceURI) {
@@ -52 +52 @@ public class NamespaceResolver implements Cloneable, Serializable {
-            final NodeIterator ni = currentPointer.namespaceIterator();
+            NodeIterator ni = currentPointer.namespaceIterator();
@@ -54,2 +54,2 @@ public class NamespaceResolver implements Cloneable, Serializable {
-                final NodePointer nsPointer = ni.getNodePointer();
-                final String uri = nsPointer.getNamespaceURI();
+                NodePointer nsPointer = ni.getNodePointer();
+                String uri = nsPointer.getNamespaceURI();
@@ -57 +57 @@ public class NamespaceResolver implements Cloneable, Serializable {
-                    final String prefix = nsPointer.getName().getName();
+                    String prefix = nsPointer.getName().getName();
@@ -79 +79 @@ public class NamespaceResolver implements Cloneable, Serializable {
-    public NamespaceResolver(final NamespaceResolver parent) {
+    public NamespaceResolver(NamespaceResolver parent) {
@@ -89 +89 @@ public class NamespaceResolver implements Cloneable, Serializable {
-    public synchronized void registerNamespace(final String prefix, final String namespaceURI) {
+    public synchronized void registerNamespace(String prefix, String namespaceURI) {
@@ -102 +102 @@ public class NamespaceResolver implements Cloneable, Serializable {
-    public void setNamespaceContextPointer(final NodePointer pointer) {
+    public void setNamespaceContextPointer(NodePointer pointer) {
@@ -127,2 +127,2 @@ public class NamespaceResolver implements Cloneable, Serializable {
-    public synchronized String getNamespaceURI(final String prefix) {
-        final String uri = getExternallyRegisteredNamespaceURI(prefix);
+    public synchronized String getNamespaceURI(String prefix) {
+        String uri = getExternallyRegisteredNamespaceURI(prefix);
@@ -141,2 +141,2 @@ public class NamespaceResolver implements Cloneable, Serializable {
-            final String prefix) {
-        final String uri = (String) namespaceMap.get(prefix);
+            String prefix) {
+        String uri = (String) namespaceMap.get(prefix);
@@ -152,2 +152,2 @@ public class NamespaceResolver implements Cloneable, Serializable {
-    public synchronized String getPrefix(final String namespaceURI) {
-        final String prefix = getExternallyRegisteredPrefix(namespaceURI);
+    public synchronized String getPrefix(String namespaceURI) {
+        String prefix = getExternallyRegisteredPrefix(namespaceURI);
@@ -164,2 +164,2 @@ public class NamespaceResolver implements Cloneable, Serializable {
-    protected synchronized String getExternallyRegisteredPrefix(final String namespaceURI) {
-        final String prefix = (String) reverseMap.get(namespaceURI);
+    protected synchronized String getExternallyRegisteredPrefix(String namespaceURI) {
+        String prefix = (String) reverseMap.get(namespaceURI);
@@ -188 +187,0 @@ public class NamespaceResolver implements Cloneable, Serializable {
-    @Override
@@ -191 +190 @@ public class NamespaceResolver implements Cloneable, Serializable {
-            final NamespaceResolver result = (NamespaceResolver) super.clone();
+            NamespaceResolver result = (NamespaceResolver) super.clone();
@@ -195 +194 @@ public class NamespaceResolver implements Cloneable, Serializable {
-        catch (final CloneNotSupportedException e) {
+        catch (CloneNotSupportedException e) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/Parser.java b/src/main/java/org/apache/commons/jxpath/ri/Parser.java
index 58fe7cae..e4ba3bb6 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/Parser.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/Parser.java
@@ -41,2 +41,2 @@ public class Parser {
-        final String expression,
-        final Compiler compiler) {
+        String expression,
+        Compiler compiler) {
@@ -50 +50 @@ public class Parser {
-            catch (final TokenMgrError e) {
+            catch (TokenMgrError e) {
@@ -59 +59 @@ public class Parser {
-            catch (final ParseException e) {
+            catch (ParseException e) {
@@ -78 +78 @@ public class Parser {
-    private static String describePosition(final String expression, final int position) {
+    private static String describePosition(String expression, int position) {
@@ -94 +94 @@ public class Parser {
-    private static String addEscapes(final String string) {
+    private static String addEscapes(String string) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/QName.java b/src/main/java/org/apache/commons/jxpath/ri/QName.java
index 25d8e950..d5e6edc9 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/QName.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/QName.java
@@ -29,3 +29,3 @@ public class QName implements Serializable {
-    private final String prefix;
-    private final String name;
-    private final String qualifiedName;
+    private String prefix;
+    private String name;
+    private String qualifiedName;
@@ -37 +37 @@ public class QName implements Serializable {
-    public QName(final String qualifiedName) {
+    public QName(String qualifiedName) {
@@ -39 +39 @@ public class QName implements Serializable {
-        final int index = qualifiedName.indexOf(':');
+        int index = qualifiedName.indexOf(':');
@@ -49 +49 @@ public class QName implements Serializable {
-    public QName(final String prefix, final String localName) {
+    public QName(String prefix, String localName) {
@@ -71 +70,0 @@ public class QName implements Serializable {
-    @Override
@@ -76 +74,0 @@ public class QName implements Serializable {
-    @Override
@@ -81,2 +79 @@ public class QName implements Serializable {
-    @Override
-    public boolean equals(final Object object) {
+    public boolean equals(Object object) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/AncestorContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/AncestorContext.java
index 1230779f..b18b0b38 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/AncestorContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/AncestorContext.java
@@ -27 +27 @@ public class AncestorContext extends EvalContext {
-    private final NodeTest nodeTest;
+    private NodeTest nodeTest;
@@ -30 +30 @@ public class AncestorContext extends EvalContext {
-    private final boolean includeSelf;
+    private boolean includeSelf;
@@ -40,3 +40,3 @@ public class AncestorContext extends EvalContext {
-        final EvalContext parentContext,
-        final boolean includeSelf,
-        final NodeTest nodeTest) {
+        EvalContext parentContext,
+        boolean includeSelf,
+        NodeTest nodeTest) {
@@ -48 +47,0 @@ public class AncestorContext extends EvalContext {
-    @Override
@@ -53 +51,0 @@ public class AncestorContext extends EvalContext {
-    @Override
@@ -58 +55,0 @@ public class AncestorContext extends EvalContext {
-    @Override
@@ -64,2 +61 @@ public class AncestorContext extends EvalContext {
-    @Override
-    public boolean setPosition(final int position) {
+    public boolean setPosition(int position) {
@@ -78 +73,0 @@ public class AncestorContext extends EvalContext {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/AttributeContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/AttributeContext.java
index 67255c7f..142f0714 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/AttributeContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/AttributeContext.java
@@ -34 +34 @@ public class AttributeContext extends EvalContext {
-    private final NodeTest nodeTest;
+    private NodeTest nodeTest;
@@ -44 +44 @@ public class AttributeContext extends EvalContext {
-    public AttributeContext(final EvalContext parentContext, final NodeTest nodeTest) {
+    public AttributeContext(EvalContext parentContext, NodeTest nodeTest) {
@@ -49 +48,0 @@ public class AttributeContext extends EvalContext {
-    @Override
@@ -54 +52,0 @@ public class AttributeContext extends EvalContext {
-    @Override
@@ -61,2 +59 @@ public class AttributeContext extends EvalContext {
-    @Override
-    public boolean setPosition(final int position) {
+    public boolean setPosition(int position) {
@@ -75 +71,0 @@ public class AttributeContext extends EvalContext {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/ChildContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/ChildContext.java
index bfcc0213..9310bab4 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/ChildContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/ChildContext.java
@@ -30,3 +30,3 @@ public class ChildContext extends EvalContext {
-    private final NodeTest nodeTest;
-    private final boolean startFromParentLocation;
-    private final boolean reverse;
+    private NodeTest nodeTest;
+    private boolean startFromParentLocation;
+    private boolean reverse;
@@ -42,2 +42,2 @@ public class ChildContext extends EvalContext {
-    public ChildContext(final EvalContext parentContext, final NodeTest nodeTest,
-            final boolean startFromParentLocation, final boolean reverse) {
+    public ChildContext(EvalContext parentContext, NodeTest nodeTest,
+            boolean startFromParentLocation, boolean reverse) {
@@ -50 +49,0 @@ public class ChildContext extends EvalContext {
-    @Override
@@ -66 +64,0 @@ public class ChildContext extends EvalContext {
-    @Override
@@ -75 +73 @@ public class ChildContext extends EvalContext {
-                final NodePointer pointer = iterator.getNodePointer();
+                NodePointer pointer = iterator.getNodePointer();
@@ -85 +82,0 @@ public class ChildContext extends EvalContext {
-    @Override
@@ -90 +86,0 @@ public class ChildContext extends EvalContext {
-    @Override
@@ -96,3 +92,2 @@ public class ChildContext extends EvalContext {
-    @Override
-    public boolean setPosition(final int position) {
-        final int oldPosition = getCurrentPosition();
+    public boolean setPosition(int position) {
+        int oldPosition = getCurrentPosition();
@@ -103 +98 @@ public class ChildContext extends EvalContext {
-        return iterator != null && iterator.setPosition(position);
+        return iterator == null ? false : iterator.setPosition(position);
@@ -110 +105 @@ public class ChildContext extends EvalContext {
-        final NodePointer parent = parentContext.getCurrentNodePointer();
+        NodePointer parent = parentContext.getCurrentNodePointer();
@@ -114 +109 @@ public class ChildContext extends EvalContext {
-        final NodePointer useParent = startFromParentLocation ? parent.getParent() : parent;
+        NodePointer useParent = startFromParentLocation ? parent.getParent() : parent;
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/DescendantContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/DescendantContext.java
index 1610dd3c..3860b3e1 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/DescendantContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/DescendantContext.java
@@ -34 +34 @@ public class DescendantContext extends EvalContext {
-    private final NodeTest nodeTest;
+    private NodeTest nodeTest;
@@ -38 +38 @@ public class DescendantContext extends EvalContext {
-    private final boolean includeSelf;
+    private boolean includeSelf;
@@ -48,2 +48,2 @@ public class DescendantContext extends EvalContext {
-    public DescendantContext(final EvalContext parentContext, final boolean includeSelf,
-            final NodeTest nodeTest) {
+    public DescendantContext(EvalContext parentContext, boolean includeSelf,
+            NodeTest nodeTest) {
@@ -55 +54,0 @@ public class DescendantContext extends EvalContext {
-    @Override
@@ -60 +58,0 @@ public class DescendantContext extends EvalContext {
-    @Override
@@ -68 +65,0 @@ public class DescendantContext extends EvalContext {
-    @Override
@@ -74,2 +71 @@ public class DescendantContext extends EvalContext {
-    @Override
-    public boolean setPosition(final int position) {
+    public boolean setPosition(int position) {
@@ -88 +83,0 @@ public class DescendantContext extends EvalContext {
-    @Override
@@ -115 +110 @@ public class DescendantContext extends EvalContext {
-            final NodeIterator it = (NodeIterator) stack.peek();
+            NodeIterator it = (NodeIterator) stack.peek();
@@ -147 +142 @@ public class DescendantContext extends EvalContext {
-        final Object node = currentNodePointer.getNode();
+        Object node = currentNodePointer.getNode();
@@ -149,2 +144,2 @@ public class DescendantContext extends EvalContext {
-            final NodeIterator it = (NodeIterator) stack.get(i);
-            final Pointer pointer = it.getNodePointer();
+            NodeIterator it = (NodeIterator) stack.get(i);
+            Pointer pointer = it.getNodePointer();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/InitialContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/InitialContext.java
index f2c0335b..4ac2b9b0 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/InitialContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/InitialContext.java
@@ -31 +31 @@ public class InitialContext extends EvalContext {
-    private final NodePointer nodePointer;
+    private NodePointer nodePointer;
@@ -37 +37 @@ public class InitialContext extends EvalContext {
-    public InitialContext(final EvalContext parentContext) {
+    public InitialContext(EvalContext parentContext) {
@@ -43 +43 @@ public class InitialContext extends EvalContext {
-                nodePointer.getIndex() == NodePointer.WHOLE_COLLECTION;
+                (nodePointer.getIndex() == NodePointer.WHOLE_COLLECTION);
@@ -47 +46,0 @@ public class InitialContext extends EvalContext {
-    @Override
@@ -52 +50,0 @@ public class InitialContext extends EvalContext {
-    @Override
@@ -57 +54,0 @@ public class InitialContext extends EvalContext {
-    @Override
@@ -62 +58,0 @@ public class InitialContext extends EvalContext {
-    @Override
@@ -67,2 +63 @@ public class InitialContext extends EvalContext {
-    @Override
-    public boolean setPosition(final int position) {
+    public boolean setPosition(int position) {
@@ -80 +74,0 @@ public class InitialContext extends EvalContext {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/NamespaceContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/NamespaceContext.java
index ffcf7b1c..0b10129a 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/NamespaceContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/NamespaceContext.java
@@ -30 +30 @@ public class NamespaceContext extends EvalContext {
-    private final NodeTest nodeTest;
+    private NodeTest nodeTest;
@@ -39 +39 @@ public class NamespaceContext extends EvalContext {
-    public NamespaceContext(final EvalContext parentContext, final NodeTest nodeTest) {
+    public NamespaceContext(EvalContext parentContext, NodeTest nodeTest) {
@@ -44 +43,0 @@ public class NamespaceContext extends EvalContext {
-    @Override
@@ -49 +47,0 @@ public class NamespaceContext extends EvalContext {
-    @Override
@@ -56,2 +54 @@ public class NamespaceContext extends EvalContext {
-    @Override
-    public boolean setPosition(final int position) {
+    public boolean setPosition(int position) {
@@ -70 +66,0 @@ public class NamespaceContext extends EvalContext {
-    @Override
@@ -79,2 +75,2 @@ public class NamespaceContext extends EvalContext {
-            final NodeNameTest nodeNameTest = (NodeNameTest) nodeTest;
-            final QName testName = nodeNameTest.getNodeName();
+            NodeNameTest nodeNameTest = (NodeNameTest) nodeTest;
+            QName testName = nodeNameTest.getNodeName();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/NodeSetContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/NodeSetContext.java
index 9099fd78..552a0bc3 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/NodeSetContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/NodeSetContext.java
@@ -28 +28 @@ public class NodeSetContext extends EvalContext {
-    private final NodeSet nodeSet;
+    private NodeSet nodeSet;
@@ -35 +35 @@ public class NodeSetContext extends EvalContext {
-    public NodeSetContext(final EvalContext parentContext, final NodeSet nodeSet) {
+    public NodeSetContext(EvalContext parentContext, NodeSet nodeSet) {
@@ -40 +39,0 @@ public class NodeSetContext extends EvalContext {
-    @Override
@@ -45 +43,0 @@ public class NodeSetContext extends EvalContext {
-    @Override
@@ -53,2 +51 @@ public class NodeSetContext extends EvalContext {
-    @Override
-    public boolean setPosition(final int position) {
+    public boolean setPosition(int position) {
@@ -59 +55,0 @@ public class NodeSetContext extends EvalContext {
-    @Override
@@ -68 +63,0 @@ public class NodeSetContext extends EvalContext {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/ParentContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/ParentContext.java
index d11b134c..55397f8e 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/ParentContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/ParentContext.java
@@ -27 +27 @@ public class ParentContext extends EvalContext {
-    private final NodeTest nodeTest;
+    private NodeTest nodeTest;
@@ -36 +36 @@ public class ParentContext extends EvalContext {
-    public ParentContext(final EvalContext parentContext, final NodeTest nodeTest) {
+    public ParentContext(EvalContext parentContext, NodeTest nodeTest) {
@@ -41 +40,0 @@ public class ParentContext extends EvalContext {
-    @Override
@@ -46 +44,0 @@ public class ParentContext extends EvalContext {
-    @Override
@@ -51 +48,0 @@ public class ParentContext extends EvalContext {
-    @Override
@@ -56 +52,0 @@ public class ParentContext extends EvalContext {
-    @Override
@@ -62,2 +58 @@ public class ParentContext extends EvalContext {
-    @Override
-    public boolean setPosition(final int position) {
+    public boolean setPosition(int position) {
@@ -68 +62,0 @@ public class ParentContext extends EvalContext {
-    @Override
@@ -75 +69 @@ public class ParentContext extends EvalContext {
-        final NodePointer thisLocation = parentContext.getCurrentNodePointer();
+        NodePointer thisLocation = parentContext.getCurrentNodePointer();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/PrecedingOrFollowingContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/PrecedingOrFollowingContext.java
index b3b84aa2..9698cdb6 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/PrecedingOrFollowingContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/PrecedingOrFollowingContext.java
@@ -30 +30 @@ public class PrecedingOrFollowingContext extends EvalContext {
-    private final NodeTest nodeTest;
+    private NodeTest nodeTest;
@@ -35 +35 @@ public class PrecedingOrFollowingContext extends EvalContext {
-    private final boolean reverse;
+    private boolean reverse;
@@ -44,3 +44,3 @@ public class PrecedingOrFollowingContext extends EvalContext {
-        final EvalContext parentContext,
-        final NodeTest nodeTest,
-        final boolean reverse) {
+        EvalContext parentContext,
+        NodeTest nodeTest,
+        boolean reverse) {
@@ -52 +51,0 @@ public class PrecedingOrFollowingContext extends EvalContext {
-    @Override
@@ -57 +55,0 @@ public class PrecedingOrFollowingContext extends EvalContext {
-    @Override
@@ -62 +59,0 @@ public class PrecedingOrFollowingContext extends EvalContext {
-    @Override
@@ -68,2 +65 @@ public class PrecedingOrFollowingContext extends EvalContext {
-    @Override
-    public boolean setPosition(final int position) {
+    public boolean setPosition(int position) {
@@ -82 +77,0 @@ public class PrecedingOrFollowingContext extends EvalContext {
-    @Override
@@ -93 +88 @@ public class PrecedingOrFollowingContext extends EvalContext {
-            final NodePointer parent = currentRootLocation.getParent();
+            NodePointer parent = currentRootLocation.getParent();
@@ -110 +105 @@ public class PrecedingOrFollowingContext extends EvalContext {
-                final NodePointer parent = currentRootLocation.getParent();
+                NodePointer parent = currentRootLocation.getParent();
@@ -122 +117 @@ public class PrecedingOrFollowingContext extends EvalContext {
-                    final NodeIterator it = (NodeIterator) stack.peek();
+                    NodeIterator it = (NodeIterator) stack.peek();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java
index b2e1deaa..ed0549ee 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java
@@ -33 +33 @@ public class PredicateContext extends EvalContext {
-    private final Expression expression;
+    private Expression expression;
@@ -43 +43 @@ public class PredicateContext extends EvalContext {
-    public PredicateContext(final EvalContext parentContext, final Expression expression) {
+    public PredicateContext(EvalContext parentContext, Expression expression) {
@@ -52 +51,0 @@ public class PredicateContext extends EvalContext {
-    @Override
@@ -59,2 +58,2 @@ public class PredicateContext extends EvalContext {
-                final Object pred = nameTestExpression.computeValue(parentContext);
-                final String propertyName = InfoSetUtil.stringValue(pred);
+                Object pred = nameTestExpression.computeValue(parentContext);
+                String propertyName = InfoSetUtil.stringValue(pred);
@@ -71,3 +70,3 @@ public class PredicateContext extends EvalContext {
-                final String[] names = dynamicPropertyPointer.getPropertyNames();
-                for (final String name : names) {
-                    if (name.equals(propertyName)) {
+                String[] names = dynamicPropertyPointer.getPropertyNames();
+                for (int i = 0; i < names.length; i++) {
+                    if (names[i].equals(propertyName)) {
@@ -98 +97 @@ public class PredicateContext extends EvalContext {
-                    final int pos = (int) InfoSetUtil.doubleValue(pred);
+                    int pos = (int) InfoSetUtil.doubleValue(pred);
@@ -137,2 +136 @@ public class PredicateContext extends EvalContext {
-    @Override
-    public boolean setPosition(final int position) {
+    public boolean setPosition(int position) {
@@ -155 +152,0 @@ public class PredicateContext extends EvalContext {
-    @Override
@@ -166 +162,0 @@ public class PredicateContext extends EvalContext {
-    @Override
@@ -173 +168,0 @@ public class PredicateContext extends EvalContext {
-    @Override
@@ -184 +179 @@ public class PredicateContext extends EvalContext {
-    private boolean setPositionStandard(final int position) {
+    private boolean setPositionStandard(int position) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/RootContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/RootContext.java
index 4d56111c..0e9fa2d9 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/RootContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/RootContext.java
@@ -31,2 +31,2 @@ public class RootContext extends EvalContext {
-    private final JXPathContextReferenceImpl jxpathContext;
-    private final NodePointer pointer;
+    private JXPathContextReferenceImpl jxpathContext;
+    private NodePointer pointer;
@@ -43,2 +43,2 @@ public class RootContext extends EvalContext {
-    public RootContext(final JXPathContextReferenceImpl jxpathContext,
-            final NodePointer pointer) {
+    public RootContext(JXPathContextReferenceImpl jxpathContext,
+            NodePointer pointer) {
@@ -53 +52,0 @@ public class RootContext extends EvalContext {
-    @Override
@@ -58 +56,0 @@ public class RootContext extends EvalContext {
-    @Override
@@ -71 +68,0 @@ public class RootContext extends EvalContext {
-    @Override
@@ -76 +72,0 @@ public class RootContext extends EvalContext {
-    @Override
@@ -81 +76,0 @@ public class RootContext extends EvalContext {
-    @Override
@@ -86 +80,0 @@ public class RootContext extends EvalContext {
-    @Override
@@ -91 +84,0 @@ public class RootContext extends EvalContext {
-    @Override
@@ -96,2 +89 @@ public class RootContext extends EvalContext {
-    @Override
-    public boolean setPosition(final int position) {
+    public boolean setPosition(int position) {
@@ -106 +98 @@ public class RootContext extends EvalContext {
-    public EvalContext getConstantContext(final Object constant) {
+    public EvalContext getConstantContext(Object constant) {
@@ -131 +123 @@ public class RootContext extends EvalContext {
-    public EvalContext getVariableContext(final QName variableName) {
+    public EvalContext getVariableContext(QName variableName) {
@@ -144 +136 @@ public class RootContext extends EvalContext {
-    public Function getFunction(final QName functionName, final Object[] parameters) {
+    public Function getFunction(QName functionName, Object[] parameters) {
@@ -153 +145 @@ public class RootContext extends EvalContext {
-    public Object getRegisteredValue(final int id) {
+    public Object getRegisteredValue(int id) {
@@ -165 +157 @@ public class RootContext extends EvalContext {
-    public int setRegisteredValue(final Object value) {
+    public int setRegisteredValue(Object value) {
@@ -180 +171,0 @@ public class RootContext extends EvalContext {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/SelfContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/SelfContext.java
index 2a45a526..32891739 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/SelfContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/SelfContext.java
@@ -29 +29 @@ public class SelfContext extends EvalContext {
-    private final NodeTest nodeTest;
+    private NodeTest nodeTest;
@@ -38 +38 @@ public class SelfContext extends EvalContext {
-    public SelfContext(final EvalContext parentContext, final NodeTest nodeTest) {
+    public SelfContext(EvalContext parentContext, NodeTest nodeTest) {
@@ -43 +42,0 @@ public class SelfContext extends EvalContext {
-    @Override
@@ -48 +46,0 @@ public class SelfContext extends EvalContext {
-    @Override
@@ -56 +53,0 @@ public class SelfContext extends EvalContext {
-    @Override
@@ -61 +57,0 @@ public class SelfContext extends EvalContext {
-    @Override
@@ -67,2 +63 @@ public class SelfContext extends EvalContext {
-    @Override
-    public boolean setPosition(final int position) {
+    public boolean setPosition(int position) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java b/src/main/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java
index 8f3c5c75..e96937e7 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java
@@ -76 +76 @@ public class SimplePathInterpreter {
-            final EvalContext context, final NodePointer root, final Step[] steps) {
+            EvalContext context, NodePointer root, Step[] steps) {
@@ -78 +78 @@ public class SimplePathInterpreter {
-        final NodePointer pointer = doStep(context, root, steps, 0);
+        NodePointer pointer = doStep(context, root, steps, 0);
@@ -98,2 +98,2 @@ public class SimplePathInterpreter {
-                final EvalContext context, final NodePointer root,
-                final Expression[] predicates, final Step[] steps) {
+                EvalContext context, NodePointer root,
+                Expression[] predicates, Step[] steps) {
@@ -102 +102 @@ public class SimplePathInterpreter {
-        final NodePointer pointer =
+        NodePointer pointer =
@@ -121,2 +121,2 @@ public class SimplePathInterpreter {
-            final EvalContext context, NodePointer parent,
-            final Step[] steps, final int currentStep) {
+            EvalContext context, NodePointer parent,
+            Step[] steps, int currentStep) {
@@ -135,2 +135,2 @@ public class SimplePathInterpreter {
-        final Step step = steps[currentStep];
-        final Expression[] predicates = step.getPredicates();
+        Step step = steps[currentStep];
+        Expression[] predicates = step.getPredicates();
@@ -192,3 +192,3 @@ public class SimplePathInterpreter {
-                final EvalContext context, final PropertyOwnerPointer parentPointer,
-                final Step[] steps, final int currentStep) {
-        final Step step = steps[currentStep];
+                EvalContext context, PropertyOwnerPointer parentPointer,
+                Step[] steps, int currentStep) {
+        Step step = steps[currentStep];
@@ -220 +220 @@ public class SimplePathInterpreter {
-            final int count = childPointer.getLength();
+            int count = childPointer.getLength();
@@ -223 +223 @@ public class SimplePathInterpreter {
-                final NodePointer pointer =
+                NodePointer pointer =
@@ -225 +225 @@ public class SimplePathInterpreter {
-                final int quality = computeQuality(pointer);
+                int quality = computeQuality(pointer);
@@ -258,3 +258,3 @@ public class SimplePathInterpreter {
-                final EvalContext context, final NodePointer parentPointer,
-                final Step[] steps, final int currentStep) {
-        final Step step = steps[currentStep];
+                EvalContext context, NodePointer parentPointer,
+                Step[] steps, int currentStep) {
+        Step step = steps[currentStep];
@@ -268 +268 @@ public class SimplePathInterpreter {
-        final NodeIterator it = getNodeIterator(context, parentPointer, step);
+        NodeIterator it = getNodeIterator(context, parentPointer, step);
@@ -271 +271 @@ public class SimplePathInterpreter {
-                final NodePointer childPointer = it.getNodePointer();
+                NodePointer childPointer = it.getNodePointer();
@@ -276 +276 @@ public class SimplePathInterpreter {
-                final NodePointer pointer = doStep(
+                NodePointer pointer = doStep(
@@ -278 +278 @@ public class SimplePathInterpreter {
-                final int quality = computeQuality(pointer);
+                int quality = computeQuality(pointer);
@@ -303,4 +303,4 @@ public class SimplePathInterpreter {
-            final EvalContext context, final PropertyOwnerPointer parentPointer,
-            final Step[] steps, final int currentStep) {
-        final Step step = steps[currentStep];
-        final Expression[] predicates = step.getPredicates();
+            EvalContext context, PropertyOwnerPointer parentPointer,
+            Step[] steps, int currentStep) {
+        Step step = steps[currentStep];
+        Expression[] predicates = step.getPredicates();
@@ -308 +308 @@ public class SimplePathInterpreter {
-        final NodePointer childPointer =
+        NodePointer childPointer =
@@ -336,2 +336,2 @@ public class SimplePathInterpreter {
-                final PropertyOwnerPointer parentPointer, final Step step) {
-        final int axis = step.getAxis();
+                PropertyOwnerPointer parentPointer, Step step) {
+        int axis = step.getAxis();
@@ -339 +339 @@ public class SimplePathInterpreter {
-            final QName name = ((NodeNameTest) step.getNodeTest()).getNodeName();
+            QName name = ((NodeNameTest) step.getNodeTest()).getNodeName();
@@ -344 +344 @@ public class SimplePathInterpreter {
-                final NodePointer childPointer = parentPointer.getPropertyPointer();
+                NodePointer childPointer = parentPointer.getPropertyPointer();
@@ -367,4 +367,4 @@ public class SimplePathInterpreter {
-            final EvalContext context, final NodePointer parent,
-            final Step[] steps, final int currentStep) {
-        final Step step = steps[currentStep];
-        final Expression[] predicates = step.getPredicates();
+            EvalContext context, NodePointer parent,
+            Step[] steps, int currentStep) {
+        Step step = steps[currentStep];
+        Expression[] predicates = step.getPredicates();
@@ -372 +372 @@ public class SimplePathInterpreter {
-        final int axis = step.getAxis();
+        int axis = step.getAxis();
@@ -383 +383 @@ public class SimplePathInterpreter {
-        final Expression predicate = predicates[0];
+        Expression predicate = predicates[0];
@@ -391 +391 @@ public class SimplePathInterpreter {
-            final NodeIterator it = getNodeIterator(context, parent, step);
+            NodeIterator it = getNodeIterator(context, parent, step);
@@ -395 +395 @@ public class SimplePathInterpreter {
-                    final String key = keyFromPredicate(context, predicate);
+                    String key = keyFromPredicate(context, predicate);
@@ -397 +397 @@ public class SimplePathInterpreter {
-                        final NodePointer ptr = it.getNodePointer();
+                        NodePointer ptr = it.getNodePointer();
@@ -405 +405 @@ public class SimplePathInterpreter {
-                    final int index = indexFromPredicate(context, predicate);
+                    int index = indexFromPredicate(context, predicate);
@@ -416 +416 @@ public class SimplePathInterpreter {
-            final NodeIterator it = getNodeIterator(context, parent, step);
+            NodeIterator it = getNodeIterator(context, parent, step);
@@ -418 +418 @@ public class SimplePathInterpreter {
-                final List list = new ArrayList();
+                List list = new ArrayList();
@@ -422 +422 @@ public class SimplePathInterpreter {
-                final NodePointer pointer =
+                NodePointer pointer =
@@ -450,3 +450,3 @@ public class SimplePathInterpreter {
-                final EvalContext context, final NodePointer parent,
-                final Step[] steps, final int currentStep,
-                final Expression[] predicates, final int currentPredicate) {
+                EvalContext context, NodePointer parent,
+                Step[] steps, int currentStep,
+                Expression[] predicates, int currentPredicate) {
@@ -457 +457 @@ public class SimplePathInterpreter {
-        final Expression predicate = predicates[currentPredicate];
+        Expression predicate = predicates[currentPredicate];
@@ -488,5 +488,5 @@ public class SimplePathInterpreter {
-            final EvalContext context, final NodePointer parent,
-            final Step[] steps, final int currentStep,
-            final Expression[] predicates, final int currentPredicate) {
-        final Expression predicate = predicates[currentPredicate];
-        final String key = keyFromPredicate(context, predicate);
+            EvalContext context, NodePointer parent,
+            Step[] steps, int currentStep,
+            Expression[] predicates, int currentPredicate) {
+        Expression predicate = predicates[currentPredicate];
+        String key = keyFromPredicate(context, predicate);
@@ -495 +495 @@ public class SimplePathInterpreter {
-            final PropertyPointer pointer =
+            PropertyPointer pointer =
@@ -518 +518 @@ public class SimplePathInterpreter {
-            final int count = child.getLength();
+            int count = child.getLength();
@@ -521 +521 @@ public class SimplePathInterpreter {
-                final NodePointer valuePointer = valuePointer(child);
+                NodePointer valuePointer = valuePointer(child);
@@ -523 +523 @@ public class SimplePathInterpreter {
-                if (valuePointer instanceof PropertyOwnerPointer
+                if ((valuePointer instanceof PropertyOwnerPointer)
@@ -548 +548 @@ public class SimplePathInterpreter {
-                    final int quality = computeQuality(pointer);
+                    int quality = computeQuality(pointer);
@@ -566 +566 @@ public class SimplePathInterpreter {
-            final NodePointer found =
+            NodePointer found =
@@ -600,3 +600,3 @@ public class SimplePathInterpreter {
-                final EvalContext context, final List parents,
-                final Step[] steps, final int currentStep,
-                final Expression[] predicates, final int currentPredicate) {
+                EvalContext context, List parents,
+                Step[] steps, int currentStep,
+                Expression[] predicates, int currentPredicate) {
@@ -611 +611 @@ public class SimplePathInterpreter {
-            final NodePointer pointer = (NodePointer) parents.get(0);
+            NodePointer pointer = (NodePointer) parents.get(0);
@@ -615 +615 @@ public class SimplePathInterpreter {
-        final Expression predicate = predicates[currentPredicate];
+        Expression predicate = predicates[currentPredicate];
@@ -617,2 +617,2 @@ public class SimplePathInterpreter {
-            final String key = keyFromPredicate(context, predicate);
-            final List newList = new ArrayList();
+            String key = keyFromPredicate(context, predicate);
+            List newList = new ArrayList();
@@ -620 +620 @@ public class SimplePathInterpreter {
-                final NodePointer pointer = (NodePointer) parents.get(i);
+                NodePointer pointer = (NodePointer) parents.get(i);
@@ -640 +640 @@ public class SimplePathInterpreter {
-            final int index = indexFromPredicate(context, predicate);
+            int index = indexFromPredicate(context, predicate);
@@ -644 +644 @@ public class SimplePathInterpreter {
-            final NodePointer ptr = (NodePointer) parents.get(index);
+            NodePointer ptr = (NodePointer) parents.get(index);
@@ -667,5 +667,5 @@ public class SimplePathInterpreter {
-            final EvalContext context, final NodePointer parent,
-            final Step[] steps, final int currentStep,
-            final Expression[] predicates, final int currentPredicate) {
-        final Expression predicate = predicates[currentPredicate];
-        final int index = indexFromPredicate(context, predicate);
+            EvalContext context, NodePointer parent,
+            Step[] steps, int currentStep,
+            Expression[] predicates, int currentPredicate) {
+        Expression predicate = predicates[currentPredicate];
+        int index = indexFromPredicate(context, predicate);
@@ -701,2 +701,2 @@ public class SimplePathInterpreter {
-        final EvalContext context,
-        final Expression predicate) {
+        EvalContext context,
+        Expression predicate) {
@@ -728,3 +728,3 @@ public class SimplePathInterpreter {
-    private static String keyFromPredicate(final EvalContext context,
-                final Expression predicate) {
-        final Expression expr =
+    private static String keyFromPredicate(EvalContext context,
+                Expression predicate) {
+        Expression expr =
@@ -759,3 +759,3 @@ public class SimplePathInterpreter {
-        final NodePointer pointer,
-        final String name) {
-        final NodeIterator it = pointer.attributeIterator(QNAME_NAME);
+        NodePointer pointer,
+        String name) {
+        NodeIterator it = pointer.attributeIterator(QNAME_NAME);
@@ -775,2 +775,2 @@ public class SimplePathInterpreter {
-        final NodePointer pointer,
-        final int index) {
+        NodePointer pointer,
+        int index) {
@@ -779 +779 @@ public class SimplePathInterpreter {
-                || pointer.isCollection()
+                || (pointer.isCollection()
@@ -781 +781 @@ public class SimplePathInterpreter {
-                    && index < pointer.getLength());
+                    && index < pointer.getLength()));
@@ -790 +790 @@ public class SimplePathInterpreter {
-    private static NodePointer valuePointer(final NodePointer pointer) {
+    private static NodePointer valuePointer(NodePointer pointer) {
@@ -805,2 +805,2 @@ public class SimplePathInterpreter {
-            final EvalContext context, NodePointer parent, final Step[] steps,
-            final int currentStep) {
+            EvalContext context, NodePointer parent, Step[] steps,
+            int currentStep) {
@@ -813 +813 @@ public class SimplePathInterpreter {
-        final Step step = steps[currentStep];
+        Step step = steps[currentStep];
@@ -815 +815 @@ public class SimplePathInterpreter {
-        final int axis = step.getAxis();
+        int axis = step.getAxis();
@@ -817,2 +817,2 @@ public class SimplePathInterpreter {
-            final NullPropertyPointer pointer = new NullPropertyPointer(parent);
-            final QName name = ((NodeNameTest) step.getNodeTest()).getNodeName();
+            NullPropertyPointer pointer = new NullPropertyPointer(parent);
+            QName name = ((NodeNameTest) step.getNodeTest()).getNodeName();
@@ -825 +825 @@ public class SimplePathInterpreter {
-        final Expression[] predicates = step.getPredicates();
+        Expression[] predicates = step.getPredicates();
@@ -846,3 +846,3 @@ public class SimplePathInterpreter {
-            final EvalContext context, NodePointer parent,
-            final Step[] steps, final int currentStep,
-            final Expression[] predicates, final int currentPredicate) {
+            EvalContext context, NodePointer parent,
+            Step[] steps, int currentStep,
+            Expression[] predicates, int currentPredicate) {
@@ -850 +850 @@ public class SimplePathInterpreter {
-            final Expression predicate = predicates[i];
+            Expression predicate = predicates[i];
@@ -852 +852 @@ public class SimplePathInterpreter {
-                final String key = keyFromPredicate(context, predicate);
+                String key = keyFromPredicate(context, predicate);
@@ -854 +854 @@ public class SimplePathInterpreter {
-                final NullPropertyPointer pointer = new NullPropertyPointer(parent);
+                NullPropertyPointer pointer = new NullPropertyPointer(parent);
@@ -859 +859 @@ public class SimplePathInterpreter {
-                final int index = indexFromPredicate(context, predicate);
+                int index = indexFromPredicate(context, predicate);
@@ -881,3 +881,3 @@ public class SimplePathInterpreter {
-        final EvalContext context,
-        final NodePointer pointer,
-        final Step step) {
+        EvalContext context,
+        NodePointer pointer,
+        Step step) {
@@ -886,2 +886,2 @@ public class SimplePathInterpreter {
-            final QName qname = ((NodeNameTest) nodeTest).getNodeName();
-            final String prefix = qname.getPrefix();
+            QName qname = ((NodeNameTest) nodeTest).getNodeName();
+            String prefix = qname.getPrefix();
@@ -889 +889 @@ public class SimplePathInterpreter {
-                final String namespaceURI = context.getJXPathContext()
+                String namespaceURI = context.getJXPathContext()
@@ -910 +910 @@ public class SimplePathInterpreter {
-    private static boolean isLangAttribute(final QName name) {
+    private static boolean isLangAttribute(QName name) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/UnionContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/UnionContext.java
index c454e643..fa0d48c7 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/UnionContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/UnionContext.java
@@ -32 +32 @@ public class UnionContext extends NodeSetContext {
-    private final EvalContext[] contexts;
+    private EvalContext[] contexts;
@@ -40 +40 @@ public class UnionContext extends NodeSetContext {
-    public UnionContext(final EvalContext parentContext, final EvalContext[] contexts) {
+    public UnionContext(EvalContext parentContext, EvalContext[] contexts) {
@@ -45 +44,0 @@ public class UnionContext extends NodeSetContext {
-    @Override
@@ -50,2 +49 @@ public class UnionContext extends NodeSetContext {
-    @Override
-    public boolean setPosition(final int position) {
+    public boolean setPosition(int position) {
@@ -54,3 +52,4 @@ public class UnionContext extends NodeSetContext {
-            final BasicNodeSet nodeSet = (BasicNodeSet) getNodeSet();
-            final ArrayList pointers = new ArrayList();
-            for (final EvalContext ctx : contexts) {
+            BasicNodeSet nodeSet = (BasicNodeSet) getNodeSet();
+            ArrayList pointers = new ArrayList();
+            for (int i = 0; i < contexts.length; i++) {
+                EvalContext ctx = contexts[i];
@@ -59 +58 @@ public class UnionContext extends NodeSetContext {
-                        final NodePointer ptr = ctx.getCurrentNodePointer();
+                        NodePointer ptr = ctx.getCurrentNodePointer();
@@ -68 +67 @@ public class UnionContext extends NodeSetContext {
-            for (final Iterator it = pointers.iterator(); it.hasNext();) {
+            for (Iterator it = pointers.iterator(); it.hasNext();) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/Constant.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/Constant.java
index 6fe6d365..928f96b8 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/Constant.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/Constant.java
@@ -27 +27 @@ public class Constant extends Expression {
-    private final Object value;
+    private Object value;
@@ -33 +33 @@ public class Constant extends Expression {
-    public Constant(final Number number) {
+    public Constant(Number number) {
@@ -41 +41 @@ public class Constant extends Expression {
-    public Constant(final String string) {
+    public Constant(String string) {
@@ -45,2 +45 @@ public class Constant extends Expression {
-    @Override
-    public Object compute(final EvalContext context) {
+    public Object compute(EvalContext context) {
@@ -50,2 +49 @@ public class Constant extends Expression {
-    @Override
-    public Object computeValue(final EvalContext context) {
+    public Object computeValue(EvalContext context) {
@@ -59 +56,0 @@ public class Constant extends Expression {
-    @Override
@@ -68 +64,0 @@ public class Constant extends Expression {
-    @Override
@@ -73 +68,0 @@ public class Constant extends Expression {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java
index 8c871599..4230999f 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java
@@ -42,2 +42,2 @@ public class CoreFunction extends Operation {
-    private static final Double ZERO = Double.valueOf(0);
-    private final int functionCode;
+    private static final Double ZERO = new Double(0);
+    private int functionCode;
@@ -50 +50 @@ public class CoreFunction extends Operation {
-    public CoreFunction(final int functionCode, final Expression[] args) {
+    public CoreFunction(int functionCode, Expression[] args) {
@@ -175 +174,0 @@ public class CoreFunction extends Operation {
-    @Override
@@ -222 +220,0 @@ public class CoreFunction extends Operation {
-    @Override
@@ -224 +222 @@ public class CoreFunction extends Operation {
-        final StringBuffer buffer = new StringBuffer();
+        StringBuffer buffer = new StringBuffer();
@@ -227 +225 @@ public class CoreFunction extends Operation {
-        final Expression[] args = getArguments();
+        Expression[] args = getArguments();
@@ -240,2 +238 @@ public class CoreFunction extends Operation {
-    @Override
-    public Object compute(final EvalContext context) {
+    public Object compute(EvalContext context) {
@@ -245,2 +242 @@ public class CoreFunction extends Operation {
-    @Override
-    public Object computeValue(final EvalContext context) {
+    public Object computeValue(EvalContext context) {
@@ -320 +316 @@ public class CoreFunction extends Operation {
-    protected Object functionLast(final EvalContext context) {
+    protected Object functionLast(EvalContext context) {
@@ -324 +320 @@ public class CoreFunction extends Operation {
-        final int old = context.getCurrentPosition();
+        int old = context.getCurrentPosition();
@@ -335 +331 @@ public class CoreFunction extends Operation {
-        return Double.valueOf(count);
+        return new Double(count);
@@ -343 +339 @@ public class CoreFunction extends Operation {
-    protected Object functionPosition(final EvalContext context) {
+    protected Object functionPosition(EvalContext context) {
@@ -345 +341 @@ public class CoreFunction extends Operation {
-        return Integer.valueOf(context.getCurrentPosition());
+        return new Integer(context.getCurrentPosition());
@@ -353 +349 @@ public class CoreFunction extends Operation {
-    protected Object functionCount(final EvalContext context) {
+    protected Object functionCount(EvalContext context) {
@@ -355 +351 @@ public class CoreFunction extends Operation {
-        final Expression arg1 = getArg1();
+        Expression arg1 = getArg1();
@@ -362 +358 @@ public class CoreFunction extends Operation {
-            final EvalContext ctx = (EvalContext) value;
+            EvalContext ctx = (EvalContext) value;
@@ -377 +373 @@ public class CoreFunction extends Operation {
-        return Double.valueOf(count);
+        return new Double(count);
@@ -385 +381 @@ public class CoreFunction extends Operation {
-    protected Object functionLang(final EvalContext context) {
+    protected Object functionLang(EvalContext context) {
@@ -387,2 +383,2 @@ public class CoreFunction extends Operation {
-        final String lang = InfoSetUtil.stringValue(getArg1().computeValue(context));
-        final NodePointer pointer = (NodePointer) context.getSingleNodePointer();
+        String lang = InfoSetUtil.stringValue(getArg1().computeValue(context));
+        NodePointer pointer = (NodePointer) context.getSingleNodePointer();
@@ -400 +396 @@ public class CoreFunction extends Operation {
-    protected Object functionID(final EvalContext context) {
+    protected Object functionID(EvalContext context) {
@@ -402,3 +398,3 @@ public class CoreFunction extends Operation {
-        final String id = InfoSetUtil.stringValue(getArg1().computeValue(context));
-        final JXPathContext jxpathContext = context.getJXPathContext();
-        final NodePointer pointer = (NodePointer) jxpathContext.getContextPointer();
+        String id = InfoSetUtil.stringValue(getArg1().computeValue(context));
+        JXPathContext jxpathContext = context.getJXPathContext();
+        NodePointer pointer = (NodePointer) jxpathContext.getContextPointer();
@@ -413 +409 @@ public class CoreFunction extends Operation {
-    protected Object functionKey(final EvalContext context) {
+    protected Object functionKey(EvalContext context) {
@@ -415 +411 @@ public class CoreFunction extends Operation {
-        final String key = InfoSetUtil.stringValue(getArg1().computeValue(context));
+        String key = InfoSetUtil.stringValue(getArg1().computeValue(context));
@@ -427 +423 @@ public class CoreFunction extends Operation {
-        final JXPathContext jxpathContext = context.getJXPathContext();
+        JXPathContext jxpathContext = context.getJXPathContext();
@@ -430 +426 @@ public class CoreFunction extends Operation {
-            final BasicNodeSet accum = new BasicNodeSet();
+            BasicNodeSet accum = new BasicNodeSet();
@@ -446 +442 @@ public class CoreFunction extends Operation {
-    protected Object functionNamespaceURI(final EvalContext context) {
+    protected Object functionNamespaceURI(EvalContext context) {
@@ -448,2 +444,2 @@ public class CoreFunction extends Operation {
-            final NodePointer ptr = context.getCurrentNodePointer();
-            final String str = ptr.getNamespaceURI();
+            NodePointer ptr = context.getCurrentNodePointer();
+            String str = ptr.getNamespaceURI();
@@ -453 +449 @@ public class CoreFunction extends Operation {
-        final Object set = getArg1().compute(context);
+        Object set = getArg1().compute(context);
@@ -455 +451 @@ public class CoreFunction extends Operation {
-            final EvalContext ctx = (EvalContext) set;
+            EvalContext ctx = (EvalContext) set;
@@ -457,2 +453,2 @@ public class CoreFunction extends Operation {
-                final NodePointer ptr = (NodePointer) ctx.next();
-                final String str = ptr.getNamespaceURI();
+                NodePointer ptr = (NodePointer) ctx.next();
+                String str = ptr.getNamespaceURI();
@@ -470 +466 @@ public class CoreFunction extends Operation {
-    protected Object functionLocalName(final EvalContext context) {
+    protected Object functionLocalName(EvalContext context) {
@@ -472 +468 @@ public class CoreFunction extends Operation {
-            final NodePointer ptr = context.getCurrentNodePointer();
+            NodePointer ptr = context.getCurrentNodePointer();
@@ -476 +472 @@ public class CoreFunction extends Operation {
-        final Object set = getArg1().compute(context);
+        Object set = getArg1().compute(context);
@@ -478 +474 @@ public class CoreFunction extends Operation {
-            final EvalContext ctx = (EvalContext) set;
+            EvalContext ctx = (EvalContext) set;
@@ -480 +476 @@ public class CoreFunction extends Operation {
-                final NodePointer ptr = (NodePointer) ctx.next();
+                NodePointer ptr = (NodePointer) ctx.next();
@@ -492 +488 @@ public class CoreFunction extends Operation {
-    protected Object functionName(final EvalContext context) {
+    protected Object functionName(EvalContext context) {
@@ -494 +490 @@ public class CoreFunction extends Operation {
-            final NodePointer ptr = context.getCurrentNodePointer();
+            NodePointer ptr = context.getCurrentNodePointer();
@@ -498 +494 @@ public class CoreFunction extends Operation {
-        final Object set = getArg1().compute(context);
+        Object set = getArg1().compute(context);
@@ -500 +496 @@ public class CoreFunction extends Operation {
-            final EvalContext ctx = (EvalContext) set;
+            EvalContext ctx = (EvalContext) set;
@@ -502 +498 @@ public class CoreFunction extends Operation {
-                final NodePointer ptr = (NodePointer) ctx.next();
+                NodePointer ptr = (NodePointer) ctx.next();
@@ -514 +510 @@ public class CoreFunction extends Operation {
-    protected Object functionString(final EvalContext context) {
+    protected Object functionString(EvalContext context) {
@@ -527 +523 @@ public class CoreFunction extends Operation {
-    protected Object functionConcat(final EvalContext context) {
+    protected Object functionConcat(EvalContext context) {
@@ -531,4 +527,4 @@ public class CoreFunction extends Operation {
-        final StringBuffer buffer = new StringBuffer();
-        final Expression[] args = getArguments();
-        for (final Expression arg : args) {
-            buffer.append(InfoSetUtil.stringValue(arg.compute(context)));
+        StringBuffer buffer = new StringBuffer();
+        Expression[] args = getArguments();
+        for (int i = 0; i < args.length; i++) {
+            buffer.append(InfoSetUtil.stringValue(args[i].compute(context)));
@@ -544 +540 @@ public class CoreFunction extends Operation {
-    protected Object functionStartsWith(final EvalContext context) {
+    protected Object functionStartsWith(EvalContext context) {
@@ -546,2 +542,2 @@ public class CoreFunction extends Operation {
-        final String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
-        final String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
+        String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
+        String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
@@ -557 +553 @@ public class CoreFunction extends Operation {
-    protected Object functionEndsWith(final EvalContext context) {
+    protected Object functionEndsWith(EvalContext context) {
@@ -559,2 +555,2 @@ public class CoreFunction extends Operation {
-        final String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
-        final String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
+        String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
+        String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
@@ -569 +565 @@ public class CoreFunction extends Operation {
-    protected Object functionContains(final EvalContext context) {
+    protected Object functionContains(EvalContext context) {
@@ -571,2 +567,2 @@ public class CoreFunction extends Operation {
-        final String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
-        final String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
+        String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
+        String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
@@ -581 +577 @@ public class CoreFunction extends Operation {
-    protected Object functionSubstringBefore(final EvalContext context) {
+    protected Object functionSubstringBefore(EvalContext context) {
@@ -583,3 +579,3 @@ public class CoreFunction extends Operation {
-        final String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
-        final String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
-        final int index = s1.indexOf(s2);
+        String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
+        String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
+        int index = s1.indexOf(s2);
@@ -597 +593 @@ public class CoreFunction extends Operation {
-    protected Object functionSubstringAfter(final EvalContext context) {
+    protected Object functionSubstringAfter(EvalContext context) {
@@ -599,3 +595,3 @@ public class CoreFunction extends Operation {
-        final String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
-        final String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
-        final int index = s1.indexOf(s2);
+        String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
+        String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
+        int index = s1.indexOf(s2);
@@ -613 +609 @@ public class CoreFunction extends Operation {
-    protected Object functionSubstring(final EvalContext context) {
+    protected Object functionSubstring(EvalContext context) {
@@ -617 +613 @@ public class CoreFunction extends Operation {
-        final int ac = getArgumentCount();
+        int ac = getArgumentCount();
@@ -619 +615 @@ public class CoreFunction extends Operation {
-        final String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
+        String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
@@ -642 +638 @@ public class CoreFunction extends Operation {
-        final double to = from + length;
+        double to = from + length;
@@ -665 +661 @@ public class CoreFunction extends Operation {
-    protected Object functionStringLength(final EvalContext context) {
+    protected Object functionStringLength(EvalContext context) {
@@ -674 +670 @@ public class CoreFunction extends Operation {
-        return Double.valueOf(s.length());
+        return new Double(s.length());
@@ -682 +678 @@ public class CoreFunction extends Operation {
-    protected Object functionNormalizeSpace(final EvalContext context) {
+    protected Object functionNormalizeSpace(EvalContext context) {
@@ -684,2 +680,2 @@ public class CoreFunction extends Operation {
-        final String s = InfoSetUtil.stringValue(getArg1().computeValue(context));
-        final char[] chars = s.toCharArray();
+        String s = InfoSetUtil.stringValue(getArg1().computeValue(context));
+        char[] chars = s.toCharArray();
@@ -715 +711 @@ public class CoreFunction extends Operation {
-    protected Object functionTranslate(final EvalContext context) {
+    protected Object functionTranslate(EvalContext context) {
@@ -718,4 +714,4 @@ public class CoreFunction extends Operation {
-        final String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
-        final String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
-        final String s3 = InfoSetUtil.stringValue(getArg3().computeValue(context));
-        final char[] chars = s1.toCharArray();
+        String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
+        String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
+        String s3 = InfoSetUtil.stringValue(getArg3().computeValue(context));
+        char[] chars = s1.toCharArray();
@@ -724,2 +720,2 @@ public class CoreFunction extends Operation {
-            final char c = chars[in];
-            final int inx = s2.indexOf(c);
+            char c = chars[in];
+            int inx = s2.indexOf(c);
@@ -743 +739 @@ public class CoreFunction extends Operation {
-    protected Object functionBoolean(final EvalContext context) {
+    protected Object functionBoolean(EvalContext context) {
@@ -755 +751 @@ public class CoreFunction extends Operation {
-    protected Object functionNot(final EvalContext context) {
+    protected Object functionNot(EvalContext context) {
@@ -767 +763 @@ public class CoreFunction extends Operation {
-    protected Object functionTrue(final EvalContext context) {
+    protected Object functionTrue(EvalContext context) {
@@ -777 +773 @@ public class CoreFunction extends Operation {
-    protected Object functionFalse(final EvalContext context) {
+    protected Object functionFalse(EvalContext context) {
@@ -787 +783 @@ public class CoreFunction extends Operation {
-    protected Object functionNull(final EvalContext context) {
+    protected Object functionNull(EvalContext context) {
@@ -797 +793 @@ public class CoreFunction extends Operation {
-    protected Object functionNumber(final EvalContext context) {
+    protected Object functionNumber(EvalContext context) {
@@ -810 +806 @@ public class CoreFunction extends Operation {
-    protected Object functionSum(final EvalContext context) {
+    protected Object functionSum(EvalContext context) {
@@ -812 +808 @@ public class CoreFunction extends Operation {
-        final Object v = getArg1().compute(context);
+        Object v = getArg1().compute(context);
@@ -818 +814 @@ public class CoreFunction extends Operation {
-            final EvalContext ctx = (EvalContext) v;
+            EvalContext ctx = (EvalContext) v;
@@ -820 +816 @@ public class CoreFunction extends Operation {
-                final NodePointer ptr = (NodePointer) ctx.next();
+                NodePointer ptr = (NodePointer) ctx.next();
@@ -823 +819 @@ public class CoreFunction extends Operation {
-            return Double.valueOf(sum);
+            return new Double(sum);
@@ -834 +830 @@ public class CoreFunction extends Operation {
-    protected Object functionFloor(final EvalContext context) {
+    protected Object functionFloor(EvalContext context) {
@@ -836 +832 @@ public class CoreFunction extends Operation {
-        final double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));
+        double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));
@@ -838 +834 @@ public class CoreFunction extends Operation {
-            return Double.valueOf(v);
+            return new Double(v);
@@ -840 +836 @@ public class CoreFunction extends Operation {
-        return Double.valueOf(Math.floor(v));
+        return new Double(Math.floor(v));
@@ -848 +844 @@ public class CoreFunction extends Operation {
-    protected Object functionCeiling(final EvalContext context) {
+    protected Object functionCeiling(EvalContext context) {
@@ -850 +846 @@ public class CoreFunction extends Operation {
-        final double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));
+        double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));
@@ -852 +848 @@ public class CoreFunction extends Operation {
-            return Double.valueOf(v);
+            return new Double(v);
@@ -854 +850 @@ public class CoreFunction extends Operation {
-        return Double.valueOf(Math.ceil(v));
+        return new Double(Math.ceil(v));
@@ -862 +858 @@ public class CoreFunction extends Operation {
-    protected Object functionRound(final EvalContext context) {
+    protected Object functionRound(EvalContext context) {
@@ -864 +860 @@ public class CoreFunction extends Operation {
-        final double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));
+        double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));
@@ -866 +862 @@ public class CoreFunction extends Operation {
-            return Double.valueOf(v);
+            return new Double(v);
@@ -868 +864 @@ public class CoreFunction extends Operation {
-        return Double.valueOf(Math.round(v));
+        return new Double(Math.round(v));
@@ -876 +872 @@ public class CoreFunction extends Operation {
-    private Object functionFormatNumber(final EvalContext context) {
+    private Object functionFormatNumber(EvalContext context) {
@@ -881 +877 @@ public class CoreFunction extends Operation {
-        final double number =
+        double number =
@@ -883 +879 @@ public class CoreFunction extends Operation {
-        final String pattern =
+        String pattern =
@@ -888 +884 @@ public class CoreFunction extends Operation {
-            final String symbolsName =
+            String symbolsName =
@@ -894 +890 @@ public class CoreFunction extends Operation {
-            final NodePointer pointer = context.getCurrentNodePointer();
+            NodePointer pointer = context.getCurrentNodePointer();
@@ -905 +901 @@ public class CoreFunction extends Operation {
-        final DecimalFormat format = (DecimalFormat) NumberFormat.getInstance();
+        DecimalFormat format = (DecimalFormat) NumberFormat.getInstance();
@@ -915 +911 @@ public class CoreFunction extends Operation {
-    private void assertArgCount(final int count) {
+    private void assertArgCount(int count) {
@@ -924,2 +920,2 @@ public class CoreFunction extends Operation {
-    private void assertArgRange(final int min, final int max) {
-        final int ct = getArgumentCount();
+    private void assertArgRange(int min, int max) {
+        int ct = getArgumentCount();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperation.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperation.java
index 2080f88f..c28ce3e1 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperation.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperation.java
@@ -48 +48 @@ public abstract class CoreOperation extends Operation {
-    public CoreOperation(final Expression[] args) {
+    public CoreOperation(Expression[] args) {
@@ -52,2 +52 @@ public abstract class CoreOperation extends Operation {
-    @Override
-    public Object compute(final EvalContext context) {
+    public Object compute(EvalContext context) {
@@ -57 +55,0 @@ public abstract class CoreOperation extends Operation {
-    @Override
@@ -79 +76,0 @@ public abstract class CoreOperation extends Operation {
-    @Override
@@ -84 +81 @@ public abstract class CoreOperation extends Operation {
-        final StringBuffer buffer = new StringBuffer();
+        StringBuffer buffer = new StringBuffer();
@@ -102,2 +99,2 @@ public abstract class CoreOperation extends Operation {
-    private String parenthesize(final Expression expression, final boolean left) {
-        final String s = expression.toString();
+    private String parenthesize(Expression expression, boolean left) {
+        String s = expression.toString();
@@ -107 +104 @@ public abstract class CoreOperation extends Operation {
-        final int compared = getPrecedence() - ((CoreOperation) expression).getPrecedence();
+        int compared = getPrecedence() - ((CoreOperation) expression).getPrecedence();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationAdd.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationAdd.java
index 4245030a..04da9035 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationAdd.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationAdd.java
@@ -31 +31 @@ public class CoreOperationAdd extends CoreOperation {
-    public CoreOperationAdd(final Expression[] args) {
+    public CoreOperationAdd(Expression[] args) {
@@ -35,2 +35 @@ public class CoreOperationAdd extends CoreOperation {
-    @Override
-    public Object computeValue(final EvalContext context) {
+    public Object computeValue(EvalContext context) {
@@ -38,2 +37,2 @@ public class CoreOperationAdd extends CoreOperation {
-        for (final Expression arg : args) {
-            s += InfoSetUtil.doubleValue(arg.computeValue(context));
+        for (int i = 0; i < args.length; i++) {
+            s += InfoSetUtil.doubleValue(args[i].computeValue(context));
@@ -41 +40 @@ public class CoreOperationAdd extends CoreOperation {
-        return Double.valueOf(s);
+        return new Double(s);
@@ -44 +42,0 @@ public class CoreOperationAdd extends CoreOperation {
-    @Override
@@ -49 +46,0 @@ public class CoreOperationAdd extends CoreOperation {
-    @Override
@@ -54 +50,0 @@ public class CoreOperationAdd extends CoreOperation {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationAnd.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationAnd.java
index 113c15e6..c24b97e9 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationAnd.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationAnd.java
@@ -31 +31 @@ public class CoreOperationAnd extends CoreOperation {
-    public CoreOperationAnd(final Expression[] args) {
+    public CoreOperationAnd(Expression[] args) {
@@ -35,4 +35,3 @@ public class CoreOperationAnd extends CoreOperation {
-    @Override
-    public Object computeValue(final EvalContext context) {
-        for (final Expression arg : args) {
-            if (!InfoSetUtil.booleanValue(arg.computeValue(context))) {
+    public Object computeValue(EvalContext context) {
+        for (int i = 0; i < args.length; i++) {
+            if (!InfoSetUtil.booleanValue(args[i].computeValue(context))) {
@@ -45 +43,0 @@ public class CoreOperationAnd extends CoreOperation {
-    @Override
@@ -50 +47,0 @@ public class CoreOperationAnd extends CoreOperation {
-    @Override
@@ -55 +51,0 @@ public class CoreOperationAnd extends CoreOperation {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java
index 5e54b915..59a103e5 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java
@@ -34 +34 @@ public abstract class CoreOperationCompare extends CoreOperation {
-    private final boolean invert;
+    private boolean invert;
@@ -41 +41 @@ public abstract class CoreOperationCompare extends CoreOperation {
-    public CoreOperationCompare(final Expression arg1, final Expression arg2) {
+    public CoreOperationCompare(Expression arg1, Expression arg2) {
@@ -51 +51 @@ public abstract class CoreOperationCompare extends CoreOperation {
-    protected CoreOperationCompare(final Expression arg1, final Expression arg2, final boolean invert) {
+    protected CoreOperationCompare(Expression arg1, Expression arg2, boolean invert) {
@@ -56,2 +56 @@ public abstract class CoreOperationCompare extends CoreOperation {
-    @Override
-    public Object computeValue(final EvalContext context) {
+    public Object computeValue(EvalContext context) {
@@ -61 +59,0 @@ public abstract class CoreOperationCompare extends CoreOperation {
-    @Override
@@ -66 +63,0 @@ public abstract class CoreOperationCompare extends CoreOperation {
-    @Override
@@ -78,2 +75,2 @@ public abstract class CoreOperationCompare extends CoreOperation {
-    protected boolean equal(final EvalContext context, final Expression left,
-            final Expression right) {
+    protected boolean equal(EvalContext context, Expression left,
+            Expression right) {
@@ -125 +122 @@ public abstract class CoreOperationCompare extends CoreOperation {
-    protected boolean contains(final Iterator it, final Object value) {
+    protected boolean contains(Iterator it, Object value) {
@@ -127 +124 @@ public abstract class CoreOperationCompare extends CoreOperation {
-            final Object element = it.next();
+            Object element = it.next();
@@ -141,2 +138,2 @@ public abstract class CoreOperationCompare extends CoreOperation {
-    protected boolean findMatch(final Iterator lit, final Iterator rit) {
-        final HashSet left = new HashSet();
+    protected boolean findMatch(Iterator lit, Iterator rit) {
+        HashSet left = new HashSet();
@@ -175 +172 @@ public abstract class CoreOperationCompare extends CoreOperation {
-            final double ld = InfoSetUtil.doubleValue(l);
+            double ld = InfoSetUtil.doubleValue(l);
@@ -179 +176 @@ public abstract class CoreOperationCompare extends CoreOperation {
-            final double rd = InfoSetUtil.doubleValue(r);
+            double rd = InfoSetUtil.doubleValue(r);
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationDivide.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationDivide.java
index ff5933ce..125b08a5 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationDivide.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationDivide.java
@@ -32 +32 @@ public class CoreOperationDivide extends CoreOperation {
-    public CoreOperationDivide(final Expression arg1, final Expression arg2) {
+    public CoreOperationDivide(Expression arg1, Expression arg2) {
@@ -36,5 +36,4 @@ public class CoreOperationDivide extends CoreOperation {
-    @Override
-    public Object computeValue(final EvalContext context) {
-        final double l = InfoSetUtil.doubleValue(args[0].computeValue(context));
-        final double r = InfoSetUtil.doubleValue(args[1].computeValue(context));
-        return Double.valueOf(l / r);
+    public Object computeValue(EvalContext context) {
+        double l = InfoSetUtil.doubleValue(args[0].computeValue(context));
+        double r = InfoSetUtil.doubleValue(args[1].computeValue(context));
+        return new Double(l / r);
@@ -43 +41,0 @@ public class CoreOperationDivide extends CoreOperation {
-    @Override
@@ -48 +45,0 @@ public class CoreOperationDivide extends CoreOperation {
-    @Override
@@ -53 +49,0 @@ public class CoreOperationDivide extends CoreOperation {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationEqual.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationEqual.java
index 0455664f..043658a3 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationEqual.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationEqual.java
@@ -29 +29 @@ public class CoreOperationEqual extends CoreOperationCompare {
-    public CoreOperationEqual(final Expression arg1, final Expression arg2) {
+    public CoreOperationEqual(Expression arg1, Expression arg2) {
@@ -33 +32,0 @@ public class CoreOperationEqual extends CoreOperationCompare {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java
index 084ee0f8..90d9e96e 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java
@@ -29 +29 @@ public class CoreOperationGreaterThan extends CoreOperationRelationalExpression
-    public CoreOperationGreaterThan(final Expression arg1, final Expression arg2) {
+    public CoreOperationGreaterThan(Expression arg1, Expression arg2) {
@@ -33,2 +33 @@ public class CoreOperationGreaterThan extends CoreOperationRelationalExpression
-    @Override
-    protected boolean evaluateCompare(final int compare) {
+    protected boolean evaluateCompare(int compare) {
@@ -38 +36,0 @@ public class CoreOperationGreaterThan extends CoreOperationRelationalExpression
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java
index f47f79f9..b5f59de9 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java
@@ -30 +30 @@ public class CoreOperationGreaterThanOrEqual extends
-    public CoreOperationGreaterThanOrEqual(final Expression arg1, final Expression arg2) {
+    public CoreOperationGreaterThanOrEqual(Expression arg1, Expression arg2) {
@@ -34,2 +34 @@ public class CoreOperationGreaterThanOrEqual extends
-    @Override
-    protected boolean evaluateCompare(final int compare) {
+    protected boolean evaluateCompare(int compare) {
@@ -39 +37,0 @@ public class CoreOperationGreaterThanOrEqual extends
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java
index d4d1f3ac..fcb32516 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java
@@ -29 +29 @@ public class CoreOperationLessThan extends CoreOperationRelationalExpression {
-    public CoreOperationLessThan(final Expression arg1, final Expression arg2) {
+    public CoreOperationLessThan(Expression arg1, Expression arg2) {
@@ -33,2 +33 @@ public class CoreOperationLessThan extends CoreOperationRelationalExpression {
-    @Override
-    protected boolean evaluateCompare(final int compare) {
+    protected boolean evaluateCompare(int compare) {
@@ -38 +36,0 @@ public class CoreOperationLessThan extends CoreOperationRelationalExpression {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java
index f140d4f0..a513cfd7 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java
@@ -30 +30 @@ public class CoreOperationLessThanOrEqual extends
-    public CoreOperationLessThanOrEqual(final Expression arg1, final Expression arg2) {
+    public CoreOperationLessThanOrEqual(Expression arg1, Expression arg2) {
@@ -34,2 +34 @@ public class CoreOperationLessThanOrEqual extends
-    @Override
-    protected boolean evaluateCompare(final int compare) {
+    protected boolean evaluateCompare(int compare) {
@@ -39 +37,0 @@ public class CoreOperationLessThanOrEqual extends
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationMod.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationMod.java
index f04a8fd4..77629167 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationMod.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationMod.java
@@ -32 +32 @@ public class CoreOperationMod extends CoreOperation {
-    public CoreOperationMod(final Expression arg1, final Expression arg2) {
+    public CoreOperationMod(Expression arg1, Expression arg2) {
@@ -36,5 +36,4 @@ public class CoreOperationMod extends CoreOperation {
-    @Override
-    public Object computeValue(final EvalContext context) {
-        final long l = (long) InfoSetUtil.doubleValue(args[0].computeValue(context));
-        final long r = (long) InfoSetUtil.doubleValue(args[1].computeValue(context));
-        return Double.valueOf(l % r);
+    public Object computeValue(EvalContext context) {
+        long l = (long) InfoSetUtil.doubleValue(args[0].computeValue(context));
+        long r = (long) InfoSetUtil.doubleValue(args[1].computeValue(context));
+        return new Double(l % r);
@@ -43 +41,0 @@ public class CoreOperationMod extends CoreOperation {
-    @Override
@@ -48 +45,0 @@ public class CoreOperationMod extends CoreOperation {
-    @Override
@@ -53 +49,0 @@ public class CoreOperationMod extends CoreOperation {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationMultiply.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationMultiply.java
index df35849d..1433cc82 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationMultiply.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationMultiply.java
@@ -32 +32 @@ public class CoreOperationMultiply extends CoreOperation {
-    public CoreOperationMultiply(final Expression arg1, final Expression arg2) {
+    public CoreOperationMultiply(Expression arg1, Expression arg2) {
@@ -36,5 +36,4 @@ public class CoreOperationMultiply extends CoreOperation {
-    @Override
-    public Object computeValue(final EvalContext context) {
-        final double l = InfoSetUtil.doubleValue(args[0].computeValue(context));
-        final double r = InfoSetUtil.doubleValue(args[1].computeValue(context));
-        return Double.valueOf(l * r);
+    public Object computeValue(EvalContext context) {
+        double l = InfoSetUtil.doubleValue(args[0].computeValue(context));
+        double r = InfoSetUtil.doubleValue(args[1].computeValue(context));
+        return new Double(l * r);
@@ -43 +41,0 @@ public class CoreOperationMultiply extends CoreOperation {
-    @Override
@@ -48 +45,0 @@ public class CoreOperationMultiply extends CoreOperation {
-    @Override
@@ -53 +49,0 @@ public class CoreOperationMultiply extends CoreOperation {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNegate.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNegate.java
index afeeed9d..99360e15 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNegate.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNegate.java
@@ -31 +31 @@ public class CoreOperationNegate extends CoreOperation {
-    public CoreOperationNegate(final Expression arg) {
+    public CoreOperationNegate(Expression arg) {
@@ -35,4 +35,3 @@ public class CoreOperationNegate extends CoreOperation {
-    @Override
-    public Object computeValue(final EvalContext context) {
-        final double a = InfoSetUtil.doubleValue(args[0].computeValue(context));
-        return Double.valueOf(-a);
+    public Object computeValue(EvalContext context) {
+        double a = InfoSetUtil.doubleValue(args[0].computeValue(context));
+        return new Double(-a);
@@ -41 +39,0 @@ public class CoreOperationNegate extends CoreOperation {
-    @Override
@@ -46 +43,0 @@ public class CoreOperationNegate extends CoreOperation {
-    @Override
@@ -51 +47,0 @@ public class CoreOperationNegate extends CoreOperation {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNotEqual.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNotEqual.java
index d2a679e9..ddabe5d2 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNotEqual.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNotEqual.java
@@ -29 +29 @@ public class CoreOperationNotEqual extends CoreOperationCompare {
-    public CoreOperationNotEqual(final Expression arg1, final Expression arg2) {
+    public CoreOperationNotEqual(Expression arg1, Expression arg2) {
@@ -33 +32,0 @@ public class CoreOperationNotEqual extends CoreOperationCompare {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationOr.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationOr.java
index 4b6cbf27..eaeabf73 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationOr.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationOr.java
@@ -31 +31 @@ public class CoreOperationOr extends CoreOperation {
-    public CoreOperationOr(final Expression[] args) {
+    public CoreOperationOr(Expression[] args) {
@@ -35,4 +35,3 @@ public class CoreOperationOr extends CoreOperation {
-    @Override
-    public Object computeValue(final EvalContext context) {
-        for (final Expression arg : args) {
-            if (InfoSetUtil.booleanValue(arg.computeValue(context))) {
+    public Object computeValue(EvalContext context) {
+        for (int i = 0; i < args.length; i++) {
+            if (InfoSetUtil.booleanValue(args[i].computeValue(context))) {
@@ -45 +43,0 @@ public class CoreOperationOr extends CoreOperation {
-    @Override
@@ -50 +47,0 @@ public class CoreOperationOr extends CoreOperation {
-    @Override
@@ -55 +51,0 @@ public class CoreOperationOr extends CoreOperation {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
index 0ea95b9f..eee76bcf 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
@@ -38 +38 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
-    protected CoreOperationRelationalExpression(final Expression[] args) {
+    protected CoreOperationRelationalExpression(Expression[] args) {
@@ -42,2 +42 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
-    @Override
-    public final Object computeValue(final EvalContext context) {
+    public final Object computeValue(EvalContext context) {
@@ -48 +46,0 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
-    @Override
@@ -53 +50,0 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
-    @Override
@@ -90 +87 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
-        final double ld = InfoSetUtil.doubleValue(left);
+        double ld = InfoSetUtil.doubleValue(left);
@@ -94 +91 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
-        final double rd = InfoSetUtil.doubleValue(right);
+        double rd = InfoSetUtil.doubleValue(right);
@@ -122 +119 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
-    private boolean containsMatch(final Iterator it, final Object value) {
+    private boolean containsMatch(Iterator it, Object value) {
@@ -124 +121 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
-            final Object element = it.next();
+            Object element = it.next();
@@ -138 +135 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
-    private boolean containsMatch(final Object value, final Iterator it) {
+    private boolean containsMatch(Object value, Iterator it) {
@@ -140 +137 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
-            final Object element = it.next();
+            Object element = it.next();
@@ -154,2 +151,2 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
-    private boolean findMatch(final Iterator lit, final Iterator rit) {
-        final HashSet left = new HashSet();
+    private boolean findMatch(Iterator lit, Iterator rit) {
+        HashSet left = new HashSet();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationSubtract.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationSubtract.java
index 27347b3d..f4fc53ea 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationSubtract.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationSubtract.java
@@ -32 +32 @@ public class CoreOperationSubtract extends CoreOperation {
-    public CoreOperationSubtract(final Expression arg1, final Expression arg2) {
+    public CoreOperationSubtract(Expression arg1, Expression arg2) {
@@ -36,5 +36,4 @@ public class CoreOperationSubtract extends CoreOperation {
-    @Override
-    public Object computeValue(final EvalContext context) {
-        final double l = InfoSetUtil.doubleValue(args[0].computeValue(context));
-        final double r = InfoSetUtil.doubleValue(args[1].computeValue(context));
-        return Double.valueOf(l - r);
+    public Object computeValue(EvalContext context) {
+        double l = InfoSetUtil.doubleValue(args[0].computeValue(context));
+        double r = InfoSetUtil.doubleValue(args[1].computeValue(context));
+        return new Double(l - r);
@@ -43 +41,0 @@ public class CoreOperationSubtract extends CoreOperation {
-    @Override
@@ -48 +45,0 @@ public class CoreOperationSubtract extends CoreOperation {
-    @Override
@@ -53 +49,0 @@ public class CoreOperationSubtract extends CoreOperation {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationUnion.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationUnion.java
index 9718bfba..ad187db7 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationUnion.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationUnion.java
@@ -31 +31 @@ public class CoreOperationUnion extends CoreOperation {
-    public CoreOperationUnion(final Expression[] args) {
+    public CoreOperationUnion(Expression[] args) {
@@ -35,3 +35,2 @@ public class CoreOperationUnion extends CoreOperation {
-    @Override
-    public Object computeValue(final EvalContext context) {
-        final EvalContext[] argCtxs = new EvalContext[args.length];
+    public Object computeValue(EvalContext context) {
+        EvalContext[] argCtxs = new EvalContext[args.length];
@@ -39 +38 @@ public class CoreOperationUnion extends CoreOperation {
-            final Object value = args[i].compute(context);
+            Object value = args[i].compute(context);
@@ -50 +48,0 @@ public class CoreOperationUnion extends CoreOperation {
-    @Override
@@ -55 +52,0 @@ public class CoreOperationUnion extends CoreOperation {
-    @Override
@@ -60 +56,0 @@ public class CoreOperationUnion extends CoreOperation {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/Expression.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/Expression.java
index 8fc79b31..341cf9f5 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/Expression.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/Expression.java
@@ -40 +40 @@ public abstract class Expression {
-    protected static final Double ZERO = Double.valueOf(0);
+    protected static final Double ZERO = new Double(0);
@@ -43 +43 @@ public abstract class Expression {
-    protected static final Double ONE = Double.valueOf(1);
+    protected static final Double ONE = new Double(1);
@@ -46 +46 @@ public abstract class Expression {
-    protected static final Double NOT_A_NUMBER = Double.valueOf(Double.NaN);
+    protected static final Double NOT_A_NUMBER = new Double(Double.NaN);
@@ -91,2 +91,2 @@ public abstract class Expression {
-    public Iterator iterate(final EvalContext context) {
-        final Object result = compute(context);
+    public Iterator iterate(EvalContext context) {
+        Object result = compute(context);
@@ -107,2 +107,2 @@ public abstract class Expression {
-    public Iterator iteratePointers(final EvalContext context) {
-        final Object result = compute(context);
+    public Iterator iteratePointers(EvalContext context) {
+        Object result = compute(context);
@@ -129,3 +129,3 @@ public abstract class Expression {
-        private final Iterator iterator;
-        private final QName qname;
-        private final Locale locale;
+        private Iterator iterator;
+        private QName qname;
+        private Locale locale;
@@ -141,2 +141 @@ public abstract class Expression {
-        @Deprecated
-        public PointerIterator(final Iterator it, final QName qname, final Locale locale) {
+        public PointerIterator(Iterator it, QName qname, Locale locale) {
@@ -148 +146,0 @@ public abstract class Expression {
-        @Override
@@ -153 +150,0 @@ public abstract class Expression {
-        @Override
@@ -155 +152 @@ public abstract class Expression {
-            final Object o = iterator.next();
+            Object o = iterator.next();
@@ -162 +158,0 @@ public abstract class Expression {
-        @Override
@@ -172 +168 @@ public abstract class Expression {
-        private final Iterator iterator;
+        private Iterator iterator;
@@ -178 +174 @@ public abstract class Expression {
-        public ValueIterator(final Iterator it) {
+        public ValueIterator(Iterator it) {
@@ -182 +177,0 @@ public abstract class Expression {
-        @Override
@@ -187 +181,0 @@ public abstract class Expression {
-        @Override
@@ -189 +183 @@ public abstract class Expression {
-            final Object o = iterator.next();
+            Object o = iterator.next();
@@ -196 +189,0 @@ public abstract class Expression {
-        @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/ExpressionPath.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/ExpressionPath.java
index e2e46477..afbc734b 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/ExpressionPath.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/ExpressionPath.java
@@ -34,2 +34,2 @@ public class ExpressionPath extends Path {
-    private final Expression expression;
-    private final Expression[] predicates;
+    private Expression expression;
+    private Expression[] predicates;
@@ -46,2 +46,2 @@ public class ExpressionPath extends Path {
-    public ExpressionPath(final Expression expression, final Expression[] predicates,
-            final Step[] steps) {
+    public ExpressionPath(Expression expression, Expression[] predicates,
+            Step[] steps) {
@@ -75 +74,0 @@ public class ExpressionPath extends Path {
-    @Override
@@ -81,2 +80,2 @@ public class ExpressionPath extends Path {
-            for (final Expression predicate : predicates) {
-                if (predicate.isContextDependent()) {
+            for (int i = 0; i < predicates.length; i++) {
+                if (predicates[i].isContextDependent()) {
@@ -103 +101,0 @@ public class ExpressionPath extends Path {
-    @Override
@@ -105 +103 @@ public class ExpressionPath extends Path {
-        final StringBuffer buffer = new StringBuffer();
+        StringBuffer buffer = new StringBuffer();
@@ -117 +115 @@ public class ExpressionPath extends Path {
-            for (final Expression predicate : predicates) {
+            for (int i = 0; i < predicates.length; i++) {
@@ -119 +117 @@ public class ExpressionPath extends Path {
-                buffer.append(predicate);
+                buffer.append(predicates[i]);
@@ -124 +122 @@ public class ExpressionPath extends Path {
-        final Step[] steps = getSteps();
+        Step[] steps = getSteps();
@@ -126 +124 @@ public class ExpressionPath extends Path {
-            for (final Step step : steps) {
+            for (int i = 0; i < steps.length; i++) {
@@ -128 +126 @@ public class ExpressionPath extends Path {
-                buffer.append(step);
+                buffer.append(steps[i]);
@@ -134,2 +132 @@ public class ExpressionPath extends Path {
-    @Override
-    public Object compute(final EvalContext context) {
+    public Object compute(EvalContext context) {
@@ -139,2 +136 @@ public class ExpressionPath extends Path {
-    @Override
-    public Object computeValue(final EvalContext context) {
+    public Object computeValue(EvalContext context) {
@@ -150,2 +146,2 @@ public class ExpressionPath extends Path {
-    protected Object expressionPath(final EvalContext evalContext, final boolean firstMatch) {
-        final Object value = expression.compute(evalContext);
+    protected Object expressionPath(EvalContext evalContext, boolean firstMatch) {
+        Object value = expression.compute(evalContext);
@@ -173,2 +169,2 @@ public class ExpressionPath extends Path {
-            final EvalContext ctx = context;
-            final NodePointer ptr = (NodePointer) ctx.getSingleNodePointer();
+            EvalContext ctx = context;
+            NodePointer ptr = (NodePointer) ctx.getSingleNodePointer();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/ExtensionFunction.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/ExtensionFunction.java
index 482df390..747b5bb1 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/ExtensionFunction.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/ExtensionFunction.java
@@ -34 +34 @@ public class ExtensionFunction extends Operation {
-    private final QName functionName;
+    private QName functionName;
@@ -41 +41 @@ public class ExtensionFunction extends Operation {
-    public ExtensionFunction(final QName functionName, final Expression[] args) {
+    public ExtensionFunction(QName functionName, Expression[] args) {
@@ -59 +58,0 @@ public class ExtensionFunction extends Operation {
-    @Override
@@ -64 +62,0 @@ public class ExtensionFunction extends Operation {
-    @Override
@@ -66 +64 @@ public class ExtensionFunction extends Operation {
-        final StringBuffer buffer = new StringBuffer();
+        StringBuffer buffer = new StringBuffer();
@@ -69 +67 @@ public class ExtensionFunction extends Operation {
-        final Expression[] args = getArguments();
+        Expression[] args = getArguments();
@@ -82,2 +80 @@ public class ExtensionFunction extends Operation {
-    @Override
-    public Object compute(final EvalContext context) {
+    public Object compute(EvalContext context) {
@@ -87,2 +84 @@ public class ExtensionFunction extends Operation {
-    @Override
-    public Object computeValue(final EvalContext context) {
+    public Object computeValue(EvalContext context) {
@@ -97 +93 @@ public class ExtensionFunction extends Operation {
-        final Function function =
+        Function function =
@@ -103 +99 @@ public class ExtensionFunction extends Operation {
-        final Object result = function.invoke(context, parameters);
+        Object result = function.invoke(context, parameters);
@@ -113 +109 @@ public class ExtensionFunction extends Operation {
-    private Object convert(final Object object) {
+    private Object convert(Object object) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/LocationPath.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/LocationPath.java
index b21b5336..5f2ca489 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/LocationPath.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/LocationPath.java
@@ -26 +26 @@ public class LocationPath extends Path {
-    private final boolean absolute;
+    private boolean absolute;
@@ -33 +33 @@ public class LocationPath extends Path {
-    public LocationPath(final boolean absolute, final Step[] steps) {
+    public LocationPath(boolean absolute, Step[] steps) {
@@ -46 +45,0 @@ public class LocationPath extends Path {
-    @Override
@@ -51 +49,0 @@ public class LocationPath extends Path {
-    @Override
@@ -53,2 +51,2 @@ public class LocationPath extends Path {
-        final StringBuffer buffer = new StringBuffer();
-        final Step[] steps = getSteps();
+        StringBuffer buffer = new StringBuffer();
+        Step[] steps = getSteps();
@@ -66,2 +64 @@ public class LocationPath extends Path {
-    @Override
-    public Object compute(final EvalContext context) {
+    public Object compute(EvalContext context) {
@@ -79,2 +76 @@ public class LocationPath extends Path {
-    @Override
-    public Object computeValue(final EvalContext context) {
+    public Object computeValue(EvalContext context) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/NameAttributeTest.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/NameAttributeTest.java
index 3bb9843b..0fcb9df8 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/NameAttributeTest.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/NameAttributeTest.java
@@ -31 +31 @@ public class NameAttributeTest extends CoreOperationEqual {
-    public NameAttributeTest(final Expression namePath, final Expression nameValue) {
+    public NameAttributeTest(Expression namePath, Expression nameValue) {
@@ -43 +42,0 @@ public class NameAttributeTest extends CoreOperationEqual {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/NodeNameTest.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/NodeNameTest.java
index 8578f20a..554dd544 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/NodeNameTest.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/NodeNameTest.java
@@ -24 +24 @@ public class NodeNameTest extends NodeTest {
-    private final QName qname;
+    private QName qname;
@@ -31 +31 @@ public class NodeNameTest extends NodeTest {
-    public NodeNameTest(final QName qname) {
+    public NodeNameTest(QName qname) {
@@ -40 +40 @@ public class NodeNameTest extends NodeTest {
-    public NodeNameTest(final QName qname, final String namespaceURI) {
+    public NodeNameTest(QName qname, String namespaceURI) {
@@ -69 +68,0 @@ public class NodeNameTest extends NodeTest {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/NodeTypeTest.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/NodeTypeTest.java
index 16290782..729c4da4 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/NodeTypeTest.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/NodeTypeTest.java
@@ -24 +24 @@ public class NodeTypeTest extends NodeTest {
-    private final int nodeType;
+    private int nodeType;
@@ -30 +30 @@ public class NodeTypeTest extends NodeTest {
-    public NodeTypeTest(final int nodeType) {
+    public NodeTypeTest(int nodeType) {
@@ -42 +41,0 @@ public class NodeTypeTest extends NodeTest {
-    @Override
@@ -52 +51 @@ public class NodeTypeTest extends NodeTest {
-    public static String nodeTypeToString(final int code) {
+    public static String nodeTypeToString(int code) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/Operation.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/Operation.java
index aec5ac30..d2691083 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/Operation.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/Operation.java
@@ -30 +30 @@ public abstract class Operation extends Expression {
-    public Operation(final Expression[] args) {
+    public Operation(Expression[] args) {
@@ -42 +41,0 @@ public abstract class Operation extends Expression {
-    @Override
@@ -45,2 +44,2 @@ public abstract class Operation extends Expression {
-            for (final Expression arg : args) {
-                if (arg.isContextDependent()) {
+            for (int i = 0; i < args.length; i++) {
+                if (args[i].isContextDependent()) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/Path.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/Path.java
index 40ba7e8c..b1ee967a 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/Path.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/Path.java
@@ -41 +41 @@ public abstract class Path extends Expression {
-    private final Step[] steps;
+    private Step[] steps;
@@ -49 +49 @@ public abstract class Path extends Expression {
-    public Path(final Step[] steps) {
+    public Path(Step[] steps) {
@@ -61 +60,0 @@ public abstract class Path extends Expression {
-    @Override
@@ -64,2 +63,2 @@ public abstract class Path extends Expression {
-            for (final Step step : steps) {
-                if (step.isContextDependent()) {
+            for (int i = 0; i < steps.length; i++) {
+                if (steps[i].isContextDependent()) {
@@ -83,3 +82,3 @@ public abstract class Path extends Expression {
-            final Step[] steps = getSteps();
-            for (final Step step : steps) {
-                if (!isSimpleStep(step)) {
+            Step[] steps = getSteps();
+            for (int i = 0; i < steps.length; i++) {
+                if (!isSimpleStep(steps[i])) {
@@ -101 +100 @@ public abstract class Path extends Expression {
-    protected boolean isSimpleStep(final Step step) {
+    protected boolean isSimpleStep(Step step) {
@@ -103 +102 @@ public abstract class Path extends Expression {
-            final NodeTest nodeTest = step.getNodeTest();
+            NodeTest nodeTest = step.getNodeTest();
@@ -107 +106 @@ public abstract class Path extends Expression {
-            final int nodeType = ((NodeTypeTest) nodeTest).getNodeType();
+            int nodeType = ((NodeTypeTest) nodeTest).getNodeType();
@@ -115 +114 @@ public abstract class Path extends Expression {
-            final NodeTest nodeTest = step.getNodeTest();
+            NodeTest nodeTest = step.getNodeTest();
@@ -132 +131 @@ public abstract class Path extends Expression {
-    protected boolean areBasicPredicates(final Expression[] predicates) {
+    protected boolean areBasicPredicates(Expression[] predicates) {
@@ -135,3 +134,3 @@ public abstract class Path extends Expression {
-            for (final Expression predicate : predicates) {
-                if (predicate instanceof NameAttributeTest) {
-                    if (((NameAttributeTest) predicate)
+            for (int i = 0; i < predicates.length; i++) {
+                if (predicates[i] instanceof NameAttributeTest) {
+                    if (((NameAttributeTest) predicates[i])
@@ -143 +142 @@ public abstract class Path extends Expression {
-                else if (predicate.isContextDependent()) {
+                else if (predicates[i].isContextDependent()) {
@@ -163 +162 @@ public abstract class Path extends Expression {
-    protected Pointer getSingleNodePointerForSteps(final EvalContext context) {
+    protected Pointer getSingleNodePointerForSteps(EvalContext context) {
@@ -169 +168 @@ public abstract class Path extends Expression {
-            final NodePointer ptr = (NodePointer) context.getSingleNodePointer();
+            NodePointer ptr = (NodePointer) context.getSingleNodePointer();
@@ -198 +197 @@ public abstract class Path extends Expression {
-    protected Pointer searchForPath(final EvalContext context) {
+    protected Pointer searchForPath(EvalContext context) {
@@ -200 +199 @@ public abstract class Path extends Expression {
-        final Pointer pointer = ctx.getSingleNodePointer();
+        Pointer pointer = ctx.getSingleNodePointer();
@@ -212 +211 @@ public abstract class Path extends Expression {
-                final Pointer partial = (Pointer) ctx.next();
+                Pointer partial = (Pointer) ctx.next();
@@ -236 +235 @@ public abstract class Path extends Expression {
-    protected EvalContext evalSteps(final EvalContext context) {
+    protected EvalContext evalSteps(EvalContext context) {
@@ -249,2 +248,2 @@ public abstract class Path extends Expression {
-            final int stepCount,
-            final boolean createInitialContext) {
+            int stepCount,
+            boolean createInitialContext) {
@@ -263 +262 @@ public abstract class Path extends Expression {
-            final Expression[] predicates = steps[i].getPredicates();
+            Expression[] predicates = steps[i].getPredicates();
@@ -285,2 +284,2 @@ public abstract class Path extends Expression {
-        final EvalContext context,
-        final int axis,
+        EvalContext context,
+        int axis,
@@ -289,2 +288,2 @@ public abstract class Path extends Expression {
-            final QName qname = ((NodeNameTest) nodeTest).getNodeName();
-            final String prefix = qname.getPrefix();
+            QName qname = ((NodeNameTest) nodeTest).getNodeName();
+            String prefix = qname.getPrefix();
@@ -292 +291 @@ public abstract class Path extends Expression {
-                final String namespaceURI = context.getJXPathContext()
+                String namespaceURI = context.getJXPathContext()
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/ProcessingInstructionTest.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/ProcessingInstructionTest.java
index 2fc1c780..269127fb 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/ProcessingInstructionTest.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/ProcessingInstructionTest.java
@@ -22 +22 @@ public class ProcessingInstructionTest extends NodeTest {
-    private final String target;
+    private String target;
@@ -28 +28 @@ public class ProcessingInstructionTest extends NodeTest {
-    public ProcessingInstructionTest(final String target) {
+    public ProcessingInstructionTest(String target) {
@@ -40 +39,0 @@ public class ProcessingInstructionTest extends NodeTest {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/Step.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/Step.java
index 958b649b..a6c13216 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/Step.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/Step.java
@@ -24,3 +24,3 @@ public class Step {
-    private final int axis;
-    private final NodeTest nodeTest;
-    private final Expression[] predicates;
+    private int axis;
+    private NodeTest nodeTest;
+    private Expression[] predicates;
@@ -34 +34 @@ public class Step {
-    protected Step(final int axis, final NodeTest nodeTest, final Expression[] predicates) {
+    protected Step(int axis, NodeTest nodeTest, Expression[] predicates) {
@@ -70,2 +70,2 @@ public class Step {
-            for (final Expression predicate : predicates) {
-                if (predicate.isContextDependent()) {
+            for (int i = 0; i < predicates.length; i++) {
+                if (predicates[i].isContextDependent()) {
@@ -79 +78,0 @@ public class Step {
-    @Override
@@ -81,2 +80,2 @@ public class Step {
-        final StringBuffer buffer = new StringBuffer();
-        final int axis = getAxis();
+        StringBuffer buffer = new StringBuffer();
+        int axis = getAxis();
@@ -114 +113 @@ public class Step {
-        final Expression[] predicates = getPredicates();
+        Expression[] predicates = getPredicates();
@@ -116 +115 @@ public class Step {
-            for (final Expression predicate : predicates) {
+            for (int i = 0; i < predicates.length; i++) {
@@ -118 +117 @@ public class Step {
-                buffer.append(predicate);
+                buffer.append(predicates[i]);
@@ -132 +131 @@ public class Step {
-    public static String axisToString(final int axis) {
+    public static String axisToString(int axis) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/TreeCompiler.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/TreeCompiler.java
index 87a92618..72b30f99 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/TreeCompiler.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/TreeCompiler.java
@@ -28,3 +28,2 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object number(final String value) {
-        return new Constant(Double.valueOf(value));
+    public Object number(String value) {
+        return new Constant(new Double(value));
@@ -33,2 +32 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object literal(final String value) {
+    public Object literal(String value) {
@@ -38,2 +36 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object qname(final String prefix, final String name) {
+    public Object qname(String prefix, String name) {
@@ -43,2 +40 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object sum(final Object[] arguments) {
+    public Object sum(Object[] arguments) {
@@ -48,2 +44 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object minus(final Object left, final Object right) {
+    public Object minus(Object left, Object right) {
@@ -55,2 +50 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object multiply(final Object left, final Object right) {
+    public Object multiply(Object left, Object right) {
@@ -60,2 +54 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object divide(final Object left, final Object right) {
+    public Object divide(Object left, Object right) {
@@ -65,2 +58 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object mod(final Object left, final Object right) {
+    public Object mod(Object left, Object right) {
@@ -70,2 +62 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object lessThan(final Object left, final Object right) {
+    public Object lessThan(Object left, Object right) {
@@ -75,2 +66 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object lessThanOrEqual(final Object left, final Object right) {
+    public Object lessThanOrEqual(Object left, Object right) {
@@ -82,2 +72 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object greaterThan(final Object left, final Object right) {
+    public Object greaterThan(Object left, Object right) {
@@ -89,2 +78 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object greaterThanOrEqual(final Object left, final Object right) {
+    public Object greaterThanOrEqual(Object left, Object right) {
@@ -96,2 +84 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object equal(final Object left, final Object right) {
+    public Object equal(Object left, Object right) {
@@ -103,2 +90 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object notEqual(final Object left, final Object right) {
+    public Object notEqual(Object left, Object right) {
@@ -108,2 +94 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object minus(final Object argument) {
+    public Object minus(Object argument) {
@@ -113,2 +98 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object variableReference(final Object qName) {
+    public Object variableReference(Object qName) {
@@ -118,2 +102 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object function(final int code, final Object[] args) {
+    public Object function(int code, Object[] args) {
@@ -123,2 +106 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object function(final Object name, final Object[] args) {
+    public Object function(Object name, Object[] args) {
@@ -128,2 +110 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object and(final Object[] arguments) {
+    public Object and(Object[] arguments) {
@@ -133,2 +114 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object or(final Object[] arguments) {
+    public Object or(Object[] arguments) {
@@ -138,2 +118 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object union(final Object[] arguments) {
+    public Object union(Object[] arguments) {
@@ -143,2 +122 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object locationPath(final boolean absolute, final Object[] steps) {
+    public Object locationPath(boolean absolute, Object[] steps) {
@@ -148,3 +126,2 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object expressionPath(final Object expression, final Object[] predicates,
-            final Object[] steps) {
+    public Object expressionPath(Object expression, Object[] predicates,
+            Object[] steps) {
@@ -157,2 +134 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object nodeNameTest(final Object qname) {
+    public Object nodeNameTest(Object qname) {
@@ -162,2 +138 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object nodeTypeTest(final int nodeType) {
+    public Object nodeTypeTest(int nodeType) {
@@ -167,2 +142 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object processingInstructionTest(final String instruction) {
+    public Object processingInstructionTest(String instruction) {
@@ -172,2 +146 @@ public class TreeCompiler implements Compiler {
-    @Override
-    public Object step(final int axis, final Object nodeTest, final Object[] predicates) {
+    public Object step(int axis, Object nodeTest, Object[] predicates) {
@@ -185 +158 @@ public class TreeCompiler implements Compiler {
-    private Expression[] toExpressionArray(final Object[] array) {
+    private Expression[] toExpressionArray(Object[] array) {
@@ -201 +174 @@ public class TreeCompiler implements Compiler {
-    private Step[] toStepArray(final Object[] array) {
+    private Step[] toStepArray(Object[] array) {
@@ -217 +190 @@ public class TreeCompiler implements Compiler {
-    private boolean isNameAttributeTest(final Expression arg) {
+    private boolean isNameAttributeTest(Expression arg) {
@@ -222 +195 @@ public class TreeCompiler implements Compiler {
-        final Step[] steps = ((LocationPath) arg).getSteps();
+        Step[] steps = ((LocationPath) arg).getSteps();
@@ -229 +202 @@ public class TreeCompiler implements Compiler {
-        final NodeTest test = steps[0].getNodeTest();
+        NodeTest test = steps[0].getNodeTest();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/VariableReference.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/VariableReference.java
index 5074d9b4..a9265cb5 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/VariableReference.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/VariableReference.java
@@ -27 +27 @@ public class VariableReference extends Expression {
-    private final QName varName;
+    private QName varName;
@@ -33 +33 @@ public class VariableReference extends Expression {
-    public VariableReference(final QName varName) {
+    public VariableReference(QName varName) {
@@ -45 +44,0 @@ public class VariableReference extends Expression {
-    @Override
@@ -50 +48,0 @@ public class VariableReference extends Expression {
-    @Override
@@ -55 +52,0 @@ public class VariableReference extends Expression {
-    @Override
@@ -60,2 +57 @@ public class VariableReference extends Expression {
-    @Override
-    public Object compute(final EvalContext context) {
+    public Object compute(EvalContext context) {
@@ -70,2 +66 @@ public class VariableReference extends Expression {
-    @Override
-    public Object computeValue(final EvalContext context) {
+    public Object computeValue(EvalContext context) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/NodePointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/NodePointer.java
index 34b498db..2612bf34 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/NodePointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/NodePointer.java
@@ -72,3 +72,3 @@ public abstract class NodePointer implements Pointer {
-        final QName name,
-        final Object bean,
-        final Locale locale) {
+        QName name,
+        Object bean,
+        Locale locale) {
@@ -81 +81 @@ public abstract class NodePointer implements Pointer {
-        final NodePointerFactory[] factories =
+        NodePointerFactory[] factories =
@@ -83,2 +83,2 @@ public abstract class NodePointer implements Pointer {
-        for (final NodePointerFactory element : factories) {
-            pointer = element.createNodePointer(name, bean, locale);
+        for (int i = 0; i < factories.length; i++) {
+            pointer = factories[i].createNodePointer(name, bean, locale);
@@ -103,4 +103,4 @@ public abstract class NodePointer implements Pointer {
-        final NodePointer parent,
-        final QName name,
-        final Object bean) {
-        final NodePointerFactory[] factories =
+        NodePointer parent,
+        QName name,
+        Object bean) {
+        NodePointerFactory[] factories =
@@ -108,3 +108,3 @@ public abstract class NodePointer implements Pointer {
-        for (final NodePointerFactory element : factories) {
-            final NodePointer pointer =
-                element.createNodePointer(parent, name, bean);
+        for (int i = 0; i < factories.length; i++) {
+            NodePointer pointer =
+                factories[i].createNodePointer(parent, name, bean);
@@ -130 +130 @@ public abstract class NodePointer implements Pointer {
-    protected NodePointer(final NodePointer parent) {
+    protected NodePointer(NodePointer parent) {
@@ -139 +139 @@ public abstract class NodePointer implements Pointer {
-    protected NodePointer(final NodePointer parent, final Locale locale) {
+    protected NodePointer(NodePointer parent, Locale locale) {
@@ -159 +159 @@ public abstract class NodePointer implements Pointer {
-    public void setNamespaceResolver(final NamespaceResolver namespaceResolver) {
+    public void setNamespaceResolver(NamespaceResolver namespaceResolver) {
@@ -187 +187 @@ public abstract class NodePointer implements Pointer {
-    public void setAttribute(final boolean attribute) {
+    public void setAttribute(boolean attribute) {
@@ -218 +217,0 @@ public abstract class NodePointer implements Pointer {
-    @Deprecated
@@ -248 +247 @@ public abstract class NodePointer implements Pointer {
-    public void setIndex(final int index) {
+    public void setIndex(int index) {
@@ -273 +271,0 @@ public abstract class NodePointer implements Pointer {
-    @Override
@@ -275 +273 @@ public abstract class NodePointer implements Pointer {
-        final NodePointer valuePointer = getValuePointer();
+        NodePointer valuePointer = getValuePointer();
@@ -302 +300 @@ public abstract class NodePointer implements Pointer {
-        final NodePointer ivp = getImmediateValuePointer();
+        NodePointer ivp = getImmediateValuePointer();
@@ -354 +351,0 @@ public abstract class NodePointer implements Pointer {
-    @Deprecated
@@ -365 +361,0 @@ public abstract class NodePointer implements Pointer {
-    @Override
@@ -374 +369,0 @@ public abstract class NodePointer implements Pointer {
-    @Override
@@ -394 +388,0 @@ public abstract class NodePointer implements Pointer {
-    @Override
@@ -412 +406 @@ public abstract class NodePointer implements Pointer {
-    public boolean testNode(final NodeTest test) {
+    public boolean testNode(NodeTest test) {
@@ -420,3 +414,3 @@ public abstract class NodePointer implements Pointer {
-            final NodeNameTest nodeNameTest = (NodeNameTest) test;
-            final QName testName = nodeNameTest.getNodeName();
-            final QName nodeName = getName();
+            NodeNameTest nodeNameTest = (NodeNameTest) test;
+            QName testName = nodeNameTest.getNodeName();
+            QName nodeName = getName();
@@ -427,2 +421,2 @@ public abstract class NodePointer implements Pointer {
-            final String testPrefix = testName.getPrefix();
-            final String nodePrefix = nodeName.getPrefix();
+            String testPrefix = testName.getPrefix();
+            String nodePrefix = nodeName.getPrefix();
@@ -430,2 +424,2 @@ public abstract class NodePointer implements Pointer {
-                final String testNS = getNamespaceURI(testPrefix);
-                final String nodeNS = getNamespaceURI(nodePrefix);
+                String testNS = getNamespaceURI(testPrefix);
+                String nodeNS = getNamespaceURI(nodePrefix);
@@ -452 +446 @@ public abstract class NodePointer implements Pointer {
-    public NodePointer createPath(final JXPathContext context, final Object value) {
+    public NodePointer createPath(JXPathContext context, Object value) {
@@ -474 +468 @@ public abstract class NodePointer implements Pointer {
-    public NodePointer createPath(final JXPathContext context) {
+    public NodePointer createPath(JXPathContext context) {
@@ -490,4 +484,4 @@ public abstract class NodePointer implements Pointer {
-        final JXPathContext context,
-        final QName name,
-        final int index,
-        final Object value) {
+        JXPathContext context,
+        QName name,
+        int index,
+        Object value) {
@@ -509 +503 @@ public abstract class NodePointer implements Pointer {
-    public NodePointer createChild(final JXPathContext context, final QName name, final int index) {
+    public NodePointer createChild(JXPathContext context, QName name, int index) {
@@ -521 +515 @@ public abstract class NodePointer implements Pointer {
-    public NodePointer createAttribute(final JXPathContext context, final QName name) {
+    public NodePointer createAttribute(JXPathContext context, QName name) {
@@ -545,3 +539,3 @@ public abstract class NodePointer implements Pointer {
-    public boolean isLanguage(final String lang) {
-        final Locale loc = getLocale();
-        final String name = loc.toString().replace('_', '-');
+    public boolean isLanguage(String lang) {
+        Locale loc = getLocale();
+        String name = loc.toString().replace('_', '-');
@@ -560,4 +554,4 @@ public abstract class NodePointer implements Pointer {
-        final NodeTest test,
-        final boolean reverse,
-        final NodePointer startWith) {
-        final NodePointer valuePointer = getValuePointer();
+        NodeTest test,
+        boolean reverse,
+        NodePointer startWith) {
+        NodePointer valuePointer = getValuePointer();
@@ -575,2 +569,2 @@ public abstract class NodePointer implements Pointer {
-    public NodeIterator attributeIterator(final QName qname) {
-        final NodePointer valuePointer = getValuePointer();
+    public NodeIterator attributeIterator(QName qname) {
+        NodePointer valuePointer = getValuePointer();
@@ -598 +592 @@ public abstract class NodePointer implements Pointer {
-    public NodePointer namespacePointer(final String namespace) {
+    public NodePointer namespacePointer(String namespace) {
@@ -607 +601 @@ public abstract class NodePointer implements Pointer {
-    public String getNamespaceURI(final String prefix) {
+    public String getNamespaceURI(String prefix) {
@@ -625 +619 @@ public abstract class NodePointer implements Pointer {
-    protected boolean isDefaultNamespace(final String prefix) {
+    protected boolean isDefaultNamespace(String prefix) {
@@ -630 +624 @@ public abstract class NodePointer implements Pointer {
-        final String namespace = getNamespaceURI(prefix);
+        String namespace = getNamespaceURI(prefix);
@@ -648 +642 @@ public abstract class NodePointer implements Pointer {
-    public Pointer getPointerByID(final JXPathContext context, final String id) {
+    public Pointer getPointerByID(JXPathContext context, String id) {
@@ -660,3 +654,3 @@ public abstract class NodePointer implements Pointer {
-            final JXPathContext context,
-            final String key,
-            final String value) {
+            JXPathContext context,
+            String key,
+            String value) {
@@ -673 +667 @@ public abstract class NodePointer implements Pointer {
-    public NodeSet getNodeSetByKey(final JXPathContext context, final String key, final Object value) {
+    public NodeSet getNodeSetByKey(JXPathContext context, String key, Object value) {
@@ -681 +674,0 @@ public abstract class NodePointer implements Pointer {
-    @Override
@@ -689 +682 @@ public abstract class NodePointer implements Pointer {
-        final StringBuffer buffer = new StringBuffer();
+        StringBuffer buffer = new StringBuffer();
@@ -713 +705,0 @@ public abstract class NodePointer implements Pointer {
-    @Override
@@ -716 +708 @@ public abstract class NodePointer implements Pointer {
-            final NodePointer ptr = (NodePointer) super.clone();
+            NodePointer ptr = (NodePointer) super.clone();
@@ -722 +714 @@ public abstract class NodePointer implements Pointer {
-        catch (final CloneNotSupportedException ex) {
+        catch (CloneNotSupportedException ex) {
@@ -729 +720,0 @@ public abstract class NodePointer implements Pointer {
-    @Override
@@ -734,2 +725 @@ public abstract class NodePointer implements Pointer {
-    @Override
-    public int compareTo(final Object object) {
+    public int compareTo(Object object) {
@@ -740 +730 @@ public abstract class NodePointer implements Pointer {
-        final NodePointer pointer = (NodePointer) object;
+        NodePointer pointer = (NodePointer) object;
@@ -748 +738 @@ public abstract class NodePointer implements Pointer {
-        final HashSet parents1 = new HashSet();
+        HashSet parents1 = new HashSet();
@@ -779,4 +769,4 @@ public abstract class NodePointer implements Pointer {
-        final NodePointer p1,
-        final int depth1,
-        final NodePointer p2,
-        final int depth2) {
+        NodePointer p1,
+        int depth1,
+        NodePointer p2,
+        int depth2) {
@@ -784 +774 @@ public abstract class NodePointer implements Pointer {
-            final int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
+            int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
@@ -788 +778 @@ public abstract class NodePointer implements Pointer {
-            final int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
+            int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
@@ -800 +790 @@ public abstract class NodePointer implements Pointer {
-        final int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
+        int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
@@ -815 +805 @@ public abstract class NodePointer implements Pointer {
-    public void setExceptionHandler(final ExceptionHandler exceptionHandler) {
+    public void setExceptionHandler(ExceptionHandler exceptionHandler) {
@@ -825 +815 @@ public abstract class NodePointer implements Pointer {
-    public void handle(final Throwable t, final NodePointer originator) {
+    public void handle(Throwable t, NodePointer originator) {
@@ -840 +830 @@ public abstract class NodePointer implements Pointer {
-    public void handle(final Throwable t) {
+    public void handle(Throwable t) {
@@ -849,3 +839,3 @@ public abstract class NodePointer implements Pointer {
-    protected String escape(final String string) {
-        final char[] c = { '\'', '"' };
-        final String[] esc = { "&apos;", "&quot;" };
+    protected String escape(String string) {
+        final char[] c = new char[] { '\'', '"' };
+        final String[] esc = new String[] { "&apos;", "&quot;" };
@@ -884,2 +874,2 @@ public abstract class NodePointer implements Pointer {
-    protected AbstractFactory getAbstractFactory(final JXPathContext context) {
-        final AbstractFactory factory = context.getFactory();
+    protected AbstractFactory getAbstractFactory(JXPathContext context) {
+        AbstractFactory factory = context.getFactory();
@@ -899 +889 @@ public abstract class NodePointer implements Pointer {
-    private static void printDeep(final NodePointer pointer, final String indent) {
+    private static void printDeep(NodePointer pointer, String indent) {
@@ -922 +912 @@ public abstract class NodePointer implements Pointer {
-    private static boolean safeEquals(final Object o1, final Object o2) {
+    private static boolean safeEquals(Object o1, Object o2) {
@@ -932 +922 @@ public abstract class NodePointer implements Pointer {
-    public static NodePointer verify(final NodePointer nodePointer) {
+    public static NodePointer verify(NodePointer nodePointer) {
@@ -940 +930 @@ public abstract class NodePointer implements Pointer {
-            final NodePointer parent = nodePointer.getImmediateParentPointer();
+            NodePointer parent = nodePointer.getImmediateParentPointer();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/VariablePointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/VariablePointer.java
index 3b1459c7..373ab382 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/VariablePointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/VariablePointer.java
@@ -36 +36 @@ public class VariablePointer extends NodePointer {
-    private final QName name;
+    private QName name;
@@ -47 +47 @@ public class VariablePointer extends NodePointer {
-    public VariablePointer(final Variables variables, final QName name) {
+    public VariablePointer(Variables variables, QName name) {
@@ -58 +58 @@ public class VariablePointer extends NodePointer {
-    public VariablePointer(final QName name) {
+    public VariablePointer(QName name) {
@@ -64 +63,0 @@ public class VariablePointer extends NodePointer {
-    @Override
@@ -69 +67,0 @@ public class VariablePointer extends NodePointer {
-    @Override
@@ -74 +71,0 @@ public class VariablePointer extends NodePointer {
-    @Override
@@ -82 +78,0 @@ public class VariablePointer extends NodePointer {
-    @Override
@@ -84 +80 @@ public class VariablePointer extends NodePointer {
-        final Object value = getNode();
+        Object value = getNode();
@@ -88 +83,0 @@ public class VariablePointer extends NodePointer {
-    @Override
@@ -90 +85 @@ public class VariablePointer extends NodePointer {
-        final Object value = getBaseValue();
+        Object value = getBaseValue();
@@ -94 +88,0 @@ public class VariablePointer extends NodePointer {
-    @Override
@@ -96 +90 @@ public class VariablePointer extends NodePointer {
-        final Object value = getBaseValue();
+        Object value = getBaseValue();
@@ -101,2 +95 @@ public class VariablePointer extends NodePointer {
-    @Override
-    public void setValue(final Object value) {
+    public void setValue(Object value) {
@@ -108 +101 @@ public class VariablePointer extends NodePointer {
-            final Object collection = getBaseValue();
+            Object collection = getBaseValue();
@@ -116 +108,0 @@ public class VariablePointer extends NodePointer {
-    @Override
@@ -121,2 +113 @@ public class VariablePointer extends NodePointer {
-    @Override
-    public void setIndex(final int index) {
+    public void setIndex(int index) {
@@ -127 +117,0 @@ public class VariablePointer extends NodePointer {
-    @Override
@@ -138,3 +127,0 @@ public class VariablePointer extends NodePointer {
-                    private static final long serialVersionUID = 1L;
-
-                    @Override
@@ -151 +137,0 @@ public class VariablePointer extends NodePointer {
-    @Override
@@ -154 +140 @@ public class VariablePointer extends NodePointer {
-            final Object value = getBaseValue();
+            Object value = getBaseValue();
@@ -160,2 +146 @@ public class VariablePointer extends NodePointer {
-    @Override
-    public NodePointer createPath(final JXPathContext context, final Object value) {
+    public NodePointer createPath(JXPathContext context, Object value) {
@@ -166 +151 @@ public class VariablePointer extends NodePointer {
-        final NodePointer ptr = createPath(context);
+        NodePointer ptr = createPath(context);
@@ -171,2 +156 @@ public class VariablePointer extends NodePointer {
-    @Override
-    public NodePointer createPath(final JXPathContext context) {
+    public NodePointer createPath(JXPathContext context) {
@@ -174 +158 @@ public class VariablePointer extends NodePointer {
-            final AbstractFactory factory = getAbstractFactory(context);
+            AbstractFactory factory = getAbstractFactory(context);
@@ -186 +169,0 @@ public class VariablePointer extends NodePointer {
-    @Override
@@ -188,7 +171,7 @@ public class VariablePointer extends NodePointer {
-        final JXPathContext context,
-        final QName name,
-        final int index) {
-        final Object collection = createCollection(context, index);
-        if (!isActual() || index != 0 && index != WHOLE_COLLECTION) {
-            final AbstractFactory factory = getAbstractFactory(context);
-            final boolean success =
+        JXPathContext context,
+        QName name,
+        int index) {
+        Object collection = createCollection(context, index);
+        if (!isActual() || (index != 0 && index != WHOLE_COLLECTION)) {
+            AbstractFactory factory = getAbstractFactory(context);
+            boolean success =
@@ -205 +188 @@ public class VariablePointer extends NodePointer {
-            final NodePointer cln = (NodePointer) clone();
+            NodePointer cln = (NodePointer) clone();
@@ -212 +194,0 @@ public class VariablePointer extends NodePointer {
-    @Override
@@ -214,5 +196,5 @@ public class VariablePointer extends NodePointer {
-            final JXPathContext context,
-            final QName name,
-            final int index,
-            final Object value) {
-        final Object collection = createCollection(context, index);
+            JXPathContext context,
+            QName name,
+            int index,
+            Object value) {
+        Object collection = createCollection(context, index);
@@ -220 +202 @@ public class VariablePointer extends NodePointer {
-        final NodePointer cl = (NodePointer) clone();
+        NodePointer cl = (NodePointer) clone();
@@ -231 +213 @@ public class VariablePointer extends NodePointer {
-    private Object createCollection(final JXPathContext context, int index) {
+    private Object createCollection(JXPathContext context, int index) {
@@ -259 +240,0 @@ public class VariablePointer extends NodePointer {
-    @Override
@@ -284 +265 @@ public class VariablePointer extends NodePointer {
-    protected void findVariables(final JXPathContext context) {
+    protected void findVariables(JXPathContext context) {
@@ -298 +278,0 @@ public class VariablePointer extends NodePointer {
-    @Override
@@ -305,2 +285 @@ public class VariablePointer extends NodePointer {
-    @Override
-    public boolean equals(final Object object) {
+    public boolean equals(Object object) {
@@ -315 +294 @@ public class VariablePointer extends NodePointer {
-        final VariablePointer other = (VariablePointer) object;
+        VariablePointer other = (VariablePointer) object;
@@ -321 +299,0 @@ public class VariablePointer extends NodePointer {
-    @Override
@@ -323 +301 @@ public class VariablePointer extends NodePointer {
-        final StringBuffer buffer = new StringBuffer();
+        StringBuffer buffer = new StringBuffer();
@@ -339 +316,0 @@ public class VariablePointer extends NodePointer {
-    @Override
@@ -341,3 +318,3 @@ public class VariablePointer extends NodePointer {
-        final NodeTest test,
-        final boolean reverse,
-        final NodePointer startWith) {
+        NodeTest test,
+        boolean reverse,
+        NodePointer startWith) {
@@ -347,2 +324 @@ public class VariablePointer extends NodePointer {
-    @Override
-    public NodeIterator attributeIterator(final QName name) {
+    public NodeIterator attributeIterator(QName name) {
@@ -352 +327,0 @@ public class VariablePointer extends NodePointer {
-    @Override
@@ -357,2 +332 @@ public class VariablePointer extends NodePointer {
-    @Override
-    public NodePointer namespacePointer(final String name) {
+    public NodePointer namespacePointer(String name) {
@@ -362,2 +336 @@ public class VariablePointer extends NodePointer {
-    @Override
-    public boolean testNode(final NodeTest nodeTest) {
+    public boolean testNode(NodeTest nodeTest) {
@@ -367 +339,0 @@ public class VariablePointer extends NodePointer {
-    @Override
@@ -369,2 +341,2 @@ public class VariablePointer extends NodePointer {
-        final NodePointer pointer1,
-        final NodePointer pointer2) {
+        NodePointer pointer1,
+        NodePointer pointer2) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/VariablePointerFactory.java b/src/main/java/org/apache/commons/jxpath/ri/model/VariablePointerFactory.java
index 6faf4c74..4847bf47 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/VariablePointerFactory.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/VariablePointerFactory.java
@@ -43 +43 @@ public class VariablePointerFactory implements NodePointerFactory {
-        private VariableContextWrapper(final JXPathContext context) {
+        private VariableContextWrapper(JXPathContext context) {
@@ -62 +62 @@ public class VariablePointerFactory implements NodePointerFactory {
-    public static VariableContextWrapper contextWrapper(final JXPathContext context) {
+    public static VariableContextWrapper contextWrapper(JXPathContext context) {
@@ -66,3 +66,2 @@ public class VariablePointerFactory implements NodePointerFactory {
-    @Override
-    public NodePointer createNodePointer(final QName name, final Object object,
-            final Locale locale) {
+    public NodePointer createNodePointer(QName name, Object object,
+            Locale locale) {
@@ -72 +71 @@ public class VariablePointerFactory implements NodePointerFactory {
-                final Variables vars = varCtx.getVariables();
+                Variables vars = varCtx.getVariables();
@@ -86,3 +85,2 @@ public class VariablePointerFactory implements NodePointerFactory {
-    @Override
-    public NodePointer createNodePointer(final NodePointer parent, final QName name,
-            final Object object) {
+    public NodePointer createNodePointer(NodePointer parent, QName name,
+            Object object) {
@@ -92 +89,0 @@ public class VariablePointerFactory implements NodePointerFactory {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanAttributeIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanAttributeIterator.java
index a6d961ce..246c7781 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanAttributeIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanAttributeIterator.java
@@ -27 +27 @@ public class BeanAttributeIterator extends PropertyIterator {
-    private final NodePointer parent;
+    private NodePointer parent;
@@ -29 +29 @@ public class BeanAttributeIterator extends PropertyIterator {
-    private final boolean includeXmlLang;
+    private boolean includeXmlLang;
@@ -36 +36 @@ public class BeanAttributeIterator extends PropertyIterator {
-    public BeanAttributeIterator(final PropertyOwnerPointer parent, final QName name) {
+    public BeanAttributeIterator(PropertyOwnerPointer parent, QName name) {
@@ -39,2 +39,2 @@ public class BeanAttributeIterator extends PropertyIterator {
-            name.getPrefix() == null
-                && (name.getName() == null || name.getName().equals("*"))
+            (name.getPrefix() == null
+                && (name.getName() == null || name.getName().equals("*")))
@@ -47 +47 @@ public class BeanAttributeIterator extends PropertyIterator {
-            name.getPrefix() != null && name.getPrefix().equals("xml")
+            (name.getPrefix() != null && name.getPrefix().equals("xml"))
@@ -52 +51,0 @@ public class BeanAttributeIterator extends PropertyIterator {
-    @Override
@@ -57 +55,0 @@ public class BeanAttributeIterator extends PropertyIterator {
-    @Override
@@ -62,2 +60 @@ public class BeanAttributeIterator extends PropertyIterator {
-    @Override
-    public boolean setPosition(final int position) {
+    public boolean setPosition(int position) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanPointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanPointer.java
index d4b60a30..83ad2d4f 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanPointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanPointer.java
@@ -33,3 +33,3 @@ public class BeanPointer extends PropertyOwnerPointer {
-    private final QName name;
-    private final Object bean;
-    private final JXPathBeanInfo beanInfo;
+    private QName name;
+    private Object bean;
+    private JXPathBeanInfo beanInfo;
@@ -46,2 +46,2 @@ public class BeanPointer extends PropertyOwnerPointer {
-    public BeanPointer(final QName name, final Object bean, final JXPathBeanInfo beanInfo,
-            final Locale locale) {
+    public BeanPointer(QName name, Object bean, JXPathBeanInfo beanInfo,
+            Locale locale) {
@@ -61,2 +61,2 @@ public class BeanPointer extends PropertyOwnerPointer {
-    public BeanPointer(final NodePointer parent, final QName name, final Object bean,
-            final JXPathBeanInfo beanInfo) {
+    public BeanPointer(NodePointer parent, QName name, Object bean,
+            JXPathBeanInfo beanInfo) {
@@ -69 +68,0 @@ public class BeanPointer extends PropertyOwnerPointer {
-    @Override
@@ -74 +72,0 @@ public class BeanPointer extends PropertyOwnerPointer {
-    @Override
@@ -79 +76,0 @@ public class BeanPointer extends PropertyOwnerPointer {
-    @Override
@@ -88 +84,0 @@ public class BeanPointer extends PropertyOwnerPointer {
-    @Override
@@ -97 +92,0 @@ public class BeanPointer extends PropertyOwnerPointer {
-    @Override
@@ -102 +96,0 @@ public class BeanPointer extends PropertyOwnerPointer {
-    @Override
@@ -104 +98 @@ public class BeanPointer extends PropertyOwnerPointer {
-        final Object value = getNode();
+        Object value = getNode();
@@ -109 +102,0 @@ public class BeanPointer extends PropertyOwnerPointer {
-    @Override
@@ -114,2 +107 @@ public class BeanPointer extends PropertyOwnerPointer {
-    @Override
-    public boolean equals(final Object object) {
+    public boolean equals(Object object) {
@@ -124 +116 @@ public class BeanPointer extends PropertyOwnerPointer {
-        final BeanPointer other = (BeanPointer) object;
+        BeanPointer other = (BeanPointer) object;
@@ -129,2 +121,2 @@ public class BeanPointer extends PropertyOwnerPointer {
-        if (name == null && other.name != null
-                || name != null && !name.equals(other.name)) {
+        if ((name == null && other.name != null)
+                || (name != null && !name.equals(other.name))) {
@@ -134,2 +126,2 @@ public class BeanPointer extends PropertyOwnerPointer {
-        final int iThis = index == WHOLE_COLLECTION ? 0 : index;
-        final int iOther = other.index == WHOLE_COLLECTION ? 0 : other.index;
+        int iThis = (index == WHOLE_COLLECTION ? 0 : index);
+        int iOther = (other.index == WHOLE_COLLECTION ? 0 : other.index);
@@ -155 +146,0 @@ public class BeanPointer extends PropertyOwnerPointer {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanPointerFactory.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanPointerFactory.java
index db7db35f..bcbe41d0 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanPointerFactory.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanPointerFactory.java
@@ -35 +34,0 @@ public class BeanPointerFactory implements NodePointerFactory {
-    @Override
@@ -40,3 +39,2 @@ public class BeanPointerFactory implements NodePointerFactory {
-    @Override
-    public NodePointer createNodePointer(final QName name, final Object bean, final Locale locale) {
-        final JXPathBeanInfo bi = JXPathIntrospector.getBeanInfo(bean.getClass());
+    public NodePointer createNodePointer(QName name, Object bean, Locale locale) {
+        JXPathBeanInfo bi = JXPathIntrospector.getBeanInfo(bean.getClass());
@@ -46,3 +44,2 @@ public class BeanPointerFactory implements NodePointerFactory {
-    @Override
-    public NodePointer createNodePointer(final NodePointer parent, final QName name,
-            final Object bean) {
+    public NodePointer createNodePointer(NodePointer parent, QName name,
+            Object bean) {
@@ -53 +50 @@ public class BeanPointerFactory implements NodePointerFactory {
-        final JXPathBeanInfo bi = JXPathIntrospector.getBeanInfo(bean.getClass());
+        JXPathBeanInfo bi = JXPathIntrospector.getBeanInfo(bean.getClass());
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java
index b556d21b..1cdb9d2a 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java
@@ -37 +37 @@ public class BeanPropertyPointer extends PropertyPointer {
-    private final JXPathBeanInfo beanInfo;
+    private JXPathBeanInfo beanInfo;
@@ -49 +49 @@ public class BeanPropertyPointer extends PropertyPointer {
-    public BeanPropertyPointer(final NodePointer parent, final JXPathBeanInfo beanInfo) {
+    public BeanPropertyPointer(NodePointer parent, JXPathBeanInfo beanInfo) {
@@ -58 +57,0 @@ public class BeanPropertyPointer extends PropertyPointer {
-    @Override
@@ -63 +61,0 @@ public class BeanPropertyPointer extends PropertyPointer {
-    @Override
@@ -75 +72,0 @@ public class BeanPropertyPointer extends PropertyPointer {
-    @Override
@@ -78 +75 @@ public class BeanPropertyPointer extends PropertyPointer {
-            final PropertyDescriptor[] pds = getPropertyDescriptors();
+            PropertyDescriptor[] pds = getPropertyDescriptors();
@@ -91,2 +88 @@ public class BeanPropertyPointer extends PropertyPointer {
-    @Override
-    public void setPropertyName(final String propertyName) {
+    public void setPropertyName(String propertyName) {
@@ -101,2 +97 @@ public class BeanPropertyPointer extends PropertyPointer {
-    @Override
-    public void setPropertyIndex(final int index) {
+    public void setPropertyIndex(int index) {
@@ -116 +110,0 @@ public class BeanPropertyPointer extends PropertyPointer {
-    @Override
@@ -119 +113 @@ public class BeanPropertyPointer extends PropertyPointer {
-            final PropertyDescriptor pd = getPropertyDescriptor();
+            PropertyDescriptor pd = getPropertyDescriptor();
@@ -128,2 +122 @@ public class BeanPropertyPointer extends PropertyPointer {
-    @Override
-    public void setIndex(final int index) {
+    public void setIndex(int index) {
@@ -150 +142,0 @@ public class BeanPropertyPointer extends PropertyPointer {
-    @Override
@@ -157 +149 @@ public class BeanPropertyPointer extends PropertyPointer {
-                final PropertyDescriptor pd = getPropertyDescriptor();
+                PropertyDescriptor pd = getPropertyDescriptor();
@@ -169 +160,0 @@ public class BeanPropertyPointer extends PropertyPointer {
-    @Override
@@ -174 +164,0 @@ public class BeanPropertyPointer extends PropertyPointer {
-    @Override
@@ -176 +166 @@ public class BeanPropertyPointer extends PropertyPointer {
-        final PropertyDescriptor pd = getPropertyDescriptor();
+        PropertyDescriptor pd = getPropertyDescriptor();
@@ -185 +175 @@ public class BeanPropertyPointer extends PropertyPointer {
-        final int hint = ValueUtils.getCollectionHint(pd.getPropertyType());
+        int hint = ValueUtils.getCollectionHint(pd.getPropertyType());
@@ -193 +183 @@ public class BeanPropertyPointer extends PropertyPointer {
-        final Object value = getBaseValue();
+        Object value = getBaseValue();
@@ -202 +191,0 @@ public class BeanPropertyPointer extends PropertyPointer {
-    @Override
@@ -204 +193 @@ public class BeanPropertyPointer extends PropertyPointer {
-        final PropertyDescriptor pd = getPropertyDescriptor();
+        PropertyDescriptor pd = getPropertyDescriptor();
@@ -215 +204 @@ public class BeanPropertyPointer extends PropertyPointer {
-        final int hint = ValueUtils.getCollectionHint(pd.getPropertyType());
+        int hint = ValueUtils.getCollectionHint(pd.getPropertyType());
@@ -228,3 +217,2 @@ public class BeanPropertyPointer extends PropertyPointer {
-    @Override
-    public void setValue(final Object value) {
-        final PropertyDescriptor pd = getPropertyDescriptor();
+    public void setValue(Object value) {
+        PropertyDescriptor pd = getPropertyDescriptor();
@@ -245,2 +233 @@ public class BeanPropertyPointer extends PropertyPointer {
-    @Override
-    public NodePointer createPath(final JXPathContext context) {
+    public NodePointer createPath(JXPathContext context) {
@@ -255 +241,0 @@ public class BeanPropertyPointer extends PropertyPointer {
-    @Override
@@ -261,2 +247,2 @@ public class BeanPropertyPointer extends PropertyPointer {
-            final Object o = getBaseValue();
-            final Object collection = ValueUtils.remove(getBaseValue(), index);
+            Object o = getBaseValue();
+            Object collection = ValueUtils.remove(getBaseValue(), index);
@@ -277 +262,0 @@ public class BeanPropertyPointer extends PropertyPointer {
-    @Override
@@ -280 +265 @@ public class BeanPropertyPointer extends PropertyPointer {
-            final PropertyDescriptor pd = getPropertyDescriptor();
+            PropertyDescriptor pd = getPropertyDescriptor();
@@ -295 +280 @@ public class BeanPropertyPointer extends PropertyPointer {
-            final int inx = getPropertyIndex();
+            int inx = getPropertyIndex();
@@ -301 +286 @@ public class BeanPropertyPointer extends PropertyPointer {
-                final PropertyDescriptor[] propertyDescriptors =
+                PropertyDescriptor[] propertyDescriptors =
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionAttributeNodeIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionAttributeNodeIterator.java
index ab3eaa90..3e259fcd 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionAttributeNodeIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionAttributeNodeIterator.java
@@ -29 +29 @@ public class CollectionAttributeNodeIterator extends CollectionNodeIterator {
-    private final QName name;
+    private QName name;
@@ -37,2 +37,2 @@ public class CollectionAttributeNodeIterator extends CollectionNodeIterator {
-        final CollectionPointer pointer,
-        final QName name) {
+        CollectionPointer pointer,
+        QName name) {
@@ -43,2 +43 @@ public class CollectionAttributeNodeIterator extends CollectionNodeIterator {
-    @Override
-    protected NodeIterator getElementNodeIterator(final NodePointer elementPointer) {
+    protected NodeIterator getElementNodeIterator(NodePointer elementPointer) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionChildNodeIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionChildNodeIterator.java
index efb7dc61..a9653e36 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionChildNodeIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionChildNodeIterator.java
@@ -29 +29 @@ public class CollectionChildNodeIterator extends CollectionNodeIterator {
-    private final NodeTest test;
+    private NodeTest test;
@@ -39,4 +39,4 @@ public class CollectionChildNodeIterator extends CollectionNodeIterator {
-        final CollectionPointer pointer,
-        final NodeTest test,
-        final boolean reverse,
-        final NodePointer startWith) {
+        CollectionPointer pointer,
+        NodeTest test,
+        boolean reverse,
+        NodePointer startWith) {
@@ -47,2 +47 @@ public class CollectionChildNodeIterator extends CollectionNodeIterator {
-    @Override
-    protected NodeIterator getElementNodeIterator(final NodePointer elementPointer) {
+    protected NodeIterator getElementNodeIterator(NodePointer elementPointer) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionNodeIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionNodeIterator.java
index a48b600d..197ddcf1 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionNodeIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionNodeIterator.java
@@ -31,3 +31,3 @@ public abstract class CollectionNodeIterator implements NodeIterator {
-    private final CollectionPointer pointer;
-    private final boolean reverse;
-    private final NodePointer startWith;
+    private CollectionPointer pointer;
+    private boolean reverse;
+    private NodePointer startWith;
@@ -44,3 +44,3 @@ public abstract class CollectionNodeIterator implements NodeIterator {
-        final CollectionPointer pointer,
-        final boolean reverse,
-        final NodePointer startWith) {
+        CollectionPointer pointer,
+        boolean reverse,
+        NodePointer startWith) {
@@ -60 +59,0 @@ public abstract class CollectionNodeIterator implements NodeIterator {
-    @Override
@@ -65,2 +64 @@ public abstract class CollectionNodeIterator implements NodeIterator {
-    @Override
-    public boolean setPosition(final int position) {
+    public boolean setPosition(int position) {
@@ -78 +75,0 @@ public abstract class CollectionNodeIterator implements NodeIterator {
-    @Override
@@ -91,2 +88,2 @@ public abstract class CollectionNodeIterator implements NodeIterator {
-        final NodePointer ptr = (NodePointer) pointer.clone();
-        final int length = ptr.getLength();
+        NodePointer ptr = (NodePointer) pointer.clone();
+        int length = ptr.getLength();
@@ -95,2 +92,2 @@ public abstract class CollectionNodeIterator implements NodeIterator {
-            final NodePointer elementPointer = ptr.getValuePointer();
-            final NodeIterator iter = getElementNodeIterator(elementPointer);
+            NodePointer elementPointer = ptr.getValuePointer();
+            NodeIterator iter = getElementNodeIterator(elementPointer);
@@ -99 +96 @@ public abstract class CollectionNodeIterator implements NodeIterator {
-                final NodePointer childPointer = iter.getNodePointer();
+                NodePointer childPointer = iter.getNodePointer();
@@ -109 +106 @@ public abstract class CollectionNodeIterator implements NodeIterator {
-            final int index = collection.indexOf(startWith);
+            int index = collection.indexOf(startWith);
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java
index ec73b2ff..d10d6421 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java
@@ -46 +46 @@ public class CollectionPointer extends NodePointer {
-    public CollectionPointer(final Object collection, final Locale locale) {
+    public CollectionPointer(Object collection, Locale locale) {
@@ -56 +56 @@ public class CollectionPointer extends NodePointer {
-    public CollectionPointer(final NodePointer parent, final Object collection) {
+    public CollectionPointer(NodePointer parent, Object collection) {
@@ -61 +60,0 @@ public class CollectionPointer extends NodePointer {
-    @Override
@@ -66 +64,0 @@ public class CollectionPointer extends NodePointer {
-    @Override
@@ -71 +68,0 @@ public class CollectionPointer extends NodePointer {
-    @Override
@@ -76 +72,0 @@ public class CollectionPointer extends NodePointer {
-    @Override
@@ -81 +76,0 @@ public class CollectionPointer extends NodePointer {
-    @Override
@@ -83 +78 @@ public class CollectionPointer extends NodePointer {
-        final Object value = getNode();
+        Object value = getNode();
@@ -87 +81,0 @@ public class CollectionPointer extends NodePointer {
-    @Override
@@ -92 +85,0 @@ public class CollectionPointer extends NodePointer {
-    @Override
@@ -98,2 +91 @@ public class CollectionPointer extends NodePointer {
-    @Override
-    public void setValue(final Object value) {
+    public void setValue(Object value) {
@@ -108,2 +100 @@ public class CollectionPointer extends NodePointer {
-    @Override
-    public void setIndex(final int index) {
+    public void setIndex(int index) {
@@ -114 +104,0 @@ public class CollectionPointer extends NodePointer {
-    @Override
@@ -121 +111 @@ public class CollectionPointer extends NodePointer {
-                final Object value = getImmediateNode();
+                Object value = getImmediateNode();
@@ -129,2 +119 @@ public class CollectionPointer extends NodePointer {
-    @Override
-    public NodePointer createPath(final JXPathContext context) {
+    public NodePointer createPath(JXPathContext context) {
@@ -137,3 +126,2 @@ public class CollectionPointer extends NodePointer {
-    @Override
-    public NodePointer createPath(final JXPathContext context, final Object value) {
-        final NodePointer ptr = createPath(context);
+    public NodePointer createPath(JXPathContext context, Object value) {
+        NodePointer ptr = createPath(context);
@@ -144 +131,0 @@ public class CollectionPointer extends NodePointer {
-    @Override
@@ -146,5 +133,5 @@ public class CollectionPointer extends NodePointer {
-        final JXPathContext context,
-        final QName name,
-        final int index,
-        final Object value) {
-        final NodePointer ptr = (NodePointer) clone();
+        JXPathContext context,
+        QName name,
+        int index,
+        Object value) {
+        NodePointer ptr = (NodePointer) clone();
@@ -155 +141,0 @@ public class CollectionPointer extends NodePointer {
-    @Override
@@ -157,4 +143,4 @@ public class CollectionPointer extends NodePointer {
-        final JXPathContext context,
-        final QName name,
-        final int index) {
-        final NodePointer ptr = (NodePointer) clone();
+        JXPathContext context,
+        QName name,
+        int index) {
+        NodePointer ptr = (NodePointer) clone();
@@ -165 +150,0 @@ public class CollectionPointer extends NodePointer {
-    @Override
@@ -170,2 +155 @@ public class CollectionPointer extends NodePointer {
-    @Override
-    public boolean equals(final Object object) {
+    public boolean equals(Object object) {
@@ -180 +164 @@ public class CollectionPointer extends NodePointer {
-        final CollectionPointer other = (CollectionPointer) object;
+        CollectionPointer other = (CollectionPointer) object;
@@ -184,3 +168,2 @@ public class CollectionPointer extends NodePointer {
-    @Override
-    public NodeIterator childIterator(final NodeTest test,
-                final boolean reverse, final NodePointer startWith) {
+    public NodeIterator childIterator(NodeTest test,
+                boolean reverse, NodePointer startWith) {
@@ -197,2 +180 @@ public class CollectionPointer extends NodePointer {
-    @Override
-    public NodeIterator attributeIterator(final QName name) {
+    public NodeIterator attributeIterator(QName name) {
@@ -203 +184,0 @@ public class CollectionPointer extends NodePointer {
-    @Override
@@ -208,2 +189 @@ public class CollectionPointer extends NodePointer {
-    @Override
-    public NodePointer namespacePointer(final String namespace) {
+    public NodePointer namespacePointer(String namespace) {
@@ -213,2 +193 @@ public class CollectionPointer extends NodePointer {
-    @Override
-    public boolean testNode(final NodeTest test) {
+    public boolean testNode(NodeTest test) {
@@ -227 +205,0 @@ public class CollectionPointer extends NodePointer {
-    @Override
@@ -229 +207 @@ public class CollectionPointer extends NodePointer {
-                final NodePointer pointer1, final NodePointer pointer2) {
+                NodePointer pointer1, NodePointer pointer2) {
@@ -233 +210,0 @@ public class CollectionPointer extends NodePointer {
-    @Override
@@ -235,2 +212,2 @@ public class CollectionPointer extends NodePointer {
-        final StringBuffer buffer = new StringBuffer();
-        final NodePointer parent = getImmediateParentPointer();
+        StringBuffer buffer = new StringBuffer();
+        NodePointer parent = getImmediateParentPointer();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointerFactory.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointerFactory.java
index fdc8c833..6233f78b 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointerFactory.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointerFactory.java
@@ -34 +33,0 @@ public class CollectionPointerFactory implements NodePointerFactory {
-    @Override
@@ -39,2 +38 @@ public class CollectionPointerFactory implements NodePointerFactory {
-    @Override
-    public NodePointer createNodePointer(final QName name, final Object bean, final Locale locale) {
+    public NodePointer createNodePointer(QName name, Object bean, Locale locale) {
@@ -44,3 +42,2 @@ public class CollectionPointerFactory implements NodePointerFactory {
-    @Override
-    public NodePointer createNodePointer(final NodePointer parent, final QName name,
-            final Object bean) {
+    public NodePointer createNodePointer(NodePointer parent, QName name,
+            Object bean) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/LangAttributePointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/LangAttributePointer.java
index 8cab27c4..4c395612 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/LangAttributePointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/LangAttributePointer.java
@@ -35 +35 @@ public class LangAttributePointer extends NodePointer {
-    public LangAttributePointer(final NodePointer parent) {
+    public LangAttributePointer(NodePointer parent) {
@@ -39 +38,0 @@ public class LangAttributePointer extends NodePointer {
-    @Override
@@ -44 +42,0 @@ public class LangAttributePointer extends NodePointer {
-    @Override
@@ -49 +46,0 @@ public class LangAttributePointer extends NodePointer {
-    @Override
@@ -54 +50,0 @@ public class LangAttributePointer extends NodePointer {
-    @Override
@@ -59 +54,0 @@ public class LangAttributePointer extends NodePointer {
-    @Override
@@ -64 +58,0 @@ public class LangAttributePointer extends NodePointer {
-    @Override
@@ -69 +62,0 @@ public class LangAttributePointer extends NodePointer {
-    @Override
@@ -80,2 +73 @@ public class LangAttributePointer extends NodePointer {
-    @Override
-    public void setValue(final Object value) {
+    public void setValue(Object value) {
@@ -86 +77,0 @@ public class LangAttributePointer extends NodePointer {
-    @Override
@@ -88 +79 @@ public class LangAttributePointer extends NodePointer {
-        final StringBuffer buffer = new StringBuffer();
+        StringBuffer buffer = new StringBuffer();
@@ -100 +90,0 @@ public class LangAttributePointer extends NodePointer {
-    @Override
@@ -105,2 +95 @@ public class LangAttributePointer extends NodePointer {
-    @Override
-    public boolean equals(final Object object) {
+    public boolean equals(Object object) {
@@ -110,2 +99 @@ public class LangAttributePointer extends NodePointer {
-    @Override
-    public boolean testNode(final NodeTest test) {
+    public boolean testNode(NodeTest test) {
@@ -115 +102,0 @@ public class LangAttributePointer extends NodePointer {
-    @Override
@@ -117,2 +104,2 @@ public class LangAttributePointer extends NodePointer {
-        final NodePointer pointer1,
-        final NodePointer pointer2) {
+        NodePointer pointer1,
+        NodePointer pointer2) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java
index 0f8b1bd4..5b696aff 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java
@@ -40 +40 @@ public class NullElementPointer extends CollectionPointer {
-    public NullElementPointer(final NodePointer parent, final int index) {
+    public NullElementPointer(NodePointer parent, int index) {
@@ -45 +44,0 @@ public class NullElementPointer extends CollectionPointer {
-    @Override
@@ -50 +48,0 @@ public class NullElementPointer extends CollectionPointer {
-    @Override
@@ -55 +52,0 @@ public class NullElementPointer extends CollectionPointer {
-    @Override
@@ -60 +56,0 @@ public class NullElementPointer extends CollectionPointer {
-    @Override
@@ -65 +60,0 @@ public class NullElementPointer extends CollectionPointer {
-    @Override
@@ -78 +72,0 @@ public class NullElementPointer extends CollectionPointer {
-    @Override
@@ -83,2 +77 @@ public class NullElementPointer extends CollectionPointer {
-    @Override
-    public void setValue(final Object value) {
+    public void setValue(Object value) {
@@ -89 +81,0 @@ public class NullElementPointer extends CollectionPointer {
-    @Override
@@ -94 +85,0 @@ public class NullElementPointer extends CollectionPointer {
-    @Override
@@ -99,2 +90 @@ public class NullElementPointer extends CollectionPointer {
-    @Override
-    public NodePointer createPath(final JXPathContext context) {
+    public NodePointer createPath(JXPathContext context) {
@@ -104,2 +94 @@ public class NullElementPointer extends CollectionPointer {
-    @Override
-    public NodePointer createPath(final JXPathContext context, final Object value) {
+    public NodePointer createPath(JXPathContext context, Object value) {
@@ -109 +97,0 @@ public class NullElementPointer extends CollectionPointer {
-    @Override
@@ -114,2 +102 @@ public class NullElementPointer extends CollectionPointer {
-    @Override
-    public boolean equals(final Object object) {
+    public boolean equals(Object object) {
@@ -124 +111 @@ public class NullElementPointer extends CollectionPointer {
-        final NullElementPointer other = (NullElementPointer) object;
+        NullElementPointer other = (NullElementPointer) object;
@@ -129 +115,0 @@ public class NullElementPointer extends CollectionPointer {
-    @Override
@@ -134 +119,0 @@ public class NullElementPointer extends CollectionPointer {
-    @Override
@@ -136,2 +121,2 @@ public class NullElementPointer extends CollectionPointer {
-        final StringBuffer buffer = new StringBuffer();
-        final NodePointer parent = getImmediateParentPointer();
+        StringBuffer buffer = new StringBuffer();
+        NodePointer parent = getImmediateParentPointer();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/NullPointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/NullPointer.java
index 8ec9c04d..82fa7d30 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/NullPointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/NullPointer.java
@@ -39 +39 @@ public class NullPointer extends PropertyOwnerPointer {
-    public NullPointer(final QName name, final Locale locale) {
+    public NullPointer(QName name, Locale locale) {
@@ -49 +49 @@ public class NullPointer extends PropertyOwnerPointer {
-    public NullPointer(final NodePointer parent, final QName name) {
+    public NullPointer(NodePointer parent, QName name) {
@@ -59 +59 @@ public class NullPointer extends PropertyOwnerPointer {
-    public NullPointer(final Locale locale, final String id) {
+    public NullPointer(Locale locale, String id) {
@@ -64 +63,0 @@ public class NullPointer extends PropertyOwnerPointer {
-    @Override
@@ -69 +67,0 @@ public class NullPointer extends PropertyOwnerPointer {
-    @Override
@@ -74 +71,0 @@ public class NullPointer extends PropertyOwnerPointer {
-    @Override
@@ -79 +75,0 @@ public class NullPointer extends PropertyOwnerPointer {
-    @Override
@@ -84 +79,0 @@ public class NullPointer extends PropertyOwnerPointer {
-    @Override
@@ -89 +83,0 @@ public class NullPointer extends PropertyOwnerPointer {
-    @Override
@@ -94,2 +88 @@ public class NullPointer extends PropertyOwnerPointer {
-    @Override
-    public NodePointer createPath(final JXPathContext context, final Object value) {
+    public NodePointer createPath(JXPathContext context, Object value) {
@@ -103,2 +96 @@ public class NullPointer extends PropertyOwnerPointer {
-    @Override
-    public NodePointer createPath(final JXPathContext context) {
+    public NodePointer createPath(JXPathContext context) {
@@ -112 +103,0 @@ public class NullPointer extends PropertyOwnerPointer {
-    @Override
@@ -114,3 +105,3 @@ public class NullPointer extends PropertyOwnerPointer {
-        final JXPathContext context,
-        final QName name,
-        final int index) {
+        JXPathContext context,
+        QName name,
+        int index) {
@@ -120 +110,0 @@ public class NullPointer extends PropertyOwnerPointer {
-    @Override
@@ -122,4 +112,4 @@ public class NullPointer extends PropertyOwnerPointer {
-        final JXPathContext context,
-        final QName name,
-        final int index,
-        final Object value) {
+        JXPathContext context,
+        QName name,
+        int index,
+        Object value) {
@@ -129 +118,0 @@ public class NullPointer extends PropertyOwnerPointer {
-    @Override
@@ -134,2 +123 @@ public class NullPointer extends PropertyOwnerPointer {
-    @Override
-    public boolean equals(final Object object) {
+    public boolean equals(Object object) {
@@ -144 +132 @@ public class NullPointer extends PropertyOwnerPointer {
-        final NullPointer other = (NullPointer) object;
+        NullPointer other = (NullPointer) object;
@@ -148 +135,0 @@ public class NullPointer extends PropertyOwnerPointer {
-    @Override
@@ -156 +142,0 @@ public class NullPointer extends PropertyOwnerPointer {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java
index e527e1a7..40767070 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java
@@ -39 +39 @@ public class NullPropertyPointer extends PropertyPointer {
-    public NullPropertyPointer(final NodePointer parent) {
+    public NullPropertyPointer(NodePointer parent) {
@@ -43 +42,0 @@ public class NullPropertyPointer extends PropertyPointer {
-    @Override
@@ -48,2 +47 @@ public class NullPropertyPointer extends PropertyPointer {
-    @Override
-    public void setPropertyIndex(final int index) {
+    public void setPropertyIndex(int index) {
@@ -52 +49,0 @@ public class NullPropertyPointer extends PropertyPointer {
-    @Override
@@ -57 +53,0 @@ public class NullPropertyPointer extends PropertyPointer {
-    @Override
@@ -62 +57,0 @@ public class NullPropertyPointer extends PropertyPointer {
-    @Override
@@ -67 +61,0 @@ public class NullPropertyPointer extends PropertyPointer {
-    @Override
@@ -72 +65,0 @@ public class NullPropertyPointer extends PropertyPointer {
-    @Override
@@ -77 +69,0 @@ public class NullPropertyPointer extends PropertyPointer {
-    @Override
@@ -82 +73,0 @@ public class NullPropertyPointer extends PropertyPointer {
-    @Override
@@ -87 +77,0 @@ public class NullPropertyPointer extends PropertyPointer {
-    @Override
@@ -92,2 +82 @@ public class NullPropertyPointer extends PropertyPointer {
-    @Override
-    public void setValue(final Object value) {
+    public void setValue(Object value) {
@@ -105 +94 @@ public class NullPropertyPointer extends PropertyPointer {
-            final PropertyPointer propertyPointer =
+            PropertyPointer propertyPointer =
@@ -118,2 +107 @@ public class NullPropertyPointer extends PropertyPointer {
-    @Override
-    public NodePointer createPath(final JXPathContext context) {
+    public NodePointer createPath(JXPathContext context) {
@@ -141 +129 @@ public class NullPropertyPointer extends PropertyPointer {
-            final PropertyOwnerPointer pop = (PropertyOwnerPointer) newParent;
+            PropertyOwnerPointer pop = (PropertyOwnerPointer) newParent;
@@ -147,2 +135 @@ public class NullPropertyPointer extends PropertyPointer {
-    @Override
-    public NodePointer createPath(final JXPathContext context, final Object value) {
+    public NodePointer createPath(JXPathContext context, Object value) {
@@ -151 +138 @@ public class NullPropertyPointer extends PropertyPointer {
-            final NodePointer pointer = newParent.createAttribute(context, getName());
+            NodePointer pointer = newParent.createAttribute(context, getName());
@@ -159 +146 @@ public class NullPropertyPointer extends PropertyPointer {
-            final PropertyOwnerPointer pop = (PropertyOwnerPointer) newParent;
+            PropertyOwnerPointer pop = (PropertyOwnerPointer) newParent;
@@ -165,2 +152 @@ public class NullPropertyPointer extends PropertyPointer {
-    @Override
-    public NodePointer createChild(final JXPathContext context, final QName name, final int index) {
+    public NodePointer createChild(JXPathContext context, QName name, int index) {
@@ -170,3 +156,2 @@ public class NullPropertyPointer extends PropertyPointer {
-    @Override
-    public NodePointer createChild(final JXPathContext context, final QName name,
-            final int index, final Object value) {
+    public NodePointer createChild(JXPathContext context, QName name,
+            int index, Object value) {
@@ -176 +160,0 @@ public class NullPropertyPointer extends PropertyPointer {
-    @Override
@@ -181,2 +165 @@ public class NullPropertyPointer extends PropertyPointer {
-    @Override
-    public void setPropertyName(final String propertyName) {
+    public void setPropertyName(String propertyName) {
@@ -190 +173 @@ public class NullPropertyPointer extends PropertyPointer {
-    public void setNameAttributeValue(final String attributeValue) {
+    public void setNameAttributeValue(String attributeValue) {
@@ -195 +177,0 @@ public class NullPropertyPointer extends PropertyPointer {
-    @Override
@@ -200 +181,0 @@ public class NullPropertyPointer extends PropertyPointer {
-    @Override
@@ -205 +185,0 @@ public class NullPropertyPointer extends PropertyPointer {
-    @Override
@@ -210 +189,0 @@ public class NullPropertyPointer extends PropertyPointer {
-    @Override
@@ -215 +194 @@ public class NullPropertyPointer extends PropertyPointer {
-        final StringBuffer buffer = new StringBuffer();
+        StringBuffer buffer = new StringBuffer();
@@ -231 +210 @@ public class NullPropertyPointer extends PropertyPointer {
-    private JXPathAbstractFactoryException createBadFactoryException(final AbstractFactory factory) {
+    private JXPathAbstractFactoryException createBadFactoryException(AbstractFactory factory) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java
index 4b0184be..ce10ece5 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java
@@ -29,2 +29,2 @@ public class PropertyIterator implements NodeIterator {
-    private final boolean reverse;
-    private final String name;
+    private boolean reverse;
+    private String name;
@@ -34 +34 @@ public class PropertyIterator implements NodeIterator {
-    private final PropertyPointer propertyNodePointer;
+    private PropertyPointer propertyNodePointer;
@@ -47,3 +47,3 @@ public class PropertyIterator implements NodeIterator {
-        final PropertyOwnerPointer pointer,
-        final String name,
-        final boolean reverse,
+        PropertyOwnerPointer pointer,
+        String name,
+        boolean reverse,
@@ -99 +98,0 @@ public class PropertyIterator implements NodeIterator {
-    @Override
@@ -121 +120 @@ public class PropertyIterator implements NodeIterator {
-        catch (final Throwable t) {
+        catch (Throwable t) {
@@ -123 +122 @@ public class PropertyIterator implements NodeIterator {
-            final NullPropertyPointer npp =
+            NullPropertyPointer npp =
@@ -132 +130,0 @@ public class PropertyIterator implements NodeIterator {
-    @Override
@@ -137,2 +135 @@ public class PropertyIterator implements NodeIterator {
-    @Override
-    public boolean setPosition(final int position) {
+    public boolean setPosition(int position) {
@@ -147 +144 @@ public class PropertyIterator implements NodeIterator {
-    private boolean setPositionIndividualProperty(final int position) {
+    private boolean setPositionIndividualProperty(int position) {
@@ -161 +158 @@ public class PropertyIterator implements NodeIterator {
-        final int length = getLength();
+        int length = getLength();
@@ -194 +191 @@ public class PropertyIterator implements NodeIterator {
-    private boolean setPositionAllProperties(final int position) {
+    private boolean setPositionAllProperties(int position) {
@@ -201 +198 @@ public class PropertyIterator implements NodeIterator {
-        final int count = propertyNodePointer.getPropertyCount();
+        int count = propertyNodePointer.getPropertyCount();
@@ -266 +263 @@ public class PropertyIterator implements NodeIterator {
-    protected void prepareForIndividualProperty(final String name) {
+    protected void prepareForIndividualProperty(String name) {
@@ -270 +267 @@ public class PropertyIterator implements NodeIterator {
-        final String[] names = propertyNodePointer.getPropertyNames();
+        String[] names = propertyNodePointer.getPropertyNames();
@@ -320 +317 @@ public class PropertyIterator implements NodeIterator {
-        catch (final Throwable t) {
+        catch (Throwable t) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java
index 37b2478c..37587877 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java
@@ -36,2 +35,0 @@ public abstract class PropertyOwnerPointer extends NodePointer {
-    private static final long serialVersionUID = 1L;
-
@@ -42,3 +40,2 @@ public abstract class PropertyOwnerPointer extends NodePointer {
-    @Override
-    public NodeIterator childIterator(final NodeTest test, final boolean reverse,
-            final NodePointer startWith) {
+    public NodeIterator childIterator(NodeTest test, boolean reverse,
+            NodePointer startWith) {
@@ -49,2 +46,2 @@ public abstract class PropertyOwnerPointer extends NodePointer {
-            final NodeNameTest nodeNameTest = (NodeNameTest) test;
-            final QName testName = nodeNameTest.getNodeName();
+            NodeNameTest nodeNameTest = (NodeNameTest) test;
+            QName testName = nodeNameTest.getNodeName();
@@ -68,2 +65,2 @@ public abstract class PropertyOwnerPointer extends NodePointer {
-    public NodeIterator createNodeIterator(final String property, final boolean reverse,
-            final NodePointer startWith) {
+    public NodeIterator createNodeIterator(String property, boolean reverse,
+            NodePointer startWith) {
@@ -73,2 +70 @@ public abstract class PropertyOwnerPointer extends NodePointer {
-    @Override
-    public NodeIterator attributeIterator(final QName name) {
+    public NodeIterator attributeIterator(QName name) {
@@ -83 +79 @@ public abstract class PropertyOwnerPointer extends NodePointer {
-    protected PropertyOwnerPointer(final NodePointer parent, final Locale locale) {
+    protected PropertyOwnerPointer(NodePointer parent, Locale locale) {
@@ -91 +87 @@ public abstract class PropertyOwnerPointer extends NodePointer {
-    protected PropertyOwnerPointer(final NodePointer parent) {
+    protected PropertyOwnerPointer(NodePointer parent) {
@@ -95,2 +91 @@ public abstract class PropertyOwnerPointer extends NodePointer {
-    @Override
-    public void setIndex(final int index) {
+    public void setIndex(int index) {
@@ -103 +97,0 @@ public abstract class PropertyOwnerPointer extends NodePointer {
-    @Override
@@ -112 +105,0 @@ public abstract class PropertyOwnerPointer extends NodePointer {
-    @Override
@@ -121 +114 @@ public abstract class PropertyOwnerPointer extends NodePointer {
-    public boolean isValidProperty(final QName name) {
+    public boolean isValidProperty(QName name) {
@@ -130,2 +123 @@ public abstract class PropertyOwnerPointer extends NodePointer {
-    @Override
-    public void setValue(final Object value) {
+    public void setValue(Object value) {
@@ -157 +148,0 @@ public abstract class PropertyOwnerPointer extends NodePointer {
-    @Override
@@ -186,4 +177,3 @@ public abstract class PropertyOwnerPointer extends NodePointer {
-    @Override
-    public int compareChildNodePointers(final NodePointer pointer1,
-            final NodePointer pointer2) {
-        final int r = pointer1.getName().toString().compareTo(pointer2.getName().toString());
+    public int compareChildNodePointers(NodePointer pointer1,
+            NodePointer pointer2) {
+        int r = pointer1.getName().toString().compareTo(pointer2.getName().toString());
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java
index 01e298ad..de8fb367 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java
@@ -32,2 +31,0 @@ public abstract class PropertyPointer extends NodePointer {
-    private static final long serialVersionUID = 1L;
-
@@ -47 +45 @@ public abstract class PropertyPointer extends NodePointer {
-    public PropertyPointer(final NodePointer parent) {
+    public PropertyPointer(NodePointer parent) {
@@ -63 +61 @@ public abstract class PropertyPointer extends NodePointer {
-    public void setPropertyIndex(final int index) {
+    public void setPropertyIndex(int index) {
@@ -81 +78,0 @@ public abstract class PropertyPointer extends NodePointer {
-    @Override
@@ -116 +112,0 @@ public abstract class PropertyPointer extends NodePointer {
-    @Override
@@ -129 +124,0 @@ public abstract class PropertyPointer extends NodePointer {
-    @Override
@@ -138 +132,0 @@ public abstract class PropertyPointer extends NodePointer {
-    @Override
@@ -140 +134 @@ public abstract class PropertyPointer extends NodePointer {
-        final Object value = getBaseValue();
+        Object value = getBaseValue();
@@ -144 +137,0 @@ public abstract class PropertyPointer extends NodePointer {
-    @Override
@@ -146 +139 @@ public abstract class PropertyPointer extends NodePointer {
-        final Object value = getNode();
+        Object value = getNode();
@@ -155 +147,0 @@ public abstract class PropertyPointer extends NodePointer {
-    @Override
@@ -157 +149 @@ public abstract class PropertyPointer extends NodePointer {
-        final Object baseValue = getBaseValue();
+        Object baseValue = getBaseValue();
@@ -166 +157,0 @@ public abstract class PropertyPointer extends NodePointer {
-    @Override
@@ -174,2 +165 @@ public abstract class PropertyPointer extends NodePointer {
-    @Override
-    public NodePointer createPath(final JXPathContext context) {
+    public NodePointer createPath(JXPathContext context) {
@@ -177,3 +167,3 @@ public abstract class PropertyPointer extends NodePointer {
-            final AbstractFactory factory = getAbstractFactory(context);
-            final int inx = index == WHOLE_COLLECTION ? 0 : index;
-            final boolean success =
+            AbstractFactory factory = getAbstractFactory(context);
+            int inx = (index == WHOLE_COLLECTION ? 0 : index);
+            boolean success =
@@ -194,2 +184 @@ public abstract class PropertyPointer extends NodePointer {
-    @Override
-    public NodePointer createPath(final JXPathContext context, final Object value) {
+    public NodePointer createPath(JXPathContext context, Object value) {
@@ -204 +192,0 @@ public abstract class PropertyPointer extends NodePointer {
-    @Override
@@ -206,5 +194,5 @@ public abstract class PropertyPointer extends NodePointer {
-        final JXPathContext context,
-        final QName name,
-        final int index,
-        final Object value) {
-        final PropertyPointer prop = (PropertyPointer) clone();
+        JXPathContext context,
+        QName name,
+        int index,
+        Object value) {
+        PropertyPointer prop = (PropertyPointer) clone();
@@ -218 +205,0 @@ public abstract class PropertyPointer extends NodePointer {
-    @Override
@@ -220,4 +207,4 @@ public abstract class PropertyPointer extends NodePointer {
-        final JXPathContext context,
-        final QName name,
-        final int index) {
-        final PropertyPointer prop = (PropertyPointer) clone();
+        JXPathContext context,
+        QName name,
+        int index) {
+        PropertyPointer prop = (PropertyPointer) clone();
@@ -231 +217,0 @@ public abstract class PropertyPointer extends NodePointer {
-    @Override
@@ -236,2 +222 @@ public abstract class PropertyPointer extends NodePointer {
-    @Override
-    public boolean equals(final Object object) {
+    public boolean equals(Object object) {
@@ -246 +231 @@ public abstract class PropertyPointer extends NodePointer {
-        final PropertyPointer other = (PropertyPointer) object;
+        PropertyPointer other = (PropertyPointer) object;
@@ -256,2 +241,2 @@ public abstract class PropertyPointer extends NodePointer {
-        final int iThis = index == WHOLE_COLLECTION ? 0 : index;
-        final int iOther = other.index == WHOLE_COLLECTION ? 0 : other.index;
+        int iThis = (index == WHOLE_COLLECTION ? 0 : index);
+        int iOther = (other.index == WHOLE_COLLECTION ? 0 : other.index);
@@ -261 +245,0 @@ public abstract class PropertyPointer extends NodePointer {
-    @Override
@@ -263,2 +247,2 @@ public abstract class PropertyPointer extends NodePointer {
-        final NodePointer pointer1,
-        final NodePointer pointer2) {
+        NodePointer pointer1,
+        NodePointer pointer2) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/container/ContainerPointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/container/ContainerPointer.java
index 69f9169c..a7ccedbc 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/container/ContainerPointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/container/ContainerPointer.java
@@ -34 +34 @@ public class ContainerPointer extends NodePointer {
-    private final Container container;
+    private Container container;
@@ -44 +44 @@ public class ContainerPointer extends NodePointer {
-    public ContainerPointer(final Container container, final Locale locale) {
+    public ContainerPointer(Container container, Locale locale) {
@@ -54 +54 @@ public class ContainerPointer extends NodePointer {
-    public ContainerPointer(final NodePointer parent, final Container container) {
+    public ContainerPointer(NodePointer parent, Container container) {
@@ -63 +62,0 @@ public class ContainerPointer extends NodePointer {
-    @Override
@@ -68 +66,0 @@ public class ContainerPointer extends NodePointer {
-    @Override
@@ -73 +70,0 @@ public class ContainerPointer extends NodePointer {
-    @Override
@@ -78 +74,0 @@ public class ContainerPointer extends NodePointer {
-    @Override
@@ -80 +76 @@ public class ContainerPointer extends NodePointer {
-        final Object value = getBaseValue();
+        Object value = getBaseValue();
@@ -84 +79,0 @@ public class ContainerPointer extends NodePointer {
-    @Override
@@ -86 +81 @@ public class ContainerPointer extends NodePointer {
-        final Object value = getBaseValue();
+        Object value = getBaseValue();
@@ -90 +84,0 @@ public class ContainerPointer extends NodePointer {
-    @Override
@@ -95 +88,0 @@ public class ContainerPointer extends NodePointer {
-    @Override
@@ -97 +90 @@ public class ContainerPointer extends NodePointer {
-        final Object value = getBaseValue();
+        Object value = getBaseValue();
@@ -104,2 +97 @@ public class ContainerPointer extends NodePointer {
-    @Override
-    public void setValue(final Object value) {
+    public void setValue(Object value) {
@@ -110 +101,0 @@ public class ContainerPointer extends NodePointer {
-    @Override
@@ -113 +104 @@ public class ContainerPointer extends NodePointer {
-            final Object value = getImmediateNode();
+            Object value = getImmediateNode();
@@ -119 +109,0 @@ public class ContainerPointer extends NodePointer {
-    @Override
@@ -124,2 +114 @@ public class ContainerPointer extends NodePointer {
-    @Override
-    public boolean equals(final Object object) {
+    public boolean equals(Object object) {
@@ -134 +123 @@ public class ContainerPointer extends NodePointer {
-        final ContainerPointer other = (ContainerPointer) object;
+        ContainerPointer other = (ContainerPointer) object;
@@ -138 +126,0 @@ public class ContainerPointer extends NodePointer {
-    @Override
@@ -140,3 +128,3 @@ public class ContainerPointer extends NodePointer {
-        final NodeTest test,
-        final boolean reverse,
-        final NodePointer startWith) {
+        NodeTest test,
+        boolean reverse,
+        NodePointer startWith) {
@@ -146,2 +134 @@ public class ContainerPointer extends NodePointer {
-    @Override
-    public NodeIterator attributeIterator(final QName name) {
+    public NodeIterator attributeIterator(QName name) {
@@ -151 +137,0 @@ public class ContainerPointer extends NodePointer {
-    @Override
@@ -156,2 +142 @@ public class ContainerPointer extends NodePointer {
-    @Override
-    public NodePointer namespacePointer(final String namespace) {
+    public NodePointer namespacePointer(String namespace) {
@@ -161,2 +146 @@ public class ContainerPointer extends NodePointer {
-    @Override
-    public boolean testNode(final NodeTest nodeTest) {
+    public boolean testNode(NodeTest nodeTest) {
@@ -166 +149,0 @@ public class ContainerPointer extends NodePointer {
-    @Override
@@ -168,2 +151,2 @@ public class ContainerPointer extends NodePointer {
-        final NodePointer pointer1,
-        final NodePointer pointer2) {
+        NodePointer pointer1,
+        NodePointer pointer2) {
@@ -173,2 +156 @@ public class ContainerPointer extends NodePointer {
-    @Override
-    public String getNamespaceURI(final String prefix) {
+    public String getNamespaceURI(String prefix) {
@@ -178 +159,0 @@ public class ContainerPointer extends NodePointer {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/container/ContainerPointerFactory.java b/src/main/java/org/apache/commons/jxpath/ri/model/container/ContainerPointerFactory.java
index 2fb26ff2..4dad29f8 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/container/ContainerPointerFactory.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/container/ContainerPointerFactory.java
@@ -33 +32,0 @@ public class ContainerPointerFactory implements NodePointerFactory {
-    @Override
@@ -38,2 +37 @@ public class ContainerPointerFactory implements NodePointerFactory {
-    @Override
-    public NodePointer createNodePointer(final QName name, final Object bean, final Locale locale) {
+    public NodePointer createNodePointer(QName name, Object bean, Locale locale) {
@@ -44,3 +42,2 @@ public class ContainerPointerFactory implements NodePointerFactory {
-    @Override
-    public NodePointer createNodePointer(final NodePointer parent, final QName name,
-            final Object bean) {
+    public NodePointer createNodePointer(NodePointer parent, QName name,
+            Object bean) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java
index 72c7befa..d9daf5a9 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java
@@ -35,3 +35,3 @@ public class DOMAttributeIterator implements NodeIterator {
-    private final NodePointer parent;
-    private final QName name;
-    private final List attributes;
+    private NodePointer parent;
+    private QName name;
+    private List attributes;
@@ -45 +45 @@ public class DOMAttributeIterator implements NodeIterator {
-    public DOMAttributeIterator(final NodePointer parent, final QName name) {
+    public DOMAttributeIterator(NodePointer parent, QName name) {
@@ -49 +49 @@ public class DOMAttributeIterator implements NodeIterator {
-        final Node node = (Node) parent.getNode();
+        Node node = (Node) parent.getNode();
@@ -51 +51 @@ public class DOMAttributeIterator implements NodeIterator {
-            final String lname = name.getName();
+            String lname = name.getName();
@@ -53 +53 @@ public class DOMAttributeIterator implements NodeIterator {
-                final Attr attr = getAttribute((Element) node, name);
+                Attr attr = getAttribute((Element) node, name);
@@ -59,2 +59,2 @@ public class DOMAttributeIterator implements NodeIterator {
-                final NamedNodeMap map = node.getAttributes();
-                final int count = map.getLength();
+                NamedNodeMap map = node.getAttributes();
+                int count = map.getLength();
@@ -62 +62 @@ public class DOMAttributeIterator implements NodeIterator {
-                    final Attr attr = (Attr) map.item(i);
+                    Attr attr = (Attr) map.item(i);
@@ -76,3 +76,3 @@ public class DOMAttributeIterator implements NodeIterator {
-    private boolean testAttr(final Attr attr) {
-        final String nodePrefix = DOMNodePointer.getPrefix(attr);
-        final String nodeLocalName = DOMNodePointer.getLocalName(attr);
+    private boolean testAttr(Attr attr) {
+        String nodePrefix = DOMNodePointer.getPrefix(attr);
+        String nodeLocalName = DOMNodePointer.getLocalName(attr);
@@ -88 +88 @@ public class DOMAttributeIterator implements NodeIterator {
-        final String testLocalName = name.getName();
+        String testLocalName = name.getName();
@@ -90 +90 @@ public class DOMAttributeIterator implements NodeIterator {
-            final String testPrefix = name.getPrefix();
+            String testPrefix = name.getPrefix();
@@ -110,2 +110,2 @@ public class DOMAttributeIterator implements NodeIterator {
-    private Attr getAttribute(final Element element, final QName name) {
-        final String testPrefix = name.getPrefix();
+    private Attr getAttribute(Element element, QName name) {
+        String testPrefix = name.getPrefix();
@@ -127 +127 @@ public class DOMAttributeIterator implements NodeIterator {
-            final NamedNodeMap nnm = element.getAttributes();
+            NamedNodeMap nnm = element.getAttributes();
@@ -139 +138,0 @@ public class DOMAttributeIterator implements NodeIterator {
-    @Override
@@ -154 +152,0 @@ public class DOMAttributeIterator implements NodeIterator {
-    @Override
@@ -159,2 +157 @@ public class DOMAttributeIterator implements NodeIterator {
-    @Override
-    public boolean setPosition(final int position) {
+    public boolean setPosition(int position) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributePointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributePointer.java
index 834f4a68..db1e4863 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributePointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributePointer.java
@@ -34 +34 @@ public class DOMAttributePointer extends NodePointer {
-    private final Attr attr;
+    private Attr attr;
@@ -41 +41 @@ public class DOMAttributePointer extends NodePointer {
-    public DOMAttributePointer(final NodePointer parent, final Attr attr) {
+    public DOMAttributePointer(NodePointer parent, Attr attr) {
@@ -46 +45,0 @@ public class DOMAttributePointer extends NodePointer {
-    @Override
@@ -53 +51,0 @@ public class DOMAttributePointer extends NodePointer {
-    @Override
@@ -55 +53 @@ public class DOMAttributePointer extends NodePointer {
-        final String prefix = DOMNodePointer.getPrefix(attr);
+        String prefix = DOMNodePointer.getPrefix(attr);
@@ -59 +56,0 @@ public class DOMAttributePointer extends NodePointer {
-    @Override
@@ -61,2 +58,2 @@ public class DOMAttributePointer extends NodePointer {
-        final String value = attr.getValue();
-        if (value == null || value.equals("") && !attr.getSpecified()) {
+        String value = attr.getValue();
+        if (value == null || (value.equals("") && !attr.getSpecified())) {
@@ -68 +64,0 @@ public class DOMAttributePointer extends NodePointer {
-    @Override
@@ -73 +68,0 @@ public class DOMAttributePointer extends NodePointer {
-    @Override
@@ -78 +72,0 @@ public class DOMAttributePointer extends NodePointer {
-    @Override
@@ -83 +76,0 @@ public class DOMAttributePointer extends NodePointer {
-    @Override
@@ -88 +80,0 @@ public class DOMAttributePointer extends NodePointer {
-    @Override
@@ -93 +84,0 @@ public class DOMAttributePointer extends NodePointer {
-    @Override
@@ -98,2 +89 @@ public class DOMAttributePointer extends NodePointer {
-    @Override
-    public boolean testNode(final NodeTest nodeTest) {
+    public boolean testNode(NodeTest nodeTest) {
@@ -101,2 +91,2 @@ public class DOMAttributePointer extends NodePointer {
-            || nodeTest instanceof NodeTypeTest
-                && ((NodeTypeTest) nodeTest).getNodeType() == Compiler.NODE_TYPE_NODE;
+            || ((nodeTest instanceof NodeTypeTest)
+                && ((NodeTypeTest) nodeTest).getNodeType() == Compiler.NODE_TYPE_NODE);
@@ -109,2 +99 @@ public class DOMAttributePointer extends NodePointer {
-    @Override
-    public void setValue(final Object value) {
+    public void setValue(Object value) {
@@ -114 +102,0 @@ public class DOMAttributePointer extends NodePointer {
-    @Override
@@ -119 +106,0 @@ public class DOMAttributePointer extends NodePointer {
-    @Override
@@ -121 +108 @@ public class DOMAttributePointer extends NodePointer {
-        final StringBuffer buffer = new StringBuffer();
+        StringBuffer buffer = new StringBuffer();
@@ -134 +120,0 @@ public class DOMAttributePointer extends NodePointer {
-    @Override
@@ -139,2 +125 @@ public class DOMAttributePointer extends NodePointer {
-    @Override
-    public boolean equals(final Object object) {
+    public boolean equals(Object object) {
@@ -145,3 +130,2 @@ public class DOMAttributePointer extends NodePointer {
-    @Override
-    public int compareChildNodePointers(final NodePointer pointer1,
-            final NodePointer pointer2) {
+    public int compareChildNodePointers(NodePointer pointer1,
+            NodePointer pointer2) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMNamespaceIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMNamespaceIterator.java
index 96febca3..413b5954 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMNamespaceIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMNamespaceIterator.java
@@ -33,2 +33,2 @@ public class DOMNamespaceIterator implements NodeIterator {
-    private final NodePointer parent;
-    private final List attributes;
+    private NodePointer parent;
+    private List attributes;
@@ -41 +41 @@ public class DOMNamespaceIterator implements NodeIterator {
-    public DOMNamespaceIterator(final NodePointer parent) {
+    public DOMNamespaceIterator(NodePointer parent) {
@@ -52,2 +52,2 @@ public class DOMNamespaceIterator implements NodeIterator {
-    private void collectNamespaces(final List attributes, Node node) {
-        final Node parent = node.getParentNode();
+    private void collectNamespaces(List attributes, Node node) {
+        Node parent = node.getParentNode();
@@ -61,2 +61,2 @@ public class DOMNamespaceIterator implements NodeIterator {
-            final NamedNodeMap map = node.getAttributes();
-            final int count = map.getLength();
+            NamedNodeMap map = node.getAttributes();
+            int count = map.getLength();
@@ -64,5 +64,5 @@ public class DOMNamespaceIterator implements NodeIterator {
-                final Attr attr = (Attr) map.item(i);
-                final String prefix = DOMNodePointer.getPrefix(attr);
-                final String name = DOMNodePointer.getLocalName(attr);
-                if (prefix != null && prefix.equals("xmlns")
-                    || prefix == null && name.equals("xmlns")) {
+                Attr attr = (Attr) map.item(i);
+                String prefix = DOMNodePointer.getPrefix(attr);
+                String name = DOMNodePointer.getLocalName(attr);
+                if ((prefix != null && prefix.equals("xmlns"))
+                    || (prefix == null && name.equals("xmlns"))) {
@@ -75 +74,0 @@ public class DOMNamespaceIterator implements NodeIterator {
-    @Override
@@ -88,2 +87,2 @@ public class DOMNamespaceIterator implements NodeIterator {
-        final Attr attr = (Attr) attributes.get(index);
-        final String name = attr.getPrefix();
+        Attr attr = (Attr) attributes.get(index);
+        String name = attr.getPrefix();
@@ -96 +94,0 @@ public class DOMNamespaceIterator implements NodeIterator {
-    @Override
@@ -101,2 +99 @@ public class DOMNamespaceIterator implements NodeIterator {
-    @Override
-    public boolean setPosition(final int position) {
+    public boolean setPosition(int position) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMNodeIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMNodeIterator.java
index f5eb5909..48f10ca3 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMNodeIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMNodeIterator.java
@@ -28,3 +28,3 @@ public class DOMNodeIterator implements NodeIterator {
-    private final NodePointer parent;
-    private final NodeTest nodeTest;
-    private final Node node;
+    private NodePointer parent;
+    private NodeTest nodeTest;
+    private Node node;
@@ -32 +32 @@ public class DOMNodeIterator implements NodeIterator {
-    private final boolean reverse;
+    private boolean reverse;
@@ -43,4 +43,4 @@ public class DOMNodeIterator implements NodeIterator {
-        final NodePointer parent,
-        final NodeTest nodeTest,
-        final boolean reverse,
-        final NodePointer startWith) {
+        NodePointer parent,
+        NodeTest nodeTest,
+        boolean reverse,
+        NodePointer startWith) {
@@ -56 +55,0 @@ public class DOMNodeIterator implements NodeIterator {
-    @Override
@@ -64 +62,0 @@ public class DOMNodeIterator implements NodeIterator {
-    @Override
@@ -69,2 +67 @@ public class DOMNodeIterator implements NodeIterator {
-    @Override
-    public boolean setPosition(final int position) {
+    public boolean setPosition(int position) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java
index bccb30ac..34bc25c4 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java
@@ -55 +55 @@ public class DOMNodePointer extends NodePointer {
-    private final Node node;
+    private Node node;
@@ -74 +74 @@ public class DOMNodePointer extends NodePointer {
-    public DOMNodePointer(final Node node, final Locale locale) {
+    public DOMNodePointer(Node node, Locale locale) {
@@ -85 +85 @@ public class DOMNodePointer extends NodePointer {
-    public DOMNodePointer(final Node node, final Locale locale, final String id) {
+    public DOMNodePointer(Node node, Locale locale, String id) {
@@ -96 +96 @@ public class DOMNodePointer extends NodePointer {
-    public DOMNodePointer(final NodePointer parent, final Node node) {
+    public DOMNodePointer(NodePointer parent, Node node) {
@@ -101,2 +101 @@ public class DOMNodePointer extends NodePointer {
-    @Override
-    public boolean testNode(final NodeTest test) {
+    public boolean testNode(NodeTest test) {
@@ -112 +111 @@ public class DOMNodePointer extends NodePointer {
-    public static boolean testNode(final Node node, final NodeTest test) {
+    public static boolean testNode(Node node, NodeTest test) {
@@ -121,5 +120,5 @@ public class DOMNodePointer extends NodePointer {
-            final NodeNameTest nodeNameTest = (NodeNameTest) test;
-            final QName testName = nodeNameTest.getNodeName();
-            final String namespaceURI = nodeNameTest.getNamespaceURI();
-            final boolean wildcard = nodeNameTest.isWildcard();
-            final String testPrefix = testName.getPrefix();
+            NodeNameTest nodeNameTest = (NodeNameTest) test;
+            QName testName = nodeNameTest.getNodeName();
+            String namespaceURI = nodeNameTest.getNamespaceURI();
+            boolean wildcard = nodeNameTest.isWildcard();
+            String testPrefix = testName.getPrefix();
@@ -132 +131 @@ public class DOMNodePointer extends NodePointer {
-                final String nodeNS = DOMNodePointer.getNamespaceURI(node);
+                String nodeNS = DOMNodePointer.getNamespaceURI(node);
@@ -139 +138 @@ public class DOMNodePointer extends NodePointer {
-            final int nodeType = node.getNodeType();
+            int nodeType = node.getNodeType();
@@ -156,2 +155,2 @@ public class DOMNodePointer extends NodePointer {
-            final String testPI = ((ProcessingInstructionTest) test).getTarget();
-            final String nodePI = ((ProcessingInstruction) node).getTarget();
+            String testPI = ((ProcessingInstructionTest) test).getTarget();
+            String nodePI = ((ProcessingInstruction) node).getTarget();
@@ -178 +176,0 @@ public class DOMNodePointer extends NodePointer {
-    @Override
@@ -182 +180 @@ public class DOMNodePointer extends NodePointer {
-        final int type = node.getNodeType();
+        int type = node.getNodeType();
@@ -193 +190,0 @@ public class DOMNodePointer extends NodePointer {
-    @Override
@@ -198,3 +195,2 @@ public class DOMNodePointer extends NodePointer {
-    @Override
-    public NodeIterator childIterator(final NodeTest test, final boolean reverse,
-            final NodePointer startWith) {
+    public NodeIterator childIterator(NodeTest test, boolean reverse,
+            NodePointer startWith) {
@@ -204,2 +200 @@ public class DOMNodePointer extends NodePointer {
-    @Override
-    public NodeIterator attributeIterator(final QName name) {
+    public NodeIterator attributeIterator(QName name) {
@@ -209,2 +204 @@ public class DOMNodePointer extends NodePointer {
-    @Override
-    public NodePointer namespacePointer(final String prefix) {
+    public NodePointer namespacePointer(String prefix) {
@@ -214 +207,0 @@ public class DOMNodePointer extends NodePointer {
-    @Override
@@ -219 +211,0 @@ public class DOMNodePointer extends NodePointer {
-    @Override
@@ -228,2 +220 @@ public class DOMNodePointer extends NodePointer {
-    @Override
-    public String getNamespaceURI(final String prefix) {
+    public String getNamespaceURI(String prefix) {
@@ -251 +242 @@ public class DOMNodePointer extends NodePointer {
-            final String qname = "xmlns:" + prefix;
+            String qname = "xmlns:" + prefix;
@@ -258 +249 @@ public class DOMNodePointer extends NodePointer {
-                    final Attr attr = ((Element) aNode).getAttributeNode(qname);
+                    Attr attr = ((Element) aNode).getAttributeNode(qname);
@@ -280 +270,0 @@ public class DOMNodePointer extends NodePointer {
-    @Override
@@ -289 +279 @@ public class DOMNodePointer extends NodePointer {
-                    final Attr attr = ((Element) aNode).getAttributeNode("xmlns");
+                    Attr attr = ((Element) aNode).getAttributeNode("xmlns");
@@ -305 +294,0 @@ public class DOMNodePointer extends NodePointer {
-    @Override
@@ -310 +298,0 @@ public class DOMNodePointer extends NodePointer {
-    @Override
@@ -315 +302,0 @@ public class DOMNodePointer extends NodePointer {
-    @Override
@@ -320 +306,0 @@ public class DOMNodePointer extends NodePointer {
-    @Override
@@ -325 +310,0 @@ public class DOMNodePointer extends NodePointer {
-    @Override
@@ -330 +314,0 @@ public class DOMNodePointer extends NodePointer {
-    @Override
@@ -342,3 +326,2 @@ public class DOMNodePointer extends NodePointer {
-    @Override
-    public boolean isLanguage(final String lang) {
-        final String current = getLanguage();
+    public boolean isLanguage(String lang) {
+        String current = getLanguage();
@@ -356 +339 @@ public class DOMNodePointer extends NodePointer {
-    protected static String findEnclosingAttribute(Node n, final String attrName) {
+    protected static String findEnclosingAttribute(Node n, String attrName) {
@@ -359,2 +342,2 @@ public class DOMNodePointer extends NodePointer {
-                final Element e = (Element) n;
-                final String attr = e.getAttribute(attrName);
+                Element e = (Element) n;
+                String attr = e.getAttribute(attrName);
@@ -385,2 +368 @@ public class DOMNodePointer extends NodePointer {
-    @Override
-    public void setValue(final Object value) {
+    public void setValue(Object value) {
@@ -389 +371 @@ public class DOMNodePointer extends NodePointer {
-            final String string = (String) TypeUtils.convert(value, String.class);
+            String string = (String) TypeUtils.convert(value, String.class);
@@ -399 +381 @@ public class DOMNodePointer extends NodePointer {
-            final int count = children.getLength();
+            int count = children.getLength();
@@ -401 +383 @@ public class DOMNodePointer extends NodePointer {
-                final Node child = children.item(i);
+                Node child = children.item(i);
@@ -406 +388 @@ public class DOMNodePointer extends NodePointer {
-                final Node valueNode = (Node) value;
+                Node valueNode = (Node) value;
@@ -411 +393 @@ public class DOMNodePointer extends NodePointer {
-                        final Node child = children.item(i);
+                        Node child = children.item(i);
@@ -420 +402 @@ public class DOMNodePointer extends NodePointer {
-                final String string = (String) TypeUtils.convert(value, String.class);
+                String string = (String) TypeUtils.convert(value, String.class);
@@ -422 +404 @@ public class DOMNodePointer extends NodePointer {
-                    final Node textNode =
+                    Node textNode =
@@ -430,2 +412 @@ public class DOMNodePointer extends NodePointer {
-    @Override
-    public NodePointer createChild(final JXPathContext context, final QName name, int index) {
+    public NodePointer createChild(JXPathContext context, QName name, int index) {
@@ -435 +416 @@ public class DOMNodePointer extends NodePointer {
-        final boolean success =
+        boolean success =
@@ -444,2 +425,2 @@ public class DOMNodePointer extends NodePointer {
-            final String prefix = name.getPrefix();
-            final String namespaceURI = prefix == null ? null : context
+            String prefix = name.getPrefix();
+            String namespaceURI = prefix == null ? null : context
@@ -449 +430 @@ public class DOMNodePointer extends NodePointer {
-            final NodeIterator it = childIterator(nodeTest, false, null);
+            NodeIterator it = childIterator(nodeTest, false, null);
@@ -459,4 +440,3 @@ public class DOMNodePointer extends NodePointer {
-    @Override
-    public NodePointer createChild(final JXPathContext context, final QName name,
-            final int index, final Object value) {
-        final NodePointer ptr = createChild(context, name, index);
+    public NodePointer createChild(JXPathContext context, QName name,
+            int index, Object value) {
+        NodePointer ptr = createChild(context, name, index);
@@ -467,2 +447 @@ public class DOMNodePointer extends NodePointer {
-    @Override
-    public NodePointer createAttribute(final JXPathContext context, final QName name) {
+    public NodePointer createAttribute(JXPathContext context, QName name) {
@@ -472,2 +451,2 @@ public class DOMNodePointer extends NodePointer {
-        final Element element = (Element) node;
-        final String prefix = name.getPrefix();
+        Element element = (Element) node;
+        String prefix = name.getPrefix();
@@ -476 +455 @@ public class DOMNodePointer extends NodePointer {
-            final NamespaceResolver nsr = getNamespaceResolver();
+            NamespaceResolver nsr = getNamespaceResolver();
@@ -491 +470 @@ public class DOMNodePointer extends NodePointer {
-        final NodeIterator it = attributeIterator(name);
+        NodeIterator it = attributeIterator(name);
@@ -496 +474,0 @@ public class DOMNodePointer extends NodePointer {
-    @Override
@@ -498 +476 @@ public class DOMNodePointer extends NodePointer {
-        final Node parent = node.getParentNode();
+        Node parent = node.getParentNode();
@@ -505 +482,0 @@ public class DOMNodePointer extends NodePointer {
-    @Override
@@ -511 +488 @@ public class DOMNodePointer extends NodePointer {
-        final StringBuffer buffer = new StringBuffer();
+        StringBuffer buffer = new StringBuffer();
@@ -525,2 +502,2 @@ public class DOMNodePointer extends NodePointer {
-                    final String ln = DOMNodePointer.getLocalName(node);
-                    final String nsURI = getNamespaceURI();
+                    String ln = DOMNodePointer.getLocalName(node);
+                    String nsURI = getNamespaceURI();
@@ -533 +510 @@ public class DOMNodePointer extends NodePointer {
-                        final String prefix = getNamespaceResolver().getPrefix(nsURI);
+                        String prefix = getNamespaceResolver().getPrefix(nsURI);
@@ -588 +565 @@ public class DOMNodePointer extends NodePointer {
-    private boolean matchesQName(final Node n) {
+    private boolean matchesQName(Node n) {
@@ -635 +612 @@ public class DOMNodePointer extends NodePointer {
-        final String target = ((ProcessingInstruction) node).getTarget();
+        String target = ((ProcessingInstruction) node).getTarget();
@@ -647 +623,0 @@ public class DOMNodePointer extends NodePointer {
-    @Override
@@ -652,2 +628 @@ public class DOMNodePointer extends NodePointer {
-    @Override
-    public boolean equals(final Object object) {
+    public boolean equals(Object object) {
@@ -662,2 +637,2 @@ public class DOMNodePointer extends NodePointer {
-    public static String getPrefix(final Node node) {
-        final String prefix = node.getPrefix();
+    public static String getPrefix(Node node) {
+        String prefix = node.getPrefix();
@@ -668,2 +643,2 @@ public class DOMNodePointer extends NodePointer {
-        final String name = node.getNodeName();
-        final int index = name.lastIndexOf(':');
+        String name = node.getNodeName();
+        int index = name.lastIndexOf(':');
@@ -678,2 +653,2 @@ public class DOMNodePointer extends NodePointer {
-    public static String getLocalName(final Node node) {
-        final String localName = node.getLocalName();
+    public static String getLocalName(Node node) {
+        String localName = node.getLocalName();
@@ -684,2 +659,2 @@ public class DOMNodePointer extends NodePointer {
-        final String name = node.getNodeName();
-        final int index = name.lastIndexOf(':');
+        String name = node.getNodeName();
+        int index = name.lastIndexOf(':');
@@ -699 +674 @@ public class DOMNodePointer extends NodePointer {
-        final Element element = (Element) node;
+        Element element = (Element) node;
@@ -703,2 +678,2 @@ public class DOMNodePointer extends NodePointer {
-            final String prefix = getPrefix(node);
-            final String qname = prefix == null ? "xmlns" : "xmlns:" + prefix;
+            String prefix = getPrefix(node);
+            String qname = prefix == null ? "xmlns" : "xmlns:" + prefix;
@@ -709 +684 @@ public class DOMNodePointer extends NodePointer {
-                    final Attr attr = ((Element) aNode).getAttributeNode(qname);
+                    Attr attr = ((Element) aNode).getAttributeNode(qname);
@@ -721 +695,0 @@ public class DOMNodePointer extends NodePointer {
-    @Override
@@ -724 +698 @@ public class DOMNodePointer extends NodePointer {
-            final String text = ((Comment) node).getData();
+            String text = ((Comment) node).getData();
@@ -735,2 +709,2 @@ public class DOMNodePointer extends NodePointer {
-    private String stringValue(final Node node) {
-        final int nodeType = node.getNodeType();
+    private String stringValue(Node node) {
+        int nodeType = node.getNodeType();
@@ -740 +714 @@ public class DOMNodePointer extends NodePointer {
-        final boolean trim = !"preserve".equals(findEnclosingAttribute(node, "xml:space"));
+        boolean trim = !"preserve".equals(findEnclosingAttribute(node, "xml:space"));
@@ -742 +716 @@ public class DOMNodePointer extends NodePointer {
-            final String text = node.getNodeValue();
+            String text = node.getNodeValue();
@@ -746 +720 @@ public class DOMNodePointer extends NodePointer {
-            final String text = ((ProcessingInstruction) node).getData();
+            String text = ((ProcessingInstruction) node).getData();
@@ -749,2 +723,2 @@ public class DOMNodePointer extends NodePointer {
-        final NodeList list = node.getChildNodes();
-        final StringBuffer buf = new StringBuffer();
+        NodeList list = node.getChildNodes();
+        StringBuffer buf = new StringBuffer();
@@ -752 +726 @@ public class DOMNodePointer extends NodePointer {
-            final Node child = list.item(i);
+            Node child = list.item(i);
@@ -764,3 +738,2 @@ public class DOMNodePointer extends NodePointer {
-    @Override
-    public Pointer getPointerByID(final JXPathContext context, final String id) {
-        final Document document = node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node
+    public Pointer getPointerByID(JXPathContext context, String id) {
+        Document document = node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node
@@ -768 +741 @@ public class DOMNodePointer extends NodePointer {
-        final Element element = document.getElementById(id);
+        Element element = document.getElementById(id);
@@ -773,5 +746,4 @@ public class DOMNodePointer extends NodePointer {
-    @Override
-    public int compareChildNodePointers(final NodePointer pointer1,
-            final NodePointer pointer2) {
-        final Node node1 = (Node) pointer1.getBaseValue();
-        final Node node2 = (Node) pointer2.getBaseValue();
+    public int compareChildNodePointers(NodePointer pointer1,
+            NodePointer pointer2) {
+        Node node1 = (Node) pointer1.getBaseValue();
+        Node node2 = (Node) pointer2.getBaseValue();
@@ -782,2 +754,2 @@ public class DOMNodePointer extends NodePointer {
-        final int t1 = node1.getNodeType();
-        final int t2 = node2.getNodeType();
+        int t1 = node1.getNodeType();
+        int t2 = node2.getNodeType();
@@ -791,2 +763,2 @@ public class DOMNodePointer extends NodePointer {
-            final NamedNodeMap map = ((Node) getNode()).getAttributes();
-            final int length = map.getLength();
+            NamedNodeMap map = ((Node) getNode()).getAttributes();
+            int length = map.getLength();
@@ -794 +766 @@ public class DOMNodePointer extends NodePointer {
-                final Node n = map.item(i);
+                Node n = map.item(i);
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMPointerFactory.java b/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMPointerFactory.java
index 4d2f80cd..442eaa3b 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMPointerFactory.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMPointerFactory.java
@@ -34 +33,0 @@ public class DOMPointerFactory implements NodePointerFactory {
-    @Override
@@ -39 +37,0 @@ public class DOMPointerFactory implements NodePointerFactory {
-    @Override
@@ -41,3 +39,3 @@ public class DOMPointerFactory implements NodePointerFactory {
-        final QName name,
-        final Object bean,
-        final Locale locale) {
+        QName name,
+        Object bean,
+        Locale locale) {
@@ -47 +44,0 @@ public class DOMPointerFactory implements NodePointerFactory {
-    @Override
@@ -49,3 +46,3 @@ public class DOMPointerFactory implements NodePointerFactory {
-        final NodePointer parent,
-        final QName name,
-        final Object bean) {
+        NodePointer parent,
+        QName name,
+        Object bean) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dom/NamespacePointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/dom/NamespacePointer.java
index adc9c41b..3571c02c 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dom/NamespacePointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dom/NamespacePointer.java
@@ -29 +29 @@ public class NamespacePointer extends NodePointer {
-    private final String prefix;
+    private String prefix;
@@ -39 +39 @@ public class NamespacePointer extends NodePointer {
-    public NamespacePointer(final NodePointer parent, final String prefix) {
+    public NamespacePointer(NodePointer parent, String prefix) {
@@ -51,3 +51,3 @@ public class NamespacePointer extends NodePointer {
-        final NodePointer parent,
-        final String prefix,
-        final String namespaceURI) {
+        NodePointer parent,
+        String prefix,
+        String namespaceURI) {
@@ -59 +58,0 @@ public class NamespacePointer extends NodePointer {
-    @Override
@@ -64 +62,0 @@ public class NamespacePointer extends NodePointer {
-    @Override
@@ -69 +66,0 @@ public class NamespacePointer extends NodePointer {
-    @Override
@@ -74 +70,0 @@ public class NamespacePointer extends NodePointer {
-    @Override
@@ -79 +74,0 @@ public class NamespacePointer extends NodePointer {
-    @Override
@@ -84 +78,0 @@ public class NamespacePointer extends NodePointer {
-    @Override
@@ -92 +85,0 @@ public class NamespacePointer extends NodePointer {
-    @Override
@@ -101,2 +94 @@ public class NamespacePointer extends NodePointer {
-    @Override
-    public void setValue(final Object value) {
+    public void setValue(Object value) {
@@ -106,2 +98 @@ public class NamespacePointer extends NodePointer {
-    @Override
-    public boolean testNode(final NodeTest nodeTest) {
+    public boolean testNode(NodeTest nodeTest) {
@@ -109 +100 @@ public class NamespacePointer extends NodePointer {
-            || nodeTest instanceof NodeTypeTest
+            || ((nodeTest instanceof NodeTypeTest)
@@ -111 +102 @@ public class NamespacePointer extends NodePointer {
-                    == Compiler.NODE_TYPE_NODE;
+                    == Compiler.NODE_TYPE_NODE);
@@ -114 +104,0 @@ public class NamespacePointer extends NodePointer {
-    @Override
@@ -116 +106 @@ public class NamespacePointer extends NodePointer {
-        final StringBuffer buffer = new StringBuffer();
+        StringBuffer buffer = new StringBuffer();
@@ -129 +118,0 @@ public class NamespacePointer extends NodePointer {
-    @Override
@@ -134,2 +123 @@ public class NamespacePointer extends NodePointer {
-    @Override
-    public boolean equals(final Object object) {
+    public boolean equals(Object object) {
@@ -144 +132 @@ public class NamespacePointer extends NodePointer {
-        final NamespacePointer other = (NamespacePointer) object;
+        NamespacePointer other = (NamespacePointer) object;
@@ -148 +135,0 @@ public class NamespacePointer extends NodePointer {
-    @Override
@@ -150,2 +137,2 @@ public class NamespacePointer extends NodePointer {
-        final NodePointer pointer1,
-        final NodePointer pointer2) {
+        NodePointer pointer1,
+        NodePointer pointer2) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPointer.java
index c96c04c5..4ac79db5 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPointer.java
@@ -35,2 +35,2 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
-    private final QName name;
-    private final DynaBean dynaBean;
+    private QName name;
+    private DynaBean dynaBean;
@@ -44 +44 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
-    public DynaBeanPointer(final QName name, final DynaBean dynaBean, final Locale locale) {
+    public DynaBeanPointer(QName name, DynaBean dynaBean, Locale locale) {
@@ -56 +56 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
-    public DynaBeanPointer(final NodePointer parent, final QName name, final DynaBean dynaBean) {
+    public DynaBeanPointer(NodePointer parent, QName name, DynaBean dynaBean) {
@@ -62 +61,0 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
-    @Override
@@ -67 +65,0 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
-    @Override
@@ -72 +69,0 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
-    @Override
@@ -77 +73,0 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
-    @Override
@@ -82 +77,0 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
-    @Override
@@ -87 +81,0 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
-    @Override
@@ -92 +85,0 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
-    @Override
@@ -97 +89,0 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
-    @Override
@@ -102,2 +94 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
-    @Override
-    public boolean equals(final Object object) {
+    public boolean equals(Object object) {
@@ -112 +103 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
-        final DynaBeanPointer other = (DynaBeanPointer) object;
+        DynaBeanPointer other = (DynaBeanPointer) object;
@@ -117,2 +108,2 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
-        final int iThis = index == WHOLE_COLLECTION ? 0 : index;
-        final int iOther = other.index == WHOLE_COLLECTION ? 0 : other.index;
+        int iThis = (index == WHOLE_COLLECTION ? 0 : index);
+        int iOther = (other.index == WHOLE_COLLECTION ? 0 : other.index);
@@ -122 +112,0 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
-    @Override
@@ -133 +123 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
-    private static boolean equalObjects(final Object o1, final Object o2) {
+    private static boolean equalObjects(Object o1, Object o2) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPointerFactory.java b/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPointerFactory.java
index 4c56401a..96d500ae 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPointerFactory.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPointerFactory.java
@@ -37 +36,0 @@ public class DynaBeanPointerFactory implements NodePointerFactory {
-    @Override
@@ -42,2 +41 @@ public class DynaBeanPointerFactory implements NodePointerFactory {
-    @Override
-    public NodePointer createNodePointer(final QName name, final Object bean, final Locale locale) {
+    public NodePointer createNodePointer(QName name, Object bean, Locale locale) {
@@ -47,3 +45,2 @@ public class DynaBeanPointerFactory implements NodePointerFactory {
-    @Override
-    public NodePointer createNodePointer(final NodePointer parent, final QName name,
-            final Object bean) {
+    public NodePointer createNodePointer(NodePointer parent, QName name,
+            Object bean) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPropertyPointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPropertyPointer.java
index 22666579..40b3e14d 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPropertyPointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPropertyPointer.java
@@ -38 +38 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-    private final DynaBean dynaBean;
+    private DynaBean dynaBean;
@@ -49 +49 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-    public DynaBeanPropertyPointer(final NodePointer parent, final DynaBean dynaBean) {
+    public DynaBeanPropertyPointer(NodePointer parent, DynaBean dynaBean) {
@@ -54 +53,0 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-    @Override
@@ -63 +61,0 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-    @Override
@@ -68 +65,0 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-    @Override
@@ -73 +69,0 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-    @Override
@@ -77,5 +73,5 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-            final DynaClass dynaClass = dynaBean.getDynaClass();
-            final DynaProperty[] dynaProperties = dynaClass.getDynaProperties();
-            final ArrayList properties = new ArrayList(dynaProperties.length);
-            for (final DynaProperty element : dynaProperties) {
-                final String name = element.getName();
+            DynaClass dynaClass = dynaBean.getDynaClass();
+            DynaProperty[] dynaProperties = dynaClass.getDynaProperties();
+            ArrayList properties = new ArrayList(dynaProperties.length);
+            for (int i = 0; i < dynaProperties.length; i++) {
+                String name = dynaProperties[i].getName();
@@ -97 +92,0 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-    @Override
@@ -100 +95 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-            final String[] names = getPropertyNames();
+            String[] names = getPropertyNames();
@@ -110,2 +105 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-    @Override
-    public void setPropertyName(final String propertyName) {
+    public void setPropertyName(String propertyName) {
@@ -121 +114,0 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-    @Override
@@ -124 +117 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-            final String[] names = getPropertyNames();
+            String[] names = getPropertyNames();
@@ -141,2 +134 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-    @Override
-    public void setPropertyIndex(final int index) {
+    public void setPropertyIndex(int index) {
@@ -156 +147,0 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-    @Override
@@ -158 +149 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-        final String name = getPropertyName();
+        String name = getPropertyName();
@@ -175 +166 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-            catch (final ArrayIndexOutOfBoundsException ex) {
+            catch (ArrayIndexOutOfBoundsException ex) {
@@ -178 +169 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-            catch (final IllegalArgumentException ex) {
+            catch (IllegalArgumentException ex) {
@@ -199 +189,0 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-    @Override
@@ -201 +191 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-        final DynaClass dynaClass = dynaBean.getDynaClass();
+        DynaClass dynaClass = dynaBean.getDynaClass();
@@ -210,2 +200,2 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-        final DynaClass dynaClass = dynaBean.getDynaClass();
-        final DynaProperty property = dynaClass.getDynaProperty(name);
+        DynaClass dynaClass = dynaBean.getDynaClass();
+        DynaProperty property = dynaClass.getDynaProperty(name);
@@ -221,2 +211 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-    @Override
-    public void setValue(final Object value) {
+    public void setValue(Object value) {
@@ -226 +214,0 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-    @Override
@@ -235 +223 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-            final Object collection = ValueUtils.remove(getBaseValue(), index);
+            Object collection = ValueUtils.remove(getBaseValue(), index);
@@ -248 +236 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-    private void setValue(final int index, final Object value) {
+    private void setValue(int index, Object value) {
@@ -256 +244 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-            final Object baseValue = dynaBean.get(getPropertyName());
+            Object baseValue = dynaBean.get(getPropertyName());
@@ -268,3 +256,3 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-    private Object convert(final Object value, final boolean element) {
-        final DynaClass dynaClass = dynaBean.getDynaClass();
-        final DynaProperty property = dynaClass.getDynaProperty(getPropertyName());
+    private Object convert(Object value, boolean element) {
+        DynaClass dynaClass = dynaBean.getDynaClass();
+        DynaProperty property = dynaClass.getDynaProperty(getPropertyName());
@@ -284,2 +272,2 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-        catch (final Exception ex) {
-            final String string = value == null ? "null" : value.getClass().getName();
+        catch (Exception ex) {
+            String string = value == null ? "null" : value.getClass().getName();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/StrictLazyDynaBeanPointerFactory.java b/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/StrictLazyDynaBeanPointerFactory.java
index bce9c36a..6714f1ce 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/StrictLazyDynaBeanPointerFactory.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/StrictLazyDynaBeanPointerFactory.java
@@ -53 +53 @@ public class StrictLazyDynaBeanPointerFactory implements NodePointerFactory {
-        public StrictLazyDynaBeanPointer(final NodePointer parent, final QName name, final LazyDynaBean lazyDynaBean) {
+        public StrictLazyDynaBeanPointer(NodePointer parent, QName name, LazyDynaBean lazyDynaBean) {
@@ -65 +65 @@ public class StrictLazyDynaBeanPointerFactory implements NodePointerFactory {
-        public StrictLazyDynaBeanPointer(final QName name, final LazyDynaBean lazyDynaBean, final Locale locale) {
+        public StrictLazyDynaBeanPointer(QName name, LazyDynaBean lazyDynaBean, Locale locale) {
@@ -73 +72,0 @@ public class StrictLazyDynaBeanPointerFactory implements NodePointerFactory {
-        @Override
@@ -78 +76,0 @@ public class StrictLazyDynaBeanPointerFactory implements NodePointerFactory {
-                @Override
@@ -90 +87,0 @@ public class StrictLazyDynaBeanPointerFactory implements NodePointerFactory {
-    @Override
@@ -98,2 +95 @@ public class StrictLazyDynaBeanPointerFactory implements NodePointerFactory {
-    @Override
-    public NodePointer createNodePointer(final QName name, final Object object, final Locale locale) {
+    public NodePointer createNodePointer(QName name, Object object, Locale locale) {
@@ -107,2 +103 @@ public class StrictLazyDynaBeanPointerFactory implements NodePointerFactory {
-    @Override
-    public NodePointer createNodePointer(final NodePointer parent, final QName name, final Object object) {
+    public NodePointer createNodePointer(NodePointer parent, QName name, Object object) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicAttributeIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicAttributeIterator.java
index dff26624..2a787934 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicAttributeIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicAttributeIterator.java
@@ -36 +36 @@ public class DynamicAttributeIterator extends BeanAttributeIterator {
-    public DynamicAttributeIterator(final PropertyOwnerPointer parent, final QName name) {
+    public DynamicAttributeIterator(PropertyOwnerPointer parent, QName name) {
@@ -40,2 +40 @@ public class DynamicAttributeIterator extends BeanAttributeIterator {
-    @Override
-    protected void prepareForIndividualProperty(final String name) {
+    protected void prepareForIndividualProperty(String name) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPointer.java
index ff692ec4..11501017 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPointer.java
@@ -36,3 +36,3 @@ public class DynamicPointer extends PropertyOwnerPointer {
-    private final QName name;
-    private final Object bean;
-    private final DynamicPropertyHandler handler;
+    private QName name;
+    private Object bean;
+    private DynamicPropertyHandler handler;
@@ -49,2 +49,2 @@ public class DynamicPointer extends PropertyOwnerPointer {
-    public DynamicPointer(final QName name, final Object bean,
-            final DynamicPropertyHandler handler, final Locale locale) {
+    public DynamicPointer(QName name, Object bean,
+            DynamicPropertyHandler handler, Locale locale) {
@@ -64,2 +64,2 @@ public class DynamicPointer extends PropertyOwnerPointer {
-    public DynamicPointer(final NodePointer parent, final QName name,
-            final Object bean, final DynamicPropertyHandler handler) {
+    public DynamicPointer(NodePointer parent, QName name,
+            Object bean, DynamicPropertyHandler handler) {
@@ -72 +71,0 @@ public class DynamicPointer extends PropertyOwnerPointer {
-    @Override
@@ -77 +75,0 @@ public class DynamicPointer extends PropertyOwnerPointer {
-    @Override
@@ -79 +77 @@ public class DynamicPointer extends PropertyOwnerPointer {
-                final String property, final boolean reverse, final NodePointer startWith) {
+                String property, boolean reverse, NodePointer startWith) {
@@ -83,2 +81 @@ public class DynamicPointer extends PropertyOwnerPointer {
-    @Override
-    public NodeIterator attributeIterator(final QName name) {
+    public NodeIterator attributeIterator(QName name) {
@@ -88 +84,0 @@ public class DynamicPointer extends PropertyOwnerPointer {
-    @Override
@@ -93 +88,0 @@ public class DynamicPointer extends PropertyOwnerPointer {
-    @Override
@@ -102 +96,0 @@ public class DynamicPointer extends PropertyOwnerPointer {
-    @Override
@@ -107 +100,0 @@ public class DynamicPointer extends PropertyOwnerPointer {
-    @Override
@@ -109 +102 @@ public class DynamicPointer extends PropertyOwnerPointer {
-        final Object value = getNode();
+        Object value = getNode();
@@ -113 +105,0 @@ public class DynamicPointer extends PropertyOwnerPointer {
-    @Override
@@ -122 +113,0 @@ public class DynamicPointer extends PropertyOwnerPointer {
-    @Override
@@ -127 +117,0 @@ public class DynamicPointer extends PropertyOwnerPointer {
-    @Override
@@ -132 +121,0 @@ public class DynamicPointer extends PropertyOwnerPointer {
-    @Override
@@ -137,2 +126 @@ public class DynamicPointer extends PropertyOwnerPointer {
-    @Override
-    public boolean equals(final Object object) {
+    public boolean equals(Object object) {
@@ -147 +135 @@ public class DynamicPointer extends PropertyOwnerPointer {
-        final DynamicPointer other = (DynamicPointer) object;
+        DynamicPointer other = (DynamicPointer) object;
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPointerFactory.java b/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPointerFactory.java
index c206f615..c8ac4ff4 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPointerFactory.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPointerFactory.java
@@ -40 +39,0 @@ public class DynamicPointerFactory implements NodePointerFactory {
-    @Override
@@ -45 +43,0 @@ public class DynamicPointerFactory implements NodePointerFactory {
-    @Override
@@ -47,4 +45,4 @@ public class DynamicPointerFactory implements NodePointerFactory {
-        final QName name,
-        final Object bean,
-        final Locale locale) {
-        final JXPathBeanInfo bi = JXPathIntrospector.getBeanInfo(bean.getClass());
+        QName name,
+        Object bean,
+        Locale locale) {
+        JXPathBeanInfo bi = JXPathIntrospector.getBeanInfo(bean.getClass());
@@ -52 +50 @@ public class DynamicPointerFactory implements NodePointerFactory {
-            final DynamicPropertyHandler handler =
+            DynamicPropertyHandler handler =
@@ -60 +57,0 @@ public class DynamicPointerFactory implements NodePointerFactory {
-    @Override
@@ -62,3 +59,3 @@ public class DynamicPointerFactory implements NodePointerFactory {
-        final NodePointer parent,
-        final QName name,
-        final Object bean) {
+        NodePointer parent,
+        QName name,
+        Object bean) {
@@ -69 +66 @@ public class DynamicPointerFactory implements NodePointerFactory {
-        final JXPathBeanInfo bi = JXPathIntrospector.getBeanInfo(bean.getClass());
+        JXPathBeanInfo bi = JXPathIntrospector.getBeanInfo(bean.getClass());
@@ -71 +68 @@ public class DynamicPointerFactory implements NodePointerFactory {
-            final DynamicPropertyHandler handler =
+            DynamicPropertyHandler handler =
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertyIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertyIterator.java
index 33b21b7b..18a90258 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertyIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertyIterator.java
@@ -27 +26,0 @@ import org.apache.commons.jxpath.ri.model.beans.PropertyOwnerPointer;
-@Deprecated
@@ -38,4 +37,4 @@ public class DynamicPropertyIterator extends PropertyIterator {
-            final PropertyOwnerPointer pointer,
-            final String name,
-            final boolean reverse,
-            final NodePointer startWith) {
+            PropertyOwnerPointer pointer,
+            String name,
+            boolean reverse,
+            NodePointer startWith) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertyPointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertyPointer.java
index 7d3970c9..f1bfe86c 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertyPointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertyPointer.java
@@ -38 +38 @@ public class DynamicPropertyPointer extends PropertyPointer {
-    private final DynamicPropertyHandler handler;
+    private DynamicPropertyHandler handler;
@@ -48,2 +48,2 @@ public class DynamicPropertyPointer extends PropertyPointer {
-    public DynamicPropertyPointer(final NodePointer parent,
-            final DynamicPropertyHandler handler) {
+    public DynamicPropertyPointer(NodePointer parent,
+            DynamicPropertyHandler handler) {
@@ -58 +57,0 @@ public class DynamicPropertyPointer extends PropertyPointer {
-    @Override
@@ -67 +65,0 @@ public class DynamicPropertyPointer extends PropertyPointer {
-    @Override
@@ -76 +73,0 @@ public class DynamicPropertyPointer extends PropertyPointer {
-    @Override
@@ -84 +81 @@ public class DynamicPropertyPointer extends PropertyPointer {
-                final int inx = Arrays.binarySearch(names, requiredPropertyName);
+                int inx = Arrays.binarySearch(names, requiredPropertyName);
@@ -102 +98,0 @@ public class DynamicPropertyPointer extends PropertyPointer {
-    @Override
@@ -105 +101 @@ public class DynamicPropertyPointer extends PropertyPointer {
-            final String[] names = getPropertyNames();
+            String[] names = getPropertyNames();
@@ -119,2 +115 @@ public class DynamicPropertyPointer extends PropertyPointer {
-    @Override
-    public void setPropertyName(final String propertyName) {
+    public void setPropertyName(String propertyName) {
@@ -134 +128,0 @@ public class DynamicPropertyPointer extends PropertyPointer {
-    @Override
@@ -137 +131 @@ public class DynamicPropertyPointer extends PropertyPointer {
-            final String[] names = getPropertyNames();
+            String[] names = getPropertyNames();
@@ -153,2 +147 @@ public class DynamicPropertyPointer extends PropertyPointer {
-    @Override
-    public void setPropertyIndex(final int index) {
+    public void setPropertyIndex(int index) {
@@ -166 +158,0 @@ public class DynamicPropertyPointer extends PropertyPointer {
-    @Override
@@ -178 +169,0 @@ public class DynamicPropertyPointer extends PropertyPointer {
-    @Override
@@ -199 +189,0 @@ public class DynamicPropertyPointer extends PropertyPointer {
-    @Override
@@ -210,2 +200 @@ public class DynamicPropertyPointer extends PropertyPointer {
-    @Override
-    public void setValue(final Object value) {
+    public void setValue(Object value) {
@@ -223,2 +212 @@ public class DynamicPropertyPointer extends PropertyPointer {
-    @Override
-    public NodePointer createPath(final JXPathContext context) {
+    public NodePointer createPath(JXPathContext context) {
@@ -228,2 +216,2 @@ public class DynamicPropertyPointer extends PropertyPointer {
-            final AbstractFactory factory = getAbstractFactory(context);
-            final boolean success =
+            AbstractFactory factory = getAbstractFactory(context);
+            boolean success =
@@ -258,2 +246 @@ public class DynamicPropertyPointer extends PropertyPointer {
-    @Override
-    public NodePointer createPath(final JXPathContext context, final Object value) {
+    public NodePointer createPath(JXPathContext context, Object value) {
@@ -270 +256,0 @@ public class DynamicPropertyPointer extends PropertyPointer {
-    @Override
@@ -276 +262 @@ public class DynamicPropertyPointer extends PropertyPointer {
-            final Object collection = ValueUtils.remove(getBaseValue(), index);
+            Object collection = ValueUtils.remove(getBaseValue(), index);
@@ -288 +274 @@ public class DynamicPropertyPointer extends PropertyPointer {
-        final Object bean = getBean();
+        Object bean = getBean();
@@ -297 +282,0 @@ public class DynamicPropertyPointer extends PropertyPointer {
-    @Override
@@ -299 +284 @@ public class DynamicPropertyPointer extends PropertyPointer {
-        final StringBuffer buffer = new StringBuffer();
+        StringBuffer buffer = new StringBuffer();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java
index 644a3f33..550a1c4e 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java
@@ -43 +43 @@ public class JDOMAttributeIterator implements NodeIterator {
-    public JDOMAttributeIterator(final NodePointer parent, final QName name) {
+    public JDOMAttributeIterator(NodePointer parent, QName name) {
@@ -46,2 +46,2 @@ public class JDOMAttributeIterator implements NodeIterator {
-            final Element element = (Element) parent.getNode();
-            final String prefix = name.getPrefix();
+            Element element = (Element) parent.getNode();
+            String prefix = name.getPrefix();
@@ -54 +54 @@ public class JDOMAttributeIterator implements NodeIterator {
-                    final String uri = parent.getNamespaceResolver().getNamespaceURI(prefix);
+                    String uri = parent.getNamespaceResolver().getNamespaceURI(prefix);
@@ -69 +69 @@ public class JDOMAttributeIterator implements NodeIterator {
-            final String lname = name.getName();
+            String lname = name.getName();
@@ -72 +72 @@ public class JDOMAttributeIterator implements NodeIterator {
-                final Attribute attr = element.getAttribute(lname, ns);
+                Attribute attr = element.getAttribute(lname, ns);
@@ -79 +79 @@ public class JDOMAttributeIterator implements NodeIterator {
-                final List allAttributes = element.getAttributes();
+                List allAttributes = element.getAttributes();
@@ -81 +81 @@ public class JDOMAttributeIterator implements NodeIterator {
-                    final Attribute attr = (Attribute) allAttributes.get(i);
+                    Attribute attr = (Attribute) allAttributes.get(i);
@@ -91 +90,0 @@ public class JDOMAttributeIterator implements NodeIterator {
-    @Override
@@ -108 +106,0 @@ public class JDOMAttributeIterator implements NodeIterator {
-    @Override
@@ -113,2 +111 @@ public class JDOMAttributeIterator implements NodeIterator {
-    @Override
-    public boolean setPosition(final int position) {
+    public boolean setPosition(int position) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributePointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributePointer.java
index f8536971..eac5bfc6 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributePointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributePointer.java
@@ -28 +28 @@ public class JDOMAttributePointer extends NodePointer {
-    private final Attribute attr;
+    private Attribute attr;
@@ -37 +37 @@ public class JDOMAttributePointer extends NodePointer {
-    public JDOMAttributePointer(final NodePointer parent, final Attribute attr) {
+    public JDOMAttributePointer(NodePointer parent, Attribute attr) {
@@ -42 +41,0 @@ public class JDOMAttributePointer extends NodePointer {
-    @Override
@@ -49 +47,0 @@ public class JDOMAttributePointer extends NodePointer {
-    @Override
@@ -58 +55,0 @@ public class JDOMAttributePointer extends NodePointer {
-    @Override
@@ -63 +59,0 @@ public class JDOMAttributePointer extends NodePointer {
-    @Override
@@ -68 +63,0 @@ public class JDOMAttributePointer extends NodePointer {
-    @Override
@@ -73 +67,0 @@ public class JDOMAttributePointer extends NodePointer {
-    @Override
@@ -78 +71,0 @@ public class JDOMAttributePointer extends NodePointer {
-    @Override
@@ -83 +75,0 @@ public class JDOMAttributePointer extends NodePointer {
-    @Override
@@ -88 +79,0 @@ public class JDOMAttributePointer extends NodePointer {
-    @Override
@@ -93,2 +84 @@ public class JDOMAttributePointer extends NodePointer {
-    @Override
-    public void setValue(final Object value) {
+    public void setValue(Object value) {
@@ -98 +87,0 @@ public class JDOMAttributePointer extends NodePointer {
-    @Override
@@ -103 +91,0 @@ public class JDOMAttributePointer extends NodePointer {
-    @Override
@@ -105 +93 @@ public class JDOMAttributePointer extends NodePointer {
-        final StringBuffer buffer = new StringBuffer();
+        StringBuffer buffer = new StringBuffer();
@@ -118 +105,0 @@ public class JDOMAttributePointer extends NodePointer {
-    @Override
@@ -123,2 +110 @@ public class JDOMAttributePointer extends NodePointer {
-    @Override
-    public boolean equals(final Object object) {
+    public boolean equals(Object object) {
@@ -129 +114,0 @@ public class JDOMAttributePointer extends NodePointer {
-    @Override
@@ -131,2 +116,2 @@ public class JDOMAttributePointer extends NodePointer {
-            final NodePointer pointer1,
-            final NodePointer pointer2) {
+            NodePointer pointer1,
+            NodePointer pointer2) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNamespaceIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNamespaceIterator.java
index d254a531..62c018dc 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNamespaceIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNamespaceIterator.java
@@ -34 +34 @@ public class JDOMNamespaceIterator implements NodeIterator {
-    private final NodePointer parent;
+    private NodePointer parent;
@@ -43 +43 @@ public class JDOMNamespaceIterator implements NodeIterator {
-    public JDOMNamespaceIterator(final NodePointer parent) {
+    public JDOMNamespaceIterator(NodePointer parent) {
@@ -60 +60 @@ public class JDOMNamespaceIterator implements NodeIterator {
-    private void collectNamespaces(final Element element) {
+    private void collectNamespaces(Element element) {
@@ -66 +66 @@ public class JDOMNamespaceIterator implements NodeIterator {
-        final List others = element.getAdditionalNamespaces();
+        List others = element.getAdditionalNamespaces();
@@ -74 +74 @@ public class JDOMNamespaceIterator implements NodeIterator {
-        final Object elementParent = element.getParent();
+        Object elementParent = element.getParent();
@@ -80 +79,0 @@ public class JDOMNamespaceIterator implements NodeIterator {
-    @Override
@@ -92 +91 @@ public class JDOMNamespaceIterator implements NodeIterator {
-        final Namespace ns = (Namespace) namespaces.get(index);
+        Namespace ns = (Namespace) namespaces.get(index);
@@ -96 +94,0 @@ public class JDOMNamespaceIterator implements NodeIterator {
-    @Override
@@ -101,2 +99 @@ public class JDOMNamespaceIterator implements NodeIterator {
-    @Override
-    public boolean setPosition(final int position) {
+    public boolean setPosition(int position) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNamespacePointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNamespacePointer.java
index fbfc769b..322fdcbd 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNamespacePointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNamespacePointer.java
@@ -26 +26 @@ public class JDOMNamespacePointer extends NodePointer {
-    private final String prefix;
+    private String prefix;
@@ -36 +36 @@ public class JDOMNamespacePointer extends NodePointer {
-    public JDOMNamespacePointer(final NodePointer parent, final String prefix) {
+    public JDOMNamespacePointer(NodePointer parent, String prefix) {
@@ -48,3 +48,3 @@ public class JDOMNamespacePointer extends NodePointer {
-            final NodePointer parent,
-            final String prefix,
-            final String namespaceURI) {
+            NodePointer parent,
+            String prefix,
+            String namespaceURI) {
@@ -56 +55,0 @@ public class JDOMNamespacePointer extends NodePointer {
-    @Override
@@ -61 +59,0 @@ public class JDOMNamespacePointer extends NodePointer {
-    @Override
@@ -66 +63,0 @@ public class JDOMNamespacePointer extends NodePointer {
-    @Override
@@ -71 +67,0 @@ public class JDOMNamespacePointer extends NodePointer {
-    @Override
@@ -76 +71,0 @@ public class JDOMNamespacePointer extends NodePointer {
-    @Override
@@ -81 +75,0 @@ public class JDOMNamespacePointer extends NodePointer {
-    @Override
@@ -89 +82,0 @@ public class JDOMNamespacePointer extends NodePointer {
-    @Override
@@ -98,2 +91 @@ public class JDOMNamespacePointer extends NodePointer {
-    @Override
-    public void setValue(final Object value) {
+    public void setValue(Object value) {
@@ -103 +94,0 @@ public class JDOMNamespacePointer extends NodePointer {
-    @Override
@@ -105 +96 @@ public class JDOMNamespacePointer extends NodePointer {
-        final StringBuffer buffer = new StringBuffer();
+        StringBuffer buffer = new StringBuffer();
@@ -118 +108,0 @@ public class JDOMNamespacePointer extends NodePointer {
-    @Override
@@ -123,2 +113 @@ public class JDOMNamespacePointer extends NodePointer {
-    @Override
-    public boolean equals(final Object object) {
+    public boolean equals(Object object) {
@@ -128 +116,0 @@ public class JDOMNamespacePointer extends NodePointer {
-    @Override
@@ -130,2 +118,2 @@ public class JDOMNamespacePointer extends NodePointer {
-        final NodePointer pointer1,
-        final NodePointer pointer2) {
+        NodePointer pointer1,
+        NodePointer pointer2) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodeIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodeIterator.java
index 872c638d..06e482e1 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodeIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodeIterator.java
@@ -32,2 +32,2 @@ public class JDOMNodeIterator implements NodeIterator {
-    private final NodePointer parent;
-    private final NodeTest nodeTest;
+    private NodePointer parent;
+    private NodeTest nodeTest;
@@ -35 +35 @@ public class JDOMNodeIterator implements NodeIterator {
-    private final boolean reverse;
+    private boolean reverse;
@@ -49,2 +49,2 @@ public class JDOMNodeIterator implements NodeIterator {
-            final NodePointer parent, final NodeTest nodeTest,
-            final boolean reverse, final NodePointer startWith) {
+            NodePointer parent, NodeTest nodeTest,
+            boolean reverse, NodePointer startWith) {
@@ -56 +56 @@ public class JDOMNodeIterator implements NodeIterator {
-        final Object node = parent.getNode();
+        Object node = parent.getNode();
@@ -70 +69,0 @@ public class JDOMNodeIterator implements NodeIterator {
-    @Override
@@ -82 +80,0 @@ public class JDOMNodeIterator implements NodeIterator {
-    @Override
@@ -87,2 +85 @@ public class JDOMNodeIterator implements NodeIterator {
-    @Override
-    public boolean setPosition(final int position) {
+    public boolean setPosition(int position) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java
index 5e544765..f53f23e5 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java
@@ -50 +50 @@ public class JDOMNodePointer extends NodePointer {
-    private final Object node;
+    private Object node;
@@ -67 +67 @@ public class JDOMNodePointer extends NodePointer {
-    public JDOMNodePointer(final Object node, final Locale locale) {
+    public JDOMNodePointer(Object node, Locale locale) {
@@ -78 +78 @@ public class JDOMNodePointer extends NodePointer {
-    public JDOMNodePointer(final Object node, final Locale locale, final String id) {
+    public JDOMNodePointer(Object node, Locale locale, String id) {
@@ -89 +89 @@ public class JDOMNodePointer extends NodePointer {
-    public JDOMNodePointer(final NodePointer parent, final Object node) {
+    public JDOMNodePointer(NodePointer parent, Object node) {
@@ -94 +93,0 @@ public class JDOMNodePointer extends NodePointer {
-    @Override
@@ -96,3 +95,3 @@ public class JDOMNodePointer extends NodePointer {
-        final NodeTest test,
-        final boolean reverse,
-        final NodePointer startWith) {
+        NodeTest test,
+        boolean reverse,
+        NodePointer startWith) {
@@ -102,2 +101 @@ public class JDOMNodePointer extends NodePointer {
-    @Override
-    public NodeIterator attributeIterator(final QName name) {
+    public NodeIterator attributeIterator(QName name) {
@@ -107 +104,0 @@ public class JDOMNodePointer extends NodePointer {
-    @Override
@@ -112,2 +109 @@ public class JDOMNodePointer extends NodePointer {
-    @Override
-    public NodePointer namespacePointer(final String prefix) {
+    public NodePointer namespacePointer(String prefix) {
@@ -117 +112,0 @@ public class JDOMNodePointer extends NodePointer {
-    @Override
@@ -127 +122 @@ public class JDOMNodePointer extends NodePointer {
-    private static String getNamespaceURI(final Object node) {
+    private static String getNamespaceURI(Object node) {
@@ -129 +124 @@ public class JDOMNodePointer extends NodePointer {
-            final Element element = (Element) node;
+            Element element = (Element) node;
@@ -139 +133,0 @@ public class JDOMNodePointer extends NodePointer {
-    @Override
@@ -148,2 +142 @@ public class JDOMNodePointer extends NodePointer {
-    @Override
-    public String getNamespaceURI(final String prefix) {
+    public String getNamespaceURI(String prefix) {
@@ -163 +156 @@ public class JDOMNodePointer extends NodePointer {
-        final Namespace ns = element.getNamespace(prefix);
+        Namespace ns = element.getNamespace(prefix);
@@ -167 +159,0 @@ public class JDOMNodePointer extends NodePointer {
-    @Override
@@ -169,4 +161,4 @@ public class JDOMNodePointer extends NodePointer {
-        final NodePointer pointer1,
-        final NodePointer pointer2) {
-        final Object node1 = pointer1.getBaseValue();
-        final Object node2 = pointer2.getBaseValue();
+        NodePointer pointer1,
+        NodePointer pointer2) {
+        Object node1 = pointer1.getBaseValue();
+        Object node2 = pointer2.getBaseValue();
@@ -177 +169 @@ public class JDOMNodePointer extends NodePointer {
-        if (node1 instanceof Attribute && !(node2 instanceof Attribute)) {
+        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {
@@ -181 +173 @@ public class JDOMNodePointer extends NodePointer {
-            !(node1 instanceof Attribute) && node2 instanceof Attribute) {
+            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {
@@ -185,3 +177,3 @@ public class JDOMNodePointer extends NodePointer {
-            node1 instanceof Attribute && node2 instanceof Attribute) {
-            final List list = ((Element) getNode()).getAttributes();
-            final int length = list.size();
+            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {
+            List list = ((Element) getNode()).getAttributes();
+            int length = list.size();
@@ -189 +181 @@ public class JDOMNodePointer extends NodePointer {
-                final Object n = list.get(i);
+                Object n = list.get(i);
@@ -207,2 +199,2 @@ public class JDOMNodePointer extends NodePointer {
-        final List children = ((Element) node).getContent();
-        final int length = children.size();
+        List children = ((Element) node).getContent();
+        int length = children.size();
@@ -210 +202 @@ public class JDOMNodePointer extends NodePointer {
-            final Object n = children.get(i);
+            Object n = children.get(i);
@@ -222 +213,0 @@ public class JDOMNodePointer extends NodePointer {
-    @Override
@@ -227 +217,0 @@ public class JDOMNodePointer extends NodePointer {
-    @Override
@@ -232 +221,0 @@ public class JDOMNodePointer extends NodePointer {
-    @Override
@@ -237 +225,0 @@ public class JDOMNodePointer extends NodePointer {
-    @Override
@@ -248 +235,0 @@ public class JDOMNodePointer extends NodePointer {
-    @Override
@@ -265 +251,0 @@ public class JDOMNodePointer extends NodePointer {
-    @Override
@@ -270 +255,0 @@ public class JDOMNodePointer extends NodePointer {
-    @Override
@@ -273,3 +258,3 @@ public class JDOMNodePointer extends NodePointer {
-            final StringBuffer buf = new StringBuffer();
-            for (final NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1);) {
-                final NodePointer ptr = children.getNodePointer();
+            StringBuffer buf = new StringBuffer();
+            for (NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1);) {
+                NodePointer ptr = children.getNodePointer();
@@ -296 +281 @@ public class JDOMNodePointer extends NodePointer {
-        final boolean trim = !"preserve".equals(findEnclosingAttribute(node, "space", Namespace.XML_NAMESPACE));
+        boolean trim = !"preserve".equals(findEnclosingAttribute(node, "space", Namespace.XML_NAMESPACE));
@@ -300,2 +285 @@ public class JDOMNodePointer extends NodePointer {
-    @Override
-    public void setValue(final Object value) {
+    public void setValue(Object value) {
@@ -303 +287 @@ public class JDOMNodePointer extends NodePointer {
-            final String string = (String) TypeUtils.convert(value, String.class);
+            String string = (String) TypeUtils.convert(value, String.class);
@@ -312 +296 @@ public class JDOMNodePointer extends NodePointer {
-            final Element element = (Element) node;
+            Element element = (Element) node;
@@ -316 +300 @@ public class JDOMNodePointer extends NodePointer {
-                final Element valueElement = (Element) value;
+                Element valueElement = (Element) value;
@@ -320 +304 @@ public class JDOMNodePointer extends NodePointer {
-                final Document valueDocument = (Document) value;
+                Document valueDocument = (Document) value;
@@ -324 +308 @@ public class JDOMNodePointer extends NodePointer {
-                final String string = ((Text) value).getText();
+                String string = ((Text) value).getText();
@@ -328 +312 @@ public class JDOMNodePointer extends NodePointer {
-                final ProcessingInstruction pi =
+                ProcessingInstruction pi =
@@ -334 +318 @@ public class JDOMNodePointer extends NodePointer {
-                final Comment comment = (Comment) ((Comment) value).clone();
+                Comment comment = (Comment) ((Comment) value).clone();
@@ -338 +322 @@ public class JDOMNodePointer extends NodePointer {
-                final String string = (String) TypeUtils.convert(value, String.class);
+                String string = (String) TypeUtils.convert(value, String.class);
@@ -350,3 +334,3 @@ public class JDOMNodePointer extends NodePointer {
-    private void addContent(final List content) {
-        final Element element = (Element) node;
-        final int count = content.size();
+    private void addContent(List content) {
+        Element element = (Element) node;
+        int count = content.size();
@@ -379,2 +363 @@ public class JDOMNodePointer extends NodePointer {
-    @Override
-    public boolean testNode(final NodeTest test) {
+    public boolean testNode(NodeTest test) {
@@ -392,3 +375,3 @@ public class JDOMNodePointer extends NodePointer {
-        final NodePointer pointer,
-        final Object node,
-        final NodeTest test) {
+        NodePointer pointer,
+        Object node,
+        NodeTest test) {
@@ -403,5 +386,5 @@ public class JDOMNodePointer extends NodePointer {
-            final NodeNameTest nodeNameTest = (NodeNameTest) test;
-            final QName testName = nodeNameTest.getNodeName();
-            final String namespaceURI = nodeNameTest.getNamespaceURI();
-            final boolean wildcard = nodeNameTest.isWildcard();
-            final String testPrefix = testName.getPrefix();
+            NodeNameTest nodeNameTest = (NodeNameTest) test;
+            QName testName = nodeNameTest.getNodeName();
+            String namespaceURI = nodeNameTest.getNamespaceURI();
+            boolean wildcard = nodeNameTest.isWildcard();
+            String testPrefix = testName.getPrefix();
@@ -414 +397 @@ public class JDOMNodePointer extends NodePointer {
-                final String nodeNS = JDOMNodePointer.getNamespaceURI(node);
+                String nodeNS = JDOMNodePointer.getNamespaceURI(node);
@@ -425 +408 @@ public class JDOMNodePointer extends NodePointer {
-                    return node instanceof Text || node instanceof CDATA;
+                    return (node instanceof Text) || (node instanceof CDATA);
@@ -435,2 +418,2 @@ public class JDOMNodePointer extends NodePointer {
-            final String testPI = ((ProcessingInstructionTest) test).getTarget();
-            final String nodePI = ((ProcessingInstruction) node).getTarget();
+            String testPI = ((ProcessingInstructionTest) test).getTarget();
+            String nodePI = ((ProcessingInstruction) node).getTarget();
@@ -462 +445 @@ public class JDOMNodePointer extends NodePointer {
-    public static String getPrefix(final Object node) {
+    public static String getPrefix(Object node) {
@@ -464,2 +447,2 @@ public class JDOMNodePointer extends NodePointer {
-            final String prefix = ((Element) node).getNamespacePrefix();
-            return prefix == null || prefix.equals("") ? null : prefix;
+            String prefix = ((Element) node).getNamespacePrefix();
+            return (prefix == null || prefix.equals("")) ? null : prefix;
@@ -468,2 +451,2 @@ public class JDOMNodePointer extends NodePointer {
-            final String prefix = ((Attribute) node).getNamespacePrefix();
-            return prefix == null || prefix.equals("") ? null : prefix;
+            String prefix = ((Attribute) node).getNamespacePrefix();
+            return (prefix == null || prefix.equals("")) ? null : prefix;
@@ -479 +462 @@ public class JDOMNodePointer extends NodePointer {
-    public static String getLocalName(final Object node) {
+    public static String getLocalName(Object node) {
@@ -496,3 +479,2 @@ public class JDOMNodePointer extends NodePointer {
-    @Override
-    public boolean isLanguage(final String lang) {
-        final String current = getLanguage();
+    public boolean isLanguage(String lang) {
+        String current = getLanguage();
@@ -519 +501 @@ public class JDOMNodePointer extends NodePointer {
-    protected static String findEnclosingAttribute(Object n, final String attrName, final Namespace ns) {
+    protected static String findEnclosingAttribute(Object n, String attrName, Namespace ns) {
@@ -522,2 +504,2 @@ public class JDOMNodePointer extends NodePointer {
-                final Element e = (Element) n;
-                final String attr = e.getAttributeValue(attrName, ns);
+                Element e = (Element) n;
+                String attr = e.getAttributeValue(attrName, ns);
@@ -538 +520 @@ public class JDOMNodePointer extends NodePointer {
-    private static Element nodeParent(final Object node) {
+    private static Element nodeParent(Object node) {
@@ -540 +522 @@ public class JDOMNodePointer extends NodePointer {
-            final Object parent = ((Element) node).getParent();
+            Object parent = ((Element) node).getParent();
@@ -558 +539,0 @@ public class JDOMNodePointer extends NodePointer {
-    @Override
@@ -560,2 +541,2 @@ public class JDOMNodePointer extends NodePointer {
-        final JXPathContext context,
-        final QName name,
+        JXPathContext context,
+        QName name,
@@ -566 +547 @@ public class JDOMNodePointer extends NodePointer {
-        final boolean success =
+        boolean success =
@@ -575,2 +556,2 @@ public class JDOMNodePointer extends NodePointer {
-            final String prefix = name.getPrefix();
-            final String namespaceURI = prefix == null ? null : context
+            String prefix = name.getPrefix();
+            String namespaceURI = prefix == null ? null : context
@@ -580 +561 @@ public class JDOMNodePointer extends NodePointer {
-            final NodeIterator it =
+            NodeIterator it =
@@ -591 +571,0 @@ public class JDOMNodePointer extends NodePointer {
-    @Override
@@ -593,2 +573,2 @@ public class JDOMNodePointer extends NodePointer {
-            final JXPathContext context, final QName name, final int index, final Object value) {
-        final NodePointer ptr = createChild(context, name, index);
+            JXPathContext context, QName name, int index, Object value) {
+        NodePointer ptr = createChild(context, name, index);
@@ -599,2 +579 @@ public class JDOMNodePointer extends NodePointer {
-    @Override
-    public NodePointer createAttribute(final JXPathContext context, final QName name) {
+    public NodePointer createAttribute(JXPathContext context, QName name) {
@@ -605,2 +584,2 @@ public class JDOMNodePointer extends NodePointer {
-        final Element element = (Element) node;
-        final String prefix = name.getPrefix();
+        Element element = (Element) node;
+        String prefix = name.getPrefix();
@@ -608 +587 @@ public class JDOMNodePointer extends NodePointer {
-            final String namespaceUri = getNamespaceResolver().getNamespaceURI(prefix);
+            String namespaceUri = getNamespaceResolver().getNamespaceURI(prefix);
@@ -613,2 +592,2 @@ public class JDOMNodePointer extends NodePointer {
-            final Namespace ns = Namespace.getNamespace(prefix, namespaceUri);
-            final Attribute attr = element.getAttribute(name.getName(), ns);
+            Namespace ns = Namespace.getNamespace(prefix, namespaceUri);
+            Attribute attr = element.getAttribute(name.getName(), ns);
@@ -620 +599 @@ public class JDOMNodePointer extends NodePointer {
-            final Attribute attr = element.getAttribute(name.getName());
+            Attribute attr = element.getAttribute(name.getName());
@@ -625 +604 @@ public class JDOMNodePointer extends NodePointer {
-        final NodeIterator it = attributeIterator(name);
+        NodeIterator it = attributeIterator(name);
@@ -630 +608,0 @@ public class JDOMNodePointer extends NodePointer {
-    @Override
@@ -632 +610 @@ public class JDOMNodePointer extends NodePointer {
-        final Element parent = nodeParent(node);
+        Element parent = nodeParent(node);
@@ -639 +616,0 @@ public class JDOMNodePointer extends NodePointer {
-    @Override
@@ -645 +622 @@ public class JDOMNodePointer extends NodePointer {
-        final StringBuffer buffer = new StringBuffer();
+        StringBuffer buffer = new StringBuffer();
@@ -658,2 +635,2 @@ public class JDOMNodePointer extends NodePointer {
-                final String nsURI = getNamespaceURI();
-                final String ln = JDOMNodePointer.getLocalName(node);
+                String nsURI = getNamespaceURI();
+                String ln = JDOMNodePointer.getLocalName(node);
@@ -667 +644 @@ public class JDOMNodePointer extends NodePointer {
-                    final String prefix = getNamespaceResolver().getPrefix(nsURI);
+                    String prefix = getNamespaceResolver().getPrefix(nsURI);
@@ -706 +683 @@ public class JDOMNodePointer extends NodePointer {
-            final Object parent = ((Element) node).getParent();
+            Object parent = ((Element) node).getParent();
@@ -711 +688 @@ public class JDOMNodePointer extends NodePointer {
-            final List children = ((Element) parent).getContent();
+            List children = ((Element) parent).getContent();
@@ -713,2 +690,3 @@ public class JDOMNodePointer extends NodePointer {
-            for (final Object child : children) {
-                if (child instanceof Element && matchesQName((Element) child)) {
+            for (int i = 0; i < children.size(); i++) {
+                Object child = children.get(i);
+                if (child instanceof Element && matchesQName(((Element) child))) {
@@ -726 +704 @@ public class JDOMNodePointer extends NodePointer {
-    private boolean matchesQName(final Element element) {
+    private boolean matchesQName(Element element) {
@@ -728 +706 @@ public class JDOMNodePointer extends NodePointer {
-            final String ns = getNamespaceURI(element);
+            String ns = getNamespaceURI(element);
@@ -741 +719 @@ public class JDOMNodePointer extends NodePointer {
-        final Object parent = ((Element) node).getParent();
+        Object parent = ((Element) node).getParent();
@@ -753 +731,2 @@ public class JDOMNodePointer extends NodePointer {
-        for (final Object child : children) {
+        for (int i = 0; i < children.size(); i++) {
+            Object child = children.get(i);
@@ -779 +758 @@ public class JDOMNodePointer extends NodePointer {
-        final List children = parent.getContent();
+        List children = parent.getContent();
@@ -781 +760,2 @@ public class JDOMNodePointer extends NodePointer {
-        for (final Object child : children) {
+        for (int i = 0; i < children.size(); i++) {
+            Object child = children.get(i);
@@ -797,2 +777,2 @@ public class JDOMNodePointer extends NodePointer {
-        final String target = ((ProcessingInstruction) node).getTarget();
-        final Element parent = (Element) ((ProcessingInstruction) node).getParent();
+        String target = ((ProcessingInstruction) node).getTarget();
+        Element parent = (Element) ((ProcessingInstruction) node).getParent();
@@ -802 +782 @@ public class JDOMNodePointer extends NodePointer {
-        final List children = parent.getContent();
+        List children = parent.getContent();
@@ -804 +784,2 @@ public class JDOMNodePointer extends NodePointer {
-        for (final Object child : children) {
+        for (int i = 0; i < children.size(); i++) {
+            Object child = children.get(i);
@@ -818 +798,0 @@ public class JDOMNodePointer extends NodePointer {
-    @Override
@@ -823,2 +803 @@ public class JDOMNodePointer extends NodePointer {
-    @Override
-    public boolean equals(final Object object) {
+    public boolean equals(Object object) {
@@ -833 +812 @@ public class JDOMNodePointer extends NodePointer {
-        final JDOMNodePointer other = (JDOMNodePointer) object;
+        JDOMNodePointer other = (JDOMNodePointer) object;
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMPointerFactory.java b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMPointerFactory.java
index 0c78bbfa..786378ce 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMPointerFactory.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMPointerFactory.java
@@ -35 +34,0 @@ public class JDOMPointerFactory implements NodePointerFactory {
-    @Override
@@ -40 +38,0 @@ public class JDOMPointerFactory implements NodePointerFactory {
-    @Override
@@ -42 +40 @@ public class JDOMPointerFactory implements NodePointerFactory {
-            final QName name, final Object bean, final Locale locale) {
+            QName name, Object bean, Locale locale) {
@@ -52 +49,0 @@ public class JDOMPointerFactory implements NodePointerFactory {
-    @Override
@@ -54 +51 @@ public class JDOMPointerFactory implements NodePointerFactory {
-            final NodePointer parent, final QName name, final Object bean) {
+            NodePointer parent, QName name, Object bean) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/parser/ParseException.java b/src/main/java/org/apache/commons/jxpath/ri/parser/ParseException.java
index 3ff88a9b..dbb7463e 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/parser/ParseException.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/parser/ParseException.java
@@ -32,5 +31,0 @@ public class ParseException extends Exception {
-    /**
-     *
-     */
-    private static final long serialVersionUID = 1L;
-
@@ -42 +37 @@ public class ParseException extends Exception {
-     *
+     * 
@@ -47,3 +42,3 @@ public class ParseException extends Exception {
-    public ParseException(final Token currentTokenVal,
-                        final int[][] expectedTokenSequencesVal,
-                        final String[] tokenImageVal
+    public ParseException(Token currentTokenVal,
+                        int[][] expectedTokenSequencesVal,
+                        String[] tokenImageVal
@@ -69,0 +65 @@ public class ParseException extends Exception {
+    super();
@@ -73 +69 @@ public class ParseException extends Exception {
-  public ParseException(final String message) {
+  public ParseException(String message) {
@@ -116,2 +112 @@ public class ParseException extends Exception {
-  @Override
-public String getMessage() {
+  public String getMessage() {
@@ -123,3 +118,3 @@ public String getMessage() {
-    for (final int[] element : expectedTokenSequences) {
-      if (maxSize < element.length) {
-        maxSize = element.length;
+    for (int i = 0; i < expectedTokenSequences.length; i++) {
+      if (maxSize < expectedTokenSequences[i].length) {
+        maxSize = expectedTokenSequences[i].length;
@@ -127,2 +122,2 @@ public String getMessage() {
-      for (final int element2 : element) {
-        expected += tokenImage[element2] + " ";
+      for (int j = 0; j < expectedTokenSequences[i].length; j++) {
+        expected += tokenImage[expectedTokenSequences[i][j]] + " ";
@@ -130 +125 @@ public String getMessage() {
-      if (element[element.length - 1] != 0) {
+      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
@@ -138,3 +133 @@ public String getMessage() {
-      if (i != 0) {
-        retval += " ";
-    }
+      if (i != 0) retval += " ";
@@ -172,2 +165,2 @@ public String getMessage() {
-  protected String add_escapes(final String str) {
-      final StringBuffer retval = new StringBuffer();
+  protected String add_escapes(String str) {
+      StringBuffer retval = new StringBuffer();
@@ -206 +199 @@ public String getMessage() {
-                 final String s = "0000" + Integer.toString(ch, 16);
+                 String s = "0000" + Integer.toString(ch, 16);
diff --git a/src/main/java/org/apache/commons/jxpath/ri/parser/SimpleCharStream.java b/src/main/java/org/apache/commons/jxpath/ri/parser/SimpleCharStream.java
index 5e5443a6..63fb8674 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/parser/SimpleCharStream.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/parser/SimpleCharStream.java
@@ -48 +48 @@ public class SimpleCharStream
-  protected void ExpandBuff(final boolean wrapAround)
+  protected void ExpandBuff(boolean wrapAround)
@@ -50,3 +50,3 @@ public class SimpleCharStream
-     final char[] newbuffer = new char[bufsize + 2048];
-     final int newbufline[] = new int[bufsize + 2048];
-     final int newbufcolumn[] = new int[bufsize + 2048];
+     char[] newbuffer = new char[bufsize + 2048];
+     int newbufline[] = new int[bufsize + 2048];
+     int newbufcolumn[] = new int[bufsize + 2048];
@@ -71 +71 @@ public class SimpleCharStream
-           maxNextCharInd = bufpos += bufsize - tokenBegin;
+           maxNextCharInd = (bufpos += (bufsize - tokenBegin));
@@ -84 +84 @@ public class SimpleCharStream
-           maxNextCharInd = bufpos -= tokenBegin;
+           maxNextCharInd = (bufpos -= tokenBegin);
@@ -87 +87 @@ public class SimpleCharStream
-     catch (final Throwable t)
+     catch (Throwable t)
@@ -109,12 +109,4 @@ public class SimpleCharStream
-           else if (tokenBegin < 0) {
-            bufpos = maxNextCharInd = 0;
-        } else {
-            ExpandBuff(false);
-        }
-        }
-        else if (available > tokenBegin) {
-            available = bufsize;
-        } else if (tokenBegin - available < 2048) {
-            ExpandBuff(true);
-        } else {
-            available = tokenBegin;
+           else if (tokenBegin < 0)
+              bufpos = maxNextCharInd = 0;
+           else
+              ExpandBuff(false);
@@ -121,0 +114,6 @@ public class SimpleCharStream
+        else if (available > tokenBegin)
+           available = bufsize;
+        else if ((tokenBegin - available) < 2048)
+           ExpandBuff(true);
+        else
+           available = tokenBegin;
@@ -131,2 +128,0 @@ public class SimpleCharStream
-        } else {
-            maxNextCharInd += i;
@@ -133,0 +130,2 @@ public class SimpleCharStream
+        else
+           maxNextCharInd += i;
@@ -136 +134 @@ public class SimpleCharStream
-     catch(final java.io.IOException e) {
+     catch(java.io.IOException e) {
@@ -139,3 +137,2 @@ public class SimpleCharStream
-        if (tokenBegin == -1) {
-            tokenBegin = bufpos;
-        }
+        if (tokenBegin == -1)
+           tokenBegin = bufpos;
@@ -149 +146 @@ public class SimpleCharStream
-     final char c = readChar();
+     char c = readChar();
@@ -155 +152 @@ public class SimpleCharStream
-  protected void UpdateLineColumn(final char c)
+  protected void UpdateLineColumn(char c)
@@ -162 +159 @@ public class SimpleCharStream
-        line += column = 1;
+        line += (column = 1);
@@ -170,2 +166,0 @@ public class SimpleCharStream
-        } else {
-            line += column = 1;
@@ -172,0 +168,2 @@ public class SimpleCharStream
+        else
+           line += (column = 1);
@@ -185 +182 @@ public class SimpleCharStream
-           column += 8 - (column & 07);
+           column += (8 - (column & 07));
@@ -201,3 +198,2 @@ public class SimpleCharStream
-        if (++bufpos == bufsize) {
-            bufpos = 0;
-        }
+        if (++bufpos == bufsize)
+           bufpos = 0;
@@ -208 +204 @@ public class SimpleCharStream
-     if (++bufpos >= maxNextCharInd) {
+     if (++bufpos >= maxNextCharInd)
@@ -210 +205,0 @@ public class SimpleCharStream
-    }
@@ -212 +207 @@ public class SimpleCharStream
-     final char c = buffer[bufpos];
+     char c = buffer[bufpos];
@@ -215 +210 @@ public class SimpleCharStream
-     return c;
+     return (c);
@@ -223,2 +218 @@ public class SimpleCharStream
-  @Deprecated
-public int getColumn() {
+  public int getColumn() {
@@ -233,2 +227 @@ public int getColumn() {
-  @Deprecated
-public int getLine() {
+  public int getLine() {
@@ -254 +247 @@ public int getLine() {
-  public void backup(final int amount) {
+  public void backup(int amount) {
@@ -257,3 +250,2 @@ public int getLine() {
-    if ((bufpos -= amount) < 0) {
-        bufpos += bufsize;
-    }
+    if ((bufpos -= amount) < 0)
+       bufpos += bufsize;
@@ -262,2 +254,2 @@ public int getLine() {
-  public SimpleCharStream(final java.io.Reader dstream, final int startline,
-  final int startcolumn, final int buffersize)
+  public SimpleCharStream(java.io.Reader dstream, int startline,
+  int startcolumn, int buffersize)
@@ -275,2 +267,2 @@ public int getLine() {
-  public SimpleCharStream(final java.io.Reader dstream, final int startline,
-                                                           final int startcolumn)
+  public SimpleCharStream(java.io.Reader dstream, int startline,
+                                                           int startcolumn)
@@ -281 +273 @@ public int getLine() {
-  public SimpleCharStream(final java.io.Reader dstream)
+  public SimpleCharStream(java.io.Reader dstream)
@@ -285,2 +277,2 @@ public int getLine() {
-  public void ReInit(final java.io.Reader dstream, final int startline,
-  final int startcolumn, final int buffersize)
+  public void ReInit(java.io.Reader dstream, int startline,
+  int startcolumn, int buffersize)
@@ -304,2 +296,2 @@ public int getLine() {
-  public void ReInit(final java.io.Reader dstream, final int startline,
-                                                           final int startcolumn)
+  public void ReInit(java.io.Reader dstream, int startline,
+                                                           int startcolumn)
@@ -310 +302 @@ public int getLine() {
-  public void ReInit(final java.io.Reader dstream)
+  public void ReInit(java.io.Reader dstream)
@@ -314,2 +306,2 @@ public int getLine() {
-  public SimpleCharStream(final java.io.InputStream dstream, final int startline,
-  final int startcolumn, final int buffersize)
+  public SimpleCharStream(java.io.InputStream dstream, int startline,
+  int startcolumn, int buffersize)
@@ -320,2 +312,2 @@ public int getLine() {
-  public SimpleCharStream(final java.io.InputStream dstream, final int startline,
-                                                           final int startcolumn)
+  public SimpleCharStream(java.io.InputStream dstream, int startline,
+                                                           int startcolumn)
@@ -326 +318 @@ public int getLine() {
-  public SimpleCharStream(final java.io.InputStream dstream)
+  public SimpleCharStream(java.io.InputStream dstream)
@@ -331,2 +323,2 @@ public int getLine() {
-  public void ReInit(final java.io.InputStream dstream, final int startline,
-                          final int startcolumn, final int buffersize)
+  public void ReInit(java.io.InputStream dstream, int startline,
+                          int startcolumn, int buffersize)
@@ -337 +329 @@ public int getLine() {
-  public void ReInit(final java.io.InputStream dstream)
+  public void ReInit(java.io.InputStream dstream)
@@ -341,2 +333,2 @@ public int getLine() {
-  public void ReInit(final java.io.InputStream dstream, final int startline,
-                                                           final int startcolumn)
+  public void ReInit(java.io.InputStream dstream, int startline,
+                                                           int startcolumn)
@@ -348 +340 @@ public int getLine() {
-     if (bufpos >= tokenBegin) {
+     if (bufpos >= tokenBegin)
@@ -350 +342 @@ public int getLine() {
-    } else {
+     else
@@ -353 +344,0 @@ public int getLine() {
-    }
@@ -356 +347 @@ public int getLine() {
-  public char[] GetSuffix(final int len)
+  public char[] GetSuffix(int len)
@@ -358 +349 @@ public int getLine() {
-     final char[] ret = new char[len];
+     char[] ret = new char[len];
@@ -360 +351 @@ public int getLine() {
-     if (bufpos + 1 >= len) {
+     if ((bufpos + 1) >= len)
@@ -362 +353 @@ public int getLine() {
-    } else
+     else
@@ -381 +372 @@ public int getLine() {
-   *
+   * 
@@ -385 +376 @@ public int getLine() {
-  public void adjustBeginLineColumn(int newLine, final int newCol)
+  public void adjustBeginLineColumn(int newLine, int newCol)
@@ -419,5 +410,4 @@ public int getLine() {
-           if (bufline[j = start % bufsize] != bufline[++start % bufsize]) {
-            bufline[j] = newLine++;
-        } else {
-            bufline[j] = newLine;
-        }
+           if (bufline[j = start % bufsize] != bufline[++start % bufsize])
+              bufline[j] = newLine++;
+           else
+              bufline[j] = newLine;
diff --git a/src/main/java/org/apache/commons/jxpath/ri/parser/Token.java b/src/main/java/org/apache/commons/jxpath/ri/parser/Token.java
index 3fa347c2..53dc6d53 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/parser/Token.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/parser/Token.java
@@ -72,2 +72 @@ public class Token {
-  @Override
-public String toString()
+  public String toString()
@@ -82 +81 @@ public String toString()
-   *
+   * 
@@ -86 +85 @@ public String toString()
-   *
+   * 
@@ -88 +87 @@ public String toString()
-   *
+   * 
@@ -92 +91 @@ public String toString()
-  public static final Token newToken(final int ofKind)
+  public static final Token newToken(int ofKind)
diff --git a/src/main/java/org/apache/commons/jxpath/ri/parser/TokenMgrError.java b/src/main/java/org/apache/commons/jxpath/ri/parser/TokenMgrError.java
index 68ccfa0e..a6d59f5a 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/parser/TokenMgrError.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/parser/TokenMgrError.java
@@ -31,5 +30,0 @@ public class TokenMgrError extends Error
-     *
-     */
-    private static final long serialVersionUID = 1L;
-
-/**
@@ -63 +58 @@ public class TokenMgrError extends Error
-    *
+    * 
@@ -67,2 +62,2 @@ public class TokenMgrError extends Error
-   public static final String addEscapes(final String str) {
-      final StringBuffer retval = new StringBuffer();
+   public static final String addEscapes(String str) {
+      StringBuffer retval = new StringBuffer();
@@ -101 +96 @@ public class TokenMgrError extends Error
-                 final String s = "0000" + Integer.toString(ch, 16);
+                 String s = "0000" + Integer.toString(ch, 16);
@@ -114 +109 @@ public class TokenMgrError extends Error
-    *
+    * 
@@ -116 +111 @@ public class TokenMgrError extends Error
-    *
+    * 
@@ -125,6 +120,6 @@ public class TokenMgrError extends Error
-   protected static String LexicalError(final boolean EOFSeen, final int lexState, final int errorLine, final int errorColumn, final String errorAfter, final char curChar) {
-      return "Lexical error at line " +
-       errorLine + ", column " +
-       errorColumn + ".  Encountered: " +
-       (EOFSeen ? "<EOF> " : "\"" + addEscapes(String.valueOf(curChar)) + "\"" + " (" + (int)curChar + "), ") +
-       "after : \"" + addEscapes(errorAfter) + "\"";
+   protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
+      return("Lexical error at line " +
+           errorLine + ", column " +
+           errorColumn + ".  Encountered: " +
+           (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar + "), ") +
+           "after : \"" + addEscapes(errorAfter) + "\"");
@@ -142,2 +137 @@ public class TokenMgrError extends Error
-   @Override
-public String getMessage() {
+   public String getMessage() {
@@ -154 +148 @@ public String getMessage() {
-   public TokenMgrError(final String message, final int reason) {
+   public TokenMgrError(String message, int reason) {
@@ -159 +153 @@ public String getMessage() {
-   public TokenMgrError(final boolean EOFSeen, final int lexState, final int errorLine, final int errorColumn, final String errorAfter, final char curChar, final int reason) {
+   public TokenMgrError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, int reason) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/parser/XPathParser.java b/src/main/java/org/apache/commons/jxpath/ri/parser/XPathParser.java
index e0606568..be5e56a4 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/parser/XPathParser.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/parser/XPathParser.java
@@ -27 +27 @@
-        public void setCompiler(final Compiler compiler){
+        public void setCompiler(Compiler compiler){
@@ -165,3 +165 @@
-        {if (true) {
-            return token.image;
-        }}
+        {if (true) return token.image;}
@@ -193,3 +191 @@
-        {if (true) {
-            return token.image;
-        }}
+        {if (true) return token.image;}
@@ -331,3 +327 @@
-        {if (true) {
-            return code;
-        }}
+        {if (true) return code;}
@@ -350,3 +344 @@
-            {if (true) {
-                return compiler.qname(null, nc1);
-            }}
+            {if (true) return compiler.qname(null, nc1);}
@@ -355,3 +347 @@
-            {if (true) {
-                return compiler.qname(nc1, nc2);
-            }}
+            {if (true) return compiler.qname(nc1, nc2);}
@@ -384,3 +374 @@
-            {if (true) {
-                return compiler.qname(null, nc1);
-            }}
+            {if (true) return compiler.qname(null, nc1);}
@@ -389,3 +377 @@
-            {if (true) {
-                return compiler.qname(nc1, nc2);
-            }}
+            {if (true) return compiler.qname(nc1, nc2);}
@@ -400,3 +386 @@
-        {if (true) {
-            return ex;
-        }}
+        {if (true) return ex;}
@@ -548,3 +532 @@
-        {if (true) {
-            return ex;
-        }}
+        {if (true) return ex;}
@@ -557 +539 @@
-    final ArrayList steps = new ArrayList();
+    ArrayList steps = new ArrayList();
@@ -584,3 +566 @@
-        {if (true) {
-            return compiler.locationPath(true, steps.toArray());
-        }}
+        {if (true) return compiler.locationPath(true, steps.toArray());}
@@ -592 +572 @@
-    final ArrayList steps = new ArrayList();
+    ArrayList steps = new ArrayList();
@@ -607,3 +587 @@
-        {if (true) {
-            return compiler.locationPath(false, steps.toArray());
-        }}
+        {if (true) return compiler.locationPath(false, steps.toArray());}
@@ -622 +600 @@
-  final public void LocationStep(final ArrayList steps) throws ParseException {
+  final public void LocationStep(ArrayList steps) throws ParseException {
@@ -624 +602 @@
-    final Object s;
+    Object s;
@@ -644 +622 @@
-  final public void NodeTest(final ArrayList steps) throws ParseException {
+  final public void NodeTest(ArrayList steps) throws ParseException {
@@ -651 +629 @@
-    final ArrayList ps = new ArrayList();
+    ArrayList ps = new ArrayList();
@@ -834,3 +812 @@
-        {if (true) {
-            return axis;
-        }}
+        {if (true) return axis;}
@@ -908,3 +884 @@
-        {if (true) {
-            return axis;
-        }}
+        {if (true) return axis;}
@@ -929,3 +903 @@
-        {if (true) {
-            return ex;
-        }}
+        {if (true) return ex;}
@@ -949,3 +921 @@
-        {if (true) {
-            return axis;
-        }}
+        {if (true) return axis;}
@@ -977,3 +947 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) {
-            return ex;
-        }}
+        {if (true) return ex;}
@@ -1058,3 +1026 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) {
-            return ex;
-        }}
+        {if (true) return ex;}
@@ -1075,3 +1041 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-            {if (true) {
-                return compiler.function(name, null);
-            }}
+            {if (true) return compiler.function(name, null);}
@@ -1080,3 +1044 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-            {if (true) {
-                return compiler.function(name, args.toArray());
-            }}
+            {if (true) return compiler.function(name, args.toArray());}
@@ -1093,3 +1055 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-            {if (true) {
-                return compiler.function(code, null);
-            }}
+            {if (true) return compiler.function(code, null);}
@@ -1098,3 +1058 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-            {if (true) {
-                return compiler.function(code, args.toArray());
-            }}
+            {if (true) return compiler.function(code, args.toArray());}
@@ -1196,3 +1154 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) {
-            return args;
-        }}
+        {if (true) return args;}
@@ -1206,3 +1162 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) {
-            return ex;
-        }}
+        {if (true) return ex;}
@@ -1242,3 +1196 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) {
-            return ex;
-        }}
+        {if (true) return ex;}
@@ -1251 +1203 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-    final Object[] steps;
+    Object[] steps;
@@ -1323,3 +1275 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) {
-            return ex;
-        }}
+        {if (true) return ex;}
@@ -1332 +1282 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-    final ArrayList ps = new ArrayList();
+    ArrayList ps = new ArrayList();
@@ -1334 +1284 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-    final ArrayList steps = new ArrayList();
+    ArrayList steps = new ArrayList();
@@ -1365,3 +1315 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-            {if (true) {
-                return compiler.expressionPath(ex, ps.toArray(), steps.toArray());
-            }}
+            {if (true) return compiler.expressionPath(ex, ps.toArray(), steps.toArray());}
@@ -1370,3 +1318 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-            {if (true) {
-                return ex;
-            }}
+            {if (true) return ex;}
@@ -1407,3 +1353 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) {
-            return ex;
-        }}
+        {if (true) return ex;}
@@ -1439,3 +1383 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) {
-            return ex;
-        }}
+        {if (true) return ex;}
@@ -1477,3 +1419 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) {
-            return ex;
-        }}
+        {if (true) return ex;}
@@ -1528,3 +1468 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) {
-            return ex;
-        }}
+        {if (true) return ex;}
@@ -1564,3 +1502 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) {
-            return ex;
-        }}
+        {if (true) return ex;}
@@ -1587,3 +1523 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) {
-            return ex;
-        }}
+        {if (true) return ex;}
@@ -1632,3 +1566 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) {
-            return ex;
-        }}
+        {if (true) return ex;}
@@ -1717,3 +1649 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) {
-            return ex;
-        }}
+        {if (true) return ex;}
@@ -1760,3 +1690 @@ specified to disambiguate the grammar:
-        {if (true) {
-            return qname;
-        }}
+        {if (true) return qname;}
@@ -1771,3 +1699 @@ specified to disambiguate the grammar:
-        {if (true) {
-            return compiler.variableReference(ex);
-        }}
+        {if (true) return compiler.variableReference(ex);}
@@ -1899,3 +1825 @@ specified to disambiguate the grammar:
-        {if (true) {
-            return qn;
-        }}
+        {if (true) return qn;}
@@ -1930,3 +1854 @@ specified to disambiguate the grammar:
-        {if (true) {
-            return type;
-        }}
+        {if (true) return type;}
@@ -1936 +1858 @@ specified to disambiguate the grammar:
-  private boolean jj_2_1(final int xla) {
+  final private boolean jj_2_1(int xla) {
@@ -1939 +1861 @@ specified to disambiguate the grammar:
-    catch(final LookaheadSuccess ls) { return true; }
+    catch(LookaheadSuccess ls) { return true; }
@@ -1943 +1865 @@ specified to disambiguate the grammar:
-  private boolean jj_2_2(final int xla) {
+  final private boolean jj_2_2(int xla) {
@@ -1946 +1868 @@ specified to disambiguate the grammar:
-    catch(final LookaheadSuccess ls) { return true; }
+    catch(LookaheadSuccess ls) { return true; }
@@ -1950 +1872 @@ specified to disambiguate the grammar:
-  private boolean jj_2_3(final int xla) {
+  final private boolean jj_2_3(int xla) {
@@ -1953 +1875 @@ specified to disambiguate the grammar:
-    catch(final LookaheadSuccess ls) { return true; }
+    catch(LookaheadSuccess ls) { return true; }
@@ -1957 +1879 @@ specified to disambiguate the grammar:
-  private boolean jj_2_4(final int xla) {
+  final private boolean jj_2_4(int xla) {
@@ -1960 +1882 @@ specified to disambiguate the grammar:
-    catch(final LookaheadSuccess ls) { return true; }
+    catch(LookaheadSuccess ls) { return true; }
@@ -1964 +1886 @@ specified to disambiguate the grammar:
-  private boolean jj_2_5(final int xla) {
+  final private boolean jj_2_5(int xla) {
@@ -1967 +1889 @@ specified to disambiguate the grammar:
-    catch(final LookaheadSuccess ls) { return true; }
+    catch(LookaheadSuccess ls) { return true; }
@@ -1971 +1893 @@ specified to disambiguate the grammar:
-  private boolean jj_2_6(final int xla) {
+  final private boolean jj_2_6(int xla) {
@@ -1974 +1896 @@ specified to disambiguate the grammar:
-    catch(final LookaheadSuccess ls) { return true; }
+    catch(LookaheadSuccess ls) { return true; }
@@ -1978,4 +1900,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3_2() {
-    if (jj_3R_16()) {
-        return true;
-    }
+  final private boolean jj_3_2() {
+    if (jj_3R_16()) return true;
@@ -1985,4 +1905,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_144() {
-    if (jj_3R_16()) {
-        return true;
-    }
+  final private boolean jj_3R_144() {
+    if (jj_3R_16()) return true;
@@ -1992,4 +1910,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_143() {
-    if (jj_3R_77()) {
-        return true;
-    }
+  final private boolean jj_3R_143() {
+    if (jj_3R_77()) return true;
@@ -1999,4 +1915,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_150() {
-    if (jj_3R_16()) {
-        return true;
-    }
+  final private boolean jj_3R_150() {
+    if (jj_3R_16()) return true;
@@ -2011,7 +1925,3 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_132() {
-    if (jj_scan_token(MINUS)) {
-        return true;
-    }
-    if (jj_3R_129()) {
-        return true;
-    }
+  final private boolean jj_3R_132() {
+    if (jj_scan_token(MINUS)) return true;
+    if (jj_3R_129()) return true;
@@ -2021 +1931 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_130() {
+  final private boolean jj_3R_130() {
@@ -2028,3 +1938 @@ specified to disambiguate the grammar:
-    if (jj_3R_135()) {
-        return true;
-    }
+    if (jj_3R_135()) return true;
@@ -2036 +1944 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_148() {
+  final private boolean jj_3R_148() {
@@ -2041,3 +1949 @@ specified to disambiguate the grammar:
-    if (jj_scan_token(6)) {
-        return true;
-    }
+    if (jj_scan_token(6)) return true;
@@ -2048,4 +1954,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_131() {
-    if (jj_3R_136()) {
-        return true;
-    }
+  final private boolean jj_3R_131() {
+    if (jj_3R_136()) return true;
@@ -2055 +1959 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_64() {
+  final private boolean jj_3R_64() {
@@ -2066,3 +1970 @@ specified to disambiguate the grammar:
-    if (jj_scan_token(30)) {
-        return true;
-    }
+    if (jj_scan_token(30)) return true;
@@ -2076,4 +1978,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_113() {
-    if (jj_scan_token(87)) {
-        return true;
-    }
+  final private boolean jj_3R_113() {
+    if (jj_scan_token(87)) return true;
@@ -2083 +1983 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_91() {
+  final private boolean jj_3R_91() {
@@ -2086,3 +1986 @@ specified to disambiguate the grammar:
-    if (jj_3R_113()) {
-        jj_scanpos = xsp;
-    }
+    if (jj_3R_113()) jj_scanpos = xsp;
@@ -2092,4 +1990,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_141() {
-    if (jj_3R_19()) {
-        return true;
-    }
+  final private boolean jj_3R_141() {
+    if (jj_3R_19()) return true;
@@ -2108 +2004 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_129() {
+  final private boolean jj_3R_129() {
@@ -2113,3 +2009 @@ specified to disambiguate the grammar:
-    if (jj_3R_132()) {
-        return true;
-    }
+    if (jj_3R_132()) return true;
@@ -2120,4 +2014,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3_6() {
-    if (jj_3R_19()) {
-        return true;
-    }
+  final private boolean jj_3_6() {
+    if (jj_3R_19()) return true;
@@ -2127,4 +2019,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_146() {
-    if (jj_3R_148()) {
-        return true;
-    }
+  final private boolean jj_3R_146() {
+    if (jj_3R_148()) return true;
@@ -2134,7 +2024,3 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_135() {
-    if (jj_scan_token(MOD)) {
-        return true;
-    }
-    if (jj_3R_129()) {
-        return true;
-    }
+  final private boolean jj_3R_135() {
+    if (jj_scan_token(MOD)) return true;
+    if (jj_3R_129()) return true;
@@ -2144,4 +2030,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_145() {
-    if (jj_3R_147()) {
-        return true;
-    }
+  final private boolean jj_3R_145() {
+    if (jj_3R_147()) return true;
@@ -2151,7 +2035,3 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_134() {
-    if (jj_scan_token(DIV)) {
-        return true;
-    }
-    if (jj_3R_129()) {
-        return true;
-    }
+  final private boolean jj_3R_134() {
+    if (jj_scan_token(DIV)) return true;
+    if (jj_3R_129()) return true;
@@ -2161,7 +2041,3 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_133() {
-    if (jj_scan_token(89)) {
-        return true;
-    }
-    if (jj_3R_129()) {
-        return true;
-    }
+  final private boolean jj_3R_133() {
+    if (jj_scan_token(89)) return true;
+    if (jj_3R_129()) return true;
@@ -2171 +2047 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_142() {
+  final private boolean jj_3R_142() {
@@ -2176,3 +2052 @@ specified to disambiguate the grammar:
-    if (jj_3R_146()) {
-        return true;
-    }
+    if (jj_3R_146()) return true;
@@ -2183,4 +2057,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_140() {
-    if (jj_3R_142()) {
-        return true;
-    }
+  final private boolean jj_3R_140() {
+    if (jj_3R_142()) return true;
@@ -2190,4 +2062,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_139() {
-    if (jj_3R_141()) {
-        return true;
-    }
+  final private boolean jj_3R_139() {
+    if (jj_3R_141()) return true;
@@ -2197,10 +2067,4 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_77() {
-    if (jj_scan_token(85)) {
-        return true;
-    }
-    if (jj_3R_70()) {
-        return true;
-    }
-    if (jj_scan_token(86)) {
-        return true;
-    }
+  final private boolean jj_3R_77() {
+    if (jj_scan_token(85)) return true;
+    if (jj_3R_70()) return true;
+    if (jj_scan_token(86)) return true;
@@ -2210,4 +2074,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_127() {
-    if (jj_3R_129()) {
-        return true;
-    }
+  final private boolean jj_3R_127() {
+    if (jj_3R_129()) return true;
@@ -2222 +2084 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_137() {
+  final private boolean jj_3R_137() {
@@ -2227,3 +2089 @@ specified to disambiguate the grammar:
-    if (jj_3R_140()) {
-        return true;
-    }
+    if (jj_3R_140()) return true;
@@ -2234,7 +2094,3 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_128() {
-    if (jj_scan_token(MINUS)) {
-        return true;
-    }
-    if (jj_3R_127()) {
-        return true;
-    }
+  final private boolean jj_3R_128() {
+    if (jj_scan_token(MINUS)) return true;
+    if (jj_3R_127()) return true;
@@ -2244,4 +2100,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_112() {
-    if (jj_scan_token(AXIS_DESCENDANT_OR_SELF)) {
-        return true;
-    }
+  final private boolean jj_3R_112() {
+    if (jj_scan_token(AXIS_DESCENDANT_OR_SELF)) return true;
@@ -2251,4 +2105,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_111() {
-    if (jj_scan_token(AXIS_PRECEDING_SIBLING)) {
-        return true;
-    }
+  final private boolean jj_3R_111() {
+    if (jj_scan_token(AXIS_PRECEDING_SIBLING)) return true;
@@ -2258,4 +2110,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_110() {
-    if (jj_scan_token(AXIS_FOLLOWING_SIBLING)) {
-        return true;
-    }
+  final private boolean jj_3R_110() {
+    if (jj_scan_token(AXIS_FOLLOWING_SIBLING)) return true;
@@ -2265,7 +2115,3 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_122() {
-    if (jj_scan_token(PLUS)) {
-        return true;
-    }
-    if (jj_3R_121()) {
-        return true;
-    }
+  final private boolean jj_3R_122() {
+    if (jj_scan_token(PLUS)) return true;
+    if (jj_3R_121()) return true;
@@ -2275,4 +2121,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_109() {
-    if (jj_scan_token(AXIS_ANCESTOR_OR_SELF)) {
-        return true;
-    }
+  final private boolean jj_3R_109() {
+    if (jj_scan_token(AXIS_ANCESTOR_OR_SELF)) return true;
@@ -2282,4 +2126,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_108() {
-    if (jj_scan_token(AXIS_DESCENDANT)) {
-        return true;
-    }
+  final private boolean jj_3R_108() {
+    if (jj_scan_token(AXIS_DESCENDANT)) return true;
@@ -2289,4 +2131,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_107() {
-    if (jj_scan_token(AXIS_FOLLOWING)) {
-        return true;
-    }
+  final private boolean jj_3R_107() {
+    if (jj_scan_token(AXIS_FOLLOWING)) return true;
@@ -2296,4 +2136,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_106() {
-    if (jj_scan_token(AXIS_PRECEDING)) {
-        return true;
-    }
+  final private boolean jj_3R_106() {
+    if (jj_scan_token(AXIS_PRECEDING)) return true;
@@ -2303,4 +2141,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_121() {
-    if (jj_3R_127()) {
-        return true;
-    }
+  final private boolean jj_3R_121() {
+    if (jj_3R_127()) return true;
@@ -2315,4 +2151,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_105() {
-    if (jj_scan_token(AXIS_NAMESPACE)) {
-        return true;
-    }
+  final private boolean jj_3R_105() {
+    if (jj_scan_token(AXIS_NAMESPACE)) return true;
@@ -2322,4 +2156,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_104() {
-    if (jj_scan_token(AXIS_ATTRIBUTE)) {
-        return true;
-    }
+  final private boolean jj_3R_104() {
+    if (jj_scan_token(AXIS_ATTRIBUTE)) return true;
@@ -2329,4 +2161,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_103() {
-    if (jj_scan_token(AXIS_ANCESTOR)) {
-        return true;
-    }
+  final private boolean jj_3R_103() {
+    if (jj_scan_token(AXIS_ANCESTOR)) return true;
@@ -2336,4 +2166,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_20() {
-    if (jj_3R_64()) {
-        return true;
-    }
+  final private boolean jj_3R_20() {
+    if (jj_3R_64()) return true;
@@ -2343,4 +2171,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_102() {
-    if (jj_scan_token(AXIS_PARENT)) {
-        return true;
-    }
+  final private boolean jj_3R_102() {
+    if (jj_scan_token(AXIS_PARENT)) return true;
@@ -2350,4 +2176,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_101() {
-    if (jj_scan_token(AXIS_CHILD)) {
-        return true;
-    }
+  final private boolean jj_3R_101() {
+    if (jj_scan_token(AXIS_CHILD)) return true;
@@ -2357,4 +2181,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_100() {
-    if (jj_scan_token(AXIS_SELF)) {
-        return true;
-    }
+  final private boolean jj_3R_100() {
+    if (jj_scan_token(AXIS_SELF)) return true;
@@ -2364,7 +2186,3 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_138() {
-    if (jj_scan_token(UNION)) {
-        return true;
-    }
-    if (jj_3R_137()) {
-        return true;
-    }
+  final private boolean jj_3R_138() {
+    if (jj_scan_token(UNION)) return true;
+    if (jj_3R_137()) return true;
@@ -2374 +2192 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_15() {
+  final private boolean jj_3R_15() {
@@ -2447,3 +2265 @@ specified to disambiguate the grammar:
-    if (jj_scan_token(78)) {
-        return true;
-    }
+    if (jj_scan_token(78)) return true;
@@ -2488 +2304 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_90() {
+  final private boolean jj_3R_90() {
@@ -2515,3 +2331 @@ specified to disambiguate the grammar:
-    if (jj_3R_112()) {
-        return true;
-    }
+    if (jj_3R_112()) return true;
@@ -2533,4 +2347,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_136() {
-    if (jj_3R_137()) {
-        return true;
-    }
+  final private boolean jj_3R_136() {
+    if (jj_3R_137()) return true;
@@ -2545 +2357 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_118() {
+  final private boolean jj_3R_118() {
@@ -2554,3 +2366 @@ specified to disambiguate the grammar:
-    if (jj_3R_126()) {
-        return true;
-    }
+    if (jj_3R_126()) return true;
@@ -2563,4 +2373,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_117() {
-    if (jj_3R_121()) {
-        return true;
-    }
+  final private boolean jj_3R_117() {
+    if (jj_3R_121()) return true;
@@ -2575,4 +2383,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_83() {
-    if (jj_3R_91()) {
-        return true;
-    }
+  final private boolean jj_3R_83() {
+    if (jj_3R_91()) return true;
@@ -2582,4 +2388,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_82() {
-    if (jj_3R_90()) {
-        return true;
-    }
+  final private boolean jj_3R_82() {
+    if (jj_3R_90()) return true;
@@ -2589,4 +2393,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_96() {
-    if (jj_3R_70()) {
-        return true;
-    }
+  final private boolean jj_3R_96() {
+    if (jj_3R_70()) return true;
@@ -2596,7 +2398,3 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_126() {
-    if (jj_scan_token(GTE)) {
-        return true;
-    }
-    if (jj_3R_117()) {
-        return true;
-    }
+  final private boolean jj_3R_126() {
+    if (jj_scan_token(GTE)) return true;
+    if (jj_3R_117()) return true;
@@ -2606,7 +2404,3 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_97() {
-    if (jj_scan_token(88)) {
-        return true;
-    }
-    if (jj_3R_96()) {
-        return true;
-    }
+  final private boolean jj_3R_97() {
+    if (jj_scan_token(88)) return true;
+    if (jj_3R_96()) return true;
@@ -2616,7 +2410,3 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_125() {
-    if (jj_scan_token(LTE)) {
-        return true;
-    }
-    if (jj_3R_117()) {
-        return true;
-    }
+  final private boolean jj_3R_125() {
+    if (jj_scan_token(LTE)) return true;
+    if (jj_3R_117()) return true;
@@ -2626 +2416 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_73() {
+  final private boolean jj_3R_73() {
@@ -2631,3 +2421 @@ specified to disambiguate the grammar:
-    if (jj_3R_83()) {
-        return true;
-    }
+    if (jj_3R_83()) return true;
@@ -2638,7 +2426,3 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_124() {
-    if (jj_scan_token(GT)) {
-        return true;
-    }
-    if (jj_3R_117()) {
-        return true;
-    }
+  final private boolean jj_3R_124() {
+    if (jj_scan_token(GT)) return true;
+    if (jj_3R_117()) return true;
@@ -2648 +2432 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_116() {
+  final private boolean jj_3R_116() {
@@ -2653,3 +2437 @@ specified to disambiguate the grammar:
-    if (jj_3R_120()) {
-        return true;
-    }
+    if (jj_3R_120()) return true;
@@ -2660,7 +2442,3 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_123() {
-    if (jj_scan_token(LT)) {
-        return true;
-    }
-    if (jj_3R_117()) {
-        return true;
-    }
+  final private boolean jj_3R_123() {
+    if (jj_scan_token(LT)) return true;
+    if (jj_3R_117()) return true;
@@ -2670,4 +2448,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_88() {
-    if (jj_3R_96()) {
-        return true;
-    }
+  final private boolean jj_3R_88() {
+    if (jj_3R_96()) return true;
@@ -2682,4 +2458,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_115() {
-    if (jj_3R_117()) {
-        return true;
-    }
+  final private boolean jj_3R_115() {
+    if (jj_3R_117()) return true;
@@ -2694,4 +2468,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_26() {
-    if (jj_scan_token(PI)) {
-        return true;
-    }
+  final private boolean jj_3R_26() {
+    if (jj_scan_token(PI)) return true;
@@ -2701,4 +2473,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_80() {
-    if (jj_scan_token(81)) {
-        return true;
-    }
+  final private boolean jj_3R_80() {
+    if (jj_scan_token(81)) return true;
@@ -2707,6 +2477,2 @@ specified to disambiguate the grammar:
-    if (jj_3R_88()) {
-        jj_scanpos = xsp;
-    }
-    if (jj_scan_token(82)) {
-        return true;
-    }
+    if (jj_3R_88()) jj_scanpos = xsp;
+    if (jj_scan_token(82)) return true;
@@ -2716,4 +2482,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_25() {
-    if (jj_scan_token(COMMENT)) {
-        return true;
-    }
+  final private boolean jj_3R_25() {
+    if (jj_scan_token(COMMENT)) return true;
@@ -2723,4 +2487,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_24() {
-    if (jj_scan_token(NODE)) {
-        return true;
-    }
+  final private boolean jj_3R_24() {
+    if (jj_scan_token(NODE)) return true;
@@ -2730,7 +2492,3 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_120() {
-    if (jj_scan_token(NEQ)) {
-        return true;
-    }
-    if (jj_3R_115()) {
-        return true;
-    }
+  final private boolean jj_3R_120() {
+    if (jj_scan_token(NEQ)) return true;
+    if (jj_3R_115()) return true;
@@ -2740,4 +2498,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_23() {
-    if (jj_scan_token(TEXT)) {
-        return true;
-    }
+  final private boolean jj_3R_23() {
+    if (jj_scan_token(TEXT)) return true;
@@ -2747,7 +2503,3 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_119() {
-    if (jj_scan_token(EQ)) {
-        return true;
-    }
-    if (jj_3R_115()) {
-        return true;
-    }
+  final private boolean jj_3R_119() {
+    if (jj_scan_token(EQ)) return true;
+    if (jj_3R_115()) return true;
@@ -2757,4 +2509,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_68() {
-    if (jj_3R_77()) {
-        return true;
-    }
+  final private boolean jj_3R_68() {
+    if (jj_3R_77()) return true;
@@ -2764,7 +2514,3 @@ specified to disambiguate the grammar:
-  private boolean jj_3_1() {
-    if (jj_3R_15()) {
-        return true;
-    }
-    if (jj_scan_token(80)) {
-        return true;
-    }
+  final private boolean jj_3_1() {
+    if (jj_3R_15()) return true;
+    if (jj_scan_token(80)) return true;
@@ -2774,4 +2520,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3_4() {
-    if (jj_scan_token(PI)) {
-        return true;
-    }
+  final private boolean jj_3_4() {
+    if (jj_scan_token(PI)) return true;
@@ -2781,10 +2525,4 @@ specified to disambiguate the grammar:
-  private boolean jj_3_3() {
-    if (jj_3R_17()) {
-        return true;
-    }
-    if (jj_scan_token(81)) {
-        return true;
-    }
-    if (jj_scan_token(82)) {
-        return true;
-    }
+  final private boolean jj_3_3() {
+    if (jj_3R_17()) return true;
+    if (jj_scan_token(81)) return true;
+    if (jj_scan_token(82)) return true;
@@ -2794 +2532 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_17() {
+  final private boolean jj_3R_17() {
@@ -2803,3 +2541 @@ specified to disambiguate the grammar:
-    if (jj_3R_26()) {
-        return true;
-    }
+    if (jj_3R_26()) return true;
@@ -2812,4 +2548,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_67() {
-    if (jj_scan_token(84)) {
-        return true;
-    }
+  final private boolean jj_3R_67() {
+    if (jj_scan_token(84)) return true;
@@ -2819,4 +2553,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_114() {
-    if (jj_3R_15()) {
-        return true;
-    }
+  final private boolean jj_3R_114() {
+    if (jj_3R_15()) return true;
@@ -2826,4 +2558,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_66() {
-    if (jj_scan_token(83)) {
-        return true;
-    }
+  final private boolean jj_3R_66() {
+    if (jj_scan_token(83)) return true;
@@ -2833,4 +2563,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_94() {
-    if (jj_3R_115()) {
-        return true;
-    }
+  final private boolean jj_3R_94() {
+    if (jj_3R_115()) return true;
@@ -2845,4 +2573,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_76() {
-    if (jj_3R_84()) {
-        return true;
-    }
+  final private boolean jj_3R_76() {
+    if (jj_3R_84()) return true;
@@ -2852,4 +2578,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_99() {
-    if (jj_3R_64()) {
-        return true;
-    }
+  final private boolean jj_3R_99() {
+    if (jj_3R_64()) return true;
@@ -2859,10 +2583,4 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_98() {
-    if (jj_3R_15()) {
-        return true;
-    }
-    if (jj_scan_token(80)) {
-        return true;
-    }
-    if (jj_3R_15()) {
-        return true;
-    }
+  final private boolean jj_3R_98() {
+    if (jj_3R_15()) return true;
+    if (jj_scan_token(80)) return true;
+    if (jj_3R_15()) return true;
@@ -2872,13 +2590,5 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_75() {
-    if (jj_scan_token(PI)) {
-        return true;
-    }
-    if (jj_scan_token(81)) {
-        return true;
-    }
-    if (jj_scan_token(Literal)) {
-        return true;
-    }
-    if (jj_scan_token(82)) {
-        return true;
-    }
+  final private boolean jj_3R_75() {
+    if (jj_scan_token(PI)) return true;
+    if (jj_scan_token(81)) return true;
+    if (jj_scan_token(Literal)) return true;
+    if (jj_scan_token(82)) return true;
@@ -2888,4 +2598,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_92() {
-    if (jj_3R_15()) {
-        return true;
-    }
+  final private boolean jj_3R_92() {
+    if (jj_3R_15()) return true;
@@ -2895,10 +2603,4 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_74() {
-    if (jj_3R_17()) {
-        return true;
-    }
-    if (jj_scan_token(81)) {
-        return true;
-    }
-    if (jj_scan_token(82)) {
-        return true;
-    }
+  final private boolean jj_3R_74() {
+    if (jj_3R_17()) return true;
+    if (jj_scan_token(81)) return true;
+    if (jj_scan_token(82)) return true;
@@ -2908,7 +2610,3 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_71() {
-    if (jj_3R_18()) {
-        return true;
-    }
-    if (jj_3R_80()) {
-        return true;
-    }
+  final private boolean jj_3R_71() {
+    if (jj_3R_18()) return true;
+    if (jj_3R_80()) return true;
@@ -2918,4 +2616,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_93() {
-    if (jj_scan_token(80)) {
-        return true;
-    }
+  final private boolean jj_3R_93() {
+    if (jj_scan_token(80)) return true;
@@ -2926,3 +2622 @@ specified to disambiguate the grammar:
-    if (jj_3R_114()) {
-        return true;
-    }
+    if (jj_3R_114()) return true;
@@ -2933,4 +2627,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_65() {
-    if (jj_3R_73()) {
-        return true;
-    }
+  final private boolean jj_3R_65() {
+    if (jj_3R_73()) return true;
@@ -2943,3 +2635 @@ specified to disambiguate the grammar:
-    if (jj_3R_76()) {
-        return true;
-    }
+    if (jj_3R_76()) return true;
@@ -2951,7 +2641,3 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_85() {
-    if (jj_scan_token(80)) {
-        return true;
-    }
-    if (jj_3R_15()) {
-        return true;
-    }
+  final private boolean jj_3R_85() {
+    if (jj_scan_token(80)) return true;
+    if (jj_3R_15()) return true;
@@ -2961 +2647 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_89() {
+  final private boolean jj_3R_89() {
@@ -2966,3 +2652 @@ specified to disambiguate the grammar:
-    if (jj_3R_99()) {
-        return true;
-    }
+    if (jj_3R_99()) return true;
@@ -2973,7 +2657,3 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_95() {
-    if (jj_scan_token(AND)) {
-        return true;
-    }
-    if (jj_3R_94()) {
-        return true;
-    }
+  final private boolean jj_3R_95() {
+    if (jj_scan_token(AND)) return true;
+    if (jj_3R_94()) return true;
@@ -2983 +2663 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_84() {
+  final private boolean jj_3R_84() {
@@ -2988,3 +2668 @@ specified to disambiguate the grammar:
-    if (jj_3R_92()) {
-        return true;
-    }
+    if (jj_3R_92()) return true;
@@ -2993,3 +2671 @@ specified to disambiguate the grammar:
-    if (jj_3R_93()) {
-        jj_scanpos = xsp;
-    }
+    if (jj_3R_93()) jj_scanpos = xsp;
@@ -2999 +2675 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_22() {
+  final private boolean jj_3R_22() {
@@ -3006,3 +2682 @@ specified to disambiguate the grammar:
-    if (jj_3R_67()) {
-        return true;
-    }
+    if (jj_3R_67()) return true;
@@ -3018,7 +2692,3 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_72() {
-    if (jj_3R_81()) {
-        return true;
-    }
-    if (jj_3R_80()) {
-        return true;
-    }
+  final private boolean jj_3R_72() {
+    if (jj_3R_81()) return true;
+    if (jj_3R_80()) return true;
@@ -3028,4 +2698,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_86() {
-    if (jj_3R_94()) {
-        return true;
-    }
+  final private boolean jj_3R_86() {
+    if (jj_3R_94()) return true;
@@ -3040,4 +2708,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_151() {
-    if (jj_3R_16()) {
-        return true;
-    }
+  final private boolean jj_3R_151() {
+    if (jj_3R_16()) return true;
@@ -3047,7 +2713,3 @@ specified to disambiguate the grammar:
-  private boolean jj_3_5() {
-    if (jj_3R_18()) {
-        return true;
-    }
-    if (jj_scan_token(81)) {
-        return true;
-    }
+  final private boolean jj_3_5() {
+    if (jj_3R_18()) return true;
+    if (jj_scan_token(81)) return true;
@@ -3057,4 +2719,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_78() {
-    if (jj_3R_15()) {
-        return true;
-    }
+  final private boolean jj_3R_78() {
+    if (jj_3R_15()) return true;
@@ -3063,3 +2723 @@ specified to disambiguate the grammar:
-    if (jj_3R_85()) {
-        jj_scanpos = xsp;
-    }
+    if (jj_3R_85()) jj_scanpos = xsp;
@@ -3069,7 +2727,3 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_69() {
-    if (jj_scan_token(VARIABLE)) {
-        return true;
-    }
-    if (jj_3R_78()) {
-        return true;
-    }
+  final private boolean jj_3R_69() {
+    if (jj_scan_token(VARIABLE)) return true;
+    if (jj_3R_78()) return true;
@@ -3079,4 +2733,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_57() {
-    if (jj_scan_token(FUNCTION_FORMAT_NUMBER)) {
-        return true;
-    }
+  final private boolean jj_3R_57() {
+    if (jj_scan_token(FUNCTION_FORMAT_NUMBER)) return true;
@@ -3086,4 +2738,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_56() {
-    if (jj_scan_token(FUNCTION_KEY)) {
-        return true;
-    }
+  final private boolean jj_3R_56() {
+    if (jj_scan_token(FUNCTION_KEY)) return true;
@@ -3093,4 +2743,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_55() {
-    if (jj_scan_token(FUNCTION_ROUND)) {
-        return true;
-    }
+  final private boolean jj_3R_55() {
+    if (jj_scan_token(FUNCTION_ROUND)) return true;
@@ -3100,4 +2748,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_63() {
-    if (jj_3R_72()) {
-        return true;
-    }
+  final private boolean jj_3R_63() {
+    if (jj_3R_72()) return true;
@@ -3107,4 +2753,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_54() {
-    if (jj_scan_token(FUNCTION_CEILING)) {
-        return true;
-    }
+  final private boolean jj_3R_54() {
+    if (jj_scan_token(FUNCTION_CEILING)) return true;
@@ -3114,4 +2758,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_62() {
-    if (jj_3R_71()) {
-        return true;
-    }
+  final private boolean jj_3R_62() {
+    if (jj_3R_71()) return true;
@@ -3121,4 +2763,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_53() {
-    if (jj_scan_token(FUNCTION_FLOOR)) {
-        return true;
-    }
+  final private boolean jj_3R_53() {
+    if (jj_scan_token(FUNCTION_FLOOR)) return true;
@@ -3128,4 +2768,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_61() {
-    if (jj_scan_token(Number)) {
-        return true;
-    }
+  final private boolean jj_3R_61() {
+    if (jj_scan_token(Number)) return true;
@@ -3135,4 +2773,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_52() {
-    if (jj_scan_token(FUNCTION_SUM)) {
-        return true;
-    }
+  final private boolean jj_3R_52() {
+    if (jj_scan_token(FUNCTION_SUM)) return true;
@@ -3142,4 +2778,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_21() {
-    if (jj_scan_token(SLASHSLASH)) {
-        return true;
-    }
+  final private boolean jj_3R_21() {
+    if (jj_scan_token(SLASHSLASH)) return true;
@@ -3149,4 +2783,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_60() {
-    if (jj_scan_token(Literal)) {
-        return true;
-    }
+  final private boolean jj_3R_60() {
+    if (jj_scan_token(Literal)) return true;
@@ -3156,4 +2788,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_51() {
-    if (jj_scan_token(FUNCTION_NUMBER)) {
-        return true;
-    }
+  final private boolean jj_3R_51() {
+    if (jj_scan_token(FUNCTION_NUMBER)) return true;
@@ -3163,10 +2793,4 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_59() {
-    if (jj_scan_token(81)) {
-        return true;
-    }
-    if (jj_3R_70()) {
-        return true;
-    }
-    if (jj_scan_token(82)) {
-        return true;
-    }
+  final private boolean jj_3R_59() {
+    if (jj_scan_token(81)) return true;
+    if (jj_3R_70()) return true;
+    if (jj_scan_token(82)) return true;
@@ -3176,7 +2800,3 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_87() {
-    if (jj_scan_token(OR)) {
-        return true;
-    }
-    if (jj_3R_86()) {
-        return true;
-    }
+  final private boolean jj_3R_87() {
+    if (jj_scan_token(OR)) return true;
+    if (jj_3R_86()) return true;
@@ -3186,4 +2806,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_50() {
-    if (jj_scan_token(FUNCTION_LANG)) {
-        return true;
-    }
+  final private boolean jj_3R_50() {
+    if (jj_scan_token(FUNCTION_LANG)) return true;
@@ -3193,4 +2811,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_58() {
-    if (jj_3R_69()) {
-        return true;
-    }
+  final private boolean jj_3R_58() {
+    if (jj_3R_69()) return true;
@@ -3200,4 +2816,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_81() {
-    if (jj_3R_89()) {
-        return true;
-    }
+  final private boolean jj_3R_81() {
+    if (jj_3R_89()) return true;
@@ -3207,4 +2821,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_49() {
-    if (jj_scan_token(FUNCTION_NULL)) {
-        return true;
-    }
+  final private boolean jj_3R_49() {
+    if (jj_scan_token(FUNCTION_NULL)) return true;
@@ -3214,4 +2826,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_48() {
-    if (jj_scan_token(FUNCTION_FALSE)) {
-        return true;
-    }
+  final private boolean jj_3R_48() {
+    if (jj_scan_token(FUNCTION_FALSE)) return true;
@@ -3221,4 +2831,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_47() {
-    if (jj_scan_token(FUNCTION_TRUE)) {
-        return true;
-    }
+  final private boolean jj_3R_47() {
+    if (jj_scan_token(FUNCTION_TRUE)) return true;
@@ -3228,4 +2836,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_46() {
-    if (jj_scan_token(FUNCTION_NOT)) {
-        return true;
-    }
+  final private boolean jj_3R_46() {
+    if (jj_scan_token(FUNCTION_NOT)) return true;
@@ -3235 +2841 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_16() {
+  final private boolean jj_3R_16() {
@@ -3240,6 +2846 @@ specified to disambiguate the grammar:
-    if (jj_3R_21()) {
-        return true;
-    }
-    }
-    if (jj_3R_22()) {
-        return true;
+    if (jj_3R_21()) return true;
@@ -3246,0 +2848 @@ specified to disambiguate the grammar:
+    if (jj_3R_22()) return true;
@@ -3250,4 +2852,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_149() {
-    if (jj_3R_16()) {
-        return true;
-    }
+  final private boolean jj_3R_149() {
+    if (jj_3R_16()) return true;
@@ -3257,4 +2857,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_45() {
-    if (jj_scan_token(FUNCTION_BOOLEAN)) {
-        return true;
-    }
+  final private boolean jj_3R_45() {
+    if (jj_scan_token(FUNCTION_BOOLEAN)) return true;
@@ -3264,4 +2862,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_44() {
-    if (jj_scan_token(FUNCTION_TRANSLATE)) {
-        return true;
-    }
+  final private boolean jj_3R_44() {
+    if (jj_scan_token(FUNCTION_TRANSLATE)) return true;
@@ -3271 +2867 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_19() {
+  final private boolean jj_3R_19() {
@@ -3284,3 +2880 @@ specified to disambiguate the grammar:
-    if (jj_3R_63()) {
-        return true;
-    }
+    if (jj_3R_63()) return true;
@@ -3295,4 +2889,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_43() {
-    if (jj_scan_token(FUNCTION_NORMALIZE_SPACE)) {
-        return true;
-    }
+  final private boolean jj_3R_43() {
+    if (jj_scan_token(FUNCTION_NORMALIZE_SPACE)) return true;
@@ -3302,4 +2894,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_42() {
-    if (jj_scan_token(FUNCTION_STRING_LENGTH)) {
-        return true;
-    }
+  final private boolean jj_3R_42() {
+    if (jj_scan_token(FUNCTION_STRING_LENGTH)) return true;
@@ -3309,4 +2899,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_41() {
-    if (jj_scan_token(FUNCTION_SUBSTRING)) {
-        return true;
-    }
+  final private boolean jj_3R_41() {
+    if (jj_scan_token(FUNCTION_SUBSTRING)) return true;
@@ -3316,4 +2904,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_40() {
-    if (jj_scan_token(FUNCTION_SUBSTRING_AFTER)) {
-        return true;
-    }
+  final private boolean jj_3R_40() {
+    if (jj_scan_token(FUNCTION_SUBSTRING_AFTER)) return true;
@@ -3323,4 +2909,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_79() {
-    if (jj_3R_86()) {
-        return true;
-    }
+  final private boolean jj_3R_79() {
+    if (jj_3R_86()) return true;
@@ -3335,4 +2919,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_39() {
-    if (jj_scan_token(FUNCTION_SUBSTRING_BEFORE)) {
-        return true;
-    }
+  final private boolean jj_3R_39() {
+    if (jj_scan_token(FUNCTION_SUBSTRING_BEFORE)) return true;
@@ -3342,4 +2924,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_38() {
-    if (jj_scan_token(FUNCTION_CONTAINS)) {
-        return true;
-    }
+  final private boolean jj_3R_38() {
+    if (jj_scan_token(FUNCTION_CONTAINS)) return true;
@@ -3349,4 +2929,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_37() {
-    if (jj_scan_token(FUNCTION_ENDS_WITH)) {
-        return true;
-    }
+  final private boolean jj_3R_37() {
+    if (jj_scan_token(FUNCTION_ENDS_WITH)) return true;
@@ -3356,4 +2934,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_36() {
-    if (jj_scan_token(FUNCTION_STARTS_WITH)) {
-        return true;
-    }
+  final private boolean jj_3R_36() {
+    if (jj_scan_token(FUNCTION_STARTS_WITH)) return true;
@@ -3363,4 +2939,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_35() {
-    if (jj_scan_token(FUNCTION_CONCAT)) {
-        return true;
-    }
+  final private boolean jj_3R_35() {
+    if (jj_scan_token(FUNCTION_CONCAT)) return true;
@@ -3370,4 +2944,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_34() {
-    if (jj_scan_token(FUNCTION_STRING)) {
-        return true;
-    }
+  final private boolean jj_3R_34() {
+    if (jj_scan_token(FUNCTION_STRING)) return true;
@@ -3377,4 +2949,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_33() {
-    if (jj_scan_token(FUNCTION_NAME)) {
-        return true;
-    }
+  final private boolean jj_3R_33() {
+    if (jj_scan_token(FUNCTION_NAME)) return true;
@@ -3384,4 +2954,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_32() {
-    if (jj_scan_token(FUNCTION_NAMESPACE_URI)) {
-        return true;
-    }
+  final private boolean jj_3R_32() {
+    if (jj_scan_token(FUNCTION_NAMESPACE_URI)) return true;
@@ -3391,4 +2959,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_31() {
-    if (jj_scan_token(FUNCTION_LOCAL_NAME)) {
-        return true;
-    }
+  final private boolean jj_3R_31() {
+    if (jj_scan_token(FUNCTION_LOCAL_NAME)) return true;
@@ -3398,4 +2964,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_70() {
-    if (jj_3R_79()) {
-        return true;
-    }
+  final private boolean jj_3R_70() {
+    if (jj_3R_79()) return true;
@@ -3405,4 +2969,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_30() {
-    if (jj_scan_token(FUNCTION_ID)) {
-        return true;
-    }
+  final private boolean jj_3R_30() {
+    if (jj_scan_token(FUNCTION_ID)) return true;
@@ -3412,4 +2974,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_29() {
-    if (jj_scan_token(FUNCTION_COUNT)) {
-        return true;
-    }
+  final private boolean jj_3R_29() {
+    if (jj_scan_token(FUNCTION_COUNT)) return true;
@@ -3419,4 +2979,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_28() {
-    if (jj_scan_token(FUNCTION_POSITION)) {
-        return true;
-    }
+  final private boolean jj_3R_28() {
+    if (jj_scan_token(FUNCTION_POSITION)) return true;
@@ -3426,4 +2984,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_27() {
-    if (jj_scan_token(FUNCTION_LAST)) {
-        return true;
-    }
+  final private boolean jj_3R_27() {
+    if (jj_scan_token(FUNCTION_LAST)) return true;
@@ -3433,4 +2989,2 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_147() {
-    if (jj_3R_22()) {
-        return true;
-    }
+  final private boolean jj_3R_147() {
+    if (jj_3R_22()) return true;
@@ -3445 +2999 @@ specified to disambiguate the grammar:
-  private boolean jj_3R_18() {
+  final private boolean jj_3R_18() {
@@ -3508,3 +3062 @@ specified to disambiguate the grammar:
-    if (jj_3R_57()) {
-        return true;
-    }
+    if (jj_3R_57()) return true;
@@ -3574 +3126 @@ specified to disambiguate the grammar:
-  public XPathParser(final java.io.InputStream stream) {
+  public XPathParser(java.io.InputStream stream) {
@@ -3580,6 +3132,2 @@ specified to disambiguate the grammar:
-    for (int i = 0; i < 39; i++) {
-        jj_la1[i] = -1;
-    }
-    for (int i = 0; i < jj_2_rtns.length; i++) {
-        jj_2_rtns[i] = new JJCalls();
-    }
+    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
+    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
@@ -3588 +3136 @@ specified to disambiguate the grammar:
-  public void ReInit(final java.io.InputStream stream) {
+  public void ReInit(java.io.InputStream stream) {
@@ -3594,6 +3142,2 @@ specified to disambiguate the grammar:
-    for (int i = 0; i < 39; i++) {
-        jj_la1[i] = -1;
-    }
-    for (int i = 0; i < jj_2_rtns.length; i++) {
-        jj_2_rtns[i] = new JJCalls();
-    }
+    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
+    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
@@ -3602 +3146 @@ specified to disambiguate the grammar:
-  public XPathParser(final java.io.Reader stream) {
+  public XPathParser(java.io.Reader stream) {
@@ -3608,6 +3152,2 @@ specified to disambiguate the grammar:
-    for (int i = 0; i < 39; i++) {
-        jj_la1[i] = -1;
-    }
-    for (int i = 0; i < jj_2_rtns.length; i++) {
-        jj_2_rtns[i] = new JJCalls();
-    }
+    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
+    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
@@ -3616 +3156 @@ specified to disambiguate the grammar:
-  public void ReInit(final java.io.Reader stream) {
+  public void ReInit(java.io.Reader stream) {
@@ -3622,6 +3162,2 @@ specified to disambiguate the grammar:
-    for (int i = 0; i < 39; i++) {
-        jj_la1[i] = -1;
-    }
-    for (int i = 0; i < jj_2_rtns.length; i++) {
-        jj_2_rtns[i] = new JJCalls();
-    }
+    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
+    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
@@ -3630 +3166 @@ specified to disambiguate the grammar:
-  public XPathParser(final XPathParserTokenManager tm) {
+  public XPathParser(XPathParserTokenManager tm) {
@@ -3635,6 +3171,2 @@ specified to disambiguate the grammar:
-    for (int i = 0; i < 39; i++) {
-        jj_la1[i] = -1;
-    }
-    for (int i = 0; i < jj_2_rtns.length; i++) {
-        jj_2_rtns[i] = new JJCalls();
-    }
+    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
+    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
@@ -3643 +3175 @@ specified to disambiguate the grammar:
-  public void ReInit(final XPathParserTokenManager tm) {
+  public void ReInit(XPathParserTokenManager tm) {
@@ -3648,6 +3180,2 @@ specified to disambiguate the grammar:
-    for (int i = 0; i < 39; i++) {
-        jj_la1[i] = -1;
-    }
-    for (int i = 0; i < jj_2_rtns.length; i++) {
-        jj_2_rtns[i] = new JJCalls();
-    }
+    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
+    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
@@ -3656,7 +3184,4 @@ specified to disambiguate the grammar:
-  private Token jj_consume_token(final int kind) throws ParseException {
-    final Token oldToken = token;
-    if ((token = jj_nt).next != null) {
-        jj_nt = jj_nt.next;
-    } else {
-        jj_nt = jj_nt.next = token_source.getNextToken();
-    }
+  final private Token jj_consume_token(int kind) throws ParseException {
+    Token oldToken = token;
+    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
+    else jj_nt = jj_nt.next = token_source.getNextToken();
@@ -3667,2 +3192,2 @@ specified to disambiguate the grammar:
-        for (final JJCalls jj_2_rtn : jj_2_rtns) {
-          JJCalls c = jj_2_rtn;
+        for (int i = 0; i < jj_2_rtns.length; i++) {
+          JJCalls c = jj_2_rtns[i];
@@ -3670,3 +3195 @@ specified to disambiguate the grammar:
-            if (c.gen < jj_gen) {
-                c.first = null;
-            }
+            if (c.gen < jj_gen) c.first = null;
@@ -3685,6 +3208 @@ specified to disambiguate the grammar:
-  static private final class LookaheadSuccess extends Error {
-
-    /**
-     *
-     */
-    private static final long serialVersionUID = 1L; }
+  static private final class LookaheadSuccess extends java.lang.Error { }
@@ -3692 +3210 @@ specified to disambiguate the grammar:
-  private boolean jj_scan_token(final int kind) {
+  final private boolean jj_scan_token(int kind) {
@@ -3706,9 +3224 @@ specified to disambiguate the grammar:
-      if (tok != null) {
-        jj_add_error_token(kind, i);
-    }
-    }
-    if (jj_scanpos.kind != kind) {
-        return true;
-    }
-    if (jj_la == 0 && jj_scanpos == jj_lastpos) {
-        throw jj_ls;
+      if (tok != null) jj_add_error_token(kind, i);
@@ -3715,0 +3226,2 @@ specified to disambiguate the grammar:
+    if (jj_scanpos.kind != kind) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
@@ -3720,5 +3232,2 @@ specified to disambiguate the grammar:
-    if ((token = jj_nt).next != null) {
-        jj_nt = jj_nt.next;
-    } else {
-        jj_nt = jj_nt.next = token_source.getNextToken();
-    }
+    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
+    else jj_nt = jj_nt.next = token_source.getNextToken();
@@ -3729 +3238 @@ specified to disambiguate the grammar:
-  final public Token getToken(final int index) {
+  final public Token getToken(int index) {
@@ -3732,5 +3241,2 @@ specified to disambiguate the grammar:
-      if (t.next != null) {
-        t = t.next;
-    } else {
-        t = t.next = token_source.getNextToken();
-    }
+      if (t.next != null) t = t.next;
+      else t = t.next = token_source.getNextToken();
@@ -3741 +3247 @@ specified to disambiguate the grammar:
-  private final java.util.Vector jj_expentries = new java.util.Vector();
+  private java.util.Vector jj_expentries = new java.util.Vector();
@@ -3744 +3250 @@ specified to disambiguate the grammar:
-  private final int[] jj_lasttokens = new int[100];
+  private int[] jj_lasttokens = new int[100];
@@ -3747,4 +3253,2 @@ specified to disambiguate the grammar:
-  private void jj_add_error_token(final int kind, final int pos) {
-    if (pos >= 100) {
-        return;
-    }
+  private void jj_add_error_token(int kind, int pos) {
+    if (pos >= 100) return;
@@ -3759,2 +3263,2 @@ specified to disambiguate the grammar:
-      for (final java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
-        final int[] oldentry = (int[])e.nextElement();
+      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
+        int[] oldentry = (int[])(e.nextElement());
@@ -3769,3 +3273 @@ specified to disambiguate the grammar:
-          if (exists) {
-            break;
-        }
+          if (exists) break;
@@ -3774,6 +3276,2 @@ specified to disambiguate the grammar:
-      if (!exists) {
-        jj_expentries.addElement(jj_expentry);
-    }
-      if (pos != 0) {
-        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
-    }
+      if (!exists) jj_expentries.addElement(jj_expentry);
+      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
@@ -3785 +3283 @@ specified to disambiguate the grammar:
-    final boolean[] la1tokens = new boolean[90];
+    boolean[] la1tokens = new boolean[90];
@@ -3796 +3294 @@ specified to disambiguate the grammar:
-          if ((jj_la1_0[i] & 1<<j) != 0) {
+          if ((jj_la1_0[i] & (1<<j)) != 0) {
@@ -3799 +3297 @@ specified to disambiguate the grammar:
-          if ((jj_la1_1[i] & 1<<j) != 0) {
+          if ((jj_la1_1[i] & (1<<j)) != 0) {
@@ -3802 +3300 @@ specified to disambiguate the grammar:
-          if ((jj_la1_2[i] & 1<<j) != 0) {
+          if ((jj_la1_2[i] & (1<<j)) != 0) {
@@ -3818 +3316 @@ specified to disambiguate the grammar:
-    final int[][] exptokseq = new int[jj_expentries.size()][];
+    int[][] exptokseq = new int[jj_expentries.size()][];
@@ -3831 +3329 @@ specified to disambiguate the grammar:
-  private void jj_rescan_token() {
+  final private void jj_rescan_token() {
@@ -3853 +3351 @@ specified to disambiguate the grammar:
-  private void jj_save(final int index, final int xla) {
+  final private void jj_save(int index, int xla) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/parser/XPathParserTokenManager.java b/src/main/java/org/apache/commons/jxpath/ri/parser/XPathParserTokenManager.java
index 2a1a74c7..da2a1031 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/parser/XPathParserTokenManager.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/parser/XPathParserTokenManager.java
@@ -19,0 +20,2 @@ package org.apache.commons.jxpath.ri.parser;
+import org.apache.commons.jxpath.ri.Compiler;
+import java.util.ArrayList;
@@ -24,2 +26,2 @@ public class XPathParserTokenManager implements XPathParserConstants
-  public  void setDebugStream(final java.io.PrintStream ds) { debugStream = ds; }
-private int jjStopStringLiteralDfa_0(final int pos, final long active0, final long active1)
+  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
+private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
@@ -30 +32 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-         if ((active1 & 0x180000L) != 0L) {
+         if ((active1 & 0x180000L) != 0L)
@@ -32 +33,0 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-        }
@@ -46 +47 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-         if ((active0 & 0x8000008000000L) != 0L) {
+         if ((active0 & 0x8000008000000L) != 0L)
@@ -48 +48,0 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-        }
@@ -51 +51 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-         if ((active0 & 0x10000070000000L) != 0L || (active1 & 0x410L) != 0L) {
+         if ((active0 & 0x10000070000000L) != 0L || (active1 & 0x410L) != 0L)
@@ -53 +52,0 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-        }
@@ -62 +61 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-         if ((active0 & 0xc1010180000000L) != 0L || (active1 & 0x1a0L) != 0L) {
+         if ((active0 & 0xc1010180000000L) != 0L || (active1 & 0x1a0L) != 0L)
@@ -64 +62,0 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-        }
@@ -82 +80 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-         if ((active0 & 0x4000000000000L) != 0L || (active1 & 0x2840L) != 0L) {
+         if ((active0 & 0x4000000000000L) != 0L || (active1 & 0x2840L) != 0L)
@@ -84 +81,0 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-        }
@@ -96 +93 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-         if ((active0 & 0x300000000000000L) != 0L || (active1 & 0x201L) != 0L) {
+         if ((active0 & 0x300000000000000L) != 0L || (active1 & 0x201L) != 0L)
@@ -98 +94,0 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-        }
@@ -128 +124 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-         if ((active0 & 0x200000000L) != 0L || (active1 & 0x1008L) != 0L) {
+         if ((active0 & 0x200000000L) != 0L || (active1 & 0x1008L) != 0L)
@@ -130 +125,0 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-        }
@@ -157 +152 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-         if ((active0 & 0x1002000000000000L) != 0L) {
+         if ((active0 & 0x1002000000000000L) != 0L)
@@ -159 +153,0 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-        }
@@ -177 +171 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-         if ((active0 & 0xe800000000000000L) != 0L || (active1 & 0x4L) != 0L) {
+         if ((active0 & 0xe800000000000000L) != 0L || (active1 & 0x4L) != 0L)
@@ -179 +172,0 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-        }
@@ -200 +193 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-         if ((active0 & 0x20000000000000L) != 0L) {
+         if ((active0 & 0x20000000000000L) != 0L)
@@ -202 +194,0 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-        }
@@ -229 +221 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-         if ((active0 & 0x400000000000000L) != 0L) {
+         if ((active0 & 0x400000000000000L) != 0L)
@@ -231 +222,0 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-        }
@@ -281 +272 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-         if ((active0 & 0x40000000000000L) != 0L || (active1 & 0x4001L) != 0L) {
+         if ((active0 & 0x40000000000000L) != 0L || (active1 & 0x4001L) != 0L)
@@ -283 +273,0 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-        }
@@ -294 +284 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x2L) != 0L) {
+         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x2L) != 0L)
@@ -296 +285,0 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-        }
@@ -305 +294 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-         if ((active0 & 0x2000000000000000L) != 0L) {
+         if ((active0 & 0x2000000000000000L) != 0L)
@@ -307 +295,0 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-        }
@@ -413 +401 @@ private int jjStopStringLiteralDfa_0(final int pos, final long active0, final lo
-private int jjStartNfa_0(final int pos, final long active0, final long active1)
+private final int jjStartNfa_0(int pos, long active0, long active1)
@@ -417 +405 @@ private int jjStartNfa_0(final int pos, final long active0, final long active1)
-private int jjStopAtPos(final int pos, final int kind)
+private final int jjStopAtPos(int pos, int kind)
@@ -423 +411 @@ private int jjStopAtPos(final int pos, final int kind)
-private int jjStartNfaWithStates_0(final int pos, final int kind, final int state)
+private final int jjStartNfaWithStates_0(int pos, int kind, int state)
@@ -428 +416 @@ private int jjStartNfaWithStates_0(final int pos, final int kind, final int stat
-   catch(final java.io.IOException e) { return pos + 1; }
+   catch(java.io.IOException e) { return pos + 1; }
@@ -431 +419 @@ private int jjStartNfaWithStates_0(final int pos, final int kind, final int stat
-private int jjMoveStringLiteralDfa0_0()
+private final int jjMoveStringLiteralDfa0_0()
@@ -511 +499 @@ private int jjMoveStringLiteralDfa0_0()
-private int jjMoveStringLiteralDfa1_0(final long active0, final long active1)
+private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
@@ -514 +502 @@ private int jjMoveStringLiteralDfa1_0(final long active0, final long active1)
-   catch(final java.io.IOException e) {
+   catch(java.io.IOException e) {
@@ -521 +509 @@ private int jjMoveStringLiteralDfa1_0(final long active0, final long active1)
-         if ((active1 & 0x100000L) != 0L) {
+         if ((active1 & 0x100000L) != 0L)
@@ -523 +510,0 @@ private int jjMoveStringLiteralDfa1_0(final long active0, final long active1)
-        }
@@ -526 +513 @@ private int jjMoveStringLiteralDfa1_0(final long active0, final long active1)
-         if ((active0 & 0x80L) != 0L) {
+         if ((active0 & 0x80L) != 0L)
@@ -528 +514,0 @@ private int jjMoveStringLiteralDfa1_0(final long active0, final long active1)
-        }
@@ -531 +517 @@ private int jjMoveStringLiteralDfa1_0(final long active0, final long active1)
-         if ((active0 & 0x1000L) != 0L) {
+         if ((active0 & 0x1000L) != 0L)
@@ -533 +519 @@ private int jjMoveStringLiteralDfa1_0(final long active0, final long active1)
-        } else if ((active0 & 0x4000L) != 0L) {
+         else if ((active0 & 0x4000L) != 0L)
@@ -535 +521 @@ private int jjMoveStringLiteralDfa1_0(final long active0, final long active1)
-        } else if ((active0 & 0x10000L) != 0L) {
+         else if ((active0 & 0x10000L) != 0L)
@@ -537 +522,0 @@ private int jjMoveStringLiteralDfa1_0(final long active0, final long active1)
-        }
@@ -542 +527 @@ private int jjMoveStringLiteralDfa1_0(final long active0, final long active1)
-         if ((active0 & 0x8000000000000L) != 0L) {
+         if ((active0 & 0x8000000000000L) != 0L)
@@ -544 +528,0 @@ private int jjMoveStringLiteralDfa1_0(final long active0, final long active1)
-        }
@@ -559 +543 @@ private int jjMoveStringLiteralDfa1_0(final long active0, final long active1)
-         if ((active0 & 0x8000000L) != 0L) {
+         if ((active0 & 0x8000000L) != 0L)
@@ -561 +544,0 @@ private int jjMoveStringLiteralDfa1_0(final long active0, final long active1)
-        }
@@ -572 +555 @@ private int jjMoveStringLiteralDfa1_0(final long active0, final long active1)
-private int jjMoveStringLiteralDfa2_0(final long old0, long active0, final long old1, long active1)
+private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
@@ -574,3 +557,2 @@ private int jjMoveStringLiteralDfa2_0(final long old0, long active0, final long
-   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
-    return jjStartNfa_0(0, old0, old1);
-}
+   if (((active0 &= old0) | (active1 &= old1)) == 0L)
+      return jjStartNfa_0(0, old0, old1); 
@@ -578 +560 @@ private int jjMoveStringLiteralDfa2_0(final long old0, long active0, final long
-   catch(final java.io.IOException e) {
+   catch(java.io.IOException e) {
@@ -591 +573 @@ private int jjMoveStringLiteralDfa2_0(final long old0, long active0, final long
-         if ((active0 & 0x10000000L) != 0L) {
+         if ((active0 & 0x10000000L) != 0L)
@@ -593 +575 @@ private int jjMoveStringLiteralDfa2_0(final long old0, long active0, final long
-        } else if ((active0 & 0x20000000L) != 0L) {
+         else if ((active0 & 0x20000000L) != 0L)
@@ -595 +576,0 @@ private int jjMoveStringLiteralDfa2_0(final long old0, long active0, final long
-        }
@@ -604 +585 @@ private int jjMoveStringLiteralDfa2_0(final long old0, long active0, final long
-         if ((active1 & 0x400L) != 0L) {
+         if ((active1 & 0x400L) != 0L)
@@ -606 +586,0 @@ private int jjMoveStringLiteralDfa2_0(final long old0, long active0, final long
-        }
@@ -617 +597 @@ private int jjMoveStringLiteralDfa2_0(final long old0, long active0, final long
-         if ((active1 & 0x10L) != 0L) {
+         if ((active1 & 0x10L) != 0L)
@@ -619 +598,0 @@ private int jjMoveStringLiteralDfa2_0(final long old0, long active0, final long
-        }
@@ -624 +603 @@ private int jjMoveStringLiteralDfa2_0(final long old0, long active0, final long
-         if ((active0 & 0x40000000L) != 0L) {
+         if ((active0 & 0x40000000L) != 0L)
@@ -626 +604,0 @@ private int jjMoveStringLiteralDfa2_0(final long old0, long active0, final long
-        }
@@ -631 +609 @@ private int jjMoveStringLiteralDfa2_0(final long old0, long active0, final long
-         if ((active0 & 0x10000000000000L) != 0L) {
+         if ((active0 & 0x10000000000000L) != 0L)
@@ -633 +610,0 @@ private int jjMoveStringLiteralDfa2_0(final long old0, long active0, final long
-        }
@@ -640 +617 @@ private int jjMoveStringLiteralDfa2_0(final long old0, long active0, final long
-private int jjMoveStringLiteralDfa3_0(final long old0, long active0, final long old1, long active1)
+private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
@@ -642,3 +619,2 @@ private int jjMoveStringLiteralDfa3_0(final long old0, long active0, final long
-   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
-    return jjStartNfa_0(1, old0, old1);
-}
+   if (((active0 &= old0) | (active1 &= old1)) == 0L)
+      return jjStartNfa_0(1, old0, old1); 
@@ -646 +622 @@ private int jjMoveStringLiteralDfa3_0(final long old0, long active0, final long
-   catch(final java.io.IOException e) {
+   catch(java.io.IOException e) {
@@ -659 +635 @@ private int jjMoveStringLiteralDfa3_0(final long old0, long active0, final long
-         if ((active0 & 0x80000000L) != 0L) {
+         if ((active0 & 0x80000000L) != 0L)
@@ -661 +637 @@ private int jjMoveStringLiteralDfa3_0(final long old0, long active0, final long
-        } else if ((active0 & 0x80000000000000L) != 0L)
+         else if ((active0 & 0x80000000000000L) != 0L)
@@ -666 +642 @@ private int jjMoveStringLiteralDfa3_0(final long old0, long active0, final long
-         else if ((active1 & 0x20L) != 0L) {
+         else if ((active1 & 0x20L) != 0L)
@@ -668 +643,0 @@ private int jjMoveStringLiteralDfa3_0(final long old0, long active0, final long
-        }
@@ -673 +648 @@ private int jjMoveStringLiteralDfa3_0(final long old0, long active0, final long
-         if ((active1 & 0x100L) != 0L) {
+         if ((active1 & 0x100L) != 0L)
@@ -675 +649,0 @@ private int jjMoveStringLiteralDfa3_0(final long old0, long active0, final long
-        }
@@ -680 +654 @@ private int jjMoveStringLiteralDfa3_0(final long old0, long active0, final long
-         if ((active1 & 0x80L) != 0L) {
+         if ((active1 & 0x80L) != 0L)
@@ -682 +655,0 @@ private int jjMoveStringLiteralDfa3_0(final long old0, long active0, final long
-        }
@@ -695 +668 @@ private int jjMoveStringLiteralDfa3_0(final long old0, long active0, final long
-         if ((active0 & 0x100000000L) != 0L) {
+         if ((active0 & 0x100000000L) != 0L)
@@ -697 +670 @@ private int jjMoveStringLiteralDfa3_0(final long old0, long active0, final long
-        } else if ((active0 & 0x1000000000000L) != 0L) {
+         else if ((active0 & 0x1000000000000L) != 0L)
@@ -699 +671,0 @@ private int jjMoveStringLiteralDfa3_0(final long old0, long active0, final long
-        }
@@ -706 +678 @@ private int jjMoveStringLiteralDfa3_0(final long old0, long active0, final long
-private int jjMoveStringLiteralDfa4_0(final long old0, long active0, final long old1, long active1)
+private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
@@ -708,3 +680,2 @@ private int jjMoveStringLiteralDfa4_0(final long old0, long active0, final long
-   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
-    return jjStartNfa_0(2, old0, old1);
-}
+   if (((active0 &= old0) | (active1 &= old1)) == 0L)
+      return jjStartNfa_0(2, old0, old1); 
@@ -712 +683 @@ private int jjMoveStringLiteralDfa4_0(final long old0, long active0, final long
-   catch(final java.io.IOException e) {
+   catch(java.io.IOException e) {
@@ -725 +696 @@ private int jjMoveStringLiteralDfa4_0(final long old0, long active0, final long
-         if ((active1 & 0x2000L) != 0L) {
+         if ((active1 & 0x2000L) != 0L)
@@ -727 +697,0 @@ private int jjMoveStringLiteralDfa4_0(final long old0, long active0, final long
-        }
@@ -730 +700 @@ private int jjMoveStringLiteralDfa4_0(final long old0, long active0, final long
-         if ((active1 & 0x40L) != 0L) {
+         if ((active1 & 0x40L) != 0L)
@@ -732 +701,0 @@ private int jjMoveStringLiteralDfa4_0(final long old0, long active0, final long
-        }
@@ -743 +712 @@ private int jjMoveStringLiteralDfa4_0(final long old0, long active0, final long
-         if ((active1 & 0x800L) != 0L) {
+         if ((active1 & 0x800L) != 0L)
@@ -745 +713,0 @@ private int jjMoveStringLiteralDfa4_0(final long old0, long active0, final long
-        }
@@ -750 +718 @@ private int jjMoveStringLiteralDfa4_0(final long old0, long active0, final long
-         if ((active0 & 0x4000000000000L) != 0L) {
+         if ((active0 & 0x4000000000000L) != 0L)
@@ -752 +719,0 @@ private int jjMoveStringLiteralDfa4_0(final long old0, long active0, final long
-        }
@@ -759 +726 @@ private int jjMoveStringLiteralDfa4_0(final long old0, long active0, final long
-private int jjMoveStringLiteralDfa5_0(final long old0, long active0, final long old1, long active1)
+private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
@@ -761,3 +728,2 @@ private int jjMoveStringLiteralDfa5_0(final long old0, long active0, final long
-   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
-    return jjStartNfa_0(3, old0, old1);
-}
+   if (((active0 &= old0) | (active1 &= old1)) == 0L)
+      return jjStartNfa_0(3, old0, old1); 
@@ -765 +731 @@ private int jjMoveStringLiteralDfa5_0(final long old0, long active0, final long
-   catch(final java.io.IOException e) {
+   catch(java.io.IOException e) {
@@ -774 +740 @@ private int jjMoveStringLiteralDfa5_0(final long old0, long active0, final long
-         if ((active0 & 0x800000000L) != 0L) {
+         if ((active0 & 0x800000000L) != 0L)
@@ -776 +741,0 @@ private int jjMoveStringLiteralDfa5_0(final long old0, long active0, final long
-        }
@@ -800 +765 @@ private int jjMoveStringLiteralDfa5_0(final long old0, long active0, final long
-         if ((active1 & 0x200L) != 0L) {
+         if ((active1 & 0x200L) != 0L)
@@ -802 +766,0 @@ private int jjMoveStringLiteralDfa5_0(final long old0, long active0, final long
-        }
@@ -807 +771 @@ private int jjMoveStringLiteralDfa5_0(final long old0, long active0, final long
-         if ((active0 & 0x200000000000000L) != 0L) {
+         if ((active0 & 0x200000000000000L) != 0L)
@@ -809 +772,0 @@ private int jjMoveStringLiteralDfa5_0(final long old0, long active0, final long
-        }
@@ -818 +781 @@ private int jjMoveStringLiteralDfa5_0(final long old0, long active0, final long
-private int jjMoveStringLiteralDfa6_0(final long old0, long active0, final long old1, long active1)
+private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
@@ -820,3 +783,2 @@ private int jjMoveStringLiteralDfa6_0(final long old0, long active0, final long
-   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
-    return jjStartNfa_0(4, old0, old1);
-}
+   if (((active0 &= old0) | (active1 &= old1)) == 0L)
+      return jjStartNfa_0(4, old0, old1); 
@@ -824 +786 @@ private int jjMoveStringLiteralDfa6_0(final long old0, long active0, final long
-   catch(final java.io.IOException e) {
+   catch(java.io.IOException e) {
@@ -833 +795 @@ private int jjMoveStringLiteralDfa6_0(final long old0, long active0, final long
-         if ((active0 & 0x1000000000L) != 0L) {
+         if ((active0 & 0x1000000000L) != 0L)
@@ -835 +796,0 @@ private int jjMoveStringLiteralDfa6_0(final long old0, long active0, final long
-        }
@@ -842 +803 @@ private int jjMoveStringLiteralDfa6_0(final long old0, long active0, final long
-         if ((active1 & 0x1000L) != 0L) {
+         if ((active1 & 0x1000L) != 0L)
@@ -844 +804,0 @@ private int jjMoveStringLiteralDfa6_0(final long old0, long active0, final long
-        }
@@ -849 +809 @@ private int jjMoveStringLiteralDfa6_0(final long old0, long active0, final long
-         if ((active1 & 0x8L) != 0L) {
+         if ((active1 & 0x8L) != 0L)
@@ -851 +810,0 @@ private int jjMoveStringLiteralDfa6_0(final long old0, long active0, final long
-        }
@@ -858 +817 @@ private int jjMoveStringLiteralDfa6_0(final long old0, long active0, final long
-         if ((active0 & 0x200000000L) != 0L) {
+         if ((active0 & 0x200000000L) != 0L)
@@ -860 +818,0 @@ private int jjMoveStringLiteralDfa6_0(final long old0, long active0, final long
-        }
@@ -869 +827 @@ private int jjMoveStringLiteralDfa6_0(final long old0, long active0, final long
-private int jjMoveStringLiteralDfa7_0(final long old0, long active0, final long old1, long active1)
+private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
@@ -871,3 +829,2 @@ private int jjMoveStringLiteralDfa7_0(final long old0, long active0, final long
-   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
-    return jjStartNfa_0(5, old0, old1);
-}
+   if (((active0 &= old0) | (active1 &= old1)) == 0L)
+      return jjStartNfa_0(5, old0, old1); 
@@ -875 +832 @@ private int jjMoveStringLiteralDfa7_0(final long old0, long active0, final long
-   catch(final java.io.IOException e) {
+   catch(java.io.IOException e) {
@@ -882 +839 @@ private int jjMoveStringLiteralDfa7_0(final long old0, long active0, final long
-         if ((active0 & 0x2000000000L) != 0L) {
+         if ((active0 & 0x2000000000L) != 0L)
@@ -884 +840,0 @@ private int jjMoveStringLiteralDfa7_0(final long old0, long active0, final long
-        }
@@ -895 +851 @@ private int jjMoveStringLiteralDfa7_0(final long old0, long active0, final long
-         if ((active0 & 0x2000000000000L) != 0L) {
+         if ((active0 & 0x2000000000000L) != 0L)
@@ -897 +852,0 @@ private int jjMoveStringLiteralDfa7_0(final long old0, long active0, final long
-        }
@@ -902 +857 @@ private int jjMoveStringLiteralDfa7_0(final long old0, long active0, final long
-         if ((active0 & 0x1000000000000000L) != 0L) {
+         if ((active0 & 0x1000000000000000L) != 0L)
@@ -904 +858,0 @@ private int jjMoveStringLiteralDfa7_0(final long old0, long active0, final long
-        }
@@ -917 +871 @@ private int jjMoveStringLiteralDfa7_0(final long old0, long active0, final long
-private int jjMoveStringLiteralDfa8_0(final long old0, long active0, final long old1, long active1)
+private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
@@ -919,3 +873,2 @@ private int jjMoveStringLiteralDfa8_0(final long old0, long active0, final long
-   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
-    return jjStartNfa_0(6, old0, old1);
-}
+   if (((active0 &= old0) | (active1 &= old1)) == 0L)
+      return jjStartNfa_0(6, old0, old1); 
@@ -923 +876 @@ private int jjMoveStringLiteralDfa8_0(final long old0, long active0, final long
-   catch(final java.io.IOException e) {
+   catch(java.io.IOException e) {
@@ -934 +887 @@ private int jjMoveStringLiteralDfa8_0(final long old0, long active0, final long
-         if ((active1 & 0x4L) != 0L) {
+         if ((active1 & 0x4L) != 0L)
@@ -936 +888,0 @@ private int jjMoveStringLiteralDfa8_0(final long old0, long active0, final long
-        }
@@ -946 +898 @@ private int jjMoveStringLiteralDfa8_0(final long old0, long active0, final long
-         if ((active0 & 0x800000000000000L) != 0L) {
+         if ((active0 & 0x800000000000000L) != 0L)
@@ -948 +899,0 @@ private int jjMoveStringLiteralDfa8_0(final long old0, long active0, final long
-        }
@@ -963 +914 @@ private int jjMoveStringLiteralDfa8_0(final long old0, long active0, final long
-private int jjMoveStringLiteralDfa9_0(final long old0, long active0, final long old1, long active1)
+private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
@@ -965,3 +916,2 @@ private int jjMoveStringLiteralDfa9_0(final long old0, long active0, final long
-   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
-    return jjStartNfa_0(7, old0, old1);
-}
+   if (((active0 &= old0) | (active1 &= old1)) == 0L)
+      return jjStartNfa_0(7, old0, old1); 
@@ -969 +919 @@ private int jjMoveStringLiteralDfa9_0(final long old0, long active0, final long
-   catch(final java.io.IOException e) {
+   catch(java.io.IOException e) {
@@ -978 +928 @@ private int jjMoveStringLiteralDfa9_0(final long old0, long active0, final long
-         if ((active0 & 0x4000000000L) != 0L) {
+         if ((active0 & 0x4000000000L) != 0L)
@@ -980 +929,0 @@ private int jjMoveStringLiteralDfa9_0(final long old0, long active0, final long
-        }
@@ -983 +932 @@ private int jjMoveStringLiteralDfa9_0(final long old0, long active0, final long
-         if ((active0 & 0x20000000000000L) != 0L) {
+         if ((active0 & 0x20000000000000L) != 0L)
@@ -985 +933,0 @@ private int jjMoveStringLiteralDfa9_0(final long old0, long active0, final long
-        }
@@ -1002 +950 @@ private int jjMoveStringLiteralDfa9_0(final long old0, long active0, final long
-private int jjMoveStringLiteralDfa10_0(final long old0, long active0, final long old1, long active1)
+private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
@@ -1004,3 +952,2 @@ private int jjMoveStringLiteralDfa10_0(final long old0, long active0, final long
-   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
-    return jjStartNfa_0(8, old0, old1);
-}
+   if (((active0 &= old0) | (active1 &= old1)) == 0L)
+      return jjStartNfa_0(8, old0, old1); 
@@ -1008 +955 @@ private int jjMoveStringLiteralDfa10_0(final long old0, long active0, final long
-   catch(final java.io.IOException e) {
+   catch(java.io.IOException e) {
@@ -1017 +964 @@ private int jjMoveStringLiteralDfa10_0(final long old0, long active0, final long
-         if ((active0 & 0x8000000000L) != 0L) {
+         if ((active0 & 0x8000000000L) != 0L)
@@ -1019 +966 @@ private int jjMoveStringLiteralDfa10_0(final long old0, long active0, final long
-        } else if ((active0 & 0x10000000000L) != 0L) {
+         else if ((active0 & 0x10000000000L) != 0L)
@@ -1021 +968 @@ private int jjMoveStringLiteralDfa10_0(final long old0, long active0, final long
-        } else if ((active0 & 0x20000000000L) != 0L) {
+         else if ((active0 & 0x20000000000L) != 0L)
@@ -1023 +970 @@ private int jjMoveStringLiteralDfa10_0(final long old0, long active0, final long
-        } else if ((active0 & 0x40000000000L) != 0L) {
+         else if ((active0 & 0x40000000000L) != 0L)
@@ -1025 +971,0 @@ private int jjMoveStringLiteralDfa10_0(final long old0, long active0, final long
-        }
@@ -1034 +980 @@ private int jjMoveStringLiteralDfa10_0(final long old0, long active0, final long
-         if ((active0 & 0x400000000000000L) != 0L) {
+         if ((active0 & 0x400000000000000L) != 0L)
@@ -1036 +981,0 @@ private int jjMoveStringLiteralDfa10_0(final long old0, long active0, final long
-        }
@@ -1049 +994 @@ private int jjMoveStringLiteralDfa10_0(final long old0, long active0, final long
-private int jjMoveStringLiteralDfa11_0(final long old0, long active0, final long old1, long active1)
+private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
@@ -1051,3 +996,2 @@ private int jjMoveStringLiteralDfa11_0(final long old0, long active0, final long
-   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
-    return jjStartNfa_0(9, old0, old1);
-}
+   if (((active0 &= old0) | (active1 &= old1)) == 0L)
+      return jjStartNfa_0(9, old0, old1); 
@@ -1055 +999 @@ private int jjMoveStringLiteralDfa11_0(final long old0, long active0, final long
-   catch(final java.io.IOException e) {
+   catch(java.io.IOException e) {
@@ -1064 +1008 @@ private int jjMoveStringLiteralDfa11_0(final long old0, long active0, final long
-         if ((active0 & 0x80000000000L) != 0L) {
+         if ((active0 & 0x80000000000L) != 0L)
@@ -1066 +1009,0 @@ private int jjMoveStringLiteralDfa11_0(final long old0, long active0, final long
-        }
@@ -1087 +1030 @@ private int jjMoveStringLiteralDfa11_0(final long old0, long active0, final long
-private int jjMoveStringLiteralDfa12_0(final long old0, long active0, final long old1, long active1)
+private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
@@ -1089,3 +1032,2 @@ private int jjMoveStringLiteralDfa12_0(final long old0, long active0, final long
-   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
-    return jjStartNfa_0(10, old0, old1);
-}
+   if (((active0 &= old0) | (active1 &= old1)) == 0L)
+      return jjStartNfa_0(10, old0, old1); 
@@ -1093 +1035 @@ private int jjMoveStringLiteralDfa12_0(final long old0, long active0, final long
-   catch(final java.io.IOException e) {
+   catch(java.io.IOException e) {
@@ -1106 +1048 @@ private int jjMoveStringLiteralDfa12_0(final long old0, long active0, final long
-         if ((active1 & 0x1L) != 0L) {
+         if ((active1 & 0x1L) != 0L)
@@ -1108 +1049,0 @@ private int jjMoveStringLiteralDfa12_0(final long old0, long active0, final long
-        }
@@ -1111 +1052 @@ private int jjMoveStringLiteralDfa12_0(final long old0, long active0, final long
-         if ((active0 & 0x40000000000000L) != 0L) {
+         if ((active0 & 0x40000000000000L) != 0L)
@@ -1113 +1053,0 @@ private int jjMoveStringLiteralDfa12_0(final long old0, long active0, final long
-        }
@@ -1118 +1058 @@ private int jjMoveStringLiteralDfa12_0(final long old0, long active0, final long
-         if ((active1 & 0x4000L) != 0L) {
+         if ((active1 & 0x4000L) != 0L)
@@ -1120 +1059,0 @@ private int jjMoveStringLiteralDfa12_0(final long old0, long active0, final long
-        }
@@ -1131 +1070 @@ private int jjMoveStringLiteralDfa12_0(final long old0, long active0, final long
-private int jjMoveStringLiteralDfa13_0(final long old0, long active0, final long old1, long active1)
+private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
@@ -1133,3 +1072,2 @@ private int jjMoveStringLiteralDfa13_0(final long old0, long active0, final long
-   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
-    return jjStartNfa_0(11, old0, old1);
-}
+   if (((active0 &= old0) | (active1 &= old1)) == 0L)
+      return jjStartNfa_0(11, old0, old1); 
@@ -1137 +1075 @@ private int jjMoveStringLiteralDfa13_0(final long old0, long active0, final long
-   catch(final java.io.IOException e) {
+   catch(java.io.IOException e) {
@@ -1160 +1098 @@ private int jjMoveStringLiteralDfa13_0(final long old0, long active0, final long
-private int jjMoveStringLiteralDfa14_0(final long old0, long active0, final long old1, long active1)
+private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
@@ -1162,3 +1100,2 @@ private int jjMoveStringLiteralDfa14_0(final long old0, long active0, final long
-   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
-    return jjStartNfa_0(12, old0, old1);
-}
+   if (((active0 &= old0) | (active1 &= old1)) == 0L)
+      return jjStartNfa_0(12, old0, old1); 
@@ -1166 +1103 @@ private int jjMoveStringLiteralDfa14_0(final long old0, long active0, final long
-   catch(final java.io.IOException e) {
+   catch(java.io.IOException e) {
@@ -1173 +1110 @@ private int jjMoveStringLiteralDfa14_0(final long old0, long active0, final long
-         if ((active1 & 0x2L) != 0L) {
+         if ((active1 & 0x2L) != 0L)
@@ -1175 +1111,0 @@ private int jjMoveStringLiteralDfa14_0(final long old0, long active0, final long
-        }
@@ -1182 +1118 @@ private int jjMoveStringLiteralDfa14_0(final long old0, long active0, final long
-         if ((active0 & 0x4000000000000000L) != 0L) {
+         if ((active0 & 0x4000000000000000L) != 0L)
@@ -1184 +1119,0 @@ private int jjMoveStringLiteralDfa14_0(final long old0, long active0, final long
-        }
@@ -1195 +1130 @@ private int jjMoveStringLiteralDfa14_0(final long old0, long active0, final long
-private int jjMoveStringLiteralDfa15_0(final long old0, long active0, final long old1, long active1)
+private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
@@ -1197,3 +1132,2 @@ private int jjMoveStringLiteralDfa15_0(final long old0, long active0, final long
-   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
-    return jjStartNfa_0(13, old0, old1);
-}
+   if (((active0 &= old0) | (active1 &= old1)) == 0L)
+      return jjStartNfa_0(13, old0, old1); 
@@ -1201 +1135 @@ private int jjMoveStringLiteralDfa15_0(final long old0, long active0, final long
-   catch(final java.io.IOException e) {
+   catch(java.io.IOException e) {
@@ -1208 +1142 @@ private int jjMoveStringLiteralDfa15_0(final long old0, long active0, final long
-         if ((active0 & 0x2000000000000000L) != 0L) {
+         if ((active0 & 0x2000000000000000L) != 0L)
@@ -1210 +1143,0 @@ private int jjMoveStringLiteralDfa15_0(final long old0, long active0, final long
-        }
@@ -1223 +1156 @@ private int jjMoveStringLiteralDfa15_0(final long old0, long active0, final long
-private int jjMoveStringLiteralDfa16_0(final long old0, long active0)
+private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
@@ -1225,3 +1158,2 @@ private int jjMoveStringLiteralDfa16_0(final long old0, long active0)
-   if ((active0 &= old0) == 0L) {
-    return jjStartNfa_0(14, old0, 0L);
-}
+   if (((active0 &= old0)) == 0L)
+      return jjStartNfa_0(14, old0, 0L);
@@ -1229 +1161 @@ private int jjMoveStringLiteralDfa16_0(final long old0, long active0)
-   catch(final java.io.IOException e) {
+   catch(java.io.IOException e) {
@@ -1248 +1180 @@ private int jjMoveStringLiteralDfa16_0(final long old0, long active0)
-private int jjMoveStringLiteralDfa17_0(final long old0, long active0)
+private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
@@ -1250,3 +1182,2 @@ private int jjMoveStringLiteralDfa17_0(final long old0, long active0)
-   if ((active0 &= old0) == 0L) {
-    return jjStartNfa_0(15, old0, 0L);
-}
+   if (((active0 &= old0)) == 0L)
+      return jjStartNfa_0(15, old0, 0L);
@@ -1254 +1185 @@ private int jjMoveStringLiteralDfa17_0(final long old0, long active0)
-   catch(final java.io.IOException e) {
+   catch(java.io.IOException e) {
@@ -1261 +1192 @@ private int jjMoveStringLiteralDfa17_0(final long old0, long active0)
-         if ((active0 & 0x100000000000L) != 0L) {
+         if ((active0 & 0x100000000000L) != 0L)
@@ -1263 +1193,0 @@ private int jjMoveStringLiteralDfa17_0(final long old0, long active0)
-        }
@@ -1274 +1204 @@ private int jjMoveStringLiteralDfa17_0(final long old0, long active0)
-private int jjMoveStringLiteralDfa18_0(final long old0, long active0)
+private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
@@ -1276,3 +1206,2 @@ private int jjMoveStringLiteralDfa18_0(final long old0, long active0)
-   if ((active0 &= old0) == 0L) {
-    return jjStartNfa_0(16, old0, 0L);
-}
+   if (((active0 &= old0)) == 0L)
+      return jjStartNfa_0(16, old0, 0L);
@@ -1280 +1209 @@ private int jjMoveStringLiteralDfa18_0(final long old0, long active0)
-   catch(final java.io.IOException e) {
+   catch(java.io.IOException e) {
@@ -1287 +1216 @@ private int jjMoveStringLiteralDfa18_0(final long old0, long active0)
-         if ((active0 & 0x200000000000L) != 0L) {
+         if ((active0 & 0x200000000000L) != 0L)
@@ -1289 +1218 @@ private int jjMoveStringLiteralDfa18_0(final long old0, long active0)
-        } else if ((active0 & 0x400000000000L) != 0L) {
+         else if ((active0 & 0x400000000000L) != 0L)
@@ -1291 +1219,0 @@ private int jjMoveStringLiteralDfa18_0(final long old0, long active0)
-        }
@@ -1300 +1228 @@ private int jjMoveStringLiteralDfa18_0(final long old0, long active0)
-private int jjMoveStringLiteralDfa19_0(final long old0, long active0)
+private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
@@ -1302,3 +1230,2 @@ private int jjMoveStringLiteralDfa19_0(final long old0, long active0)
-   if ((active0 &= old0) == 0L) {
-    return jjStartNfa_0(17, old0, 0L);
-}
+   if (((active0 &= old0)) == 0L)
+      return jjStartNfa_0(17, old0, 0L);
@@ -1306 +1233 @@ private int jjMoveStringLiteralDfa19_0(final long old0, long active0)
-   catch(final java.io.IOException e) {
+   catch(java.io.IOException e) {
@@ -1313 +1240 @@ private int jjMoveStringLiteralDfa19_0(final long old0, long active0)
-         if ((active0 & 0x800000000000L) != 0L) {
+         if ((active0 & 0x800000000000L) != 0L)
@@ -1315 +1241,0 @@ private int jjMoveStringLiteralDfa19_0(final long old0, long active0)
-        }
@@ -1324 +1250 @@ private int jjMoveStringLiteralDfa19_0(final long old0, long active0)
-private int jjMoveStringLiteralDfa20_0(final long old0, long active0)
+private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
@@ -1326,3 +1252,2 @@ private int jjMoveStringLiteralDfa20_0(final long old0, long active0)
-   if ((active0 &= old0) == 0L) {
-    return jjStartNfa_0(18, old0, 0L);
-}
+   if (((active0 &= old0)) == 0L)
+      return jjStartNfa_0(18, old0, 0L);
@@ -1330 +1255 @@ private int jjMoveStringLiteralDfa20_0(final long old0, long active0)
-   catch(final java.io.IOException e) {
+   catch(java.io.IOException e) {
@@ -1343 +1268 @@ private int jjMoveStringLiteralDfa20_0(final long old0, long active0)
-private int jjMoveStringLiteralDfa21_0(final long old0, long active0)
+private final int jjMoveStringLiteralDfa21_0(long old0, long active0)
@@ -1345,3 +1270,2 @@ private int jjMoveStringLiteralDfa21_0(final long old0, long active0)
-   if ((active0 &= old0) == 0L) {
-    return jjStartNfa_0(19, old0, 0L);
-}
+   if (((active0 &= old0)) == 0L)
+      return jjStartNfa_0(19, old0, 0L);
@@ -1349 +1273 @@ private int jjMoveStringLiteralDfa21_0(final long old0, long active0)
-   catch(final java.io.IOException e) {
+   catch(java.io.IOException e) {
@@ -1356 +1280 @@ private int jjMoveStringLiteralDfa21_0(final long old0, long active0)
-         if ((active0 & 0x400000000L) != 0L) {
+         if ((active0 & 0x400000000L) != 0L)
@@ -1358 +1281,0 @@ private int jjMoveStringLiteralDfa21_0(final long old0, long active0)
-        }
@@ -1365 +1288 @@ private int jjMoveStringLiteralDfa21_0(final long old0, long active0)
-private void jjCheckNAdd(final int state)
+private final void jjCheckNAdd(int state)
@@ -1373 +1296 @@ private void jjCheckNAdd(final int state)
-private void jjAddStates(int start, final int end)
+private final void jjAddStates(int start, int end)
@@ -1379 +1302 @@ private void jjAddStates(int start, final int end)
-private void jjCheckNAddTwoStates(final int state1, final int state2)
+private final void jjCheckNAddTwoStates(int state1, int state2)
@@ -1384 +1307 @@ private void jjCheckNAddTwoStates(final int state1, final int state2)
-private void jjCheckNAddStates(int start, final int end)
+private final void jjCheckNAddStates(int start, int end)
@@ -1390 +1313 @@ private void jjCheckNAddStates(int start, final int end)
-private void jjCheckNAddStates(final int start)
+private final void jjCheckNAddStates(int start)
@@ -1518 +1441 @@ static final long[] jjbitVec41 = {
-private int jjMoveNfa_0(final int startState, int curPos)
+private final int jjMoveNfa_0(int startState, int curPos)
@@ -1520 +1443 @@ private int jjMoveNfa_0(final int startState, int curPos)
-   final int[] nextStates;
+   int[] nextStates;
@@ -1525,2 +1448 @@ private int jjMoveNfa_0(final int startState, int curPos)
-   final int j;
-int kind = 0x7fffffff;
+   int j, kind = 0x7fffffff;
@@ -1529,3 +1451,2 @@ int kind = 0x7fffffff;
-      if (++jjround == 0x7fffffff) {
-        ReInitRounds();
-    }
+      if (++jjround == 0x7fffffff)
+         ReInitRounds();
@@ -1534 +1455 @@ int kind = 0x7fffffff;
-         final long l = 1L << curChar;
+         long l = 1L << curChar;
@@ -1542 +1463 @@ int kind = 0x7fffffff;
-                     if (kind > 20) {
+                     if (kind > 20)
@@ -1544 +1464,0 @@ int kind = 0x7fffffff;
-                    }
@@ -1547,7 +1467,6 @@ int kind = 0x7fffffff;
-                  else if (curChar == 46) {
-                    jjCheckNAdd(10);
-                } else if (curChar == 39) {
-                    jjCheckNAddTwoStates(4, 5);
-                } else if (curChar == 34) {
-                    jjCheckNAddTwoStates(1, 2);
-                }
+                  else if (curChar == 46)
+                     jjCheckNAdd(10);
+                  else if (curChar == 39)
+                     jjCheckNAddTwoStates(4, 5);
+                  else if (curChar == 34)
+                     jjCheckNAddTwoStates(1, 2);
@@ -1556,3 +1475,2 @@ int kind = 0x7fffffff;
-                  if ((0xfffffffbffffffffL & l) != 0L) {
-                    jjCheckNAddTwoStates(1, 2);
-                }
+                  if ((0xfffffffbffffffffL & l) != 0L)
+                     jjCheckNAddTwoStates(1, 2);
@@ -1561,3 +1479,2 @@ int kind = 0x7fffffff;
-                  if (curChar == 34 && kind > 18) {
-                    kind = 18;
-                }
+                  if (curChar == 34 && kind > 18)
+                     kind = 18;
@@ -1566,3 +1483,2 @@ int kind = 0x7fffffff;
-                  if (curChar == 39) {
-                    jjCheckNAddTwoStates(4, 5);
-                }
+                  if (curChar == 39)
+                     jjCheckNAddTwoStates(4, 5);
@@ -1571,3 +1487,2 @@ int kind = 0x7fffffff;
-                  if ((0xffffff7fffffffffL & l) != 0L) {
-                    jjCheckNAddTwoStates(4, 5);
-                }
+                  if ((0xffffff7fffffffffL & l) != 0L)
+                     jjCheckNAddTwoStates(4, 5);
@@ -1576,3 +1491,2 @@ int kind = 0x7fffffff;
-                  if (curChar == 39 && kind > 18) {
-                    kind = 18;
-                }
+                  if (curChar == 39 && kind > 18)
+                     kind = 18;
@@ -1581,6 +1495,4 @@ int kind = 0x7fffffff;
-                  if ((0x3ff000000000000L & l) == 0L) {
-                    break;
-                }
-                  if (kind > 20) {
-                    kind = 20;
-                }
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 20)
+                     kind = 20;
@@ -1590,6 +1502,4 @@ int kind = 0x7fffffff;
-                  if (curChar != 46) {
-                    break;
-                }
-                  if (kind > 20) {
-                    kind = 20;
-                }
+                  if (curChar != 46)
+                     break;
+                  if (kind > 20)
+                     kind = 20;
@@ -1599,6 +1509,4 @@ int kind = 0x7fffffff;
-                  if ((0x3ff000000000000L & l) == 0L) {
-                    break;
-                }
-                  if (kind > 20) {
-                    kind = 20;
-                }
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 20)
+                     kind = 20;
@@ -1608,3 +1516,2 @@ int kind = 0x7fffffff;
-                  if (curChar == 46) {
-                    jjCheckNAdd(10);
-                }
+                  if (curChar == 46)
+                     jjCheckNAdd(10);
@@ -1613,6 +1520,4 @@ int kind = 0x7fffffff;
-                  if ((0x3ff000000000000L & l) == 0L) {
-                    break;
-                }
-                  if (kind > 20) {
-                    kind = 20;
-                }
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 20)
+                     kind = 20;
@@ -1622,6 +1527,4 @@ int kind = 0x7fffffff;
-                  if ((0x3ff600000000000L & l) == 0L) {
-                    break;
-                }
-                  if (kind > 79) {
-                    kind = 79;
-                }
+                  if ((0x3ff600000000000L & l) == 0L)
+                     break;
+                  if (kind > 79)
+                     kind = 79;
@@ -1636 +1539 @@ int kind = 0x7fffffff;
-         final long l = 1L << (curChar & 077);
+         long l = 1L << (curChar & 077);
@@ -1643,6 +1546,4 @@ int kind = 0x7fffffff;
-                  if ((0x7fffffe87fffffeL & l) == 0L) {
-                    break;
-                }
-                  if (kind > 79) {
-                    kind = 79;
-                }
+                  if ((0x7fffffe87fffffeL & l) == 0L)
+                     break;
+                  if (kind > 79)
+                     kind = 79;
@@ -1663,5 +1564,5 @@ int kind = 0x7fffffff;
-         final int hiByte = curChar >> 8;
-         final int i1 = hiByte >> 6;
-         final long l1 = 1L << (hiByte & 077);
-         final int i2 = (curChar & 0xff) >> 6;
-         final long l2 = 1L << (curChar & 077);
+         int hiByte = (int)(curChar >> 8);
+         int i1 = hiByte >> 6;
+         long l1 = 1L << (hiByte & 077);
+         int i2 = (curChar & 0xff) >> 6;
+         long l2 = 1L << (curChar & 077);
@@ -1673,6 +1574,4 @@ int kind = 0x7fffffff;
-                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2)) {
-                    break;
-                }
-                  if (kind > 79) {
-                    kind = 79;
-                }
+                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
+                     break;
+                  if (kind > 79)
+                     kind = 79;
@@ -1682,3 +1581,2 @@ int kind = 0x7fffffff;
-                  if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
-                    jjAddStates(0, 1);
-                }
+                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
+                     jjAddStates(0, 1);
@@ -1687,3 +1585,2 @@ int kind = 0x7fffffff;
-                  if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
-                    jjAddStates(2, 3);
-                }
+                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
+                     jjAddStates(2, 3);
@@ -1692,6 +1589,4 @@ int kind = 0x7fffffff;
-                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2)) {
-                    break;
-                }
-                  if (kind > 79) {
-                    kind = 79;
-                }
+                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
+                     break;
+                  if (kind > 79)
+                     kind = 79;
@@ -1711,3 +1606,2 @@ int kind = 0x7fffffff;
-      if ((i = jjnewStateCnt) == (startsAt = 13 - (jjnewStateCnt = startsAt))) {
-        return curPos;
-    }
+      if ((i = jjnewStateCnt) == (startsAt = 13 - (jjnewStateCnt = startsAt)))
+         return curPos;
@@ -1715 +1609 @@ int kind = 0x7fffffff;
-      catch(final java.io.IOException e) { return curPos; }
+      catch(java.io.IOException e) { return curPos; }
@@ -1719 +1613 @@ static final int[] jjnextStates = {
-   1, 2, 4, 5,
+   1, 2, 4, 5, 
@@ -1721 +1615 @@ static final int[] jjnextStates = {
-private static boolean jjCanMove_0(final int hiByte, final int i1, final int i2, final long l1, final long l2)
+private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
@@ -1726,3 +1620,3 @@ private static boolean jjCanMove_0(final int hiByte, final int i1, final int i2,
-         return (jjbitVec2[i2] & l2) != 0L;
-      default :
-         if ((jjbitVec0[i1] & l1) != 0L) {
+         return ((jjbitVec2[i2] & l2) != 0L);
+      default : 
+         if ((jjbitVec0[i1] & l1) != 0L)
@@ -1730 +1623,0 @@ private static boolean jjCanMove_0(final int hiByte, final int i1, final int i2,
-        }
@@ -1734 +1627 @@ private static boolean jjCanMove_0(final int hiByte, final int i1, final int i2,
-private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2, final long l1, final long l2)
+private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
@@ -1739 +1632 @@ private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2,
-         return (jjbitVec4[i2] & l2) != 0L;
+         return ((jjbitVec4[i2] & l2) != 0L);
@@ -1741 +1634 @@ private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2,
-         return (jjbitVec5[i2] & l2) != 0L;
+         return ((jjbitVec5[i2] & l2) != 0L);
@@ -1743 +1636 @@ private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2,
-         return (jjbitVec6[i2] & l2) != 0L;
+         return ((jjbitVec6[i2] & l2) != 0L);
@@ -1745 +1638 @@ private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2,
-         return (jjbitVec7[i2] & l2) != 0L;
+         return ((jjbitVec7[i2] & l2) != 0L);
@@ -1747 +1640 @@ private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2,
-         return (jjbitVec8[i2] & l2) != 0L;
+         return ((jjbitVec8[i2] & l2) != 0L);
@@ -1749 +1642 @@ private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2,
-         return (jjbitVec9[i2] & l2) != 0L;
+         return ((jjbitVec9[i2] & l2) != 0L);
@@ -1751 +1644 @@ private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2,
-         return (jjbitVec10[i2] & l2) != 0L;
+         return ((jjbitVec10[i2] & l2) != 0L);
@@ -1753 +1646 @@ private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2,
-         return (jjbitVec11[i2] & l2) != 0L;
+         return ((jjbitVec11[i2] & l2) != 0L);
@@ -1755 +1648 @@ private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2,
-         return (jjbitVec12[i2] & l2) != 0L;
+         return ((jjbitVec12[i2] & l2) != 0L);
@@ -1757 +1650 @@ private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2,
-         return (jjbitVec13[i2] & l2) != 0L;
+         return ((jjbitVec13[i2] & l2) != 0L);
@@ -1759 +1652 @@ private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2,
-         return (jjbitVec14[i2] & l2) != 0L;
+         return ((jjbitVec14[i2] & l2) != 0L);
@@ -1761 +1654 @@ private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2,
-         return (jjbitVec15[i2] & l2) != 0L;
+         return ((jjbitVec15[i2] & l2) != 0L);
@@ -1763 +1656 @@ private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2,
-         return (jjbitVec16[i2] & l2) != 0L;
+         return ((jjbitVec16[i2] & l2) != 0L);
@@ -1765 +1658 @@ private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2,
-         return (jjbitVec17[i2] & l2) != 0L;
+         return ((jjbitVec17[i2] & l2) != 0L);
@@ -1767 +1660 @@ private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2,
-         return (jjbitVec18[i2] & l2) != 0L;
+         return ((jjbitVec18[i2] & l2) != 0L);
@@ -1769 +1662 @@ private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2,
-         return (jjbitVec19[i2] & l2) != 0L;
+         return ((jjbitVec19[i2] & l2) != 0L);
@@ -1771 +1664 @@ private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2,
-         return (jjbitVec20[i2] & l2) != 0L;
+         return ((jjbitVec20[i2] & l2) != 0L);
@@ -1773 +1666 @@ private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2,
-         return (jjbitVec21[i2] & l2) != 0L;
+         return ((jjbitVec21[i2] & l2) != 0L);
@@ -1775 +1668 @@ private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2,
-         return (jjbitVec22[i2] & l2) != 0L;
+         return ((jjbitVec22[i2] & l2) != 0L);
@@ -1777 +1670 @@ private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2,
-         return (jjbitVec23[i2] & l2) != 0L;
+         return ((jjbitVec23[i2] & l2) != 0L);
@@ -1779 +1672 @@ private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2,
-         return (jjbitVec24[i2] & l2) != 0L;
+         return ((jjbitVec24[i2] & l2) != 0L);
@@ -1781 +1674 @@ private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2,
-         return (jjbitVec25[i2] & l2) != 0L;
+         return ((jjbitVec25[i2] & l2) != 0L);
@@ -1783,3 +1676,3 @@ private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2,
-         return (jjbitVec26[i2] & l2) != 0L;
-      default :
-         if ((jjbitVec3[i1] & l1) != 0L) {
+         return ((jjbitVec26[i2] & l2) != 0L);
+      default : 
+         if ((jjbitVec3[i1] & l1) != 0L)
@@ -1787 +1679,0 @@ private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2,
-        }
@@ -1791 +1683 @@ private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2,
-private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2, final long l1, final long l2)
+private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
@@ -1796 +1688 @@ private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2,
-         return (jjbitVec27[i2] & l2) != 0L;
+         return ((jjbitVec27[i2] & l2) != 0L);
@@ -1798 +1690 @@ private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2,
-         return (jjbitVec5[i2] & l2) != 0L;
+         return ((jjbitVec5[i2] & l2) != 0L);
@@ -1800 +1692 @@ private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2,
-         return (jjbitVec28[i2] & l2) != 0L;
+         return ((jjbitVec28[i2] & l2) != 0L);
@@ -1802 +1694 @@ private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2,
-         return (jjbitVec29[i2] & l2) != 0L;
+         return ((jjbitVec29[i2] & l2) != 0L);
@@ -1804 +1696 @@ private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2,
-         return (jjbitVec30[i2] & l2) != 0L;
+         return ((jjbitVec30[i2] & l2) != 0L);
@@ -1806 +1698 @@ private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2,
-         return (jjbitVec31[i2] & l2) != 0L;
+         return ((jjbitVec31[i2] & l2) != 0L);
@@ -1808 +1700 @@ private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2,
-         return (jjbitVec32[i2] & l2) != 0L;
+         return ((jjbitVec32[i2] & l2) != 0L);
@@ -1810 +1702 @@ private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2,
-         return (jjbitVec33[i2] & l2) != 0L;
+         return ((jjbitVec33[i2] & l2) != 0L);
@@ -1812 +1704 @@ private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2,
-         return (jjbitVec34[i2] & l2) != 0L;
+         return ((jjbitVec34[i2] & l2) != 0L);
@@ -1814 +1706 @@ private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2,
-         return (jjbitVec35[i2] & l2) != 0L;
+         return ((jjbitVec35[i2] & l2) != 0L);
@@ -1816 +1708 @@ private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2,
-         return (jjbitVec36[i2] & l2) != 0L;
+         return ((jjbitVec36[i2] & l2) != 0L);
@@ -1818 +1710 @@ private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2,
-         return (jjbitVec37[i2] & l2) != 0L;
+         return ((jjbitVec37[i2] & l2) != 0L);
@@ -1820 +1712 @@ private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2,
-         return (jjbitVec38[i2] & l2) != 0L;
+         return ((jjbitVec38[i2] & l2) != 0L);
@@ -1822 +1714 @@ private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2,
-         return (jjbitVec39[i2] & l2) != 0L;
+         return ((jjbitVec39[i2] & l2) != 0L);
@@ -1824 +1716 @@ private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2,
-         return (jjbitVec18[i2] & l2) != 0L;
+         return ((jjbitVec18[i2] & l2) != 0L);
@@ -1826 +1718 @@ private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2,
-         return (jjbitVec19[i2] & l2) != 0L;
+         return ((jjbitVec19[i2] & l2) != 0L);
@@ -1828 +1720 @@ private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2,
-         return (jjbitVec20[i2] & l2) != 0L;
+         return ((jjbitVec20[i2] & l2) != 0L);
@@ -1830 +1722 @@ private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2,
-         return (jjbitVec21[i2] & l2) != 0L;
+         return ((jjbitVec21[i2] & l2) != 0L);
@@ -1832 +1724 @@ private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2,
-         return (jjbitVec40[i2] & l2) != 0L;
+         return ((jjbitVec40[i2] & l2) != 0L);
@@ -1834 +1726 @@ private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2,
-         return (jjbitVec22[i2] & l2) != 0L;
+         return ((jjbitVec22[i2] & l2) != 0L);
@@ -1836 +1728 @@ private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2,
-         return (jjbitVec41[i2] & l2) != 0L;
+         return ((jjbitVec41[i2] & l2) != 0L);
@@ -1838 +1730 @@ private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2,
-         return (jjbitVec24[i2] & l2) != 0L;
+         return ((jjbitVec24[i2] & l2) != 0L);
@@ -1840 +1732 @@ private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2,
-         return (jjbitVec25[i2] & l2) != 0L;
+         return ((jjbitVec25[i2] & l2) != 0L);
@@ -1842,3 +1734,3 @@ private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2,
-         return (jjbitVec26[i2] & l2) != 0L;
-      default :
-         if ((jjbitVec3[i1] & l1) != 0L) {
+         return ((jjbitVec26[i2] & l2) != 0L);
+      default : 
+         if ((jjbitVec3[i1] & l1) != 0L)
@@ -1846 +1737,0 @@ private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2,
-        }
@@ -1851,20 +1742,20 @@ public static final String[] jjstrLiteralImages = {
-"", null, null, null, null, null, "\57", "\57\57", "\174", "\53", "\55",
-"\75", "\41\75", "\74", "\74\75", "\76", "\76\75", "\44", null, null, null, null,
-null, null, null, null, null, "\157\162", "\141\156\144", "\155\157\144",
-"\144\151\166", "\156\157\144\145", "\164\145\170\164", "\143\157\155\155\145\156\164",
-"\160\162\157\143\145\163\163\151\156\147\55\151\156\163\164\162\165\143\164\151\157\156", "\163\145\154\146\72\72", "\143\150\151\154\144\72\72",
-"\160\141\162\145\156\164\72\72", "\141\156\143\145\163\164\157\162\72\72",
-"\141\164\164\162\151\142\165\164\145\72\72", "\156\141\155\145\163\160\141\143\145\72\72",
-"\160\162\145\143\145\144\151\156\147\72\72", "\146\157\154\154\157\167\151\156\147\72\72",
-"\144\145\163\143\145\156\144\141\156\164\72\72", "\141\156\143\145\163\164\157\162\55\157\162\55\163\145\154\146\72\72",
-"\146\157\154\154\157\167\151\156\147\55\163\151\142\154\151\156\147\72\72", "\160\162\145\143\145\144\151\156\147\55\163\151\142\154\151\156\147\72\72",
-"\144\145\163\143\145\156\144\141\156\164\55\157\162\55\163\145\154\146\72\72", "\154\141\163\164", "\160\157\163\151\164\151\157\156",
-"\143\157\165\156\164", "\151\144", "\153\145\171", "\154\157\143\141\154\55\156\141\155\145",
-"\156\141\155\145\163\160\141\143\145\55\165\162\151", "\156\141\155\145", "\163\164\162\151\156\147", "\143\157\156\143\141\164",
-"\163\164\141\162\164\163\55\167\151\164\150", "\145\156\144\163\55\167\151\164\150", "\143\157\156\164\141\151\156\163",
-"\163\165\142\163\164\162\151\156\147\55\142\145\146\157\162\145", "\163\165\142\163\164\162\151\156\147\55\141\146\164\145\162",
-"\163\165\142\163\164\162\151\156\147", "\163\164\162\151\156\147\55\154\145\156\147\164\150",
-"\156\157\162\155\141\154\151\172\145\55\163\160\141\143\145", "\164\162\141\156\163\154\141\164\145", "\142\157\157\154\145\141\156",
-"\156\157\164", "\164\162\165\145", "\146\141\154\163\145", "\156\165\154\154",
-"\154\141\156\147", "\156\165\155\142\145\162", "\163\165\155", "\146\154\157\157\162",
-"\143\145\151\154\151\156\147", "\162\157\165\156\144", "\146\157\162\155\141\164\55\156\165\155\142\145\162",
+"", null, null, null, null, null, "\57", "\57\57", "\174", "\53", "\55", 
+"\75", "\41\75", "\74", "\74\75", "\76", "\76\75", "\44", null, null, null, null, 
+null, null, null, null, null, "\157\162", "\141\156\144", "\155\157\144", 
+"\144\151\166", "\156\157\144\145", "\164\145\170\164", "\143\157\155\155\145\156\164", 
+"\160\162\157\143\145\163\163\151\156\147\55\151\156\163\164\162\165\143\164\151\157\156", "\163\145\154\146\72\72", "\143\150\151\154\144\72\72", 
+"\160\141\162\145\156\164\72\72", "\141\156\143\145\163\164\157\162\72\72", 
+"\141\164\164\162\151\142\165\164\145\72\72", "\156\141\155\145\163\160\141\143\145\72\72", 
+"\160\162\145\143\145\144\151\156\147\72\72", "\146\157\154\154\157\167\151\156\147\72\72", 
+"\144\145\163\143\145\156\144\141\156\164\72\72", "\141\156\143\145\163\164\157\162\55\157\162\55\163\145\154\146\72\72", 
+"\146\157\154\154\157\167\151\156\147\55\163\151\142\154\151\156\147\72\72", "\160\162\145\143\145\144\151\156\147\55\163\151\142\154\151\156\147\72\72", 
+"\144\145\163\143\145\156\144\141\156\164\55\157\162\55\163\145\154\146\72\72", "\154\141\163\164", "\160\157\163\151\164\151\157\156", 
+"\143\157\165\156\164", "\151\144", "\153\145\171", "\154\157\143\141\154\55\156\141\155\145", 
+"\156\141\155\145\163\160\141\143\145\55\165\162\151", "\156\141\155\145", "\163\164\162\151\156\147", "\143\157\156\143\141\164", 
+"\163\164\141\162\164\163\55\167\151\164\150", "\145\156\144\163\55\167\151\164\150", "\143\157\156\164\141\151\156\163", 
+"\163\165\142\163\164\162\151\156\147\55\142\145\146\157\162\145", "\163\165\142\163\164\162\151\156\147\55\141\146\164\145\162", 
+"\163\165\142\163\164\162\151\156\147", "\163\164\162\151\156\147\55\154\145\156\147\164\150", 
+"\156\157\162\155\141\154\151\172\145\55\163\160\141\143\145", "\164\162\141\156\163\154\141\164\145", "\142\157\157\154\145\141\156", 
+"\156\157\164", "\164\162\165\145", "\146\141\154\163\145", "\156\165\154\154", 
+"\154\141\156\147", "\156\165\155\142\145\162", "\163\165\155", "\146\154\157\157\162", 
+"\143\145\151\154\151\156\147", "\162\157\165\156\144", "\146\157\162\155\141\164\55\156\165\155\142\145\162", 
@@ -1873 +1764 @@ public static final String[] lexStateNames = {
-   "DEFAULT",
+   "DEFAULT", 
@@ -1876 +1767 @@ static final long[] jjtoToken = {
-   0xfffffffff817ffc1L, 0x3ffffffL,
+   0xfffffffff817ffc1L, 0x3ffffffL, 
@@ -1879 +1770 @@ static final long[] jjtoSkip = {
-   0x3eL, 0x0L,
+   0x3eL, 0x0L, 
@@ -1885 +1776 @@ protected char curChar;
-public XPathParserTokenManager(final SimpleCharStream stream)
+public XPathParserTokenManager(SimpleCharStream stream)
@@ -1887,3 +1778,2 @@ public XPathParserTokenManager(final SimpleCharStream stream)
-   if (SimpleCharStream.staticFlag) {
-    throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
-}
+   if (SimpleCharStream.staticFlag)
+      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
@@ -1892 +1782 @@ public XPathParserTokenManager(final SimpleCharStream stream)
-public XPathParserTokenManager(final SimpleCharStream stream, final int lexState)
+public XPathParserTokenManager(SimpleCharStream stream, int lexState)
@@ -1897 +1787 @@ public XPathParserTokenManager(final SimpleCharStream stream, final int lexState
-public void ReInit(final SimpleCharStream stream)
+public void ReInit(SimpleCharStream stream)
@@ -1904 +1794 @@ public void ReInit(final SimpleCharStream stream)
-private void ReInitRounds()
+private final void ReInitRounds()
@@ -1908,3 +1798,2 @@ private void ReInitRounds()
-   for (i = 13; i-- > 0;) {
-    jjrounds[i] = 0x80000000;
-}
+   for (i = 13; i-- > 0;)
+      jjrounds[i] = 0x80000000;
@@ -1912 +1801 @@ private void ReInitRounds()
-public void ReInit(final SimpleCharStream stream, final int lexState)
+public void ReInit(SimpleCharStream stream, int lexState)
@@ -1917 +1806 @@ public void ReInit(final SimpleCharStream stream, final int lexState)
-public void SwitchTo(final int lexState)
+public void SwitchTo(int lexState)
@@ -1919,5 +1808,4 @@ public void SwitchTo(final int lexState)
-   if (lexState >= 1 || lexState < 0) {
-    throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
-} else {
-    curLexState = lexState;
-}
+   if (lexState >= 1 || lexState < 0)
+      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
+   else
+      curLexState = lexState;
@@ -1928 +1816 @@ protected Token jjFillToken()
-   final Token t = Token.newToken(jjmatchedKind);
+   Token t = Token.newToken(jjmatchedKind);
@@ -1930,2 +1818,2 @@ protected Token jjFillToken()
-   final String im = jjstrLiteralImages[jjmatchedKind];
-   t.image = im == null ? input_stream.GetImage() : im;
+   String im = jjstrLiteralImages[jjmatchedKind];
+   t.image = (im == null) ? input_stream.GetImage() : im;
@@ -1946 +1834 @@ int jjmatchedKind;
-public Token getNextToken()
+public Token getNextToken() 
@@ -1948,2 +1836,2 @@ public Token getNextToken()
-  final int kind;
-  final Token specialToken = null;
+  int kind;
+  Token specialToken = null;
@@ -1955,3 +1843,3 @@ public Token getNextToken()
-  {
-   try
-   {
+  {   
+   try   
+   {     
@@ -1959,3 +1847,3 @@ public Token getNextToken()
-   }
-   catch(final java.io.IOException e)
-   {
+   }     
+   catch(java.io.IOException e)
+   {        
@@ -1968,3 +1856,2 @@ public Token getNextToken()
-      while (curChar <= 32 && (0x100003600L & 1L << curChar) != 0L) {
-        curChar = input_stream.BeginToken();
-    }
+      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
+         curChar = input_stream.BeginToken();
@@ -1972 +1859 @@ public Token getNextToken()
-   catch (final java.io.IOException e1) { continue EOFLoop; }
+   catch (java.io.IOException e1) { continue EOFLoop; }
@@ -1978,4 +1865,3 @@ public Token getNextToken()
-      if (jjmatchedPos + 1 < curPos) {
-        input_stream.backup(curPos - jjmatchedPos - 1);
-    }
-      if ((jjtoToken[jjmatchedKind >> 6] & 1L << (jjmatchedKind & 077)) != 0L)
+      if (jjmatchedPos + 1 < curPos)
+         input_stream.backup(curPos - jjmatchedPos - 1);
+      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
@@ -1996 +1882 @@ public Token getNextToken()
-   catch (final java.io.IOException e1) {
+   catch (java.io.IOException e1) {
@@ -2002,3 +1888,3 @@ public Token getNextToken()
-      } else {
-        error_column++;
-    }
+      }
+      else
+         error_column++;
diff --git a/src/main/java/org/apache/commons/jxpath/servlet/HttpSessionAndServletContext.java b/src/main/java/org/apache/commons/jxpath/servlet/HttpSessionAndServletContext.java
index 11bec18e..f5f78744 100644
--- a/src/main/java/org/apache/commons/jxpath/servlet/HttpSessionAndServletContext.java
+++ b/src/main/java/org/apache/commons/jxpath/servlet/HttpSessionAndServletContext.java
@@ -27,2 +27,2 @@ public class HttpSessionAndServletContext {
-    private final HttpSession session;
-    private final ServletContext context;
+    private HttpSession session;
+    private ServletContext context;
@@ -35,2 +35,2 @@ public class HttpSessionAndServletContext {
-    public HttpSessionAndServletContext(final HttpSession session,
-            final ServletContext context) {
+    public HttpSessionAndServletContext(HttpSession session,
+            ServletContext context) {
diff --git a/src/main/java/org/apache/commons/jxpath/servlet/HttpSessionHandler.java b/src/main/java/org/apache/commons/jxpath/servlet/HttpSessionHandler.java
index 3f89f640..bcb3ce04 100644
--- a/src/main/java/org/apache/commons/jxpath/servlet/HttpSessionHandler.java
+++ b/src/main/java/org/apache/commons/jxpath/servlet/HttpSessionHandler.java
@@ -31,3 +31,2 @@ public class HttpSessionHandler extends ServletContextHandler {
-    @Override
-    protected void collectPropertyNames(final HashSet set, final Object bean) {
-        final HttpSessionAndServletContext handle =
+    protected void collectPropertyNames(HashSet set, Object bean) {
+        HttpSessionAndServletContext handle =
@@ -36 +35 @@ public class HttpSessionHandler extends ServletContextHandler {
-        final HttpSession session = handle.getSession();
+        HttpSession session = handle.getSession();
@@ -38 +37 @@ public class HttpSessionHandler extends ServletContextHandler {
-            final Enumeration e = session.getAttributeNames();
+            Enumeration e = session.getAttributeNames();
@@ -45,3 +44,2 @@ public class HttpSessionHandler extends ServletContextHandler {
-    @Override
-    public Object getProperty(final Object bean, final String property) {
-        final HttpSessionAndServletContext handle =
+    public Object getProperty(Object bean, String property) {
+        HttpSessionAndServletContext handle =
@@ -49 +47 @@ public class HttpSessionHandler extends ServletContextHandler {
-        final HttpSession session = handle.getSession();
+        HttpSession session = handle.getSession();
@@ -51 +49 @@ public class HttpSessionHandler extends ServletContextHandler {
-            final Object object = session.getAttribute(property);
+            Object object = session.getAttribute(property);
@@ -59,3 +57,2 @@ public class HttpSessionHandler extends ServletContextHandler {
-    @Override
-    public void setProperty(final Object bean, final String property, final Object value) {
-        final HttpSessionAndServletContext handle =
+    public void setProperty(Object bean, String property, Object value) {
+        HttpSessionAndServletContext handle =
@@ -63 +60 @@ public class HttpSessionHandler extends ServletContextHandler {
-        final HttpSession session = handle.getSession();
+        HttpSession session = handle.getSession();
diff --git a/src/main/java/org/apache/commons/jxpath/servlet/JXPathServletContexts.java b/src/main/java/org/apache/commons/jxpath/servlet/JXPathServletContexts.java
index e699d9ee..28cc3e58 100644
--- a/src/main/java/org/apache/commons/jxpath/servlet/JXPathServletContexts.java
+++ b/src/main/java/org/apache/commons/jxpath/servlet/JXPathServletContexts.java
@@ -94 +94 @@ public final class JXPathServletContexts {
-    public static JXPathContext getPageContext(final PageContext pageContext) {
+    public static JXPathContext getPageContext(PageContext pageContext) {
@@ -98 +98 @@ public final class JXPathServletContexts {
-            final JXPathContext parentContext =
+            JXPathContext parentContext =
@@ -119,2 +119,2 @@ public final class JXPathServletContexts {
-    public static JXPathContext getRequestContext(final ServletRequest request,
-            final ServletContext servletContext) {
+    public static JXPathContext getRequestContext(ServletRequest request,
+            ServletContext servletContext) {
@@ -127 +127 @@ public final class JXPathServletContexts {
-            final ServletRequestAndContext handle =
+            ServletRequestAndContext handle =
@@ -136 +136 @@ public final class JXPathServletContexts {
-            final HttpSession session =
+            HttpSession session =
@@ -145 +145 @@ public final class JXPathServletContexts {
-        final ServletRequestAndContext handle =
+        ServletRequestAndContext handle =
@@ -161,2 +161,2 @@ public final class JXPathServletContexts {
-    public static JXPathContext getSessionContext(final HttpSession session,
-            final ServletContext servletContext) {
+    public static JXPathContext getSessionContext(HttpSession session,
+            ServletContext servletContext) {
@@ -166,2 +166,2 @@ public final class JXPathServletContexts {
-            final JXPathContext parentContext = getApplicationContext(servletContext);
-            final HttpSessionAndServletContext handle =
+            JXPathContext parentContext = getApplicationContext(servletContext);
+            HttpSessionAndServletContext handle =
@@ -184 +184 @@ public final class JXPathServletContexts {
-            final ServletContext servletContext) {
+            ServletContext servletContext) {
diff --git a/src/main/java/org/apache/commons/jxpath/servlet/KeywordVariables.java b/src/main/java/org/apache/commons/jxpath/servlet/KeywordVariables.java
index 53b562d3..57de7f01 100644
--- a/src/main/java/org/apache/commons/jxpath/servlet/KeywordVariables.java
+++ b/src/main/java/org/apache/commons/jxpath/servlet/KeywordVariables.java
@@ -28,2 +28,2 @@ public class KeywordVariables implements Variables {
-    private final String keyword;
-    private final Object object;
+    private String keyword;
+    private Object object;
@@ -36 +36 @@ public class KeywordVariables implements Variables {
-    public KeywordVariables(final String keyword, final Object object) {
+    public KeywordVariables(String keyword, Object object) {
@@ -44,2 +44 @@ public class KeywordVariables implements Variables {
-    @Override
-    public boolean isDeclaredVariable(final String variable) {
+    public boolean isDeclaredVariable(String variable) {
@@ -49,2 +48 @@ public class KeywordVariables implements Variables {
-    @Override
-    public Object getVariable(final String variable) {
+    public Object getVariable(String variable) {
@@ -54,2 +52 @@ public class KeywordVariables implements Variables {
-    @Override
-    public void declareVariable(final String variable, final Object value) {
+    public void declareVariable(String variable, Object value) {
@@ -60,2 +57 @@ public class KeywordVariables implements Variables {
-    @Override
-    public void undeclareVariable(final String variable) {
+    public void undeclareVariable(String variable) {
diff --git a/src/main/java/org/apache/commons/jxpath/servlet/PageContextHandler.java b/src/main/java/org/apache/commons/jxpath/servlet/PageContextHandler.java
index 6a7d0c60..40308b39 100644
--- a/src/main/java/org/apache/commons/jxpath/servlet/PageContextHandler.java
+++ b/src/main/java/org/apache/commons/jxpath/servlet/PageContextHandler.java
@@ -32,3 +32,2 @@ public class PageContextHandler implements DynamicPropertyHandler {
-    @Override
-    public String[] getPropertyNames(final Object pageContext) {
-        final HashSet list = new HashSet();
+    public String[] getPropertyNames(Object pageContext) {
+        HashSet list = new HashSet();
@@ -68,2 +67 @@ public class PageContextHandler implements DynamicPropertyHandler {
-    @Override
-    public Object getProperty(final Object pageContext, final String property) {
+    public Object getProperty(Object pageContext, String property) {
@@ -73,2 +71 @@ public class PageContextHandler implements DynamicPropertyHandler {
-    @Override
-    public void setProperty(final Object pageContext, final String property, final Object value) {
+    public void setProperty(Object pageContext, String property, Object value) {
diff --git a/src/main/java/org/apache/commons/jxpath/servlet/PageScopeContext.java b/src/main/java/org/apache/commons/jxpath/servlet/PageScopeContext.java
index 7485230c..cc23bb7f 100644
--- a/src/main/java/org/apache/commons/jxpath/servlet/PageScopeContext.java
+++ b/src/main/java/org/apache/commons/jxpath/servlet/PageScopeContext.java
@@ -30 +30 @@ public class PageScopeContext {
-    private final PageContext pageContext;
+    private PageContext pageContext;
@@ -36 +36 @@ public class PageScopeContext {
-    public PageScopeContext(final PageContext pageContext) {
+    public PageScopeContext(PageContext pageContext) {
@@ -53 +53 @@ public class PageScopeContext {
-    public Object getAttribute(final String attribute) {
+    public Object getAttribute(String attribute) {
@@ -62 +62 @@ public class PageScopeContext {
-    public void setAttribute(final String attribute, final Object value) {
+    public void setAttribute(String attribute, Object value) {
diff --git a/src/main/java/org/apache/commons/jxpath/servlet/PageScopeContextHandler.java b/src/main/java/org/apache/commons/jxpath/servlet/PageScopeContextHandler.java
index 0c708cc1..0700daa7 100644
--- a/src/main/java/org/apache/commons/jxpath/servlet/PageScopeContextHandler.java
+++ b/src/main/java/org/apache/commons/jxpath/servlet/PageScopeContextHandler.java
@@ -32,4 +32,3 @@ public class PageScopeContextHandler implements DynamicPropertyHandler {
-    @Override
-    public String[] getPropertyNames(final Object pageScope) {
-        final Enumeration e = ((PageScopeContext) pageScope).getAttributeNames();
-        final ArrayList list = new ArrayList(DEFAULT_LIST_SIZE);
+    public String[] getPropertyNames(Object pageScope) {
+        Enumeration e = ((PageScopeContext) pageScope).getAttributeNames();
+        ArrayList list = new ArrayList(DEFAULT_LIST_SIZE);
@@ -42,2 +41 @@ public class PageScopeContextHandler implements DynamicPropertyHandler {
-    @Override
-    public Object getProperty(final Object pageScope, final String property) {
+    public Object getProperty(Object pageScope, String property) {
@@ -47,2 +45 @@ public class PageScopeContextHandler implements DynamicPropertyHandler {
-    @Override
-    public void setProperty(final Object pageScope, final String property, final Object value) {
+    public void setProperty(Object pageScope, String property, Object value) {
diff --git a/src/main/java/org/apache/commons/jxpath/servlet/ServletContextHandler.java b/src/main/java/org/apache/commons/jxpath/servlet/ServletContextHandler.java
index 45f98160..592298e7 100644
--- a/src/main/java/org/apache/commons/jxpath/servlet/ServletContextHandler.java
+++ b/src/main/java/org/apache/commons/jxpath/servlet/ServletContextHandler.java
@@ -20,0 +21,2 @@ import java.util.HashSet;
+import java.util.Set;
+
@@ -33,3 +35,2 @@ public class ServletContextHandler implements DynamicPropertyHandler {
-    @Override
-    public String[] getPropertyNames(final Object context) {
-        final HashSet list = new HashSet(DEFAULT_PROPERTY_COUNT);
+    public String[] getPropertyNames(Object context) {
+        HashSet list = new HashSet(DEFAULT_PROPERTY_COUNT);
@@ -45 +46 @@ public class ServletContextHandler implements DynamicPropertyHandler {
-    protected void collectPropertyNames(final HashSet set, Object bean) {
+    protected void collectPropertyNames(HashSet set, Object bean) {
@@ -49 +50 @@ public class ServletContextHandler implements DynamicPropertyHandler {
-        final Enumeration e = ((ServletContext) bean).getAttributeNames();
+        Enumeration e = ((ServletContext) bean).getAttributeNames();
@@ -55,2 +56 @@ public class ServletContextHandler implements DynamicPropertyHandler {
-    @Override
-    public Object getProperty(final Object context, final String property) {
+    public Object getProperty(Object context, String property) {
@@ -60,2 +60 @@ public class ServletContextHandler implements DynamicPropertyHandler {
-    @Override
-    public void setProperty(final Object context, final String property, final Object value) {
+    public void setProperty(Object context, String property, Object value) {
diff --git a/src/main/java/org/apache/commons/jxpath/servlet/ServletRequestAndContext.java b/src/main/java/org/apache/commons/jxpath/servlet/ServletRequestAndContext.java
index a0c225ba..1f6c494a 100644
--- a/src/main/java/org/apache/commons/jxpath/servlet/ServletRequestAndContext.java
+++ b/src/main/java/org/apache/commons/jxpath/servlet/ServletRequestAndContext.java
@@ -29 +29 @@ public class ServletRequestAndContext extends HttpSessionAndServletContext {
-    private final ServletRequest request;
+    private ServletRequest request;
@@ -37,2 +37,2 @@ public class ServletRequestAndContext extends HttpSessionAndServletContext {
-    public ServletRequestAndContext(final ServletRequest request,
-            final ServletContext context) {
+    public ServletRequestAndContext(ServletRequest request,
+            ServletContext context) {
@@ -43 +42,0 @@ public class ServletRequestAndContext extends HttpSessionAndServletContext {
-    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/servlet/ServletRequestHandler.java b/src/main/java/org/apache/commons/jxpath/servlet/ServletRequestHandler.java
index b67ee4f5..7890f3fc 100644
--- a/src/main/java/org/apache/commons/jxpath/servlet/ServletRequestHandler.java
+++ b/src/main/java/org/apache/commons/jxpath/servlet/ServletRequestHandler.java
@@ -30,2 +30 @@ public class ServletRequestHandler extends HttpSessionHandler {
-    @Override
-    protected void collectPropertyNames(final HashSet set, final Object bean) {
+    protected void collectPropertyNames(HashSet set, Object bean) {
@@ -33,2 +32,2 @@ public class ServletRequestHandler extends HttpSessionHandler {
-        final ServletRequestAndContext handle = (ServletRequestAndContext) bean;
-        final ServletRequest servletRequest = handle.getServletRequest();
+        ServletRequestAndContext handle = (ServletRequestAndContext) bean;
+        ServletRequest servletRequest = handle.getServletRequest();
@@ -45,5 +44,4 @@ public class ServletRequestHandler extends HttpSessionHandler {
-    @Override
-    public Object getProperty(final Object bean, final String property) {
-        final ServletRequestAndContext handle = (ServletRequestAndContext) bean;
-        final ServletRequest servletRequest = handle.getServletRequest();
-        final String[] strings = servletRequest.getParameterValues(property);
+    public Object getProperty(Object bean, String property) {
+        ServletRequestAndContext handle = (ServletRequestAndContext) bean;
+        ServletRequest servletRequest = handle.getServletRequest();
+        String[] strings = servletRequest.getParameterValues(property);
@@ -61 +59 @@ public class ServletRequestHandler extends HttpSessionHandler {
-        final Object object = servletRequest.getAttribute(property);
+        Object object = servletRequest.getAttribute(property);
@@ -69,2 +67 @@ public class ServletRequestHandler extends HttpSessionHandler {
-    @Override
-    public void setProperty(final Object request, final String property, final Object value) {
+    public void setProperty(Object request, String property, Object value) {
diff --git a/src/main/java/org/apache/commons/jxpath/util/BasicTypeConverter.java b/src/main/java/org/apache/commons/jxpath/util/BasicTypeConverter.java
index a5fffe72..833a8451 100644
--- a/src/main/java/org/apache/commons/jxpath/util/BasicTypeConverter.java
+++ b/src/main/java/org/apache/commons/jxpath/util/BasicTypeConverter.java
@@ -51,2 +51 @@ public class BasicTypeConverter implements TypeConverter {
-    @Override
-    public boolean canConvert(final Object object, final Class toType) {
+    public boolean canConvert(Object object, final Class toType) {
@@ -57 +56 @@ public class BasicTypeConverter implements TypeConverter {
-        final Class fromType = object.getClass();
+        Class fromType = object.getClass();
@@ -90,2 +89,2 @@ public class BasicTypeConverter implements TypeConverter {
-                final Class cType = useType.getComponentType();
-                final int length = Array.getLength(object);
+                Class cType = useType.getComponentType();
+                int length = Array.getLength(object);
@@ -93 +92 @@ public class BasicTypeConverter implements TypeConverter {
-                    final Object value = Array.get(object, i);
+                    Object value = Array.get(object, i);
@@ -104 +103 @@ public class BasicTypeConverter implements TypeConverter {
-                final Object value = Array.get(object, 0);
+                Object value = Array.get(object, 0);
@@ -112,2 +111,2 @@ public class BasicTypeConverter implements TypeConverter {
-                final Class cType = useType.getComponentType();
-                final Iterator it = ((Collection) object).iterator();
+                Class cType = useType.getComponentType();
+                Iterator it = ((Collection) object).iterator();
@@ -115 +114 @@ public class BasicTypeConverter implements TypeConverter {
-                    final Object value = it.next();
+                    Object value = it.next();
@@ -131 +130 @@ public class BasicTypeConverter implements TypeConverter {
-                    final Iterator it = ((Collection) object).iterator();
+                    Iterator it = ((Collection) object).iterator();
@@ -155,2 +154 @@ public class BasicTypeConverter implements TypeConverter {
-    @Override
-    public Object convert(final Object object, final Class toType) {
+    public Object convert(Object object, final Class toType) {
@@ -171 +169 @@ public class BasicTypeConverter implements TypeConverter {
-        final Class fromType = object.getClass();
+        Class fromType = object.getClass();
@@ -178 +176 @@ public class BasicTypeConverter implements TypeConverter {
-            final int length = Array.getLength(object);
+            int length = Array.getLength(object);
@@ -180 +178 @@ public class BasicTypeConverter implements TypeConverter {
-                final Class cType = useType.getComponentType();
+                Class cType = useType.getComponentType();
@@ -182 +180 @@ public class BasicTypeConverter implements TypeConverter {
-                final Object array = Array.newInstance(cType, length);
+                Object array = Array.newInstance(cType, length);
@@ -184 +182 @@ public class BasicTypeConverter implements TypeConverter {
-                    final Object value = Array.get(object, i);
+                    Object value = Array.get(object, i);
@@ -190 +188 @@ public class BasicTypeConverter implements TypeConverter {
-                final Collection collection = allocateCollection(useType);
+                Collection collection = allocateCollection(useType);
@@ -197 +195 @@ public class BasicTypeConverter implements TypeConverter {
-                final Object value = Array.get(object, 0);
+                Object value = Array.get(object, 0);
@@ -203 +201 @@ public class BasicTypeConverter implements TypeConverter {
-            final int length = ((Collection) object).size();
+            int length = ((Collection) object).size();
@@ -205,3 +203,3 @@ public class BasicTypeConverter implements TypeConverter {
-                final Class cType = useType.getComponentType();
-                final Object array = Array.newInstance(cType, length);
-                final Iterator it = ((Collection) object).iterator();
+                Class cType = useType.getComponentType();
+                Object array = Array.newInstance(cType, length);
+                Iterator it = ((Collection) object).iterator();
@@ -209 +207 @@ public class BasicTypeConverter implements TypeConverter {
-                    final Object value = it.next();
+                    Object value = it.next();
@@ -215 +213 @@ public class BasicTypeConverter implements TypeConverter {
-                final Collection collection = allocateCollection(useType);
+                Collection collection = allocateCollection(useType);
@@ -225 +223 @@ public class BasicTypeConverter implements TypeConverter {
-                    final Iterator it = ((Collection) object).iterator();
+                    Iterator it = ((Collection) object).iterator();
@@ -250 +248 @@ public class BasicTypeConverter implements TypeConverter {
-                catch (final Exception e) {
+                catch (Exception e) {
@@ -256 +254 @@ public class BasicTypeConverter implements TypeConverter {
-            final double value = ((Number) object).doubleValue();
+            double value = ((Number) object).doubleValue();
@@ -265 +263 @@ public class BasicTypeConverter implements TypeConverter {
-            final Object value = convertStringToPrimitive(object, useType);
+            Object value = convertStringToPrimitive(object, useType);
@@ -271 +269 @@ public class BasicTypeConverter implements TypeConverter {
-        final Converter converter = ConvertUtils.lookup(useType);
+        Converter converter = ConvertUtils.lookup(useType);
@@ -285 +283 @@ public class BasicTypeConverter implements TypeConverter {
-    protected Object convertNullToPrimitive(final Class toType) {
+    protected Object convertNullToPrimitive(Class toType) {
@@ -290 +288 @@ public class BasicTypeConverter implements TypeConverter {
-            return Character.valueOf('\0');
+            return new Character('\0');
@@ -293 +291 @@ public class BasicTypeConverter implements TypeConverter {
-            return Byte.valueOf((byte) 0);
+            return new Byte((byte) 0);
@@ -296 +294 @@ public class BasicTypeConverter implements TypeConverter {
-            return Short.valueOf((short) 0);
+            return new Short((short) 0);
@@ -299 +297 @@ public class BasicTypeConverter implements TypeConverter {
-            return Integer.valueOf(0);
+            return new Integer(0);
@@ -302 +300 @@ public class BasicTypeConverter implements TypeConverter {
-            return Long.valueOf(0L);
+            return new Long(0L);
@@ -305 +303 @@ public class BasicTypeConverter implements TypeConverter {
-            return Float.valueOf(0.0f);
+            return new Float(0.0f);
@@ -308 +306 @@ public class BasicTypeConverter implements TypeConverter {
-            return Double.valueOf(0.0);
+            return new Double(0.0);
@@ -319 +317 @@ public class BasicTypeConverter implements TypeConverter {
-    protected Object convertStringToPrimitive(final Object object, Class toType) {
+    protected Object convertStringToPrimitive(Object object, Class toType) {
@@ -325 +323 @@ public class BasicTypeConverter implements TypeConverter {
-            return Character.valueOf(((String) object).charAt(0));
+            return new Character(((String) object).charAt(0));
@@ -328 +326 @@ public class BasicTypeConverter implements TypeConverter {
-            return Byte.valueOf((String) object);
+            return new Byte((String) object);
@@ -331 +329 @@ public class BasicTypeConverter implements TypeConverter {
-            return Short.valueOf((String) object);
+            return new Short((String) object);
@@ -334 +332 @@ public class BasicTypeConverter implements TypeConverter {
-            return Integer.valueOf((String) object);
+            return new Integer((String) object);
@@ -337 +335 @@ public class BasicTypeConverter implements TypeConverter {
-            return Long.valueOf((String) object);
+            return new Long((String) object);
@@ -340 +338 @@ public class BasicTypeConverter implements TypeConverter {
-            return Float.valueOf((String) object);
+            return new Float((String) object);
@@ -343 +341 @@ public class BasicTypeConverter implements TypeConverter {
-            return Double.valueOf((String) object);
+            return new Double((String) object);
@@ -354 +352 @@ public class BasicTypeConverter implements TypeConverter {
-    protected Number allocateNumber(Class type, final double value) {
+    protected Number allocateNumber(Class type, double value) {
@@ -357 +355 @@ public class BasicTypeConverter implements TypeConverter {
-            return Byte.valueOf((byte) value);
+            return new Byte((byte) value);
@@ -360 +358 @@ public class BasicTypeConverter implements TypeConverter {
-            return Short.valueOf((short) value);
+            return new Short((short) value);
@@ -363 +361 @@ public class BasicTypeConverter implements TypeConverter {
-            return Integer.valueOf((int) value);
+            return new Integer((int) value);
@@ -366 +364 @@ public class BasicTypeConverter implements TypeConverter {
-            return Long.valueOf((long) value);
+            return new Long((long) value);
@@ -369 +367 @@ public class BasicTypeConverter implements TypeConverter {
-            return Float.valueOf((float) value);
+            return new Float((float) value);
@@ -372 +370 @@ public class BasicTypeConverter implements TypeConverter {
-            return Double.valueOf(value);
+            return new Double(value);
@@ -380 +378 @@ public class BasicTypeConverter implements TypeConverter {
-        final String classname = type.getName();
+        String classname = type.getName();
@@ -396 +394 @@ public class BasicTypeConverter implements TypeConverter {
-            catch (final Exception e) {
+            catch (Exception e) {
@@ -408 +406 @@ public class BasicTypeConverter implements TypeConverter {
-    protected boolean canCreateCollection(final Class type) {
+    protected boolean canCreateCollection(Class type) {
@@ -410 +408 @@ public class BasicTypeConverter implements TypeConverter {
-                && (type.getModifiers() & Modifier.ABSTRACT) == 0) {
+                && ((type.getModifiers() & Modifier.ABSTRACT) == 0)) {
@@ -415 +413 @@ public class BasicTypeConverter implements TypeConverter {
-            catch (final Exception e) {
+            catch (Exception e) {
@@ -427 +425 @@ public class BasicTypeConverter implements TypeConverter {
-    protected Collection allocateCollection(final Class type) {
+    protected Collection allocateCollection(Class type) {
@@ -429 +427 @@ public class BasicTypeConverter implements TypeConverter {
-                && (type.getModifiers() & Modifier.ABSTRACT) == 0) {
+                && ((type.getModifiers() & Modifier.ABSTRACT) == 0)) {
@@ -433 +431 @@ public class BasicTypeConverter implements TypeConverter {
-            catch (final Exception ex) {
+            catch (Exception ex) {
@@ -454 +452 @@ public class BasicTypeConverter implements TypeConverter {
-    protected Collection unmodifiableCollection(final Collection collection) {
+    protected Collection unmodifiableCollection(Collection collection) {
@@ -471 +469 @@ public class BasicTypeConverter implements TypeConverter {
-        private final List values;
+        private List values;
@@ -478 +476 @@ public class BasicTypeConverter implements TypeConverter {
-        public ValueNodeSet(final List values) {
+        public ValueNodeSet(List values) {
@@ -482 +479,0 @@ public class BasicTypeConverter implements TypeConverter {
-        @Override
@@ -487 +483,0 @@ public class BasicTypeConverter implements TypeConverter {
-        @Override
@@ -492 +487,0 @@ public class BasicTypeConverter implements TypeConverter {
-        @Override
@@ -511 +506 @@ public class BasicTypeConverter implements TypeConverter {
-        private final Object bean;
+        private Object bean;
@@ -517 +512 @@ public class BasicTypeConverter implements TypeConverter {
-        public ValuePointer(final Object object) {
+        public ValuePointer(Object object) {
@@ -521 +515,0 @@ public class BasicTypeConverter implements TypeConverter {
-        @Override
@@ -526 +519,0 @@ public class BasicTypeConverter implements TypeConverter {
-        @Override
@@ -531 +523,0 @@ public class BasicTypeConverter implements TypeConverter {
-        @Override
@@ -536,2 +528 @@ public class BasicTypeConverter implements TypeConverter {
-        @Override
-        public void setValue(final Object value) {
+        public void setValue(Object value) {
@@ -541 +531,0 @@ public class BasicTypeConverter implements TypeConverter {
-        @Override
@@ -546,2 +536 @@ public class BasicTypeConverter implements TypeConverter {
-        @Override
-        public int compareTo(final Object object) {
+        public int compareTo(Object object) {
@@ -551 +539,0 @@ public class BasicTypeConverter implements TypeConverter {
-        @Override
diff --git a/src/main/java/org/apache/commons/jxpath/util/ClassLoaderUtil.java b/src/main/java/org/apache/commons/jxpath/util/ClassLoaderUtil.java
index fa1db5e6..131d2e3e 100644
--- a/src/main/java/org/apache/commons/jxpath/util/ClassLoaderUtil.java
+++ b/src/main/java/org/apache/commons/jxpath/util/ClassLoaderUtil.java
@@ -43 +43 @@ public class ClassLoaderUtil {
-    private static void addAbbreviation(final String primitive, final String abbreviation) {
+    private static void addAbbreviation(String primitive, String abbreviation) {
@@ -74 +74 @@ public class ClassLoaderUtil {
-    public static Class getClass(final ClassLoader classLoader, final String className, final boolean initialize)
+    public static Class getClass(ClassLoader classLoader, String className, boolean initialize)
@@ -78 +78 @@ public class ClassLoaderUtil {
-            final String clsName = "[" + abbreviationMap.get(className);
+            String clsName = "[" + abbreviationMap.get(className);
@@ -98 +98 @@ public class ClassLoaderUtil {
-    public static Class getClass(final ClassLoader classLoader, final String className) throws ClassNotFoundException {
+    public static Class getClass(ClassLoader classLoader, String className) throws ClassNotFoundException {
@@ -112 +112 @@ public class ClassLoaderUtil {
-    public static Class getClass(final String className) throws ClassNotFoundException {
+    public static Class getClass(String className) throws ClassNotFoundException {
@@ -127,3 +127,3 @@ public class ClassLoaderUtil {
-    public static Class getClass(final String className, final boolean initialize) throws ClassNotFoundException {
-        final ClassLoader contextCL = Thread.currentThread().getContextClassLoader();
-        final ClassLoader currentCL = ClassLoaderUtil.class.getClassLoader();
+    public static Class getClass(String className, boolean initialize) throws ClassNotFoundException {
+        ClassLoader contextCL = Thread.currentThread().getContextClassLoader();
+        ClassLoader currentCL = ClassLoaderUtil.class.getClassLoader();
@@ -134,2 +134,2 @@ public class ClassLoaderUtil {
-            catch (final ClassNotFoundException ignore) { // NOPMD
-                // ignore this exception and try the current class loader
+            catch (ClassNotFoundException e) {//NOPMD
+                // ignore this exception and try the current class loader.
@@ -152 +152 @@ public class ClassLoaderUtil {
-            final StringBuffer classNameBuffer = new StringBuffer();
+            StringBuffer classNameBuffer = new StringBuffer();
@@ -157 +157 @@ public class ClassLoaderUtil {
-            final String abbreviation = (String) abbreviationMap.get(className);
+            String abbreviation = (String) abbreviationMap.get(className);
diff --git a/src/main/java/org/apache/commons/jxpath/util/JXPath11CompatibleTypeConverter.java b/src/main/java/org/apache/commons/jxpath/util/JXPath11CompatibleTypeConverter.java
index ae049416..8f31805a 100644
--- a/src/main/java/org/apache/commons/jxpath/util/JXPath11CompatibleTypeConverter.java
+++ b/src/main/java/org/apache/commons/jxpath/util/JXPath11CompatibleTypeConverter.java
@@ -29,2 +29 @@ public class JXPath11CompatibleTypeConverter extends BasicTypeConverter {
-    @Override
-    public boolean canConvert(final Object object, final Class toType) {
+    public boolean canConvert(Object object, Class toType) {
@@ -34,2 +33 @@ public class JXPath11CompatibleTypeConverter extends BasicTypeConverter {
-    @Override
-    public Object convert(final Object object, final Class toType) {
+    public Object convert(Object object, Class toType) {
diff --git a/src/main/java/org/apache/commons/jxpath/util/KeyManagerUtils.java b/src/main/java/org/apache/commons/jxpath/util/KeyManagerUtils.java
index 4115ff48..f49bff09 100644
--- a/src/main/java/org/apache/commons/jxpath/util/KeyManagerUtils.java
+++ b/src/main/java/org/apache/commons/jxpath/util/KeyManagerUtils.java
@@ -37 +37 @@ public class KeyManagerUtils {
-        private final KeyManager delegate;
+        private KeyManager delegate;
@@ -43 +43 @@ public class KeyManagerUtils {
-        public SingleNodeExtendedKeyManager(final KeyManager delegate) {
+        public SingleNodeExtendedKeyManager(KeyManager delegate) {
@@ -47,5 +47,4 @@ public class KeyManagerUtils {
-        @Override
-        public NodeSet getNodeSetByKey(final JXPathContext context, final String key,
-                final Object value) {
-            final Pointer pointer = delegate.getPointerByKey(context, key, InfoSetUtil.stringValue(value));
-            final BasicNodeSet result = new BasicNodeSet();
+        public NodeSet getNodeSetByKey(JXPathContext context, String key,
+                Object value) {
+            Pointer pointer = delegate.getPointerByKey(context, key, InfoSetUtil.stringValue(value));
+            BasicNodeSet result = new BasicNodeSet();
@@ -56,3 +55,2 @@ public class KeyManagerUtils {
-        @Override
-        public Pointer getPointerByKey(final JXPathContext context, final String keyName,
-                final String keyValue) {
+        public Pointer getPointerByKey(JXPathContext context, String keyName,
+                String keyValue) {
@@ -70 +68 @@ public class KeyManagerUtils {
-    public static ExtendedKeyManager getExtendedKeyManager(final KeyManager keyManager) {
+    public static ExtendedKeyManager getExtendedKeyManager(KeyManager keyManager) {
diff --git a/src/main/java/org/apache/commons/jxpath/util/MethodLookupUtils.java b/src/main/java/org/apache/commons/jxpath/util/MethodLookupUtils.java
index de0dbbef..67532676 100644
--- a/src/main/java/org/apache/commons/jxpath/util/MethodLookupUtils.java
+++ b/src/main/java/org/apache/commons/jxpath/util/MethodLookupUtils.java
@@ -44,2 +44,2 @@ public class MethodLookupUtils {
-        final Class targetClass,
-        final Object[] parameters) {
+        Class targetClass,
+        Object[] parameters) {
@@ -47,2 +47,2 @@ public class MethodLookupUtils {
-        final int count = parameters == null ? 0 : parameters.length;
-        final Class[] types = new Class[count];
+        int count = parameters == null ? 0 : parameters.length;
+        Class[] types = new Class[count];
@@ -50 +50 @@ public class MethodLookupUtils {
-            final Object param = parameters[i];
+            Object param = parameters[i];
@@ -70 +70 @@ public class MethodLookupUtils {
-            catch (final NoSuchMethodException ignore) { // NOPMD
+            catch (NoSuchMethodException ex) { //NOPMD
@@ -79,3 +79,3 @@ public class MethodLookupUtils {
-        final Constructor[] constructors = targetClass.getConstructors();
-        for (final Constructor constructor2 : constructors) {
-            final int match =
+        Constructor[] constructors = targetClass.getConstructors();
+        for (int i = 0; i < constructors.length; i++) {
+            int match =
@@ -83 +83 @@ public class MethodLookupUtils {
-                    constructor2.getParameterTypes(),
+                    constructors[i].getParameterTypes(),
@@ -87 +87 @@ public class MethodLookupUtils {
-                    constructor = constructor2;
+                    constructor = constructors[i];
@@ -111,3 +111,3 @@ public class MethodLookupUtils {
-        final Class targetClass,
-        final String name,
-        final Object[] parameters) {
+        Class targetClass,
+        String name,
+        Object[] parameters) {
@@ -115,2 +115,2 @@ public class MethodLookupUtils {
-        final int count = parameters == null ? 0 : parameters.length;
-        final Class[] types = new Class[count];
+        int count = parameters == null ? 0 : parameters.length;
+        Class[] types = new Class[count];
@@ -118 +118 @@ public class MethodLookupUtils {
-            final Object param = parameters[i];
+            Object param = parameters[i];
@@ -139 +139 @@ public class MethodLookupUtils {
-            catch (final NoSuchMethodException ignore) { // NOPMD
+            catch (NoSuchMethodException ex) { //NOPMD
@@ -148,5 +148,5 @@ public class MethodLookupUtils {
-        final Method[] methods = targetClass.getMethods();
-        for (final Method method2 : methods) {
-            if (Modifier.isStatic(method2.getModifiers())
-                && method2.getName().equals(name)) {
-                final int match =
+        Method[] methods = targetClass.getMethods();
+        for (int i = 0; i < methods.length; i++) {
+            if (Modifier.isStatic(methods[i].getModifiers())
+                && methods[i].getName().equals(name)) {
+                int match =
@@ -154 +154 @@ public class MethodLookupUtils {
-                        method2.getParameterTypes(),
+                        methods[i].getParameterTypes(),
@@ -158 +158 @@ public class MethodLookupUtils {
-                        method = method2;
+                        method = methods[i];
@@ -183,2 +183,2 @@ public class MethodLookupUtils {
-        final String name,
-        final Object[] parameters) {
+        String name,
+        Object[] parameters) {
@@ -198,3 +198,3 @@ public class MethodLookupUtils {
-        final int count = parameters.length - 1;
-        final Class[] types = new Class[count];
-        final Object[] arguments = new Object[count];
+        int count = parameters.length - 1;
+        Class[] types = new Class[count];
+        Object[] arguments = new Object[count];
@@ -202 +202 @@ public class MethodLookupUtils {
-            final Object param = parameters[i + 1];
+            Object param = parameters[i + 1];
@@ -224 +224 @@ public class MethodLookupUtils {
-            catch (final NoSuchMethodException ignore) { // NOPMD
+            catch (NoSuchMethodException ex) { //NOPMD
@@ -233,5 +233,5 @@ public class MethodLookupUtils {
-        final Method[] methods = targetClass.getMethods();
-        for (final Method method2 : methods) {
-            if (!Modifier.isStatic(method2.getModifiers())
-                && method2.getName().equals(name)) {
-                final int match =
+        Method[] methods = targetClass.getMethods();
+        for (int i = 0; i < methods.length; i++) {
+            if (!Modifier.isStatic(methods[i].getModifiers())
+                && methods[i].getName().equals(name)) {
+                int match =
@@ -239 +239 @@ public class MethodLookupUtils {
-                        method2.getParameterTypes(),
+                        methods[i].getParameterTypes(),
@@ -243 +243 @@ public class MethodLookupUtils {
-                        method = method2;
+                        method = methods[i];
@@ -266,2 +266,2 @@ public class MethodLookupUtils {
-        final Class[] types,
-        final Object[] parameters) {
+        Class[] types,
+        Object[] parameters) {
@@ -273 +273 @@ public class MethodLookupUtils {
-        final int length = parameters == null ? 0 : parameters.length;
+        int length = parameters == null ? 0 : parameters.length;
@@ -279 +279 @@ public class MethodLookupUtils {
-            final int match = matchType(types[i + pi], parameters[i]);
+            int match = matchType(types[i + pi], parameters[i]);
@@ -296 +296 @@ public class MethodLookupUtils {
-    private static int matchType(final Class expected, final Object object) {
+    private static int matchType(Class expected, Object object) {
@@ -301 +301 @@ public class MethodLookupUtils {
-        final Class actual = object.getClass();
+        Class actual = object.getClass();
diff --git a/src/main/java/org/apache/commons/jxpath/util/ReverseComparator.java b/src/main/java/org/apache/commons/jxpath/util/ReverseComparator.java
index b28880a7..b6672482 100644
--- a/src/main/java/org/apache/commons/jxpath/util/ReverseComparator.java
+++ b/src/main/java/org/apache/commons/jxpath/util/ReverseComparator.java
@@ -39,2 +39 @@ public final class ReverseComparator implements Comparator, Serializable {
-    @Override
-    public int compare(final Object o1, final Object o2) {
+    public int compare(Object o1, Object o2) {
diff --git a/src/main/java/org/apache/commons/jxpath/util/TypeUtils.java b/src/main/java/org/apache/commons/jxpath/util/TypeUtils.java
index a4fd2a59..3f506896 100644
--- a/src/main/java/org/apache/commons/jxpath/util/TypeUtils.java
+++ b/src/main/java/org/apache/commons/jxpath/util/TypeUtils.java
@@ -27,2 +26,0 @@ public class TypeUtils {
-        private static final long serialVersionUID = 1L;
-
@@ -45 +43 @@ public class TypeUtils {
-    public static synchronized void setTypeConverter(final TypeConverter converter) {
+    public static synchronized void setTypeConverter(TypeConverter converter) {
@@ -64 +62 @@ public class TypeUtils {
-    public static boolean canConvert(final Object object, final Class toType) {
+    public static boolean canConvert(Object object, Class toType) {
@@ -75 +73 @@ public class TypeUtils {
-    public static Object convert(final Object object, final Class toType) {
+    public static Object convert(Object object, Class toType) {
@@ -85 +83 @@ public class TypeUtils {
-    public static Class wrapPrimitive(final Class p) {
+    public static Class wrapPrimitive(Class p) {
diff --git a/src/main/java/org/apache/commons/jxpath/util/ValueUtils.java b/src/main/java/org/apache/commons/jxpath/util/ValueUtils.java
index 843715aa..add16e4c 100644
--- a/src/main/java/org/apache/commons/jxpath/util/ValueUtils.java
+++ b/src/main/java/org/apache/commons/jxpath/util/ValueUtils.java
@@ -67 +67 @@ public class ValueUtils {
-    public static int getCollectionHint(final Class clazz) {
+    public static int getCollectionHint(Class clazz) {
@@ -102,2 +102,2 @@ public class ValueUtils {
-    public static int getIndexedPropertyLength(final Object object,
-            final IndexedPropertyDescriptor pd) {
+    public static int getIndexedPropertyLength(Object object,
+            IndexedPropertyDescriptor pd) {
@@ -108 +108 @@ public class ValueUtils {
-        final Method readMethod = pd.getIndexedReadMethod();
+        Method readMethod = pd.getIndexedReadMethod();
@@ -116 +116 @@ public class ValueUtils {
-                readMethod.invoke(object, Integer.valueOf(i));
+                readMethod.invoke(object, new Integer(i));
@@ -118 +118 @@ public class ValueUtils {
-            catch (final Throwable t) {
+            catch (Throwable t) {
@@ -155 +155 @@ public class ValueUtils {
-    public static Iterator iterate(final Object collection) {
+    public static Iterator iterate(Object collection) {
@@ -160 +160 @@ public class ValueUtils {
-            final int length = Array.getLength(collection);
+            int length = Array.getLength(collection);
@@ -164 +164 @@ public class ValueUtils {
-            final ArrayList list = new ArrayList();
+            ArrayList list = new ArrayList();
@@ -183 +183 @@ public class ValueUtils {
-    public static Object expandCollection(final Object collection, final int size) {
+    public static Object expandCollection(Object collection, int size) {
@@ -192 +192 @@ public class ValueUtils {
-            final Object bigger =
+            Object bigger =
@@ -223 +223 @@ public class ValueUtils {
-    public static Object remove(Object collection, final int index) {
+    public static Object remove(Object collection, int index) {
@@ -232,2 +232,2 @@ public class ValueUtils {
-            final int length = Array.getLength(collection);
-            final Object smaller =
+            int length = Array.getLength(collection);
+            Object smaller =
@@ -251 +251 @@ public class ValueUtils {
-            final int size = ((List) collection).size();
+            int size = ((List) collection).size();
@@ -258 +258 @@ public class ValueUtils {
-            final Iterator it = ((Collection) collection).iterator();
+            Iterator it = ((Collection) collection).iterator();
@@ -285 +285 @@ public class ValueUtils {
-    public static Object getValue(Object collection, final int index) {
+    public static Object getValue(Object collection, int index) {
@@ -307 +307 @@ public class ValueUtils {
-                final Iterator it = ((Collection) collection).iterator();
+                Iterator it = ((Collection) collection).iterator();
@@ -329 +329 @@ public class ValueUtils {
-    public static void setValue(Object collection, final int index, final Object value) {
+    public static void setValue(Object collection, int index, Object value) {
@@ -356,2 +356,2 @@ public class ValueUtils {
-    public static Object getValue(final Object bean,
-            final PropertyDescriptor propertyDescriptor) {
+    public static Object getValue(Object bean,
+            PropertyDescriptor propertyDescriptor) {
@@ -360 +360 @@ public class ValueUtils {
-            final Method method =
+            Method method =
@@ -367 +367 @@ public class ValueUtils {
-        catch (final Exception ex) {
+        catch (Exception ex) {
@@ -385,2 +385,2 @@ public class ValueUtils {
-    public static void setValue(final Object bean,
-            final PropertyDescriptor propertyDescriptor, Object value) {
+    public static void setValue(Object bean,
+            PropertyDescriptor propertyDescriptor, Object value) {
@@ -388 +388 @@ public class ValueUtils {
-            final Method method =
+            Method method =
@@ -396 +396 @@ public class ValueUtils {
-        catch (final Exception ex) {
+        catch (Exception ex) {
@@ -412 +412 @@ public class ValueUtils {
-    private static Object convert(final Object value, final Class type) {
+    private static Object convert(Object value, Class type) {
@@ -416 +416 @@ public class ValueUtils {
-        catch (final Exception ex) {
+        catch (Exception ex) {
@@ -434,2 +434,2 @@ public class ValueUtils {
-    public static Object getValue(final Object bean,
-            final PropertyDescriptor propertyDescriptor, final int index) {
+    public static Object getValue(Object bean,
+            PropertyDescriptor propertyDescriptor, int index) {
@@ -438 +438 @@ public class ValueUtils {
-                final IndexedPropertyDescriptor ipd =
+                IndexedPropertyDescriptor ipd =
@@ -440 +440 @@ public class ValueUtils {
-                final Method method = ipd.getIndexedReadMethod();
+                Method method = ipd.getIndexedReadMethod();
@@ -444 +444 @@ public class ValueUtils {
-                            Integer.valueOf(index));
+                            new Integer(index));
@@ -447,2 +447,2 @@ public class ValueUtils {
-            catch (final InvocationTargetException ex) {
-                final Throwable t = ex.getTargetException();
+            catch (InvocationTargetException ex) {
+                Throwable t = ex.getTargetException();
@@ -456 +456 @@ public class ValueUtils {
-            catch (final Throwable ex) {
+            catch (Throwable ex) {
@@ -477,2 +477,2 @@ public class ValueUtils {
-    public static void setValue(final Object bean,
-            final PropertyDescriptor propertyDescriptor, final int index, final Object value) {
+    public static void setValue(Object bean,
+            PropertyDescriptor propertyDescriptor, int index, Object value) {
@@ -481 +481 @@ public class ValueUtils {
-                final IndexedPropertyDescriptor ipd =
+                IndexedPropertyDescriptor ipd =
@@ -483 +483 @@ public class ValueUtils {
-                final Method method = ipd.getIndexedWriteMethod();
+                Method method = ipd.getIndexedWriteMethod();
@@ -487 +487 @@ public class ValueUtils {
-                            Integer.valueOf(index),
+                            new Integer(index),
@@ -492 +492 @@ public class ValueUtils {
-            catch (final Exception ex) {
+            catch (Exception ex) {
@@ -501 +501 @@ public class ValueUtils {
-        final Object collection = getValue(bean, propertyDescriptor);
+        Object collection = getValue(bean, propertyDescriptor);
@@ -533 +533 @@ public class ValueUtils {
-    public static DynamicPropertyHandler getDynamicPropertyHandler(final Class clazz) {
+    public static DynamicPropertyHandler getDynamicPropertyHandler(Class clazz) {
@@ -540 +540 @@ public class ValueUtils {
-            catch (final Exception ex) {
+            catch (Exception ex) {
@@ -566 +566 @@ public class ValueUtils {
-    public static Method getAccessibleMethod(final Method method) {
+    public static Method getAccessibleMethod(Method method) {
@@ -570 +570 @@ public class ValueUtils {
-            return null;
+            return (null);
@@ -575 +575 @@ public class ValueUtils {
-            return null;
+            return (null);
@@ -581 +581 @@ public class ValueUtils {
-            return method;
+            return (method);
@@ -584,2 +584,2 @@ public class ValueUtils {
-        final String name = method.getName();
-        final Class[] parameterTypes = method.getParameterTypes();
+        String name = method.getName();
+        Class[] parameterTypes = method.getParameterTypes();
@@ -588 +588 @@ public class ValueUtils {
-            final Method aMethod = getAccessibleMethodFromInterfaceNest(clazz,
+            Method aMethod = getAccessibleMethodFromInterfaceNest(clazz,
@@ -599 +599 @@ public class ValueUtils {
-                catch (final NoSuchMethodException ignore) { // NOPMD
+                catch (NoSuchMethodException e) { //NOPMD
@@ -618,2 +618,2 @@ public class ValueUtils {
-    private static Method getAccessibleMethodFromInterfaceNest(final Class clazz,
-            final String methodName, final Class[] parameterTypes) {
+    private static Method getAccessibleMethodFromInterfaceNest(Class clazz,
+            String methodName, Class[] parameterTypes) {
@@ -624,2 +624,2 @@ public class ValueUtils {
-        final Class[] interfaces = clazz.getInterfaces();
-        for (final Class element : interfaces) {
+        Class[] interfaces = clazz.getInterfaces();
+        for (int i = 0; i < interfaces.length; i++) {
@@ -628 +628 @@ public class ValueUtils {
-            if (!Modifier.isPublic(element.getModifiers())) {
+            if (!Modifier.isPublic(interfaces[i].getModifiers())) {
@@ -635 +635 @@ public class ValueUtils {
-                    element.getDeclaredMethod(methodName, parameterTypes);
+                    interfaces[i].getDeclaredMethod(methodName, parameterTypes);
@@ -637,2 +637,2 @@ public class ValueUtils {
-            catch (final NoSuchMethodException ignore) { // NOPMD
-                // ignore
+            catch (NoSuchMethodException e) { //NOPMD
+                //ignore
@@ -647 +647 @@ public class ValueUtils {
-                    element,
+                    interfaces[i],
@@ -656 +656 @@ public class ValueUtils {
-        return method;
+        return (method);
diff --git a/src/main/java/org/apache/commons/jxpath/xml/DOMParser.java b/src/main/java/org/apache/commons/jxpath/xml/DOMParser.java
index 1ff6979f..ff5e8682 100644
--- a/src/main/java/org/apache/commons/jxpath/xml/DOMParser.java
+++ b/src/main/java/org/apache/commons/jxpath/xml/DOMParser.java
@@ -30,2 +30 @@ public class DOMParser extends XMLParser2 {
-    @Override
-    public Object parseXML(final InputStream stream) {
+    public Object parseXML(InputStream stream) {
@@ -33 +32 @@ public class DOMParser extends XMLParser2 {
-            final DocumentBuilderFactory factory =
+            DocumentBuilderFactory factory =
@@ -45 +44 @@ public class DOMParser extends XMLParser2 {
-        catch (final Exception ex) {
+        catch (Exception ex) {
diff --git a/src/main/java/org/apache/commons/jxpath/xml/DocumentContainer.java b/src/main/java/org/apache/commons/jxpath/xml/DocumentContainer.java
index e87b7153..e3ddb743 100644
--- a/src/main/java/org/apache/commons/jxpath/xml/DocumentContainer.java
+++ b/src/main/java/org/apache/commons/jxpath/xml/DocumentContainer.java
@@ -59,2 +59,2 @@ public class DocumentContainer extends XMLParser2 implements Container {
-    private final URL xmlURL;
-    private final String model;
+    private URL xmlURL;
+    private String model;
@@ -68 +68 @@ public class DocumentContainer extends XMLParser2 implements Container {
-    public static void registerXMLParser(final String model, final XMLParser parser) {
+    public static void registerXMLParser(String model, XMLParser parser) {
@@ -78 +78 @@ public class DocumentContainer extends XMLParser2 implements Container {
-    public static void registerXMLParser(final String model, final String parserClassName) {
+    public static void registerXMLParser(String model, String parserClassName) {
@@ -89 +89 @@ public class DocumentContainer extends XMLParser2 implements Container {
-    public DocumentContainer(final URL xmlURL) {
+    public DocumentContainer(URL xmlURL) {
@@ -101 +101 @@ public class DocumentContainer extends XMLParser2 implements Container {
-    public DocumentContainer(final URL xmlURL, final String model) {
+    public DocumentContainer(URL xmlURL, String model) {
@@ -113 +112,0 @@ public class DocumentContainer extends XMLParser2 implements Container {
-    @Override
@@ -130 +129 @@ public class DocumentContainer extends XMLParser2 implements Container {
-            catch (final IOException ex) {
+            catch (IOException ex) {
@@ -144,3 +143,2 @@ public class DocumentContainer extends XMLParser2 implements Container {
-    @Override
-    public Object parseXML(final InputStream stream) {
-        final XMLParser parser = getParser(model);
+    public Object parseXML(InputStream stream) {
+        XMLParser parser = getParser(model);
@@ -148 +146 @@ public class DocumentContainer extends XMLParser2 implements Container {
-            final XMLParser2 parser2 = (XMLParser2) parser;
+            XMLParser2 parser2 = (XMLParser2) parser;
@@ -164,2 +162 @@ public class DocumentContainer extends XMLParser2 implements Container {
-    @Override
-    public void setValue(final Object value) {
+    public void setValue(Object value) {
@@ -174 +171 @@ public class DocumentContainer extends XMLParser2 implements Container {
-    private static XMLParser getParser(final String model) {
+    private static XMLParser getParser(String model) {
@@ -177 +174 @@ public class DocumentContainer extends XMLParser2 implements Container {
-            final String className = (String) parserClasses.get(model);
+            String className = (String) parserClasses.get(model);
@@ -182 +179 @@ public class DocumentContainer extends XMLParser2 implements Container {
-                final Class clazz = ClassLoaderUtil.getClass(className, true);
+                Class clazz = ClassLoaderUtil.getClass(className, true);
@@ -185 +182 @@ public class DocumentContainer extends XMLParser2 implements Container {
-            catch (final Exception ex) {
+            catch (Exception ex) {
diff --git a/src/main/java/org/apache/commons/jxpath/xml/JDOMParser.java b/src/main/java/org/apache/commons/jxpath/xml/JDOMParser.java
index 8fcfb446..fd52c67e 100644
--- a/src/main/java/org/apache/commons/jxpath/xml/JDOMParser.java
+++ b/src/main/java/org/apache/commons/jxpath/xml/JDOMParser.java
@@ -29,2 +29 @@ public class JDOMParser extends XMLParser2 {
-    @Override
-    public Object parseXML(final InputStream stream) {
+    public Object parseXML(InputStream stream) {
@@ -37 +36 @@ public class JDOMParser extends XMLParser2 {
-            final SAXBuilder builder = new SAXBuilder();
+            SAXBuilder builder = new SAXBuilder();
@@ -44 +43 @@ public class JDOMParser extends XMLParser2 {
-        catch (final Exception ex) {
+        catch (Exception ex) {
diff --git a/src/main/java/org/apache/commons/jxpath/xml/XMLParser2.java b/src/main/java/org/apache/commons/jxpath/xml/XMLParser2.java
index 957c547e..ed3dfee6 100644
--- a/src/main/java/org/apache/commons/jxpath/xml/XMLParser2.java
+++ b/src/main/java/org/apache/commons/jxpath/xml/XMLParser2.java
@@ -38 +38 @@ public abstract class XMLParser2 implements XMLParser {
-    public void setValidating(final boolean validating) {
+    public void setValidating(boolean validating) {
@@ -65 +65 @@ public abstract class XMLParser2 implements XMLParser {
-    public void setNamespaceAware(final boolean namespaceAware) {
+    public void setNamespaceAware(boolean namespaceAware) {
@@ -74 +74 @@ public abstract class XMLParser2 implements XMLParser {
-    public void setIgnoringElementContentWhitespace(final boolean whitespace) {
+    public void setIgnoringElementContentWhitespace(boolean whitespace) {
@@ -101 +101 @@ public abstract class XMLParser2 implements XMLParser {
-    public void setExpandEntityReferences(final boolean expandEntityRef) {
+    public void setExpandEntityReferences(boolean expandEntityRef) {
@@ -119 +119 @@ public abstract class XMLParser2 implements XMLParser {
-    public void setIgnoringComments(final boolean ignoreComments) {
+    public void setIgnoringComments(boolean ignoreComments) {
@@ -137 +137 @@ public abstract class XMLParser2 implements XMLParser {
-    public void setCoalescing(final boolean coalescing) {
+    public void setCoalescing(boolean coalescing) {
@@ -141 +140,0 @@ public abstract class XMLParser2 implements XMLParser {
-    @Override
diff --git a/src/test/java/org/apache/commons/jxpath/BasicNodeSetTest.java b/src/test/java/org/apache/commons/jxpath/BasicNodeSetTest.java
index 26643511..193df852 100644
--- a/src/test/java/org/apache/commons/jxpath/BasicNodeSetTest.java
+++ b/src/test/java/org/apache/commons/jxpath/BasicNodeSetTest.java
@@ -35 +34,0 @@ public class BasicNodeSetTest extends JXPathTestCase {
-    @Override
@@ -44 +43 @@ public class BasicNodeSetTest extends JXPathTestCase {
-     *
+     * 
@@ -47,2 +46,2 @@ public class BasicNodeSetTest extends JXPathTestCase {
-    protected void addPointers(final String xpath) {
-        for (final Iterator iter = context.iteratePointers(xpath); iter.hasNext();) {
+    protected void addPointers(String xpath) {
+        for (Iterator iter = context.iteratePointers(xpath); iter.hasNext();) {
@@ -56 +55 @@ public class BasicNodeSetTest extends JXPathTestCase {
-     *
+     * 
@@ -59,2 +58,2 @@ public class BasicNodeSetTest extends JXPathTestCase {
-    protected void removePointers(final String xpath) {
-        for (final Iterator iter = context.iteratePointers(xpath); iter.hasNext();) {
+    protected void removePointers(String xpath) {
+        for (Iterator iter = context.iteratePointers(xpath); iter.hasNext();) {
@@ -82,4 +81,4 @@ public class BasicNodeSetTest extends JXPathTestCase {
-        assertEquals(list(Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3),
-                Integer.valueOf(4)), nodeSet.getValues());
-        assertEquals(list(Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3),
-                Integer.valueOf(4)), nodeSet.getNodes());
+        assertEquals(list(new Integer(1), new Integer(2), new Integer(3),
+                new Integer(4)), nodeSet.getValues());
+        assertEquals(list(new Integer(1), new Integer(2), new Integer(3),
+                new Integer(4)), nodeSet.getNodes());
@@ -96 +95 @@ public class BasicNodeSetTest extends JXPathTestCase {
-        assertEquals(list(Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3)),
+        assertEquals(list(new Integer(1), new Integer(2), new Integer(3)),
@@ -98 +97 @@ public class BasicNodeSetTest extends JXPathTestCase {
-        assertEquals(list(Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3)),
+        assertEquals(list(new Integer(1), new Integer(2), new Integer(3)),
@@ -123 +122 @@ public class BasicNodeSetTest extends JXPathTestCase {
-    protected void assertElementNames(final List names, final List elements) {
+    protected void assertElementNames(List names, List elements) {
@@ -125,2 +124,2 @@ public class BasicNodeSetTest extends JXPathTestCase {
-        final Iterator nameIter = names.iterator();
-        final Iterator elementIter = elements.iterator();
+        Iterator nameIter = names.iterator();
+        Iterator elementIter = elements.iterator();
@@ -137 +136 @@ public class BasicNodeSetTest extends JXPathTestCase {
-    protected void assertElementValues(final List values, final List elements) {
+    protected void assertElementValues(List values, List elements) {
@@ -139,2 +138,2 @@ public class BasicNodeSetTest extends JXPathTestCase {
-        final Iterator valueIter = values.iterator();
-        final Iterator elementIter = elements.iterator();
+        Iterator valueIter = values.iterator();
+        Iterator elementIter = elements.iterator();
@@ -144 +143 @@ public class BasicNodeSetTest extends JXPathTestCase {
-
+        
diff --git a/src/test/java/org/apache/commons/jxpath/JXPathTestCase.java b/src/test/java/org/apache/commons/jxpath/JXPathTestCase.java
index 5896964a..d1dd0367 100644
--- a/src/test/java/org/apache/commons/jxpath/JXPathTestCase.java
+++ b/src/test/java/org/apache/commons/jxpath/JXPathTestCase.java
@@ -43,3 +43,3 @@ public abstract class JXPathTestCase extends TestCase {
-
-    protected void assertXPathValue(final JXPathContext ctx,
-                final String xpath, final Object expected)
+    
+    protected void assertXPathValue(JXPathContext ctx,
+                String xpath, Object expected)
@@ -48 +48 @@ public abstract class JXPathTestCase extends TestCase {
-        final Object actual = ctx.getValue(xpath);
+        Object actual = ctx.getValue(xpath);
@@ -52,2 +52,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected void assertXPathValue(final JXPathContext ctx,
-                final String xpath, final Object expected, final Class resultType)
+    protected void assertXPathValue(JXPathContext ctx,
+                String xpath, Object expected, Class resultType)
@@ -56 +56 @@ public abstract class JXPathTestCase extends TestCase {
-        final Object actual = ctx.getValue(xpath, resultType);
+        Object actual = ctx.getValue(xpath, resultType);
@@ -60,2 +60,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected void assertXPathValueLenient(final JXPathContext ctx,
-                final String xpath, final Object expected)
+    protected void assertXPathValueLenient(JXPathContext ctx,
+                String xpath, Object expected)
@@ -64 +64 @@ public abstract class JXPathTestCase extends TestCase {
-        final Object actual = ctx.getValue(xpath);
+        Object actual = ctx.getValue(xpath);
@@ -69,2 +69,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected void assertXPathSetValue(final JXPathContext ctx,
-                final String xpath, final Object value)
+    protected void assertXPathSetValue(JXPathContext ctx,
+                String xpath, Object value)
@@ -74,3 +74,3 @@ public abstract class JXPathTestCase extends TestCase {
-
-    protected void assertXPathSetValue(final JXPathContext ctx,
-                final String xpath, final Object value, final Object expected)
+    
+    protected void assertXPathSetValue(JXPathContext ctx,
+                String xpath, Object value, Object expected)
@@ -79 +79 @@ public abstract class JXPathTestCase extends TestCase {
-        final Object actual = ctx.getValue(xpath);
+        Object actual = ctx.getValue(xpath);
@@ -82,4 +82,4 @@ public abstract class JXPathTestCase extends TestCase {
-
-    protected void assertXPathCreatePath(final JXPathContext ctx,
-                final String xpath,
-                final Object expectedValue, final String expectedPath)
+    
+    protected void assertXPathCreatePath(JXPathContext ctx,
+                String xpath, 
+                Object expectedValue, String expectedPath)
@@ -87,2 +87,2 @@ public abstract class JXPathTestCase extends TestCase {
-        final Pointer pointer = ctx.createPath(xpath);
-        assertEquals("Creating path <" + xpath + ">",
+        Pointer pointer = ctx.createPath(xpath);
+        assertEquals("Creating path <" + xpath + ">", 
@@ -90,2 +90,2 @@ public abstract class JXPathTestCase extends TestCase {
-
-        assertEquals("Creating path (pointer value) <" + xpath + ">",
+                
+        assertEquals("Creating path (pointer value) <" + xpath + ">", 
@@ -93,2 +93,2 @@ public abstract class JXPathTestCase extends TestCase {
-
-        assertEquals("Creating path (context value) <" + xpath + ">",
+                
+        assertEquals("Creating path (context value) <" + xpath + ">", 
@@ -97,4 +97,4 @@ public abstract class JXPathTestCase extends TestCase {
-
-    protected void assertXPathCreatePathAndSetValue(final JXPathContext ctx,
-                final String xpath, final Object value,
-                final String expectedPath)
+    
+    protected void assertXPathCreatePathAndSetValue(JXPathContext ctx,
+                String xpath, Object value,
+                String expectedPath)
@@ -102,2 +102,2 @@ public abstract class JXPathTestCase extends TestCase {
-        final Pointer pointer = ctx.createPathAndSetValue(xpath, value);
-        assertEquals("Creating path <" + xpath + ">",
+        Pointer pointer = ctx.createPathAndSetValue(xpath, value);
+        assertEquals("Creating path <" + xpath + ">", 
@@ -105,2 +105,2 @@ public abstract class JXPathTestCase extends TestCase {
-
-        assertEquals("Creating path (pointer value) <" + xpath + ">",
+                
+        assertEquals("Creating path (pointer value) <" + xpath + ">", 
@@ -108,2 +108,2 @@ public abstract class JXPathTestCase extends TestCase {
-
-        assertEquals("Creating path (context value) <" + xpath + ">",
+                
+        assertEquals("Creating path (context value) <" + xpath + ">", 
@@ -111,4 +111,4 @@ public abstract class JXPathTestCase extends TestCase {
-    }
-
-    protected void assertXPathPointer(final JXPathContext ctx,
-                final String xpath, final String expected)
+    }    
+    
+    protected void assertXPathPointer(JXPathContext ctx,
+                String xpath, String expected)
@@ -117,2 +117,2 @@ public abstract class JXPathTestCase extends TestCase {
-        final Pointer pointer = ctx.getPointer(xpath);
-        final String actual = pointer.toString();
+        Pointer pointer = ctx.getPointer(xpath);
+        String actual = pointer.toString();
@@ -122,2 +122,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected void assertXPathPointerLenient(final JXPathContext ctx,
-                final String xpath, final String expected)
+    protected void assertXPathPointerLenient(JXPathContext ctx,
+                String xpath, String expected)
@@ -126,2 +126,2 @@ public abstract class JXPathTestCase extends TestCase {
-        final Pointer pointer = ctx.getPointer(xpath);
-        final String actual = pointer.toString();
+        Pointer pointer = ctx.getPointer(xpath);
+        String actual = pointer.toString();
@@ -131,2 +131,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected void assertXPathValueAndPointer(final JXPathContext ctx,
-                final String xpath, final Object expectedValue, final String expectedPointer)
+    protected void assertXPathValueAndPointer(JXPathContext ctx,
+                String xpath, Object expectedValue, String expectedPointer)
@@ -137,3 +137,3 @@ public abstract class JXPathTestCase extends TestCase {
-
-    protected void assertXPathValueIterator(final JXPathContext ctx,
-                final String xpath, final Collection expected)
+    
+    protected void assertXPathValueIterator(JXPathContext ctx,
+                String xpath, Collection expected)
@@ -148 +148 @@ public abstract class JXPathTestCase extends TestCase {
-        final Iterator it = ctx.iterate(xpath);
+        Iterator it = ctx.iterate(xpath);
@@ -157,3 +157,3 @@ public abstract class JXPathTestCase extends TestCase {
-        final JXPathContext ctx,
-        final String xpath,
-        final Collection expected)
+        JXPathContext ctx,
+        String xpath,
+        Collection expected) 
@@ -168 +168 @@ public abstract class JXPathTestCase extends TestCase {
-        final Iterator it = ctx.iteratePointers(xpath);
+        Iterator it = ctx.iteratePointers(xpath);
@@ -170 +170 @@ public abstract class JXPathTestCase extends TestCase {
-            final Pointer pointer = (Pointer) it.next();
+            Pointer pointer = (Pointer) it.next();
@@ -180,4 +180,4 @@ public abstract class JXPathTestCase extends TestCase {
-        final JXPathContext context,
-        final String path1,
-        final String path2,
-        final int expected)
+        JXPathContext context,
+        String path1,
+        String path2,
+        int expected) 
@@ -185,2 +185,2 @@ public abstract class JXPathTestCase extends TestCase {
-        final NodePointer np1 = (NodePointer) context.getPointer(path1);
-        final NodePointer np2 = (NodePointer) context.getPointer(path2);
+        NodePointer np1 = (NodePointer) context.getPointer(path1);
+        NodePointer np2 = (NodePointer) context.getPointer(path2);
@@ -199 +199 @@ public abstract class JXPathTestCase extends TestCase {
-
+    
@@ -201,3 +201,3 @@ public abstract class JXPathTestCase extends TestCase {
-            final JXPathContext ctx,
-            final String xpath,
-            final Class clazz)
+            JXPathContext ctx,
+            String xpath,
+            Class clazz) 
@@ -206,2 +206,2 @@ public abstract class JXPathTestCase extends TestCase {
-        final Object actual = ctx.getValue(xpath);
-        assertTrue("Evaluating <" + xpath + "> = " + actual.getClass(),
+        Object actual = ctx.getValue(xpath);
+        assertTrue("Evaluating <" + xpath + "> = " + actual.getClass(), 
@@ -210 +210 @@ public abstract class JXPathTestCase extends TestCase {
-
+    
@@ -212,3 +212,3 @@ public abstract class JXPathTestCase extends TestCase {
-            final JXPathContext ctx,
-            final String xpath,
-            final Class clazz)
+            JXPathContext ctx,
+            String xpath,
+            Class clazz) 
@@ -217,2 +217,2 @@ public abstract class JXPathTestCase extends TestCase {
-        final Pointer actual = ctx.getPointer(xpath);
-        assertTrue("Evaluating <" + xpath + "> = " + actual.getNode().getClass(),
+        Pointer actual = ctx.getPointer(xpath);
+        assertTrue("Evaluating <" + xpath + "> = " + actual.getNode().getClass(), 
@@ -221 +221 @@ public abstract class JXPathTestCase extends TestCase {
-
+    
@@ -226,2 +226,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected static List list(final Object o1) {
-        final List list = new ArrayList();
+    protected static List list(Object o1) {
+        List list = new ArrayList();
@@ -232,2 +232,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected static List list(final Object o1, final Object o2) {
-        final List list = new ArrayList();
+    protected static List list(Object o1, Object o2) {
+        List list = new ArrayList();
@@ -239,2 +239,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected static List list(final Object o1, final Object o2, final Object o3) {
-        final List list = new ArrayList();
+    protected static List list(Object o1, Object o2, Object o3) {
+        List list = new ArrayList();
@@ -247,2 +247,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected static Set set(final Object o1, final Object o2) {
-        final Set list = new HashSet();
+    protected static Set set(Object o1, Object o2) {
+        Set list = new HashSet();
@@ -254,2 +254,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected static Set set(final Object o1, final Object o2, final Object o3) {
-        final Set list = new HashSet();
+    protected static Set set(Object o1, Object o2, Object o3) {
+        Set list = new HashSet();
@@ -262,2 +262,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected static List list(final Object o1, final Object o2, final Object o3, final Object o4) {
-        final List list = new ArrayList();
+    protected static List list(Object o1, Object o2, Object o3, Object o4) {
+        List list = new ArrayList();
@@ -271,2 +271,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected static Set set(final Object o1, final Object o2, final Object o3, final Object o4) {
-        final Set list = new HashSet();
+    protected static Set set(Object o1, Object o2, Object o3, Object o4) {
+        Set list = new HashSet();
@@ -280,2 +280,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected static List list(final Object o1, final Object o2, final Object o3,
-                final Object o4, final Object o5)
+    protected static List list(Object o1, Object o2, Object o3,
+                Object o4, Object o5)
@@ -283 +283 @@ public abstract class JXPathTestCase extends TestCase {
-        final List list = new ArrayList();
+        List list = new ArrayList();
@@ -292,2 +292,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected static Set set(final Object o1, final Object o2, final Object o3,
-                final Object o4, final Object o5)
+    protected static Set set(Object o1, Object o2, Object o3, 
+                Object o4, Object o5) 
@@ -295 +295 @@ public abstract class JXPathTestCase extends TestCase {
-        final Set list = new HashSet();
+        Set list = new HashSet();
@@ -304,2 +304,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected static List list(final Object o1, final Object o2, final Object o3,
-                final Object o4, final Object o5, final Object o6)
+    protected static List list(Object o1, Object o2, Object o3,
+                Object o4, Object o5, Object o6)
@@ -307 +307 @@ public abstract class JXPathTestCase extends TestCase {
-        final List list = new ArrayList();
+        List list = new ArrayList();
@@ -317,2 +317,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected static Set set(final Object o1, final Object o2, final Object o3,
-                final Object o4, final Object o5, final Object o6)
+    protected static Set set(Object o1, Object o2, Object o3,
+                Object o4, Object o5, Object o6)
@@ -320 +320 @@ public abstract class JXPathTestCase extends TestCase {
-        final Set list = new HashSet();
+        Set list = new HashSet();
@@ -329,3 +329,3 @@ public abstract class JXPathTestCase extends TestCase {
-
-    protected static List list(final Object o1, final Object o2, final Object o3,
-                final Object o4, final Object o5, final Object o6, final Object o7)
+    
+    protected static List list(Object o1, Object o2, Object o3,
+                Object o4, Object o5, Object o6, Object o7)
@@ -333 +333 @@ public abstract class JXPathTestCase extends TestCase {
-        final List list = new ArrayList();
+        List list = new ArrayList();
@@ -344,2 +344,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected static Set set(final Object o1, final Object o2, final Object o3,
-                final Object o4, final Object o5, final Object o6, final Object o7)
+    protected static Set set(Object o1, Object o2, Object o3,
+                Object o4, Object o5, Object o6, Object o7)
@@ -347 +347 @@ public abstract class JXPathTestCase extends TestCase {
-        final Set list = new HashSet();
+        Set list = new HashSet();
@@ -357 +357 @@ public abstract class JXPathTestCase extends TestCase {
-
+    
diff --git a/src/test/java/org/apache/commons/jxpath/NestedTestBean.java b/src/test/java/org/apache/commons/jxpath/NestedTestBean.java
index 74ee7708..97f2dfb6 100644
--- a/src/test/java/org/apache/commons/jxpath/NestedTestBean.java
+++ b/src/test/java/org/apache/commons/jxpath/NestedTestBean.java
@@ -29 +29 @@ public class NestedTestBean {
-    public NestedTestBean(final String name) {
+    public NestedTestBean(String name) {
@@ -33 +33 @@ public class NestedTestBean {
-    public void setName(final String name) {
+    public void setName(String name) {
@@ -51 +51 @@ public class NestedTestBean {
-    public void setInt(final int value) {
+    public void setInt(int value) {
@@ -63 +63 @@ public class NestedTestBean {
-        { "String 1", "String 2", "String 3" };
+        new String[] { "String 1", "String 2", "String 3" };
@@ -69 +69 @@ public class NestedTestBean {
-    public void setStrings(final String[] array) {
+    public void setStrings(String[] array) {
@@ -73 +72,0 @@ public class NestedTestBean {
-    @Override
diff --git a/src/test/java/org/apache/commons/jxpath/TestBean.java b/src/test/java/org/apache/commons/jxpath/TestBean.java
index 25aa0e7a..92768252 100644
--- a/src/test/java/org/apache/commons/jxpath/TestBean.java
+++ b/src/test/java/org/apache/commons/jxpath/TestBean.java
@@ -50 +50 @@ public class TestBean {
-    public void setBeans(final NestedTestBean[] beans) {
+    public void setBeans(NestedTestBean[] beans) {
@@ -62 +62 @@ public class TestBean {
-    public void setBoolean(final boolean bool) {
+    public void setBoolean(boolean bool) {
@@ -74 +74 @@ public class TestBean {
-    public void setInt(final int integer) {
+    public void setInt(int integer) {
@@ -86 +86 @@ public class TestBean {
-    public int getIntegers(final int index) {
+    public int getIntegers(int index) {
@@ -90 +90 @@ public class TestBean {
-    public void setIntegers(final int index, final int value) {
+    public void setIntegers(int index, int value) {
@@ -105 +105 @@ public class TestBean {
-            list.add(Integer.valueOf(3));
+            list.add(new Integer(3));
@@ -125 +125 @@ public class TestBean {
-    public void setMap(final Map map) {
+    public void setMap(Map map) {
@@ -137 +137 @@ public class TestBean {
-    public void setNestedBean(final NestedTestBean bean) {
+    public void setNestedBean(NestedTestBean bean) {
@@ -141 +141 @@ public class TestBean {
-    private final NestedTestBean object = new NestedTestBean("Name 5");
+    private NestedTestBean object = new NestedTestBean("Name 5");
@@ -165 +165 @@ public class TestBean {
-            set.add(Integer.valueOf(4));
+            set.add(new Integer(4));
@@ -171 +170,0 @@ public class TestBean {
-    @Override
diff --git a/src/test/java/org/apache/commons/jxpath/TestMixedModelBean.java b/src/test/java/org/apache/commons/jxpath/TestMixedModelBean.java
index 210f1e08..82a5ef60 100644
--- a/src/test/java/org/apache/commons/jxpath/TestMixedModelBean.java
+++ b/src/test/java/org/apache/commons/jxpath/TestMixedModelBean.java
@@ -33,5 +33,5 @@ public class TestMixedModelBean {
-    private final String string;
-    private final TestBean bean;
-    private final Container container;
-    private final Document document;
-    private final Element element;
+    private String string;
+    private TestBean bean;
+    private Container container;
+    private Document document;
+    private Element element;
@@ -39 +39 @@ public class TestMixedModelBean {
-    private final Map map;
+    private Map map;
@@ -41 +41 @@ public class TestMixedModelBean {
-    private final List list;
+    private List list;
@@ -107 +107 @@ public class TestMixedModelBean {
-    public void setMatrix(final int[][] matrix) {
+    public void setMatrix(int[][] matrix) {
diff --git a/src/test/java/org/apache/commons/jxpath/TestNull.java b/src/test/java/org/apache/commons/jxpath/TestNull.java
index 53b970c1..1866278f 100644
--- a/src/test/java/org/apache/commons/jxpath/TestNull.java
+++ b/src/test/java/org/apache/commons/jxpath/TestNull.java
@@ -30 +30 @@ public class TestNull {
-    public void setNothing(final Object something) {
+    public void setNothing(Object something) {
diff --git a/src/test/java/org/apache/commons/jxpath/issues/JXPath113Test.java b/src/test/java/org/apache/commons/jxpath/issues/JXPath113Test.java
index 57f894c2..24550546 100644
--- a/src/test/java/org/apache/commons/jxpath/issues/JXPath113Test.java
+++ b/src/test/java/org/apache/commons/jxpath/issues/JXPath113Test.java
@@ -35,2 +35,2 @@ public class JXPath113Test extends JXPathTestCase
-        final Document doc = JAXP.getDocument("<xml/>");
-        final JXPathContext context = JXPathContext.newContext(doc);
+        Document doc = JAXP.getDocument("<xml/>");
+        JXPathContext context = JXPathContext.newContext(doc);
@@ -43 +43 @@ public class JXPath113Test extends JXPathTestCase
-        public static Document getDocument(final String xml) throws Exception
+        public static Document getDocument(String xml) throws Exception
@@ -48 +48 @@ public class JXPath113Test extends JXPathTestCase
-        public static Document getDocument(final InputSource is) throws Exception
+        public static Document getDocument(InputSource is) throws Exception
@@ -59 +59 @@ public class JXPath113Test extends JXPathTestCase
-                final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
@@ -65 +65 @@ public class JXPath113Test extends JXPathTestCase
-            catch (final ParserConfigurationException e)
+            catch (ParserConfigurationException e)
diff --git a/src/test/java/org/apache/commons/jxpath/issues/JXPath118Test.java b/src/test/java/org/apache/commons/jxpath/issues/JXPath118Test.java
index aab9d223..3e4bcc97 100644
--- a/src/test/java/org/apache/commons/jxpath/issues/JXPath118Test.java
+++ b/src/test/java/org/apache/commons/jxpath/issues/JXPath118Test.java
@@ -33,3 +33,3 @@ public class JXPath118Test extends TestCase
-        final Object contextBean = new SomeChildClass();
-        final JXPathContext context = JXPathContext.newContext(contextBean);
-        final Iterator iteratePointers = context.iteratePointers("//*");
+        Object contextBean = new SomeChildClass();
+        JXPathContext context = JXPathContext.newContext(contextBean);
+        Iterator iteratePointers = context.iteratePointers("//*");
@@ -53 +53 @@ public class JXPath118Test extends TestCase
-        public void setFoo(final int foo)
+        public void setFoo(int foo)
@@ -63 +63 @@ public class JXPath118Test extends TestCase
-        public void setBar(final int bar)
+        public void setBar(int bar)
@@ -73 +73 @@ public class JXPath118Test extends TestCase
-        public void setBaz(final int baz)
+        public void setBaz(int baz)
diff --git a/src/test/java/org/apache/commons/jxpath/issues/JXPath149Test.java b/src/test/java/org/apache/commons/jxpath/issues/JXPath149Test.java
index dc4558f7..55d1d53f 100644
--- a/src/test/java/org/apache/commons/jxpath/issues/JXPath149Test.java
+++ b/src/test/java/org/apache/commons/jxpath/issues/JXPath149Test.java
@@ -25 +25 @@ public class JXPath149Test extends JXPathTestCase {
-        final JXPathContext context = JXPathContext.newContext(null);
+        JXPathContext context = JXPathContext.newContext(null);
diff --git a/src/test/java/org/apache/commons/jxpath/issues/JXPath172DynamicTest.java b/src/test/java/org/apache/commons/jxpath/issues/JXPath172DynamicTest.java
index 9534bad5..ff41f1f9 100644
--- a/src/test/java/org/apache/commons/jxpath/issues/JXPath172DynamicTest.java
+++ b/src/test/java/org/apache/commons/jxpath/issues/JXPath172DynamicTest.java
@@ -36 +36 @@ public class JXPath172DynamicTest extends JXPathTestCase
-        return new TestSuite(JXPath172DynamicTest.class);
+        return (new TestSuite(JXPath172DynamicTest.class));
@@ -115 +115 @@ public class JXPath172DynamicTest extends JXPathTestCase
-     *
+     * 
@@ -119 +119 @@ public class JXPath172DynamicTest extends JXPathTestCase
-    private JXPathContext getContext(final String val, final boolean lenient)
+    private JXPathContext getContext(final String val, boolean lenient)
diff --git a/src/test/java/org/apache/commons/jxpath/issues/JXPath172Test.java b/src/test/java/org/apache/commons/jxpath/issues/JXPath172Test.java
index 2d741ddb..63dc655b 100644
--- a/src/test/java/org/apache/commons/jxpath/issues/JXPath172Test.java
+++ b/src/test/java/org/apache/commons/jxpath/issues/JXPath172Test.java
@@ -36 +36 @@ public class JXPath172Test extends JXPathTestCase
-        return new TestSuite(JXPath172Test.class);
+        return (new TestSuite(JXPath172Test.class));
@@ -96 +96 @@ public class JXPath172Test extends JXPathTestCase
-        catch (final JXPathNotFoundException e)
+        catch (JXPathNotFoundException e)
@@ -106 +106 @@ public class JXPath172Test extends JXPathTestCase
-        catch (final JXPathNotFoundException e)
+        catch (JXPathNotFoundException e)
@@ -116 +116 @@ public class JXPath172Test extends JXPathTestCase
-        catch (final JXPathNotFoundException e)
+        catch (JXPathNotFoundException e)
@@ -127 +127 @@ public class JXPath172Test extends JXPathTestCase
-     *
+     * 
@@ -131 +131 @@ public class JXPath172Test extends JXPathTestCase
-    private JXPathContext getContext(final String val, final boolean lenient)
+    private JXPathContext getContext(final String val, boolean lenient)
@@ -150 +150 @@ public class JXPath172Test extends JXPathTestCase
-        public void setValue(final String value)
+        public void setValue(String value)
diff --git a/src/test/java/org/apache/commons/jxpath/issues/JXPath177Test.java b/src/test/java/org/apache/commons/jxpath/issues/JXPath177Test.java
index 3739302a..313ff1e6 100644
--- a/src/test/java/org/apache/commons/jxpath/issues/JXPath177Test.java
+++ b/src/test/java/org/apache/commons/jxpath/issues/JXPath177Test.java
@@ -30 +30 @@ public class JXPath177Test extends TestCase
-
+        
@@ -46 +46 @@ public class JXPath177Test extends TestCase
-
+        
@@ -51 +51 @@ public class JXPath177Test extends TestCase
-
+        
@@ -54 +54 @@ public class JXPath177Test extends TestCase
-    private void doTest(final String xp, final String expected)
+    private void doTest(String xp, String expected)
@@ -56 +56 @@ public class JXPath177Test extends TestCase
-        final JXPathContext xpathContext = JXPathContext.newContext(model);
+        JXPathContext xpathContext = JXPathContext.newContext(model);
@@ -58,2 +58,2 @@ public class JXPath177Test extends TestCase
-        final Pointer p = xpathContext.getPointer(xp);
-        final Object result = p.getNode();
+        Pointer p = xpathContext.getPointer(xp);
+        Object result = p.getNode();
@@ -74 +74 @@ public class JXPath177Test extends TestCase
-        public JXPathVariablesResolver(final Object root)
+        public JXPathVariablesResolver(Object root)
@@ -79,2 +79 @@ public class JXPath177Test extends TestCase
-        @Override
-        public boolean isDeclaredVariable(final String varName)
+        public boolean isDeclaredVariable(String varName)
@@ -89,2 +88 @@ public class JXPath177Test extends TestCase
-        @Override
-        public Object getVariable(final String varName)
+        public Object getVariable(String varName)
@@ -104,2 +102 @@ public class JXPath177Test extends TestCase
-        @Override
-        public void declareVariable(final String varName, final Object value)
+        public void declareVariable(String varName, Object value)
@@ -110,2 +107 @@ public class JXPath177Test extends TestCase
-        @Override
-        public void undeclareVariable(final String varName)
+        public void undeclareVariable(String varName)
diff --git a/src/test/java/org/apache/commons/jxpath/ri/ExceptionHandlerTest.java b/src/test/java/org/apache/commons/jxpath/ri/ExceptionHandlerTest.java
index 86cd559b..250a6784 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/ExceptionHandlerTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/ExceptionHandlerTest.java
@@ -35 +35 @@ public class ExceptionHandlerTest extends JXPathTestCase {
-    private final Bar bar = new Bar();
+    private Bar bar = new Bar();
@@ -37 +36,0 @@ public class ExceptionHandlerTest extends JXPathTestCase {
-    @Override
@@ -41,3 +40,2 @@ public class ExceptionHandlerTest extends JXPathTestCase {
-
-            @Override
-            public void handle(final Throwable t, final Pointer ptr) {
+            
+            public void handle(Throwable t, Pointer ptr) {
@@ -54 +52 @@ public class ExceptionHandlerTest extends JXPathTestCase {
-
+    
@@ -58 +56 @@ public class ExceptionHandlerTest extends JXPathTestCase {
-
+    
diff --git a/src/test/java/org/apache/commons/jxpath/ri/JXPathCompiledExpressionTest.java b/src/test/java/org/apache/commons/jxpath/ri/JXPathCompiledExpressionTest.java
index 6e5a934f..96964db9 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/JXPathCompiledExpressionTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/JXPathCompiledExpressionTest.java
@@ -55 +55 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-
+    
@@ -92 +92 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-
+    
@@ -97 +97 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-
+        
@@ -108 +108 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-
+    
@@ -122 +122 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-
+    
@@ -133 +133 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-
+    
@@ -153 +153 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-
+    
@@ -159 +159 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-
+    
@@ -167 +167 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-
+    
@@ -176 +176 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-
+    
@@ -182 +182 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-
+    
@@ -186 +186 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-
+ 
@@ -191 +191 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-
+    
@@ -200 +200 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-
+    
@@ -205 +205 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-
+    
@@ -213 +213 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-
+    
@@ -217 +217 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-
+    
@@ -223 +223 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-
+    
@@ -233 +233 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-
+    
@@ -241 +241 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-
+    
@@ -246 +246 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-
+    
@@ -252,3 +252,3 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-    private void assertXPathExpression(final String xpath, final Class expectedClass, final String expected) {
-        final JXPathCompiledExpression expression = (JXPathCompiledExpression) JXPathContext.compile(xpath);
-
+    private void assertXPathExpression(String xpath, Class expectedClass, String expected) {
+        JXPathCompiledExpression expression = (JXPathCompiledExpression) JXPathContext.compile(xpath);
+        
@@ -258,2 +258,2 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-
-    private void assertXPathExpression(final String xpath, final Class expectedClass) {
+    
+    private void assertXPathExpression(String xpath, Class expectedClass) {
@@ -262 +262 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-
+    
diff --git a/src/test/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImplTestCase.java b/src/test/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImplTestCase.java
index 4280a527..05204e0e 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImplTestCase.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImplTestCase.java
@@ -34,3 +34,2 @@ public class JXPathContextReferenceImplTestCase extends TestCase {
-            while (JXPathContextReferenceImpl.removeNodePointerFactory(factory)) {
-
-            }
+            while (JXPathContextReferenceImpl.removeNodePointerFactory(factory))
+                ;
diff --git a/src/test/java/org/apache/commons/jxpath/ri/StressTest.java b/src/test/java/org/apache/commons/jxpath/ri/StressTest.java
index ee119102..a7d9b10c 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/StressTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/StressTest.java
@@ -27 +27 @@ public class StressTest extends TestCase {
-
+    
@@ -35,2 +35,2 @@ public class StressTest extends TestCase {
-        context = JXPathContext.newContext(null, Double.valueOf(100));
-        final Thread[] threadArray = new Thread[THREAD_COUNT];
+        context = JXPathContext.newContext(null, new Double(100));
+        Thread[] threadArray = new Thread[THREAD_COUNT];
@@ -40,3 +40,3 @@ public class StressTest extends TestCase {
-
-        for (final Thread element : threadArray) {
-            element.start();
+        
+        for (int i = 0; i < threadArray.length; i++) {
+            threadArray[i].start();
@@ -45 +45 @@ public class StressTest extends TestCase {
-        for (final Thread element : threadArray) {
+        for (int i = 0; i < threadArray.length; i++) {
@@ -47 +47 @@ public class StressTest extends TestCase {
-                element.join();
+                threadArray[i].join();
@@ -49 +49 @@ public class StressTest extends TestCase {
-            catch (final InterruptedException e) {
+            catch (InterruptedException e) {
@@ -58 +58 @@ public class StressTest extends TestCase {
-    }
+    }    
@@ -61 +60,0 @@ public class StressTest extends TestCase {
-        @Override
@@ -64,3 +63,3 @@ public class StressTest extends TestCase {
-                try {
-                    final double random = 1 + Math.random();
-                    final double sum =
+                try { 
+                    double random = 1 + Math.random();
+                    double sum =
@@ -73,2 +72,2 @@ public class StressTest extends TestCase {
-                }
-                catch (final Throwable t) {
+                }                    
+                catch (Throwable t) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/axes/RecursiveAxesTest.java b/src/test/java/org/apache/commons/jxpath/ri/axes/RecursiveAxesTest.java
index cae611ac..0474a7ed 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/axes/RecursiveAxesTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/axes/RecursiveAxesTest.java
@@ -24 +24 @@ import org.apache.commons.jxpath.JXPathTestCase;
- * in descent down a recursive graph.
+ * in descent down a recursive graph. 
@@ -31 +30,0 @@ public class RecursiveAxesTest extends JXPathTestCase {
-    @Override
@@ -34,3 +33,3 @@ public class RecursiveAxesTest extends JXPathTestCase {
-        final RecursiveBean bean1 = new RecursiveBean("one");
-        final RecursiveBean bean2 = new RecursiveBean("two");
-        final RecursiveBean bean3 = new RecursiveBean("three");
+        RecursiveBean bean1 = new RecursiveBean("one");
+        RecursiveBean bean2 = new RecursiveBean("two");
+        RecursiveBean bean3 = new RecursiveBean("three");
diff --git a/src/test/java/org/apache/commons/jxpath/ri/axes/RecursiveBean.java b/src/test/java/org/apache/commons/jxpath/ri/axes/RecursiveBean.java
index f0b38ce2..88fc7c71 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/axes/RecursiveBean.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/axes/RecursiveBean.java
@@ -26 +26 @@ public class RecursiveBean  {
-    private final String name;
+    private String name;
@@ -30 +30 @@ public class RecursiveBean  {
-    public RecursiveBean(final String name) {
+    public RecursiveBean(String name) {
@@ -33 +33 @@ public class RecursiveBean  {
-
+    
@@ -42 +42 @@ public class RecursiveBean  {
-    public void setFirst(final RecursiveBean bean) {
+    public void setFirst(RecursiveBean bean) {
@@ -50 +50 @@ public class RecursiveBean  {
-    public void setSecond(final RecursiveBean bean) {
+    public void setSecond(RecursiveBean bean) {
@@ -53,2 +53 @@ public class RecursiveBean  {
-
-    @Override
+    
diff --git a/src/test/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreterTest.java b/src/test/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreterTest.java
index 19ee7286..5f78fa36 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreterTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreterTest.java
@@ -45 +44,0 @@ public class SimplePathInterpreterTest extends TestCase {
-    @Override
@@ -48 +47 @@ public class SimplePathInterpreterTest extends TestCase {
-        final HashMap submap = new HashMap();
+        HashMap submap = new HashMap();
@@ -56 +55 @@ public class SimplePathInterpreterTest extends TestCase {
-                Integer.valueOf(2),
+                new Integer(2),
@@ -72 +71 @@ public class SimplePathInterpreterTest extends TestCase {
-                Integer.valueOf(1),
+                new Integer(1),
@@ -79 +78 @@ public class SimplePathInterpreterTest extends TestCase {
-                Integer.valueOf(1),
+                new Integer(1),
@@ -91 +90 @@ public class SimplePathInterpreterTest extends TestCase {
-                Integer.valueOf(1),
+                new Integer(1),
@@ -115 +114 @@ public class SimplePathInterpreterTest extends TestCase {
-                Integer.valueOf(1),
+                new Integer(1),
@@ -230 +229 @@ public class SimplePathInterpreterTest extends TestCase {
-                Integer.valueOf(1),
+                new Integer(1),
@@ -237 +236 @@ public class SimplePathInterpreterTest extends TestCase {
-                Integer.valueOf(1),
+                new Integer(1),
@@ -267 +266 @@ public class SimplePathInterpreterTest extends TestCase {
-
+                
@@ -431 +430 @@ public class SimplePathInterpreterTest extends TestCase {
-                Integer.valueOf(2),
+                new Integer(2),
@@ -460 +459 @@ public class SimplePathInterpreterTest extends TestCase {
-                Integer.valueOf(2),
+                new Integer(2),
@@ -479 +478 @@ public class SimplePathInterpreterTest extends TestCase {
-                Integer.valueOf(2),
+                new Integer(2),
@@ -493 +492 @@ public class SimplePathInterpreterTest extends TestCase {
-                Integer.valueOf(1),
+                new Integer(1),
@@ -537 +536 @@ public class SimplePathInterpreterTest extends TestCase {
-                Integer.valueOf(1),
+                new Integer(1),
@@ -544 +543 @@ public class SimplePathInterpreterTest extends TestCase {
-                Integer.valueOf(1),
+                new Integer(1),
@@ -560,2 +559,2 @@ public class SimplePathInterpreterTest extends TestCase {
-            final String path, final Object expectedValue, final String expectedPath,
-            final String expectedSignature)
+            String path, Object expectedValue, String expectedPath,
+            String expectedSignature)
@@ -570 +569 @@ public class SimplePathInterpreterTest extends TestCase {
-
+    
@@ -572,2 +571,2 @@ public class SimplePathInterpreterTest extends TestCase {
-            final String path, final Object expectedValue, final String expectedPath,
-            final String expectedSignature, final String expectedValueSignature)
+            String path, Object expectedValue, String expectedPath,
+            String expectedSignature, String expectedValueSignature)
@@ -575 +574 @@ public class SimplePathInterpreterTest extends TestCase {
-        final Object value = context.getValue(path);
+        Object value = context.getValue(path);
@@ -578 +577 @@ public class SimplePathInterpreterTest extends TestCase {
-        final Pointer pointer = context.getPointer(path);
+        Pointer pointer = context.getPointer(path);
@@ -584,2 +583,2 @@ public class SimplePathInterpreterTest extends TestCase {
-
-        final Pointer vPointer = ((NodePointer) pointer).getValuePointer();
+        
+        Pointer vPointer = ((NodePointer) pointer).getValuePointer();
@@ -590,2 +589,2 @@ public class SimplePathInterpreterTest extends TestCase {
-    private void assertNullPointer(final String path, final String expectedPath,
-            final String expectedSignature)
+    private void assertNullPointer(String path, String expectedPath,
+            String expectedSignature)
@@ -593 +592 @@ public class SimplePathInterpreterTest extends TestCase {
-        final Pointer pointer = context.getPointer(path);
+        Pointer pointer = context.getPointer(path);
@@ -600,2 +599,2 @@ public class SimplePathInterpreterTest extends TestCase {
-
-        final Pointer vPointer = ((NodePointer) pointer).getValuePointer();
+                
+        Pointer vPointer = ((NodePointer) pointer).getValuePointer();
@@ -613 +612 @@ public class SimplePathInterpreterTest extends TestCase {
-    private String pointerSignature(final Pointer pointer) {
+    private String pointerSignature(Pointer pointer) {
@@ -632 +631 @@ public class SimplePathInterpreterTest extends TestCase {
-        final NodePointer parent =
+        NodePointer parent = 
diff --git a/src/test/java/org/apache/commons/jxpath/ri/axes/TestBeanWithNode.java b/src/test/java/org/apache/commons/jxpath/ri/axes/TestBeanWithNode.java
index 58f938fc..66d3d517 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/axes/TestBeanWithNode.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/axes/TestBeanWithNode.java
@@ -39 +39 @@ public class TestBeanWithNode extends TestBean {
-    public void setVendor(final Object node) {
+    public void setVendor(Object node) {
@@ -43 +42,0 @@ public class TestBeanWithNode extends TestBean {
-    @Override
@@ -48 +47 @@ public class TestBeanWithNode extends TestBean {
-    public void setObject(final Object object) {
+    public void setObject(Object object) {
@@ -53 +52 @@ public class TestBeanWithNode extends TestBean {
-        final DocumentContainer docCtr =
+        DocumentContainer docCtr =
@@ -56,2 +55,2 @@ public class TestBeanWithNode extends TestBean {
-        final Document doc = (Document) docCtr.getValue();
-        final TestBeanWithNode tbwdom = new TestBeanWithNode();
+        Document doc = (Document) docCtr.getValue();
+        TestBeanWithNode tbwdom = new TestBeanWithNode();
diff --git a/src/test/java/org/apache/commons/jxpath/ri/compiler/ContextDependencyTest.java b/src/test/java/org/apache/commons/jxpath/ri/compiler/ContextDependencyTest.java
index f9a4be17..30272c9e 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/compiler/ContextDependencyTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/compiler/ContextDependencyTest.java
@@ -40,2 +40,2 @@ public class ContextDependencyTest extends JXPathTestCase {
-    public void testContextDependency(final String xpath, final boolean expected) {
-        final Expression expr = (Expression) Parser.parseExpression(xpath, new TreeCompiler());
+    public void testContextDependency(String xpath, boolean expected) {
+        Expression expr = (Expression) Parser.parseExpression(xpath, new TreeCompiler());
diff --git a/src/test/java/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java b/src/test/java/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java
index 4610d255..8d481e56 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java
@@ -40 +39,0 @@ public class CoreFunctionTest extends JXPathTestCase {
-    @Override
@@ -44 +43 @@ public class CoreFunctionTest extends JXPathTestCase {
-            final Variables vars = context.getVariables();
+            Variables vars = context.getVariables();
@@ -83 +82 @@ public class CoreFunctionTest extends JXPathTestCase {
-        assertXPathValue(context, "string-length('12345')", Double.valueOf(5));
+        assertXPathValue(context, "string-length('12345')", new Double(5));
@@ -99,20 +98,20 @@ public class CoreFunctionTest extends JXPathTestCase {
-        assertXPathValue(context, "null()", null);
-        assertXPathValue(context, "number('1')", Double.valueOf(1));
-        assertXPathValue(context, "number($bool_true)", Double.valueOf(1));
-        assertXPathValue(context, "number($bool_false)", Double.valueOf(0));
-        assertXPathValue(context, "floor(1.5)", Double.valueOf(1));
-        assertXPathValue(context, "floor(-1.5)", Double.valueOf(-2));
-        assertXPathValue(context, "ceiling(1.5)", Double.valueOf(2));
-        assertXPathValue(context, "ceiling(-1.5)", Double.valueOf(-1));
-        assertXPathValue(context, "round(1.5)", Double.valueOf(2));
-        assertXPathValue(context, "round(-1.5)", Double.valueOf(-1));
-
-        assertXPathValue(context, "floor('NaN')", Double.valueOf(Double.NaN));
-        assertXPathValue(context, "floor(-2 div 0)", Double.valueOf(Double.NEGATIVE_INFINITY));
-        assertXPathValue(context, "floor(2 div 0)", Double.valueOf(Double.POSITIVE_INFINITY));
-        assertXPathValue(context, "ceiling('NaN')", Double.valueOf(Double.NaN));
-        assertXPathValue(context, "ceiling(-2 div 0)", Double.valueOf(Double.NEGATIVE_INFINITY));
-        assertXPathValue(context, "ceiling(2 div 0)", Double.valueOf(Double.POSITIVE_INFINITY));
-        assertXPathValue(context, "round('NaN')", Double.valueOf(Double.NaN));
-        assertXPathValue(context, "round(-2 div 0)", Double.valueOf(Double.NEGATIVE_INFINITY));
-        assertXPathValue(context, "round(2 div 0)", Double.valueOf(Double.POSITIVE_INFINITY));
+        assertXPathValue(context, "null()", null);        
+        assertXPathValue(context, "number('1')", new Double(1));
+        assertXPathValue(context, "number($bool_true)", new Double(1));
+        assertXPathValue(context, "number($bool_false)", new Double(0));
+        assertXPathValue(context, "floor(1.5)", new Double(1));
+        assertXPathValue(context, "floor(-1.5)", new Double(-2));
+        assertXPathValue(context, "ceiling(1.5)", new Double(2));
+        assertXPathValue(context, "ceiling(-1.5)", new Double(-1));
+        assertXPathValue(context, "round(1.5)", new Double(2));
+        assertXPathValue(context, "round(-1.5)", new Double(-1));
+
+        assertXPathValue(context, "floor('NaN')", new Double(Double.NaN));
+        assertXPathValue(context, "floor(-2 div 0)", new Double(Double.NEGATIVE_INFINITY));
+        assertXPathValue(context, "floor(2 div 0)", new Double(Double.POSITIVE_INFINITY));
+        assertXPathValue(context, "ceiling('NaN')", new Double(Double.NaN));
+        assertXPathValue(context, "ceiling(-2 div 0)", new Double(Double.NEGATIVE_INFINITY));
+        assertXPathValue(context, "ceiling(2 div 0)", new Double(Double.POSITIVE_INFINITY));
+        assertXPathValue(context, "round('NaN')", new Double(Double.NaN));
+        assertXPathValue(context, "round(-2 div 0)", new Double(Double.NEGATIVE_INFINITY));
+        assertXPathValue(context, "round(2 div 0)", new Double(Double.POSITIVE_INFINITY));
@@ -123,2 +122 @@ public class CoreFunctionTest extends JXPathTestCase {
-            @Override
-            public Pointer getPointerByID(final JXPathContext context, final String id) {
+            public Pointer getPointerByID(JXPathContext context, String id) {
@@ -145 +142,0 @@ public class CoreFunctionTest extends JXPathTestCase {
-            @Override
@@ -147,3 +144,3 @@ public class CoreFunctionTest extends JXPathTestCase {
-                final JXPathContext context,
-                final String key,
-                final String value)
+                JXPathContext context,
+                String key,
+                String value) 
@@ -160,3 +157,2 @@ public class CoreFunctionTest extends JXPathTestCase {
-            @Override
-            public Pointer getPointerByKey(final JXPathContext context, final String key,
-                    final String value) {
+            public Pointer getPointerByKey(JXPathContext context, String key,
+                    String value) {
@@ -166,3 +162,2 @@ public class CoreFunctionTest extends JXPathTestCase {
-            @Override
-            public NodeSet getNodeSetByKey(final JXPathContext context,
-                    final String keyName, final Object keyValue) {
+            public NodeSet getNodeSetByKey(JXPathContext context,
+                    String keyName, Object keyValue) {
@@ -171 +165,0 @@ public class CoreFunctionTest extends JXPathTestCase {
-                    @Override
@@ -176 +169,0 @@ public class CoreFunctionTest extends JXPathTestCase {
-                    @Override
@@ -182 +174,0 @@ public class CoreFunctionTest extends JXPathTestCase {
-                    @Override
@@ -202,2 +194,2 @@ public class CoreFunctionTest extends JXPathTestCase {
-
-        final DecimalFormatSymbols symbols = new DecimalFormatSymbols();
+        
+        DecimalFormatSymbols symbols = new DecimalFormatSymbols();
@@ -205 +197 @@ public class CoreFunctionTest extends JXPathTestCase {
-
+        
@@ -207 +199 @@ public class CoreFunctionTest extends JXPathTestCase {
-
+        
@@ -219,2 +211,2 @@ public class CoreFunctionTest extends JXPathTestCase {
-            context,
-            "format-number(0.123456789, '##%')",
+            context, 
+            "format-number(0.123456789, '##%')", 
diff --git a/src/test/java/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java b/src/test/java/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java
index 3760ba65..b1083ba9 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java
@@ -30 +29,0 @@ public class CoreOperationTest extends JXPathTestCase {
-    @Override
@@ -34,2 +33,2 @@ public class CoreOperationTest extends JXPathTestCase {
-            final Variables vars = context.getVariables();
-            vars.declareVariable("integer", Integer.valueOf(1));
+            Variables vars = context.getVariables();
+            vars.declareVariable("integer", new Integer(1));
@@ -37 +36 @@ public class CoreOperationTest extends JXPathTestCase {
-            vars.declareVariable("nan", Double.valueOf(Double.NaN));
+            vars.declareVariable("nan", new Double(Double.NaN));
@@ -44 +43 @@ public class CoreOperationTest extends JXPathTestCase {
-        assertXPathValue(context, "1", Double.valueOf(1.0));
+        assertXPathValue(context, "1", new Double(1.0));
@@ -46 +45 @@ public class CoreOperationTest extends JXPathTestCase {
-        assertXPathValueIterator(context, "1", list(Double.valueOf(1.0)));
+        assertXPathValueIterator(context, "1", list(new Double(1.0)));
@@ -50,7 +49,7 @@ public class CoreOperationTest extends JXPathTestCase {
-        assertXPathValue(context, "-1", Double.valueOf(-1.0));
-        assertXPathValue(context, "2 + 2", Double.valueOf(4.0));
-        assertXPathValue(context, "3 - 2", Double.valueOf(1.0));
-        assertXPathValue(context, "1 + 2 + 3 - 4 + 5", Double.valueOf(7.0));
-        assertXPathValue(context, "3 * 2", Double.valueOf(3.0 * 2.0));
-        assertXPathValue(context, "3 div 2", Double.valueOf(3.0 / 2.0));
-        assertXPathValue(context, "5 mod 2", Double.valueOf(1.0));
+        assertXPathValue(context, "-1", new Double(-1.0));
+        assertXPathValue(context, "2 + 2", new Double(4.0));
+        assertXPathValue(context, "3 - 2", new Double(1.0));
+        assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0));
+        assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0));
+        assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0));
+        assertXPathValue(context, "5 mod 2", new Double(1.0));
@@ -59 +58 @@ public class CoreOperationTest extends JXPathTestCase {
-        assertXPathValue(context, "5.9 mod 2.1", Double.valueOf(1.0));
+        assertXPathValue(context, "5.9 mod 2.1", new Double(1.0));
@@ -61,3 +60,3 @@ public class CoreOperationTest extends JXPathTestCase {
-        assertXPathValue(context, "5 mod -2", Double.valueOf(1.0));
-        assertXPathValue(context, "-5 mod 2", Double.valueOf(-1.0));
-        assertXPathValue(context, "-5 mod -2", Double.valueOf(-1.0));
+        assertXPathValue(context, "5 mod -2", new Double(1.0));
+        assertXPathValue(context, "-5 mod 2", new Double(-1.0));
+        assertXPathValue(context, "-5 mod -2", new Double(-1.0));
@@ -79 +78 @@ public class CoreOperationTest extends JXPathTestCase {
-        assertXPathValue(context, "$integer", Double.valueOf(1), Double.class);
+        assertXPathValue(context, "$integer", new Double(1), Double.class);
diff --git a/src/test/java/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java b/src/test/java/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java
index 7ab105e9..e6069db5 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java
@@ -50 +49,0 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-    @Override
@@ -55 +54 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            final Variables vars = context.getVariables();
+            Variables vars = context.getVariables();
@@ -58 +57 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            final FunctionLibrary lib = new FunctionLibrary();
+            FunctionLibrary lib = new FunctionLibrary();
@@ -75 +73,0 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-    @Override
@@ -81,2 +79,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        final Object[] args = { Integer.valueOf(1), "x" };
-        final Function func = functions.getFunction("test", "new", args);
+        Object[] args = new Object[] { new Integer(1), "x" };
+        Function func = functions.getFunction("test", "new", args);
@@ -91,2 +89,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        final Object[] args = { "baz" };
-        final Function func = functions.getFunction("test", "new", args);
+        Object[] args = new Object[] { "baz" };
+        Function func = functions.getFunction("test", "new", args);
@@ -95 +93 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            func.invoke(new Context(Integer.valueOf(1)), args).toString(),
+            func.invoke(new Context(new Integer(1)), args).toString(),
@@ -100,2 +98,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        final Object[] args = { Integer.valueOf(1), "x" };
-        final Function func = functions.getFunction("test", "build", args);
+        Object[] args = new Object[] { new Integer(1), "x" };
+        Function func = functions.getFunction("test", "build", args);
@@ -109,2 +107,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        final Object[] args = { "7", Integer.valueOf(1)};
-        final Function func = functions.getFunction("test", "build", args);
+        Object[] args = new Object[] { "7", new Integer(1)};
+        Function func = functions.getFunction("test", "build", args);
@@ -118,2 +116,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        final Object[] args = { new TestFunctions()};
-        final Function func = functions.getFunction("test", "getFoo", args);
+        Object[] args = new Object[] { new TestFunctions()};
+        Function func = functions.getFunction("test", "getFoo", args);
@@ -127,2 +125,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        final Object[] args = {};
-        final Function func = functions.getFunction("test", "path", args);
+        Object[] args = new Object[0];
+        Function func = functions.getFunction("test", "path", args);
@@ -131 +129 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            func.invoke(new Context(Integer.valueOf(1)), args),
+            func.invoke(new Context(new Integer(1)), args),
@@ -136,2 +134,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        final Object[] args = { new TestFunctions()};
-        final Function func = functions.getFunction("test", "instancePath", args);
+        Object[] args = new Object[] { new TestFunctions()};
+        Function func = functions.getFunction("test", "instancePath", args);
@@ -140 +138 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            func.invoke(new Context(Integer.valueOf(1)), args),
+            func.invoke(new Context(new Integer(1)), args),
@@ -145,2 +143,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        final Object[] args = { new TestFunctions(), "*" };
-        final Function func = functions.getFunction("test", "pathWithSuffix", args);
+        Object[] args = new Object[] { new TestFunctions(), "*" };
+        Function func = functions.getFunction("test", "pathWithSuffix", args);
@@ -149 +147 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            func.invoke(new Context(Integer.valueOf(1)), args),
+            func.invoke(new Context(new Integer(1)), args),
@@ -154 +152 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-
+        
@@ -178,2 +176,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-
-        context.getVariables().declareVariable("A", "baz");
+        
+        context.getVariables().declareVariable("A", "baz");        
@@ -187 +185 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        assertXPathValue(context, "length('foo')", Integer.valueOf(3));
+        assertXPathValue(context, "length('foo')", new Integer(3));
@@ -194 +192 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-
+        
@@ -207 +205 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-
+    
@@ -209,2 +207,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-
-        final List list = new ArrayList();
+        
+        List list = new ArrayList();
@@ -215,4 +213,4 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            context,
-            "size($myList)",
-            Integer.valueOf(1));
-
+            context, 
+            "size($myList)", 
+            new Integer(1));
+    
@@ -220,4 +218,4 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            context,
-            "size(beans)",
-            Integer.valueOf(2));
-
+            context, 
+            "size(beans)", 
+            new Integer(2));
+            
@@ -226,2 +224,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-
-        final JXPathContext context = JXPathContext.newContext(new ArrayList());
+        
+        JXPathContext context = JXPathContext.newContext(new ArrayList());
@@ -254 +252 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-
+        
@@ -264,2 +262,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            context,
-            "//.[test:isMap()]/Key1",
+            context, 
+            "//.[test:isMap()]/Key1", 
@@ -273 +271 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            Double.valueOf(7));
+            new Double(7));
@@ -276 +274 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        // and checks their type for testing purposes
+        // and checks their type for testing purposes            
@@ -280,2 +278 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            Integer.valueOf(21));
-
+            new Integer(21));
@@ -282,0 +280 @@ public class ExtensionFunctionTest extends JXPathTestCase {
+        
@@ -284 +282 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        // and checks their type for testing purposes
+        // and checks their type for testing purposes            
@@ -288,2 +286,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            Integer.valueOf(21));
-
+            new Integer(21));
+            
@@ -297 +295 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-
+    
@@ -308 +306 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-
+            
@@ -312 +310 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            "foo");
+            "foo");        
@@ -317,3 +315,3 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            "foo");
-
-        final List list = new ArrayList();
+            "foo");   
+        
+        List list = new ArrayList();
@@ -323 +321 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        final Object values = context.getValue("test:items($list)");
+        Object values = context.getValue("test:items($list)");
@@ -346 +344 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-
+            
@@ -351 +349 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            "/beans[1]/name");
+            "/beans[1]/name");        
@@ -388 +386 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        private final Object object;
+        private Object object;
@@ -390 +388 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        public Context(final Object object) {
+        public Context(Object object) {
@@ -394 +391,0 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        @Override
@@ -400 +396,0 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        @Override
@@ -405 +400,0 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        @Override
@@ -410 +404,0 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        @Override
diff --git a/src/test/java/org/apache/commons/jxpath/ri/compiler/TestFunctions.java b/src/test/java/org/apache/commons/jxpath/ri/compiler/TestFunctions.java
index ee5d8ff5..ac947d22 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/compiler/TestFunctions.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/compiler/TestFunctions.java
@@ -20,0 +21 @@ import java.util.Collection;
+import java.util.Iterator;
@@ -40 +41 @@ public class TestFunctions {
-    public TestFunctions(final int foo, final String bar) {
+    public TestFunctions(int foo, String bar) {
@@ -45 +46 @@ public class TestFunctions {
-    public TestFunctions(final ExpressionContext context, final String bar) {
+    public TestFunctions(ExpressionContext context, String bar) {
@@ -50,2 +51,2 @@ public class TestFunctions {
-
-    public TestFunctions(final int foo, final Object object, final boolean another) {
+    
+    public TestFunctions(int foo, Object object, boolean another) {
@@ -67 +68 @@ public class TestFunctions {
-    public TestFunctions setFooAndBar(final int foo, final String bar) {
+    public TestFunctions setFooAndBar(int foo, String bar) {
@@ -73 +74 @@ public class TestFunctions {
-    public static TestFunctions build(final int foo, final String bar) {
+    public static TestFunctions build(int foo, String bar) {
@@ -77 +77,0 @@ public class TestFunctions {
-    @Override
@@ -82 +82 @@ public class TestFunctions {
-    public static String path(final ExpressionContext context) {
+    public static String path(ExpressionContext context) {
@@ -86 +86 @@ public class TestFunctions {
-    public String instancePath(final ExpressionContext context) {
+    public String instancePath(ExpressionContext context) {
@@ -90 +90 @@ public class TestFunctions {
-    public String pathWithSuffix(final ExpressionContext context, final String suffix) {
+    public String pathWithSuffix(ExpressionContext context, String suffix) {
@@ -95,2 +95,2 @@ public class TestFunctions {
-        final ExpressionContext context,
-        final ExpressionContext child)
+        ExpressionContext context,
+        ExpressionContext child) 
@@ -104,3 +104,3 @@ public class TestFunctions {
-    public static boolean isMap(final ExpressionContext context) {
-        final Pointer ptr = context.getContextNodePointer();
-        return ptr == null ? false : ptr.getValue() instanceof Map;
+    public static boolean isMap(ExpressionContext context) {
+        Pointer ptr = context.getContextNodePointer();
+        return ptr == null ? false : (ptr.getValue() instanceof Map);
@@ -113,2 +113,3 @@ public class TestFunctions {
-    public static int count(final ExpressionContext context, final Collection col) {
-        for (final Object element : col) {
+    public static int count(ExpressionContext context, Collection col) {
+        for (Iterator iter = col.iterator(); iter.hasNext();) {
+            Object element = iter.next();
@@ -121,2 +122,2 @@ public class TestFunctions {
-
-    public static int countPointers(final NodeSet nodeSet) {
+    
+    public static int countPointers(NodeSet nodeSet) {
@@ -125,2 +126,2 @@ public class TestFunctions {
-
-    public static String string(final String string) {
+    
+    public static String string(String string) {
@@ -129 +130 @@ public class TestFunctions {
-
+    
@@ -131 +132 @@ public class TestFunctions {
-        final ArrayList list = new ArrayList();
+        ArrayList list = new ArrayList();
@@ -136,4 +137,4 @@ public class TestFunctions {
-
-    public static NodeSet nodeSet(final ExpressionContext context) {
-        final JXPathContext jxpathCtx = context.getJXPathContext();
-        final BasicNodeSet set = new BasicNodeSet();
+    
+    public static NodeSet nodeSet(ExpressionContext context) {
+        JXPathContext jxpathCtx = context.getJXPathContext();
+        BasicNodeSet set = new BasicNodeSet();
@@ -142 +143 @@ public class TestFunctions {
-
+        
@@ -145,2 +146,2 @@ public class TestFunctions {
-
-    public static Collection items(final Collection arg) {
+    
+    public static Collection items(Collection arg) {
@@ -150 +151 @@ public class TestFunctions {
-    public static Boolean isInstance(final Object o, final Class c) {
+    public static Boolean isInstance(Object o, Class c) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/compiler/TestFunctions2.java b/src/test/java/org/apache/commons/jxpath/ri/compiler/TestFunctions2.java
index e5b17bf2..d3e37927 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/compiler/TestFunctions2.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/compiler/TestFunctions2.java
@@ -24 +24 @@ public class TestFunctions2 {
-    public static int increment(final int i) {
+    public static int increment(int i) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/compiler/VariableFactory.java b/src/test/java/org/apache/commons/jxpath/ri/compiler/VariableFactory.java
index 36ff9a6f..3bc33e12 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/compiler/VariableFactory.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/compiler/VariableFactory.java
@@ -31 +30,0 @@ public class VariableFactory extends AbstractFactory {
-    @Override
@@ -33,5 +32,5 @@ public class VariableFactory extends AbstractFactory {
-        final JXPathContext context,
-        final Pointer pointer,
-        final Object parent,
-        final String name,
-        final int index)
+        JXPathContext context,
+        Pointer pointer,
+        Object parent,
+        String name,
+        int index) 
@@ -57,2 +56 @@ public class VariableFactory extends AbstractFactory {
-    @Override
-    public boolean declareVariable(final JXPathContext context, final String name) {
+    public boolean declareVariable(JXPathContext context, String name) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/compiler/VariableTest.java b/src/test/java/org/apache/commons/jxpath/ri/compiler/VariableTest.java
index 86dc3f82..2776ad97 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/compiler/VariableTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/compiler/VariableTest.java
@@ -31 +30,0 @@ public class VariableTest extends JXPathTestCase {
-    @Override
@@ -37,3 +36,3 @@ public class VariableTest extends JXPathTestCase {
-            final Variables vars = context.getVariables();
-            vars.declareVariable("a", Double.valueOf(1));
-            vars.declareVariable("b", Double.valueOf(1));
+            Variables vars = context.getVariables();
+            vars.declareVariable("a", new Double(1));
+            vars.declareVariable("b", new Double(1));
@@ -42,2 +41,2 @@ public class VariableTest extends JXPathTestCase {
-            vars.declareVariable("integer", Integer.valueOf(1));
-            vars.declareVariable("nan", Double.valueOf(Double.NaN));
+            vars.declareVariable("integer", new Integer(1));
+            vars.declareVariable("nan", new Double(Double.NaN));
@@ -50 +49 @@ public class VariableTest extends JXPathTestCase {
-        assertXPathValueAndPointer(context, "$a", Double.valueOf(1), "$a");
+        assertXPathValueAndPointer(context, "$a", new Double(1), "$a");
@@ -58 +57 @@ public class VariableTest extends JXPathTestCase {
-        assertXPathValue(context, "$a + 1", Double.valueOf(2));
+        assertXPathValue(context, "$a + 1", new Double(2));
@@ -70 +69 @@ public class VariableTest extends JXPathTestCase {
-        catch (final Exception ex) {
+        catch (Exception ex) {
@@ -76 +75 @@ public class VariableTest extends JXPathTestCase {
-
+        
@@ -79 +78 @@ public class VariableTest extends JXPathTestCase {
-            context.setValue("$none", Integer.valueOf(1));
+            context.setValue("$none", new Integer(1));
@@ -81 +80 @@ public class VariableTest extends JXPathTestCase {
-        catch (final Exception ex) {
+        catch (Exception ex) {
@@ -90 +89 @@ public class VariableTest extends JXPathTestCase {
-        final JXPathContext nestedContext = JXPathContext.newContext(context, null);
+        JXPathContext nestedContext = JXPathContext.newContext(context, null);
@@ -92 +91 @@ public class VariableTest extends JXPathTestCase {
-        assertXPathValue(nestedContext, "$a", Double.valueOf(1));
+        assertXPathValue(nestedContext, "$a", new Double(1));
@@ -96 +95 @@ public class VariableTest extends JXPathTestCase {
-        assertXPathSetValue(context, "$x", Integer.valueOf(1));
+        assertXPathSetValue(context, "$x", new Integer(1));
@@ -114 +113 @@ public class VariableTest extends JXPathTestCase {
-        // Calls factory.declareVariable("stringArray").
+        // Calls factory.declareVariable("stringArray"). 
@@ -130 +129 @@ public class VariableTest extends JXPathTestCase {
-        // Calls factory.declareVariable("stringArray").
+        // Calls factory.declareVariable("stringArray"). 
@@ -180 +179 @@ public class VariableTest extends JXPathTestCase {
-        // Calls factory.declareVariable("test").
+        // Calls factory.declareVariable("test"). 
@@ -191 +190 @@ public class VariableTest extends JXPathTestCase {
-        // Calls factory.declareVariable("test").
+        // Calls factory.declareVariable("test"). 
@@ -205 +204 @@ public class VariableTest extends JXPathTestCase {
-        // That one should produce an instance of TestBean and
+        // That one should produce an instance of TestBean and 
@@ -218 +217 @@ public class VariableTest extends JXPathTestCase {
-        // That one should produce an instance of TestBean and
+        // That one should produce an instance of TestBean and 
@@ -258 +257 @@ public class VariableTest extends JXPathTestCase {
-
+    
@@ -260,2 +259,2 @@ public class VariableTest extends JXPathTestCase {
-        assertXPathValue(context, "count($a | /document/vendor/location)", Double.valueOf(3));
-        assertXPathValue(context, "count($a | /list)", Double.valueOf(7)); //$o + list which contains six discrete values (one is duped, wrapped in a Container)
+        assertXPathValue(context, "count($a | /document/vendor/location)", new Double(3));
+        assertXPathValue(context, "count($a | /list)", new Double(7)); //$o + list which contains six discrete values (one is duped, wrapped in a Container)
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/AliasedNamespaceIterationTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/AliasedNamespaceIterationTest.java
index 4c97e2bb..a5af442f 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/AliasedNamespaceIterationTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/AliasedNamespaceIterationTest.java
@@ -32,2 +32,2 @@ public class AliasedNamespaceIterationTest extends JXPathTestCase {
-    protected DocumentContainer createDocumentContainer(final String model) {
-        final DocumentContainer result = new DocumentContainer(JXPathTestCase.class
+    protected DocumentContainer createDocumentContainer(String model) {
+        DocumentContainer result = new DocumentContainer(JXPathTestCase.class
@@ -38,2 +38,2 @@ public class AliasedNamespaceIterationTest extends JXPathTestCase {
-    protected JXPathContext createContext(final String model) {
-        final JXPathContext context = JXPathContext.newContext(createDocumentContainer(model));
+    protected JXPathContext createContext(String model) {
+        JXPathContext context = JXPathContext.newContext(createDocumentContainer(model));
@@ -44 +44 @@ public class AliasedNamespaceIterationTest extends JXPathTestCase {
-    protected void doTestIterate(final String xpath, final String model, final Collection expected) {
+    protected void doTestIterate(String xpath, String model, Collection expected) {
@@ -48 +48 @@ public class AliasedNamespaceIterationTest extends JXPathTestCase {
-    protected void doTestIterate(final String model) {
+    protected void doTestIterate(String model) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java b/src/test/java/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java
index fa9ee56b..e2e2fed4 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java
@@ -44 +43,0 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-    @Override
@@ -75,5 +74,5 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        final int relativePropertyIndex,
-        final int offset,
-        final boolean useStartLocation,
-        final boolean reverse,
-        final int expected)
+        int relativePropertyIndex,
+        int offset,
+        boolean useStartLocation,
+        boolean reverse,
+        int expected) 
@@ -81 +80 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        final PropertyOwnerPointer root =
+        PropertyOwnerPointer root =
@@ -137,5 +136,5 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        final int propertyIndex,
-        final int offset,
-        final boolean useStartLocation,
-        final boolean reverse,
-        final int expected)
+        int propertyIndex,
+        int offset,
+        boolean useStartLocation,
+        boolean reverse,
+        int expected) 
@@ -143 +142 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        final PropertyOwnerPointer root =
+        PropertyOwnerPointer root =
@@ -177,2 +176,2 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-    private int relativeProperty(final PropertyPointer holder, final int offset) {
-        final String[] names = holder.getPropertyNames();
+    private int relativeProperty(PropertyPointer holder, int offset) {
+        String[] names = holder.getPropertyNames();
@@ -188,3 +187,3 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        final JXPathContext context = JXPathContext.newContext(createContextBean());
-        final Iterator it = context.iteratePointers("/integers");
-        final List actual = new ArrayList();
+        JXPathContext context = JXPathContext.newContext(createContextBean());
+        Iterator it = context.iteratePointers("/integers");
+        List actual = new ArrayList();
@@ -205,3 +204,3 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        final JXPathContext context = JXPathContext.newContext(createContextBean());
-        final Iterator it = context.iteratePointers("/integers");
-        final List actual = new ArrayList();
+        JXPathContext context = JXPathContext.newContext(createContextBean());
+        Iterator it = context.iteratePointers("/integers");
+        List actual = new ArrayList();
@@ -222 +221 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        final JXPathContext context = JXPathContext.newContext(createContextBean());
+        JXPathContext context = JXPathContext.newContext(createContextBean());
@@ -227,2 +226,2 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            final NodePointer pointer = (NodePointer) it.next();
-            pointer.setValue(Integer.valueOf(i++));
+            NodePointer pointer = (NodePointer) it.next();
+            pointer.setValue(new Integer(i++));
@@ -232 +231 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        final List actual = new ArrayList();
+        List actual = new ArrayList();
@@ -238 +237 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            list(Integer.valueOf(5), Integer.valueOf(6)),
+            list(new Integer(5), new Integer(6)),
@@ -246 +245 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        final JXPathContext context = JXPathContext.newContext(createContextBean());
+        JXPathContext context = JXPathContext.newContext(createContextBean());
@@ -260 +259 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        final Iterator iter = context.iteratePointers("/beans/name");
+        Iterator iter = context.iteratePointers("/beans/name");
@@ -263 +262 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            final Pointer pointer = (Pointer) iter.next();
+            Pointer pointer = (Pointer) iter.next();
@@ -291 +290 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Double.valueOf(5));
+            new Double(5));
@@ -307 +306 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(set)", Double.valueOf(3));
+        assertXPathValue(context, "count(set)", new Double(3));
@@ -315 +314 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(*)", Double.valueOf(21));
+        assertXPathValue(context, "count(*)", new Double(21));
@@ -318 +317 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(child::node())", Double.valueOf(21));
+        assertXPathValue(context, "count(child::node())", new Double(21));
@@ -338,4 +337,4 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-                Integer.valueOf(1),
-                Integer.valueOf(2),
-                Integer.valueOf(3),
-                Integer.valueOf(4)));
+                new Integer(1),
+                new Integer(2),
+                new Integer(3),
+                new Integer(4)));
@@ -356 +355 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "integers[2]", Integer.valueOf(2));
+        assertXPathValue(context, "integers[2]", new Integer(2));
@@ -388 +387 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(descendant::node())", Double.valueOf(65));
+        assertXPathValue(context, "count(descendant::node())", new Double(65));
@@ -391 +390 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(descendant::root)", Double.valueOf(0));
+        assertXPathValue(context, "count(descendant::root)", new Double(0));
@@ -393 +392 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(descendant::name)", Double.valueOf(7));
+        assertXPathValue(context, "count(descendant::name)", new Double(7));
@@ -427 +426 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Double.valueOf(1));
+            new Double(1));
@@ -430 +429 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(nestedBean//.)", Double.valueOf(7));
+        assertXPathValue(context, "count(nestedBean//.)", new Double(7));
@@ -433 +432 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(//self::beans)", Double.valueOf(2));
+        assertXPathValue(context, "count(//self::beans)", new Double(2));
@@ -439 +438 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Double.valueOf(66));
+            new Double(66));
@@ -448 +447 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Double.valueOf(21));
+            new Double(21));
@@ -453 +452 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Double.valueOf(7));
+            new Double(7));
@@ -461 +460 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Double.valueOf(8));
+            new Double(8));
@@ -466 +465 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Double.valueOf(1));
+            new Double(1));
@@ -472 +471 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Double.valueOf(8));
+            new Double(8));
@@ -477 +476 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Double.valueOf(1));
+            new Double(1));
@@ -483 +482 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Double.valueOf(53));
+            new Double(53));
@@ -488 +487 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Double.valueOf(7));
+            new Double(7));
@@ -493 +492 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(/beans/..)", Double.valueOf(1));
+        assertXPathValue(context, "count(/beans/..)", new Double(1));
@@ -495 +494 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(//..)", Double.valueOf(9));
+        assertXPathValue(context, "count(//..)", new Double(9));
@@ -497 +496 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(//../..)", Double.valueOf(2));
+        assertXPathValue(context, "count(//../..)", new Double(2));
@@ -510 +509 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Double.valueOf(8));
+            new Double(8));
@@ -515 +514 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Double.valueOf(2));
+            new Double(2));
@@ -523 +522 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Double.valueOf(2));
+            new Double(2));
@@ -528 +527 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Double.valueOf(12));
+            new Double(12));
@@ -533 +532 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Double.valueOf(10));
+            new Double(10));
@@ -552,4 +551,4 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-                Integer.valueOf(1),
-                Integer.valueOf(2),
-                Integer.valueOf(3),
-                Integer.valueOf(4)));
+                new Integer(1),
+                new Integer(2),
+                new Integer(3),
+                new Integer(4)));
@@ -560 +559 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Double.valueOf(2));
+            new Double(2));
@@ -565 +564 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Double.valueOf(3));
+            new Double(3));
@@ -569 +568 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "(integers)[2]", Integer.valueOf(2));
+        assertXPathValue(context, "(integers)[2]", new Integer(2));
@@ -574 +573 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(@*)", Double.valueOf(21.0));
+        assertXPathValue(context, "count(@*)", new Double(21.0));
@@ -585 +584 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "nestedBean[@name = 'int']", Integer.valueOf(1));
+        assertXPathValue(context, "nestedBean[@name = 'int']", new Integer(1));
@@ -597 +596 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(@xml:*)", Double.valueOf(1));
+        assertXPathValue(context, "count(@xml:*)", new Double(1));
@@ -620 +619 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "sum(integers)", Double.valueOf(10));
+        assertXPathValue(context, "sum(integers)", new Double(10));        
@@ -625 +624 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-                Integer.valueOf(4),
+                new Integer(4),
@@ -696,2 +695,2 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            list(Integer.valueOf(1), Integer.valueOf(2)));
-
+            list(new Integer(1), new Integer(2)));
+            
@@ -701 +700 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-
+        
@@ -705 +704 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            list(Integer.valueOf(1)));
+            list(new Integer(1)));
@@ -728 +727 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathSetValue(context, "int", Integer.valueOf(2));
+        assertXPathSetValue(context, "int", new Integer(2));
@@ -731 +730 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathSetValue(context, "int", "3", Integer.valueOf(3));
+        assertXPathSetValue(context, "int", "3", new Integer(3));
@@ -734 +733 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathSetValue(context, "int", new int[] { 4 }, Integer.valueOf(4));
+        assertXPathSetValue(context, "int", new int[] { 4 }, new Integer(4));
@@ -737 +736 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathSetValue(context, "@int", Integer.valueOf(10));
+        assertXPathSetValue(context, "@int", new Integer(10));
@@ -742 +741 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathSetValue(context, "integers[2]", Integer.valueOf(5));
+        assertXPathSetValue(context, "integers[2]", new Integer(5));
@@ -749 +748 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Integer.valueOf(6));
+            new Integer(6));
@@ -757 +756 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Integer.valueOf(8));
+            new Integer(8));
@@ -763 +762 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Integer.valueOf(9));
+            new Integer(9));
@@ -787 +786 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Integer.valueOf(1),
+            new Integer(1),
@@ -795 +794 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-                Integer.valueOf(1),
+                new Integer(1),
@@ -798 +797 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        catch (final Exception e) {
+        catch (Exception e) {
@@ -802 +801 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-
+        
@@ -812 +811 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Integer.valueOf(2),
+            new Integer(2),
@@ -819 +818 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        // Calls factory.createObject(..., testBean, "beans", 2),
+        // Calls factory.createObject(..., testBean, "beans", 2), 
@@ -824 +823 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Integer.valueOf(1),
+            new Integer(1),
@@ -831 +830 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        // Calls factory.createObject(..., testBean, "beans", 2),
+        // Calls factory.createObject(..., testBean, "beans", 2), 
@@ -836 +835 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Integer.valueOf(2),
+            new Integer(2),
@@ -846 +845 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Integer.valueOf(3),
+            new Integer(3),
@@ -855 +854 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Integer.valueOf(1),
+            new Integer(1),
@@ -864 +863 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Integer.valueOf(2),
+            new Integer(2),
@@ -897 +896 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Integer.valueOf(0),
+            new Integer(0),
@@ -941 +940 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-
+    
@@ -943 +942 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        final JXPathContext relative =
+        JXPathContext relative =
@@ -945,4 +944,4 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-
-        assertXPathValueAndPointer(relative,
-            "int",
-            Integer.valueOf(1),
+        
+        assertXPathValueAndPointer(relative, 
+            "int", 
+            new Integer(1), 
@@ -953 +952 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        final JXPathContext relative =
+        JXPathContext relative =
@@ -955,4 +954,4 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-
-        assertXPathValueAndPointer(relative,
-            "/integers[2]",
-            Integer.valueOf(2),
+        
+        assertXPathValueAndPointer(relative, 
+            "/integers[2]", 
+            new Integer(2), 
@@ -963 +962 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        final JXPathContext relative =
+        JXPathContext relative =
@@ -965,4 +964,4 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-
-        assertXPathValueAndPointer(relative,
-            "../integers[2]",
-            Integer.valueOf(2),
+        
+        assertXPathValueAndPointer(relative, 
+            "../integers[2]", 
+            new Integer(2), 
@@ -971 +970 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-
+    
@@ -974 +973 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        final JXPathContext relative =
+        JXPathContext relative =
@@ -976,4 +975,4 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-
-        assertXPathValue(relative,
-            "test:countPointers(strings)",
-            Integer.valueOf(3));
+        
+        assertXPathValue(relative, 
+            "test:countPointers(strings)", 
+            new Integer(3));
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/EmbeddedColonMapKeysTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/EmbeddedColonMapKeysTest.java
index b69ca8ca..1e60e618 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/EmbeddedColonMapKeysTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/EmbeddedColonMapKeysTest.java
@@ -26 +26 @@ import org.apache.commons.jxpath.JXPathTestCase;
- *
+ * 
@@ -31 +30,0 @@ public class EmbeddedColonMapKeysTest extends JXPathTestCase {
-    @Override
@@ -34 +33 @@ public class EmbeddedColonMapKeysTest extends JXPathTestCase {
-        final HashMap m = new HashMap();
+        HashMap m = new HashMap();
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/EmptyCollectionTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/EmptyCollectionTest.java
index c78d123a..716e421b 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/EmptyCollectionTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/EmptyCollectionTest.java
@@ -29 +29 @@ public class EmptyCollectionTest extends JXPathTestCase {
-        private final Object child;
+        private Object child;
@@ -34 +34 @@ public class EmptyCollectionTest extends JXPathTestCase {
-        public HasChild(final Object child) {
+        public HasChild(Object child) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/ExceptionPropertyTestBean.java b/src/test/java/org/apache/commons/jxpath/ri/model/ExceptionPropertyTestBean.java
index 6031bb23..ad2b6e94 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/ExceptionPropertyTestBean.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/ExceptionPropertyTestBean.java
@@ -22 +22 @@ import org.apache.commons.jxpath.TestBean;
- *
+ * 
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java
index 84833b50..1ddc714c 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java
@@ -29,2 +29,2 @@ public class ExternalXMLNamespaceTest extends JXPathTestCase {
-    protected DocumentContainer createDocumentContainer(final String model) {
-        final DocumentContainer result = new DocumentContainer(JXPathTestCase.class
+    protected DocumentContainer createDocumentContainer(String model) {
+        DocumentContainer result = new DocumentContainer(JXPathTestCase.class
@@ -37,2 +37,2 @@ public class ExternalXMLNamespaceTest extends JXPathTestCase {
-    protected JXPathContext createContext(final String model) {
-        final JXPathContext context = JXPathContext
+    protected JXPathContext createContext(String model) {
+        JXPathContext context = JXPathContext
@@ -45 +45 @@ public class ExternalXMLNamespaceTest extends JXPathTestCase {
-    protected void doTest(final String xpath, final String model, final String expected) {
+    protected void doTest(String xpath, String model, String expected) {
@@ -49 +49 @@ public class ExternalXMLNamespaceTest extends JXPathTestCase {
-    protected void doTestAttribute(final String model) {
+    protected void doTestAttribute(String model) {
@@ -53 +53 @@ public class ExternalXMLNamespaceTest extends JXPathTestCase {
-    protected void doTestElement(final String model) {
+    protected void doTestElement(String model) {
@@ -57 +57 @@ public class ExternalXMLNamespaceTest extends JXPathTestCase {
-    protected void doTestCreateAndSetAttribute(final String model) {
+    protected void doTestCreateAndSetAttribute(String model) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/JXPath151Test.java b/src/test/java/org/apache/commons/jxpath/ri/model/JXPath151Test.java
index ed566bcb..a416477d 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/JXPath151Test.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/JXPath151Test.java
@@ -30 +29,0 @@ public class JXPath151Test extends JXPathTestCase {
-    @Override
@@ -32,2 +31,2 @@ public class JXPath151Test extends JXPathTestCase {
-        final TestBean testBean = new TestBean();
-        final HashMap m = new HashMap();
+        TestBean testBean = new TestBean();
+        HashMap m = new HashMap();
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/JXPath154Test.java b/src/test/java/org/apache/commons/jxpath/ri/model/JXPath154Test.java
index eff6253e..9756f740 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/JXPath154Test.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/JXPath154Test.java
@@ -28 +28 @@ public class JXPath154Test extends JXPathTestCase {
-    protected DocumentContainer createDocumentContainer(final String model) {
+    protected DocumentContainer createDocumentContainer(String model) {
@@ -32,2 +32,2 @@ public class JXPath154Test extends JXPathTestCase {
-    protected void doTest(final String path, final String model, final String expectedValue) {
-        final JXPathContext context = JXPathContext.newContext(createDocumentContainer(model));
+    protected void doTest(String path, String model, String expectedValue) {
+        JXPathContext context = JXPathContext.newContext(createDocumentContainer(model));
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/MixedModelTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/MixedModelTest.java
index e4b23d53..ff71df64 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/MixedModelTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/MixedModelTest.java
@@ -42 +41,0 @@ public class MixedModelTest extends JXPathTestCase {
-    @Override
@@ -44 +43 @@ public class MixedModelTest extends JXPathTestCase {
-        final TestMixedModelBean bean = new TestMixedModelBean();
+        TestMixedModelBean bean = new TestMixedModelBean();
@@ -48 +47 @@ public class MixedModelTest extends JXPathTestCase {
-        final Variables vars = context.getVariables();
+        Variables vars = context.getVariables();
@@ -58 +57 @@ public class MixedModelTest extends JXPathTestCase {
-        final int[][] matrix = new int[1][];
+        int[][] matrix = new int[1][];
@@ -67,3 +66,3 @@ public class MixedModelTest extends JXPathTestCase {
-        assertXPathValueAndPointer(context,
-            "$foo:bar",
-            "baz",
+        assertXPathValueAndPointer(context, 
+            "$foo:bar", 
+            "baz", 
@@ -71 +70 @@ public class MixedModelTest extends JXPathTestCase {
-
+        
@@ -73 +72 @@ public class MixedModelTest extends JXPathTestCase {
-
+    
@@ -82 +81 @@ public class MixedModelTest extends JXPathTestCase {
-            Integer.valueOf(1),
+            new Integer(1),
@@ -132 +131 @@ public class MixedModelTest extends JXPathTestCase {
-            Integer.valueOf(1),
+            new Integer(1),
@@ -186 +185 @@ public class MixedModelTest extends JXPathTestCase {
-            Integer.valueOf(1),
+            new Integer(1),
@@ -242 +241 @@ public class MixedModelTest extends JXPathTestCase {
-            Integer.valueOf(1),
+            new Integer(1),
@@ -318 +317 @@ public class MixedModelTest extends JXPathTestCase {
-        final JXPathContext ctx = JXPathContext.newContext(new TestNull());
+        JXPathContext ctx = JXPathContext.newContext(new TestNull());
@@ -338 +337 @@ public class MixedModelTest extends JXPathTestCase {
-        final TestBean bean = (TestBean) context.getContextBean();
+        TestBean bean = (TestBean) context.getContextBean();
@@ -344 +343 @@ public class MixedModelTest extends JXPathTestCase {
-            Integer.valueOf(1),
+            new Integer(1),
@@ -351 +350 @@ public class MixedModelTest extends JXPathTestCase {
-            Integer.valueOf(1),
+            new Integer(1),
@@ -359 +358 @@ public class MixedModelTest extends JXPathTestCase {
-        final Map map = new HashMap();
+        Map map = new HashMap();
@@ -362 +361 @@ public class MixedModelTest extends JXPathTestCase {
-        final JXPathContext context = JXPathContext.newContext(map);
+        JXPathContext context = JXPathContext.newContext(map);
@@ -368 +367 @@ public class MixedModelTest extends JXPathTestCase {
-        final Map map = new HashMap();
+        Map map = new HashMap();
@@ -371 +370 @@ public class MixedModelTest extends JXPathTestCase {
-        final JXPathContext context = JXPathContext.newContext(map);
+        JXPathContext context = JXPathContext.newContext(map);
@@ -373,2 +372,2 @@ public class MixedModelTest extends JXPathTestCase {
-        final Iterator it = context.iteratePointers("foo");
-        final List actual = new ArrayList();
+        Iterator it = context.iteratePointers("foo");
+        List actual = new ArrayList();
@@ -376 +375 @@ public class MixedModelTest extends JXPathTestCase {
-            final Pointer ptr = (Pointer) it.next();
+            Pointer ptr = (Pointer) it.next();
@@ -386 +385 @@ public class MixedModelTest extends JXPathTestCase {
-        final Map map = new HashMap();
+        Map map = new HashMap();
@@ -389,4 +388,4 @@ public class MixedModelTest extends JXPathTestCase {
-        final JXPathContext context = JXPathContext.newContext(map);
-        context.getVariables().declareVariable("x", Integer.valueOf(2));
-        final Iterator it = context.iteratePointers("foo[$x]");
-        final List actual = new ArrayList();
+        JXPathContext context = JXPathContext.newContext(map);
+        context.getVariables().declareVariable("x", new Integer(2));
+        Iterator it = context.iteratePointers("foo[$x]");
+        List actual = new ArrayList();
@@ -394 +393 @@ public class MixedModelTest extends JXPathTestCase {
-            final Pointer ptr = (Pointer) it.next();
+            Pointer ptr = (Pointer) it.next();
@@ -401,2 +400,2 @@ public class MixedModelTest extends JXPathTestCase {
-        final Map map = new HashMap();
-        final Vector vec = new Vector();
+        Map map = new HashMap();
+        Vector vec = new Vector();
@@ -407 +406 @@ public class MixedModelTest extends JXPathTestCase {
-        final JXPathContext context = JXPathContext.newContext(map);
+        JXPathContext context = JXPathContext.newContext(map);
@@ -423 +422 @@ public class MixedModelTest extends JXPathTestCase {
-        catch (final Throwable t) {
+        catch (Throwable t) {
@@ -450 +449 @@ public class MixedModelTest extends JXPathTestCase {
-            Integer.valueOf(3),
+            new Integer(3),
@@ -453 +452 @@ public class MixedModelTest extends JXPathTestCase {
-        context.setValue("$matrix[1]/.[1]", Integer.valueOf(2));
+        context.setValue("$matrix[1]/.[1]", new Integer(2));
@@ -458 +457 @@ public class MixedModelTest extends JXPathTestCase {
-            Integer.valueOf(3),
+            new Integer(3),
@@ -463 +462 @@ public class MixedModelTest extends JXPathTestCase {
-        assertXPathValue(context, "matrix[1]/.[1]", Integer.valueOf(2));
+        assertXPathValue(context, "matrix[1]/.[1]", new Integer(2));
@@ -472 +471 @@ public class MixedModelTest extends JXPathTestCase {
-            Integer.valueOf(2),
+            new Integer(2),
@@ -479 +478 @@ public class MixedModelTest extends JXPathTestCase {
-        catch (final Exception e) {
+        catch (Exception e) {
@@ -488 +487 @@ public class MixedModelTest extends JXPathTestCase {
-        catch (final Exception e) {
+        catch (Exception e) {
@@ -503 +502 @@ public class MixedModelTest extends JXPathTestCase {
-            Integer.valueOf(4),
+            new Integer(4),
@@ -506 +505 @@ public class MixedModelTest extends JXPathTestCase {
-
+    
@@ -511,2 +510,2 @@ public class MixedModelTest extends JXPathTestCase {
-        final List list = new ArrayList();
-        final Map map = new HashMap();
+        List list = new ArrayList();
+        Map map = new HashMap();
@@ -515,2 +514,2 @@ public class MixedModelTest extends JXPathTestCase {
-
-        final Map map2 = new HashMap();
+        
+        Map map2 = new HashMap();
@@ -519 +518 @@ public class MixedModelTest extends JXPathTestCase {
-
+        
@@ -522,2 +521,2 @@ public class MixedModelTest extends JXPathTestCase {
-
-        final List list2 = new ArrayList();
+        
+        List list2 = new ArrayList();
@@ -528 +527 @@ public class MixedModelTest extends JXPathTestCase {
-
+        
@@ -530 +529 @@ public class MixedModelTest extends JXPathTestCase {
-
+        
@@ -533,3 +532,3 @@ public class MixedModelTest extends JXPathTestCase {
-        assertEquals(Integer.valueOf(3), context.getValue("size(.[1]/KeyThree)"));
-        assertEquals(Double.valueOf(6.0), context.getValue("count(.[1]/KeyThree/*)"));
-        assertEquals(Double.valueOf(3.0), context.getValue("count(.[1]/KeyThree/KeyA)"));
+        assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)"));
+        assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)"));
+        assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)"));
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/TestMixedModelFactory.java b/src/test/java/org/apache/commons/jxpath/ri/model/TestMixedModelFactory.java
index ee06f4e4..cf85e289 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/TestMixedModelFactory.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/TestMixedModelFactory.java
@@ -38 +37,0 @@ public class TestMixedModelFactory extends AbstractFactory {
-    @Override
@@ -40,5 +39,5 @@ public class TestMixedModelFactory extends AbstractFactory {
-        final JXPathContext context,
-        final Pointer pointer,
-        final Object parent,
-        final String name,
-        final int index)
+        JXPathContext context,
+        Pointer pointer,
+        Object parent,
+        String name,
+        int index) 
@@ -51 +50 @@ public class TestMixedModelFactory extends AbstractFactory {
-            final TestBean bean = (TestBean) parent;
+            TestBean bean = (TestBean) parent;
@@ -63 +62 @@ public class TestMixedModelFactory extends AbstractFactory {
-            final TestBean tb = new TestBean();
+            TestBean tb = new TestBean();
@@ -70 +69 @@ public class TestMixedModelFactory extends AbstractFactory {
-            final int[][] matrix = new int[2][];
+            int[][] matrix = new int[2][];
@@ -79,2 +78 @@ public class TestMixedModelFactory extends AbstractFactory {
-    @Override
-    public boolean declareVariable(final JXPathContext context, final String name) {
+    public boolean declareVariable(JXPathContext context, String name) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java b/src/test/java/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java
index 4939cf9c..54700c59 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java
@@ -37 +36,0 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-    @Override
@@ -40 +39 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-            final DocumentContainer docCtr = createDocumentContainer();
+            DocumentContainer docCtr = createDocumentContainer();
@@ -42 +41 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-            final Variables vars = context.getVariables();
+            Variables vars = context.getVariables();
@@ -56 +55 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-
+    
@@ -58 +57 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-
+        
@@ -60 +59 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        final JXPathContext context =
+        JXPathContext context =
@@ -80,7 +79,7 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        final JXPathContext context,
-        final String path,
-        final String signature,
-        final boolean elements,
-        final boolean attributes,
-        final boolean text,
-        final boolean pi)
+        JXPathContext context,
+        String path,
+        String signature,
+        boolean elements,
+        boolean attributes,
+        boolean text,
+        boolean pi) 
@@ -88,2 +87,2 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        final Object node = context.getPointer(path).getNode();
-        final String sig = getXMLSignature(node, elements, attributes, text, pi);
+        Object node = context.getPointer(path).getNode();
+        String sig = getXMLSignature(node, elements, attributes, text, pi);
@@ -114 +113 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-
+    
@@ -182 +181 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-
+         
@@ -184 +183 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-
+         
@@ -223 +222 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-
+        
@@ -229 +228 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-
+        
@@ -235 +234 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-
+        
@@ -237 +236 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-
+        
@@ -260 +259 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-            Double.valueOf(0),
+            new Double(0),
@@ -266 +265 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-            Double.valueOf(0),
+            new Double(0),
@@ -272,2 +271 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-            @Override
-            public Pointer getPointerByID(final JXPathContext context, final String id) {
+            public Pointer getPointerByID(JXPathContext context, String id) {
@@ -303 +301 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-
+        
@@ -309 +307 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-
+        
@@ -333 +331 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-
+        
@@ -335 +333 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-
+        
@@ -341 +339 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        catch (final JXPathException ex) {
+        catch (JXPathException ex) {
@@ -345 +343 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-
+                
@@ -351 +349 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        catch (final JXPathException ex) {
+        catch (JXPathException ex) {
@@ -355 +353 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-
+        
@@ -360 +358 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-            Double.valueOf(2));
+            new Double(2));
@@ -363 +361 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(vendor/product/*)", Double.valueOf(4));
+        assertXPathValue(context, "count(vendor/product/*)", new Double(4));
@@ -367 +365 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-
+        
@@ -385 +383 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(//price:*)", Double.valueOf(2));
+        assertXPathValue(context, "count(//price:*)", new Double(2));
@@ -401 +399 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-
+    
@@ -487 +485 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-
+        
@@ -555 +553 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-
+        
@@ -576 +574 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-
+        
@@ -595 +593 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-            Double.valueOf(3));
+            new Double(3));
@@ -752 +750 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-            Double.valueOf(10));
+            new Double(10));
@@ -764 +762 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-            Double.valueOf(11));
+            new Double(11));
@@ -789 +787 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-
+    
@@ -801,6 +799,6 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        assertEquals("Context node namespace resolution",
-                "priceNS",
-                context.getNamespaceURI("price"));
-
-        assertEquals("Registered namespace resolution",
-                "priceNS",
+        assertEquals("Context node namespace resolution", 
+                "priceNS", 
+                context.getNamespaceURI("price"));        
+        
+        assertEquals("Registered namespace resolution", 
+                "priceNS", 
@@ -810,3 +808,3 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        assertXPathValue(context,
-                "count(vendor/product/rate:*)",
-                Double.valueOf(2));
+        assertXPathValue(context, 
+                "count(vendor/product/rate:*)", 
+                new Double(2));
@@ -828,3 +826,3 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-
-        // Same, but with a child context
-        final JXPathContext childCtx =
+        
+        // Same, but with a child context        
+        JXPathContext childCtx = 
@@ -836,3 +834,3 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-
-        // Same, but with a relative context
-        final JXPathContext relativeCtx =
+        
+        // Same, but with a relative context        
+        JXPathContext relativeCtx = 
@@ -852 +850 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        final Pointer pointer = context.getPointer("/vendor[1]/contact[1]");
+        Pointer pointer = context.getPointer("/vendor[1]/contact[1]");
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/XMLPreserveSpaceTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/XMLPreserveSpaceTest.java
index 5deff557..9b3025b7 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/XMLPreserveSpaceTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/XMLPreserveSpaceTest.java
@@ -29 +29 @@ public class XMLPreserveSpaceTest extends JXPathTestCase {
-    protected DocumentContainer createDocumentContainer(final String model) {
+    protected DocumentContainer createDocumentContainer(String model) {
@@ -34,2 +34,2 @@ public class XMLPreserveSpaceTest extends JXPathTestCase {
-    protected JXPathContext createContext(final String model) {
-        final JXPathContext context = JXPathContext
+    protected JXPathContext createContext(String model) {
+        JXPathContext context = JXPathContext
@@ -40,2 +40,2 @@ public class XMLPreserveSpaceTest extends JXPathTestCase {
-    protected void doTest(final String id, final String model, final String expectedValue) {
-        final JXPathContext context = JXPathContext
+    protected void doTest(String id, String model, String expectedValue) {
+        JXPathContext context = JXPathContext
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java
index bdbe0ab4..17f90354 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java
@@ -29 +29 @@ public class XMLSpaceTest extends JXPathTestCase {
-    protected DocumentContainer createDocumentContainer(final String model) {
+    protected DocumentContainer createDocumentContainer(String model) {
@@ -34,2 +34,2 @@ public class XMLSpaceTest extends JXPathTestCase {
-    protected JXPathContext createContext(final String model) {
-        final JXPathContext context = JXPathContext
+    protected JXPathContext createContext(String model) {
+        JXPathContext context = JXPathContext
@@ -40,2 +40,2 @@ public class XMLSpaceTest extends JXPathTestCase {
-    protected void doTest(final String id, final String model, final String expectedValue) {
-        final JXPathContext context = JXPathContext
+    protected void doTest(String id, String model, String expectedValue) {
+        JXPathContext context = JXPathContext
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/XMLUpperCaseElementsTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/XMLUpperCaseElementsTest.java
index afa65c48..ecefaf3b 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/XMLUpperCaseElementsTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/XMLUpperCaseElementsTest.java
@@ -25 +25 @@ import org.apache.commons.jxpath.xml.DocumentContainer;
- *
+ * 
@@ -30 +30 @@ public class XMLUpperCaseElementsTest extends JXPathTestCase {
-    protected DocumentContainer createDocumentContainer(final String model) {
+    protected DocumentContainer createDocumentContainer(String model) {
@@ -34,2 +34,2 @@ public class XMLUpperCaseElementsTest extends JXPathTestCase {
-    protected JXPathContext createContext(final String model) {
-        final JXPathContext context = JXPathContext.newContext(createDocumentContainer(model));
+    protected JXPathContext createContext(String model) {
+        JXPathContext context = JXPathContext.newContext(createDocumentContainer(model));
@@ -39,2 +39,2 @@ public class XMLUpperCaseElementsTest extends JXPathTestCase {
-    protected void doTest(final String id, final String model, final String expectedValue) {
-        final JXPathContext context = JXPathContext.newContext(createDocumentContainer(model));
+    protected void doTest(String id, String model, String expectedValue) {
+        JXPathContext context = JXPathContext.newContext(createDocumentContainer(model));
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/beans/BadlyImplementedFactoryTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/beans/BadlyImplementedFactoryTest.java
index 19b4352b..24fc4a43 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/beans/BadlyImplementedFactoryTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/beans/BadlyImplementedFactoryTest.java
@@ -37 +36,0 @@ public class BadlyImplementedFactoryTest extends TestCase {
-    @Override
@@ -41,2 +40 @@ public class BadlyImplementedFactoryTest extends TestCase {
-            @Override
-            public boolean createObject(final JXPathContext context, final Pointer pointer, final Object parent, final String name, final int index) {
+            public boolean createObject(JXPathContext context, Pointer pointer, Object parent, String name, int index) {
@@ -53 +51 @@ public class BadlyImplementedFactoryTest extends TestCase {
-        } catch (final JXPathException e) {
+        } catch (JXPathException e) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/beans/BeanModelTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/beans/BeanModelTest.java
index 7d4463b6..a37e24fc 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/beans/BeanModelTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/beans/BeanModelTest.java
@@ -30 +29,0 @@ public class BeanModelTest extends BeanModelTestCase {
-    @Override
@@ -35 +33,0 @@ public class BeanModelTest extends BeanModelTestCase {
-    @Override
@@ -39 +37 @@ public class BeanModelTest extends BeanModelTestCase {
-
+    
@@ -41 +39 @@ public class BeanModelTest extends BeanModelTestCase {
-        final JXPathContext context =
+        JXPathContext context =
@@ -43 +41 @@ public class BeanModelTest extends BeanModelTestCase {
-
+            
@@ -47 +45 @@ public class BeanModelTest extends BeanModelTestCase {
-            Integer.valueOf(0),
+            new Integer(0),
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/beans/TestBeanFactory.java b/src/test/java/org/apache/commons/jxpath/ri/model/beans/TestBeanFactory.java
index 6060c3e6..3aa59b96 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/beans/TestBeanFactory.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/beans/TestBeanFactory.java
@@ -33 +32,0 @@ public class TestBeanFactory extends AbstractFactory {
-    @Override
@@ -35,5 +34,5 @@ public class TestBeanFactory extends AbstractFactory {
-        final JXPathContext context,
-        final Pointer pointer,
-        final Object parent,
-        final String name,
-        final int index)
+        JXPathContext context,
+        Pointer pointer,
+        Object parent,
+        String name,
+        int index) 
@@ -46 +45 @@ public class TestBeanFactory extends AbstractFactory {
-            final TestBean bean = (TestBean) parent;
+            TestBean bean = (TestBean) parent;
@@ -54 +53 @@ public class TestBeanFactory extends AbstractFactory {
-            // This will implicitly expand the collection
+            // This will implicitly expand the collection        
@@ -64,2 +63 @@ public class TestBeanFactory extends AbstractFactory {
-    @Override
-    public boolean declareVariable(final JXPathContext context, final String name) {
+    public boolean declareVariable(JXPathContext context, String name) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/beans/TestIndexedPropertyBean.java b/src/test/java/org/apache/commons/jxpath/ri/model/beans/TestIndexedPropertyBean.java
index e54f17f5..3b732b24 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/beans/TestIndexedPropertyBean.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/beans/TestIndexedPropertyBean.java
@@ -25 +25 @@ public class TestIndexedPropertyBean {
-    public int getIndexed(final int i) {
+    public int getIndexed(int i) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/container/ContainerModelTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/container/ContainerModelTest.java
index e04da099..fd037493 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/container/ContainerModelTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/container/ContainerModelTest.java
@@ -36,3 +36 @@ public class ContainerModelTest extends JXPathTestCase {
-        private static final long serialVersionUID = 1L;
-        private final String[] array = {"foo", "bar"};
-        @Override
+        private String[] array = new String[]{"foo", "bar"};
@@ -43,2 +41 @@ public class ContainerModelTest extends JXPathTestCase {
-        @Override
-        public void setValue(final Object value) {
+        public void setValue(Object value) {
@@ -51,2 +48 @@ public class ContainerModelTest extends JXPathTestCase {
-        private static final long serialVersionUID = 1L;
-        private final List list;
+        private List list;
@@ -60 +55,0 @@ public class ContainerModelTest extends JXPathTestCase {
-        @Override
@@ -65,2 +60 @@ public class ContainerModelTest extends JXPathTestCase {
-        @Override
-        public void setValue(final Object value) {
+        public void setValue(Object value) {
@@ -73 +67 @@ public class ContainerModelTest extends JXPathTestCase {
-        private final ListContainer container = new ListContainer();
+        private ListContainer container = new ListContainer();
@@ -79 +73 @@ public class ContainerModelTest extends JXPathTestCase {
-
+        
@@ -81,4 +75,4 @@ public class ContainerModelTest extends JXPathTestCase {
-        final ArrayContainer container = new ArrayContainer();
-        final String[] array = (String[]) container.getValue();
-
-        final JXPathContext context = JXPathContext.newContext(null);
+        ArrayContainer container = new ArrayContainer();
+        String[] array = (String[]) container.getValue();
+        
+        JXPathContext context = JXPathContext.newContext(null);
@@ -86 +80 @@ public class ContainerModelTest extends JXPathTestCase {
-
+        
@@ -90 +84 @@ public class ContainerModelTest extends JXPathTestCase {
-
+        
@@ -94 +88 @@ public class ContainerModelTest extends JXPathTestCase {
-
+    
@@ -96,6 +90,6 @@ public class ContainerModelTest extends JXPathTestCase {
-        final Bean bean = new Bean();
-        final List list = (List) bean.getContainer().getValue();
-
-        final JXPathContext context = JXPathContext.newContext(bean);
-
-        assertXPathValueAndPointer(context, "/container",
+        Bean bean = new Bean();
+        List list = (List) bean.getContainer().getValue();
+        
+        JXPathContext context = JXPathContext.newContext(bean);
+        
+        assertXPathValueAndPointer(context, "/container", 
@@ -107 +101 @@ public class ContainerModelTest extends JXPathTestCase {
-
+        
@@ -111 +105 @@ public class ContainerModelTest extends JXPathTestCase {
-
+    
@@ -113,4 +107,4 @@ public class ContainerModelTest extends JXPathTestCase {
-        final ListContainer container = new ListContainer();
-        final List list = (List) container.getValue();
-
-        final Map map = new HashMap();
+        ListContainer container = new ListContainer();
+        List list = (List) container.getValue();
+                
+        Map map = new HashMap();
@@ -118,4 +112,4 @@ public class ContainerModelTest extends JXPathTestCase {
-
-        final JXPathContext context = JXPathContext.newContext(map);
-
-        assertXPathValueAndPointer(context, "/container",
+        
+        JXPathContext context = JXPathContext.newContext(map);
+        
+        assertXPathValueAndPointer(context, "/container", 
@@ -127 +121 @@ public class ContainerModelTest extends JXPathTestCase {
-
+        
@@ -131 +125 @@ public class ContainerModelTest extends JXPathTestCase {
-
+    
@@ -133,4 +127,4 @@ public class ContainerModelTest extends JXPathTestCase {
-        final ArrayContainer container = new ArrayContainer();
-        final String[] array = (String[]) container.getValue();
-
-        final JXPathContext context = JXPathContext.newContext(container);
+        ArrayContainer container = new ArrayContainer();
+        String[] array = (String[]) container.getValue();
+        
+        JXPathContext context = JXPathContext.newContext(container);
@@ -138 +132 @@ public class ContainerModelTest extends JXPathTestCase {
-
+        
@@ -142 +136 @@ public class ContainerModelTest extends JXPathTestCase {
-
+        
@@ -145 +139 @@ public class ContainerModelTest extends JXPathTestCase {
-
+    
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/dom/DOMModelTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/dom/DOMModelTest.java
index 094ffd59..4a4d361b 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/dom/DOMModelTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/dom/DOMModelTest.java
@@ -36 +35,0 @@ public class DOMModelTest extends XMLModelTestCase {
-    @Override
@@ -41 +39,0 @@ public class DOMModelTest extends XMLModelTestCase {
-    @Override
@@ -45 +43 @@ public class DOMModelTest extends XMLModelTestCase {
-
+    
@@ -54 +52 @@ public class DOMModelTest extends XMLModelTestCase {
-        final JXPathContext childContext = context.getRelativeContext(context.getPointer("/vendor"));
+        JXPathContext childContext = context.getRelativeContext(context.getPointer("/vendor"));
@@ -59 +56,0 @@ public class DOMModelTest extends XMLModelTestCase {
-    @Override
@@ -61,5 +58,5 @@ public class DOMModelTest extends XMLModelTestCase {
-        final Object node,
-        final boolean elements,
-        final boolean attributes,
-        final boolean text,
-        final boolean pi)
+        Object node,
+        boolean elements,
+        boolean attributes,
+        boolean text,
+        boolean pi) 
@@ -67 +64 @@ public class DOMModelTest extends XMLModelTestCase {
-        final StringBuffer buffer = new StringBuffer();
+        StringBuffer buffer = new StringBuffer();
@@ -73,6 +70,6 @@ public class DOMModelTest extends XMLModelTestCase {
-        final StringBuffer buffer,
-        final Object object,
-        final boolean elements,
-        final boolean attributes,
-        final boolean text,
-        final boolean pi)
+        StringBuffer buffer,
+        Object object,
+        boolean elements,
+        boolean attributes,
+        boolean text,
+        boolean pi) 
@@ -80,2 +77,2 @@ public class DOMModelTest extends XMLModelTestCase {
-        final Node node = (Node) object;
-        final int type = node.getNodeType();
+        Node node = (Node) object;
+        int type = node.getNodeType();
@@ -96 +93 @@ public class DOMModelTest extends XMLModelTestCase {
-                final String tag = elements ? ((Element) node).getTagName() : "E";
+                String tag = elements ? ((Element) node).getTagName() : "E";
@@ -124,6 +121,6 @@ public class DOMModelTest extends XMLModelTestCase {
-        final StringBuffer buffer,
-        final NodeList children,
-        final boolean elements,
-        final boolean attributes,
-        final boolean text,
-        final boolean pi)
+        StringBuffer buffer,
+        NodeList children,
+        boolean elements,
+        boolean attributes,
+        boolean text,
+        boolean pi) 
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/dom/TestDOMFactory.java b/src/test/java/org/apache/commons/jxpath/ri/model/dom/TestDOMFactory.java
index 538f0821..6d67cdae 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/dom/TestDOMFactory.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/dom/TestDOMFactory.java
@@ -33 +32,0 @@ public class TestDOMFactory extends AbstractFactory {
-    @Override
@@ -35,5 +34,5 @@ public class TestDOMFactory extends AbstractFactory {
-        final JXPathContext context,
-        final Pointer pointer,
-        final Object parent,
-        final String name,
-        final int index)
+        JXPathContext context,
+        Pointer pointer,
+        Object parent,
+        String name,
+        int index) 
@@ -48 +47 @@ public class TestDOMFactory extends AbstractFactory {
-            final String namespaceURI = context.getNamespaceURI("price");
+            String namespaceURI = context.getNamespaceURI("price");
@@ -55 +54 @@ public class TestDOMFactory extends AbstractFactory {
-    private void addDOMElement(final Node parent, final int index, final String tag, final String namespaceURI) {
+    private void addDOMElement(Node parent, int index, String tag, String namespaceURI) {
@@ -67 +66 @@ public class TestDOMFactory extends AbstractFactory {
-            final Document doc = parent.getOwnerDocument();
+            Document doc = parent.getOwnerDocument();
@@ -71 +70 @@ public class TestDOMFactory extends AbstractFactory {
-            }
+            } 
@@ -75 +74 @@ public class TestDOMFactory extends AbstractFactory {
-
+       
@@ -81,2 +80 @@ public class TestDOMFactory extends AbstractFactory {
-    @Override
-    public boolean declareVariable(final JXPathContext context, final String name) {
+    public boolean declareVariable(JXPathContext context, String name) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanModelTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanModelTest.java
index 4615a8e1..a3348d50 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanModelTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanModelTest.java
@@ -30 +29,0 @@ public class DynaBeanModelTest extends BeanModelTestCase {
-    @Override
@@ -35 +33,0 @@ public class DynaBeanModelTest extends BeanModelTestCase {
-    @Override
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/dynabeans/LazyDynaBeanTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/dynabeans/LazyDynaBeanTest.java
index 5df0621b..36988d55 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/dynabeans/LazyDynaBeanTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/dynabeans/LazyDynaBeanTest.java
@@ -26 +26 @@ import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
- *
+ * 
@@ -31,2 +31,2 @@ public class LazyDynaBeanTest extends JXPathTestCase {
-        final LazyDynaBean bean = new LazyDynaBean();
-        final JXPathContext context = JXPathContext.newContext(bean);
+        LazyDynaBean bean = new LazyDynaBean();
+        JXPathContext context = JXPathContext.newContext(bean);
@@ -42 +42 @@ public class LazyDynaBeanTest extends JXPathTestCase {
-        } catch (final JXPathNotFoundException e) {
+        } catch (JXPathNotFoundException e) {
@@ -45,3 +45,2 @@ public class LazyDynaBeanTest extends JXPathTestCase {
-            while (JXPathContextReferenceImpl.removeNodePointerFactory(factory)) {
-
-            }
+            while (JXPathContextReferenceImpl.removeNodePointerFactory(factory))
+                ;
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/dynabeans/TestDynaBeanFactory.java b/src/test/java/org/apache/commons/jxpath/ri/model/dynabeans/TestDynaBeanFactory.java
index a16eb107..ffe6aa7d 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/dynabeans/TestDynaBeanFactory.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/dynabeans/TestDynaBeanFactory.java
@@ -32 +31,0 @@ public class TestDynaBeanFactory extends AbstractFactory {
-    @Override
@@ -34,5 +33,5 @@ public class TestDynaBeanFactory extends AbstractFactory {
-        final JXPathContext context,
-        final Pointer pointer,
-        final Object parent,
-        final String name,
-        final int index)
+        JXPathContext context,
+        Pointer pointer,
+        Object parent,
+        String name,
+        int index) 
@@ -47 +46 @@ public class TestDynaBeanFactory extends AbstractFactory {
-            final DynaBean bean = (DynaBean) parent;
+            DynaBean bean = (DynaBean) parent;
@@ -57,2 +56,2 @@ public class TestDynaBeanFactory extends AbstractFactory {
-            final DynaBean bean = (DynaBean) parent;
-            bean.set("integers", index, Integer.valueOf(0));
+            DynaBean bean = (DynaBean) parent;
+            bean.set("integers", index, new Integer(0));
@@ -66,2 +65 @@ public class TestDynaBeanFactory extends AbstractFactory {
-    @Override
-    public boolean declareVariable(final JXPathContext context, final String name) {
+    public boolean declareVariable(JXPathContext context, String name) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertiesModelTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertiesModelTest.java
index dbc78379..fd9441f9 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertiesModelTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertiesModelTest.java
@@ -35 +34,0 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-    @Override
@@ -99 +98 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-
+                        
@@ -101 +100 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-
+        
@@ -116 +115 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        assertXPathSetValue(context, "map/Key1", Integer.valueOf(6));
+        assertXPathSetValue(context, "map/Key1", new Integer(6));
@@ -120 +119 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        // See if we can assign a whole collection
+        // See if we can assign a whole collection        
@@ -123 +122 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-            new Integer[] { Integer.valueOf(7), Integer.valueOf(8)});
+            new Integer[] { new Integer(7), new Integer(8)});
@@ -126 +125 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        assertXPathSetValue(context, "map/Key1[1]", Integer.valueOf(9));
+        assertXPathSetValue(context, "map/Key1[1]", new Integer(9));
@@ -135,2 +134,2 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        assertXPathSetValue(context, "map/Key4", Integer.valueOf(7));
-
+        assertXPathSetValue(context, "map/Key4", new Integer(7));
+        
@@ -139,2 +138,2 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-
-        assertXPathSetValue(context, "//map/Key5", Integer.valueOf(8));
+        
+        assertXPathSetValue(context, "//map/Key5", new Integer(8));
@@ -144 +143 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        final TestBean bean = (TestBean) context.getContextBean();
+        TestBean bean = (TestBean) context.getContextBean();
@@ -157 +156 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        final TestBean bean = (TestBean) context.getContextBean();
+        TestBean bean = (TestBean) context.getContextBean();
@@ -170 +169 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        final TestBean bean = (TestBean) context.getContextBean();
+        TestBean bean = (TestBean) context.getContextBean();
@@ -179 +178 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-            Integer.valueOf(1),
+            new Integer(1),
@@ -184 +183 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        final TestBean bean = (TestBean) context.getContextBean();
+        TestBean bean = (TestBean) context.getContextBean();
@@ -193 +192 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-            Integer.valueOf(4),
+            new Integer(4),
@@ -198 +197 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        final TestBean bean = (TestBean) context.getContextBean();
+        TestBean bean = (TestBean) context.getContextBean();
@@ -216 +215 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        final TestBean bean = (TestBean) context.getContextBean();
+        TestBean bean = (TestBean) context.getContextBean();
@@ -234 +233 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        final TestBean bean = (TestBean) context.getContextBean();
+        TestBean bean = (TestBean) context.getContextBean();
@@ -241 +240 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-            Integer.valueOf(1),
+            new Integer(1),
@@ -250 +249 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-            Integer.valueOf(1),
+            new Integer(1),
@@ -255 +254 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        final TestBean bean = (TestBean) context.getContextBean();
+        TestBean bean = (TestBean) context.getContextBean();
@@ -262 +261 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-            Integer.valueOf(2),
+            new Integer(2),
@@ -271 +270 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-            Integer.valueOf(3),
+            new Integer(3),
@@ -276 +275 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        final TestBean bean = (TestBean) context.getContextBean();
+        TestBean bean = (TestBean) context.getContextBean();
@@ -288 +287 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        final TestBean bean = (TestBean) context.getContextBean();
+        TestBean bean = (TestBean) context.getContextBean();
@@ -297 +296 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-
+    
@@ -299,2 +298,2 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        final TestBean bean = (TestBean) context.getContextBean();
-        final List list = new ArrayList();
+        TestBean bean = (TestBean) context.getContextBean();
+        List list = new ArrayList();
@@ -302 +301 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        bean.getMap().put("stuff", list);
+        bean.getMap().put("stuff", list);        
@@ -324 +323 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-            list("apple", "banana"));
+            list("apple", "banana"));        
@@ -328 +327 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        final TestBean bean = (TestBean) context.getContextBean();
+        TestBean bean = (TestBean) context.getContextBean();
@@ -330 +329 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        final Map fruit = new HashMap();
+        Map fruit = new HashMap();
@@ -333,2 +332,2 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-
-        final Map meat = new HashMap();
+        
+        Map meat = new HashMap();
@@ -337,4 +336,4 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-
-        bean.getMap().put("fruit", fruit);
-        bean.getMap().put("meat", meat);
-
+        
+        bean.getMap().put("fruit", fruit);        
+        bean.getMap().put("meat", meat);        
+                
@@ -345 +344 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-
+        
@@ -353,2 +352,2 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-
-        // Unambiguous, even though the particular key is missing
+        
+        // Unambiguous, even though the particular key is missing 
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/dynamic/TestDynamicPropertyFactory.java b/src/test/java/org/apache/commons/jxpath/ri/model/dynamic/TestDynamicPropertyFactory.java
index 0386eb18..770e0955 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/dynamic/TestDynamicPropertyFactory.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/dynamic/TestDynamicPropertyFactory.java
@@ -38 +37,0 @@ public class TestDynamicPropertyFactory extends AbstractFactory {
-    @Override
@@ -40,5 +39,5 @@ public class TestDynamicPropertyFactory extends AbstractFactory {
-        final JXPathContext context,
-        final Pointer pointer,
-        final Object parent,
-        final String name,
-        final int index)
+        JXPathContext context,
+        Pointer pointer,
+        Object parent,
+        String name,
+        int index) 
@@ -59 +58 @@ public class TestDynamicPropertyFactory extends AbstractFactory {
-            final Vector v = new Vector();
+            Vector v = new Vector();
@@ -73,2 +72 @@ public class TestDynamicPropertyFactory extends AbstractFactory {
-    @Override
-    public boolean declareVariable(final JXPathContext context, final String name) {
+    public boolean declareVariable(JXPathContext context, String name) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/jdom/JDOMModelTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/jdom/JDOMModelTest.java
index 4f241a72..12631f6b 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/jdom/JDOMModelTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/jdom/JDOMModelTest.java
@@ -37 +36,0 @@ public class JDOMModelTest extends XMLModelTestCase {
-    @Override
@@ -41 +40 @@ public class JDOMModelTest extends XMLModelTestCase {
-
+    
@@ -50 +49 @@ public class JDOMModelTest extends XMLModelTestCase {
-        final JXPathContext childContext = context.getRelativeContext(context.getPointer("/vendor"));
+        JXPathContext childContext = context.getRelativeContext(context.getPointer("/vendor"));
@@ -55 +53,0 @@ public class JDOMModelTest extends XMLModelTestCase {
-    @Override
@@ -60 +57,0 @@ public class JDOMModelTest extends XMLModelTestCase {
-    @Override
@@ -65 +61,0 @@ public class JDOMModelTest extends XMLModelTestCase {
-    @Override
@@ -67,5 +63,5 @@ public class JDOMModelTest extends XMLModelTestCase {
-        final Object node,
-        final boolean elements,
-        final boolean attributes,
-        final boolean text,
-        final boolean pi)
+        Object node,
+        boolean elements,
+        boolean attributes,
+        boolean text,
+        boolean pi) 
@@ -73 +69 @@ public class JDOMModelTest extends XMLModelTestCase {
-        final StringBuffer buffer = new StringBuffer();
+        StringBuffer buffer = new StringBuffer();
@@ -79,6 +75,6 @@ public class JDOMModelTest extends XMLModelTestCase {
-        final StringBuffer buffer,
-        final Object object,
-        final boolean elements,
-        final boolean attributes,
-        final boolean text,
-        final boolean pi)
+        StringBuffer buffer,
+        Object object,
+        boolean elements,
+        boolean attributes,
+        boolean text,
+        boolean pi) 
@@ -98 +94 @@ public class JDOMModelTest extends XMLModelTestCase {
-            final String tag = elements ? ((Element) object).getName() : "E";
+            String tag = elements ? ((Element) object).getName() : "E";
@@ -123,6 +119,6 @@ public class JDOMModelTest extends XMLModelTestCase {
-        final StringBuffer buffer,
-        final List children,
-        final boolean elements,
-        final boolean attributes,
-        final boolean text,
-        final boolean pi)
+        StringBuffer buffer,
+        List children,
+        boolean elements,
+        boolean attributes,
+        boolean text,
+        boolean pi) 
@@ -130 +126 @@ public class JDOMModelTest extends XMLModelTestCase {
-        for (final Object child : children) {
+        for (int i = 0; i < children.size(); i++) {
@@ -133 +129 @@ public class JDOMModelTest extends XMLModelTestCase {
-                child,
+                children.get(i),
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/jdom/TestJDOMFactory.java b/src/test/java/org/apache/commons/jxpath/ri/model/jdom/TestJDOMFactory.java
index a6e88ce4..43dd4a9b 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/jdom/TestJDOMFactory.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/jdom/TestJDOMFactory.java
@@ -35 +34,0 @@ public class TestJDOMFactory extends AbstractFactory {
-    @Override
@@ -37,5 +36,5 @@ public class TestJDOMFactory extends AbstractFactory {
-        final JXPathContext context,
-        final Pointer pointer,
-        final Object parent,
-        final String name,
-        final int index)
+        JXPathContext context,
+        Pointer pointer,
+        Object parent,
+        String name,
+        int index) 
@@ -50 +49 @@ public class TestJDOMFactory extends AbstractFactory {
-            final String namespaceURI = context.getNamespaceURI("price");
+            String namespaceURI = context.getNamespaceURI("price");
@@ -58,2 +57,2 @@ public class TestJDOMFactory extends AbstractFactory {
-    private void addJDOMElement(final Element parent, final int index, String tag, final String namespaceURI) {
-        final List children = parent.getContent();
+    private void addJDOMElement(Element parent, int index, String tag, String namespaceURI) {
+        List children = parent.getContent();
@@ -61 +60,2 @@ public class TestJDOMFactory extends AbstractFactory {
-        for (final Object child : children) {
+        for (int i = 0; i < children.size(); i++) {
+            Object child = children.get(i);
@@ -74 +74 @@ public class TestJDOMFactory extends AbstractFactory {
-                final String prefix = tag.substring(0, tag.indexOf(':'));
+                String prefix = tag.substring(0, tag.indexOf(':'));
@@ -86,2 +86 @@ public class TestJDOMFactory extends AbstractFactory {
-    @Override
-    public boolean declareVariable(final JXPathContext context, final String name) {
+    public boolean declareVariable(JXPathContext context, String name) {
diff --git a/src/test/java/org/apache/commons/jxpath/servlet/JXPathServletContextTest.java b/src/test/java/org/apache/commons/jxpath/servlet/JXPathServletContextTest.java
index 8365921b..f1594670 100644
--- a/src/test/java/org/apache/commons/jxpath/servlet/JXPathServletContextTest.java
+++ b/src/test/java/org/apache/commons/jxpath/servlet/JXPathServletContextTest.java
@@ -40 +40 @@ public class JXPathServletContextTest extends TestCase {
-        final MockServletContext context = new MockServletContext();
+        MockServletContext context = new MockServletContext();
@@ -45 +45 @@ public class JXPathServletContextTest extends TestCase {
-
+    
@@ -47,2 +47,2 @@ public class JXPathServletContextTest extends TestCase {
-        final ServletContext context = getServletContext();
-        final JXPathContext appContext = JXPathServletContexts.getApplicationContext(context);
+        ServletContext context = getServletContext();
+        JXPathContext appContext = JXPathServletContexts.getApplicationContext(context);
@@ -61 +61 @@ public class JXPathServletContextTest extends TestCase {
-        final Variables variables = appContext.getVariables();
+        Variables variables = appContext.getVariables();
@@ -67 +67 @@ public class JXPathServletContextTest extends TestCase {
-        final ServletContext context = getServletContext();
+        ServletContext context = getServletContext();
@@ -69 +69 @@ public class JXPathServletContextTest extends TestCase {
-        final MockHttpSession session = new MockHttpSession();
+        MockHttpSession session = new MockHttpSession();
@@ -72 +72 @@ public class JXPathServletContextTest extends TestCase {
-        final Integer count = Integer.valueOf(10);
+        Integer count = new Integer(10);
@@ -75 +75 @@ public class JXPathServletContextTest extends TestCase {
-        final MockHttpServletRequest request = new MockHttpServletRequest();
+        MockHttpServletRequest request = new MockHttpServletRequest();
@@ -84 +84 @@ public class JXPathServletContextTest extends TestCase {
-        final JXPathContext reqContext = JXPathServletContexts.getRequestContext(request, context);
+        JXPathContext reqContext = JXPathServletContexts.getRequestContext(request, context);
@@ -88 +88 @@ public class JXPathServletContextTest extends TestCase {
-        final JXPathContext sessionContext = JXPathServletContexts.getSessionContext(session, context);
+        JXPathContext sessionContext = JXPathServletContexts.getSessionContext(session, context);
@@ -115 +115 @@ public class JXPathServletContextTest extends TestCase {
-        final ServletContext context = getServletContext();
+        ServletContext context = getServletContext();
@@ -117 +117 @@ public class JXPathServletContextTest extends TestCase {
-        final MockHttpServletRequest request = new MockHttpServletRequest();
+        MockHttpServletRequest request = new MockHttpServletRequest();
@@ -119 +119 @@ public class JXPathServletContextTest extends TestCase {
-        final JXPathContext reqContext = JXPathServletContexts.getRequestContext(request, context);
+        JXPathContext reqContext = JXPathServletContexts.getRequestContext(request, context);
@@ -124,2 +124,2 @@ public class JXPathServletContextTest extends TestCase {
-    private void checkPointerIterator(final JXPathContext context) {
-        final Iterator it = context.iteratePointers("/*");
+    private void checkPointerIterator(JXPathContext context) {
+        Iterator it = context.iteratePointers("/*");
@@ -129 +129 @@ public class JXPathServletContextTest extends TestCase {
-            final Pointer pointer = (Pointer) it.next();
+            Pointer pointer = (Pointer) it.next();
@@ -136 +136 @@ public class JXPathServletContextTest extends TestCase {
-        final MockServletContext servletContext = new MockServletContext();
+        MockServletContext servletContext = new MockServletContext();
@@ -139 +139 @@ public class JXPathServletContextTest extends TestCase {
-        final MockServletConfig servletConfig = new MockServletConfig();
+        MockServletConfig servletConfig = new MockServletConfig();
@@ -142 +142 @@ public class JXPathServletContextTest extends TestCase {
-        final MockHttpSession session = new MockHttpSession();
+        MockHttpSession session = new MockHttpSession();
@@ -146 +146 @@ public class JXPathServletContextTest extends TestCase {
-        final MockHttpServletRequest request = new MockHttpServletRequest();
+        MockHttpServletRequest request = new MockHttpServletRequest();
@@ -150 +150 @@ public class JXPathServletContextTest extends TestCase {
-        final MockPageContext pageContext = new MockPageContext();
+        MockPageContext pageContext = new MockPageContext();
@@ -158 +158 @@ public class JXPathServletContextTest extends TestCase {
-        final JXPathContext context = JXPathServletContexts.getPageContext(pageContext);
+        JXPathContext context = JXPathServletContexts.getPageContext(pageContext);
@@ -160 +160 @@ public class JXPathServletContextTest extends TestCase {
-
+        
@@ -174 +174 @@ public class JXPathServletContextTest extends TestCase {
-        final Iterator it = context.iteratePointers("$page/*");
+        Iterator it = context.iteratePointers("$page/*");
diff --git a/src/test/java/org/apache/commons/jxpath/util/BasicTypeConverterTest.java b/src/test/java/org/apache/commons/jxpath/util/BasicTypeConverterTest.java
index 77c7ef82..6a319ace 100644
--- a/src/test/java/org/apache/commons/jxpath/util/BasicTypeConverterTest.java
+++ b/src/test/java/org/apache/commons/jxpath/util/BasicTypeConverterTest.java
@@ -34 +34 @@ import org.apache.commons.jxpath.Pointer;
- *
+ * 
@@ -39 +39 @@ public class BasicTypeConverterTest extends TestCase {
-        assertConversion(Integer.valueOf(1), String.class, "1");
+        assertConversion(new Integer(1), String.class, "1");
@@ -46 +46 @@ public class BasicTypeConverterTest extends TestCase {
-            Arrays.asList(new Object[] { Integer.valueOf(1), Integer.valueOf(2)}));
+            Arrays.asList(new Object[] { new Integer(1), new Integer(2)}));
@@ -58 +58 @@ public class BasicTypeConverterTest extends TestCase {
-            Arrays.asList(new Integer[] { Integer.valueOf(1), Integer.valueOf(2)}),
+            Arrays.asList(new Integer[] { new Integer(1), new Integer(2)}),
@@ -65 +65 @@ public class BasicTypeConverterTest extends TestCase {
-            Arrays.asList(new Integer[] { Integer.valueOf(1), Integer.valueOf(2)}));
+            Arrays.asList(new Integer[] { new Integer(1), new Integer(2)}));
@@ -73 +73 @@ public class BasicTypeConverterTest extends TestCase {
-        catch (final Throwable ex) {
+        catch (Throwable ex) {
@@ -79,2 +79,2 @@ public class BasicTypeConverterTest extends TestCase {
-    public void assertConversion(final Object from, final Class toType, final Object expected) {
-        final boolean can = TypeUtils.canConvert(from, toType);
+    public void assertConversion(Object from, Class toType, Object expected) {
+        boolean can = TypeUtils.canConvert(from, toType);
@@ -84 +84 @@ public class BasicTypeConverterTest extends TestCase {
-            final ArrayList list = new ArrayList();
+            ArrayList list = new ArrayList();
@@ -95 +95 @@ public class BasicTypeConverterTest extends TestCase {
-
+    
@@ -106,2 +105,0 @@ public class BasicTypeConverterTest extends TestCase {
-            private static final long serialVersionUID = 1L;
-            @Override
@@ -111 +108,0 @@ public class BasicTypeConverterTest extends TestCase {
-            @Override
@@ -115,2 +112 @@ public class BasicTypeConverterTest extends TestCase {
-            @Override
-            public void setValue(final Object value) {
+            public void setValue(Object value) {
@@ -118 +113,0 @@ public class BasicTypeConverterTest extends TestCase {
-            @Override
@@ -122 +116,0 @@ public class BasicTypeConverterTest extends TestCase {
-            @Override
@@ -126 +119,0 @@ public class BasicTypeConverterTest extends TestCase {
-            @Override
@@ -130,2 +123 @@ public class BasicTypeConverterTest extends TestCase {
-            @Override
-            public int compareTo(final Object o) {
+            public int compareTo(Object o) {
@@ -139 +130,0 @@ public class BasicTypeConverterTest extends TestCase {
-            @Override
@@ -143 +133,0 @@ public class BasicTypeConverterTest extends TestCase {
-            @Override
@@ -147 +136,0 @@ public class BasicTypeConverterTest extends TestCase {
-            @Override
@@ -149 +138 @@ public class BasicTypeConverterTest extends TestCase {
-                final List list = new ArrayList();
+                List list = new ArrayList();
@@ -160 +148,0 @@ public class BasicTypeConverterTest extends TestCase {
-            @Override
@@ -164 +151,0 @@ public class BasicTypeConverterTest extends TestCase {
-            @Override
@@ -168 +154,0 @@ public class BasicTypeConverterTest extends TestCase {
-            @Override
@@ -172,3 +158,3 @@ public class BasicTypeConverterTest extends TestCase {
-        }, Integer.class, Integer.valueOf(9));
-    }
-
+        }, Integer.class, new Integer(9));
+    }    
+    
diff --git a/src/test/java/org/apache/commons/jxpath/util/ClassLoaderUtilTest.java b/src/test/java/org/apache/commons/jxpath/util/ClassLoaderUtilTest.java
index 729f989d..7c0bdfab 100644
--- a/src/test/java/org/apache/commons/jxpath/util/ClassLoaderUtilTest.java
+++ b/src/test/java/org/apache/commons/jxpath/util/ClassLoaderUtilTest.java
@@ -8 +8 @@
- *
+ * 
@@ -10 +10 @@
- *
+ * 
@@ -35 +35 @@ public class ClassLoaderUtilTest extends TestCase {
-
+  
@@ -41 +41 @@ public class ClassLoaderUtilTest extends TestCase {
-
+  
@@ -43 +43 @@ public class ClassLoaderUtilTest extends TestCase {
-
+  
@@ -47,2 +47 @@ public class ClassLoaderUtilTest extends TestCase {
-  @Override
-public void setUp() {
+  public void setUp() {
@@ -51 +50 @@ public void setUp() {
-
+  
@@ -55,2 +54 @@ public void setUp() {
-  @Override
-public void tearDown() {
+  public void tearDown() {
@@ -59 +57 @@ public void tearDown() {
-
+  
@@ -66 +64 @@ public void tearDown() {
-    final ClassLoader cl = new TestClassLoader(getClass().getClassLoader());
+    ClassLoader cl = new TestClassLoader(getClass().getClassLoader());
@@ -69 +67 @@ public void tearDown() {
-
+  
@@ -71 +69 @@ public void tearDown() {
-   * Tests that JXPath can dynamically load a class, which is not visible to
+   * Tests that JXPath can dynamically load a class, which is not visible to 
@@ -77 +75 @@ public void tearDown() {
-    final ClassLoader cl = new TestClassLoader(getClass().getClassLoader());
+    ClassLoader cl = new TestClassLoader(getClass().getClassLoader());
@@ -80 +78 @@ public void tearDown() {
-
+  
@@ -82 +80 @@ public void tearDown() {
-   * Tests that JXPath will use its class loader to dynamically load a
+   * Tests that JXPath will use its class loader to dynamically load a 
@@ -87 +85 @@ public void tearDown() {
-    final ClassLoader cl = new TestClassLoader(getClass().getClassLoader());
+    ClassLoader cl = new TestClassLoader(getClass().getClassLoader());
@@ -91 +89 @@ public void tearDown() {
-
+  
@@ -100 +98 @@ public void tearDown() {
-
+  
@@ -106 +104 @@ public void tearDown() {
-    final JXPathContext context = JXPathContext.newContext(new Object());
+    JXPathContext context = JXPathContext.newContext(new Object());
@@ -110 +108 @@ public void tearDown() {
-    } catch( final Exception e ) {
+    } catch( Exception e ) {
@@ -114 +112 @@ public void tearDown() {
-
+  
@@ -120 +118 @@ public void tearDown() {
-    final JXPathContext context = JXPathContext.newContext(new Object());
+    JXPathContext context = JXPathContext.newContext(new Object());
@@ -125 +123 @@ public void tearDown() {
-    } catch( final Exception e ) {
+    } catch( Exception e ) {
@@ -129 +127 @@ public void tearDown() {
-
+  
@@ -131 +129 @@ public void tearDown() {
-   * Loads this class through the given class loader and then invokes the
+   * Loads this class through the given class loader and then invokes the 
@@ -133 +131 @@ public void tearDown() {
-   *
+   * 
@@ -138 +136 @@ public void tearDown() {
-  private void executeTestMethodUnderClassLoader(final ClassLoader cl, final String methodName) {
+  private void executeTestMethodUnderClassLoader(ClassLoader cl, String methodName) {
@@ -142 +140 @@ public void tearDown() {
-    } catch (final ClassNotFoundException e) {
+    } catch (ClassNotFoundException e) {
@@ -148 +146,3 @@ public void tearDown() {
-    } catch (final SecurityException | NoSuchMethodException e) {
+    } catch (SecurityException e) {
+      fail(e.getMessage());
+    } catch (NoSuchMethodException e) {
@@ -151 +151 @@ public void tearDown() {
-
+    
@@ -154 +154,3 @@ public void tearDown() {
-    } catch (final IllegalArgumentException | IllegalAccessException e) {
+    } catch (IllegalArgumentException e) {
+      fail(e.getMessage());
+    } catch (IllegalAccessException e) {
@@ -156 +158 @@ public void tearDown() {
-    } catch (final InvocationTargetException e) {
+    } catch (InvocationTargetException e) {
@@ -163 +165 @@ public void tearDown() {
-
+  
@@ -165,2 +167,2 @@ public void tearDown() {
-   * A simple class loader which delegates all class loading to its parent
-   * with two exceptions. First, attempts to load the class
+   * A simple class loader which delegates all class loading to its parent 
+   * with two exceptions. First, attempts to load the class 
@@ -169,3 +171,3 @@ public void tearDown() {
-   * <code>org.apache.commons.jxpath.util.ClassLoadingExampleClass</code> will
-   * result in the class being loaded by this class loader, regardless of
-   * whether the parent can/has loaded it.
+   * <code>org.apache.commons.jxpath.util.ClassLoadingExampleClass</code> will 
+   * result in the class being loaded by this class loader, regardless of 
+   * whether the parent can/has loaded it. 
@@ -176,2 +178,2 @@ public void tearDown() {
-
-    public TestClassLoader(final ClassLoader classLoader) {
+    
+    public TestClassLoader(ClassLoader classLoader) {
@@ -181,2 +183 @@ public void tearDown() {
-    @Override
-    public synchronized Class loadClass(final String name, final boolean resolved) throws ClassNotFoundException {
+    public synchronized Class loadClass(String name, boolean resolved) throws ClassNotFoundException {
@@ -188,3 +189,3 @@ public void tearDown() {
-          final URL clazzUrl = this.getParent().getResource("org/apache/commons/jxpath/util/ClassLoaderUtilTest.class");
-
-          final ByteArrayOutputStream out = new ByteArrayOutputStream();
+          URL clazzUrl = this.getParent().getResource("org/apache/commons/jxpath/util/ClassLoaderUtilTest.class");
+          
+          ByteArrayOutputStream out = new ByteArrayOutputStream();
@@ -194 +195 @@ public void tearDown() {
-            final byte[] buffer = new byte[2048];
+            byte[] buffer = new byte[2048];
@@ -198 +199 @@ public void tearDown() {
-          } catch( final IOException e ) {
+          } catch( IOException e ) {
@@ -201,2 +202,2 @@ public void tearDown() {
-            try { in.close(); } catch( final Exception e ) { }
-            try { out.close(); } catch( final Exception e ) { }
+            try { in.close(); } catch( Exception e ) { }
+            try { out.close(); } catch( Exception e ) { }
@@ -204,2 +205,2 @@ public void tearDown() {
-
-          final byte[] clazzBytes = out.toByteArray();
+          
+          byte[] clazzBytes = out.toByteArray();
diff --git a/src/test/java/org/apache/commons/jxpath/util/ClassLoadingExampleClass.java b/src/test/java/org/apache/commons/jxpath/util/ClassLoadingExampleClass.java
index 83ecbaa1..72d87af2 100644
--- a/src/test/java/org/apache/commons/jxpath/util/ClassLoadingExampleClass.java
+++ b/src/test/java/org/apache/commons/jxpath/util/ClassLoadingExampleClass.java
@@ -8 +8 @@
- *
+ * 
@@ -10 +10 @@
- *
+ * 
@@ -22 +22 @@ package org.apache.commons.jxpath.util;
- *
+ * 
diff --git a/src/test/java/org/apache/commons/jxpath/util/ValueUtilsTest.java b/src/test/java/org/apache/commons/jxpath/util/ValueUtilsTest.java
index 7cdff6f1..cd53ed21 100644
--- a/src/test/java/org/apache/commons/jxpath/util/ValueUtilsTest.java
+++ b/src/test/java/org/apache/commons/jxpath/util/ValueUtilsTest.java
@@ -27,2 +27,2 @@ public class ValueUtilsTest extends TestCase {
-
-
+    
+    
@@ -61 +61 @@ public class ValueUtilsTest extends TestCase {
-
+    
