diff --git a/src/main/java/org/apache/commons/jxpath/AbstractFactory.java b/src/main/java/org/apache/commons/jxpath/AbstractFactory.java
index 08504256..fbff7eb6 100644
--- a/src/main/java/org/apache/commons/jxpath/AbstractFactory.java
+++ b/src/main/java/org/apache/commons/jxpath/AbstractFactory.java
@@ -52,2 +52,2 @@ public abstract class AbstractFactory {
-    public boolean createObject(JXPathContext context, Pointer pointer,
-                                Object parent, String name, int index) {
+    public boolean createObject(final JXPathContext context, final Pointer pointer,
+                                final Object parent, final String name, final int index) {
@@ -66 +66 @@ public abstract class AbstractFactory {
-    public boolean declareVariable(JXPathContext context, String name) {
+    public boolean declareVariable(final JXPathContext context, final String name) {
diff --git a/src/main/java/org/apache/commons/jxpath/BasicNodeSet.java b/src/main/java/org/apache/commons/jxpath/BasicNodeSet.java
index 2f70f4eb..aa1a293f 100644
--- a/src/main/java/org/apache/commons/jxpath/BasicNodeSet.java
+++ b/src/main/java/org/apache/commons/jxpath/BasicNodeSet.java
@@ -28 +28 @@ public class BasicNodeSet implements NodeSet {
-    private List pointers = new ArrayList();
+    private final List pointers = new ArrayList();
@@ -37 +37 @@ public class BasicNodeSet implements NodeSet {
-    public void add(Pointer pointer) {
+    public void add(final Pointer pointer) {
@@ -47 +47 @@ public class BasicNodeSet implements NodeSet {
-    public void add(NodeSet nodeSet) {
+    public void add(final NodeSet nodeSet) {
@@ -57 +57 @@ public class BasicNodeSet implements NodeSet {
-    public void remove(Pointer pointer) {
+    public void remove(final Pointer pointer) {
@@ -62,0 +63 @@ public class BasicNodeSet implements NodeSet {
+    @Override
@@ -69,0 +71 @@ public class BasicNodeSet implements NodeSet {
+    @Override
@@ -74 +76 @@ public class BasicNodeSet implements NodeSet {
-                Pointer pointer = (Pointer) pointers.get(i);
+                final Pointer pointer = (Pointer) pointers.get(i);
@@ -81,0 +84 @@ public class BasicNodeSet implements NodeSet {
+    @Override
@@ -86 +89 @@ public class BasicNodeSet implements NodeSet {
-                Pointer pointer = (Pointer) pointers.get(i);
+                final Pointer pointer = (Pointer) pointers.get(i);
@@ -93,0 +97 @@ public class BasicNodeSet implements NodeSet {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/BasicVariables.java b/src/main/java/org/apache/commons/jxpath/BasicVariables.java
index 6b4b5adc..74e8ecdf 100644
--- a/src/main/java/org/apache/commons/jxpath/BasicVariables.java
+++ b/src/main/java/org/apache/commons/jxpath/BasicVariables.java
@@ -30 +30 @@ public class BasicVariables implements Variables {
-    private HashMap vars = new HashMap();
+    private final HashMap vars = new HashMap();
@@ -40 +40,2 @@ public class BasicVariables implements Variables {
-    public boolean isDeclaredVariable(String varName) {
+    @Override
+    public boolean isDeclaredVariable(final String varName) {
@@ -52 +53,2 @@ public class BasicVariables implements Variables {
-    public Object getVariable(String varName) {
+    @Override
+    public Object getVariable(final String varName) {
@@ -70 +72,2 @@ public class BasicVariables implements Variables {
-    public void declareVariable(String varName, Object value) {
+    @Override
+    public void declareVariable(final String varName, final Object value) {
@@ -79 +82,2 @@ public class BasicVariables implements Variables {
-    public void undeclareVariable(String varName) {
+    @Override
+    public void undeclareVariable(final String varName) {
@@ -82,0 +87 @@ public class BasicVariables implements Variables {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ClassFunctions.java b/src/main/java/org/apache/commons/jxpath/ClassFunctions.java
index 0c69d13e..9e77b595 100644
--- a/src/main/java/org/apache/commons/jxpath/ClassFunctions.java
+++ b/src/main/java/org/apache/commons/jxpath/ClassFunctions.java
@@ -52 +52 @@ public class ClassFunctions implements Functions {
-    private static final Object[] EMPTY_ARRAY = new Object[0];
+    private static final Object[] EMPTY_ARRAY = {};
@@ -54,2 +54,2 @@ public class ClassFunctions implements Functions {
-    private Class functionClass;
-    private String namespace;
+    private final Class functionClass;
+    private final String namespace;
@@ -62 +62 @@ public class ClassFunctions implements Functions {
-    public ClassFunctions(Class functionClass, String namespace) {
+    public ClassFunctions(final Class functionClass, final String namespace) {
@@ -71,0 +72 @@ public class ClassFunctions implements Functions {
+    @Override
@@ -87,0 +89 @@ public class ClassFunctions implements Functions {
+    @Override
@@ -89,2 +91,2 @@ public class ClassFunctions implements Functions {
-        String namespace,
-        String name,
+        final String namespace,
+        final String name,
@@ -106 +108 @@ public class ClassFunctions implements Functions {
-            Constructor constructor =
+            final Constructor constructor =
diff --git a/src/main/java/org/apache/commons/jxpath/FunctionLibrary.java b/src/main/java/org/apache/commons/jxpath/FunctionLibrary.java
index a87a778b..dfd4e75c 100644
--- a/src/main/java/org/apache/commons/jxpath/FunctionLibrary.java
+++ b/src/main/java/org/apache/commons/jxpath/FunctionLibrary.java
@@ -40 +40 @@ public class FunctionLibrary implements Functions {
-    public void addFunctions(Functions functions) {
+    public void addFunctions(final Functions functions) {
@@ -51 +51 @@ public class FunctionLibrary implements Functions {
-    public void removeFunctions(Functions functions) {
+    public void removeFunctions(final Functions functions) {
@@ -62,0 +63 @@ public class FunctionLibrary implements Functions {
+    @Override
@@ -75,3 +76,4 @@ public class FunctionLibrary implements Functions {
-    public Function getFunction(String namespace, String name,
-            Object[] parameters) {
-        Object candidates = functionCache().get(namespace);
+    @Override
+    public Function getFunction(final String namespace, final String name,
+            final Object[] parameters) {
+        final Object candidates = functionCache().get(namespace);
@@ -85,2 +87,2 @@ public class FunctionLibrary implements Functions {
-            List list = (List) candidates;
-            int count = list.size();
+            final List list = (List) candidates;
+            final int count = list.size();
@@ -88 +90 @@ public class FunctionLibrary implements Functions {
-                Function function =
+                final Function function =
@@ -108 +110 @@ public class FunctionLibrary implements Functions {
-            int count = allFunctions.size();
+            final int count = allFunctions.size();
@@ -110,5 +112,5 @@ public class FunctionLibrary implements Functions {
-                Functions funcs = (Functions) allFunctions.get(i);
-                Set namespaces = funcs.getUsedNamespaces();
-                for (Iterator it = namespaces.iterator(); it.hasNext();) {
-                    String ns = (String) it.next();
-                    Object candidates = byNamespace.get(ns);
+                final Functions funcs = (Functions) allFunctions.get(i);
+                final Set namespaces = funcs.getUsedNamespaces();
+                for (final Iterator it = namespaces.iterator(); it.hasNext();) {
+                    final String ns = (String) it.next();
+                    final Object candidates = byNamespace.get(ns);
@@ -119 +121 @@ public class FunctionLibrary implements Functions {
-                        List lst = new ArrayList();
+                        final List lst = new ArrayList();
diff --git a/src/main/java/org/apache/commons/jxpath/JXPathAbstractFactoryException.java b/src/main/java/org/apache/commons/jxpath/JXPathAbstractFactoryException.java
index 93fcbbb5..dadb6d1d 100644
--- a/src/main/java/org/apache/commons/jxpath/JXPathAbstractFactoryException.java
+++ b/src/main/java/org/apache/commons/jxpath/JXPathAbstractFactoryException.java
@@ -32 +32 @@ public class JXPathAbstractFactoryException extends JXPathException {
-    public JXPathAbstractFactoryException(String message) {
+    public JXPathAbstractFactoryException(final String message) {
diff --git a/src/main/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java b/src/main/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java
index 1823e041..00f6d8a4 100644
--- a/src/main/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java
+++ b/src/main/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java
@@ -39 +39,2 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-        public int compare(Object left, Object right) {
+        @Override
+        public int compare(final Object left, final Object right) {
@@ -46 +47 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-    private Class clazz;
+    private final Class clazz;
@@ -55 +56 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-    public JXPathBasicBeanInfo(Class clazz) {
+    public JXPathBasicBeanInfo(final Class clazz) {
@@ -65 +66 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-    public JXPathBasicBeanInfo(Class clazz, boolean atomic) {
+    public JXPathBasicBeanInfo(final Class clazz, final boolean atomic) {
@@ -75 +76 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-    public JXPathBasicBeanInfo(Class clazz, Class dynamicPropertyHandlerClass) {
+    public JXPathBasicBeanInfo(final Class clazz, final Class dynamicPropertyHandlerClass) {
@@ -85,0 +87 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
+    @Override
@@ -93,0 +96 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
+    @Override
@@ -97,0 +101 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
+    @Override
@@ -112,2 +116,2 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-                    PropertyDescriptor[] pds = bi.getPropertyDescriptors();
-                    PropertyDescriptor[] descriptors = new PropertyDescriptor[pds.length];
+                    final PropertyDescriptor[] pds = bi.getPropertyDescriptors();
+                    final PropertyDescriptor[] descriptors = new PropertyDescriptor[pds.length];
@@ -118 +122 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-                catch (IntrospectionException ex) {
+                catch (final IntrospectionException ex) {
@@ -127 +131 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-        PropertyDescriptor[] result = new PropertyDescriptor[propertyDescriptors.length];
+        final PropertyDescriptor[] result = new PropertyDescriptor[propertyDescriptors.length];
@@ -132 +136,2 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-    public synchronized PropertyDescriptor getPropertyDescriptor(String propertyName) {
+    @Override
+    public synchronized PropertyDescriptor getPropertyDescriptor(final String propertyName) {
@@ -135,3 +140,3 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-            PropertyDescriptor[] pds = getPropertyDescriptors();
-            for (int i = 0; i < pds.length; i++) {
-                propertyDescriptorMap.put(pds[i].getName(), pds[i]);
+            final PropertyDescriptor[] pds = getPropertyDescriptors();
+            for (final PropertyDescriptor pd : pds) {
+                propertyDescriptorMap.put(pd.getName(), pd);
@@ -147,0 +153 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
+    @Override
@@ -151,0 +158 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
+    @Override
@@ -153 +160 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-        StringBuffer buffer = new StringBuffer();
+        final StringBuffer buffer = new StringBuffer();
@@ -163,2 +170,2 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-        PropertyDescriptor[] jpds = getPropertyDescriptors();
-        for (int i = 0; i < jpds.length; i++) {
+        final PropertyDescriptor[] jpds = getPropertyDescriptors();
+        for (final PropertyDescriptor jpd : jpds) {
@@ -166 +173 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-            buffer.append(jpds[i].getPropertyType());
+            buffer.append(jpd.getPropertyType());
@@ -168 +175 @@ public class JXPathBasicBeanInfo implements JXPathBeanInfo {
-            buffer.append(jpds[i].getName());
+            buffer.append(jpd.getName());
diff --git a/src/main/java/org/apache/commons/jxpath/JXPathContext.java b/src/main/java/org/apache/commons/jxpath/JXPathContext.java
index fe22e281..c4aac2c6 100644
--- a/src/main/java/org/apache/commons/jxpath/JXPathContext.java
+++ b/src/main/java/org/apache/commons/jxpath/JXPathContext.java
@@ -377 +377 @@ import org.apache.commons.jxpath.util.KeyManagerUtils;
- * class that retrieve a pointer will generally behave in the following way, 
+ * class that retrieve a pointer will generally behave in the following way,
@@ -379 +379 @@ import org.apache.commons.jxpath.util.KeyManagerUtils;
- * 
+ *
@@ -385 +385 @@ import org.apache.commons.jxpath.util.KeyManagerUtils;
- *          express the absence: might be a Java <code>null</code> or a 
+ *          express the absence: might be a Java <code>null</code> or a
@@ -434 +434 @@ public abstract class JXPathContext {
-    public static JXPathContext newContext(Object contextBean) {
+    public static JXPathContext newContext(final Object contextBean) {
@@ -447,2 +447,2 @@ public abstract class JXPathContext {
-            JXPathContext parentContext,
-            Object contextBean) {
+            final JXPathContext parentContext,
+            final Object contextBean) {
@@ -469 +469 @@ public abstract class JXPathContext {
-    protected JXPathContext(JXPathContext parentContext, Object contextBean) {
+    protected JXPathContext(final JXPathContext parentContext, final Object contextBean) {
@@ -510 +510 @@ public abstract class JXPathContext {
-    public void setVariables(Variables vars) {
+    public void setVariables(final Variables vars) {
@@ -533 +533 @@ public abstract class JXPathContext {
-    public void setFunctions(Functions functions) {
+    public void setFunctions(final Functions functions) {
@@ -557 +557 @@ public abstract class JXPathContext {
-    public void setFactory(AbstractFactory factory) {
+    public void setFactory(final AbstractFactory factory) {
@@ -581 +581 @@ public abstract class JXPathContext {
-    public synchronized void setLocale(Locale locale) {
+    public synchronized void setLocale(final Locale locale) {
@@ -610,2 +610,2 @@ public abstract class JXPathContext {
-    public synchronized void setDecimalFormatSymbols(String name,
-            DecimalFormatSymbols symbols) {
+    public synchronized void setDecimalFormatSymbols(final String name,
+            final DecimalFormatSymbols symbols) {
@@ -624 +624 @@ public abstract class JXPathContext {
-    public synchronized DecimalFormatSymbols getDecimalFormatSymbols(String name) {
+    public synchronized DecimalFormatSymbols getDecimalFormatSymbols(final String name) {
@@ -641 +641 @@ public abstract class JXPathContext {
-    public synchronized void setLenient(boolean lenient) {
+    public synchronized void setLenient(final boolean lenient) {
@@ -667 +667 @@ public abstract class JXPathContext {
-    public static CompiledExpression compile(String xpath) {
+    public static CompiledExpression compile(final String xpath) {
@@ -692,2 +692,2 @@ public abstract class JXPathContext {
-    public Object selectSingleNode(String xpath) {
-        Pointer pointer = getPointer(xpath);
+    public Object selectSingleNode(final String xpath) {
+        final Pointer pointer = getPointer(xpath);
@@ -703,3 +703,3 @@ public abstract class JXPathContext {
-    public List selectNodes(String xpath) {
-        ArrayList list = new ArrayList();
-        Iterator iterator = iteratePointers(xpath);
+    public List selectNodes(final String xpath) {
+        final ArrayList list = new ArrayList();
+        final Iterator iterator = iteratePointers(xpath);
@@ -707 +707 @@ public abstract class JXPathContext {
-            Pointer pointer = (Pointer) iterator.next();
+            final Pointer pointer = (Pointer) iterator.next();
@@ -828 +828 @@ public abstract class JXPathContext {
-    public void setIdentityManager(IdentityManager idManager) {
+    public void setIdentityManager(final IdentityManager idManager) {
@@ -850,2 +850,2 @@ public abstract class JXPathContext {
-    public Pointer getPointerByID(String id) {
-        IdentityManager manager = getIdentityManager();
+    public Pointer getPointerByID(final String id) {
+        final IdentityManager manager = getIdentityManager();
@@ -865 +865 @@ public abstract class JXPathContext {
-    public void setKeyManager(KeyManager keyManager) {
+    public void setKeyManager(final KeyManager keyManager) {
@@ -887,2 +887,2 @@ public abstract class JXPathContext {
-    public Pointer getPointerByKey(String key, String value) {
-        KeyManager manager = getKeyManager();
+    public Pointer getPointerByKey(final String key, final String value) {
+        final KeyManager manager = getKeyManager();
@@ -903,2 +903,2 @@ public abstract class JXPathContext {
-    public NodeSet getNodeSetByKey(String key, Object value) {
-        KeyManager manager = getKeyManager();
+    public NodeSet getNodeSetByKey(final String key, final Object value) {
+        final KeyManager manager = getKeyManager();
@@ -919 +919 @@ public abstract class JXPathContext {
-    public void registerNamespace(String prefix, String namespaceURI) {
+    public void registerNamespace(final String prefix, final String namespaceURI) {
@@ -934 +934 @@ public abstract class JXPathContext {
-    public String getNamespaceURI(String prefix) {
+    public String getNamespaceURI(final String prefix) {
@@ -945 +945 @@ public abstract class JXPathContext {
-    public String getPrefix(String namespaceURI) {
+    public String getPrefix(final String namespaceURI) {
@@ -959 +959 @@ public abstract class JXPathContext {
-    public void setNamespaceContextPointer(Pointer namespaceContextPointer) {
+    public void setNamespaceContextPointer(final Pointer namespaceContextPointer) {
@@ -981 +981 @@ public abstract class JXPathContext {
-    public void setExceptionHandler(ExceptionHandler exceptionHandler) {
+    public void setExceptionHandler(final ExceptionHandler exceptionHandler) {
diff --git a/src/main/java/org/apache/commons/jxpath/JXPathContextFactory.java b/src/main/java/org/apache/commons/jxpath/JXPathContextFactory.java
index 529e695c..5a0cfa35 100644
--- a/src/main/java/org/apache/commons/jxpath/JXPathContextFactory.java
+++ b/src/main/java/org/apache/commons/jxpath/JXPathContextFactory.java
@@ -103 +103 @@ public abstract class JXPathContextFactory {
-            Class clazz = ClassLoaderUtil.getClass( FACTORY_IMPL_NAME, true );
+            final Class clazz = ClassLoaderUtil.getClass( FACTORY_IMPL_NAME, true );
@@ -106,7 +106 @@ public abstract class JXPathContextFactory {
-        catch (ClassNotFoundException cnfe) {
-            throw new JXPathContextFactoryConfigurationError(cnfe);
-        }
-        catch (IllegalAccessException iae) {
-            throw new JXPathContextFactoryConfigurationError(iae);
-        }
-        catch (InstantiationException ie) {
+        catch (final ClassNotFoundException | IllegalAccessException | InstantiationException ie) {
@@ -144 +138 @@ public abstract class JXPathContextFactory {
-        catch (SecurityException se) { //NOPMD
+        catch (final SecurityException ignore) {
@@ -157 +151 @@ public abstract class JXPathContextFactory {
-    private static String findFactory(String property, String defaultFactory) {
+    private static String findFactory(final String property, final String defaultFactory) {
@@ -160 +154 @@ public abstract class JXPathContextFactory {
-            String systemProp = System.getProperty(property);
+            final String systemProp = System.getProperty(property);
@@ -170 +164 @@ public abstract class JXPathContextFactory {
-        catch (SecurityException se) { //NOPMD
+        catch (final SecurityException ignore) {
@@ -176,2 +170,2 @@ public abstract class JXPathContextFactory {
-            String javah = System.getProperty("java.home");
-            String configFile =
+            final String javah = System.getProperty("java.home");
+            final String configFile =
@@ -183 +177 @@ public abstract class JXPathContextFactory {
-            File f = new File(configFile);
+            final File f = new File(configFile);
@@ -185,2 +179,2 @@ public abstract class JXPathContextFactory {
-                Properties props = new Properties();
-                FileInputStream fis = new FileInputStream(f);
+                final Properties props = new Properties();
+                final FileInputStream fis = new FileInputStream(f);
@@ -195 +189 @@ public abstract class JXPathContextFactory {
-                        catch (IOException e) { //NOPMD
+                        catch (final IOException ignore) {
@@ -200 +194 @@ public abstract class JXPathContextFactory {
-                String factory = props.getProperty(property);
+                final String factory = props.getProperty(property);
@@ -210 +204 @@ public abstract class JXPathContextFactory {
-        catch (IOException ex) {
+        catch (final IOException ex) {
@@ -216 +210 @@ public abstract class JXPathContextFactory {
-        String serviceId = "META-INF/services/" + property;
+        final String serviceId = "META-INF/services/" + property;
@@ -219 +213 @@ public abstract class JXPathContextFactory {
-            ClassLoader cl = JXPathContextFactory.class.getClassLoader();
+            final ClassLoader cl = JXPathContextFactory.class.getClassLoader();
@@ -232 +226 @@ public abstract class JXPathContextFactory {
-                BufferedReader rd = new BufferedReader(new InputStreamReader(is, "UTF-8"));
+                final BufferedReader rd = new BufferedReader(new InputStreamReader(is, "UTF-8"));
@@ -242 +236 @@ public abstract class JXPathContextFactory {
-                    catch (IOException e) { //NOPMD
+                    catch (final IOException ignore) {
@@ -256 +250 @@ public abstract class JXPathContextFactory {
-        catch (Exception ex) {
+        catch (final Exception ex) {
diff --git a/src/main/java/org/apache/commons/jxpath/JXPathContextFactoryConfigurationError.java b/src/main/java/org/apache/commons/jxpath/JXPathContextFactoryConfigurationError.java
index 7b04aa81..106f1cfe 100644
--- a/src/main/java/org/apache/commons/jxpath/JXPathContextFactoryConfigurationError.java
+++ b/src/main/java/org/apache/commons/jxpath/JXPathContextFactoryConfigurationError.java
@@ -26,0 +27 @@ public class JXPathContextFactoryConfigurationError extends Error {
+    private static final long serialVersionUID = 1L;
@@ -28 +29 @@ public class JXPathContextFactoryConfigurationError extends Error {
-    private Exception exception;
+    private final Exception exception;
@@ -35 +35,0 @@ public class JXPathContextFactoryConfigurationError extends Error {
-         super();
@@ -45 +45 @@ public class JXPathContextFactoryConfigurationError extends Error {
-    public JXPathContextFactoryConfigurationError(String msg) {
+    public JXPathContextFactoryConfigurationError(final String msg) {
@@ -58 +58 @@ public class JXPathContextFactoryConfigurationError extends Error {
-    public JXPathContextFactoryConfigurationError(Exception e) {
+    public JXPathContextFactoryConfigurationError(final Exception e) {
@@ -71 +71 @@ public class JXPathContextFactoryConfigurationError extends Error {
-    public JXPathContextFactoryConfigurationError(Exception e, String msg) {
+    public JXPathContextFactoryConfigurationError(final Exception e, final String msg) {
@@ -83,0 +84 @@ public class JXPathContextFactoryConfigurationError extends Error {
+    @Override
@@ -85 +86 @@ public class JXPathContextFactoryConfigurationError extends Error {
-        String message = super.getMessage();
+        final String message = super.getMessage();
diff --git a/src/main/java/org/apache/commons/jxpath/JXPathException.java b/src/main/java/org/apache/commons/jxpath/JXPathException.java
index 9cc7f25b..e1d50a71 100644
--- a/src/main/java/org/apache/commons/jxpath/JXPathException.java
+++ b/src/main/java/org/apache/commons/jxpath/JXPathException.java
@@ -27 +27 @@ public class JXPathException extends RuntimeException {
-    private Throwable exception;
+    private final Throwable exception;
@@ -35 +34,0 @@ public class JXPathException extends RuntimeException {
-         super();
@@ -45 +44 @@ public class JXPathException extends RuntimeException {
-    public JXPathException(String msg) {
+    public JXPathException(final String msg) {
@@ -58 +57 @@ public class JXPathException extends RuntimeException {
-    public JXPathException(Throwable e) {
+    public JXPathException(final Throwable e) {
@@ -70 +69 @@ public class JXPathException extends RuntimeException {
-    public JXPathException(String msg, Throwable e) {
+    public JXPathException(final String msg, final Throwable e) {
@@ -82,0 +82 @@ public class JXPathException extends RuntimeException {
+    @Override
@@ -84 +84 @@ public class JXPathException extends RuntimeException {
-        String message = super.getMessage();
+        final String message = super.getMessage();
@@ -88 +88 @@ public class JXPathException extends RuntimeException {
-        StringBuffer buf = new StringBuffer();
+        final StringBuffer buf = new StringBuffer();
@@ -92 +92 @@ public class JXPathException extends RuntimeException {
-        String eMsg = exception.getMessage();
+        final String eMsg = exception.getMessage();
@@ -110,0 +111 @@ public class JXPathException extends RuntimeException {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/JXPathFunctionNotFoundException.java b/src/main/java/org/apache/commons/jxpath/JXPathFunctionNotFoundException.java
index 00a2d4f9..40ec35ef 100644
--- a/src/main/java/org/apache/commons/jxpath/JXPathFunctionNotFoundException.java
+++ b/src/main/java/org/apache/commons/jxpath/JXPathFunctionNotFoundException.java
@@ -31 +31 @@ public class JXPathFunctionNotFoundException extends JXPathException {
-    public JXPathFunctionNotFoundException(String message) {
+    public JXPathFunctionNotFoundException(final String message) {
diff --git a/src/main/java/org/apache/commons/jxpath/JXPathIntrospector.java b/src/main/java/org/apache/commons/jxpath/JXPathIntrospector.java
index da470722..61dc3dba 100644
--- a/src/main/java/org/apache/commons/jxpath/JXPathIntrospector.java
+++ b/src/main/java/org/apache/commons/jxpath/JXPathIntrospector.java
@@ -67,2 +67,2 @@ public class JXPathIntrospector {
-    public static void registerAtomicClass(Class beanClass) {
-        synchronized (byClass) { 
+    public static void registerAtomicClass(final Class beanClass) {
+        synchronized (byClass) {
@@ -81,3 +81,3 @@ public class JXPathIntrospector {
-    public static void registerDynamicClass(Class beanClass,
-            Class dynamicPropertyHandlerClass) {
-        JXPathBasicBeanInfo bi =
+    public static void registerDynamicClass(final Class beanClass,
+            final Class dynamicPropertyHandlerClass) {
+        final JXPathBasicBeanInfo bi =
@@ -112 +112 @@ public class JXPathIntrospector {
-    public static JXPathBeanInfo getBeanInfo(Class beanClass) {
+    public static JXPathBeanInfo getBeanInfo(final Class beanClass) {
@@ -135 +135 @@ public class JXPathIntrospector {
-    private static JXPathBeanInfo findDynamicBeanInfo(Class beanClass) {
+    private static JXPathBeanInfo findDynamicBeanInfo(final Class beanClass) {
@@ -144 +144 @@ public class JXPathIntrospector {
-        Class[] interfaces = beanClass.getInterfaces();
+        final Class[] interfaces = beanClass.getInterfaces();
@@ -146,2 +146,2 @@ public class JXPathIntrospector {
-            for (int i = 0; i < interfaces.length; i++) {
-                beanInfo = findDynamicBeanInfo(interfaces[i]);
+            for (final Class element : interfaces) {
+                beanInfo = findDynamicBeanInfo(element);
@@ -154 +154 @@ public class JXPathIntrospector {
-        Class sup = beanClass.getSuperclass();
+        final Class sup = beanClass.getSuperclass();
@@ -174,2 +174,2 @@ public class JXPathIntrospector {
-    private static synchronized JXPathBeanInfo findInformant(Class beanClass) {
-        String name = beanClass.getName() + "XBeanInfo";
+    private static synchronized JXPathBeanInfo findInformant(final Class beanClass) {
+        final String name = beanClass.getName() + "XBeanInfo";
@@ -179 +179 @@ public class JXPathIntrospector {
-        catch (Exception ex) { //NOPMD
+        catch (final Exception ignore) { // NOPMD
@@ -189 +189 @@ public class JXPathIntrospector {
-        catch (Exception ex) { //NOPMD
+        catch (final Exception ignore) { // NOPMD
@@ -205 +205 @@ public class JXPathIntrospector {
-    private static Object instantiate(Class sibling, String className)
+    private static Object instantiate(final Class sibling, final String className)
@@ -209 +209 @@ public class JXPathIntrospector {
-        ClassLoader cl = sibling.getClassLoader();
+        final ClassLoader cl = sibling.getClassLoader();
@@ -212 +212 @@ public class JXPathIntrospector {
-                Class cls = cl.loadClass(className);
+                final Class cls = cl.loadClass(className);
@@ -215 +215 @@ public class JXPathIntrospector {
-            catch (Exception ex) { //NOPMD
+            catch (final Exception ex) { //NOPMD
@@ -221 +221 @@ public class JXPathIntrospector {
-        Class cls = ClassLoaderUtil.getClass(className);
+        final Class cls = ClassLoaderUtil.getClass(className);
diff --git a/src/main/java/org/apache/commons/jxpath/JXPathInvalidAccessException.java b/src/main/java/org/apache/commons/jxpath/JXPathInvalidAccessException.java
index 1776dba3..7042b2d3 100644
--- a/src/main/java/org/apache/commons/jxpath/JXPathInvalidAccessException.java
+++ b/src/main/java/org/apache/commons/jxpath/JXPathInvalidAccessException.java
@@ -32 +32 @@ public class JXPathInvalidAccessException extends JXPathException {
-    public JXPathInvalidAccessException(String message) {
+    public JXPathInvalidAccessException(final String message) {
@@ -41 +41 @@ public class JXPathInvalidAccessException extends JXPathException {
-    public JXPathInvalidAccessException(String message, Throwable ex) {
+    public JXPathInvalidAccessException(final String message, final Throwable ex) {
diff --git a/src/main/java/org/apache/commons/jxpath/JXPathInvalidSyntaxException.java b/src/main/java/org/apache/commons/jxpath/JXPathInvalidSyntaxException.java
index 5c4b43a3..a82a7522 100644
--- a/src/main/java/org/apache/commons/jxpath/JXPathInvalidSyntaxException.java
+++ b/src/main/java/org/apache/commons/jxpath/JXPathInvalidSyntaxException.java
@@ -30 +30 @@ public class JXPathInvalidSyntaxException extends JXPathException {
-    public JXPathInvalidSyntaxException(String message) {
+    public JXPathInvalidSyntaxException(final String message) {
diff --git a/src/main/java/org/apache/commons/jxpath/JXPathNotFoundException.java b/src/main/java/org/apache/commons/jxpath/JXPathNotFoundException.java
index f1f52487..56020eb9 100644
--- a/src/main/java/org/apache/commons/jxpath/JXPathNotFoundException.java
+++ b/src/main/java/org/apache/commons/jxpath/JXPathNotFoundException.java
@@ -30 +30 @@ public class JXPathNotFoundException extends JXPathException {
-    public JXPathNotFoundException(String message) {
+    public JXPathNotFoundException(final String message) {
diff --git a/src/main/java/org/apache/commons/jxpath/JXPathTypeConversionException.java b/src/main/java/org/apache/commons/jxpath/JXPathTypeConversionException.java
index 6f5aaa39..8af26d21 100644
--- a/src/main/java/org/apache/commons/jxpath/JXPathTypeConversionException.java
+++ b/src/main/java/org/apache/commons/jxpath/JXPathTypeConversionException.java
@@ -31 +31 @@ public class JXPathTypeConversionException extends JXPathException {
-    public JXPathTypeConversionException(String message) {
+    public JXPathTypeConversionException(final String message) {
@@ -40 +40 @@ public class JXPathTypeConversionException extends JXPathException {
-    public JXPathTypeConversionException(String message, Exception ex) {
+    public JXPathTypeConversionException(final String message, final Exception ex) {
diff --git a/src/main/java/org/apache/commons/jxpath/MapDynamicPropertyHandler.java b/src/main/java/org/apache/commons/jxpath/MapDynamicPropertyHandler.java
index 7b949aea..fb519529 100644
--- a/src/main/java/org/apache/commons/jxpath/MapDynamicPropertyHandler.java
+++ b/src/main/java/org/apache/commons/jxpath/MapDynamicPropertyHandler.java
@@ -28,5 +28,6 @@ public class MapDynamicPropertyHandler implements DynamicPropertyHandler {
-    public String[] getPropertyNames(Object object) {
-        Map map = (Map) object;
-        Set set = map.keySet();
-        String[] names = new String[set.size()];
-        Iterator it = set.iterator();
+    @Override
+    public String[] getPropertyNames(final Object object) {
+        final Map map = (Map) object;
+        final Set set = map.keySet();
+        final String[] names = new String[set.size()];
+        final Iterator it = set.iterator();
@@ -39 +40,2 @@ public class MapDynamicPropertyHandler implements DynamicPropertyHandler {
-    public Object getProperty(Object object, String propertyName) {
+    @Override
+    public Object getProperty(final Object object, final String propertyName) {
@@ -43 +45,2 @@ public class MapDynamicPropertyHandler implements DynamicPropertyHandler {
-    public void setProperty(Object object, String propertyName, Object value) {
+    @Override
+    public void setProperty(final Object object, final String propertyName, final Object value) {
diff --git a/src/main/java/org/apache/commons/jxpath/XMLDocumentContainer.java b/src/main/java/org/apache/commons/jxpath/XMLDocumentContainer.java
index 708bb454..6ca37586 100644
--- a/src/main/java/org/apache/commons/jxpath/XMLDocumentContainer.java
+++ b/src/main/java/org/apache/commons/jxpath/XMLDocumentContainer.java
@@ -39,0 +40 @@ import org.apache.commons.jxpath.xml.DocumentContainer;
+@Deprecated
@@ -41,0 +43 @@ public class XMLDocumentContainer implements Container {
+    private static final long serialVersionUID = 1L;
@@ -52 +54 @@ public class XMLDocumentContainer implements Container {
-    public XMLDocumentContainer(URL xmlURL) {
+    public XMLDocumentContainer(final URL xmlURL) {
@@ -61 +63 @@ public class XMLDocumentContainer implements Container {
-    public XMLDocumentContainer(Source source) {
+    public XMLDocumentContainer(final Source source) {
@@ -71,0 +74 @@ public class XMLDocumentContainer implements Container {
+    @Override
@@ -76,2 +79,2 @@ public class XMLDocumentContainer implements Container {
-                    DOMResult result = new DOMResult();
-                    Transformer trans =
+                    final DOMResult result = new DOMResult();
+                    final Transformer trans =
@@ -86 +89 @@ public class XMLDocumentContainer implements Container {
-            catch (Exception ex) {
+            catch (final Exception ex) {
@@ -91 +94 @@ public class XMLDocumentContainer implements Container {
-                            : (source != null
+                            : source != null
@@ -93 +96 @@ public class XMLDocumentContainer implements Container {
-                                : "<<undefined source>>")),
+                                : "<<undefined source>>"),
@@ -104 +107,2 @@ public class XMLDocumentContainer implements Container {
-    public void setValue(Object value) {
+    @Override
+    public void setValue(final Object value) {
diff --git a/src/main/java/org/apache/commons/jxpath/functions/ConstructorFunction.java b/src/main/java/org/apache/commons/jxpath/functions/ConstructorFunction.java
index f3b6bdea..9c07f45f 100644
--- a/src/main/java/org/apache/commons/jxpath/functions/ConstructorFunction.java
+++ b/src/main/java/org/apache/commons/jxpath/functions/ConstructorFunction.java
@@ -31 +31 @@ public class ConstructorFunction implements Function {
-    private static final Object[] EMPTY_ARRAY = new Object[0];
+    private static final Object[] EMPTY_ARRAY = {};
@@ -33 +33 @@ public class ConstructorFunction implements Function {
-    private Constructor constructor;
+    private final Constructor constructor;
@@ -39 +39 @@ public class ConstructorFunction implements Function {
-    public ConstructorFunction(Constructor constructor) {
+    public ConstructorFunction(final Constructor constructor) {
@@ -49 +49,2 @@ public class ConstructorFunction implements Function {
-    public Object invoke(ExpressionContext context, Object[] parameters) {
+    @Override
+    public Object invoke(final ExpressionContext context, Object[] parameters) {
@@ -56 +57 @@ public class ConstructorFunction implements Function {
-            Class[] types = constructor.getParameterTypes();
+            final Class[] types = constructor.getParameterTypes();
diff --git a/src/main/java/org/apache/commons/jxpath/functions/MethodFunction.java b/src/main/java/org/apache/commons/jxpath/functions/MethodFunction.java
index c7694305..28dd87d3 100644
--- a/src/main/java/org/apache/commons/jxpath/functions/MethodFunction.java
+++ b/src/main/java/org/apache/commons/jxpath/functions/MethodFunction.java
@@ -34,2 +34,2 @@ public class MethodFunction implements Function {
-    private Method method;
-    private static final Object[] EMPTY_ARRAY = new Object[0];
+    private final Method method;
+    private static final Object[] EMPTY_ARRAY = {};
@@ -41 +41 @@ public class MethodFunction implements Function {
-    public MethodFunction(Method method) {
+    public MethodFunction(final Method method) {
@@ -45 +45,2 @@ public class MethodFunction implements Function {
-    public Object invoke(ExpressionContext context, Object[] parameters) {
+    @Override
+    public Object invoke(final ExpressionContext context, Object[] parameters) {
@@ -55 +56 @@ public class MethodFunction implements Function {
-                Class[] types = method.getParameterTypes();
+                final Class[] types = method.getParameterTypes();
@@ -71 +72 @@ public class MethodFunction implements Function {
-                Class[] types = method.getParameterTypes();
+                final Class[] types = method.getParameterTypes();
@@ -100,0 +102 @@ public class MethodFunction implements Function {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/Compiler.java b/src/main/java/org/apache/commons/jxpath/ri/Compiler.java
index 4dfc2025..c2406374 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/Compiler.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/Compiler.java
@@ -47,4 +47,4 @@ public interface Compiler {
-    public static final int NODE_TYPE_NODE = 1;
-    public static final int NODE_TYPE_TEXT = 2;
-    public static final int NODE_TYPE_COMMENT = 3;
-    public static final int NODE_TYPE_PI = 4;
+    int NODE_TYPE_NODE = 1;
+    int NODE_TYPE_TEXT = 2;
+    int NODE_TYPE_COMMENT = 3;
+    int NODE_TYPE_PI = 4;
@@ -52,13 +52,13 @@ public interface Compiler {
-    public static final int AXIS_SELF = 1;
-    public static final int AXIS_CHILD = 2;
-    public static final int AXIS_PARENT = 3;
-    public static final int AXIS_ANCESTOR = 4;
-    public static final int AXIS_ATTRIBUTE = 5;
-    public static final int AXIS_NAMESPACE = 6;
-    public static final int AXIS_PRECEDING = 7;
-    public static final int AXIS_FOLLOWING = 8;
-    public static final int AXIS_DESCENDANT = 9;
-    public static final int AXIS_ANCESTOR_OR_SELF = 10;
-    public static final int AXIS_FOLLOWING_SIBLING = 11;
-    public static final int AXIS_PRECEDING_SIBLING = 12;
-    public static final int AXIS_DESCENDANT_OR_SELF = 13;
+    int AXIS_SELF = 1;
+    int AXIS_CHILD = 2;
+    int AXIS_PARENT = 3;
+    int AXIS_ANCESTOR = 4;
+    int AXIS_ATTRIBUTE = 5;
+    int AXIS_NAMESPACE = 6;
+    int AXIS_PRECEDING = 7;
+    int AXIS_FOLLOWING = 8;
+    int AXIS_DESCENDANT = 9;
+    int AXIS_ANCESTOR_OR_SELF = 10;
+    int AXIS_FOLLOWING_SIBLING = 11;
+    int AXIS_PRECEDING_SIBLING = 12;
+    int AXIS_DESCENDANT_OR_SELF = 13;
@@ -66,30 +66,30 @@ public interface Compiler {
-    public static final int FUNCTION_LAST = 1;
-    public static final int FUNCTION_POSITION = 2;
-    public static final int FUNCTION_COUNT = 3;
-    public static final int FUNCTION_ID = 4;
-    public static final int FUNCTION_LOCAL_NAME = 5;
-    public static final int FUNCTION_NAMESPACE_URI = 6;
-    public static final int FUNCTION_NAME = 7;
-    public static final int FUNCTION_STRING = 8;
-    public static final int FUNCTION_CONCAT = 9;
-    public static final int FUNCTION_STARTS_WITH = 10;
-    public static final int FUNCTION_CONTAINS = 11;
-    public static final int FUNCTION_SUBSTRING_BEFORE = 12;
-    public static final int FUNCTION_SUBSTRING_AFTER = 13;
-    public static final int FUNCTION_SUBSTRING = 14;
-    public static final int FUNCTION_STRING_LENGTH = 15;
-    public static final int FUNCTION_NORMALIZE_SPACE = 16;
-    public static final int FUNCTION_TRANSLATE = 17;
-    public static final int FUNCTION_BOOLEAN = 18;
-    public static final int FUNCTION_NOT = 19;
-    public static final int FUNCTION_TRUE = 20;
-    public static final int FUNCTION_FALSE = 21;
-    public static final int FUNCTION_LANG = 22;
-    public static final int FUNCTION_NUMBER = 23;
-    public static final int FUNCTION_SUM = 24;
-    public static final int FUNCTION_FLOOR = 25;
-    public static final int FUNCTION_CEILING = 26;
-    public static final int FUNCTION_ROUND = 27;
-    public static final int FUNCTION_NULL = 28;
-    public static final int FUNCTION_KEY = 29;
-    public static final int FUNCTION_FORMAT_NUMBER = 30;
+    int FUNCTION_LAST = 1;
+    int FUNCTION_POSITION = 2;
+    int FUNCTION_COUNT = 3;
+    int FUNCTION_ID = 4;
+    int FUNCTION_LOCAL_NAME = 5;
+    int FUNCTION_NAMESPACE_URI = 6;
+    int FUNCTION_NAME = 7;
+    int FUNCTION_STRING = 8;
+    int FUNCTION_CONCAT = 9;
+    int FUNCTION_STARTS_WITH = 10;
+    int FUNCTION_CONTAINS = 11;
+    int FUNCTION_SUBSTRING_BEFORE = 12;
+    int FUNCTION_SUBSTRING_AFTER = 13;
+    int FUNCTION_SUBSTRING = 14;
+    int FUNCTION_STRING_LENGTH = 15;
+    int FUNCTION_NORMALIZE_SPACE = 16;
+    int FUNCTION_TRANSLATE = 17;
+    int FUNCTION_BOOLEAN = 18;
+    int FUNCTION_NOT = 19;
+    int FUNCTION_TRUE = 20;
+    int FUNCTION_FALSE = 21;
+    int FUNCTION_LANG = 22;
+    int FUNCTION_NUMBER = 23;
+    int FUNCTION_SUM = 24;
+    int FUNCTION_FLOOR = 25;
+    int FUNCTION_CEILING = 26;
+    int FUNCTION_ROUND = 27;
+    int FUNCTION_NULL = 28;
+    int FUNCTION_KEY = 29;
+    int FUNCTION_FORMAT_NUMBER = 30;
@@ -97 +97 @@ public interface Compiler {
-    public static final int FUNCTION_ENDS_WITH = 31;
+    int FUNCTION_ENDS_WITH = 31;
diff --git a/src/main/java/org/apache/commons/jxpath/ri/EvalContext.java b/src/main/java/org/apache/commons/jxpath/ri/EvalContext.java
index 8239fbf8..5167628e 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/EvalContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/EvalContext.java
@@ -62 +62 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
-    public EvalContext(EvalContext parentContext) {
+    public EvalContext(final EvalContext parentContext) {
@@ -65,0 +66 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
+    @Override
@@ -69,0 +71 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
+    @Override
@@ -73,0 +76 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
+    @Override
@@ -103,0 +107 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
+    @Override
@@ -120,0 +125 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
+    @Override
@@ -164,0 +170 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
+    @Override
@@ -175,2 +181,2 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
-        HashSet set = new HashSet();
-        ArrayList list = new ArrayList();
+        final HashSet set = new HashSet();
+        final ArrayList list = new ArrayList();
@@ -179 +185 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
-                NodePointer pointer = getCurrentNodePointer();
+                final NodePointer pointer = getCurrentNodePointer();
@@ -200 +206 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
-    protected void sortPointers(List l) {
+    protected void sortPointers(final List l) {
@@ -217,0 +224 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
+    @Override
@@ -219 +226 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
-        int pos = position;
+        final int pos = position;
@@ -223 +230 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
-        List list = new ArrayList();
+        final List list = new ArrayList();
@@ -249 +256 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
-        BasicNodeSet set = new BasicNodeSet();
+        final BasicNodeSet set = new BasicNodeSet();
@@ -268,0 +276 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
+    @Override
@@ -270 +278 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
-        Pointer ptr = getContextNodePointer();
+        final Pointer ptr = getContextNodePointer();
@@ -376 +384 @@ public abstract class EvalContext implements ExpressionContext, Iterator {
-    public boolean setPosition(int position) {
+    public boolean setPosition(final int position) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/InfoSetUtil.java b/src/main/java/org/apache/commons/jxpath/ri/InfoSetUtil.java
index 05efd05b..b50e0510 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/InfoSetUtil.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/InfoSetUtil.java
@@ -28,3 +28,3 @@ public class InfoSetUtil {
-    private static final Double ZERO = new Double(0);
-    private static final Double ONE = new Double(1);
-    private static final Double NOT_A_NUMBER = new Double(Double.NaN);
+    private static final Double ZERO = Double.valueOf(0);
+    private static final Double ONE = Double.valueOf(1);
+    private static final Double NOT_A_NUMBER = Double.valueOf(Double.NaN);
@@ -37 +37 @@ public class InfoSetUtil {
-    public static String stringValue(Object object) {
+    public static String stringValue(final Object object) {
@@ -42,2 +42,2 @@ public class InfoSetUtil {
-            double d = ((Number) object).doubleValue();
-            long l = ((Number) object).longValue();
+            final double d = ((Number) object).doubleValue();
+            final long l = ((Number) object).longValue();
@@ -56,2 +56,2 @@ public class InfoSetUtil {
-            EvalContext ctx = (EvalContext) object;
-            Pointer ptr = ctx.getSingleNodePointer();
+            final EvalContext ctx = (EvalContext) object;
+            final Pointer ptr = ctx.getSingleNodePointer();
@@ -68 +68 @@ public class InfoSetUtil {
-    public static Number number(Object object) {
+    public static Number number(final Object object) {
@@ -77 +77 @@ public class InfoSetUtil {
-                return new Double((String) object);
+                return Double.valueOf((String) object);
@@ -79 +79 @@ public class InfoSetUtil {
-            catch (NumberFormatException ex) {
+            catch (final NumberFormatException ex) {
@@ -84,2 +84,2 @@ public class InfoSetUtil {
-            EvalContext ctx = (EvalContext) object;
-            Pointer ptr = ctx.getSingleNodePointer();
+            final EvalContext ctx = (EvalContext) object;
+            final Pointer ptr = ctx.getSingleNodePointer();
@@ -99 +99 @@ public class InfoSetUtil {
-    public static double doubleValue(Object object) {
+    public static double doubleValue(final Object object) {
@@ -113 +113 @@ public class InfoSetUtil {
-            catch (NumberFormatException ex) {
+            catch (final NumberFormatException ex) {
@@ -121,2 +121,2 @@ public class InfoSetUtil {
-            EvalContext ctx = (EvalContext) object;
-            Pointer ptr = ctx.getSingleNodePointer();
+            final EvalContext ctx = (EvalContext) object;
+            final Pointer ptr = ctx.getSingleNodePointer();
@@ -133 +133 @@ public class InfoSetUtil {
-    public static boolean booleanValue(Object object) {
+    public static boolean booleanValue(final Object object) {
@@ -135 +135 @@ public class InfoSetUtil {
-            double value = ((Number) object).doubleValue();
+            final double value = ((Number) object).doubleValue();
@@ -143,3 +143,3 @@ public class InfoSetUtil {
-            EvalContext ctx = (EvalContext) object;
-            Pointer ptr = ctx.getSingleNodePointer();
-            return ptr == null ? false : booleanValue(ptr);
+            final EvalContext ctx = (EvalContext) object;
+            final Pointer ptr = ctx.getSingleNodePointer();
+            return ptr != null && booleanValue(ptr);
diff --git a/src/main/java/org/apache/commons/jxpath/ri/JXPathCompiledExpression.java b/src/main/java/org/apache/commons/jxpath/ri/JXPathCompiledExpression.java
index 00c0e8c9..7f89c12e 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/JXPathCompiledExpression.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/JXPathCompiledExpression.java
@@ -31,2 +31,2 @@ public class JXPathCompiledExpression implements CompiledExpression {
-    private String xpath;
-    private Expression expression;
+    private final String xpath;
+    private final Expression expression;
@@ -39 +39 @@ public class JXPathCompiledExpression implements CompiledExpression {
-    public JXPathCompiledExpression(String xpath, Expression expression) {
+    public JXPathCompiledExpression(final String xpath, final Expression expression) {
@@ -59,0 +60 @@ public class JXPathCompiledExpression implements CompiledExpression {
+    @Override
@@ -64 +65,2 @@ public class JXPathCompiledExpression implements CompiledExpression {
-    public Object getValue(JXPathContext context) {
+    @Override
+    public Object getValue(final JXPathContext context) {
@@ -69 +71,2 @@ public class JXPathCompiledExpression implements CompiledExpression {
-    public Object getValue(JXPathContext context, Class requiredType) {
+    @Override
+    public Object getValue(final JXPathContext context, final Class requiredType) {
@@ -74 +77,2 @@ public class JXPathCompiledExpression implements CompiledExpression {
-    public void setValue(JXPathContext context, Object value) {
+    @Override
+    public void setValue(final JXPathContext context, final Object value) {
@@ -79 +83,2 @@ public class JXPathCompiledExpression implements CompiledExpression {
-    public Pointer createPath(JXPathContext context) {
+    @Override
+    public Pointer createPath(final JXPathContext context) {
@@ -84 +89,2 @@ public class JXPathCompiledExpression implements CompiledExpression {
-    public Pointer createPathAndSetValue(JXPathContext context, Object value) {
+    @Override
+    public Pointer createPathAndSetValue(final JXPathContext context, final Object value) {
@@ -89 +95,2 @@ public class JXPathCompiledExpression implements CompiledExpression {
-    public Iterator iterate(JXPathContext context) {
+    @Override
+    public Iterator iterate(final JXPathContext context) {
@@ -94 +101,2 @@ public class JXPathCompiledExpression implements CompiledExpression {
-    public Pointer getPointer(JXPathContext context, String xpath) {
+    @Override
+    public Pointer getPointer(final JXPathContext context, final String xpath) {
@@ -99 +107,2 @@ public class JXPathCompiledExpression implements CompiledExpression {
-    public Iterator iteratePointers(JXPathContext context) {
+    @Override
+    public Iterator iteratePointers(final JXPathContext context) {
@@ -104 +113,2 @@ public class JXPathCompiledExpression implements CompiledExpression {
-    public void removePath(JXPathContext context) {
+    @Override
+    public void removePath(final JXPathContext context) {
@@ -108 +118,2 @@ public class JXPathCompiledExpression implements CompiledExpression {
-    public void removeAll(JXPathContext context) {
+    @Override
+    public void removeAll(final JXPathContext context) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/JXPathContextFactoryReferenceImpl.java b/src/main/java/org/apache/commons/jxpath/ri/JXPathContextFactoryReferenceImpl.java
index 5c55c135..59216615 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/JXPathContextFactoryReferenceImpl.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/JXPathContextFactoryReferenceImpl.java
@@ -32,0 +33 @@ public class JXPathContextFactoryReferenceImpl extends JXPathContextFactory {
+    @Override
@@ -34,2 +35,2 @@ public class JXPathContextFactoryReferenceImpl extends JXPathContextFactory {
-        JXPathContext parentContext,
-        Object contextBean) {
+        final JXPathContext parentContext,
+        final Object contextBean) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java b/src/main/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java
index 999a4715..96b1281b 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java
@@ -85 +85 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-        Object domFactory = allocateConditionally(
+        final Object domFactory = allocateConditionally(
@@ -93 +93 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-        Object jdomFactory = allocateConditionally(
+        final Object jdomFactory = allocateConditionally(
@@ -101 +101 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-        Object dynaBeanFactory =
+        final Object dynaBeanFactory =
@@ -123,3 +123,4 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-                public int compare(Object a, Object b) {
-                    int orderA = ((NodePointerFactory) a).getOrder();
-                    int orderB = ((NodePointerFactory) b).getOrder();
+                @Override
+                public int compare(final Object a, final Object b) {
+                    final int orderA = ((NodePointerFactory) a).getOrder();
+                    final int orderB = ((NodePointerFactory) b).getOrder();
@@ -138 +139 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public static void addNodePointerFactory(NodePointerFactory factory) {
+    public static void addNodePointerFactory(final NodePointerFactory factory) {
@@ -147 +148 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-     * 
+     *
@@ -152 +153 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public static boolean removeNodePointerFactory(NodePointerFactory factory) {
+    public static boolean removeNodePointerFactory(final NodePointerFactory factory) {
@@ -179,2 +180,2 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    protected JXPathContextReferenceImpl(JXPathContext parentContext,
-            Object contextBean) {
+    protected JXPathContextReferenceImpl(final JXPathContext parentContext,
+            final Object contextBean) {
@@ -190,2 +191,2 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public JXPathContextReferenceImpl(JXPathContext parentContext,
-            Object contextBean, Pointer contextPointer) {
+    public JXPathContextReferenceImpl(final JXPathContext parentContext,
+            final Object contextBean, final Pointer contextPointer) {
@@ -234 +235,2 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    protected CompiledExpression compilePath(String xpath) {
+    @Override
+    protected CompiledExpression compilePath(final String xpath) {
@@ -243 +245 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    private Expression compileExpression(String xpath) {
+    private Expression compileExpression(final String xpath) {
@@ -249 +251 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-                SoftReference ref = (SoftReference) compiled.get(xpath);
+                final SoftReference ref = (SoftReference) compiled.get(xpath);
@@ -268 +270 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-                    Iterator it = compiled.entrySet().iterator();
+                    final Iterator it = compiled.entrySet().iterator();
@@ -270 +272 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-                        Entry me = (Entry) it.next();
+                        final Entry me = (Entry) it.next();
@@ -293,2 +295,3 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public Object getValue(String xpath) {
-        Expression expression = compileExpression(xpath);
+    @Override
+    public Object getValue(final String xpath) {
+        final Expression expression = compileExpression(xpath);
@@ -366 +369 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public Object getValue(String xpath, Expression expr) {
+    public Object getValue(final String xpath, final Expression expr) {
@@ -376 +379 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-            EvalContext ctx = (EvalContext) result;
+            final EvalContext ctx = (EvalContext) result;
@@ -400,2 +403,3 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public Object getValue(String xpath, Class requiredType) {
-        Expression expr = compileExpression(xpath);
+    @Override
+    public Object getValue(final String xpath, final Class requiredType) {
+        final Expression expr = compileExpression(xpath);
@@ -412 +416 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public Object getValue(String xpath, Expression expr, Class requiredType) {
+    public Object getValue(final String xpath, final Expression expr, final Class requiredType) {
@@ -436 +440,2 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public Iterator iterate(String xpath) {
+    @Override
+    public Iterator iterate(final String xpath) {
@@ -448 +453 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public Iterator iterate(String xpath, Expression expr) {
+    public Iterator iterate(final String xpath, final Expression expr) {
@@ -452 +457,2 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public Pointer getPointer(String xpath) {
+    @Override
+    public Pointer getPointer(final String xpath) {
@@ -462 +468 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public Pointer getPointer(String xpath, Expression expr) {
+    public Pointer getPointer(final String xpath, final Expression expr) {
@@ -477 +483,2 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public void setValue(String xpath, Object value) {
+    @Override
+    public void setValue(final String xpath, final Object value) {
@@ -487 +494 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public void setValue(String xpath, Expression expr, Object value) {
+    public void setValue(final String xpath, final Expression expr, final Object value) {
@@ -491 +498 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-        catch (Throwable ex) {
+        catch (final Throwable ex) {
@@ -497 +504,2 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public Pointer createPath(String xpath) {
+    @Override
+    public Pointer createPath(final String xpath) {
@@ -507 +515 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public Pointer createPath(String xpath, Expression expr) {
+    public Pointer createPath(final String xpath, final Expression expr) {
@@ -509 +517 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-            Object result = expr.computeValue(getEvalContext());
+            final Object result = expr.computeValue(getEvalContext());
@@ -516 +524 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-                EvalContext ctx = (EvalContext) result;
+                final EvalContext ctx = (EvalContext) result;
@@ -526 +534 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-        catch (Throwable ex) {
+        catch (final Throwable ex) {
@@ -533 +541,2 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public Pointer createPathAndSetValue(String xpath, Object value) {
+    @Override
+    public Pointer createPathAndSetValue(final String xpath, final Object value) {
@@ -544,2 +553,2 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public Pointer createPathAndSetValue(String xpath, Expression expr,
-            Object value) {
+    public Pointer createPathAndSetValue(final String xpath, final Expression expr,
+            final Object value) {
@@ -549 +558 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-        catch (Throwable ex) {
+        catch (final Throwable ex) {
@@ -564,3 +573,3 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    private Pointer setValue(String xpath, Expression expr, Object value,
-            boolean create) {
-        Object result = expr.computeValue(getEvalContext());
+    private Pointer setValue(final String xpath, final Expression expr, final Object value,
+            final boolean create) {
+        final Object result = expr.computeValue(getEvalContext());
@@ -573 +582 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-            EvalContext ctx = (EvalContext) result;
+            final EvalContext ctx = (EvalContext) result;
@@ -598 +607 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    private void checkSimplePath(Expression expr) {
+    private void checkSimplePath(final Expression expr) {
@@ -616 +625,2 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public Iterator iteratePointers(String xpath) {
+    @Override
+    public Iterator iteratePointers(final String xpath) {
@@ -629 +639 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public Iterator iteratePointers(String xpath, Expression expr) {
+    public Iterator iteratePointers(final String xpath, final Expression expr) {
@@ -633 +643,2 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public void removePath(String xpath) {
+    @Override
+    public void removePath(final String xpath) {
@@ -642 +653 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public void removePath(String xpath, Expression expr) {
+    public void removePath(final String xpath, final Expression expr) {
@@ -644 +655 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-            NodePointer pointer = (NodePointer) getPointer(xpath, expr);
+            final NodePointer pointer = (NodePointer) getPointer(xpath, expr);
@@ -649 +660 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-        catch (Throwable ex) {
+        catch (final Throwable ex) {
@@ -656 +667,2 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public void removeAll(String xpath) {
+    @Override
+    public void removeAll(final String xpath) {
@@ -665 +677 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public void removeAll(String xpath, Expression expr) {
+    public void removeAll(final String xpath, final Expression expr) {
@@ -667 +679 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-            ArrayList list = new ArrayList();
+            final ArrayList list = new ArrayList();
@@ -675 +687 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-                NodePointer pointer = (NodePointer) it.next();
+                final NodePointer pointer = (NodePointer) it.next();
@@ -682 +694 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-        catch (Throwable ex) {
+        catch (final Throwable ex) {
@@ -689,2 +701,3 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public JXPathContext getRelativeContext(Pointer pointer) {
-        Object contextBean = pointer.getNode();
+    @Override
+    public JXPathContext getRelativeContext(final Pointer pointer) {
+        final Object contextBean = pointer.getNode();
@@ -698,0 +712 @@ public class JXPathContextReferenceImpl extends JXPathContext {
+    @Override
@@ -734 +748 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public NodePointer getVariablePointer(QName name) {
+    public NodePointer getVariablePointer(final QName name) {
@@ -745,3 +759,3 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public Function getFunction(QName functionName, Object[] parameters) {
-        String namespace = functionName.getPrefix();
-        String name = functionName.getName();
+    public Function getFunction(final QName functionName, final Object[] parameters) {
+        final String namespace = functionName.getPrefix();
+        final String name = functionName.getName();
@@ -765 +779,2 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public void registerNamespace(String prefix, String namespaceURI) {
+    @Override
+    public void registerNamespace(final String prefix, final String namespaceURI) {
@@ -772 +787,2 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public String getNamespaceURI(String prefix) {
+    @Override
+    public String getNamespaceURI(final String prefix) {
@@ -780 +796,2 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public String getPrefix(String namespaceURI) {
+    @Override
+    public String getPrefix(final String namespaceURI) {
@@ -784 +801,2 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public void setNamespaceContextPointer(Pointer pointer) {
+    @Override
+    public void setNamespaceContextPointer(final Pointer pointer) {
@@ -790,0 +809 @@ public class JXPathContextReferenceImpl extends JXPathContext {
+    @Override
@@ -807 +826,2 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public void setExceptionHandler(ExceptionHandler exceptionHandler) {
+    @Override
+    public void setExceptionHandler(final ExceptionHandler exceptionHandler) {
@@ -820,2 +840,2 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-    public static Object allocateConditionally(String className,
-            String existenceCheckClassName) {
+    public static Object allocateConditionally(final String className,
+            final String existenceCheckClassName) {
@@ -826 +846 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-            catch (ClassNotFoundException ex) {
+            catch (final ClassNotFoundException ex) {
@@ -829 +849 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-            Class cls = ClassLoaderUtil.getClass(className, true);
+            final Class cls = ClassLoaderUtil.getClass(className, true);
@@ -832 +852 @@ public class JXPathContextReferenceImpl extends JXPathContext {
-        catch (Exception ex) {
+        catch (final Exception ex) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/NamespaceResolver.java b/src/main/java/org/apache/commons/jxpath/ri/NamespaceResolver.java
index 7ff07167..2713e317 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/NamespaceResolver.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/NamespaceResolver.java
@@ -49 +49 @@ public class NamespaceResolver implements Cloneable, Serializable {
-    protected static String getPrefix(final NodePointer pointer, String namespaceURI) {
+    protected static String getPrefix(final NodePointer pointer, final String namespaceURI) {
@@ -52 +52 @@ public class NamespaceResolver implements Cloneable, Serializable {
-            NodeIterator ni = currentPointer.namespaceIterator();
+            final NodeIterator ni = currentPointer.namespaceIterator();
@@ -54,2 +54,2 @@ public class NamespaceResolver implements Cloneable, Serializable {
-                NodePointer nsPointer = ni.getNodePointer();
-                String uri = nsPointer.getNamespaceURI();
+                final NodePointer nsPointer = ni.getNodePointer();
+                final String uri = nsPointer.getNamespaceURI();
@@ -57 +57 @@ public class NamespaceResolver implements Cloneable, Serializable {
-                    String prefix = nsPointer.getName().getName();
+                    final String prefix = nsPointer.getName().getName();
@@ -79 +79 @@ public class NamespaceResolver implements Cloneable, Serializable {
-    public NamespaceResolver(NamespaceResolver parent) {
+    public NamespaceResolver(final NamespaceResolver parent) {
@@ -89 +89 @@ public class NamespaceResolver implements Cloneable, Serializable {
-    public synchronized void registerNamespace(String prefix, String namespaceURI) {
+    public synchronized void registerNamespace(final String prefix, final String namespaceURI) {
@@ -102 +102 @@ public class NamespaceResolver implements Cloneable, Serializable {
-    public void setNamespaceContextPointer(NodePointer pointer) {
+    public void setNamespaceContextPointer(final NodePointer pointer) {
@@ -127,2 +127,2 @@ public class NamespaceResolver implements Cloneable, Serializable {
-    public synchronized String getNamespaceURI(String prefix) {
-        String uri = getExternallyRegisteredNamespaceURI(prefix);
+    public synchronized String getNamespaceURI(final String prefix) {
+        final String uri = getExternallyRegisteredNamespaceURI(prefix);
@@ -141,2 +141,2 @@ public class NamespaceResolver implements Cloneable, Serializable {
-            String prefix) {
-        String uri = (String) namespaceMap.get(prefix);
+            final String prefix) {
+        final String uri = (String) namespaceMap.get(prefix);
@@ -152,2 +152,2 @@ public class NamespaceResolver implements Cloneable, Serializable {
-    public synchronized String getPrefix(String namespaceURI) {
-        String prefix = getExternallyRegisteredPrefix(namespaceURI);
+    public synchronized String getPrefix(final String namespaceURI) {
+        final String prefix = getExternallyRegisteredPrefix(namespaceURI);
@@ -164,2 +164,2 @@ public class NamespaceResolver implements Cloneable, Serializable {
-    protected synchronized String getExternallyRegisteredPrefix(String namespaceURI) {
-        String prefix = (String) reverseMap.get(namespaceURI);
+    protected synchronized String getExternallyRegisteredPrefix(final String namespaceURI) {
+        final String prefix = (String) reverseMap.get(namespaceURI);
@@ -187,0 +188 @@ public class NamespaceResolver implements Cloneable, Serializable {
+    @Override
@@ -190 +191 @@ public class NamespaceResolver implements Cloneable, Serializable {
-            NamespaceResolver result = (NamespaceResolver) super.clone();
+            final NamespaceResolver result = (NamespaceResolver) super.clone();
@@ -194 +195 @@ public class NamespaceResolver implements Cloneable, Serializable {
-        catch (CloneNotSupportedException e) {
+        catch (final CloneNotSupportedException e) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/Parser.java b/src/main/java/org/apache/commons/jxpath/ri/Parser.java
index e4ba3bb6..58fe7cae 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/Parser.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/Parser.java
@@ -41,2 +41,2 @@ public class Parser {
-        String expression,
-        Compiler compiler) {
+        final String expression,
+        final Compiler compiler) {
@@ -50 +50 @@ public class Parser {
-            catch (TokenMgrError e) {
+            catch (final TokenMgrError e) {
@@ -59 +59 @@ public class Parser {
-            catch (ParseException e) {
+            catch (final ParseException e) {
@@ -78 +78 @@ public class Parser {
-    private static String describePosition(String expression, int position) {
+    private static String describePosition(final String expression, final int position) {
@@ -94 +94 @@ public class Parser {
-    private static String addEscapes(String string) {
+    private static String addEscapes(final String string) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/QName.java b/src/main/java/org/apache/commons/jxpath/ri/QName.java
index d5e6edc9..25d8e950 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/QName.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/QName.java
@@ -29,3 +29,3 @@ public class QName implements Serializable {
-    private String prefix;
-    private String name;
-    private String qualifiedName;
+    private final String prefix;
+    private final String name;
+    private final String qualifiedName;
@@ -37 +37 @@ public class QName implements Serializable {
-    public QName(String qualifiedName) {
+    public QName(final String qualifiedName) {
@@ -39 +39 @@ public class QName implements Serializable {
-        int index = qualifiedName.indexOf(':');
+        final int index = qualifiedName.indexOf(':');
@@ -49 +49 @@ public class QName implements Serializable {
-    public QName(String prefix, String localName) {
+    public QName(final String prefix, final String localName) {
@@ -70,0 +71 @@ public class QName implements Serializable {
+    @Override
@@ -74,0 +76 @@ public class QName implements Serializable {
+    @Override
@@ -79 +81,2 @@ public class QName implements Serializable {
-    public boolean equals(Object object) {
+    @Override
+    public boolean equals(final Object object) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/AncestorContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/AncestorContext.java
index b18b0b38..1230779f 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/AncestorContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/AncestorContext.java
@@ -27 +27 @@ public class AncestorContext extends EvalContext {
-    private NodeTest nodeTest;
+    private final NodeTest nodeTest;
@@ -30 +30 @@ public class AncestorContext extends EvalContext {
-    private boolean includeSelf;
+    private final boolean includeSelf;
@@ -40,3 +40,3 @@ public class AncestorContext extends EvalContext {
-        EvalContext parentContext,
-        boolean includeSelf,
-        NodeTest nodeTest) {
+        final EvalContext parentContext,
+        final boolean includeSelf,
+        final NodeTest nodeTest) {
@@ -47,0 +48 @@ public class AncestorContext extends EvalContext {
+    @Override
@@ -51,0 +53 @@ public class AncestorContext extends EvalContext {
+    @Override
@@ -55,0 +58 @@ public class AncestorContext extends EvalContext {
+    @Override
@@ -61 +64,2 @@ public class AncestorContext extends EvalContext {
-    public boolean setPosition(int position) {
+    @Override
+    public boolean setPosition(final int position) {
@@ -73,0 +78 @@ public class AncestorContext extends EvalContext {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/AttributeContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/AttributeContext.java
index 142f0714..67255c7f 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/AttributeContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/AttributeContext.java
@@ -34 +34 @@ public class AttributeContext extends EvalContext {
-    private NodeTest nodeTest;
+    private final NodeTest nodeTest;
@@ -44 +44 @@ public class AttributeContext extends EvalContext {
-    public AttributeContext(EvalContext parentContext, NodeTest nodeTest) {
+    public AttributeContext(final EvalContext parentContext, final NodeTest nodeTest) {
@@ -48,0 +49 @@ public class AttributeContext extends EvalContext {
+    @Override
@@ -52,0 +54 @@ public class AttributeContext extends EvalContext {
+    @Override
@@ -59 +61,2 @@ public class AttributeContext extends EvalContext {
-    public boolean setPosition(int position) {
+    @Override
+    public boolean setPosition(final int position) {
@@ -71,0 +75 @@ public class AttributeContext extends EvalContext {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/ChildContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/ChildContext.java
index 9310bab4..bfcc0213 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/ChildContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/ChildContext.java
@@ -30,3 +30,3 @@ public class ChildContext extends EvalContext {
-    private NodeTest nodeTest;
-    private boolean startFromParentLocation;
-    private boolean reverse;
+    private final NodeTest nodeTest;
+    private final boolean startFromParentLocation;
+    private final boolean reverse;
@@ -42,2 +42,2 @@ public class ChildContext extends EvalContext {
-    public ChildContext(EvalContext parentContext, NodeTest nodeTest,
-            boolean startFromParentLocation, boolean reverse) {
+    public ChildContext(final EvalContext parentContext, final NodeTest nodeTest,
+            final boolean startFromParentLocation, final boolean reverse) {
@@ -49,0 +50 @@ public class ChildContext extends EvalContext {
+    @Override
@@ -64,0 +66 @@ public class ChildContext extends EvalContext {
+    @Override
@@ -73 +75 @@ public class ChildContext extends EvalContext {
-                NodePointer pointer = iterator.getNodePointer();
+                final NodePointer pointer = iterator.getNodePointer();
@@ -82,0 +85 @@ public class ChildContext extends EvalContext {
+    @Override
@@ -86,0 +90 @@ public class ChildContext extends EvalContext {
+    @Override
@@ -92,2 +96,3 @@ public class ChildContext extends EvalContext {
-    public boolean setPosition(int position) {
-        int oldPosition = getCurrentPosition();
+    @Override
+    public boolean setPosition(final int position) {
+        final int oldPosition = getCurrentPosition();
@@ -98 +103 @@ public class ChildContext extends EvalContext {
-        return iterator == null ? false : iterator.setPosition(position);
+        return iterator != null && iterator.setPosition(position);
@@ -105 +110 @@ public class ChildContext extends EvalContext {
-        NodePointer parent = parentContext.getCurrentNodePointer();
+        final NodePointer parent = parentContext.getCurrentNodePointer();
@@ -109 +114 @@ public class ChildContext extends EvalContext {
-        NodePointer useParent = startFromParentLocation ? parent.getParent() : parent;
+        final NodePointer useParent = startFromParentLocation ? parent.getParent() : parent;
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/DescendantContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/DescendantContext.java
index 3860b3e1..1610dd3c 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/DescendantContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/DescendantContext.java
@@ -34 +34 @@ public class DescendantContext extends EvalContext {
-    private NodeTest nodeTest;
+    private final NodeTest nodeTest;
@@ -38 +38 @@ public class DescendantContext extends EvalContext {
-    private boolean includeSelf;
+    private final boolean includeSelf;
@@ -48,2 +48,2 @@ public class DescendantContext extends EvalContext {
-    public DescendantContext(EvalContext parentContext, boolean includeSelf,
-            NodeTest nodeTest) {
+    public DescendantContext(final EvalContext parentContext, final boolean includeSelf,
+            final NodeTest nodeTest) {
@@ -54,0 +55 @@ public class DescendantContext extends EvalContext {
+    @Override
@@ -58,0 +60 @@ public class DescendantContext extends EvalContext {
+    @Override
@@ -65,0 +68 @@ public class DescendantContext extends EvalContext {
+    @Override
@@ -71 +74,2 @@ public class DescendantContext extends EvalContext {
-    public boolean setPosition(int position) {
+    @Override
+    public boolean setPosition(final int position) {
@@ -83,0 +88 @@ public class DescendantContext extends EvalContext {
+    @Override
@@ -110 +115 @@ public class DescendantContext extends EvalContext {
-            NodeIterator it = (NodeIterator) stack.peek();
+            final NodeIterator it = (NodeIterator) stack.peek();
@@ -142 +147 @@ public class DescendantContext extends EvalContext {
-        Object node = currentNodePointer.getNode();
+        final Object node = currentNodePointer.getNode();
@@ -144,2 +149,2 @@ public class DescendantContext extends EvalContext {
-            NodeIterator it = (NodeIterator) stack.get(i);
-            Pointer pointer = it.getNodePointer();
+            final NodeIterator it = (NodeIterator) stack.get(i);
+            final Pointer pointer = it.getNodePointer();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/InitialContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/InitialContext.java
index 4ac2b9b0..f2c0335b 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/InitialContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/InitialContext.java
@@ -31 +31 @@ public class InitialContext extends EvalContext {
-    private NodePointer nodePointer;
+    private final NodePointer nodePointer;
@@ -37 +37 @@ public class InitialContext extends EvalContext {
-    public InitialContext(EvalContext parentContext) {
+    public InitialContext(final EvalContext parentContext) {
@@ -43 +43 @@ public class InitialContext extends EvalContext {
-                (nodePointer.getIndex() == NodePointer.WHOLE_COLLECTION);
+                nodePointer.getIndex() == NodePointer.WHOLE_COLLECTION;
@@ -46,0 +47 @@ public class InitialContext extends EvalContext {
+    @Override
@@ -50,0 +52 @@ public class InitialContext extends EvalContext {
+    @Override
@@ -54,0 +57 @@ public class InitialContext extends EvalContext {
+    @Override
@@ -58,0 +62 @@ public class InitialContext extends EvalContext {
+    @Override
@@ -63 +67,2 @@ public class InitialContext extends EvalContext {
-    public boolean setPosition(int position) {
+    @Override
+    public boolean setPosition(final int position) {
@@ -74,0 +80 @@ public class InitialContext extends EvalContext {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/NamespaceContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/NamespaceContext.java
index 0b10129a..ffcf7b1c 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/NamespaceContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/NamespaceContext.java
@@ -30 +30 @@ public class NamespaceContext extends EvalContext {
-    private NodeTest nodeTest;
+    private final NodeTest nodeTest;
@@ -39 +39 @@ public class NamespaceContext extends EvalContext {
-    public NamespaceContext(EvalContext parentContext, NodeTest nodeTest) {
+    public NamespaceContext(final EvalContext parentContext, final NodeTest nodeTest) {
@@ -43,0 +44 @@ public class NamespaceContext extends EvalContext {
+    @Override
@@ -47,0 +49 @@ public class NamespaceContext extends EvalContext {
+    @Override
@@ -54 +56,2 @@ public class NamespaceContext extends EvalContext {
-    public boolean setPosition(int position) {
+    @Override
+    public boolean setPosition(final int position) {
@@ -66,0 +70 @@ public class NamespaceContext extends EvalContext {
+    @Override
@@ -75,2 +79,2 @@ public class NamespaceContext extends EvalContext {
-            NodeNameTest nodeNameTest = (NodeNameTest) nodeTest;
-            QName testName = nodeNameTest.getNodeName();
+            final NodeNameTest nodeNameTest = (NodeNameTest) nodeTest;
+            final QName testName = nodeNameTest.getNodeName();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/NodeSetContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/NodeSetContext.java
index 552a0bc3..9099fd78 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/NodeSetContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/NodeSetContext.java
@@ -28 +28 @@ public class NodeSetContext extends EvalContext {
-    private NodeSet nodeSet;
+    private final NodeSet nodeSet;
@@ -35 +35 @@ public class NodeSetContext extends EvalContext {
-    public NodeSetContext(EvalContext parentContext, NodeSet nodeSet) {
+    public NodeSetContext(final EvalContext parentContext, final NodeSet nodeSet) {
@@ -39,0 +40 @@ public class NodeSetContext extends EvalContext {
+    @Override
@@ -43,0 +45 @@ public class NodeSetContext extends EvalContext {
+    @Override
@@ -51 +53,2 @@ public class NodeSetContext extends EvalContext {
-    public boolean setPosition(int position) {
+    @Override
+    public boolean setPosition(final int position) {
@@ -55,0 +59 @@ public class NodeSetContext extends EvalContext {
+    @Override
@@ -63,0 +68 @@ public class NodeSetContext extends EvalContext {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/ParentContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/ParentContext.java
index 55397f8e..d11b134c 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/ParentContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/ParentContext.java
@@ -27 +27 @@ public class ParentContext extends EvalContext {
-    private NodeTest nodeTest;
+    private final NodeTest nodeTest;
@@ -36 +36 @@ public class ParentContext extends EvalContext {
-    public ParentContext(EvalContext parentContext, NodeTest nodeTest) {
+    public ParentContext(final EvalContext parentContext, final NodeTest nodeTest) {
@@ -40,0 +41 @@ public class ParentContext extends EvalContext {
+    @Override
@@ -44,0 +46 @@ public class ParentContext extends EvalContext {
+    @Override
@@ -48,0 +51 @@ public class ParentContext extends EvalContext {
+    @Override
@@ -52,0 +56 @@ public class ParentContext extends EvalContext {
+    @Override
@@ -58 +62,2 @@ public class ParentContext extends EvalContext {
-    public boolean setPosition(int position) {
+    @Override
+    public boolean setPosition(final int position) {
@@ -62,0 +68 @@ public class ParentContext extends EvalContext {
+    @Override
@@ -69 +75 @@ public class ParentContext extends EvalContext {
-        NodePointer thisLocation = parentContext.getCurrentNodePointer();
+        final NodePointer thisLocation = parentContext.getCurrentNodePointer();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/PrecedingOrFollowingContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/PrecedingOrFollowingContext.java
index 9698cdb6..b3b84aa2 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/PrecedingOrFollowingContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/PrecedingOrFollowingContext.java
@@ -30 +30 @@ public class PrecedingOrFollowingContext extends EvalContext {
-    private NodeTest nodeTest;
+    private final NodeTest nodeTest;
@@ -35 +35 @@ public class PrecedingOrFollowingContext extends EvalContext {
-    private boolean reverse;
+    private final boolean reverse;
@@ -44,3 +44,3 @@ public class PrecedingOrFollowingContext extends EvalContext {
-        EvalContext parentContext,
-        NodeTest nodeTest,
-        boolean reverse) {
+        final EvalContext parentContext,
+        final NodeTest nodeTest,
+        final boolean reverse) {
@@ -51,0 +52 @@ public class PrecedingOrFollowingContext extends EvalContext {
+    @Override
@@ -55,0 +57 @@ public class PrecedingOrFollowingContext extends EvalContext {
+    @Override
@@ -59,0 +62 @@ public class PrecedingOrFollowingContext extends EvalContext {
+    @Override
@@ -65 +68,2 @@ public class PrecedingOrFollowingContext extends EvalContext {
-    public boolean setPosition(int position) {
+    @Override
+    public boolean setPosition(final int position) {
@@ -77,0 +82 @@ public class PrecedingOrFollowingContext extends EvalContext {
+    @Override
@@ -88 +93 @@ public class PrecedingOrFollowingContext extends EvalContext {
-            NodePointer parent = currentRootLocation.getParent();
+            final NodePointer parent = currentRootLocation.getParent();
@@ -105 +110 @@ public class PrecedingOrFollowingContext extends EvalContext {
-                NodePointer parent = currentRootLocation.getParent();
+                final NodePointer parent = currentRootLocation.getParent();
@@ -117 +122 @@ public class PrecedingOrFollowingContext extends EvalContext {
-                    NodeIterator it = (NodeIterator) stack.peek();
+                    final NodeIterator it = (NodeIterator) stack.peek();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java
index ed0549ee..b2e1deaa 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java
@@ -33 +33 @@ public class PredicateContext extends EvalContext {
-    private Expression expression;
+    private final Expression expression;
@@ -43 +43 @@ public class PredicateContext extends EvalContext {
-    public PredicateContext(EvalContext parentContext, Expression expression) {
+    public PredicateContext(final EvalContext parentContext, final Expression expression) {
@@ -51,0 +52 @@ public class PredicateContext extends EvalContext {
+    @Override
@@ -58,2 +59,2 @@ public class PredicateContext extends EvalContext {
-                Object pred = nameTestExpression.computeValue(parentContext);
-                String propertyName = InfoSetUtil.stringValue(pred);
+                final Object pred = nameTestExpression.computeValue(parentContext);
+                final String propertyName = InfoSetUtil.stringValue(pred);
@@ -70,3 +71,3 @@ public class PredicateContext extends EvalContext {
-                String[] names = dynamicPropertyPointer.getPropertyNames();
-                for (int i = 0; i < names.length; i++) {
-                    if (names[i].equals(propertyName)) {
+                final String[] names = dynamicPropertyPointer.getPropertyNames();
+                for (final String name : names) {
+                    if (name.equals(propertyName)) {
@@ -97 +98 @@ public class PredicateContext extends EvalContext {
-                    int pos = (int) InfoSetUtil.doubleValue(pred);
+                    final int pos = (int) InfoSetUtil.doubleValue(pred);
@@ -136 +137,2 @@ public class PredicateContext extends EvalContext {
-    public boolean setPosition(int position) {
+    @Override
+    public boolean setPosition(final int position) {
@@ -152,0 +155 @@ public class PredicateContext extends EvalContext {
+    @Override
@@ -162,0 +166 @@ public class PredicateContext extends EvalContext {
+    @Override
@@ -168,0 +173 @@ public class PredicateContext extends EvalContext {
+    @Override
@@ -179 +184 @@ public class PredicateContext extends EvalContext {
-    private boolean setPositionStandard(int position) {
+    private boolean setPositionStandard(final int position) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/RootContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/RootContext.java
index 0e9fa2d9..4d56111c 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/RootContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/RootContext.java
@@ -31,2 +31,2 @@ public class RootContext extends EvalContext {
-    private JXPathContextReferenceImpl jxpathContext;
-    private NodePointer pointer;
+    private final JXPathContextReferenceImpl jxpathContext;
+    private final NodePointer pointer;
@@ -43,2 +43,2 @@ public class RootContext extends EvalContext {
-    public RootContext(JXPathContextReferenceImpl jxpathContext,
-            NodePointer pointer) {
+    public RootContext(final JXPathContextReferenceImpl jxpathContext,
+            final NodePointer pointer) {
@@ -52,0 +53 @@ public class RootContext extends EvalContext {
+    @Override
@@ -56,0 +58 @@ public class RootContext extends EvalContext {
+    @Override
@@ -68,0 +71 @@ public class RootContext extends EvalContext {
+    @Override
@@ -72,0 +76 @@ public class RootContext extends EvalContext {
+    @Override
@@ -76,0 +81 @@ public class RootContext extends EvalContext {
+    @Override
@@ -80,0 +86 @@ public class RootContext extends EvalContext {
+    @Override
@@ -84,0 +91 @@ public class RootContext extends EvalContext {
+    @Override
@@ -89 +96,2 @@ public class RootContext extends EvalContext {
-    public boolean setPosition(int position) {
+    @Override
+    public boolean setPosition(final int position) {
@@ -98 +106 @@ public class RootContext extends EvalContext {
-    public EvalContext getConstantContext(Object constant) {
+    public EvalContext getConstantContext(final Object constant) {
@@ -123 +131 @@ public class RootContext extends EvalContext {
-    public EvalContext getVariableContext(QName variableName) {
+    public EvalContext getVariableContext(final QName variableName) {
@@ -136 +144 @@ public class RootContext extends EvalContext {
-    public Function getFunction(QName functionName, Object[] parameters) {
+    public Function getFunction(final QName functionName, final Object[] parameters) {
@@ -145 +153 @@ public class RootContext extends EvalContext {
-    public Object getRegisteredValue(int id) {
+    public Object getRegisteredValue(final int id) {
@@ -157 +165 @@ public class RootContext extends EvalContext {
-    public int setRegisteredValue(Object value) {
+    public int setRegisteredValue(final Object value) {
@@ -171,0 +180 @@ public class RootContext extends EvalContext {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/SelfContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/SelfContext.java
index 32891739..2a45a526 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/SelfContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/SelfContext.java
@@ -29 +29 @@ public class SelfContext extends EvalContext {
-    private NodeTest nodeTest;
+    private final NodeTest nodeTest;
@@ -38 +38 @@ public class SelfContext extends EvalContext {
-    public SelfContext(EvalContext parentContext, NodeTest nodeTest) {
+    public SelfContext(final EvalContext parentContext, final NodeTest nodeTest) {
@@ -42,0 +43 @@ public class SelfContext extends EvalContext {
+    @Override
@@ -46,0 +48 @@ public class SelfContext extends EvalContext {
+    @Override
@@ -53,0 +56 @@ public class SelfContext extends EvalContext {
+    @Override
@@ -57,0 +61 @@ public class SelfContext extends EvalContext {
+    @Override
@@ -63 +67,2 @@ public class SelfContext extends EvalContext {
-    public boolean setPosition(int position) {
+    @Override
+    public boolean setPosition(final int position) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java b/src/main/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java
index e96937e7..8f3c5c75 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java
@@ -76 +76 @@ public class SimplePathInterpreter {
-            EvalContext context, NodePointer root, Step[] steps) {
+            final EvalContext context, final NodePointer root, final Step[] steps) {
@@ -78 +78 @@ public class SimplePathInterpreter {
-        NodePointer pointer = doStep(context, root, steps, 0);
+        final NodePointer pointer = doStep(context, root, steps, 0);
@@ -98,2 +98,2 @@ public class SimplePathInterpreter {
-                EvalContext context, NodePointer root,
-                Expression[] predicates, Step[] steps) {
+                final EvalContext context, final NodePointer root,
+                final Expression[] predicates, final Step[] steps) {
@@ -102 +102 @@ public class SimplePathInterpreter {
-        NodePointer pointer =
+        final NodePointer pointer =
@@ -121,2 +121,2 @@ public class SimplePathInterpreter {
-            EvalContext context, NodePointer parent,
-            Step[] steps, int currentStep) {
+            final EvalContext context, NodePointer parent,
+            final Step[] steps, final int currentStep) {
@@ -135,2 +135,2 @@ public class SimplePathInterpreter {
-        Step step = steps[currentStep];
-        Expression[] predicates = step.getPredicates();
+        final Step step = steps[currentStep];
+        final Expression[] predicates = step.getPredicates();
@@ -192,3 +192,3 @@ public class SimplePathInterpreter {
-                EvalContext context, PropertyOwnerPointer parentPointer,
-                Step[] steps, int currentStep) {
-        Step step = steps[currentStep];
+                final EvalContext context, final PropertyOwnerPointer parentPointer,
+                final Step[] steps, final int currentStep) {
+        final Step step = steps[currentStep];
@@ -220 +220 @@ public class SimplePathInterpreter {
-            int count = childPointer.getLength();
+            final int count = childPointer.getLength();
@@ -223 +223 @@ public class SimplePathInterpreter {
-                NodePointer pointer =
+                final NodePointer pointer =
@@ -225 +225 @@ public class SimplePathInterpreter {
-                int quality = computeQuality(pointer);
+                final int quality = computeQuality(pointer);
@@ -258,3 +258,3 @@ public class SimplePathInterpreter {
-                EvalContext context, NodePointer parentPointer,
-                Step[] steps, int currentStep) {
-        Step step = steps[currentStep];
+                final EvalContext context, final NodePointer parentPointer,
+                final Step[] steps, final int currentStep) {
+        final Step step = steps[currentStep];
@@ -268 +268 @@ public class SimplePathInterpreter {
-        NodeIterator it = getNodeIterator(context, parentPointer, step);
+        final NodeIterator it = getNodeIterator(context, parentPointer, step);
@@ -271 +271 @@ public class SimplePathInterpreter {
-                NodePointer childPointer = it.getNodePointer();
+                final NodePointer childPointer = it.getNodePointer();
@@ -276 +276 @@ public class SimplePathInterpreter {
-                NodePointer pointer = doStep(
+                final NodePointer pointer = doStep(
@@ -278 +278 @@ public class SimplePathInterpreter {
-                int quality = computeQuality(pointer);
+                final int quality = computeQuality(pointer);
@@ -303,4 +303,4 @@ public class SimplePathInterpreter {
-            EvalContext context, PropertyOwnerPointer parentPointer,
-            Step[] steps, int currentStep) {
-        Step step = steps[currentStep];
-        Expression[] predicates = step.getPredicates();
+            final EvalContext context, final PropertyOwnerPointer parentPointer,
+            final Step[] steps, final int currentStep) {
+        final Step step = steps[currentStep];
+        final Expression[] predicates = step.getPredicates();
@@ -308 +308 @@ public class SimplePathInterpreter {
-        NodePointer childPointer =
+        final NodePointer childPointer =
@@ -336,2 +336,2 @@ public class SimplePathInterpreter {
-                PropertyOwnerPointer parentPointer, Step step) {
-        int axis = step.getAxis();
+                final PropertyOwnerPointer parentPointer, final Step step) {
+        final int axis = step.getAxis();
@@ -339 +339 @@ public class SimplePathInterpreter {
-            QName name = ((NodeNameTest) step.getNodeTest()).getNodeName();
+            final QName name = ((NodeNameTest) step.getNodeTest()).getNodeName();
@@ -344 +344 @@ public class SimplePathInterpreter {
-                NodePointer childPointer = parentPointer.getPropertyPointer();
+                final NodePointer childPointer = parentPointer.getPropertyPointer();
@@ -367,4 +367,4 @@ public class SimplePathInterpreter {
-            EvalContext context, NodePointer parent,
-            Step[] steps, int currentStep) {
-        Step step = steps[currentStep];
-        Expression[] predicates = step.getPredicates();
+            final EvalContext context, final NodePointer parent,
+            final Step[] steps, final int currentStep) {
+        final Step step = steps[currentStep];
+        final Expression[] predicates = step.getPredicates();
@@ -372 +372 @@ public class SimplePathInterpreter {
-        int axis = step.getAxis();
+        final int axis = step.getAxis();
@@ -383 +383 @@ public class SimplePathInterpreter {
-        Expression predicate = predicates[0];
+        final Expression predicate = predicates[0];
@@ -391 +391 @@ public class SimplePathInterpreter {
-            NodeIterator it = getNodeIterator(context, parent, step);
+            final NodeIterator it = getNodeIterator(context, parent, step);
@@ -395 +395 @@ public class SimplePathInterpreter {
-                    String key = keyFromPredicate(context, predicate);
+                    final String key = keyFromPredicate(context, predicate);
@@ -397 +397 @@ public class SimplePathInterpreter {
-                        NodePointer ptr = it.getNodePointer();
+                        final NodePointer ptr = it.getNodePointer();
@@ -405 +405 @@ public class SimplePathInterpreter {
-                    int index = indexFromPredicate(context, predicate);
+                    final int index = indexFromPredicate(context, predicate);
@@ -416 +416 @@ public class SimplePathInterpreter {
-            NodeIterator it = getNodeIterator(context, parent, step);
+            final NodeIterator it = getNodeIterator(context, parent, step);
@@ -418 +418 @@ public class SimplePathInterpreter {
-                List list = new ArrayList();
+                final List list = new ArrayList();
@@ -422 +422 @@ public class SimplePathInterpreter {
-                NodePointer pointer =
+                final NodePointer pointer =
@@ -450,3 +450,3 @@ public class SimplePathInterpreter {
-                EvalContext context, NodePointer parent,
-                Step[] steps, int currentStep,
-                Expression[] predicates, int currentPredicate) {
+                final EvalContext context, final NodePointer parent,
+                final Step[] steps, final int currentStep,
+                final Expression[] predicates, final int currentPredicate) {
@@ -457 +457 @@ public class SimplePathInterpreter {
-        Expression predicate = predicates[currentPredicate];
+        final Expression predicate = predicates[currentPredicate];
@@ -488,5 +488,5 @@ public class SimplePathInterpreter {
-            EvalContext context, NodePointer parent,
-            Step[] steps, int currentStep,
-            Expression[] predicates, int currentPredicate) {
-        Expression predicate = predicates[currentPredicate];
-        String key = keyFromPredicate(context, predicate);
+            final EvalContext context, final NodePointer parent,
+            final Step[] steps, final int currentStep,
+            final Expression[] predicates, final int currentPredicate) {
+        final Expression predicate = predicates[currentPredicate];
+        final String key = keyFromPredicate(context, predicate);
@@ -495 +495 @@ public class SimplePathInterpreter {
-            PropertyPointer pointer =
+            final PropertyPointer pointer =
@@ -518 +518 @@ public class SimplePathInterpreter {
-            int count = child.getLength();
+            final int count = child.getLength();
@@ -521 +521 @@ public class SimplePathInterpreter {
-                NodePointer valuePointer = valuePointer(child);
+                final NodePointer valuePointer = valuePointer(child);
@@ -523 +523 @@ public class SimplePathInterpreter {
-                if ((valuePointer instanceof PropertyOwnerPointer)
+                if (valuePointer instanceof PropertyOwnerPointer
@@ -548 +548 @@ public class SimplePathInterpreter {
-                    int quality = computeQuality(pointer);
+                    final int quality = computeQuality(pointer);
@@ -566 +566 @@ public class SimplePathInterpreter {
-            NodePointer found =
+            final NodePointer found =
@@ -600,3 +600,3 @@ public class SimplePathInterpreter {
-                EvalContext context, List parents,
-                Step[] steps, int currentStep,
-                Expression[] predicates, int currentPredicate) {
+                final EvalContext context, final List parents,
+                final Step[] steps, final int currentStep,
+                final Expression[] predicates, final int currentPredicate) {
@@ -611 +611 @@ public class SimplePathInterpreter {
-            NodePointer pointer = (NodePointer) parents.get(0);
+            final NodePointer pointer = (NodePointer) parents.get(0);
@@ -615 +615 @@ public class SimplePathInterpreter {
-        Expression predicate = predicates[currentPredicate];
+        final Expression predicate = predicates[currentPredicate];
@@ -617,2 +617,2 @@ public class SimplePathInterpreter {
-            String key = keyFromPredicate(context, predicate);
-            List newList = new ArrayList();
+            final String key = keyFromPredicate(context, predicate);
+            final List newList = new ArrayList();
@@ -620 +620 @@ public class SimplePathInterpreter {
-                NodePointer pointer = (NodePointer) parents.get(i);
+                final NodePointer pointer = (NodePointer) parents.get(i);
@@ -640 +640 @@ public class SimplePathInterpreter {
-            int index = indexFromPredicate(context, predicate);
+            final int index = indexFromPredicate(context, predicate);
@@ -644 +644 @@ public class SimplePathInterpreter {
-            NodePointer ptr = (NodePointer) parents.get(index);
+            final NodePointer ptr = (NodePointer) parents.get(index);
@@ -667,5 +667,5 @@ public class SimplePathInterpreter {
-            EvalContext context, NodePointer parent,
-            Step[] steps, int currentStep,
-            Expression[] predicates, int currentPredicate) {
-        Expression predicate = predicates[currentPredicate];
-        int index = indexFromPredicate(context, predicate);
+            final EvalContext context, final NodePointer parent,
+            final Step[] steps, final int currentStep,
+            final Expression[] predicates, final int currentPredicate) {
+        final Expression predicate = predicates[currentPredicate];
+        final int index = indexFromPredicate(context, predicate);
@@ -701,2 +701,2 @@ public class SimplePathInterpreter {
-        EvalContext context,
-        Expression predicate) {
+        final EvalContext context,
+        final Expression predicate) {
@@ -728,3 +728,3 @@ public class SimplePathInterpreter {
-    private static String keyFromPredicate(EvalContext context,
-                Expression predicate) {
-        Expression expr =
+    private static String keyFromPredicate(final EvalContext context,
+                final Expression predicate) {
+        final Expression expr =
@@ -759,3 +759,3 @@ public class SimplePathInterpreter {
-        NodePointer pointer,
-        String name) {
-        NodeIterator it = pointer.attributeIterator(QNAME_NAME);
+        final NodePointer pointer,
+        final String name) {
+        final NodeIterator it = pointer.attributeIterator(QNAME_NAME);
@@ -775,2 +775,2 @@ public class SimplePathInterpreter {
-        NodePointer pointer,
-        int index) {
+        final NodePointer pointer,
+        final int index) {
@@ -779 +779 @@ public class SimplePathInterpreter {
-                || (pointer.isCollection()
+                || pointer.isCollection()
@@ -781 +781 @@ public class SimplePathInterpreter {
-                    && index < pointer.getLength()));
+                    && index < pointer.getLength());
@@ -790 +790 @@ public class SimplePathInterpreter {
-    private static NodePointer valuePointer(NodePointer pointer) {
+    private static NodePointer valuePointer(final NodePointer pointer) {
@@ -805,2 +805,2 @@ public class SimplePathInterpreter {
-            EvalContext context, NodePointer parent, Step[] steps,
-            int currentStep) {
+            final EvalContext context, NodePointer parent, final Step[] steps,
+            final int currentStep) {
@@ -813 +813 @@ public class SimplePathInterpreter {
-        Step step = steps[currentStep];
+        final Step step = steps[currentStep];
@@ -815 +815 @@ public class SimplePathInterpreter {
-        int axis = step.getAxis();
+        final int axis = step.getAxis();
@@ -817,2 +817,2 @@ public class SimplePathInterpreter {
-            NullPropertyPointer pointer = new NullPropertyPointer(parent);
-            QName name = ((NodeNameTest) step.getNodeTest()).getNodeName();
+            final NullPropertyPointer pointer = new NullPropertyPointer(parent);
+            final QName name = ((NodeNameTest) step.getNodeTest()).getNodeName();
@@ -825 +825 @@ public class SimplePathInterpreter {
-        Expression[] predicates = step.getPredicates();
+        final Expression[] predicates = step.getPredicates();
@@ -846,3 +846,3 @@ public class SimplePathInterpreter {
-            EvalContext context, NodePointer parent,
-            Step[] steps, int currentStep,
-            Expression[] predicates, int currentPredicate) {
+            final EvalContext context, NodePointer parent,
+            final Step[] steps, final int currentStep,
+            final Expression[] predicates, final int currentPredicate) {
@@ -850 +850 @@ public class SimplePathInterpreter {
-            Expression predicate = predicates[i];
+            final Expression predicate = predicates[i];
@@ -852 +852 @@ public class SimplePathInterpreter {
-                String key = keyFromPredicate(context, predicate);
+                final String key = keyFromPredicate(context, predicate);
@@ -854 +854 @@ public class SimplePathInterpreter {
-                NullPropertyPointer pointer = new NullPropertyPointer(parent);
+                final NullPropertyPointer pointer = new NullPropertyPointer(parent);
@@ -859 +859 @@ public class SimplePathInterpreter {
-                int index = indexFromPredicate(context, predicate);
+                final int index = indexFromPredicate(context, predicate);
@@ -881,3 +881,3 @@ public class SimplePathInterpreter {
-        EvalContext context,
-        NodePointer pointer,
-        Step step) {
+        final EvalContext context,
+        final NodePointer pointer,
+        final Step step) {
@@ -886,2 +886,2 @@ public class SimplePathInterpreter {
-            QName qname = ((NodeNameTest) nodeTest).getNodeName();
-            String prefix = qname.getPrefix();
+            final QName qname = ((NodeNameTest) nodeTest).getNodeName();
+            final String prefix = qname.getPrefix();
@@ -889 +889 @@ public class SimplePathInterpreter {
-                String namespaceURI = context.getJXPathContext()
+                final String namespaceURI = context.getJXPathContext()
@@ -910 +910 @@ public class SimplePathInterpreter {
-    private static boolean isLangAttribute(QName name) {
+    private static boolean isLangAttribute(final QName name) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/UnionContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/UnionContext.java
index fa0d48c7..c454e643 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/UnionContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/UnionContext.java
@@ -32 +32 @@ public class UnionContext extends NodeSetContext {
-    private EvalContext[] contexts;
+    private final EvalContext[] contexts;
@@ -40 +40 @@ public class UnionContext extends NodeSetContext {
-    public UnionContext(EvalContext parentContext, EvalContext[] contexts) {
+    public UnionContext(final EvalContext parentContext, final EvalContext[] contexts) {
@@ -44,0 +45 @@ public class UnionContext extends NodeSetContext {
+    @Override
@@ -49 +50,2 @@ public class UnionContext extends NodeSetContext {
-    public boolean setPosition(int position) {
+    @Override
+    public boolean setPosition(final int position) {
@@ -52,4 +54,3 @@ public class UnionContext extends NodeSetContext {
-            BasicNodeSet nodeSet = (BasicNodeSet) getNodeSet();
-            ArrayList pointers = new ArrayList();
-            for (int i = 0; i < contexts.length; i++) {
-                EvalContext ctx = contexts[i];
+            final BasicNodeSet nodeSet = (BasicNodeSet) getNodeSet();
+            final ArrayList pointers = new ArrayList();
+            for (final EvalContext ctx : contexts) {
@@ -58 +59 @@ public class UnionContext extends NodeSetContext {
-                        NodePointer ptr = ctx.getCurrentNodePointer();
+                        final NodePointer ptr = ctx.getCurrentNodePointer();
@@ -67 +68 @@ public class UnionContext extends NodeSetContext {
-            for (Iterator it = pointers.iterator(); it.hasNext();) {
+            for (final Iterator it = pointers.iterator(); it.hasNext();) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/Constant.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/Constant.java
index 928f96b8..6fe6d365 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/Constant.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/Constant.java
@@ -27 +27 @@ public class Constant extends Expression {
-    private Object value;
+    private final Object value;
@@ -33 +33 @@ public class Constant extends Expression {
-    public Constant(Number number) {
+    public Constant(final Number number) {
@@ -41 +41 @@ public class Constant extends Expression {
-    public Constant(String string) {
+    public Constant(final String string) {
@@ -45 +45,2 @@ public class Constant extends Expression {
-    public Object compute(EvalContext context) {
+    @Override
+    public Object compute(final EvalContext context) {
@@ -49 +50,2 @@ public class Constant extends Expression {
-    public Object computeValue(EvalContext context) {
+    @Override
+    public Object computeValue(final EvalContext context) {
@@ -56,0 +59 @@ public class Constant extends Expression {
+    @Override
@@ -64,0 +68 @@ public class Constant extends Expression {
+    @Override
@@ -68,0 +73 @@ public class Constant extends Expression {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java
index 4230999f..8c871599 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java
@@ -42,2 +42,2 @@ public class CoreFunction extends Operation {
-    private static final Double ZERO = new Double(0);
-    private int functionCode;
+    private static final Double ZERO = Double.valueOf(0);
+    private final int functionCode;
@@ -50 +50 @@ public class CoreFunction extends Operation {
-    public CoreFunction(int functionCode, Expression[] args) {
+    public CoreFunction(final int functionCode, final Expression[] args) {
@@ -174,0 +175 @@ public class CoreFunction extends Operation {
+    @Override
@@ -220,0 +222 @@ public class CoreFunction extends Operation {
+    @Override
@@ -222 +224 @@ public class CoreFunction extends Operation {
-        StringBuffer buffer = new StringBuffer();
+        final StringBuffer buffer = new StringBuffer();
@@ -225 +227 @@ public class CoreFunction extends Operation {
-        Expression[] args = getArguments();
+        final Expression[] args = getArguments();
@@ -238 +240,2 @@ public class CoreFunction extends Operation {
-    public Object compute(EvalContext context) {
+    @Override
+    public Object compute(final EvalContext context) {
@@ -242 +245,2 @@ public class CoreFunction extends Operation {
-    public Object computeValue(EvalContext context) {
+    @Override
+    public Object computeValue(final EvalContext context) {
@@ -316 +320 @@ public class CoreFunction extends Operation {
-    protected Object functionLast(EvalContext context) {
+    protected Object functionLast(final EvalContext context) {
@@ -320 +324 @@ public class CoreFunction extends Operation {
-        int old = context.getCurrentPosition();
+        final int old = context.getCurrentPosition();
@@ -331 +335 @@ public class CoreFunction extends Operation {
-        return new Double(count);
+        return Double.valueOf(count);
@@ -339 +343 @@ public class CoreFunction extends Operation {
-    protected Object functionPosition(EvalContext context) {
+    protected Object functionPosition(final EvalContext context) {
@@ -341 +345 @@ public class CoreFunction extends Operation {
-        return new Integer(context.getCurrentPosition());
+        return Integer.valueOf(context.getCurrentPosition());
@@ -349 +353 @@ public class CoreFunction extends Operation {
-    protected Object functionCount(EvalContext context) {
+    protected Object functionCount(final EvalContext context) {
@@ -351 +355 @@ public class CoreFunction extends Operation {
-        Expression arg1 = getArg1();
+        final Expression arg1 = getArg1();
@@ -358 +362 @@ public class CoreFunction extends Operation {
-            EvalContext ctx = (EvalContext) value;
+            final EvalContext ctx = (EvalContext) value;
@@ -373 +377 @@ public class CoreFunction extends Operation {
-        return new Double(count);
+        return Double.valueOf(count);
@@ -381 +385 @@ public class CoreFunction extends Operation {
-    protected Object functionLang(EvalContext context) {
+    protected Object functionLang(final EvalContext context) {
@@ -383,2 +387,2 @@ public class CoreFunction extends Operation {
-        String lang = InfoSetUtil.stringValue(getArg1().computeValue(context));
-        NodePointer pointer = (NodePointer) context.getSingleNodePointer();
+        final String lang = InfoSetUtil.stringValue(getArg1().computeValue(context));
+        final NodePointer pointer = (NodePointer) context.getSingleNodePointer();
@@ -396 +400 @@ public class CoreFunction extends Operation {
-    protected Object functionID(EvalContext context) {
+    protected Object functionID(final EvalContext context) {
@@ -398,3 +402,3 @@ public class CoreFunction extends Operation {
-        String id = InfoSetUtil.stringValue(getArg1().computeValue(context));
-        JXPathContext jxpathContext = context.getJXPathContext();
-        NodePointer pointer = (NodePointer) jxpathContext.getContextPointer();
+        final String id = InfoSetUtil.stringValue(getArg1().computeValue(context));
+        final JXPathContext jxpathContext = context.getJXPathContext();
+        final NodePointer pointer = (NodePointer) jxpathContext.getContextPointer();
@@ -409 +413 @@ public class CoreFunction extends Operation {
-    protected Object functionKey(EvalContext context) {
+    protected Object functionKey(final EvalContext context) {
@@ -411 +415 @@ public class CoreFunction extends Operation {
-        String key = InfoSetUtil.stringValue(getArg1().computeValue(context));
+        final String key = InfoSetUtil.stringValue(getArg1().computeValue(context));
@@ -423 +427 @@ public class CoreFunction extends Operation {
-        JXPathContext jxpathContext = context.getJXPathContext();
+        final JXPathContext jxpathContext = context.getJXPathContext();
@@ -426 +430 @@ public class CoreFunction extends Operation {
-            BasicNodeSet accum = new BasicNodeSet();
+            final BasicNodeSet accum = new BasicNodeSet();
@@ -442 +446 @@ public class CoreFunction extends Operation {
-    protected Object functionNamespaceURI(EvalContext context) {
+    protected Object functionNamespaceURI(final EvalContext context) {
@@ -444,2 +448,2 @@ public class CoreFunction extends Operation {
-            NodePointer ptr = context.getCurrentNodePointer();
-            String str = ptr.getNamespaceURI();
+            final NodePointer ptr = context.getCurrentNodePointer();
+            final String str = ptr.getNamespaceURI();
@@ -449 +453 @@ public class CoreFunction extends Operation {
-        Object set = getArg1().compute(context);
+        final Object set = getArg1().compute(context);
@@ -451 +455 @@ public class CoreFunction extends Operation {
-            EvalContext ctx = (EvalContext) set;
+            final EvalContext ctx = (EvalContext) set;
@@ -453,2 +457,2 @@ public class CoreFunction extends Operation {
-                NodePointer ptr = (NodePointer) ctx.next();
-                String str = ptr.getNamespaceURI();
+                final NodePointer ptr = (NodePointer) ctx.next();
+                final String str = ptr.getNamespaceURI();
@@ -466 +470 @@ public class CoreFunction extends Operation {
-    protected Object functionLocalName(EvalContext context) {
+    protected Object functionLocalName(final EvalContext context) {
@@ -468 +472 @@ public class CoreFunction extends Operation {
-            NodePointer ptr = context.getCurrentNodePointer();
+            final NodePointer ptr = context.getCurrentNodePointer();
@@ -472 +476 @@ public class CoreFunction extends Operation {
-        Object set = getArg1().compute(context);
+        final Object set = getArg1().compute(context);
@@ -474 +478 @@ public class CoreFunction extends Operation {
-            EvalContext ctx = (EvalContext) set;
+            final EvalContext ctx = (EvalContext) set;
@@ -476 +480 @@ public class CoreFunction extends Operation {
-                NodePointer ptr = (NodePointer) ctx.next();
+                final NodePointer ptr = (NodePointer) ctx.next();
@@ -488 +492 @@ public class CoreFunction extends Operation {
-    protected Object functionName(EvalContext context) {
+    protected Object functionName(final EvalContext context) {
@@ -490 +494 @@ public class CoreFunction extends Operation {
-            NodePointer ptr = context.getCurrentNodePointer();
+            final NodePointer ptr = context.getCurrentNodePointer();
@@ -494 +498 @@ public class CoreFunction extends Operation {
-        Object set = getArg1().compute(context);
+        final Object set = getArg1().compute(context);
@@ -496 +500 @@ public class CoreFunction extends Operation {
-            EvalContext ctx = (EvalContext) set;
+            final EvalContext ctx = (EvalContext) set;
@@ -498 +502 @@ public class CoreFunction extends Operation {
-                NodePointer ptr = (NodePointer) ctx.next();
+                final NodePointer ptr = (NodePointer) ctx.next();
@@ -510 +514 @@ public class CoreFunction extends Operation {
-    protected Object functionString(EvalContext context) {
+    protected Object functionString(final EvalContext context) {
@@ -523 +527 @@ public class CoreFunction extends Operation {
-    protected Object functionConcat(EvalContext context) {
+    protected Object functionConcat(final EvalContext context) {
@@ -527,4 +531,4 @@ public class CoreFunction extends Operation {
-        StringBuffer buffer = new StringBuffer();
-        Expression[] args = getArguments();
-        for (int i = 0; i < args.length; i++) {
-            buffer.append(InfoSetUtil.stringValue(args[i].compute(context)));
+        final StringBuffer buffer = new StringBuffer();
+        final Expression[] args = getArguments();
+        for (final Expression arg : args) {
+            buffer.append(InfoSetUtil.stringValue(arg.compute(context)));
@@ -540 +544 @@ public class CoreFunction extends Operation {
-    protected Object functionStartsWith(EvalContext context) {
+    protected Object functionStartsWith(final EvalContext context) {
@@ -542,2 +546,2 @@ public class CoreFunction extends Operation {
-        String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
-        String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
+        final String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
+        final String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
@@ -553 +557 @@ public class CoreFunction extends Operation {
-    protected Object functionEndsWith(EvalContext context) {
+    protected Object functionEndsWith(final EvalContext context) {
@@ -555,2 +559,2 @@ public class CoreFunction extends Operation {
-        String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
-        String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
+        final String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
+        final String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
@@ -565 +569 @@ public class CoreFunction extends Operation {
-    protected Object functionContains(EvalContext context) {
+    protected Object functionContains(final EvalContext context) {
@@ -567,2 +571,2 @@ public class CoreFunction extends Operation {
-        String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
-        String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
+        final String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
+        final String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
@@ -577 +581 @@ public class CoreFunction extends Operation {
-    protected Object functionSubstringBefore(EvalContext context) {
+    protected Object functionSubstringBefore(final EvalContext context) {
@@ -579,3 +583,3 @@ public class CoreFunction extends Operation {
-        String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
-        String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
-        int index = s1.indexOf(s2);
+        final String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
+        final String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
+        final int index = s1.indexOf(s2);
@@ -593 +597 @@ public class CoreFunction extends Operation {
-    protected Object functionSubstringAfter(EvalContext context) {
+    protected Object functionSubstringAfter(final EvalContext context) {
@@ -595,3 +599,3 @@ public class CoreFunction extends Operation {
-        String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
-        String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
-        int index = s1.indexOf(s2);
+        final String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
+        final String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
+        final int index = s1.indexOf(s2);
@@ -609 +613 @@ public class CoreFunction extends Operation {
-    protected Object functionSubstring(EvalContext context) {
+    protected Object functionSubstring(final EvalContext context) {
@@ -613 +617 @@ public class CoreFunction extends Operation {
-        int ac = getArgumentCount();
+        final int ac = getArgumentCount();
@@ -615 +619 @@ public class CoreFunction extends Operation {
-        String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
+        final String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
@@ -638 +642 @@ public class CoreFunction extends Operation {
-        double to = from + length;
+        final double to = from + length;
@@ -661 +665 @@ public class CoreFunction extends Operation {
-    protected Object functionStringLength(EvalContext context) {
+    protected Object functionStringLength(final EvalContext context) {
@@ -670 +674 @@ public class CoreFunction extends Operation {
-        return new Double(s.length());
+        return Double.valueOf(s.length());
@@ -678 +682 @@ public class CoreFunction extends Operation {
-    protected Object functionNormalizeSpace(EvalContext context) {
+    protected Object functionNormalizeSpace(final EvalContext context) {
@@ -680,2 +684,2 @@ public class CoreFunction extends Operation {
-        String s = InfoSetUtil.stringValue(getArg1().computeValue(context));
-        char[] chars = s.toCharArray();
+        final String s = InfoSetUtil.stringValue(getArg1().computeValue(context));
+        final char[] chars = s.toCharArray();
@@ -711 +715 @@ public class CoreFunction extends Operation {
-    protected Object functionTranslate(EvalContext context) {
+    protected Object functionTranslate(final EvalContext context) {
@@ -714,4 +718,4 @@ public class CoreFunction extends Operation {
-        String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
-        String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
-        String s3 = InfoSetUtil.stringValue(getArg3().computeValue(context));
-        char[] chars = s1.toCharArray();
+        final String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
+        final String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
+        final String s3 = InfoSetUtil.stringValue(getArg3().computeValue(context));
+        final char[] chars = s1.toCharArray();
@@ -720,2 +724,2 @@ public class CoreFunction extends Operation {
-            char c = chars[in];
-            int inx = s2.indexOf(c);
+            final char c = chars[in];
+            final int inx = s2.indexOf(c);
@@ -739 +743 @@ public class CoreFunction extends Operation {
-    protected Object functionBoolean(EvalContext context) {
+    protected Object functionBoolean(final EvalContext context) {
@@ -751 +755 @@ public class CoreFunction extends Operation {
-    protected Object functionNot(EvalContext context) {
+    protected Object functionNot(final EvalContext context) {
@@ -763 +767 @@ public class CoreFunction extends Operation {
-    protected Object functionTrue(EvalContext context) {
+    protected Object functionTrue(final EvalContext context) {
@@ -773 +777 @@ public class CoreFunction extends Operation {
-    protected Object functionFalse(EvalContext context) {
+    protected Object functionFalse(final EvalContext context) {
@@ -783 +787 @@ public class CoreFunction extends Operation {
-    protected Object functionNull(EvalContext context) {
+    protected Object functionNull(final EvalContext context) {
@@ -793 +797 @@ public class CoreFunction extends Operation {
-    protected Object functionNumber(EvalContext context) {
+    protected Object functionNumber(final EvalContext context) {
@@ -806 +810 @@ public class CoreFunction extends Operation {
-    protected Object functionSum(EvalContext context) {
+    protected Object functionSum(final EvalContext context) {
@@ -808 +812 @@ public class CoreFunction extends Operation {
-        Object v = getArg1().compute(context);
+        final Object v = getArg1().compute(context);
@@ -814 +818 @@ public class CoreFunction extends Operation {
-            EvalContext ctx = (EvalContext) v;
+            final EvalContext ctx = (EvalContext) v;
@@ -816 +820 @@ public class CoreFunction extends Operation {
-                NodePointer ptr = (NodePointer) ctx.next();
+                final NodePointer ptr = (NodePointer) ctx.next();
@@ -819 +823 @@ public class CoreFunction extends Operation {
-            return new Double(sum);
+            return Double.valueOf(sum);
@@ -830 +834 @@ public class CoreFunction extends Operation {
-    protected Object functionFloor(EvalContext context) {
+    protected Object functionFloor(final EvalContext context) {
@@ -832 +836 @@ public class CoreFunction extends Operation {
-        double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));
+        final double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));
@@ -834 +838 @@ public class CoreFunction extends Operation {
-            return new Double(v);
+            return Double.valueOf(v);
@@ -836 +840 @@ public class CoreFunction extends Operation {
-        return new Double(Math.floor(v));
+        return Double.valueOf(Math.floor(v));
@@ -844 +848 @@ public class CoreFunction extends Operation {
-    protected Object functionCeiling(EvalContext context) {
+    protected Object functionCeiling(final EvalContext context) {
@@ -846 +850 @@ public class CoreFunction extends Operation {
-        double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));
+        final double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));
@@ -848 +852 @@ public class CoreFunction extends Operation {
-            return new Double(v);
+            return Double.valueOf(v);
@@ -850 +854 @@ public class CoreFunction extends Operation {
-        return new Double(Math.ceil(v));
+        return Double.valueOf(Math.ceil(v));
@@ -858 +862 @@ public class CoreFunction extends Operation {
-    protected Object functionRound(EvalContext context) {
+    protected Object functionRound(final EvalContext context) {
@@ -860 +864 @@ public class CoreFunction extends Operation {
-        double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));
+        final double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));
@@ -862 +866 @@ public class CoreFunction extends Operation {
-            return new Double(v);
+            return Double.valueOf(v);
@@ -864 +868 @@ public class CoreFunction extends Operation {
-        return new Double(Math.round(v));
+        return Double.valueOf(Math.round(v));
@@ -872 +876 @@ public class CoreFunction extends Operation {
-    private Object functionFormatNumber(EvalContext context) {
+    private Object functionFormatNumber(final EvalContext context) {
@@ -877 +881 @@ public class CoreFunction extends Operation {
-        double number =
+        final double number =
@@ -879 +883 @@ public class CoreFunction extends Operation {
-        String pattern =
+        final String pattern =
@@ -884 +888 @@ public class CoreFunction extends Operation {
-            String symbolsName =
+            final String symbolsName =
@@ -890 +894 @@ public class CoreFunction extends Operation {
-            NodePointer pointer = context.getCurrentNodePointer();
+            final NodePointer pointer = context.getCurrentNodePointer();
@@ -901 +905 @@ public class CoreFunction extends Operation {
-        DecimalFormat format = (DecimalFormat) NumberFormat.getInstance();
+        final DecimalFormat format = (DecimalFormat) NumberFormat.getInstance();
@@ -911 +915 @@ public class CoreFunction extends Operation {
-    private void assertArgCount(int count) {
+    private void assertArgCount(final int count) {
@@ -920,2 +924,2 @@ public class CoreFunction extends Operation {
-    private void assertArgRange(int min, int max) {
-        int ct = getArgumentCount();
+    private void assertArgRange(final int min, final int max) {
+        final int ct = getArgumentCount();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperation.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperation.java
index c28ce3e1..2080f88f 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperation.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperation.java
@@ -48 +48 @@ public abstract class CoreOperation extends Operation {
-    public CoreOperation(Expression[] args) {
+    public CoreOperation(final Expression[] args) {
@@ -52 +52,2 @@ public abstract class CoreOperation extends Operation {
-    public Object compute(EvalContext context) {
+    @Override
+    public Object compute(final EvalContext context) {
@@ -55,0 +57 @@ public abstract class CoreOperation extends Operation {
+    @Override
@@ -76,0 +79 @@ public abstract class CoreOperation extends Operation {
+    @Override
@@ -81 +84 @@ public abstract class CoreOperation extends Operation {
-        StringBuffer buffer = new StringBuffer();
+        final StringBuffer buffer = new StringBuffer();
@@ -99,2 +102,2 @@ public abstract class CoreOperation extends Operation {
-    private String parenthesize(Expression expression, boolean left) {
-        String s = expression.toString();
+    private String parenthesize(final Expression expression, final boolean left) {
+        final String s = expression.toString();
@@ -104 +107 @@ public abstract class CoreOperation extends Operation {
-        int compared = getPrecedence() - ((CoreOperation) expression).getPrecedence();
+        final int compared = getPrecedence() - ((CoreOperation) expression).getPrecedence();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationAdd.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationAdd.java
index 04da9035..4245030a 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationAdd.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationAdd.java
@@ -31 +31 @@ public class CoreOperationAdd extends CoreOperation {
-    public CoreOperationAdd(Expression[] args) {
+    public CoreOperationAdd(final Expression[] args) {
@@ -35 +35,2 @@ public class CoreOperationAdd extends CoreOperation {
-    public Object computeValue(EvalContext context) {
+    @Override
+    public Object computeValue(final EvalContext context) {
@@ -37,2 +38,2 @@ public class CoreOperationAdd extends CoreOperation {
-        for (int i = 0; i < args.length; i++) {
-            s += InfoSetUtil.doubleValue(args[i].computeValue(context));
+        for (final Expression arg : args) {
+            s += InfoSetUtil.doubleValue(arg.computeValue(context));
@@ -40 +41 @@ public class CoreOperationAdd extends CoreOperation {
-        return new Double(s);
+        return Double.valueOf(s);
@@ -42,0 +44 @@ public class CoreOperationAdd extends CoreOperation {
+    @Override
@@ -46,0 +49 @@ public class CoreOperationAdd extends CoreOperation {
+    @Override
@@ -50,0 +54 @@ public class CoreOperationAdd extends CoreOperation {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationAnd.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationAnd.java
index c24b97e9..113c15e6 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationAnd.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationAnd.java
@@ -31 +31 @@ public class CoreOperationAnd extends CoreOperation {
-    public CoreOperationAnd(Expression[] args) {
+    public CoreOperationAnd(final Expression[] args) {
@@ -35,3 +35,4 @@ public class CoreOperationAnd extends CoreOperation {
-    public Object computeValue(EvalContext context) {
-        for (int i = 0; i < args.length; i++) {
-            if (!InfoSetUtil.booleanValue(args[i].computeValue(context))) {
+    @Override
+    public Object computeValue(final EvalContext context) {
+        for (final Expression arg : args) {
+            if (!InfoSetUtil.booleanValue(arg.computeValue(context))) {
@@ -43,0 +45 @@ public class CoreOperationAnd extends CoreOperation {
+    @Override
@@ -47,0 +50 @@ public class CoreOperationAnd extends CoreOperation {
+    @Override
@@ -51,0 +55 @@ public class CoreOperationAnd extends CoreOperation {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java
index 59a103e5..5e54b915 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java
@@ -34 +34 @@ public abstract class CoreOperationCompare extends CoreOperation {
-    private boolean invert;
+    private final boolean invert;
@@ -41 +41 @@ public abstract class CoreOperationCompare extends CoreOperation {
-    public CoreOperationCompare(Expression arg1, Expression arg2) {
+    public CoreOperationCompare(final Expression arg1, final Expression arg2) {
@@ -51 +51 @@ public abstract class CoreOperationCompare extends CoreOperation {
-    protected CoreOperationCompare(Expression arg1, Expression arg2, boolean invert) {
+    protected CoreOperationCompare(final Expression arg1, final Expression arg2, final boolean invert) {
@@ -56 +56,2 @@ public abstract class CoreOperationCompare extends CoreOperation {
-    public Object computeValue(EvalContext context) {
+    @Override
+    public Object computeValue(final EvalContext context) {
@@ -59,0 +61 @@ public abstract class CoreOperationCompare extends CoreOperation {
+    @Override
@@ -63,0 +66 @@ public abstract class CoreOperationCompare extends CoreOperation {
+    @Override
@@ -75,2 +78,2 @@ public abstract class CoreOperationCompare extends CoreOperation {
-    protected boolean equal(EvalContext context, Expression left,
-            Expression right) {
+    protected boolean equal(final EvalContext context, final Expression left,
+            final Expression right) {
@@ -122 +125 @@ public abstract class CoreOperationCompare extends CoreOperation {
-    protected boolean contains(Iterator it, Object value) {
+    protected boolean contains(final Iterator it, final Object value) {
@@ -124 +127 @@ public abstract class CoreOperationCompare extends CoreOperation {
-            Object element = it.next();
+            final Object element = it.next();
@@ -138,2 +141,2 @@ public abstract class CoreOperationCompare extends CoreOperation {
-    protected boolean findMatch(Iterator lit, Iterator rit) {
-        HashSet left = new HashSet();
+    protected boolean findMatch(final Iterator lit, final Iterator rit) {
+        final HashSet left = new HashSet();
@@ -172 +175 @@ public abstract class CoreOperationCompare extends CoreOperation {
-            double ld = InfoSetUtil.doubleValue(l);
+            final double ld = InfoSetUtil.doubleValue(l);
@@ -176 +179 @@ public abstract class CoreOperationCompare extends CoreOperation {
-            double rd = InfoSetUtil.doubleValue(r);
+            final double rd = InfoSetUtil.doubleValue(r);
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationDivide.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationDivide.java
index 125b08a5..ff5933ce 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationDivide.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationDivide.java
@@ -32 +32 @@ public class CoreOperationDivide extends CoreOperation {
-    public CoreOperationDivide(Expression arg1, Expression arg2) {
+    public CoreOperationDivide(final Expression arg1, final Expression arg2) {
@@ -36,4 +36,5 @@ public class CoreOperationDivide extends CoreOperation {
-    public Object computeValue(EvalContext context) {
-        double l = InfoSetUtil.doubleValue(args[0].computeValue(context));
-        double r = InfoSetUtil.doubleValue(args[1].computeValue(context));
-        return new Double(l / r);
+    @Override
+    public Object computeValue(final EvalContext context) {
+        final double l = InfoSetUtil.doubleValue(args[0].computeValue(context));
+        final double r = InfoSetUtil.doubleValue(args[1].computeValue(context));
+        return Double.valueOf(l / r);
@@ -41,0 +43 @@ public class CoreOperationDivide extends CoreOperation {
+    @Override
@@ -45,0 +48 @@ public class CoreOperationDivide extends CoreOperation {
+    @Override
@@ -49,0 +53 @@ public class CoreOperationDivide extends CoreOperation {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationEqual.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationEqual.java
index 043658a3..0455664f 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationEqual.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationEqual.java
@@ -29 +29 @@ public class CoreOperationEqual extends CoreOperationCompare {
-    public CoreOperationEqual(Expression arg1, Expression arg2) {
+    public CoreOperationEqual(final Expression arg1, final Expression arg2) {
@@ -32,0 +33 @@ public class CoreOperationEqual extends CoreOperationCompare {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java
index 90d9e96e..084ee0f8 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java
@@ -29 +29 @@ public class CoreOperationGreaterThan extends CoreOperationRelationalExpression
-    public CoreOperationGreaterThan(Expression arg1, Expression arg2) {
+    public CoreOperationGreaterThan(final Expression arg1, final Expression arg2) {
@@ -33 +33,2 @@ public class CoreOperationGreaterThan extends CoreOperationRelationalExpression
-    protected boolean evaluateCompare(int compare) {
+    @Override
+    protected boolean evaluateCompare(final int compare) {
@@ -36,0 +38 @@ public class CoreOperationGreaterThan extends CoreOperationRelationalExpression
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java
index b5f59de9..f47f79f9 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java
@@ -30 +30 @@ public class CoreOperationGreaterThanOrEqual extends
-    public CoreOperationGreaterThanOrEqual(Expression arg1, Expression arg2) {
+    public CoreOperationGreaterThanOrEqual(final Expression arg1, final Expression arg2) {
@@ -34 +34,2 @@ public class CoreOperationGreaterThanOrEqual extends
-    protected boolean evaluateCompare(int compare) {
+    @Override
+    protected boolean evaluateCompare(final int compare) {
@@ -37,0 +39 @@ public class CoreOperationGreaterThanOrEqual extends
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java
index fcb32516..d4d1f3ac 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java
@@ -29 +29 @@ public class CoreOperationLessThan extends CoreOperationRelationalExpression {
-    public CoreOperationLessThan(Expression arg1, Expression arg2) {
+    public CoreOperationLessThan(final Expression arg1, final Expression arg2) {
@@ -33 +33,2 @@ public class CoreOperationLessThan extends CoreOperationRelationalExpression {
-    protected boolean evaluateCompare(int compare) {
+    @Override
+    protected boolean evaluateCompare(final int compare) {
@@ -36,0 +38 @@ public class CoreOperationLessThan extends CoreOperationRelationalExpression {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java
index a513cfd7..f140d4f0 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java
@@ -30 +30 @@ public class CoreOperationLessThanOrEqual extends
-    public CoreOperationLessThanOrEqual(Expression arg1, Expression arg2) {
+    public CoreOperationLessThanOrEqual(final Expression arg1, final Expression arg2) {
@@ -34 +34,2 @@ public class CoreOperationLessThanOrEqual extends
-    protected boolean evaluateCompare(int compare) {
+    @Override
+    protected boolean evaluateCompare(final int compare) {
@@ -37,0 +39 @@ public class CoreOperationLessThanOrEqual extends
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationMod.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationMod.java
index 77629167..f04a8fd4 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationMod.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationMod.java
@@ -32 +32 @@ public class CoreOperationMod extends CoreOperation {
-    public CoreOperationMod(Expression arg1, Expression arg2) {
+    public CoreOperationMod(final Expression arg1, final Expression arg2) {
@@ -36,4 +36,5 @@ public class CoreOperationMod extends CoreOperation {
-    public Object computeValue(EvalContext context) {
-        long l = (long) InfoSetUtil.doubleValue(args[0].computeValue(context));
-        long r = (long) InfoSetUtil.doubleValue(args[1].computeValue(context));
-        return new Double(l % r);
+    @Override
+    public Object computeValue(final EvalContext context) {
+        final long l = (long) InfoSetUtil.doubleValue(args[0].computeValue(context));
+        final long r = (long) InfoSetUtil.doubleValue(args[1].computeValue(context));
+        return Double.valueOf(l % r);
@@ -41,0 +43 @@ public class CoreOperationMod extends CoreOperation {
+    @Override
@@ -45,0 +48 @@ public class CoreOperationMod extends CoreOperation {
+    @Override
@@ -49,0 +53 @@ public class CoreOperationMod extends CoreOperation {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationMultiply.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationMultiply.java
index 1433cc82..df35849d 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationMultiply.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationMultiply.java
@@ -32 +32 @@ public class CoreOperationMultiply extends CoreOperation {
-    public CoreOperationMultiply(Expression arg1, Expression arg2) {
+    public CoreOperationMultiply(final Expression arg1, final Expression arg2) {
@@ -36,4 +36,5 @@ public class CoreOperationMultiply extends CoreOperation {
-    public Object computeValue(EvalContext context) {
-        double l = InfoSetUtil.doubleValue(args[0].computeValue(context));
-        double r = InfoSetUtil.doubleValue(args[1].computeValue(context));
-        return new Double(l * r);
+    @Override
+    public Object computeValue(final EvalContext context) {
+        final double l = InfoSetUtil.doubleValue(args[0].computeValue(context));
+        final double r = InfoSetUtil.doubleValue(args[1].computeValue(context));
+        return Double.valueOf(l * r);
@@ -41,0 +43 @@ public class CoreOperationMultiply extends CoreOperation {
+    @Override
@@ -45,0 +48 @@ public class CoreOperationMultiply extends CoreOperation {
+    @Override
@@ -49,0 +53 @@ public class CoreOperationMultiply extends CoreOperation {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNegate.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNegate.java
index 99360e15..afeeed9d 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNegate.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNegate.java
@@ -31 +31 @@ public class CoreOperationNegate extends CoreOperation {
-    public CoreOperationNegate(Expression arg) {
+    public CoreOperationNegate(final Expression arg) {
@@ -35,3 +35,4 @@ public class CoreOperationNegate extends CoreOperation {
-    public Object computeValue(EvalContext context) {
-        double a = InfoSetUtil.doubleValue(args[0].computeValue(context));
-        return new Double(-a);
+    @Override
+    public Object computeValue(final EvalContext context) {
+        final double a = InfoSetUtil.doubleValue(args[0].computeValue(context));
+        return Double.valueOf(-a);
@@ -39,0 +41 @@ public class CoreOperationNegate extends CoreOperation {
+    @Override
@@ -43,0 +46 @@ public class CoreOperationNegate extends CoreOperation {
+    @Override
@@ -47,0 +51 @@ public class CoreOperationNegate extends CoreOperation {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNotEqual.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNotEqual.java
index ddabe5d2..d2a679e9 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNotEqual.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNotEqual.java
@@ -29 +29 @@ public class CoreOperationNotEqual extends CoreOperationCompare {
-    public CoreOperationNotEqual(Expression arg1, Expression arg2) {
+    public CoreOperationNotEqual(final Expression arg1, final Expression arg2) {
@@ -32,0 +33 @@ public class CoreOperationNotEqual extends CoreOperationCompare {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationOr.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationOr.java
index eaeabf73..4b6cbf27 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationOr.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationOr.java
@@ -31 +31 @@ public class CoreOperationOr extends CoreOperation {
-    public CoreOperationOr(Expression[] args) {
+    public CoreOperationOr(final Expression[] args) {
@@ -35,3 +35,4 @@ public class CoreOperationOr extends CoreOperation {
-    public Object computeValue(EvalContext context) {
-        for (int i = 0; i < args.length; i++) {
-            if (InfoSetUtil.booleanValue(args[i].computeValue(context))) {
+    @Override
+    public Object computeValue(final EvalContext context) {
+        for (final Expression arg : args) {
+            if (InfoSetUtil.booleanValue(arg.computeValue(context))) {
@@ -43,0 +45 @@ public class CoreOperationOr extends CoreOperation {
+    @Override
@@ -47,0 +50 @@ public class CoreOperationOr extends CoreOperation {
+    @Override
@@ -51,0 +55 @@ public class CoreOperationOr extends CoreOperation {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
index eee76bcf..0ea95b9f 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
@@ -38 +38 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
-    protected CoreOperationRelationalExpression(Expression[] args) {
+    protected CoreOperationRelationalExpression(final Expression[] args) {
@@ -42 +42,2 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
-    public final Object computeValue(EvalContext context) {
+    @Override
+    public final Object computeValue(final EvalContext context) {
@@ -46,0 +48 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
+    @Override
@@ -50,0 +53 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
+    @Override
@@ -87 +90 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
-        double ld = InfoSetUtil.doubleValue(left);
+        final double ld = InfoSetUtil.doubleValue(left);
@@ -91 +94 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
-        double rd = InfoSetUtil.doubleValue(right);
+        final double rd = InfoSetUtil.doubleValue(right);
@@ -119 +122 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
-    private boolean containsMatch(Iterator it, Object value) {
+    private boolean containsMatch(final Iterator it, final Object value) {
@@ -121 +124 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
-            Object element = it.next();
+            final Object element = it.next();
@@ -135 +138 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
-    private boolean containsMatch(Object value, Iterator it) {
+    private boolean containsMatch(final Object value, final Iterator it) {
@@ -137 +140 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
-            Object element = it.next();
+            final Object element = it.next();
@@ -151,2 +154,2 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
-    private boolean findMatch(Iterator lit, Iterator rit) {
-        HashSet left = new HashSet();
+    private boolean findMatch(final Iterator lit, final Iterator rit) {
+        final HashSet left = new HashSet();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationSubtract.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationSubtract.java
index f4fc53ea..27347b3d 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationSubtract.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationSubtract.java
@@ -32 +32 @@ public class CoreOperationSubtract extends CoreOperation {
-    public CoreOperationSubtract(Expression arg1, Expression arg2) {
+    public CoreOperationSubtract(final Expression arg1, final Expression arg2) {
@@ -36,4 +36,5 @@ public class CoreOperationSubtract extends CoreOperation {
-    public Object computeValue(EvalContext context) {
-        double l = InfoSetUtil.doubleValue(args[0].computeValue(context));
-        double r = InfoSetUtil.doubleValue(args[1].computeValue(context));
-        return new Double(l - r);
+    @Override
+    public Object computeValue(final EvalContext context) {
+        final double l = InfoSetUtil.doubleValue(args[0].computeValue(context));
+        final double r = InfoSetUtil.doubleValue(args[1].computeValue(context));
+        return Double.valueOf(l - r);
@@ -41,0 +43 @@ public class CoreOperationSubtract extends CoreOperation {
+    @Override
@@ -45,0 +48 @@ public class CoreOperationSubtract extends CoreOperation {
+    @Override
@@ -49,0 +53 @@ public class CoreOperationSubtract extends CoreOperation {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationUnion.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationUnion.java
index ad187db7..9718bfba 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationUnion.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/CoreOperationUnion.java
@@ -31 +31 @@ public class CoreOperationUnion extends CoreOperation {
-    public CoreOperationUnion(Expression[] args) {
+    public CoreOperationUnion(final Expression[] args) {
@@ -35,2 +35,3 @@ public class CoreOperationUnion extends CoreOperation {
-    public Object computeValue(EvalContext context) {
-        EvalContext[] argCtxs = new EvalContext[args.length];
+    @Override
+    public Object computeValue(final EvalContext context) {
+        final EvalContext[] argCtxs = new EvalContext[args.length];
@@ -38 +39 @@ public class CoreOperationUnion extends CoreOperation {
-            Object value = args[i].compute(context);
+            final Object value = args[i].compute(context);
@@ -48,0 +50 @@ public class CoreOperationUnion extends CoreOperation {
+    @Override
@@ -52,0 +55 @@ public class CoreOperationUnion extends CoreOperation {
+    @Override
@@ -56,0 +60 @@ public class CoreOperationUnion extends CoreOperation {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/Expression.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/Expression.java
index 341cf9f5..8fc79b31 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/Expression.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/Expression.java
@@ -40 +40 @@ public abstract class Expression {
-    protected static final Double ZERO = new Double(0);
+    protected static final Double ZERO = Double.valueOf(0);
@@ -43 +43 @@ public abstract class Expression {
-    protected static final Double ONE = new Double(1);
+    protected static final Double ONE = Double.valueOf(1);
@@ -46 +46 @@ public abstract class Expression {
-    protected static final Double NOT_A_NUMBER = new Double(Double.NaN);
+    protected static final Double NOT_A_NUMBER = Double.valueOf(Double.NaN);
@@ -91,2 +91,2 @@ public abstract class Expression {
-    public Iterator iterate(EvalContext context) {
-        Object result = compute(context);
+    public Iterator iterate(final EvalContext context) {
+        final Object result = compute(context);
@@ -107,2 +107,2 @@ public abstract class Expression {
-    public Iterator iteratePointers(EvalContext context) {
-        Object result = compute(context);
+    public Iterator iteratePointers(final EvalContext context) {
+        final Object result = compute(context);
@@ -129,3 +129,3 @@ public abstract class Expression {
-        private Iterator iterator;
-        private QName qname;
-        private Locale locale;
+        private final Iterator iterator;
+        private final QName qname;
+        private final Locale locale;
@@ -141 +141,2 @@ public abstract class Expression {
-        public PointerIterator(Iterator it, QName qname, Locale locale) {
+        @Deprecated
+        public PointerIterator(final Iterator it, final QName qname, final Locale locale) {
@@ -146,0 +148 @@ public abstract class Expression {
+        @Override
@@ -150,0 +153 @@ public abstract class Expression {
+        @Override
@@ -152 +155 @@ public abstract class Expression {
-            Object o = iterator.next();
+            final Object o = iterator.next();
@@ -158,0 +162 @@ public abstract class Expression {
+        @Override
@@ -168 +172 @@ public abstract class Expression {
-        private Iterator iterator;
+        private final Iterator iterator;
@@ -174 +178 @@ public abstract class Expression {
-        public ValueIterator(Iterator it) {
+        public ValueIterator(final Iterator it) {
@@ -177,0 +182 @@ public abstract class Expression {
+        @Override
@@ -181,0 +187 @@ public abstract class Expression {
+        @Override
@@ -183 +189 @@ public abstract class Expression {
-            Object o = iterator.next();
+            final Object o = iterator.next();
@@ -189,0 +196 @@ public abstract class Expression {
+        @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/ExpressionPath.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/ExpressionPath.java
index afbc734b..e2e46477 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/ExpressionPath.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/ExpressionPath.java
@@ -34,2 +34,2 @@ public class ExpressionPath extends Path {
-    private Expression expression;
-    private Expression[] predicates;
+    private final Expression expression;
+    private final Expression[] predicates;
@@ -46,2 +46,2 @@ public class ExpressionPath extends Path {
-    public ExpressionPath(Expression expression, Expression[] predicates,
-            Step[] steps) {
+    public ExpressionPath(final Expression expression, final Expression[] predicates,
+            final Step[] steps) {
@@ -74,0 +75 @@ public class ExpressionPath extends Path {
+    @Override
@@ -80,2 +81,2 @@ public class ExpressionPath extends Path {
-            for (int i = 0; i < predicates.length; i++) {
-                if (predicates[i].isContextDependent()) {
+            for (final Expression predicate : predicates) {
+                if (predicate.isContextDependent()) {
@@ -101,0 +103 @@ public class ExpressionPath extends Path {
+    @Override
@@ -103 +105 @@ public class ExpressionPath extends Path {
-        StringBuffer buffer = new StringBuffer();
+        final StringBuffer buffer = new StringBuffer();
@@ -115 +117 @@ public class ExpressionPath extends Path {
-            for (int i = 0; i < predicates.length; i++) {
+            for (final Expression predicate : predicates) {
@@ -117 +119 @@ public class ExpressionPath extends Path {
-                buffer.append(predicates[i]);
+                buffer.append(predicate);
@@ -122 +124 @@ public class ExpressionPath extends Path {
-        Step[] steps = getSteps();
+        final Step[] steps = getSteps();
@@ -124 +126 @@ public class ExpressionPath extends Path {
-            for (int i = 0; i < steps.length; i++) {
+            for (final Step step : steps) {
@@ -126 +128 @@ public class ExpressionPath extends Path {
-                buffer.append(steps[i]);
+                buffer.append(step);
@@ -132 +134,2 @@ public class ExpressionPath extends Path {
-    public Object compute(EvalContext context) {
+    @Override
+    public Object compute(final EvalContext context) {
@@ -136 +139,2 @@ public class ExpressionPath extends Path {
-    public Object computeValue(EvalContext context) {
+    @Override
+    public Object computeValue(final EvalContext context) {
@@ -146,2 +150,2 @@ public class ExpressionPath extends Path {
-    protected Object expressionPath(EvalContext evalContext, boolean firstMatch) {
-        Object value = expression.compute(evalContext);
+    protected Object expressionPath(final EvalContext evalContext, final boolean firstMatch) {
+        final Object value = expression.compute(evalContext);
@@ -169,2 +173,2 @@ public class ExpressionPath extends Path {
-            EvalContext ctx = context;
-            NodePointer ptr = (NodePointer) ctx.getSingleNodePointer();
+            final EvalContext ctx = context;
+            final NodePointer ptr = (NodePointer) ctx.getSingleNodePointer();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/ExtensionFunction.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/ExtensionFunction.java
index 747b5bb1..482df390 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/ExtensionFunction.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/ExtensionFunction.java
@@ -34 +34 @@ public class ExtensionFunction extends Operation {
-    private QName functionName;
+    private final QName functionName;
@@ -41 +41 @@ public class ExtensionFunction extends Operation {
-    public ExtensionFunction(QName functionName, Expression[] args) {
+    public ExtensionFunction(final QName functionName, final Expression[] args) {
@@ -58,0 +59 @@ public class ExtensionFunction extends Operation {
+    @Override
@@ -62,0 +64 @@ public class ExtensionFunction extends Operation {
+    @Override
@@ -64 +66 @@ public class ExtensionFunction extends Operation {
-        StringBuffer buffer = new StringBuffer();
+        final StringBuffer buffer = new StringBuffer();
@@ -67 +69 @@ public class ExtensionFunction extends Operation {
-        Expression[] args = getArguments();
+        final Expression[] args = getArguments();
@@ -80 +82,2 @@ public class ExtensionFunction extends Operation {
-    public Object compute(EvalContext context) {
+    @Override
+    public Object compute(final EvalContext context) {
@@ -84 +87,2 @@ public class ExtensionFunction extends Operation {
-    public Object computeValue(EvalContext context) {
+    @Override
+    public Object computeValue(final EvalContext context) {
@@ -93 +97 @@ public class ExtensionFunction extends Operation {
-        Function function =
+        final Function function =
@@ -99 +103 @@ public class ExtensionFunction extends Operation {
-        Object result = function.invoke(context, parameters);
+        final Object result = function.invoke(context, parameters);
@@ -109 +113 @@ public class ExtensionFunction extends Operation {
-    private Object convert(Object object) {
+    private Object convert(final Object object) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/LocationPath.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/LocationPath.java
index 5f2ca489..b21b5336 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/LocationPath.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/LocationPath.java
@@ -26 +26 @@ public class LocationPath extends Path {
-    private boolean absolute;
+    private final boolean absolute;
@@ -33 +33 @@ public class LocationPath extends Path {
-    public LocationPath(boolean absolute, Step[] steps) {
+    public LocationPath(final boolean absolute, final Step[] steps) {
@@ -45,0 +46 @@ public class LocationPath extends Path {
+    @Override
@@ -49,0 +51 @@ public class LocationPath extends Path {
+    @Override
@@ -51,2 +53,2 @@ public class LocationPath extends Path {
-        StringBuffer buffer = new StringBuffer();
-        Step[] steps = getSteps();
+        final StringBuffer buffer = new StringBuffer();
+        final Step[] steps = getSteps();
@@ -64 +66,2 @@ public class LocationPath extends Path {
-    public Object compute(EvalContext context) {
+    @Override
+    public Object compute(final EvalContext context) {
@@ -76 +79,2 @@ public class LocationPath extends Path {
-    public Object computeValue(EvalContext context) {
+    @Override
+    public Object computeValue(final EvalContext context) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/NameAttributeTest.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/NameAttributeTest.java
index 0fcb9df8..3bb9843b 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/NameAttributeTest.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/NameAttributeTest.java
@@ -31 +31 @@ public class NameAttributeTest extends CoreOperationEqual {
-    public NameAttributeTest(Expression namePath, Expression nameValue) {
+    public NameAttributeTest(final Expression namePath, final Expression nameValue) {
@@ -42,0 +43 @@ public class NameAttributeTest extends CoreOperationEqual {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/NodeNameTest.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/NodeNameTest.java
index 554dd544..8578f20a 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/NodeNameTest.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/NodeNameTest.java
@@ -24 +24 @@ public class NodeNameTest extends NodeTest {
-    private QName qname;
+    private final QName qname;
@@ -31 +31 @@ public class NodeNameTest extends NodeTest {
-    public NodeNameTest(QName qname) {
+    public NodeNameTest(final QName qname) {
@@ -40 +40 @@ public class NodeNameTest extends NodeTest {
-    public NodeNameTest(QName qname, String namespaceURI) {
+    public NodeNameTest(final QName qname, final String namespaceURI) {
@@ -68,0 +69 @@ public class NodeNameTest extends NodeTest {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/NodeTypeTest.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/NodeTypeTest.java
index 729c4da4..16290782 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/NodeTypeTest.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/NodeTypeTest.java
@@ -24 +24 @@ public class NodeTypeTest extends NodeTest {
-    private int nodeType;
+    private final int nodeType;
@@ -30 +30 @@ public class NodeTypeTest extends NodeTest {
-    public NodeTypeTest(int nodeType) {
+    public NodeTypeTest(final int nodeType) {
@@ -41,0 +42 @@ public class NodeTypeTest extends NodeTest {
+    @Override
@@ -51 +52 @@ public class NodeTypeTest extends NodeTest {
-    public static String nodeTypeToString(int code) {
+    public static String nodeTypeToString(final int code) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/Operation.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/Operation.java
index d2691083..aec5ac30 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/Operation.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/Operation.java
@@ -30 +30 @@ public abstract class Operation extends Expression {
-    public Operation(Expression[] args) {
+    public Operation(final Expression[] args) {
@@ -41,0 +42 @@ public abstract class Operation extends Expression {
+    @Override
@@ -44,2 +45,2 @@ public abstract class Operation extends Expression {
-            for (int i = 0; i < args.length; i++) {
-                if (args[i].isContextDependent()) {
+            for (final Expression arg : args) {
+                if (arg.isContextDependent()) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/Path.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/Path.java
index b1ee967a..40ba7e8c 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/Path.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/Path.java
@@ -41 +41 @@ public abstract class Path extends Expression {
-    private Step[] steps;
+    private final Step[] steps;
@@ -49 +49 @@ public abstract class Path extends Expression {
-    public Path(Step[] steps) {
+    public Path(final Step[] steps) {
@@ -60,0 +61 @@ public abstract class Path extends Expression {
+    @Override
@@ -63,2 +64,2 @@ public abstract class Path extends Expression {
-            for (int i = 0; i < steps.length; i++) {
-                if (steps[i].isContextDependent()) {
+            for (final Step step : steps) {
+                if (step.isContextDependent()) {
@@ -82,3 +83,3 @@ public abstract class Path extends Expression {
-            Step[] steps = getSteps();
-            for (int i = 0; i < steps.length; i++) {
-                if (!isSimpleStep(steps[i])) {
+            final Step[] steps = getSteps();
+            for (final Step step : steps) {
+                if (!isSimpleStep(step)) {
@@ -100 +101 @@ public abstract class Path extends Expression {
-    protected boolean isSimpleStep(Step step) {
+    protected boolean isSimpleStep(final Step step) {
@@ -102 +103 @@ public abstract class Path extends Expression {
-            NodeTest nodeTest = step.getNodeTest();
+            final NodeTest nodeTest = step.getNodeTest();
@@ -106 +107 @@ public abstract class Path extends Expression {
-            int nodeType = ((NodeTypeTest) nodeTest).getNodeType();
+            final int nodeType = ((NodeTypeTest) nodeTest).getNodeType();
@@ -114 +115 @@ public abstract class Path extends Expression {
-            NodeTest nodeTest = step.getNodeTest();
+            final NodeTest nodeTest = step.getNodeTest();
@@ -131 +132 @@ public abstract class Path extends Expression {
-    protected boolean areBasicPredicates(Expression[] predicates) {
+    protected boolean areBasicPredicates(final Expression[] predicates) {
@@ -134,3 +135,3 @@ public abstract class Path extends Expression {
-            for (int i = 0; i < predicates.length; i++) {
-                if (predicates[i] instanceof NameAttributeTest) {
-                    if (((NameAttributeTest) predicates[i])
+            for (final Expression predicate : predicates) {
+                if (predicate instanceof NameAttributeTest) {
+                    if (((NameAttributeTest) predicate)
@@ -142 +143 @@ public abstract class Path extends Expression {
-                else if (predicates[i].isContextDependent()) {
+                else if (predicate.isContextDependent()) {
@@ -162 +163 @@ public abstract class Path extends Expression {
-    protected Pointer getSingleNodePointerForSteps(EvalContext context) {
+    protected Pointer getSingleNodePointerForSteps(final EvalContext context) {
@@ -168 +169 @@ public abstract class Path extends Expression {
-            NodePointer ptr = (NodePointer) context.getSingleNodePointer();
+            final NodePointer ptr = (NodePointer) context.getSingleNodePointer();
@@ -197 +198 @@ public abstract class Path extends Expression {
-    protected Pointer searchForPath(EvalContext context) {
+    protected Pointer searchForPath(final EvalContext context) {
@@ -199 +200 @@ public abstract class Path extends Expression {
-        Pointer pointer = ctx.getSingleNodePointer();
+        final Pointer pointer = ctx.getSingleNodePointer();
@@ -211 +212 @@ public abstract class Path extends Expression {
-                Pointer partial = (Pointer) ctx.next();
+                final Pointer partial = (Pointer) ctx.next();
@@ -235 +236 @@ public abstract class Path extends Expression {
-    protected EvalContext evalSteps(EvalContext context) {
+    protected EvalContext evalSteps(final EvalContext context) {
@@ -248,2 +249,2 @@ public abstract class Path extends Expression {
-            int stepCount,
-            boolean createInitialContext) {
+            final int stepCount,
+            final boolean createInitialContext) {
@@ -262 +263 @@ public abstract class Path extends Expression {
-            Expression[] predicates = steps[i].getPredicates();
+            final Expression[] predicates = steps[i].getPredicates();
@@ -284,2 +285,2 @@ public abstract class Path extends Expression {
-        EvalContext context,
-        int axis,
+        final EvalContext context,
+        final int axis,
@@ -288,2 +289,2 @@ public abstract class Path extends Expression {
-            QName qname = ((NodeNameTest) nodeTest).getNodeName();
-            String prefix = qname.getPrefix();
+            final QName qname = ((NodeNameTest) nodeTest).getNodeName();
+            final String prefix = qname.getPrefix();
@@ -291 +292 @@ public abstract class Path extends Expression {
-                String namespaceURI = context.getJXPathContext()
+                final String namespaceURI = context.getJXPathContext()
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/ProcessingInstructionTest.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/ProcessingInstructionTest.java
index 269127fb..2fc1c780 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/ProcessingInstructionTest.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/ProcessingInstructionTest.java
@@ -22 +22 @@ public class ProcessingInstructionTest extends NodeTest {
-    private String target;
+    private final String target;
@@ -28 +28 @@ public class ProcessingInstructionTest extends NodeTest {
-    public ProcessingInstructionTest(String target) {
+    public ProcessingInstructionTest(final String target) {
@@ -39,0 +40 @@ public class ProcessingInstructionTest extends NodeTest {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/Step.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/Step.java
index a6c13216..958b649b 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/Step.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/Step.java
@@ -24,3 +24,3 @@ public class Step {
-    private int axis;
-    private NodeTest nodeTest;
-    private Expression[] predicates;
+    private final int axis;
+    private final NodeTest nodeTest;
+    private final Expression[] predicates;
@@ -34 +34 @@ public class Step {
-    protected Step(int axis, NodeTest nodeTest, Expression[] predicates) {
+    protected Step(final int axis, final NodeTest nodeTest, final Expression[] predicates) {
@@ -70,2 +70,2 @@ public class Step {
-            for (int i = 0; i < predicates.length; i++) {
-                if (predicates[i].isContextDependent()) {
+            for (final Expression predicate : predicates) {
+                if (predicate.isContextDependent()) {
@@ -78,0 +79 @@ public class Step {
+    @Override
@@ -80,2 +81,2 @@ public class Step {
-        StringBuffer buffer = new StringBuffer();
-        int axis = getAxis();
+        final StringBuffer buffer = new StringBuffer();
+        final int axis = getAxis();
@@ -113 +114 @@ public class Step {
-        Expression[] predicates = getPredicates();
+        final Expression[] predicates = getPredicates();
@@ -115 +116 @@ public class Step {
-            for (int i = 0; i < predicates.length; i++) {
+            for (final Expression predicate : predicates) {
@@ -117 +118 @@ public class Step {
-                buffer.append(predicates[i]);
+                buffer.append(predicate);
@@ -131 +132 @@ public class Step {
-    public static String axisToString(int axis) {
+    public static String axisToString(final int axis) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/TreeCompiler.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/TreeCompiler.java
index 72b30f99..87a92618 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/TreeCompiler.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/TreeCompiler.java
@@ -28,2 +28,3 @@ public class TreeCompiler implements Compiler {
-    public Object number(String value) {
-        return new Constant(new Double(value));
+    @Override
+    public Object number(final String value) {
+        return new Constant(Double.valueOf(value));
@@ -32 +33,2 @@ public class TreeCompiler implements Compiler {
-    public Object literal(String value) {
+    @Override
+    public Object literal(final String value) {
@@ -36 +38,2 @@ public class TreeCompiler implements Compiler {
-    public Object qname(String prefix, String name) {
+    @Override
+    public Object qname(final String prefix, final String name) {
@@ -40 +43,2 @@ public class TreeCompiler implements Compiler {
-    public Object sum(Object[] arguments) {
+    @Override
+    public Object sum(final Object[] arguments) {
@@ -44 +48,2 @@ public class TreeCompiler implements Compiler {
-    public Object minus(Object left, Object right) {
+    @Override
+    public Object minus(final Object left, final Object right) {
@@ -50 +55,2 @@ public class TreeCompiler implements Compiler {
-    public Object multiply(Object left, Object right) {
+    @Override
+    public Object multiply(final Object left, final Object right) {
@@ -54 +60,2 @@ public class TreeCompiler implements Compiler {
-    public Object divide(Object left, Object right) {
+    @Override
+    public Object divide(final Object left, final Object right) {
@@ -58 +65,2 @@ public class TreeCompiler implements Compiler {
-    public Object mod(Object left, Object right) {
+    @Override
+    public Object mod(final Object left, final Object right) {
@@ -62 +70,2 @@ public class TreeCompiler implements Compiler {
-    public Object lessThan(Object left, Object right) {
+    @Override
+    public Object lessThan(final Object left, final Object right) {
@@ -66 +75,2 @@ public class TreeCompiler implements Compiler {
-    public Object lessThanOrEqual(Object left, Object right) {
+    @Override
+    public Object lessThanOrEqual(final Object left, final Object right) {
@@ -72 +82,2 @@ public class TreeCompiler implements Compiler {
-    public Object greaterThan(Object left, Object right) {
+    @Override
+    public Object greaterThan(final Object left, final Object right) {
@@ -78 +89,2 @@ public class TreeCompiler implements Compiler {
-    public Object greaterThanOrEqual(Object left, Object right) {
+    @Override
+    public Object greaterThanOrEqual(final Object left, final Object right) {
@@ -84 +96,2 @@ public class TreeCompiler implements Compiler {
-    public Object equal(Object left, Object right) {
+    @Override
+    public Object equal(final Object left, final Object right) {
@@ -90 +103,2 @@ public class TreeCompiler implements Compiler {
-    public Object notEqual(Object left, Object right) {
+    @Override
+    public Object notEqual(final Object left, final Object right) {
@@ -94 +108,2 @@ public class TreeCompiler implements Compiler {
-    public Object minus(Object argument) {
+    @Override
+    public Object minus(final Object argument) {
@@ -98 +113,2 @@ public class TreeCompiler implements Compiler {
-    public Object variableReference(Object qName) {
+    @Override
+    public Object variableReference(final Object qName) {
@@ -102 +118,2 @@ public class TreeCompiler implements Compiler {
-    public Object function(int code, Object[] args) {
+    @Override
+    public Object function(final int code, final Object[] args) {
@@ -106 +123,2 @@ public class TreeCompiler implements Compiler {
-    public Object function(Object name, Object[] args) {
+    @Override
+    public Object function(final Object name, final Object[] args) {
@@ -110 +128,2 @@ public class TreeCompiler implements Compiler {
-    public Object and(Object[] arguments) {
+    @Override
+    public Object and(final Object[] arguments) {
@@ -114 +133,2 @@ public class TreeCompiler implements Compiler {
-    public Object or(Object[] arguments) {
+    @Override
+    public Object or(final Object[] arguments) {
@@ -118 +138,2 @@ public class TreeCompiler implements Compiler {
-    public Object union(Object[] arguments) {
+    @Override
+    public Object union(final Object[] arguments) {
@@ -122 +143,2 @@ public class TreeCompiler implements Compiler {
-    public Object locationPath(boolean absolute, Object[] steps) {
+    @Override
+    public Object locationPath(final boolean absolute, final Object[] steps) {
@@ -126,2 +148,3 @@ public class TreeCompiler implements Compiler {
-    public Object expressionPath(Object expression, Object[] predicates,
-            Object[] steps) {
+    @Override
+    public Object expressionPath(final Object expression, final Object[] predicates,
+            final Object[] steps) {
@@ -134 +157,2 @@ public class TreeCompiler implements Compiler {
-    public Object nodeNameTest(Object qname) {
+    @Override
+    public Object nodeNameTest(final Object qname) {
@@ -138 +162,2 @@ public class TreeCompiler implements Compiler {
-    public Object nodeTypeTest(int nodeType) {
+    @Override
+    public Object nodeTypeTest(final int nodeType) {
@@ -142 +167,2 @@ public class TreeCompiler implements Compiler {
-    public Object processingInstructionTest(String instruction) {
+    @Override
+    public Object processingInstructionTest(final String instruction) {
@@ -146 +172,2 @@ public class TreeCompiler implements Compiler {
-    public Object step(int axis, Object nodeTest, Object[] predicates) {
+    @Override
+    public Object step(final int axis, final Object nodeTest, final Object[] predicates) {
@@ -158 +185 @@ public class TreeCompiler implements Compiler {
-    private Expression[] toExpressionArray(Object[] array) {
+    private Expression[] toExpressionArray(final Object[] array) {
@@ -174 +201 @@ public class TreeCompiler implements Compiler {
-    private Step[] toStepArray(Object[] array) {
+    private Step[] toStepArray(final Object[] array) {
@@ -190 +217 @@ public class TreeCompiler implements Compiler {
-    private boolean isNameAttributeTest(Expression arg) {
+    private boolean isNameAttributeTest(final Expression arg) {
@@ -195 +222 @@ public class TreeCompiler implements Compiler {
-        Step[] steps = ((LocationPath) arg).getSteps();
+        final Step[] steps = ((LocationPath) arg).getSteps();
@@ -202 +229 @@ public class TreeCompiler implements Compiler {
-        NodeTest test = steps[0].getNodeTest();
+        final NodeTest test = steps[0].getNodeTest();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/compiler/VariableReference.java b/src/main/java/org/apache/commons/jxpath/ri/compiler/VariableReference.java
index a9265cb5..5074d9b4 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/compiler/VariableReference.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/compiler/VariableReference.java
@@ -27 +27 @@ public class VariableReference extends Expression {
-    private QName varName;
+    private final QName varName;
@@ -33 +33 @@ public class VariableReference extends Expression {
-    public VariableReference(QName varName) {
+    public VariableReference(final QName varName) {
@@ -44,0 +45 @@ public class VariableReference extends Expression {
+    @Override
@@ -48,0 +50 @@ public class VariableReference extends Expression {
+    @Override
@@ -52,0 +55 @@ public class VariableReference extends Expression {
+    @Override
@@ -57 +60,2 @@ public class VariableReference extends Expression {
-    public Object compute(EvalContext context) {
+    @Override
+    public Object compute(final EvalContext context) {
@@ -66 +70,2 @@ public class VariableReference extends Expression {
-    public Object computeValue(EvalContext context) {
+    @Override
+    public Object computeValue(final EvalContext context) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/NodePointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/NodePointer.java
index 2612bf34..34b498db 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/NodePointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/NodePointer.java
@@ -72,3 +72,3 @@ public abstract class NodePointer implements Pointer {
-        QName name,
-        Object bean,
-        Locale locale) {
+        final QName name,
+        final Object bean,
+        final Locale locale) {
@@ -81 +81 @@ public abstract class NodePointer implements Pointer {
-        NodePointerFactory[] factories =
+        final NodePointerFactory[] factories =
@@ -83,2 +83,2 @@ public abstract class NodePointer implements Pointer {
-        for (int i = 0; i < factories.length; i++) {
-            pointer = factories[i].createNodePointer(name, bean, locale);
+        for (final NodePointerFactory element : factories) {
+            pointer = element.createNodePointer(name, bean, locale);
@@ -103,4 +103,4 @@ public abstract class NodePointer implements Pointer {
-        NodePointer parent,
-        QName name,
-        Object bean) {
-        NodePointerFactory[] factories =
+        final NodePointer parent,
+        final QName name,
+        final Object bean) {
+        final NodePointerFactory[] factories =
@@ -108,3 +108,3 @@ public abstract class NodePointer implements Pointer {
-        for (int i = 0; i < factories.length; i++) {
-            NodePointer pointer =
-                factories[i].createNodePointer(parent, name, bean);
+        for (final NodePointerFactory element : factories) {
+            final NodePointer pointer =
+                element.createNodePointer(parent, name, bean);
@@ -130 +130 @@ public abstract class NodePointer implements Pointer {
-    protected NodePointer(NodePointer parent) {
+    protected NodePointer(final NodePointer parent) {
@@ -139 +139 @@ public abstract class NodePointer implements Pointer {
-    protected NodePointer(NodePointer parent, Locale locale) {
+    protected NodePointer(final NodePointer parent, final Locale locale) {
@@ -159 +159 @@ public abstract class NodePointer implements Pointer {
-    public void setNamespaceResolver(NamespaceResolver namespaceResolver) {
+    public void setNamespaceResolver(final NamespaceResolver namespaceResolver) {
@@ -187 +187 @@ public abstract class NodePointer implements Pointer {
-    public void setAttribute(boolean attribute) {
+    public void setAttribute(final boolean attribute) {
@@ -217,0 +218 @@ public abstract class NodePointer implements Pointer {
+    @Deprecated
@@ -247 +248 @@ public abstract class NodePointer implements Pointer {
-    public void setIndex(int index) {
+    public void setIndex(final int index) {
@@ -271,0 +273 @@ public abstract class NodePointer implements Pointer {
+    @Override
@@ -273 +275 @@ public abstract class NodePointer implements Pointer {
-        NodePointer valuePointer = getValuePointer();
+        final NodePointer valuePointer = getValuePointer();
@@ -300 +302 @@ public abstract class NodePointer implements Pointer {
-        NodePointer ivp = getImmediateValuePointer();
+        final NodePointer ivp = getImmediateValuePointer();
@@ -351,0 +354 @@ public abstract class NodePointer implements Pointer {
+    @Deprecated
@@ -361,0 +365 @@ public abstract class NodePointer implements Pointer {
+    @Override
@@ -369,0 +374 @@ public abstract class NodePointer implements Pointer {
+    @Override
@@ -388,0 +394 @@ public abstract class NodePointer implements Pointer {
+    @Override
@@ -406 +412 @@ public abstract class NodePointer implements Pointer {
-    public boolean testNode(NodeTest test) {
+    public boolean testNode(final NodeTest test) {
@@ -414,3 +420,3 @@ public abstract class NodePointer implements Pointer {
-            NodeNameTest nodeNameTest = (NodeNameTest) test;
-            QName testName = nodeNameTest.getNodeName();
-            QName nodeName = getName();
+            final NodeNameTest nodeNameTest = (NodeNameTest) test;
+            final QName testName = nodeNameTest.getNodeName();
+            final QName nodeName = getName();
@@ -421,2 +427,2 @@ public abstract class NodePointer implements Pointer {
-            String testPrefix = testName.getPrefix();
-            String nodePrefix = nodeName.getPrefix();
+            final String testPrefix = testName.getPrefix();
+            final String nodePrefix = nodeName.getPrefix();
@@ -424,2 +430,2 @@ public abstract class NodePointer implements Pointer {
-                String testNS = getNamespaceURI(testPrefix);
-                String nodeNS = getNamespaceURI(nodePrefix);
+                final String testNS = getNamespaceURI(testPrefix);
+                final String nodeNS = getNamespaceURI(nodePrefix);
@@ -446 +452 @@ public abstract class NodePointer implements Pointer {
-    public NodePointer createPath(JXPathContext context, Object value) {
+    public NodePointer createPath(final JXPathContext context, final Object value) {
@@ -468 +474 @@ public abstract class NodePointer implements Pointer {
-    public NodePointer createPath(JXPathContext context) {
+    public NodePointer createPath(final JXPathContext context) {
@@ -484,4 +490,4 @@ public abstract class NodePointer implements Pointer {
-        JXPathContext context,
-        QName name,
-        int index,
-        Object value) {
+        final JXPathContext context,
+        final QName name,
+        final int index,
+        final Object value) {
@@ -503 +509 @@ public abstract class NodePointer implements Pointer {
-    public NodePointer createChild(JXPathContext context, QName name, int index) {
+    public NodePointer createChild(final JXPathContext context, final QName name, final int index) {
@@ -515 +521 @@ public abstract class NodePointer implements Pointer {
-    public NodePointer createAttribute(JXPathContext context, QName name) {
+    public NodePointer createAttribute(final JXPathContext context, final QName name) {
@@ -539,3 +545,3 @@ public abstract class NodePointer implements Pointer {
-    public boolean isLanguage(String lang) {
-        Locale loc = getLocale();
-        String name = loc.toString().replace('_', '-');
+    public boolean isLanguage(final String lang) {
+        final Locale loc = getLocale();
+        final String name = loc.toString().replace('_', '-');
@@ -554,4 +560,4 @@ public abstract class NodePointer implements Pointer {
-        NodeTest test,
-        boolean reverse,
-        NodePointer startWith) {
-        NodePointer valuePointer = getValuePointer();
+        final NodeTest test,
+        final boolean reverse,
+        final NodePointer startWith) {
+        final NodePointer valuePointer = getValuePointer();
@@ -569,2 +575,2 @@ public abstract class NodePointer implements Pointer {
-    public NodeIterator attributeIterator(QName qname) {
-        NodePointer valuePointer = getValuePointer();
+    public NodeIterator attributeIterator(final QName qname) {
+        final NodePointer valuePointer = getValuePointer();
@@ -592 +598 @@ public abstract class NodePointer implements Pointer {
-    public NodePointer namespacePointer(String namespace) {
+    public NodePointer namespacePointer(final String namespace) {
@@ -601 +607 @@ public abstract class NodePointer implements Pointer {
-    public String getNamespaceURI(String prefix) {
+    public String getNamespaceURI(final String prefix) {
@@ -619 +625 @@ public abstract class NodePointer implements Pointer {
-    protected boolean isDefaultNamespace(String prefix) {
+    protected boolean isDefaultNamespace(final String prefix) {
@@ -624 +630 @@ public abstract class NodePointer implements Pointer {
-        String namespace = getNamespaceURI(prefix);
+        final String namespace = getNamespaceURI(prefix);
@@ -642 +648 @@ public abstract class NodePointer implements Pointer {
-    public Pointer getPointerByID(JXPathContext context, String id) {
+    public Pointer getPointerByID(final JXPathContext context, final String id) {
@@ -654,3 +660,3 @@ public abstract class NodePointer implements Pointer {
-            JXPathContext context,
-            String key,
-            String value) {
+            final JXPathContext context,
+            final String key,
+            final String value) {
@@ -667 +673 @@ public abstract class NodePointer implements Pointer {
-    public NodeSet getNodeSetByKey(JXPathContext context, String key, Object value) {
+    public NodeSet getNodeSetByKey(final JXPathContext context, final String key, final Object value) {
@@ -674,0 +681 @@ public abstract class NodePointer implements Pointer {
+    @Override
@@ -682 +689 @@ public abstract class NodePointer implements Pointer {
-        StringBuffer buffer = new StringBuffer();
+        final StringBuffer buffer = new StringBuffer();
@@ -705,0 +713 @@ public abstract class NodePointer implements Pointer {
+    @Override
@@ -708 +716 @@ public abstract class NodePointer implements Pointer {
-            NodePointer ptr = (NodePointer) super.clone();
+            final NodePointer ptr = (NodePointer) super.clone();
@@ -714 +722 @@ public abstract class NodePointer implements Pointer {
-        catch (CloneNotSupportedException ex) {
+        catch (final CloneNotSupportedException ex) {
@@ -720,0 +729 @@ public abstract class NodePointer implements Pointer {
+    @Override
@@ -725 +734,2 @@ public abstract class NodePointer implements Pointer {
-    public int compareTo(Object object) {
+    @Override
+    public int compareTo(final Object object) {
@@ -730 +740 @@ public abstract class NodePointer implements Pointer {
-        NodePointer pointer = (NodePointer) object;
+        final NodePointer pointer = (NodePointer) object;
@@ -738 +748 @@ public abstract class NodePointer implements Pointer {
-        HashSet parents1 = new HashSet();
+        final HashSet parents1 = new HashSet();
@@ -769,4 +779,4 @@ public abstract class NodePointer implements Pointer {
-        NodePointer p1,
-        int depth1,
-        NodePointer p2,
-        int depth2) {
+        final NodePointer p1,
+        final int depth1,
+        final NodePointer p2,
+        final int depth2) {
@@ -774 +784 @@ public abstract class NodePointer implements Pointer {
-            int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
+            final int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
@@ -778 +788 @@ public abstract class NodePointer implements Pointer {
-            int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
+            final int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
@@ -790 +800 @@ public abstract class NodePointer implements Pointer {
-        int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
+        final int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
@@ -805 +815 @@ public abstract class NodePointer implements Pointer {
-    public void setExceptionHandler(ExceptionHandler exceptionHandler) {
+    public void setExceptionHandler(final ExceptionHandler exceptionHandler) {
@@ -815 +825 @@ public abstract class NodePointer implements Pointer {
-    public void handle(Throwable t, NodePointer originator) {
+    public void handle(final Throwable t, final NodePointer originator) {
@@ -830 +840 @@ public abstract class NodePointer implements Pointer {
-    public void handle(Throwable t) {
+    public void handle(final Throwable t) {
@@ -839,3 +849,3 @@ public abstract class NodePointer implements Pointer {
-    protected String escape(String string) {
-        final char[] c = new char[] { '\'', '"' };
-        final String[] esc = new String[] { "&apos;", "&quot;" };
+    protected String escape(final String string) {
+        final char[] c = { '\'', '"' };
+        final String[] esc = { "&apos;", "&quot;" };
@@ -874,2 +884,2 @@ public abstract class NodePointer implements Pointer {
-    protected AbstractFactory getAbstractFactory(JXPathContext context) {
-        AbstractFactory factory = context.getFactory();
+    protected AbstractFactory getAbstractFactory(final JXPathContext context) {
+        final AbstractFactory factory = context.getFactory();
@@ -889 +899 @@ public abstract class NodePointer implements Pointer {
-    private static void printDeep(NodePointer pointer, String indent) {
+    private static void printDeep(final NodePointer pointer, final String indent) {
@@ -912 +922 @@ public abstract class NodePointer implements Pointer {
-    private static boolean safeEquals(Object o1, Object o2) {
+    private static boolean safeEquals(final Object o1, final Object o2) {
@@ -922 +932 @@ public abstract class NodePointer implements Pointer {
-    public static NodePointer verify(NodePointer nodePointer) {
+    public static NodePointer verify(final NodePointer nodePointer) {
@@ -930 +940 @@ public abstract class NodePointer implements Pointer {
-            NodePointer parent = nodePointer.getImmediateParentPointer();
+            final NodePointer parent = nodePointer.getImmediateParentPointer();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/VariablePointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/VariablePointer.java
index 373ab382..3b1459c7 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/VariablePointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/VariablePointer.java
@@ -36 +36 @@ public class VariablePointer extends NodePointer {
-    private QName name;
+    private final QName name;
@@ -47 +47 @@ public class VariablePointer extends NodePointer {
-    public VariablePointer(Variables variables, QName name) {
+    public VariablePointer(final Variables variables, final QName name) {
@@ -58 +58 @@ public class VariablePointer extends NodePointer {
-    public VariablePointer(QName name) {
+    public VariablePointer(final QName name) {
@@ -63,0 +64 @@ public class VariablePointer extends NodePointer {
+    @Override
@@ -67,0 +69 @@ public class VariablePointer extends NodePointer {
+    @Override
@@ -71,0 +74 @@ public class VariablePointer extends NodePointer {
+    @Override
@@ -78,0 +82 @@ public class VariablePointer extends NodePointer {
+    @Override
@@ -80 +84 @@ public class VariablePointer extends NodePointer {
-        Object value = getNode();
+        final Object value = getNode();
@@ -83,0 +88 @@ public class VariablePointer extends NodePointer {
+    @Override
@@ -85 +90 @@ public class VariablePointer extends NodePointer {
-        Object value = getBaseValue();
+        final Object value = getBaseValue();
@@ -88,0 +94 @@ public class VariablePointer extends NodePointer {
+    @Override
@@ -90 +96 @@ public class VariablePointer extends NodePointer {
-        Object value = getBaseValue();
+        final Object value = getBaseValue();
@@ -95 +101,2 @@ public class VariablePointer extends NodePointer {
-    public void setValue(Object value) {
+    @Override
+    public void setValue(final Object value) {
@@ -101 +108 @@ public class VariablePointer extends NodePointer {
-            Object collection = getBaseValue();
+            final Object collection = getBaseValue();
@@ -108,0 +116 @@ public class VariablePointer extends NodePointer {
+    @Override
@@ -113 +121,2 @@ public class VariablePointer extends NodePointer {
-    public void setIndex(int index) {
+    @Override
+    public void setIndex(final int index) {
@@ -117,0 +127 @@ public class VariablePointer extends NodePointer {
+    @Override
@@ -127,0 +138,3 @@ public class VariablePointer extends NodePointer {
+                    private static final long serialVersionUID = 1L;
+
+                    @Override
@@ -137,0 +151 @@ public class VariablePointer extends NodePointer {
+    @Override
@@ -140 +154 @@ public class VariablePointer extends NodePointer {
-            Object value = getBaseValue();
+            final Object value = getBaseValue();
@@ -146 +160,2 @@ public class VariablePointer extends NodePointer {
-    public NodePointer createPath(JXPathContext context, Object value) {
+    @Override
+    public NodePointer createPath(final JXPathContext context, final Object value) {
@@ -151 +166 @@ public class VariablePointer extends NodePointer {
-        NodePointer ptr = createPath(context);
+        final NodePointer ptr = createPath(context);
@@ -156 +171,2 @@ public class VariablePointer extends NodePointer {
-    public NodePointer createPath(JXPathContext context) {
+    @Override
+    public NodePointer createPath(final JXPathContext context) {
@@ -158 +174 @@ public class VariablePointer extends NodePointer {
-            AbstractFactory factory = getAbstractFactory(context);
+            final AbstractFactory factory = getAbstractFactory(context);
@@ -169,0 +186 @@ public class VariablePointer extends NodePointer {
+    @Override
@@ -171,7 +188,7 @@ public class VariablePointer extends NodePointer {
-        JXPathContext context,
-        QName name,
-        int index) {
-        Object collection = createCollection(context, index);
-        if (!isActual() || (index != 0 && index != WHOLE_COLLECTION)) {
-            AbstractFactory factory = getAbstractFactory(context);
-            boolean success =
+        final JXPathContext context,
+        final QName name,
+        final int index) {
+        final Object collection = createCollection(context, index);
+        if (!isActual() || index != 0 && index != WHOLE_COLLECTION) {
+            final AbstractFactory factory = getAbstractFactory(context);
+            final boolean success =
@@ -188 +205 @@ public class VariablePointer extends NodePointer {
-            NodePointer cln = (NodePointer) clone();
+            final NodePointer cln = (NodePointer) clone();
@@ -194,0 +212 @@ public class VariablePointer extends NodePointer {
+    @Override
@@ -196,5 +214,5 @@ public class VariablePointer extends NodePointer {
-            JXPathContext context,
-            QName name,
-            int index,
-            Object value) {
-        Object collection = createCollection(context, index);
+            final JXPathContext context,
+            final QName name,
+            final int index,
+            final Object value) {
+        final Object collection = createCollection(context, index);
@@ -202 +220 @@ public class VariablePointer extends NodePointer {
-        NodePointer cl = (NodePointer) clone();
+        final NodePointer cl = (NodePointer) clone();
@@ -213 +231 @@ public class VariablePointer extends NodePointer {
-    private Object createCollection(JXPathContext context, int index) {
+    private Object createCollection(final JXPathContext context, int index) {
@@ -240,0 +259 @@ public class VariablePointer extends NodePointer {
+    @Override
@@ -265 +284 @@ public class VariablePointer extends NodePointer {
-    protected void findVariables(JXPathContext context) {
+    protected void findVariables(final JXPathContext context) {
@@ -278,0 +298 @@ public class VariablePointer extends NodePointer {
+    @Override
@@ -285 +305,2 @@ public class VariablePointer extends NodePointer {
-    public boolean equals(Object object) {
+    @Override
+    public boolean equals(final Object object) {
@@ -294 +315 @@ public class VariablePointer extends NodePointer {
-        VariablePointer other = (VariablePointer) object;
+        final VariablePointer other = (VariablePointer) object;
@@ -299,0 +321 @@ public class VariablePointer extends NodePointer {
+    @Override
@@ -301 +323 @@ public class VariablePointer extends NodePointer {
-        StringBuffer buffer = new StringBuffer();
+        final StringBuffer buffer = new StringBuffer();
@@ -316,0 +339 @@ public class VariablePointer extends NodePointer {
+    @Override
@@ -318,3 +341,3 @@ public class VariablePointer extends NodePointer {
-        NodeTest test,
-        boolean reverse,
-        NodePointer startWith) {
+        final NodeTest test,
+        final boolean reverse,
+        final NodePointer startWith) {
@@ -324 +347,2 @@ public class VariablePointer extends NodePointer {
-    public NodeIterator attributeIterator(QName name) {
+    @Override
+    public NodeIterator attributeIterator(final QName name) {
@@ -327,0 +352 @@ public class VariablePointer extends NodePointer {
+    @Override
@@ -332 +357,2 @@ public class VariablePointer extends NodePointer {
-    public NodePointer namespacePointer(String name) {
+    @Override
+    public NodePointer namespacePointer(final String name) {
@@ -336 +362,2 @@ public class VariablePointer extends NodePointer {
-    public boolean testNode(NodeTest nodeTest) {
+    @Override
+    public boolean testNode(final NodeTest nodeTest) {
@@ -339,0 +367 @@ public class VariablePointer extends NodePointer {
+    @Override
@@ -341,2 +369,2 @@ public class VariablePointer extends NodePointer {
-        NodePointer pointer1,
-        NodePointer pointer2) {
+        final NodePointer pointer1,
+        final NodePointer pointer2) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/VariablePointerFactory.java b/src/main/java/org/apache/commons/jxpath/ri/model/VariablePointerFactory.java
index 4847bf47..6faf4c74 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/VariablePointerFactory.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/VariablePointerFactory.java
@@ -43 +43 @@ public class VariablePointerFactory implements NodePointerFactory {
-        private VariableContextWrapper(JXPathContext context) {
+        private VariableContextWrapper(final JXPathContext context) {
@@ -62 +62 @@ public class VariablePointerFactory implements NodePointerFactory {
-    public static VariableContextWrapper contextWrapper(JXPathContext context) {
+    public static VariableContextWrapper contextWrapper(final JXPathContext context) {
@@ -66,2 +66,3 @@ public class VariablePointerFactory implements NodePointerFactory {
-    public NodePointer createNodePointer(QName name, Object object,
-            Locale locale) {
+    @Override
+    public NodePointer createNodePointer(final QName name, final Object object,
+            final Locale locale) {
@@ -71 +72 @@ public class VariablePointerFactory implements NodePointerFactory {
-                Variables vars = varCtx.getVariables();
+                final Variables vars = varCtx.getVariables();
@@ -85,2 +86,3 @@ public class VariablePointerFactory implements NodePointerFactory {
-    public NodePointer createNodePointer(NodePointer parent, QName name,
-            Object object) {
+    @Override
+    public NodePointer createNodePointer(final NodePointer parent, final QName name,
+            final Object object) {
@@ -89,0 +92 @@ public class VariablePointerFactory implements NodePointerFactory {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanAttributeIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanAttributeIterator.java
index 246c7781..a6d961ce 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanAttributeIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanAttributeIterator.java
@@ -27 +27 @@ public class BeanAttributeIterator extends PropertyIterator {
-    private NodePointer parent;
+    private final NodePointer parent;
@@ -29 +29 @@ public class BeanAttributeIterator extends PropertyIterator {
-    private boolean includeXmlLang;
+    private final boolean includeXmlLang;
@@ -36 +36 @@ public class BeanAttributeIterator extends PropertyIterator {
-    public BeanAttributeIterator(PropertyOwnerPointer parent, QName name) {
+    public BeanAttributeIterator(final PropertyOwnerPointer parent, final QName name) {
@@ -39,2 +39,2 @@ public class BeanAttributeIterator extends PropertyIterator {
-            (name.getPrefix() == null
-                && (name.getName() == null || name.getName().equals("*")))
+            name.getPrefix() == null
+                && (name.getName() == null || name.getName().equals("*"))
@@ -47 +47 @@ public class BeanAttributeIterator extends PropertyIterator {
-            (name.getPrefix() != null && name.getPrefix().equals("xml"))
+            name.getPrefix() != null && name.getPrefix().equals("xml")
@@ -51,0 +52 @@ public class BeanAttributeIterator extends PropertyIterator {
+    @Override
@@ -55,0 +57 @@ public class BeanAttributeIterator extends PropertyIterator {
+    @Override
@@ -60 +62,2 @@ public class BeanAttributeIterator extends PropertyIterator {
-    public boolean setPosition(int position) {
+    @Override
+    public boolean setPosition(final int position) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanPointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanPointer.java
index 83ad2d4f..d4b60a30 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanPointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanPointer.java
@@ -33,3 +33,3 @@ public class BeanPointer extends PropertyOwnerPointer {
-    private QName name;
-    private Object bean;
-    private JXPathBeanInfo beanInfo;
+    private final QName name;
+    private final Object bean;
+    private final JXPathBeanInfo beanInfo;
@@ -46,2 +46,2 @@ public class BeanPointer extends PropertyOwnerPointer {
-    public BeanPointer(QName name, Object bean, JXPathBeanInfo beanInfo,
-            Locale locale) {
+    public BeanPointer(final QName name, final Object bean, final JXPathBeanInfo beanInfo,
+            final Locale locale) {
@@ -61,2 +61,2 @@ public class BeanPointer extends PropertyOwnerPointer {
-    public BeanPointer(NodePointer parent, QName name, Object bean,
-            JXPathBeanInfo beanInfo) {
+    public BeanPointer(final NodePointer parent, final QName name, final Object bean,
+            final JXPathBeanInfo beanInfo) {
@@ -68,0 +69 @@ public class BeanPointer extends PropertyOwnerPointer {
+    @Override
@@ -72,0 +74 @@ public class BeanPointer extends PropertyOwnerPointer {
+    @Override
@@ -76,0 +79 @@ public class BeanPointer extends PropertyOwnerPointer {
+    @Override
@@ -84,0 +88 @@ public class BeanPointer extends PropertyOwnerPointer {
+    @Override
@@ -92,0 +97 @@ public class BeanPointer extends PropertyOwnerPointer {
+    @Override
@@ -96,0 +102 @@ public class BeanPointer extends PropertyOwnerPointer {
+    @Override
@@ -98 +104 @@ public class BeanPointer extends PropertyOwnerPointer {
-        Object value = getNode();
+        final Object value = getNode();
@@ -102,0 +109 @@ public class BeanPointer extends PropertyOwnerPointer {
+    @Override
@@ -107 +114,2 @@ public class BeanPointer extends PropertyOwnerPointer {
-    public boolean equals(Object object) {
+    @Override
+    public boolean equals(final Object object) {
@@ -116 +124 @@ public class BeanPointer extends PropertyOwnerPointer {
-        BeanPointer other = (BeanPointer) object;
+        final BeanPointer other = (BeanPointer) object;
@@ -121,2 +129,2 @@ public class BeanPointer extends PropertyOwnerPointer {
-        if ((name == null && other.name != null)
-                || (name != null && !name.equals(other.name))) {
+        if (name == null && other.name != null
+                || name != null && !name.equals(other.name)) {
@@ -126,2 +134,2 @@ public class BeanPointer extends PropertyOwnerPointer {
-        int iThis = (index == WHOLE_COLLECTION ? 0 : index);
-        int iOther = (other.index == WHOLE_COLLECTION ? 0 : other.index);
+        final int iThis = index == WHOLE_COLLECTION ? 0 : index;
+        final int iOther = other.index == WHOLE_COLLECTION ? 0 : other.index;
@@ -146,0 +155 @@ public class BeanPointer extends PropertyOwnerPointer {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanPointerFactory.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanPointerFactory.java
index bcbe41d0..db7db35f 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanPointerFactory.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanPointerFactory.java
@@ -34,0 +35 @@ public class BeanPointerFactory implements NodePointerFactory {
+    @Override
@@ -39,2 +40,3 @@ public class BeanPointerFactory implements NodePointerFactory {
-    public NodePointer createNodePointer(QName name, Object bean, Locale locale) {
-        JXPathBeanInfo bi = JXPathIntrospector.getBeanInfo(bean.getClass());
+    @Override
+    public NodePointer createNodePointer(final QName name, final Object bean, final Locale locale) {
+        final JXPathBeanInfo bi = JXPathIntrospector.getBeanInfo(bean.getClass());
@@ -44,2 +46,3 @@ public class BeanPointerFactory implements NodePointerFactory {
-    public NodePointer createNodePointer(NodePointer parent, QName name,
-            Object bean) {
+    @Override
+    public NodePointer createNodePointer(final NodePointer parent, final QName name,
+            final Object bean) {
@@ -50 +53 @@ public class BeanPointerFactory implements NodePointerFactory {
-        JXPathBeanInfo bi = JXPathIntrospector.getBeanInfo(bean.getClass());
+        final JXPathBeanInfo bi = JXPathIntrospector.getBeanInfo(bean.getClass());
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java
index 1cdb9d2a..b556d21b 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java
@@ -37 +37 @@ public class BeanPropertyPointer extends PropertyPointer {
-    private JXPathBeanInfo beanInfo;
+    private final JXPathBeanInfo beanInfo;
@@ -49 +49 @@ public class BeanPropertyPointer extends PropertyPointer {
-    public BeanPropertyPointer(NodePointer parent, JXPathBeanInfo beanInfo) {
+    public BeanPropertyPointer(final NodePointer parent, final JXPathBeanInfo beanInfo) {
@@ -57,0 +58 @@ public class BeanPropertyPointer extends PropertyPointer {
+    @Override
@@ -61,0 +63 @@ public class BeanPropertyPointer extends PropertyPointer {
+    @Override
@@ -72,0 +75 @@ public class BeanPropertyPointer extends PropertyPointer {
+    @Override
@@ -75 +78 @@ public class BeanPropertyPointer extends PropertyPointer {
-            PropertyDescriptor[] pds = getPropertyDescriptors();
+            final PropertyDescriptor[] pds = getPropertyDescriptors();
@@ -88 +91,2 @@ public class BeanPropertyPointer extends PropertyPointer {
-    public void setPropertyName(String propertyName) {
+    @Override
+    public void setPropertyName(final String propertyName) {
@@ -97 +101,2 @@ public class BeanPropertyPointer extends PropertyPointer {
-    public void setPropertyIndex(int index) {
+    @Override
+    public void setPropertyIndex(final int index) {
@@ -110,0 +116 @@ public class BeanPropertyPointer extends PropertyPointer {
+    @Override
@@ -113 +119 @@ public class BeanPropertyPointer extends PropertyPointer {
-            PropertyDescriptor pd = getPropertyDescriptor();
+            final PropertyDescriptor pd = getPropertyDescriptor();
@@ -122 +128,2 @@ public class BeanPropertyPointer extends PropertyPointer {
-    public void setIndex(int index) {
+    @Override
+    public void setIndex(final int index) {
@@ -142,0 +150 @@ public class BeanPropertyPointer extends PropertyPointer {
+    @Override
@@ -149 +157 @@ public class BeanPropertyPointer extends PropertyPointer {
-                PropertyDescriptor pd = getPropertyDescriptor();
+                final PropertyDescriptor pd = getPropertyDescriptor();
@@ -160,0 +169 @@ public class BeanPropertyPointer extends PropertyPointer {
+    @Override
@@ -164,0 +174 @@ public class BeanPropertyPointer extends PropertyPointer {
+    @Override
@@ -166 +176 @@ public class BeanPropertyPointer extends PropertyPointer {
-        PropertyDescriptor pd = getPropertyDescriptor();
+        final PropertyDescriptor pd = getPropertyDescriptor();
@@ -175 +185 @@ public class BeanPropertyPointer extends PropertyPointer {
-        int hint = ValueUtils.getCollectionHint(pd.getPropertyType());
+        final int hint = ValueUtils.getCollectionHint(pd.getPropertyType());
@@ -183 +193 @@ public class BeanPropertyPointer extends PropertyPointer {
-        Object value = getBaseValue();
+        final Object value = getBaseValue();
@@ -191,0 +202 @@ public class BeanPropertyPointer extends PropertyPointer {
+    @Override
@@ -193 +204 @@ public class BeanPropertyPointer extends PropertyPointer {
-        PropertyDescriptor pd = getPropertyDescriptor();
+        final PropertyDescriptor pd = getPropertyDescriptor();
@@ -204 +215 @@ public class BeanPropertyPointer extends PropertyPointer {
-        int hint = ValueUtils.getCollectionHint(pd.getPropertyType());
+        final int hint = ValueUtils.getCollectionHint(pd.getPropertyType());
@@ -217,2 +228,3 @@ public class BeanPropertyPointer extends PropertyPointer {
-    public void setValue(Object value) {
-        PropertyDescriptor pd = getPropertyDescriptor();
+    @Override
+    public void setValue(final Object value) {
+        final PropertyDescriptor pd = getPropertyDescriptor();
@@ -233 +245,2 @@ public class BeanPropertyPointer extends PropertyPointer {
-    public NodePointer createPath(JXPathContext context) {
+    @Override
+    public NodePointer createPath(final JXPathContext context) {
@@ -241,0 +255 @@ public class BeanPropertyPointer extends PropertyPointer {
+    @Override
@@ -247,2 +261,2 @@ public class BeanPropertyPointer extends PropertyPointer {
-            Object o = getBaseValue();
-            Object collection = ValueUtils.remove(getBaseValue(), index);
+            final Object o = getBaseValue();
+            final Object collection = ValueUtils.remove(getBaseValue(), index);
@@ -262,0 +277 @@ public class BeanPropertyPointer extends PropertyPointer {
+    @Override
@@ -265 +280 @@ public class BeanPropertyPointer extends PropertyPointer {
-            PropertyDescriptor pd = getPropertyDescriptor();
+            final PropertyDescriptor pd = getPropertyDescriptor();
@@ -280 +295 @@ public class BeanPropertyPointer extends PropertyPointer {
-            int inx = getPropertyIndex();
+            final int inx = getPropertyIndex();
@@ -286 +301 @@ public class BeanPropertyPointer extends PropertyPointer {
-                PropertyDescriptor[] propertyDescriptors =
+                final PropertyDescriptor[] propertyDescriptors =
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionAttributeNodeIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionAttributeNodeIterator.java
index 3e259fcd..ab3eaa90 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionAttributeNodeIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionAttributeNodeIterator.java
@@ -29 +29 @@ public class CollectionAttributeNodeIterator extends CollectionNodeIterator {
-    private QName name;
+    private final QName name;
@@ -37,2 +37,2 @@ public class CollectionAttributeNodeIterator extends CollectionNodeIterator {
-        CollectionPointer pointer,
-        QName name) {
+        final CollectionPointer pointer,
+        final QName name) {
@@ -43 +43,2 @@ public class CollectionAttributeNodeIterator extends CollectionNodeIterator {
-    protected NodeIterator getElementNodeIterator(NodePointer elementPointer) {
+    @Override
+    protected NodeIterator getElementNodeIterator(final NodePointer elementPointer) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionChildNodeIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionChildNodeIterator.java
index a9653e36..efb7dc61 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionChildNodeIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionChildNodeIterator.java
@@ -29 +29 @@ public class CollectionChildNodeIterator extends CollectionNodeIterator {
-    private NodeTest test;
+    private final NodeTest test;
@@ -39,4 +39,4 @@ public class CollectionChildNodeIterator extends CollectionNodeIterator {
-        CollectionPointer pointer,
-        NodeTest test,
-        boolean reverse,
-        NodePointer startWith) {
+        final CollectionPointer pointer,
+        final NodeTest test,
+        final boolean reverse,
+        final NodePointer startWith) {
@@ -47 +47,2 @@ public class CollectionChildNodeIterator extends CollectionNodeIterator {
-    protected NodeIterator getElementNodeIterator(NodePointer elementPointer) {
+    @Override
+    protected NodeIterator getElementNodeIterator(final NodePointer elementPointer) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionNodeIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionNodeIterator.java
index 197ddcf1..a48b600d 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionNodeIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionNodeIterator.java
@@ -31,3 +31,3 @@ public abstract class CollectionNodeIterator implements NodeIterator {
-    private CollectionPointer pointer;
-    private boolean reverse;
-    private NodePointer startWith;
+    private final CollectionPointer pointer;
+    private final boolean reverse;
+    private final NodePointer startWith;
@@ -44,3 +44,3 @@ public abstract class CollectionNodeIterator implements NodeIterator {
-        CollectionPointer pointer,
-        boolean reverse,
-        NodePointer startWith) {
+        final CollectionPointer pointer,
+        final boolean reverse,
+        final NodePointer startWith) {
@@ -59,0 +60 @@ public abstract class CollectionNodeIterator implements NodeIterator {
+    @Override
@@ -64 +65,2 @@ public abstract class CollectionNodeIterator implements NodeIterator {
-    public boolean setPosition(int position) {
+    @Override
+    public boolean setPosition(final int position) {
@@ -75,0 +78 @@ public abstract class CollectionNodeIterator implements NodeIterator {
+    @Override
@@ -88,2 +91,2 @@ public abstract class CollectionNodeIterator implements NodeIterator {
-        NodePointer ptr = (NodePointer) pointer.clone();
-        int length = ptr.getLength();
+        final NodePointer ptr = (NodePointer) pointer.clone();
+        final int length = ptr.getLength();
@@ -92,2 +95,2 @@ public abstract class CollectionNodeIterator implements NodeIterator {
-            NodePointer elementPointer = ptr.getValuePointer();
-            NodeIterator iter = getElementNodeIterator(elementPointer);
+            final NodePointer elementPointer = ptr.getValuePointer();
+            final NodeIterator iter = getElementNodeIterator(elementPointer);
@@ -96 +99 @@ public abstract class CollectionNodeIterator implements NodeIterator {
-                NodePointer childPointer = iter.getNodePointer();
+                final NodePointer childPointer = iter.getNodePointer();
@@ -106 +109 @@ public abstract class CollectionNodeIterator implements NodeIterator {
-            int index = collection.indexOf(startWith);
+            final int index = collection.indexOf(startWith);
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java
index d10d6421..ec73b2ff 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointer.java
@@ -46 +46 @@ public class CollectionPointer extends NodePointer {
-    public CollectionPointer(Object collection, Locale locale) {
+    public CollectionPointer(final Object collection, final Locale locale) {
@@ -56 +56 @@ public class CollectionPointer extends NodePointer {
-    public CollectionPointer(NodePointer parent, Object collection) {
+    public CollectionPointer(final NodePointer parent, final Object collection) {
@@ -60,0 +61 @@ public class CollectionPointer extends NodePointer {
+    @Override
@@ -64,0 +66 @@ public class CollectionPointer extends NodePointer {
+    @Override
@@ -68,0 +71 @@ public class CollectionPointer extends NodePointer {
+    @Override
@@ -72,0 +76 @@ public class CollectionPointer extends NodePointer {
+    @Override
@@ -76,0 +81 @@ public class CollectionPointer extends NodePointer {
+    @Override
@@ -78 +83 @@ public class CollectionPointer extends NodePointer {
-        Object value = getNode();
+        final Object value = getNode();
@@ -81,0 +87 @@ public class CollectionPointer extends NodePointer {
+    @Override
@@ -85,0 +92 @@ public class CollectionPointer extends NodePointer {
+    @Override
@@ -91 +98,2 @@ public class CollectionPointer extends NodePointer {
-    public void setValue(Object value) {
+    @Override
+    public void setValue(final Object value) {
@@ -100 +108,2 @@ public class CollectionPointer extends NodePointer {
-    public void setIndex(int index) {
+    @Override
+    public void setIndex(final int index) {
@@ -104,0 +114 @@ public class CollectionPointer extends NodePointer {
+    @Override
@@ -111 +121 @@ public class CollectionPointer extends NodePointer {
-                Object value = getImmediateNode();
+                final Object value = getImmediateNode();
@@ -119 +129,2 @@ public class CollectionPointer extends NodePointer {
-    public NodePointer createPath(JXPathContext context) {
+    @Override
+    public NodePointer createPath(final JXPathContext context) {
@@ -126,2 +137,3 @@ public class CollectionPointer extends NodePointer {
-    public NodePointer createPath(JXPathContext context, Object value) {
-        NodePointer ptr = createPath(context);
+    @Override
+    public NodePointer createPath(final JXPathContext context, final Object value) {
+        final NodePointer ptr = createPath(context);
@@ -131,0 +144 @@ public class CollectionPointer extends NodePointer {
+    @Override
@@ -133,5 +146,5 @@ public class CollectionPointer extends NodePointer {
-        JXPathContext context,
-        QName name,
-        int index,
-        Object value) {
-        NodePointer ptr = (NodePointer) clone();
+        final JXPathContext context,
+        final QName name,
+        final int index,
+        final Object value) {
+        final NodePointer ptr = (NodePointer) clone();
@@ -141,0 +155 @@ public class CollectionPointer extends NodePointer {
+    @Override
@@ -143,4 +157,4 @@ public class CollectionPointer extends NodePointer {
-        JXPathContext context,
-        QName name,
-        int index) {
-        NodePointer ptr = (NodePointer) clone();
+        final JXPathContext context,
+        final QName name,
+        final int index) {
+        final NodePointer ptr = (NodePointer) clone();
@@ -150,0 +165 @@ public class CollectionPointer extends NodePointer {
+    @Override
@@ -155 +170,2 @@ public class CollectionPointer extends NodePointer {
-    public boolean equals(Object object) {
+    @Override
+    public boolean equals(final Object object) {
@@ -164 +180 @@ public class CollectionPointer extends NodePointer {
-        CollectionPointer other = (CollectionPointer) object;
+        final CollectionPointer other = (CollectionPointer) object;
@@ -168,2 +184,3 @@ public class CollectionPointer extends NodePointer {
-    public NodeIterator childIterator(NodeTest test,
-                boolean reverse, NodePointer startWith) {
+    @Override
+    public NodeIterator childIterator(final NodeTest test,
+                final boolean reverse, final NodePointer startWith) {
@@ -180 +197,2 @@ public class CollectionPointer extends NodePointer {
-    public NodeIterator attributeIterator(QName name) {
+    @Override
+    public NodeIterator attributeIterator(final QName name) {
@@ -184,0 +203 @@ public class CollectionPointer extends NodePointer {
+    @Override
@@ -189 +208,2 @@ public class CollectionPointer extends NodePointer {
-    public NodePointer namespacePointer(String namespace) {
+    @Override
+    public NodePointer namespacePointer(final String namespace) {
@@ -193 +213,2 @@ public class CollectionPointer extends NodePointer {
-    public boolean testNode(NodeTest test) {
+    @Override
+    public boolean testNode(final NodeTest test) {
@@ -205,0 +227 @@ public class CollectionPointer extends NodePointer {
+    @Override
@@ -207 +229 @@ public class CollectionPointer extends NodePointer {
-                NodePointer pointer1, NodePointer pointer2) {
+                final NodePointer pointer1, final NodePointer pointer2) {
@@ -210,0 +233 @@ public class CollectionPointer extends NodePointer {
+    @Override
@@ -212,2 +235,2 @@ public class CollectionPointer extends NodePointer {
-        StringBuffer buffer = new StringBuffer();
-        NodePointer parent = getImmediateParentPointer();
+        final StringBuffer buffer = new StringBuffer();
+        final NodePointer parent = getImmediateParentPointer();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointerFactory.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointerFactory.java
index 6233f78b..fdc8c833 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointerFactory.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/CollectionPointerFactory.java
@@ -33,0 +34 @@ public class CollectionPointerFactory implements NodePointerFactory {
+    @Override
@@ -38 +39,2 @@ public class CollectionPointerFactory implements NodePointerFactory {
-    public NodePointer createNodePointer(QName name, Object bean, Locale locale) {
+    @Override
+    public NodePointer createNodePointer(final QName name, final Object bean, final Locale locale) {
@@ -42,2 +44,3 @@ public class CollectionPointerFactory implements NodePointerFactory {
-    public NodePointer createNodePointer(NodePointer parent, QName name,
-            Object bean) {
+    @Override
+    public NodePointer createNodePointer(final NodePointer parent, final QName name,
+            final Object bean) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/LangAttributePointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/LangAttributePointer.java
index 4c395612..8cab27c4 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/LangAttributePointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/LangAttributePointer.java
@@ -35 +35 @@ public class LangAttributePointer extends NodePointer {
-    public LangAttributePointer(NodePointer parent) {
+    public LangAttributePointer(final NodePointer parent) {
@@ -38,0 +39 @@ public class LangAttributePointer extends NodePointer {
+    @Override
@@ -42,0 +44 @@ public class LangAttributePointer extends NodePointer {
+    @Override
@@ -46,0 +49 @@ public class LangAttributePointer extends NodePointer {
+    @Override
@@ -50,0 +54 @@ public class LangAttributePointer extends NodePointer {
+    @Override
@@ -54,0 +59 @@ public class LangAttributePointer extends NodePointer {
+    @Override
@@ -58,0 +64 @@ public class LangAttributePointer extends NodePointer {
+    @Override
@@ -62,0 +69 @@ public class LangAttributePointer extends NodePointer {
+    @Override
@@ -73 +80,2 @@ public class LangAttributePointer extends NodePointer {
-    public void setValue(Object value) {
+    @Override
+    public void setValue(final Object value) {
@@ -77,0 +86 @@ public class LangAttributePointer extends NodePointer {
+    @Override
@@ -79 +88 @@ public class LangAttributePointer extends NodePointer {
-        StringBuffer buffer = new StringBuffer();
+        final StringBuffer buffer = new StringBuffer();
@@ -90,0 +100 @@ public class LangAttributePointer extends NodePointer {
+    @Override
@@ -95 +105,2 @@ public class LangAttributePointer extends NodePointer {
-    public boolean equals(Object object) {
+    @Override
+    public boolean equals(final Object object) {
@@ -99 +110,2 @@ public class LangAttributePointer extends NodePointer {
-    public boolean testNode(NodeTest test) {
+    @Override
+    public boolean testNode(final NodeTest test) {
@@ -102,0 +115 @@ public class LangAttributePointer extends NodePointer {
+    @Override
@@ -104,2 +117,2 @@ public class LangAttributePointer extends NodePointer {
-        NodePointer pointer1,
-        NodePointer pointer2) {
+        final NodePointer pointer1,
+        final NodePointer pointer2) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java
index 5b696aff..0f8b1bd4 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/NullElementPointer.java
@@ -40 +40 @@ public class NullElementPointer extends CollectionPointer {
-    public NullElementPointer(NodePointer parent, int index) {
+    public NullElementPointer(final NodePointer parent, final int index) {
@@ -44,0 +45 @@ public class NullElementPointer extends CollectionPointer {
+    @Override
@@ -48,0 +50 @@ public class NullElementPointer extends CollectionPointer {
+    @Override
@@ -52,0 +55 @@ public class NullElementPointer extends CollectionPointer {
+    @Override
@@ -56,0 +60 @@ public class NullElementPointer extends CollectionPointer {
+    @Override
@@ -60,0 +65 @@ public class NullElementPointer extends CollectionPointer {
+    @Override
@@ -72,0 +78 @@ public class NullElementPointer extends CollectionPointer {
+    @Override
@@ -77 +83,2 @@ public class NullElementPointer extends CollectionPointer {
-    public void setValue(Object value) {
+    @Override
+    public void setValue(final Object value) {
@@ -81,0 +89 @@ public class NullElementPointer extends CollectionPointer {
+    @Override
@@ -85,0 +94 @@ public class NullElementPointer extends CollectionPointer {
+    @Override
@@ -90 +99,2 @@ public class NullElementPointer extends CollectionPointer {
-    public NodePointer createPath(JXPathContext context) {
+    @Override
+    public NodePointer createPath(final JXPathContext context) {
@@ -94 +104,2 @@ public class NullElementPointer extends CollectionPointer {
-    public NodePointer createPath(JXPathContext context, Object value) {
+    @Override
+    public NodePointer createPath(final JXPathContext context, final Object value) {
@@ -97,0 +109 @@ public class NullElementPointer extends CollectionPointer {
+    @Override
@@ -102 +114,2 @@ public class NullElementPointer extends CollectionPointer {
-    public boolean equals(Object object) {
+    @Override
+    public boolean equals(final Object object) {
@@ -111 +124 @@ public class NullElementPointer extends CollectionPointer {
-        NullElementPointer other = (NullElementPointer) object;
+        final NullElementPointer other = (NullElementPointer) object;
@@ -115,0 +129 @@ public class NullElementPointer extends CollectionPointer {
+    @Override
@@ -119,0 +134 @@ public class NullElementPointer extends CollectionPointer {
+    @Override
@@ -121,2 +136,2 @@ public class NullElementPointer extends CollectionPointer {
-        StringBuffer buffer = new StringBuffer();
-        NodePointer parent = getImmediateParentPointer();
+        final StringBuffer buffer = new StringBuffer();
+        final NodePointer parent = getImmediateParentPointer();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/NullPointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/NullPointer.java
index 82fa7d30..8ec9c04d 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/NullPointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/NullPointer.java
@@ -39 +39 @@ public class NullPointer extends PropertyOwnerPointer {
-    public NullPointer(QName name, Locale locale) {
+    public NullPointer(final QName name, final Locale locale) {
@@ -49 +49 @@ public class NullPointer extends PropertyOwnerPointer {
-    public NullPointer(NodePointer parent, QName name) {
+    public NullPointer(final NodePointer parent, final QName name) {
@@ -59 +59 @@ public class NullPointer extends PropertyOwnerPointer {
-    public NullPointer(Locale locale, String id) {
+    public NullPointer(final Locale locale, final String id) {
@@ -63,0 +64 @@ public class NullPointer extends PropertyOwnerPointer {
+    @Override
@@ -67,0 +69 @@ public class NullPointer extends PropertyOwnerPointer {
+    @Override
@@ -71,0 +74 @@ public class NullPointer extends PropertyOwnerPointer {
+    @Override
@@ -75,0 +79 @@ public class NullPointer extends PropertyOwnerPointer {
+    @Override
@@ -79,0 +84 @@ public class NullPointer extends PropertyOwnerPointer {
+    @Override
@@ -83,0 +89 @@ public class NullPointer extends PropertyOwnerPointer {
+    @Override
@@ -88 +94,2 @@ public class NullPointer extends PropertyOwnerPointer {
-    public NodePointer createPath(JXPathContext context, Object value) {
+    @Override
+    public NodePointer createPath(final JXPathContext context, final Object value) {
@@ -96 +103,2 @@ public class NullPointer extends PropertyOwnerPointer {
-    public NodePointer createPath(JXPathContext context) {
+    @Override
+    public NodePointer createPath(final JXPathContext context) {
@@ -103,0 +112 @@ public class NullPointer extends PropertyOwnerPointer {
+    @Override
@@ -105,3 +114,3 @@ public class NullPointer extends PropertyOwnerPointer {
-        JXPathContext context,
-        QName name,
-        int index) {
+        final JXPathContext context,
+        final QName name,
+        final int index) {
@@ -110,0 +120 @@ public class NullPointer extends PropertyOwnerPointer {
+    @Override
@@ -112,4 +122,4 @@ public class NullPointer extends PropertyOwnerPointer {
-        JXPathContext context,
-        QName name,
-        int index,
-        Object value) {
+        final JXPathContext context,
+        final QName name,
+        final int index,
+        final Object value) {
@@ -118,0 +129 @@ public class NullPointer extends PropertyOwnerPointer {
+    @Override
@@ -123 +134,2 @@ public class NullPointer extends PropertyOwnerPointer {
-    public boolean equals(Object object) {
+    @Override
+    public boolean equals(final Object object) {
@@ -132 +144 @@ public class NullPointer extends PropertyOwnerPointer {
-        NullPointer other = (NullPointer) object;
+        final NullPointer other = (NullPointer) object;
@@ -135,0 +148 @@ public class NullPointer extends PropertyOwnerPointer {
+    @Override
@@ -142,0 +156 @@ public class NullPointer extends PropertyOwnerPointer {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java
index 40767070..e527e1a7 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java
@@ -39 +39 @@ public class NullPropertyPointer extends PropertyPointer {
-    public NullPropertyPointer(NodePointer parent) {
+    public NullPropertyPointer(final NodePointer parent) {
@@ -42,0 +43 @@ public class NullPropertyPointer extends PropertyPointer {
+    @Override
@@ -47 +48,2 @@ public class NullPropertyPointer extends PropertyPointer {
-    public void setPropertyIndex(int index) {
+    @Override
+    public void setPropertyIndex(final int index) {
@@ -49,0 +52 @@ public class NullPropertyPointer extends PropertyPointer {
+    @Override
@@ -53,0 +57 @@ public class NullPropertyPointer extends PropertyPointer {
+    @Override
@@ -57,0 +62 @@ public class NullPropertyPointer extends PropertyPointer {
+    @Override
@@ -61,0 +67 @@ public class NullPropertyPointer extends PropertyPointer {
+    @Override
@@ -65,0 +72 @@ public class NullPropertyPointer extends PropertyPointer {
+    @Override
@@ -69,0 +77 @@ public class NullPropertyPointer extends PropertyPointer {
+    @Override
@@ -73,0 +82 @@ public class NullPropertyPointer extends PropertyPointer {
+    @Override
@@ -77,0 +87 @@ public class NullPropertyPointer extends PropertyPointer {
+    @Override
@@ -82 +92,2 @@ public class NullPropertyPointer extends PropertyPointer {
-    public void setValue(Object value) {
+    @Override
+    public void setValue(final Object value) {
@@ -94 +105 @@ public class NullPropertyPointer extends PropertyPointer {
-            PropertyPointer propertyPointer =
+            final PropertyPointer propertyPointer =
@@ -107 +118,2 @@ public class NullPropertyPointer extends PropertyPointer {
-    public NodePointer createPath(JXPathContext context) {
+    @Override
+    public NodePointer createPath(final JXPathContext context) {
@@ -129 +141 @@ public class NullPropertyPointer extends PropertyPointer {
-            PropertyOwnerPointer pop = (PropertyOwnerPointer) newParent;
+            final PropertyOwnerPointer pop = (PropertyOwnerPointer) newParent;
@@ -135 +147,2 @@ public class NullPropertyPointer extends PropertyPointer {
-    public NodePointer createPath(JXPathContext context, Object value) {
+    @Override
+    public NodePointer createPath(final JXPathContext context, final Object value) {
@@ -138 +151 @@ public class NullPropertyPointer extends PropertyPointer {
-            NodePointer pointer = newParent.createAttribute(context, getName());
+            final NodePointer pointer = newParent.createAttribute(context, getName());
@@ -146 +159 @@ public class NullPropertyPointer extends PropertyPointer {
-            PropertyOwnerPointer pop = (PropertyOwnerPointer) newParent;
+            final PropertyOwnerPointer pop = (PropertyOwnerPointer) newParent;
@@ -152 +165,2 @@ public class NullPropertyPointer extends PropertyPointer {
-    public NodePointer createChild(JXPathContext context, QName name, int index) {
+    @Override
+    public NodePointer createChild(final JXPathContext context, final QName name, final int index) {
@@ -156,2 +170,3 @@ public class NullPropertyPointer extends PropertyPointer {
-    public NodePointer createChild(JXPathContext context, QName name,
-            int index, Object value) {
+    @Override
+    public NodePointer createChild(final JXPathContext context, final QName name,
+            final int index, final Object value) {
@@ -160,0 +176 @@ public class NullPropertyPointer extends PropertyPointer {
+    @Override
@@ -165 +181,2 @@ public class NullPropertyPointer extends PropertyPointer {
-    public void setPropertyName(String propertyName) {
+    @Override
+    public void setPropertyName(final String propertyName) {
@@ -173 +190 @@ public class NullPropertyPointer extends PropertyPointer {
-    public void setNameAttributeValue(String attributeValue) {
+    public void setNameAttributeValue(final String attributeValue) {
@@ -177,0 +195 @@ public class NullPropertyPointer extends PropertyPointer {
+    @Override
@@ -181,0 +200 @@ public class NullPropertyPointer extends PropertyPointer {
+    @Override
@@ -185,0 +205 @@ public class NullPropertyPointer extends PropertyPointer {
+    @Override
@@ -189,0 +210 @@ public class NullPropertyPointer extends PropertyPointer {
+    @Override
@@ -194 +215 @@ public class NullPropertyPointer extends PropertyPointer {
-        StringBuffer buffer = new StringBuffer();
+        final StringBuffer buffer = new StringBuffer();
@@ -210 +231 @@ public class NullPropertyPointer extends PropertyPointer {
-    private JXPathAbstractFactoryException createBadFactoryException(AbstractFactory factory) {
+    private JXPathAbstractFactoryException createBadFactoryException(final AbstractFactory factory) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java
index ce10ece5..4b0184be 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java
@@ -29,2 +29,2 @@ public class PropertyIterator implements NodeIterator {
-    private boolean reverse;
-    private String name;
+    private final boolean reverse;
+    private final String name;
@@ -34 +34 @@ public class PropertyIterator implements NodeIterator {
-    private PropertyPointer propertyNodePointer;
+    private final PropertyPointer propertyNodePointer;
@@ -47,3 +47,3 @@ public class PropertyIterator implements NodeIterator {
-        PropertyOwnerPointer pointer,
-        String name,
-        boolean reverse,
+        final PropertyOwnerPointer pointer,
+        final String name,
+        final boolean reverse,
@@ -98,0 +99 @@ public class PropertyIterator implements NodeIterator {
+    @Override
@@ -120 +121 @@ public class PropertyIterator implements NodeIterator {
-        catch (Throwable t) {
+        catch (final Throwable t) {
@@ -122 +123 @@ public class PropertyIterator implements NodeIterator {
-            NullPropertyPointer npp =
+            final NullPropertyPointer npp =
@@ -130,0 +132 @@ public class PropertyIterator implements NodeIterator {
+    @Override
@@ -135 +137,2 @@ public class PropertyIterator implements NodeIterator {
-    public boolean setPosition(int position) {
+    @Override
+    public boolean setPosition(final int position) {
@@ -144 +147 @@ public class PropertyIterator implements NodeIterator {
-    private boolean setPositionIndividualProperty(int position) {
+    private boolean setPositionIndividualProperty(final int position) {
@@ -158 +161 @@ public class PropertyIterator implements NodeIterator {
-        int length = getLength();
+        final int length = getLength();
@@ -191 +194 @@ public class PropertyIterator implements NodeIterator {
-    private boolean setPositionAllProperties(int position) {
+    private boolean setPositionAllProperties(final int position) {
@@ -198 +201 @@ public class PropertyIterator implements NodeIterator {
-        int count = propertyNodePointer.getPropertyCount();
+        final int count = propertyNodePointer.getPropertyCount();
@@ -263 +266 @@ public class PropertyIterator implements NodeIterator {
-    protected void prepareForIndividualProperty(String name) {
+    protected void prepareForIndividualProperty(final String name) {
@@ -267 +270 @@ public class PropertyIterator implements NodeIterator {
-        String[] names = propertyNodePointer.getPropertyNames();
+        final String[] names = propertyNodePointer.getPropertyNames();
@@ -317 +320 @@ public class PropertyIterator implements NodeIterator {
-        catch (Throwable t) {
+        catch (final Throwable t) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java
index 37587877..37b2478c 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/PropertyOwnerPointer.java
@@ -35,0 +36,2 @@ public abstract class PropertyOwnerPointer extends NodePointer {
+    private static final long serialVersionUID = 1L;
+
@@ -40,2 +42,3 @@ public abstract class PropertyOwnerPointer extends NodePointer {
-    public NodeIterator childIterator(NodeTest test, boolean reverse,
-            NodePointer startWith) {
+    @Override
+    public NodeIterator childIterator(final NodeTest test, final boolean reverse,
+            final NodePointer startWith) {
@@ -46,2 +49,2 @@ public abstract class PropertyOwnerPointer extends NodePointer {
-            NodeNameTest nodeNameTest = (NodeNameTest) test;
-            QName testName = nodeNameTest.getNodeName();
+            final NodeNameTest nodeNameTest = (NodeNameTest) test;
+            final QName testName = nodeNameTest.getNodeName();
@@ -65,2 +68,2 @@ public abstract class PropertyOwnerPointer extends NodePointer {
-    public NodeIterator createNodeIterator(String property, boolean reverse,
-            NodePointer startWith) {
+    public NodeIterator createNodeIterator(final String property, final boolean reverse,
+            final NodePointer startWith) {
@@ -70 +73,2 @@ public abstract class PropertyOwnerPointer extends NodePointer {
-    public NodeIterator attributeIterator(QName name) {
+    @Override
+    public NodeIterator attributeIterator(final QName name) {
@@ -79 +83 @@ public abstract class PropertyOwnerPointer extends NodePointer {
-    protected PropertyOwnerPointer(NodePointer parent, Locale locale) {
+    protected PropertyOwnerPointer(final NodePointer parent, final Locale locale) {
@@ -87 +91 @@ public abstract class PropertyOwnerPointer extends NodePointer {
-    protected PropertyOwnerPointer(NodePointer parent) {
+    protected PropertyOwnerPointer(final NodePointer parent) {
@@ -91 +95,2 @@ public abstract class PropertyOwnerPointer extends NodePointer {
-    public void setIndex(int index) {
+    @Override
+    public void setIndex(final int index) {
@@ -97,0 +103 @@ public abstract class PropertyOwnerPointer extends NodePointer {
+    @Override
@@ -105,0 +112 @@ public abstract class PropertyOwnerPointer extends NodePointer {
+    @Override
@@ -114 +121 @@ public abstract class PropertyOwnerPointer extends NodePointer {
-    public boolean isValidProperty(QName name) {
+    public boolean isValidProperty(final QName name) {
@@ -123 +130,2 @@ public abstract class PropertyOwnerPointer extends NodePointer {
-    public void setValue(Object value) {
+    @Override
+    public void setValue(final Object value) {
@@ -148,0 +157 @@ public abstract class PropertyOwnerPointer extends NodePointer {
+    @Override
@@ -177,3 +186,4 @@ public abstract class PropertyOwnerPointer extends NodePointer {
-    public int compareChildNodePointers(NodePointer pointer1,
-            NodePointer pointer2) {
-        int r = pointer1.getName().toString().compareTo(pointer2.getName().toString());
+    @Override
+    public int compareChildNodePointers(final NodePointer pointer1,
+            final NodePointer pointer2) {
+        final int r = pointer1.getName().toString().compareTo(pointer2.getName().toString());
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java
index de8fb367..01e298ad 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java
@@ -31,0 +32,2 @@ public abstract class PropertyPointer extends NodePointer {
+    private static final long serialVersionUID = 1L;
+
@@ -45 +47 @@ public abstract class PropertyPointer extends NodePointer {
-    public PropertyPointer(NodePointer parent) {
+    public PropertyPointer(final NodePointer parent) {
@@ -61 +63 @@ public abstract class PropertyPointer extends NodePointer {
-    public void setPropertyIndex(int index) {
+    public void setPropertyIndex(final int index) {
@@ -78,0 +81 @@ public abstract class PropertyPointer extends NodePointer {
+    @Override
@@ -112,0 +116 @@ public abstract class PropertyPointer extends NodePointer {
+    @Override
@@ -124,0 +129 @@ public abstract class PropertyPointer extends NodePointer {
+    @Override
@@ -132,0 +138 @@ public abstract class PropertyPointer extends NodePointer {
+    @Override
@@ -134 +140 @@ public abstract class PropertyPointer extends NodePointer {
-        Object value = getBaseValue();
+        final Object value = getBaseValue();
@@ -137,0 +144 @@ public abstract class PropertyPointer extends NodePointer {
+    @Override
@@ -139 +146 @@ public abstract class PropertyPointer extends NodePointer {
-        Object value = getNode();
+        final Object value = getNode();
@@ -147,0 +155 @@ public abstract class PropertyPointer extends NodePointer {
+    @Override
@@ -149 +157 @@ public abstract class PropertyPointer extends NodePointer {
-        Object baseValue = getBaseValue();
+        final Object baseValue = getBaseValue();
@@ -157,0 +166 @@ public abstract class PropertyPointer extends NodePointer {
+    @Override
@@ -165 +174,2 @@ public abstract class PropertyPointer extends NodePointer {
-    public NodePointer createPath(JXPathContext context) {
+    @Override
+    public NodePointer createPath(final JXPathContext context) {
@@ -167,3 +177,3 @@ public abstract class PropertyPointer extends NodePointer {
-            AbstractFactory factory = getAbstractFactory(context);
-            int inx = (index == WHOLE_COLLECTION ? 0 : index);
-            boolean success =
+            final AbstractFactory factory = getAbstractFactory(context);
+            final int inx = index == WHOLE_COLLECTION ? 0 : index;
+            final boolean success =
@@ -184 +194,2 @@ public abstract class PropertyPointer extends NodePointer {
-    public NodePointer createPath(JXPathContext context, Object value) {
+    @Override
+    public NodePointer createPath(final JXPathContext context, final Object value) {
@@ -192,0 +204 @@ public abstract class PropertyPointer extends NodePointer {
+    @Override
@@ -194,5 +206,5 @@ public abstract class PropertyPointer extends NodePointer {
-        JXPathContext context,
-        QName name,
-        int index,
-        Object value) {
-        PropertyPointer prop = (PropertyPointer) clone();
+        final JXPathContext context,
+        final QName name,
+        final int index,
+        final Object value) {
+        final PropertyPointer prop = (PropertyPointer) clone();
@@ -205,0 +218 @@ public abstract class PropertyPointer extends NodePointer {
+    @Override
@@ -207,4 +220,4 @@ public abstract class PropertyPointer extends NodePointer {
-        JXPathContext context,
-        QName name,
-        int index) {
-        PropertyPointer prop = (PropertyPointer) clone();
+        final JXPathContext context,
+        final QName name,
+        final int index) {
+        final PropertyPointer prop = (PropertyPointer) clone();
@@ -217,0 +231 @@ public abstract class PropertyPointer extends NodePointer {
+    @Override
@@ -222 +236,2 @@ public abstract class PropertyPointer extends NodePointer {
-    public boolean equals(Object object) {
+    @Override
+    public boolean equals(final Object object) {
@@ -231 +246 @@ public abstract class PropertyPointer extends NodePointer {
-        PropertyPointer other = (PropertyPointer) object;
+        final PropertyPointer other = (PropertyPointer) object;
@@ -241,2 +256,2 @@ public abstract class PropertyPointer extends NodePointer {
-        int iThis = (index == WHOLE_COLLECTION ? 0 : index);
-        int iOther = (other.index == WHOLE_COLLECTION ? 0 : other.index);
+        final int iThis = index == WHOLE_COLLECTION ? 0 : index;
+        final int iOther = other.index == WHOLE_COLLECTION ? 0 : other.index;
@@ -245,0 +261 @@ public abstract class PropertyPointer extends NodePointer {
+    @Override
@@ -247,2 +263,2 @@ public abstract class PropertyPointer extends NodePointer {
-        NodePointer pointer1,
-        NodePointer pointer2) {
+        final NodePointer pointer1,
+        final NodePointer pointer2) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/container/ContainerPointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/container/ContainerPointer.java
index a7ccedbc..69f9169c 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/container/ContainerPointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/container/ContainerPointer.java
@@ -34 +34 @@ public class ContainerPointer extends NodePointer {
-    private Container container;
+    private final Container container;
@@ -44 +44 @@ public class ContainerPointer extends NodePointer {
-    public ContainerPointer(Container container, Locale locale) {
+    public ContainerPointer(final Container container, final Locale locale) {
@@ -54 +54 @@ public class ContainerPointer extends NodePointer {
-    public ContainerPointer(NodePointer parent, Container container) {
+    public ContainerPointer(final NodePointer parent, final Container container) {
@@ -62,0 +63 @@ public class ContainerPointer extends NodePointer {
+    @Override
@@ -66,0 +68 @@ public class ContainerPointer extends NodePointer {
+    @Override
@@ -70,0 +73 @@ public class ContainerPointer extends NodePointer {
+    @Override
@@ -74,0 +78 @@ public class ContainerPointer extends NodePointer {
+    @Override
@@ -76 +80 @@ public class ContainerPointer extends NodePointer {
-        Object value = getBaseValue();
+        final Object value = getBaseValue();
@@ -79,0 +84 @@ public class ContainerPointer extends NodePointer {
+    @Override
@@ -81 +86 @@ public class ContainerPointer extends NodePointer {
-        Object value = getBaseValue();
+        final Object value = getBaseValue();
@@ -84,0 +90 @@ public class ContainerPointer extends NodePointer {
+    @Override
@@ -88,0 +95 @@ public class ContainerPointer extends NodePointer {
+    @Override
@@ -90 +97 @@ public class ContainerPointer extends NodePointer {
-        Object value = getBaseValue();
+        final Object value = getBaseValue();
@@ -97 +104,2 @@ public class ContainerPointer extends NodePointer {
-    public void setValue(Object value) {
+    @Override
+    public void setValue(final Object value) {
@@ -101,0 +110 @@ public class ContainerPointer extends NodePointer {
+    @Override
@@ -104 +113 @@ public class ContainerPointer extends NodePointer {
-            Object value = getImmediateNode();
+            final Object value = getImmediateNode();
@@ -109,0 +119 @@ public class ContainerPointer extends NodePointer {
+    @Override
@@ -114 +124,2 @@ public class ContainerPointer extends NodePointer {
-    public boolean equals(Object object) {
+    @Override
+    public boolean equals(final Object object) {
@@ -123 +134 @@ public class ContainerPointer extends NodePointer {
-        ContainerPointer other = (ContainerPointer) object;
+        final ContainerPointer other = (ContainerPointer) object;
@@ -126,0 +138 @@ public class ContainerPointer extends NodePointer {
+    @Override
@@ -128,3 +140,3 @@ public class ContainerPointer extends NodePointer {
-        NodeTest test,
-        boolean reverse,
-        NodePointer startWith) {
+        final NodeTest test,
+        final boolean reverse,
+        final NodePointer startWith) {
@@ -134 +146,2 @@ public class ContainerPointer extends NodePointer {
-    public NodeIterator attributeIterator(QName name) {
+    @Override
+    public NodeIterator attributeIterator(final QName name) {
@@ -137,0 +151 @@ public class ContainerPointer extends NodePointer {
+    @Override
@@ -142 +156,2 @@ public class ContainerPointer extends NodePointer {
-    public NodePointer namespacePointer(String namespace) {
+    @Override
+    public NodePointer namespacePointer(final String namespace) {
@@ -146 +161,2 @@ public class ContainerPointer extends NodePointer {
-    public boolean testNode(NodeTest nodeTest) {
+    @Override
+    public boolean testNode(final NodeTest nodeTest) {
@@ -149,0 +166 @@ public class ContainerPointer extends NodePointer {
+    @Override
@@ -151,2 +168,2 @@ public class ContainerPointer extends NodePointer {
-        NodePointer pointer1,
-        NodePointer pointer2) {
+        final NodePointer pointer1,
+        final NodePointer pointer2) {
@@ -156 +173,2 @@ public class ContainerPointer extends NodePointer {
-    public String getNamespaceURI(String prefix) {
+    @Override
+    public String getNamespaceURI(final String prefix) {
@@ -159,0 +178 @@ public class ContainerPointer extends NodePointer {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/container/ContainerPointerFactory.java b/src/main/java/org/apache/commons/jxpath/ri/model/container/ContainerPointerFactory.java
index 4dad29f8..2fb26ff2 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/container/ContainerPointerFactory.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/container/ContainerPointerFactory.java
@@ -32,0 +33 @@ public class ContainerPointerFactory implements NodePointerFactory {
+    @Override
@@ -37 +38,2 @@ public class ContainerPointerFactory implements NodePointerFactory {
-    public NodePointer createNodePointer(QName name, Object bean, Locale locale) {
+    @Override
+    public NodePointer createNodePointer(final QName name, final Object bean, final Locale locale) {
@@ -42,2 +44,3 @@ public class ContainerPointerFactory implements NodePointerFactory {
-    public NodePointer createNodePointer(NodePointer parent, QName name,
-            Object bean) {
+    @Override
+    public NodePointer createNodePointer(final NodePointer parent, final QName name,
+            final Object bean) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java
index d9daf5a9..72c7befa 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java
@@ -35,3 +35,3 @@ public class DOMAttributeIterator implements NodeIterator {
-    private NodePointer parent;
-    private QName name;
-    private List attributes;
+    private final NodePointer parent;
+    private final QName name;
+    private final List attributes;
@@ -45 +45 @@ public class DOMAttributeIterator implements NodeIterator {
-    public DOMAttributeIterator(NodePointer parent, QName name) {
+    public DOMAttributeIterator(final NodePointer parent, final QName name) {
@@ -49 +49 @@ public class DOMAttributeIterator implements NodeIterator {
-        Node node = (Node) parent.getNode();
+        final Node node = (Node) parent.getNode();
@@ -51 +51 @@ public class DOMAttributeIterator implements NodeIterator {
-            String lname = name.getName();
+            final String lname = name.getName();
@@ -53 +53 @@ public class DOMAttributeIterator implements NodeIterator {
-                Attr attr = getAttribute((Element) node, name);
+                final Attr attr = getAttribute((Element) node, name);
@@ -59,2 +59,2 @@ public class DOMAttributeIterator implements NodeIterator {
-                NamedNodeMap map = node.getAttributes();
-                int count = map.getLength();
+                final NamedNodeMap map = node.getAttributes();
+                final int count = map.getLength();
@@ -62 +62 @@ public class DOMAttributeIterator implements NodeIterator {
-                    Attr attr = (Attr) map.item(i);
+                    final Attr attr = (Attr) map.item(i);
@@ -76,3 +76,3 @@ public class DOMAttributeIterator implements NodeIterator {
-    private boolean testAttr(Attr attr) {
-        String nodePrefix = DOMNodePointer.getPrefix(attr);
-        String nodeLocalName = DOMNodePointer.getLocalName(attr);
+    private boolean testAttr(final Attr attr) {
+        final String nodePrefix = DOMNodePointer.getPrefix(attr);
+        final String nodeLocalName = DOMNodePointer.getLocalName(attr);
@@ -88 +88 @@ public class DOMAttributeIterator implements NodeIterator {
-        String testLocalName = name.getName();
+        final String testLocalName = name.getName();
@@ -90 +90 @@ public class DOMAttributeIterator implements NodeIterator {
-            String testPrefix = name.getPrefix();
+            final String testPrefix = name.getPrefix();
@@ -110,2 +110,2 @@ public class DOMAttributeIterator implements NodeIterator {
-    private Attr getAttribute(Element element, QName name) {
-        String testPrefix = name.getPrefix();
+    private Attr getAttribute(final Element element, final QName name) {
+        final String testPrefix = name.getPrefix();
@@ -127 +127 @@ public class DOMAttributeIterator implements NodeIterator {
-            NamedNodeMap nnm = element.getAttributes();
+            final NamedNodeMap nnm = element.getAttributes();
@@ -138,0 +139 @@ public class DOMAttributeIterator implements NodeIterator {
+    @Override
@@ -152,0 +154 @@ public class DOMAttributeIterator implements NodeIterator {
+    @Override
@@ -157 +159,2 @@ public class DOMAttributeIterator implements NodeIterator {
-    public boolean setPosition(int position) {
+    @Override
+    public boolean setPosition(final int position) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributePointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributePointer.java
index db1e4863..834f4a68 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributePointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributePointer.java
@@ -34 +34 @@ public class DOMAttributePointer extends NodePointer {
-    private Attr attr;
+    private final Attr attr;
@@ -41 +41 @@ public class DOMAttributePointer extends NodePointer {
-    public DOMAttributePointer(NodePointer parent, Attr attr) {
+    public DOMAttributePointer(final NodePointer parent, final Attr attr) {
@@ -45,0 +46 @@ public class DOMAttributePointer extends NodePointer {
+    @Override
@@ -51,0 +53 @@ public class DOMAttributePointer extends NodePointer {
+    @Override
@@ -53 +55 @@ public class DOMAttributePointer extends NodePointer {
-        String prefix = DOMNodePointer.getPrefix(attr);
+        final String prefix = DOMNodePointer.getPrefix(attr);
@@ -56,0 +59 @@ public class DOMAttributePointer extends NodePointer {
+    @Override
@@ -58,2 +61,2 @@ public class DOMAttributePointer extends NodePointer {
-        String value = attr.getValue();
-        if (value == null || (value.equals("") && !attr.getSpecified())) {
+        final String value = attr.getValue();
+        if (value == null || value.equals("") && !attr.getSpecified()) {
@@ -64,0 +68 @@ public class DOMAttributePointer extends NodePointer {
+    @Override
@@ -68,0 +73 @@ public class DOMAttributePointer extends NodePointer {
+    @Override
@@ -72,0 +78 @@ public class DOMAttributePointer extends NodePointer {
+    @Override
@@ -76,0 +83 @@ public class DOMAttributePointer extends NodePointer {
+    @Override
@@ -80,0 +88 @@ public class DOMAttributePointer extends NodePointer {
+    @Override
@@ -84,0 +93 @@ public class DOMAttributePointer extends NodePointer {
+    @Override
@@ -89 +98,2 @@ public class DOMAttributePointer extends NodePointer {
-    public boolean testNode(NodeTest nodeTest) {
+    @Override
+    public boolean testNode(final NodeTest nodeTest) {
@@ -91,2 +101,2 @@ public class DOMAttributePointer extends NodePointer {
-            || ((nodeTest instanceof NodeTypeTest)
-                && ((NodeTypeTest) nodeTest).getNodeType() == Compiler.NODE_TYPE_NODE);
+            || nodeTest instanceof NodeTypeTest
+                && ((NodeTypeTest) nodeTest).getNodeType() == Compiler.NODE_TYPE_NODE;
@@ -99 +109,2 @@ public class DOMAttributePointer extends NodePointer {
-    public void setValue(Object value) {
+    @Override
+    public void setValue(final Object value) {
@@ -102,0 +114 @@ public class DOMAttributePointer extends NodePointer {
+    @Override
@@ -106,0 +119 @@ public class DOMAttributePointer extends NodePointer {
+    @Override
@@ -108 +121 @@ public class DOMAttributePointer extends NodePointer {
-        StringBuffer buffer = new StringBuffer();
+        final StringBuffer buffer = new StringBuffer();
@@ -120,0 +134 @@ public class DOMAttributePointer extends NodePointer {
+    @Override
@@ -125 +139,2 @@ public class DOMAttributePointer extends NodePointer {
-    public boolean equals(Object object) {
+    @Override
+    public boolean equals(final Object object) {
@@ -130,2 +145,3 @@ public class DOMAttributePointer extends NodePointer {
-    public int compareChildNodePointers(NodePointer pointer1,
-            NodePointer pointer2) {
+    @Override
+    public int compareChildNodePointers(final NodePointer pointer1,
+            final NodePointer pointer2) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMNamespaceIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMNamespaceIterator.java
index 413b5954..96febca3 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMNamespaceIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMNamespaceIterator.java
@@ -33,2 +33,2 @@ public class DOMNamespaceIterator implements NodeIterator {
-    private NodePointer parent;
-    private List attributes;
+    private final NodePointer parent;
+    private final List attributes;
@@ -41 +41 @@ public class DOMNamespaceIterator implements NodeIterator {
-    public DOMNamespaceIterator(NodePointer parent) {
+    public DOMNamespaceIterator(final NodePointer parent) {
@@ -52,2 +52,2 @@ public class DOMNamespaceIterator implements NodeIterator {
-    private void collectNamespaces(List attributes, Node node) {
-        Node parent = node.getParentNode();
+    private void collectNamespaces(final List attributes, Node node) {
+        final Node parent = node.getParentNode();
@@ -61,2 +61,2 @@ public class DOMNamespaceIterator implements NodeIterator {
-            NamedNodeMap map = node.getAttributes();
-            int count = map.getLength();
+            final NamedNodeMap map = node.getAttributes();
+            final int count = map.getLength();
@@ -64,5 +64,5 @@ public class DOMNamespaceIterator implements NodeIterator {
-                Attr attr = (Attr) map.item(i);
-                String prefix = DOMNodePointer.getPrefix(attr);
-                String name = DOMNodePointer.getLocalName(attr);
-                if ((prefix != null && prefix.equals("xmlns"))
-                    || (prefix == null && name.equals("xmlns"))) {
+                final Attr attr = (Attr) map.item(i);
+                final String prefix = DOMNodePointer.getPrefix(attr);
+                final String name = DOMNodePointer.getLocalName(attr);
+                if (prefix != null && prefix.equals("xmlns")
+                    || prefix == null && name.equals("xmlns")) {
@@ -74,0 +75 @@ public class DOMNamespaceIterator implements NodeIterator {
+    @Override
@@ -87,2 +88,2 @@ public class DOMNamespaceIterator implements NodeIterator {
-        Attr attr = (Attr) attributes.get(index);
-        String name = attr.getPrefix();
+        final Attr attr = (Attr) attributes.get(index);
+        final String name = attr.getPrefix();
@@ -94,0 +96 @@ public class DOMNamespaceIterator implements NodeIterator {
+    @Override
@@ -99 +101,2 @@ public class DOMNamespaceIterator implements NodeIterator {
-    public boolean setPosition(int position) {
+    @Override
+    public boolean setPosition(final int position) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMNodeIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMNodeIterator.java
index 48f10ca3..f5eb5909 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMNodeIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMNodeIterator.java
@@ -28,3 +28,3 @@ public class DOMNodeIterator implements NodeIterator {
-    private NodePointer parent;
-    private NodeTest nodeTest;
-    private Node node;
+    private final NodePointer parent;
+    private final NodeTest nodeTest;
+    private final Node node;
@@ -32 +32 @@ public class DOMNodeIterator implements NodeIterator {
-    private boolean reverse;
+    private final boolean reverse;
@@ -43,4 +43,4 @@ public class DOMNodeIterator implements NodeIterator {
-        NodePointer parent,
-        NodeTest nodeTest,
-        boolean reverse,
-        NodePointer startWith) {
+        final NodePointer parent,
+        final NodeTest nodeTest,
+        final boolean reverse,
+        final NodePointer startWith) {
@@ -55,0 +56 @@ public class DOMNodeIterator implements NodeIterator {
+    @Override
@@ -62,0 +64 @@ public class DOMNodeIterator implements NodeIterator {
+    @Override
@@ -67 +69,2 @@ public class DOMNodeIterator implements NodeIterator {
-    public boolean setPosition(int position) {
+    @Override
+    public boolean setPosition(final int position) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java
index 34bc25c4..bccb30ac 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java
@@ -55 +55 @@ public class DOMNodePointer extends NodePointer {
-    private Node node;
+    private final Node node;
@@ -74 +74 @@ public class DOMNodePointer extends NodePointer {
-    public DOMNodePointer(Node node, Locale locale) {
+    public DOMNodePointer(final Node node, final Locale locale) {
@@ -85 +85 @@ public class DOMNodePointer extends NodePointer {
-    public DOMNodePointer(Node node, Locale locale, String id) {
+    public DOMNodePointer(final Node node, final Locale locale, final String id) {
@@ -96 +96 @@ public class DOMNodePointer extends NodePointer {
-    public DOMNodePointer(NodePointer parent, Node node) {
+    public DOMNodePointer(final NodePointer parent, final Node node) {
@@ -101 +101,2 @@ public class DOMNodePointer extends NodePointer {
-    public boolean testNode(NodeTest test) {
+    @Override
+    public boolean testNode(final NodeTest test) {
@@ -111 +112 @@ public class DOMNodePointer extends NodePointer {
-    public static boolean testNode(Node node, NodeTest test) {
+    public static boolean testNode(final Node node, final NodeTest test) {
@@ -120,5 +121,5 @@ public class DOMNodePointer extends NodePointer {
-            NodeNameTest nodeNameTest = (NodeNameTest) test;
-            QName testName = nodeNameTest.getNodeName();
-            String namespaceURI = nodeNameTest.getNamespaceURI();
-            boolean wildcard = nodeNameTest.isWildcard();
-            String testPrefix = testName.getPrefix();
+            final NodeNameTest nodeNameTest = (NodeNameTest) test;
+            final QName testName = nodeNameTest.getNodeName();
+            final String namespaceURI = nodeNameTest.getNamespaceURI();
+            final boolean wildcard = nodeNameTest.isWildcard();
+            final String testPrefix = testName.getPrefix();
@@ -131 +132 @@ public class DOMNodePointer extends NodePointer {
-                String nodeNS = DOMNodePointer.getNamespaceURI(node);
+                final String nodeNS = DOMNodePointer.getNamespaceURI(node);
@@ -138 +139 @@ public class DOMNodePointer extends NodePointer {
-            int nodeType = node.getNodeType();
+            final int nodeType = node.getNodeType();
@@ -155,2 +156,2 @@ public class DOMNodePointer extends NodePointer {
-            String testPI = ((ProcessingInstructionTest) test).getTarget();
-            String nodePI = ((ProcessingInstruction) node).getTarget();
+            final String testPI = ((ProcessingInstructionTest) test).getTarget();
+            final String nodePI = ((ProcessingInstruction) node).getTarget();
@@ -176,0 +178 @@ public class DOMNodePointer extends NodePointer {
+    @Override
@@ -180 +182 @@ public class DOMNodePointer extends NodePointer {
-        int type = node.getNodeType();
+        final int type = node.getNodeType();
@@ -190,0 +193 @@ public class DOMNodePointer extends NodePointer {
+    @Override
@@ -195,2 +198,3 @@ public class DOMNodePointer extends NodePointer {
-    public NodeIterator childIterator(NodeTest test, boolean reverse,
-            NodePointer startWith) {
+    @Override
+    public NodeIterator childIterator(final NodeTest test, final boolean reverse,
+            final NodePointer startWith) {
@@ -200 +204,2 @@ public class DOMNodePointer extends NodePointer {
-    public NodeIterator attributeIterator(QName name) {
+    @Override
+    public NodeIterator attributeIterator(final QName name) {
@@ -204 +209,2 @@ public class DOMNodePointer extends NodePointer {
-    public NodePointer namespacePointer(String prefix) {
+    @Override
+    public NodePointer namespacePointer(final String prefix) {
@@ -207,0 +214 @@ public class DOMNodePointer extends NodePointer {
+    @Override
@@ -211,0 +219 @@ public class DOMNodePointer extends NodePointer {
+    @Override
@@ -220 +228,2 @@ public class DOMNodePointer extends NodePointer {
-    public String getNamespaceURI(String prefix) {
+    @Override
+    public String getNamespaceURI(final String prefix) {
@@ -242 +251 @@ public class DOMNodePointer extends NodePointer {
-            String qname = "xmlns:" + prefix;
+            final String qname = "xmlns:" + prefix;
@@ -249 +258 @@ public class DOMNodePointer extends NodePointer {
-                    Attr attr = ((Element) aNode).getAttributeNode(qname);
+                    final Attr attr = ((Element) aNode).getAttributeNode(qname);
@@ -270,0 +280 @@ public class DOMNodePointer extends NodePointer {
+    @Override
@@ -279 +289 @@ public class DOMNodePointer extends NodePointer {
-                    Attr attr = ((Element) aNode).getAttributeNode("xmlns");
+                    final Attr attr = ((Element) aNode).getAttributeNode("xmlns");
@@ -294,0 +305 @@ public class DOMNodePointer extends NodePointer {
+    @Override
@@ -298,0 +310 @@ public class DOMNodePointer extends NodePointer {
+    @Override
@@ -302,0 +315 @@ public class DOMNodePointer extends NodePointer {
+    @Override
@@ -306,0 +320 @@ public class DOMNodePointer extends NodePointer {
+    @Override
@@ -310,0 +325 @@ public class DOMNodePointer extends NodePointer {
+    @Override
@@ -314,0 +330 @@ public class DOMNodePointer extends NodePointer {
+    @Override
@@ -326,2 +342,3 @@ public class DOMNodePointer extends NodePointer {
-    public boolean isLanguage(String lang) {
-        String current = getLanguage();
+    @Override
+    public boolean isLanguage(final String lang) {
+        final String current = getLanguage();
@@ -339 +356 @@ public class DOMNodePointer extends NodePointer {
-    protected static String findEnclosingAttribute(Node n, String attrName) {
+    protected static String findEnclosingAttribute(Node n, final String attrName) {
@@ -342,2 +359,2 @@ public class DOMNodePointer extends NodePointer {
-                Element e = (Element) n;
-                String attr = e.getAttribute(attrName);
+                final Element e = (Element) n;
+                final String attr = e.getAttribute(attrName);
@@ -368 +385,2 @@ public class DOMNodePointer extends NodePointer {
-    public void setValue(Object value) {
+    @Override
+    public void setValue(final Object value) {
@@ -371 +389 @@ public class DOMNodePointer extends NodePointer {
-            String string = (String) TypeUtils.convert(value, String.class);
+            final String string = (String) TypeUtils.convert(value, String.class);
@@ -381 +399 @@ public class DOMNodePointer extends NodePointer {
-            int count = children.getLength();
+            final int count = children.getLength();
@@ -383 +401 @@ public class DOMNodePointer extends NodePointer {
-                Node child = children.item(i);
+                final Node child = children.item(i);
@@ -388 +406 @@ public class DOMNodePointer extends NodePointer {
-                Node valueNode = (Node) value;
+                final Node valueNode = (Node) value;
@@ -393 +411 @@ public class DOMNodePointer extends NodePointer {
-                        Node child = children.item(i);
+                        final Node child = children.item(i);
@@ -402 +420 @@ public class DOMNodePointer extends NodePointer {
-                String string = (String) TypeUtils.convert(value, String.class);
+                final String string = (String) TypeUtils.convert(value, String.class);
@@ -404 +422 @@ public class DOMNodePointer extends NodePointer {
-                    Node textNode =
+                    final Node textNode =
@@ -412 +430,2 @@ public class DOMNodePointer extends NodePointer {
-    public NodePointer createChild(JXPathContext context, QName name, int index) {
+    @Override
+    public NodePointer createChild(final JXPathContext context, final QName name, int index) {
@@ -416 +435 @@ public class DOMNodePointer extends NodePointer {
-        boolean success =
+        final boolean success =
@@ -425,2 +444,2 @@ public class DOMNodePointer extends NodePointer {
-            String prefix = name.getPrefix();
-            String namespaceURI = prefix == null ? null : context
+            final String prefix = name.getPrefix();
+            final String namespaceURI = prefix == null ? null : context
@@ -430 +449 @@ public class DOMNodePointer extends NodePointer {
-            NodeIterator it = childIterator(nodeTest, false, null);
+            final NodeIterator it = childIterator(nodeTest, false, null);
@@ -440,3 +459,4 @@ public class DOMNodePointer extends NodePointer {
-    public NodePointer createChild(JXPathContext context, QName name,
-            int index, Object value) {
-        NodePointer ptr = createChild(context, name, index);
+    @Override
+    public NodePointer createChild(final JXPathContext context, final QName name,
+            final int index, final Object value) {
+        final NodePointer ptr = createChild(context, name, index);
@@ -447 +467,2 @@ public class DOMNodePointer extends NodePointer {
-    public NodePointer createAttribute(JXPathContext context, QName name) {
+    @Override
+    public NodePointer createAttribute(final JXPathContext context, final QName name) {
@@ -451,2 +472,2 @@ public class DOMNodePointer extends NodePointer {
-        Element element = (Element) node;
-        String prefix = name.getPrefix();
+        final Element element = (Element) node;
+        final String prefix = name.getPrefix();
@@ -455 +476 @@ public class DOMNodePointer extends NodePointer {
-            NamespaceResolver nsr = getNamespaceResolver();
+            final NamespaceResolver nsr = getNamespaceResolver();
@@ -470 +491 @@ public class DOMNodePointer extends NodePointer {
-        NodeIterator it = attributeIterator(name);
+        final NodeIterator it = attributeIterator(name);
@@ -474,0 +496 @@ public class DOMNodePointer extends NodePointer {
+    @Override
@@ -476 +498 @@ public class DOMNodePointer extends NodePointer {
-        Node parent = node.getParentNode();
+        final Node parent = node.getParentNode();
@@ -482,0 +505 @@ public class DOMNodePointer extends NodePointer {
+    @Override
@@ -488 +511 @@ public class DOMNodePointer extends NodePointer {
-        StringBuffer buffer = new StringBuffer();
+        final StringBuffer buffer = new StringBuffer();
@@ -502,2 +525,2 @@ public class DOMNodePointer extends NodePointer {
-                    String ln = DOMNodePointer.getLocalName(node);
-                    String nsURI = getNamespaceURI();
+                    final String ln = DOMNodePointer.getLocalName(node);
+                    final String nsURI = getNamespaceURI();
@@ -510 +533 @@ public class DOMNodePointer extends NodePointer {
-                        String prefix = getNamespaceResolver().getPrefix(nsURI);
+                        final String prefix = getNamespaceResolver().getPrefix(nsURI);
@@ -565 +588 @@ public class DOMNodePointer extends NodePointer {
-    private boolean matchesQName(Node n) {
+    private boolean matchesQName(final Node n) {
@@ -612 +635 @@ public class DOMNodePointer extends NodePointer {
-        String target = ((ProcessingInstruction) node).getTarget();
+        final String target = ((ProcessingInstruction) node).getTarget();
@@ -623,0 +647 @@ public class DOMNodePointer extends NodePointer {
+    @Override
@@ -628 +652,2 @@ public class DOMNodePointer extends NodePointer {
-    public boolean equals(Object object) {
+    @Override
+    public boolean equals(final Object object) {
@@ -637,2 +662,2 @@ public class DOMNodePointer extends NodePointer {
-    public static String getPrefix(Node node) {
-        String prefix = node.getPrefix();
+    public static String getPrefix(final Node node) {
+        final String prefix = node.getPrefix();
@@ -643,2 +668,2 @@ public class DOMNodePointer extends NodePointer {
-        String name = node.getNodeName();
-        int index = name.lastIndexOf(':');
+        final String name = node.getNodeName();
+        final int index = name.lastIndexOf(':');
@@ -653,2 +678,2 @@ public class DOMNodePointer extends NodePointer {
-    public static String getLocalName(Node node) {
-        String localName = node.getLocalName();
+    public static String getLocalName(final Node node) {
+        final String localName = node.getLocalName();
@@ -659,2 +684,2 @@ public class DOMNodePointer extends NodePointer {
-        String name = node.getNodeName();
-        int index = name.lastIndexOf(':');
+        final String name = node.getNodeName();
+        final int index = name.lastIndexOf(':');
@@ -674 +699 @@ public class DOMNodePointer extends NodePointer {
-        Element element = (Element) node;
+        final Element element = (Element) node;
@@ -678,2 +703,2 @@ public class DOMNodePointer extends NodePointer {
-            String prefix = getPrefix(node);
-            String qname = prefix == null ? "xmlns" : "xmlns:" + prefix;
+            final String prefix = getPrefix(node);
+            final String qname = prefix == null ? "xmlns" : "xmlns:" + prefix;
@@ -684 +709 @@ public class DOMNodePointer extends NodePointer {
-                    Attr attr = ((Element) aNode).getAttributeNode(qname);
+                    final Attr attr = ((Element) aNode).getAttributeNode(qname);
@@ -695,0 +721 @@ public class DOMNodePointer extends NodePointer {
+    @Override
@@ -698 +724 @@ public class DOMNodePointer extends NodePointer {
-            String text = ((Comment) node).getData();
+            final String text = ((Comment) node).getData();
@@ -709,2 +735,2 @@ public class DOMNodePointer extends NodePointer {
-    private String stringValue(Node node) {
-        int nodeType = node.getNodeType();
+    private String stringValue(final Node node) {
+        final int nodeType = node.getNodeType();
@@ -714 +740 @@ public class DOMNodePointer extends NodePointer {
-        boolean trim = !"preserve".equals(findEnclosingAttribute(node, "xml:space"));
+        final boolean trim = !"preserve".equals(findEnclosingAttribute(node, "xml:space"));
@@ -716 +742 @@ public class DOMNodePointer extends NodePointer {
-            String text = node.getNodeValue();
+            final String text = node.getNodeValue();
@@ -720 +746 @@ public class DOMNodePointer extends NodePointer {
-            String text = ((ProcessingInstruction) node).getData();
+            final String text = ((ProcessingInstruction) node).getData();
@@ -723,2 +749,2 @@ public class DOMNodePointer extends NodePointer {
-        NodeList list = node.getChildNodes();
-        StringBuffer buf = new StringBuffer();
+        final NodeList list = node.getChildNodes();
+        final StringBuffer buf = new StringBuffer();
@@ -726 +752 @@ public class DOMNodePointer extends NodePointer {
-            Node child = list.item(i);
+            final Node child = list.item(i);
@@ -738,2 +764,3 @@ public class DOMNodePointer extends NodePointer {
-    public Pointer getPointerByID(JXPathContext context, String id) {
-        Document document = node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node
+    @Override
+    public Pointer getPointerByID(final JXPathContext context, final String id) {
+        final Document document = node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node
@@ -741 +768 @@ public class DOMNodePointer extends NodePointer {
-        Element element = document.getElementById(id);
+        final Element element = document.getElementById(id);
@@ -746,4 +773,5 @@ public class DOMNodePointer extends NodePointer {
-    public int compareChildNodePointers(NodePointer pointer1,
-            NodePointer pointer2) {
-        Node node1 = (Node) pointer1.getBaseValue();
-        Node node2 = (Node) pointer2.getBaseValue();
+    @Override
+    public int compareChildNodePointers(final NodePointer pointer1,
+            final NodePointer pointer2) {
+        final Node node1 = (Node) pointer1.getBaseValue();
+        final Node node2 = (Node) pointer2.getBaseValue();
@@ -754,2 +782,2 @@ public class DOMNodePointer extends NodePointer {
-        int t1 = node1.getNodeType();
-        int t2 = node2.getNodeType();
+        final int t1 = node1.getNodeType();
+        final int t2 = node2.getNodeType();
@@ -763,2 +791,2 @@ public class DOMNodePointer extends NodePointer {
-            NamedNodeMap map = ((Node) getNode()).getAttributes();
-            int length = map.getLength();
+            final NamedNodeMap map = ((Node) getNode()).getAttributes();
+            final int length = map.getLength();
@@ -766 +794 @@ public class DOMNodePointer extends NodePointer {
-                Node n = map.item(i);
+                final Node n = map.item(i);
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMPointerFactory.java b/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMPointerFactory.java
index 442eaa3b..4d2f80cd 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMPointerFactory.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dom/DOMPointerFactory.java
@@ -33,0 +34 @@ public class DOMPointerFactory implements NodePointerFactory {
+    @Override
@@ -37,0 +39 @@ public class DOMPointerFactory implements NodePointerFactory {
+    @Override
@@ -39,3 +41,3 @@ public class DOMPointerFactory implements NodePointerFactory {
-        QName name,
-        Object bean,
-        Locale locale) {
+        final QName name,
+        final Object bean,
+        final Locale locale) {
@@ -44,0 +47 @@ public class DOMPointerFactory implements NodePointerFactory {
+    @Override
@@ -46,3 +49,3 @@ public class DOMPointerFactory implements NodePointerFactory {
-        NodePointer parent,
-        QName name,
-        Object bean) {
+        final NodePointer parent,
+        final QName name,
+        final Object bean) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dom/NamespacePointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/dom/NamespacePointer.java
index 3571c02c..adc9c41b 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dom/NamespacePointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dom/NamespacePointer.java
@@ -29 +29 @@ public class NamespacePointer extends NodePointer {
-    private String prefix;
+    private final String prefix;
@@ -39 +39 @@ public class NamespacePointer extends NodePointer {
-    public NamespacePointer(NodePointer parent, String prefix) {
+    public NamespacePointer(final NodePointer parent, final String prefix) {
@@ -51,3 +51,3 @@ public class NamespacePointer extends NodePointer {
-        NodePointer parent,
-        String prefix,
-        String namespaceURI) {
+        final NodePointer parent,
+        final String prefix,
+        final String namespaceURI) {
@@ -58,0 +59 @@ public class NamespacePointer extends NodePointer {
+    @Override
@@ -62,0 +64 @@ public class NamespacePointer extends NodePointer {
+    @Override
@@ -66,0 +69 @@ public class NamespacePointer extends NodePointer {
+    @Override
@@ -70,0 +74 @@ public class NamespacePointer extends NodePointer {
+    @Override
@@ -74,0 +79 @@ public class NamespacePointer extends NodePointer {
+    @Override
@@ -78,0 +84 @@ public class NamespacePointer extends NodePointer {
+    @Override
@@ -85,0 +92 @@ public class NamespacePointer extends NodePointer {
+    @Override
@@ -94 +101,2 @@ public class NamespacePointer extends NodePointer {
-    public void setValue(Object value) {
+    @Override
+    public void setValue(final Object value) {
@@ -98 +106,2 @@ public class NamespacePointer extends NodePointer {
-    public boolean testNode(NodeTest nodeTest) {
+    @Override
+    public boolean testNode(final NodeTest nodeTest) {
@@ -100 +109 @@ public class NamespacePointer extends NodePointer {
-            || ((nodeTest instanceof NodeTypeTest)
+            || nodeTest instanceof NodeTypeTest
@@ -102 +111 @@ public class NamespacePointer extends NodePointer {
-                    == Compiler.NODE_TYPE_NODE);
+                    == Compiler.NODE_TYPE_NODE;
@@ -104,0 +114 @@ public class NamespacePointer extends NodePointer {
+    @Override
@@ -106 +116 @@ public class NamespacePointer extends NodePointer {
-        StringBuffer buffer = new StringBuffer();
+        final StringBuffer buffer = new StringBuffer();
@@ -118,0 +129 @@ public class NamespacePointer extends NodePointer {
+    @Override
@@ -123 +134,2 @@ public class NamespacePointer extends NodePointer {
-    public boolean equals(Object object) {
+    @Override
+    public boolean equals(final Object object) {
@@ -132 +144 @@ public class NamespacePointer extends NodePointer {
-        NamespacePointer other = (NamespacePointer) object;
+        final NamespacePointer other = (NamespacePointer) object;
@@ -135,0 +148 @@ public class NamespacePointer extends NodePointer {
+    @Override
@@ -137,2 +150,2 @@ public class NamespacePointer extends NodePointer {
-        NodePointer pointer1,
-        NodePointer pointer2) {
+        final NodePointer pointer1,
+        final NodePointer pointer2) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPointer.java
index 4ac79db5..c96c04c5 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPointer.java
@@ -35,2 +35,2 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
-    private QName name;
-    private DynaBean dynaBean;
+    private final QName name;
+    private final DynaBean dynaBean;
@@ -44 +44 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
-    public DynaBeanPointer(QName name, DynaBean dynaBean, Locale locale) {
+    public DynaBeanPointer(final QName name, final DynaBean dynaBean, final Locale locale) {
@@ -56 +56 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
-    public DynaBeanPointer(NodePointer parent, QName name, DynaBean dynaBean) {
+    public DynaBeanPointer(final NodePointer parent, final QName name, final DynaBean dynaBean) {
@@ -61,0 +62 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
+    @Override
@@ -65,0 +67 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
+    @Override
@@ -69,0 +72 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
+    @Override
@@ -73,0 +77 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
+    @Override
@@ -77,0 +82 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
+    @Override
@@ -81,0 +87 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
+    @Override
@@ -85,0 +92 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
+    @Override
@@ -89,0 +97 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
+    @Override
@@ -94 +102,2 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
-    public boolean equals(Object object) {
+    @Override
+    public boolean equals(final Object object) {
@@ -103 +112 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
-        DynaBeanPointer other = (DynaBeanPointer) object;
+        final DynaBeanPointer other = (DynaBeanPointer) object;
@@ -108,2 +117,2 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
-        int iThis = (index == WHOLE_COLLECTION ? 0 : index);
-        int iOther = (other.index == WHOLE_COLLECTION ? 0 : other.index);
+        final int iThis = index == WHOLE_COLLECTION ? 0 : index;
+        final int iOther = other.index == WHOLE_COLLECTION ? 0 : other.index;
@@ -112,0 +122 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
+    @Override
@@ -123 +133 @@ public class DynaBeanPointer extends PropertyOwnerPointer {
-    private static boolean equalObjects(Object o1, Object o2) {
+    private static boolean equalObjects(final Object o1, final Object o2) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPointerFactory.java b/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPointerFactory.java
index 96d500ae..4c56401a 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPointerFactory.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPointerFactory.java
@@ -36,0 +37 @@ public class DynaBeanPointerFactory implements NodePointerFactory {
+    @Override
@@ -41 +42,2 @@ public class DynaBeanPointerFactory implements NodePointerFactory {
-    public NodePointer createNodePointer(QName name, Object bean, Locale locale) {
+    @Override
+    public NodePointer createNodePointer(final QName name, final Object bean, final Locale locale) {
@@ -45,2 +47,3 @@ public class DynaBeanPointerFactory implements NodePointerFactory {
-    public NodePointer createNodePointer(NodePointer parent, QName name,
-            Object bean) {
+    @Override
+    public NodePointer createNodePointer(final NodePointer parent, final QName name,
+            final Object bean) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPropertyPointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPropertyPointer.java
index 40b3e14d..22666579 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPropertyPointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanPropertyPointer.java
@@ -38 +38 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-    private DynaBean dynaBean;
+    private final DynaBean dynaBean;
@@ -49 +49 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-    public DynaBeanPropertyPointer(NodePointer parent, DynaBean dynaBean) {
+    public DynaBeanPropertyPointer(final NodePointer parent, final DynaBean dynaBean) {
@@ -53,0 +54 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
+    @Override
@@ -61,0 +63 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
+    @Override
@@ -65,0 +68 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
+    @Override
@@ -69,0 +73 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
+    @Override
@@ -73,5 +77,5 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-            DynaClass dynaClass = dynaBean.getDynaClass();
-            DynaProperty[] dynaProperties = dynaClass.getDynaProperties();
-            ArrayList properties = new ArrayList(dynaProperties.length);
-            for (int i = 0; i < dynaProperties.length; i++) {
-                String name = dynaProperties[i].getName();
+            final DynaClass dynaClass = dynaBean.getDynaClass();
+            final DynaProperty[] dynaProperties = dynaClass.getDynaProperties();
+            final ArrayList properties = new ArrayList(dynaProperties.length);
+            for (final DynaProperty element : dynaProperties) {
+                final String name = element.getName();
@@ -92,0 +97 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
+    @Override
@@ -95 +100 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-            String[] names = getPropertyNames();
+            final String[] names = getPropertyNames();
@@ -105 +110,2 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-    public void setPropertyName(String propertyName) {
+    @Override
+    public void setPropertyName(final String propertyName) {
@@ -114,0 +121 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
+    @Override
@@ -117 +124 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-            String[] names = getPropertyNames();
+            final String[] names = getPropertyNames();
@@ -134 +141,2 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-    public void setPropertyIndex(int index) {
+    @Override
+    public void setPropertyIndex(final int index) {
@@ -147,0 +156 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
+    @Override
@@ -149 +158 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-        String name = getPropertyName();
+        final String name = getPropertyName();
@@ -166 +175 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-            catch (ArrayIndexOutOfBoundsException ex) {
+            catch (final ArrayIndexOutOfBoundsException ex) {
@@ -169 +178 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-            catch (IllegalArgumentException ex) {
+            catch (final IllegalArgumentException ex) {
@@ -189,0 +199 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
+    @Override
@@ -191 +201 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-        DynaClass dynaClass = dynaBean.getDynaClass();
+        final DynaClass dynaClass = dynaBean.getDynaClass();
@@ -200,2 +210,2 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-        DynaClass dynaClass = dynaBean.getDynaClass();
-        DynaProperty property = dynaClass.getDynaProperty(name);
+        final DynaClass dynaClass = dynaBean.getDynaClass();
+        final DynaProperty property = dynaClass.getDynaProperty(name);
@@ -211 +221,2 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-    public void setValue(Object value) {
+    @Override
+    public void setValue(final Object value) {
@@ -214,0 +226 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
+    @Override
@@ -223 +235 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-            Object collection = ValueUtils.remove(getBaseValue(), index);
+            final Object collection = ValueUtils.remove(getBaseValue(), index);
@@ -236 +248 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-    private void setValue(int index, Object value) {
+    private void setValue(final int index, final Object value) {
@@ -244 +256 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-            Object baseValue = dynaBean.get(getPropertyName());
+            final Object baseValue = dynaBean.get(getPropertyName());
@@ -256,3 +268,3 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-    private Object convert(Object value, boolean element) {
-        DynaClass dynaClass = dynaBean.getDynaClass();
-        DynaProperty property = dynaClass.getDynaProperty(getPropertyName());
+    private Object convert(final Object value, final boolean element) {
+        final DynaClass dynaClass = dynaBean.getDynaClass();
+        final DynaProperty property = dynaClass.getDynaProperty(getPropertyName());
@@ -272,2 +284,2 @@ public class DynaBeanPropertyPointer extends PropertyPointer {
-        catch (Exception ex) {
-            String string = value == null ? "null" : value.getClass().getName();
+        catch (final Exception ex) {
+            final String string = value == null ? "null" : value.getClass().getName();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/StrictLazyDynaBeanPointerFactory.java b/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/StrictLazyDynaBeanPointerFactory.java
index 6714f1ce..bce9c36a 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/StrictLazyDynaBeanPointerFactory.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dynabeans/StrictLazyDynaBeanPointerFactory.java
@@ -53 +53 @@ public class StrictLazyDynaBeanPointerFactory implements NodePointerFactory {
-        public StrictLazyDynaBeanPointer(NodePointer parent, QName name, LazyDynaBean lazyDynaBean) {
+        public StrictLazyDynaBeanPointer(final NodePointer parent, final QName name, final LazyDynaBean lazyDynaBean) {
@@ -65 +65 @@ public class StrictLazyDynaBeanPointerFactory implements NodePointerFactory {
-        public StrictLazyDynaBeanPointer(QName name, LazyDynaBean lazyDynaBean, Locale locale) {
+        public StrictLazyDynaBeanPointer(final QName name, final LazyDynaBean lazyDynaBean, final Locale locale) {
@@ -72,0 +73 @@ public class StrictLazyDynaBeanPointerFactory implements NodePointerFactory {
+        @Override
@@ -76,0 +78 @@ public class StrictLazyDynaBeanPointerFactory implements NodePointerFactory {
+                @Override
@@ -87,0 +90 @@ public class StrictLazyDynaBeanPointerFactory implements NodePointerFactory {
+    @Override
@@ -95 +98,2 @@ public class StrictLazyDynaBeanPointerFactory implements NodePointerFactory {
-    public NodePointer createNodePointer(QName name, Object object, Locale locale) {
+    @Override
+    public NodePointer createNodePointer(final QName name, final Object object, final Locale locale) {
@@ -103 +107,2 @@ public class StrictLazyDynaBeanPointerFactory implements NodePointerFactory {
-    public NodePointer createNodePointer(NodePointer parent, QName name, Object object) {
+    @Override
+    public NodePointer createNodePointer(final NodePointer parent, final QName name, final Object object) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicAttributeIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicAttributeIterator.java
index 2a787934..dff26624 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicAttributeIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicAttributeIterator.java
@@ -36 +36 @@ public class DynamicAttributeIterator extends BeanAttributeIterator {
-    public DynamicAttributeIterator(PropertyOwnerPointer parent, QName name) {
+    public DynamicAttributeIterator(final PropertyOwnerPointer parent, final QName name) {
@@ -40 +40,2 @@ public class DynamicAttributeIterator extends BeanAttributeIterator {
-    protected void prepareForIndividualProperty(String name) {
+    @Override
+    protected void prepareForIndividualProperty(final String name) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPointer.java
index 11501017..ff692ec4 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPointer.java
@@ -36,3 +36,3 @@ public class DynamicPointer extends PropertyOwnerPointer {
-    private QName name;
-    private Object bean;
-    private DynamicPropertyHandler handler;
+    private final QName name;
+    private final Object bean;
+    private final DynamicPropertyHandler handler;
@@ -49,2 +49,2 @@ public class DynamicPointer extends PropertyOwnerPointer {
-    public DynamicPointer(QName name, Object bean,
-            DynamicPropertyHandler handler, Locale locale) {
+    public DynamicPointer(final QName name, final Object bean,
+            final DynamicPropertyHandler handler, final Locale locale) {
@@ -64,2 +64,2 @@ public class DynamicPointer extends PropertyOwnerPointer {
-    public DynamicPointer(NodePointer parent, QName name,
-            Object bean, DynamicPropertyHandler handler) {
+    public DynamicPointer(final NodePointer parent, final QName name,
+            final Object bean, final DynamicPropertyHandler handler) {
@@ -71,0 +72 @@ public class DynamicPointer extends PropertyOwnerPointer {
+    @Override
@@ -75,0 +77 @@ public class DynamicPointer extends PropertyOwnerPointer {
+    @Override
@@ -77 +79 @@ public class DynamicPointer extends PropertyOwnerPointer {
-                String property, boolean reverse, NodePointer startWith) {
+                final String property, final boolean reverse, final NodePointer startWith) {
@@ -81 +83,2 @@ public class DynamicPointer extends PropertyOwnerPointer {
-    public NodeIterator attributeIterator(QName name) {
+    @Override
+    public NodeIterator attributeIterator(final QName name) {
@@ -84,0 +88 @@ public class DynamicPointer extends PropertyOwnerPointer {
+    @Override
@@ -88,0 +93 @@ public class DynamicPointer extends PropertyOwnerPointer {
+    @Override
@@ -96,0 +102 @@ public class DynamicPointer extends PropertyOwnerPointer {
+    @Override
@@ -100,0 +107 @@ public class DynamicPointer extends PropertyOwnerPointer {
+    @Override
@@ -102 +109 @@ public class DynamicPointer extends PropertyOwnerPointer {
-        Object value = getNode();
+        final Object value = getNode();
@@ -105,0 +113 @@ public class DynamicPointer extends PropertyOwnerPointer {
+    @Override
@@ -113,0 +122 @@ public class DynamicPointer extends PropertyOwnerPointer {
+    @Override
@@ -117,0 +127 @@ public class DynamicPointer extends PropertyOwnerPointer {
+    @Override
@@ -121,0 +132 @@ public class DynamicPointer extends PropertyOwnerPointer {
+    @Override
@@ -126 +137,2 @@ public class DynamicPointer extends PropertyOwnerPointer {
-    public boolean equals(Object object) {
+    @Override
+    public boolean equals(final Object object) {
@@ -135 +147 @@ public class DynamicPointer extends PropertyOwnerPointer {
-        DynamicPointer other = (DynamicPointer) object;
+        final DynamicPointer other = (DynamicPointer) object;
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPointerFactory.java b/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPointerFactory.java
index c8ac4ff4..c206f615 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPointerFactory.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPointerFactory.java
@@ -39,0 +40 @@ public class DynamicPointerFactory implements NodePointerFactory {
+    @Override
@@ -43,0 +45 @@ public class DynamicPointerFactory implements NodePointerFactory {
+    @Override
@@ -45,4 +47,4 @@ public class DynamicPointerFactory implements NodePointerFactory {
-        QName name,
-        Object bean,
-        Locale locale) {
-        JXPathBeanInfo bi = JXPathIntrospector.getBeanInfo(bean.getClass());
+        final QName name,
+        final Object bean,
+        final Locale locale) {
+        final JXPathBeanInfo bi = JXPathIntrospector.getBeanInfo(bean.getClass());
@@ -50 +52 @@ public class DynamicPointerFactory implements NodePointerFactory {
-            DynamicPropertyHandler handler =
+            final DynamicPropertyHandler handler =
@@ -57,0 +60 @@ public class DynamicPointerFactory implements NodePointerFactory {
+    @Override
@@ -59,3 +62,3 @@ public class DynamicPointerFactory implements NodePointerFactory {
-        NodePointer parent,
-        QName name,
-        Object bean) {
+        final NodePointer parent,
+        final QName name,
+        final Object bean) {
@@ -66 +69 @@ public class DynamicPointerFactory implements NodePointerFactory {
-        JXPathBeanInfo bi = JXPathIntrospector.getBeanInfo(bean.getClass());
+        final JXPathBeanInfo bi = JXPathIntrospector.getBeanInfo(bean.getClass());
@@ -68 +71 @@ public class DynamicPointerFactory implements NodePointerFactory {
-            DynamicPropertyHandler handler =
+            final DynamicPropertyHandler handler =
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertyIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertyIterator.java
index 18a90258..33b21b7b 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertyIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertyIterator.java
@@ -26,0 +27 @@ import org.apache.commons.jxpath.ri.model.beans.PropertyOwnerPointer;
+@Deprecated
@@ -37,4 +38,4 @@ public class DynamicPropertyIterator extends PropertyIterator {
-            PropertyOwnerPointer pointer,
-            String name,
-            boolean reverse,
-            NodePointer startWith) {
+            final PropertyOwnerPointer pointer,
+            final String name,
+            final boolean reverse,
+            final NodePointer startWith) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertyPointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertyPointer.java
index f1bfe86c..7d3970c9 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertyPointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertyPointer.java
@@ -38 +38 @@ public class DynamicPropertyPointer extends PropertyPointer {
-    private DynamicPropertyHandler handler;
+    private final DynamicPropertyHandler handler;
@@ -48,2 +48,2 @@ public class DynamicPropertyPointer extends PropertyPointer {
-    public DynamicPropertyPointer(NodePointer parent,
-            DynamicPropertyHandler handler) {
+    public DynamicPropertyPointer(final NodePointer parent,
+            final DynamicPropertyHandler handler) {
@@ -57,0 +58 @@ public class DynamicPropertyPointer extends PropertyPointer {
+    @Override
@@ -65,0 +67 @@ public class DynamicPropertyPointer extends PropertyPointer {
+    @Override
@@ -73,0 +76 @@ public class DynamicPropertyPointer extends PropertyPointer {
+    @Override
@@ -81 +84 @@ public class DynamicPropertyPointer extends PropertyPointer {
-                int inx = Arrays.binarySearch(names, requiredPropertyName);
+                final int inx = Arrays.binarySearch(names, requiredPropertyName);
@@ -98,0 +102 @@ public class DynamicPropertyPointer extends PropertyPointer {
+    @Override
@@ -101 +105 @@ public class DynamicPropertyPointer extends PropertyPointer {
-            String[] names = getPropertyNames();
+            final String[] names = getPropertyNames();
@@ -115 +119,2 @@ public class DynamicPropertyPointer extends PropertyPointer {
-    public void setPropertyName(String propertyName) {
+    @Override
+    public void setPropertyName(final String propertyName) {
@@ -128,0 +134 @@ public class DynamicPropertyPointer extends PropertyPointer {
+    @Override
@@ -131 +137 @@ public class DynamicPropertyPointer extends PropertyPointer {
-            String[] names = getPropertyNames();
+            final String[] names = getPropertyNames();
@@ -147 +153,2 @@ public class DynamicPropertyPointer extends PropertyPointer {
-    public void setPropertyIndex(int index) {
+    @Override
+    public void setPropertyIndex(final int index) {
@@ -158,0 +166 @@ public class DynamicPropertyPointer extends PropertyPointer {
+    @Override
@@ -169,0 +178 @@ public class DynamicPropertyPointer extends PropertyPointer {
+    @Override
@@ -189,0 +199 @@ public class DynamicPropertyPointer extends PropertyPointer {
+    @Override
@@ -200 +210,2 @@ public class DynamicPropertyPointer extends PropertyPointer {
-    public void setValue(Object value) {
+    @Override
+    public void setValue(final Object value) {
@@ -212 +223,2 @@ public class DynamicPropertyPointer extends PropertyPointer {
-    public NodePointer createPath(JXPathContext context) {
+    @Override
+    public NodePointer createPath(final JXPathContext context) {
@@ -216,2 +228,2 @@ public class DynamicPropertyPointer extends PropertyPointer {
-            AbstractFactory factory = getAbstractFactory(context);
-            boolean success =
+            final AbstractFactory factory = getAbstractFactory(context);
+            final boolean success =
@@ -246 +258,2 @@ public class DynamicPropertyPointer extends PropertyPointer {
-    public NodePointer createPath(JXPathContext context, Object value) {
+    @Override
+    public NodePointer createPath(final JXPathContext context, final Object value) {
@@ -256,0 +270 @@ public class DynamicPropertyPointer extends PropertyPointer {
+    @Override
@@ -262 +276 @@ public class DynamicPropertyPointer extends PropertyPointer {
-            Object collection = ValueUtils.remove(getBaseValue(), index);
+            final Object collection = ValueUtils.remove(getBaseValue(), index);
@@ -274 +288 @@ public class DynamicPropertyPointer extends PropertyPointer {
-        Object bean = getBean();
+        final Object bean = getBean();
@@ -282,0 +297 @@ public class DynamicPropertyPointer extends PropertyPointer {
+    @Override
@@ -284 +299 @@ public class DynamicPropertyPointer extends PropertyPointer {
-        StringBuffer buffer = new StringBuffer();
+        final StringBuffer buffer = new StringBuffer();
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java
index 550a1c4e..644a3f33 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java
@@ -43 +43 @@ public class JDOMAttributeIterator implements NodeIterator {
-    public JDOMAttributeIterator(NodePointer parent, QName name) {
+    public JDOMAttributeIterator(final NodePointer parent, final QName name) {
@@ -46,2 +46,2 @@ public class JDOMAttributeIterator implements NodeIterator {
-            Element element = (Element) parent.getNode();
-            String prefix = name.getPrefix();
+            final Element element = (Element) parent.getNode();
+            final String prefix = name.getPrefix();
@@ -54 +54 @@ public class JDOMAttributeIterator implements NodeIterator {
-                    String uri = parent.getNamespaceResolver().getNamespaceURI(prefix);
+                    final String uri = parent.getNamespaceResolver().getNamespaceURI(prefix);
@@ -69 +69 @@ public class JDOMAttributeIterator implements NodeIterator {
-            String lname = name.getName();
+            final String lname = name.getName();
@@ -72 +72 @@ public class JDOMAttributeIterator implements NodeIterator {
-                Attribute attr = element.getAttribute(lname, ns);
+                final Attribute attr = element.getAttribute(lname, ns);
@@ -79 +79 @@ public class JDOMAttributeIterator implements NodeIterator {
-                List allAttributes = element.getAttributes();
+                final List allAttributes = element.getAttributes();
@@ -81 +81 @@ public class JDOMAttributeIterator implements NodeIterator {
-                    Attribute attr = (Attribute) allAttributes.get(i);
+                    final Attribute attr = (Attribute) allAttributes.get(i);
@@ -90,0 +91 @@ public class JDOMAttributeIterator implements NodeIterator {
+    @Override
@@ -106,0 +108 @@ public class JDOMAttributeIterator implements NodeIterator {
+    @Override
@@ -111 +113,2 @@ public class JDOMAttributeIterator implements NodeIterator {
-    public boolean setPosition(int position) {
+    @Override
+    public boolean setPosition(final int position) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributePointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributePointer.java
index eac5bfc6..f8536971 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributePointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributePointer.java
@@ -28 +28 @@ public class JDOMAttributePointer extends NodePointer {
-    private Attribute attr;
+    private final Attribute attr;
@@ -37 +37 @@ public class JDOMAttributePointer extends NodePointer {
-    public JDOMAttributePointer(NodePointer parent, Attribute attr) {
+    public JDOMAttributePointer(final NodePointer parent, final Attribute attr) {
@@ -41,0 +42 @@ public class JDOMAttributePointer extends NodePointer {
+    @Override
@@ -47,0 +49 @@ public class JDOMAttributePointer extends NodePointer {
+    @Override
@@ -55,0 +58 @@ public class JDOMAttributePointer extends NodePointer {
+    @Override
@@ -59,0 +63 @@ public class JDOMAttributePointer extends NodePointer {
+    @Override
@@ -63,0 +68 @@ public class JDOMAttributePointer extends NodePointer {
+    @Override
@@ -67,0 +73 @@ public class JDOMAttributePointer extends NodePointer {
+    @Override
@@ -71,0 +78 @@ public class JDOMAttributePointer extends NodePointer {
+    @Override
@@ -75,0 +83 @@ public class JDOMAttributePointer extends NodePointer {
+    @Override
@@ -79,0 +88 @@ public class JDOMAttributePointer extends NodePointer {
+    @Override
@@ -84 +93,2 @@ public class JDOMAttributePointer extends NodePointer {
-    public void setValue(Object value) {
+    @Override
+    public void setValue(final Object value) {
@@ -87,0 +98 @@ public class JDOMAttributePointer extends NodePointer {
+    @Override
@@ -91,0 +103 @@ public class JDOMAttributePointer extends NodePointer {
+    @Override
@@ -93 +105 @@ public class JDOMAttributePointer extends NodePointer {
-        StringBuffer buffer = new StringBuffer();
+        final StringBuffer buffer = new StringBuffer();
@@ -105,0 +118 @@ public class JDOMAttributePointer extends NodePointer {
+    @Override
@@ -110 +123,2 @@ public class JDOMAttributePointer extends NodePointer {
-    public boolean equals(Object object) {
+    @Override
+    public boolean equals(final Object object) {
@@ -114,0 +129 @@ public class JDOMAttributePointer extends NodePointer {
+    @Override
@@ -116,2 +131,2 @@ public class JDOMAttributePointer extends NodePointer {
-            NodePointer pointer1,
-            NodePointer pointer2) {
+            final NodePointer pointer1,
+            final NodePointer pointer2) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNamespaceIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNamespaceIterator.java
index 62c018dc..d254a531 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNamespaceIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNamespaceIterator.java
@@ -34 +34 @@ public class JDOMNamespaceIterator implements NodeIterator {
-    private NodePointer parent;
+    private final NodePointer parent;
@@ -43 +43 @@ public class JDOMNamespaceIterator implements NodeIterator {
-    public JDOMNamespaceIterator(NodePointer parent) {
+    public JDOMNamespaceIterator(final NodePointer parent) {
@@ -60 +60 @@ public class JDOMNamespaceIterator implements NodeIterator {
-    private void collectNamespaces(Element element) {
+    private void collectNamespaces(final Element element) {
@@ -66 +66 @@ public class JDOMNamespaceIterator implements NodeIterator {
-        List others = element.getAdditionalNamespaces();
+        final List others = element.getAdditionalNamespaces();
@@ -74 +74 @@ public class JDOMNamespaceIterator implements NodeIterator {
-        Object elementParent = element.getParent();
+        final Object elementParent = element.getParent();
@@ -79,0 +80 @@ public class JDOMNamespaceIterator implements NodeIterator {
+    @Override
@@ -91 +92 @@ public class JDOMNamespaceIterator implements NodeIterator {
-        Namespace ns = (Namespace) namespaces.get(index);
+        final Namespace ns = (Namespace) namespaces.get(index);
@@ -94,0 +96 @@ public class JDOMNamespaceIterator implements NodeIterator {
+    @Override
@@ -99 +101,2 @@ public class JDOMNamespaceIterator implements NodeIterator {
-    public boolean setPosition(int position) {
+    @Override
+    public boolean setPosition(final int position) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNamespacePointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNamespacePointer.java
index 322fdcbd..fbfc769b 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNamespacePointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNamespacePointer.java
@@ -26 +26 @@ public class JDOMNamespacePointer extends NodePointer {
-    private String prefix;
+    private final String prefix;
@@ -36 +36 @@ public class JDOMNamespacePointer extends NodePointer {
-    public JDOMNamespacePointer(NodePointer parent, String prefix) {
+    public JDOMNamespacePointer(final NodePointer parent, final String prefix) {
@@ -48,3 +48,3 @@ public class JDOMNamespacePointer extends NodePointer {
-            NodePointer parent,
-            String prefix,
-            String namespaceURI) {
+            final NodePointer parent,
+            final String prefix,
+            final String namespaceURI) {
@@ -55,0 +56 @@ public class JDOMNamespacePointer extends NodePointer {
+    @Override
@@ -59,0 +61 @@ public class JDOMNamespacePointer extends NodePointer {
+    @Override
@@ -63,0 +66 @@ public class JDOMNamespacePointer extends NodePointer {
+    @Override
@@ -67,0 +71 @@ public class JDOMNamespacePointer extends NodePointer {
+    @Override
@@ -71,0 +76 @@ public class JDOMNamespacePointer extends NodePointer {
+    @Override
@@ -75,0 +81 @@ public class JDOMNamespacePointer extends NodePointer {
+    @Override
@@ -82,0 +89 @@ public class JDOMNamespacePointer extends NodePointer {
+    @Override
@@ -91 +98,2 @@ public class JDOMNamespacePointer extends NodePointer {
-    public void setValue(Object value) {
+    @Override
+    public void setValue(final Object value) {
@@ -94,0 +103 @@ public class JDOMNamespacePointer extends NodePointer {
+    @Override
@@ -96 +105 @@ public class JDOMNamespacePointer extends NodePointer {
-        StringBuffer buffer = new StringBuffer();
+        final StringBuffer buffer = new StringBuffer();
@@ -108,0 +118 @@ public class JDOMNamespacePointer extends NodePointer {
+    @Override
@@ -113 +123,2 @@ public class JDOMNamespacePointer extends NodePointer {
-    public boolean equals(Object object) {
+    @Override
+    public boolean equals(final Object object) {
@@ -116,0 +128 @@ public class JDOMNamespacePointer extends NodePointer {
+    @Override
@@ -118,2 +130,2 @@ public class JDOMNamespacePointer extends NodePointer {
-        NodePointer pointer1,
-        NodePointer pointer2) {
+        final NodePointer pointer1,
+        final NodePointer pointer2) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodeIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodeIterator.java
index 06e482e1..872c638d 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodeIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodeIterator.java
@@ -32,2 +32,2 @@ public class JDOMNodeIterator implements NodeIterator {
-    private NodePointer parent;
-    private NodeTest nodeTest;
+    private final NodePointer parent;
+    private final NodeTest nodeTest;
@@ -35 +35 @@ public class JDOMNodeIterator implements NodeIterator {
-    private boolean reverse;
+    private final boolean reverse;
@@ -49,2 +49,2 @@ public class JDOMNodeIterator implements NodeIterator {
-            NodePointer parent, NodeTest nodeTest,
-            boolean reverse, NodePointer startWith) {
+            final NodePointer parent, final NodeTest nodeTest,
+            final boolean reverse, final NodePointer startWith) {
@@ -56 +56 @@ public class JDOMNodeIterator implements NodeIterator {
-        Object node = parent.getNode();
+        final Object node = parent.getNode();
@@ -69,0 +70 @@ public class JDOMNodeIterator implements NodeIterator {
+    @Override
@@ -80,0 +82 @@ public class JDOMNodeIterator implements NodeIterator {
+    @Override
@@ -85 +87,2 @@ public class JDOMNodeIterator implements NodeIterator {
-    public boolean setPosition(int position) {
+    @Override
+    public boolean setPosition(final int position) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java
index f53f23e5..5e544765 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java
@@ -50 +50 @@ public class JDOMNodePointer extends NodePointer {
-    private Object node;
+    private final Object node;
@@ -67 +67 @@ public class JDOMNodePointer extends NodePointer {
-    public JDOMNodePointer(Object node, Locale locale) {
+    public JDOMNodePointer(final Object node, final Locale locale) {
@@ -78 +78 @@ public class JDOMNodePointer extends NodePointer {
-    public JDOMNodePointer(Object node, Locale locale, String id) {
+    public JDOMNodePointer(final Object node, final Locale locale, final String id) {
@@ -89 +89 @@ public class JDOMNodePointer extends NodePointer {
-    public JDOMNodePointer(NodePointer parent, Object node) {
+    public JDOMNodePointer(final NodePointer parent, final Object node) {
@@ -93,0 +94 @@ public class JDOMNodePointer extends NodePointer {
+    @Override
@@ -95,3 +96,3 @@ public class JDOMNodePointer extends NodePointer {
-        NodeTest test,
-        boolean reverse,
-        NodePointer startWith) {
+        final NodeTest test,
+        final boolean reverse,
+        final NodePointer startWith) {
@@ -101 +102,2 @@ public class JDOMNodePointer extends NodePointer {
-    public NodeIterator attributeIterator(QName name) {
+    @Override
+    public NodeIterator attributeIterator(final QName name) {
@@ -104,0 +107 @@ public class JDOMNodePointer extends NodePointer {
+    @Override
@@ -109 +112,2 @@ public class JDOMNodePointer extends NodePointer {
-    public NodePointer namespacePointer(String prefix) {
+    @Override
+    public NodePointer namespacePointer(final String prefix) {
@@ -112,0 +117 @@ public class JDOMNodePointer extends NodePointer {
+    @Override
@@ -122 +127 @@ public class JDOMNodePointer extends NodePointer {
-    private static String getNamespaceURI(Object node) {
+    private static String getNamespaceURI(final Object node) {
@@ -124 +129 @@ public class JDOMNodePointer extends NodePointer {
-            Element element = (Element) node;
+            final Element element = (Element) node;
@@ -133,0 +139 @@ public class JDOMNodePointer extends NodePointer {
+    @Override
@@ -142 +148,2 @@ public class JDOMNodePointer extends NodePointer {
-    public String getNamespaceURI(String prefix) {
+    @Override
+    public String getNamespaceURI(final String prefix) {
@@ -156 +163 @@ public class JDOMNodePointer extends NodePointer {
-        Namespace ns = element.getNamespace(prefix);
+        final Namespace ns = element.getNamespace(prefix);
@@ -159,0 +167 @@ public class JDOMNodePointer extends NodePointer {
+    @Override
@@ -161,4 +169,4 @@ public class JDOMNodePointer extends NodePointer {
-        NodePointer pointer1,
-        NodePointer pointer2) {
-        Object node1 = pointer1.getBaseValue();
-        Object node2 = pointer2.getBaseValue();
+        final NodePointer pointer1,
+        final NodePointer pointer2) {
+        final Object node1 = pointer1.getBaseValue();
+        final Object node2 = pointer2.getBaseValue();
@@ -169 +177 @@ public class JDOMNodePointer extends NodePointer {
-        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {
+        if (node1 instanceof Attribute && !(node2 instanceof Attribute)) {
@@ -173 +181 @@ public class JDOMNodePointer extends NodePointer {
-            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {
+            !(node1 instanceof Attribute) && node2 instanceof Attribute) {
@@ -177,3 +185,3 @@ public class JDOMNodePointer extends NodePointer {
-            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {
-            List list = ((Element) getNode()).getAttributes();
-            int length = list.size();
+            node1 instanceof Attribute && node2 instanceof Attribute) {
+            final List list = ((Element) getNode()).getAttributes();
+            final int length = list.size();
@@ -181 +189 @@ public class JDOMNodePointer extends NodePointer {
-                Object n = list.get(i);
+                final Object n = list.get(i);
@@ -199,2 +207,2 @@ public class JDOMNodePointer extends NodePointer {
-        List children = ((Element) node).getContent();
-        int length = children.size();
+        final List children = ((Element) node).getContent();
+        final int length = children.size();
@@ -202 +210 @@ public class JDOMNodePointer extends NodePointer {
-            Object n = children.get(i);
+            final Object n = children.get(i);
@@ -213,0 +222 @@ public class JDOMNodePointer extends NodePointer {
+    @Override
@@ -217,0 +227 @@ public class JDOMNodePointer extends NodePointer {
+    @Override
@@ -221,0 +232 @@ public class JDOMNodePointer extends NodePointer {
+    @Override
@@ -225,0 +237 @@ public class JDOMNodePointer extends NodePointer {
+    @Override
@@ -235,0 +248 @@ public class JDOMNodePointer extends NodePointer {
+    @Override
@@ -251,0 +265 @@ public class JDOMNodePointer extends NodePointer {
+    @Override
@@ -255,0 +270 @@ public class JDOMNodePointer extends NodePointer {
+    @Override
@@ -258,3 +273,3 @@ public class JDOMNodePointer extends NodePointer {
-            StringBuffer buf = new StringBuffer();
-            for (NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1);) {
-                NodePointer ptr = children.getNodePointer();
+            final StringBuffer buf = new StringBuffer();
+            for (final NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1);) {
+                final NodePointer ptr = children.getNodePointer();
@@ -281 +296 @@ public class JDOMNodePointer extends NodePointer {
-        boolean trim = !"preserve".equals(findEnclosingAttribute(node, "space", Namespace.XML_NAMESPACE));
+        final boolean trim = !"preserve".equals(findEnclosingAttribute(node, "space", Namespace.XML_NAMESPACE));
@@ -285 +300,2 @@ public class JDOMNodePointer extends NodePointer {
-    public void setValue(Object value) {
+    @Override
+    public void setValue(final Object value) {
@@ -287 +303 @@ public class JDOMNodePointer extends NodePointer {
-            String string = (String) TypeUtils.convert(value, String.class);
+            final String string = (String) TypeUtils.convert(value, String.class);
@@ -296 +312 @@ public class JDOMNodePointer extends NodePointer {
-            Element element = (Element) node;
+            final Element element = (Element) node;
@@ -300 +316 @@ public class JDOMNodePointer extends NodePointer {
-                Element valueElement = (Element) value;
+                final Element valueElement = (Element) value;
@@ -304 +320 @@ public class JDOMNodePointer extends NodePointer {
-                Document valueDocument = (Document) value;
+                final Document valueDocument = (Document) value;
@@ -308 +324 @@ public class JDOMNodePointer extends NodePointer {
-                String string = ((Text) value).getText();
+                final String string = ((Text) value).getText();
@@ -312 +328 @@ public class JDOMNodePointer extends NodePointer {
-                ProcessingInstruction pi =
+                final ProcessingInstruction pi =
@@ -318 +334 @@ public class JDOMNodePointer extends NodePointer {
-                Comment comment = (Comment) ((Comment) value).clone();
+                final Comment comment = (Comment) ((Comment) value).clone();
@@ -322 +338 @@ public class JDOMNodePointer extends NodePointer {
-                String string = (String) TypeUtils.convert(value, String.class);
+                final String string = (String) TypeUtils.convert(value, String.class);
@@ -334,3 +350,3 @@ public class JDOMNodePointer extends NodePointer {
-    private void addContent(List content) {
-        Element element = (Element) node;
-        int count = content.size();
+    private void addContent(final List content) {
+        final Element element = (Element) node;
+        final int count = content.size();
@@ -363 +379,2 @@ public class JDOMNodePointer extends NodePointer {
-    public boolean testNode(NodeTest test) {
+    @Override
+    public boolean testNode(final NodeTest test) {
@@ -375,3 +392,3 @@ public class JDOMNodePointer extends NodePointer {
-        NodePointer pointer,
-        Object node,
-        NodeTest test) {
+        final NodePointer pointer,
+        final Object node,
+        final NodeTest test) {
@@ -386,5 +403,5 @@ public class JDOMNodePointer extends NodePointer {
-            NodeNameTest nodeNameTest = (NodeNameTest) test;
-            QName testName = nodeNameTest.getNodeName();
-            String namespaceURI = nodeNameTest.getNamespaceURI();
-            boolean wildcard = nodeNameTest.isWildcard();
-            String testPrefix = testName.getPrefix();
+            final NodeNameTest nodeNameTest = (NodeNameTest) test;
+            final QName testName = nodeNameTest.getNodeName();
+            final String namespaceURI = nodeNameTest.getNamespaceURI();
+            final boolean wildcard = nodeNameTest.isWildcard();
+            final String testPrefix = testName.getPrefix();
@@ -397 +414 @@ public class JDOMNodePointer extends NodePointer {
-                String nodeNS = JDOMNodePointer.getNamespaceURI(node);
+                final String nodeNS = JDOMNodePointer.getNamespaceURI(node);
@@ -408 +425 @@ public class JDOMNodePointer extends NodePointer {
-                    return (node instanceof Text) || (node instanceof CDATA);
+                    return node instanceof Text || node instanceof CDATA;
@@ -418,2 +435,2 @@ public class JDOMNodePointer extends NodePointer {
-            String testPI = ((ProcessingInstructionTest) test).getTarget();
-            String nodePI = ((ProcessingInstruction) node).getTarget();
+            final String testPI = ((ProcessingInstructionTest) test).getTarget();
+            final String nodePI = ((ProcessingInstruction) node).getTarget();
@@ -445 +462 @@ public class JDOMNodePointer extends NodePointer {
-    public static String getPrefix(Object node) {
+    public static String getPrefix(final Object node) {
@@ -447,2 +464,2 @@ public class JDOMNodePointer extends NodePointer {
-            String prefix = ((Element) node).getNamespacePrefix();
-            return (prefix == null || prefix.equals("")) ? null : prefix;
+            final String prefix = ((Element) node).getNamespacePrefix();
+            return prefix == null || prefix.equals("") ? null : prefix;
@@ -451,2 +468,2 @@ public class JDOMNodePointer extends NodePointer {
-            String prefix = ((Attribute) node).getNamespacePrefix();
-            return (prefix == null || prefix.equals("")) ? null : prefix;
+            final String prefix = ((Attribute) node).getNamespacePrefix();
+            return prefix == null || prefix.equals("") ? null : prefix;
@@ -462 +479 @@ public class JDOMNodePointer extends NodePointer {
-    public static String getLocalName(Object node) {
+    public static String getLocalName(final Object node) {
@@ -479,2 +496,3 @@ public class JDOMNodePointer extends NodePointer {
-    public boolean isLanguage(String lang) {
-        String current = getLanguage();
+    @Override
+    public boolean isLanguage(final String lang) {
+        final String current = getLanguage();
@@ -501 +519 @@ public class JDOMNodePointer extends NodePointer {
-    protected static String findEnclosingAttribute(Object n, String attrName, Namespace ns) {
+    protected static String findEnclosingAttribute(Object n, final String attrName, final Namespace ns) {
@@ -504,2 +522,2 @@ public class JDOMNodePointer extends NodePointer {
-                Element e = (Element) n;
-                String attr = e.getAttributeValue(attrName, ns);
+                final Element e = (Element) n;
+                final String attr = e.getAttributeValue(attrName, ns);
@@ -520 +538 @@ public class JDOMNodePointer extends NodePointer {
-    private static Element nodeParent(Object node) {
+    private static Element nodeParent(final Object node) {
@@ -522 +540 @@ public class JDOMNodePointer extends NodePointer {
-            Object parent = ((Element) node).getParent();
+            final Object parent = ((Element) node).getParent();
@@ -539,0 +558 @@ public class JDOMNodePointer extends NodePointer {
+    @Override
@@ -541,2 +560,2 @@ public class JDOMNodePointer extends NodePointer {
-        JXPathContext context,
-        QName name,
+        final JXPathContext context,
+        final QName name,
@@ -547 +566 @@ public class JDOMNodePointer extends NodePointer {
-        boolean success =
+        final boolean success =
@@ -556,2 +575,2 @@ public class JDOMNodePointer extends NodePointer {
-            String prefix = name.getPrefix();
-            String namespaceURI = prefix == null ? null : context
+            final String prefix = name.getPrefix();
+            final String namespaceURI = prefix == null ? null : context
@@ -561 +580 @@ public class JDOMNodePointer extends NodePointer {
-            NodeIterator it =
+            final NodeIterator it =
@@ -571,0 +591 @@ public class JDOMNodePointer extends NodePointer {
+    @Override
@@ -573,2 +593,2 @@ public class JDOMNodePointer extends NodePointer {
-            JXPathContext context, QName name, int index, Object value) {
-        NodePointer ptr = createChild(context, name, index);
+            final JXPathContext context, final QName name, final int index, final Object value) {
+        final NodePointer ptr = createChild(context, name, index);
@@ -579 +599,2 @@ public class JDOMNodePointer extends NodePointer {
-    public NodePointer createAttribute(JXPathContext context, QName name) {
+    @Override
+    public NodePointer createAttribute(final JXPathContext context, final QName name) {
@@ -584,2 +605,2 @@ public class JDOMNodePointer extends NodePointer {
-        Element element = (Element) node;
-        String prefix = name.getPrefix();
+        final Element element = (Element) node;
+        final String prefix = name.getPrefix();
@@ -587 +608 @@ public class JDOMNodePointer extends NodePointer {
-            String namespaceUri = getNamespaceResolver().getNamespaceURI(prefix);
+            final String namespaceUri = getNamespaceResolver().getNamespaceURI(prefix);
@@ -592,2 +613,2 @@ public class JDOMNodePointer extends NodePointer {
-            Namespace ns = Namespace.getNamespace(prefix, namespaceUri);
-            Attribute attr = element.getAttribute(name.getName(), ns);
+            final Namespace ns = Namespace.getNamespace(prefix, namespaceUri);
+            final Attribute attr = element.getAttribute(name.getName(), ns);
@@ -599 +620 @@ public class JDOMNodePointer extends NodePointer {
-            Attribute attr = element.getAttribute(name.getName());
+            final Attribute attr = element.getAttribute(name.getName());
@@ -604 +625 @@ public class JDOMNodePointer extends NodePointer {
-        NodeIterator it = attributeIterator(name);
+        final NodeIterator it = attributeIterator(name);
@@ -608,0 +630 @@ public class JDOMNodePointer extends NodePointer {
+    @Override
@@ -610 +632 @@ public class JDOMNodePointer extends NodePointer {
-        Element parent = nodeParent(node);
+        final Element parent = nodeParent(node);
@@ -616,0 +639 @@ public class JDOMNodePointer extends NodePointer {
+    @Override
@@ -622 +645 @@ public class JDOMNodePointer extends NodePointer {
-        StringBuffer buffer = new StringBuffer();
+        final StringBuffer buffer = new StringBuffer();
@@ -635,2 +658,2 @@ public class JDOMNodePointer extends NodePointer {
-                String nsURI = getNamespaceURI();
-                String ln = JDOMNodePointer.getLocalName(node);
+                final String nsURI = getNamespaceURI();
+                final String ln = JDOMNodePointer.getLocalName(node);
@@ -644 +667 @@ public class JDOMNodePointer extends NodePointer {
-                    String prefix = getNamespaceResolver().getPrefix(nsURI);
+                    final String prefix = getNamespaceResolver().getPrefix(nsURI);
@@ -683 +706 @@ public class JDOMNodePointer extends NodePointer {
-            Object parent = ((Element) node).getParent();
+            final Object parent = ((Element) node).getParent();
@@ -688 +711 @@ public class JDOMNodePointer extends NodePointer {
-            List children = ((Element) parent).getContent();
+            final List children = ((Element) parent).getContent();
@@ -690,3 +713,2 @@ public class JDOMNodePointer extends NodePointer {
-            for (int i = 0; i < children.size(); i++) {
-                Object child = children.get(i);
-                if (child instanceof Element && matchesQName(((Element) child))) {
+            for (final Object child : children) {
+                if (child instanceof Element && matchesQName((Element) child)) {
@@ -704 +726 @@ public class JDOMNodePointer extends NodePointer {
-    private boolean matchesQName(Element element) {
+    private boolean matchesQName(final Element element) {
@@ -706 +728 @@ public class JDOMNodePointer extends NodePointer {
-            String ns = getNamespaceURI(element);
+            final String ns = getNamespaceURI(element);
@@ -719 +741 @@ public class JDOMNodePointer extends NodePointer {
-        Object parent = ((Element) node).getParent();
+        final Object parent = ((Element) node).getParent();
@@ -731,2 +753 @@ public class JDOMNodePointer extends NodePointer {
-        for (int i = 0; i < children.size(); i++) {
-            Object child = children.get(i);
+        for (final Object child : children) {
@@ -758 +779 @@ public class JDOMNodePointer extends NodePointer {
-        List children = parent.getContent();
+        final List children = parent.getContent();
@@ -760,2 +781 @@ public class JDOMNodePointer extends NodePointer {
-        for (int i = 0; i < children.size(); i++) {
-            Object child = children.get(i);
+        for (final Object child : children) {
@@ -777,2 +797,2 @@ public class JDOMNodePointer extends NodePointer {
-        String target = ((ProcessingInstruction) node).getTarget();
-        Element parent = (Element) ((ProcessingInstruction) node).getParent();
+        final String target = ((ProcessingInstruction) node).getTarget();
+        final Element parent = (Element) ((ProcessingInstruction) node).getParent();
@@ -782 +802 @@ public class JDOMNodePointer extends NodePointer {
-        List children = parent.getContent();
+        final List children = parent.getContent();
@@ -784,2 +804 @@ public class JDOMNodePointer extends NodePointer {
-        for (int i = 0; i < children.size(); i++) {
-            Object child = children.get(i);
+        for (final Object child : children) {
@@ -798,0 +818 @@ public class JDOMNodePointer extends NodePointer {
+    @Override
@@ -803 +823,2 @@ public class JDOMNodePointer extends NodePointer {
-    public boolean equals(Object object) {
+    @Override
+    public boolean equals(final Object object) {
@@ -812 +833 @@ public class JDOMNodePointer extends NodePointer {
-        JDOMNodePointer other = (JDOMNodePointer) object;
+        final JDOMNodePointer other = (JDOMNodePointer) object;
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMPointerFactory.java b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMPointerFactory.java
index 786378ce..0c78bbfa 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMPointerFactory.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMPointerFactory.java
@@ -34,0 +35 @@ public class JDOMPointerFactory implements NodePointerFactory {
+    @Override
@@ -38,0 +40 @@ public class JDOMPointerFactory implements NodePointerFactory {
+    @Override
@@ -40 +42 @@ public class JDOMPointerFactory implements NodePointerFactory {
-            QName name, Object bean, Locale locale) {
+            final QName name, final Object bean, final Locale locale) {
@@ -49,0 +52 @@ public class JDOMPointerFactory implements NodePointerFactory {
+    @Override
@@ -51 +54 @@ public class JDOMPointerFactory implements NodePointerFactory {
-            NodePointer parent, QName name, Object bean) {
+            final NodePointer parent, final QName name, final Object bean) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/parser/ParseException.java b/src/main/java/org/apache/commons/jxpath/ri/parser/ParseException.java
index dbb7463e..3ff88a9b 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/parser/ParseException.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/parser/ParseException.java
@@ -31,0 +32,5 @@ public class ParseException extends Exception {
+    /**
+     *
+     */
+    private static final long serialVersionUID = 1L;
+
@@ -37 +42 @@ public class ParseException extends Exception {
-     * 
+     *
@@ -42,3 +47,3 @@ public class ParseException extends Exception {
-    public ParseException(Token currentTokenVal,
-                        int[][] expectedTokenSequencesVal,
-                        String[] tokenImageVal
+    public ParseException(final Token currentTokenVal,
+                        final int[][] expectedTokenSequencesVal,
+                        final String[] tokenImageVal
@@ -65 +69,0 @@ public class ParseException extends Exception {
-    super();
@@ -69 +73 @@ public class ParseException extends Exception {
-  public ParseException(String message) {
+  public ParseException(final String message) {
@@ -112 +116,2 @@ public class ParseException extends Exception {
-  public String getMessage() {
+  @Override
+public String getMessage() {
@@ -118,3 +123,3 @@ public class ParseException extends Exception {
-    for (int i = 0; i < expectedTokenSequences.length; i++) {
-      if (maxSize < expectedTokenSequences[i].length) {
-        maxSize = expectedTokenSequences[i].length;
+    for (final int[] element : expectedTokenSequences) {
+      if (maxSize < element.length) {
+        maxSize = element.length;
@@ -122,2 +127,2 @@ public class ParseException extends Exception {
-      for (int j = 0; j < expectedTokenSequences[i].length; j++) {
-        expected += tokenImage[expectedTokenSequences[i][j]] + " ";
+      for (final int element2 : element) {
+        expected += tokenImage[element2] + " ";
@@ -125 +130 @@ public class ParseException extends Exception {
-      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
+      if (element[element.length - 1] != 0) {
@@ -133 +138,3 @@ public class ParseException extends Exception {
-      if (i != 0) retval += " ";
+      if (i != 0) {
+        retval += " ";
+    }
@@ -165,2 +172,2 @@ public class ParseException extends Exception {
-  protected String add_escapes(String str) {
-      StringBuffer retval = new StringBuffer();
+  protected String add_escapes(final String str) {
+      final StringBuffer retval = new StringBuffer();
@@ -199 +206 @@ public class ParseException extends Exception {
-                 String s = "0000" + Integer.toString(ch, 16);
+                 final String s = "0000" + Integer.toString(ch, 16);
diff --git a/src/main/java/org/apache/commons/jxpath/ri/parser/SimpleCharStream.java b/src/main/java/org/apache/commons/jxpath/ri/parser/SimpleCharStream.java
index 63fb8674..5e5443a6 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/parser/SimpleCharStream.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/parser/SimpleCharStream.java
@@ -48 +48 @@ public class SimpleCharStream
-  protected void ExpandBuff(boolean wrapAround)
+  protected void ExpandBuff(final boolean wrapAround)
@@ -50,3 +50,3 @@ public class SimpleCharStream
-     char[] newbuffer = new char[bufsize + 2048];
-     int newbufline[] = new int[bufsize + 2048];
-     int newbufcolumn[] = new int[bufsize + 2048];
+     final char[] newbuffer = new char[bufsize + 2048];
+     final int newbufline[] = new int[bufsize + 2048];
+     final int newbufcolumn[] = new int[bufsize + 2048];
@@ -71 +71 @@ public class SimpleCharStream
-           maxNextCharInd = (bufpos += (bufsize - tokenBegin));
+           maxNextCharInd = bufpos += bufsize - tokenBegin;
@@ -84 +84 @@ public class SimpleCharStream
-           maxNextCharInd = (bufpos -= tokenBegin);
+           maxNextCharInd = bufpos -= tokenBegin;
@@ -87 +87 @@ public class SimpleCharStream
-     catch (Throwable t)
+     catch (final Throwable t)
@@ -109,4 +109,12 @@ public class SimpleCharStream
-           else if (tokenBegin < 0)
-              bufpos = maxNextCharInd = 0;
-           else
-              ExpandBuff(false);
+           else if (tokenBegin < 0) {
+            bufpos = maxNextCharInd = 0;
+        } else {
+            ExpandBuff(false);
+        }
+        }
+        else if (available > tokenBegin) {
+            available = bufsize;
+        } else if (tokenBegin - available < 2048) {
+            ExpandBuff(true);
+        } else {
+            available = tokenBegin;
@@ -114,6 +121,0 @@ public class SimpleCharStream
-        else if (available > tokenBegin)
-           available = bufsize;
-        else if ((tokenBegin - available) < 2048)
-           ExpandBuff(true);
-        else
-           available = tokenBegin;
@@ -128,0 +131,2 @@ public class SimpleCharStream
+        } else {
+            maxNextCharInd += i;
@@ -130,2 +133,0 @@ public class SimpleCharStream
-        else
-           maxNextCharInd += i;
@@ -134 +136 @@ public class SimpleCharStream
-     catch(java.io.IOException e) {
+     catch(final java.io.IOException e) {
@@ -137,2 +139,3 @@ public class SimpleCharStream
-        if (tokenBegin == -1)
-           tokenBegin = bufpos;
+        if (tokenBegin == -1) {
+            tokenBegin = bufpos;
+        }
@@ -146 +149 @@ public class SimpleCharStream
-     char c = readChar();
+     final char c = readChar();
@@ -152 +155 @@ public class SimpleCharStream
-  protected void UpdateLineColumn(char c)
+  protected void UpdateLineColumn(final char c)
@@ -159 +162 @@ public class SimpleCharStream
-        line += (column = 1);
+        line += column = 1;
@@ -166,0 +170,2 @@ public class SimpleCharStream
+        } else {
+            line += column = 1;
@@ -168,2 +172,0 @@ public class SimpleCharStream
-        else
-           line += (column = 1);
@@ -182 +185 @@ public class SimpleCharStream
-           column += (8 - (column & 07));
+           column += 8 - (column & 07);
@@ -198,2 +201,3 @@ public class SimpleCharStream
-        if (++bufpos == bufsize)
-           bufpos = 0;
+        if (++bufpos == bufsize) {
+            bufpos = 0;
+        }
@@ -204 +208 @@ public class SimpleCharStream
-     if (++bufpos >= maxNextCharInd)
+     if (++bufpos >= maxNextCharInd) {
@@ -205,0 +210 @@ public class SimpleCharStream
+    }
@@ -207 +212 @@ public class SimpleCharStream
-     char c = buffer[bufpos];
+     final char c = buffer[bufpos];
@@ -210 +215 @@ public class SimpleCharStream
-     return (c);
+     return c;
@@ -218 +223,2 @@ public class SimpleCharStream
-  public int getColumn() {
+  @Deprecated
+public int getColumn() {
@@ -227 +233,2 @@ public class SimpleCharStream
-  public int getLine() {
+  @Deprecated
+public int getLine() {
@@ -247 +254 @@ public class SimpleCharStream
-  public void backup(int amount) {
+  public void backup(final int amount) {
@@ -250,2 +257,3 @@ public class SimpleCharStream
-    if ((bufpos -= amount) < 0)
-       bufpos += bufsize;
+    if ((bufpos -= amount) < 0) {
+        bufpos += bufsize;
+    }
@@ -254,2 +262,2 @@ public class SimpleCharStream
-  public SimpleCharStream(java.io.Reader dstream, int startline,
-  int startcolumn, int buffersize)
+  public SimpleCharStream(final java.io.Reader dstream, final int startline,
+  final int startcolumn, final int buffersize)
@@ -267,2 +275,2 @@ public class SimpleCharStream
-  public SimpleCharStream(java.io.Reader dstream, int startline,
-                                                           int startcolumn)
+  public SimpleCharStream(final java.io.Reader dstream, final int startline,
+                                                           final int startcolumn)
@@ -273 +281 @@ public class SimpleCharStream
-  public SimpleCharStream(java.io.Reader dstream)
+  public SimpleCharStream(final java.io.Reader dstream)
@@ -277,2 +285,2 @@ public class SimpleCharStream
-  public void ReInit(java.io.Reader dstream, int startline,
-  int startcolumn, int buffersize)
+  public void ReInit(final java.io.Reader dstream, final int startline,
+  final int startcolumn, final int buffersize)
@@ -296,2 +304,2 @@ public class SimpleCharStream
-  public void ReInit(java.io.Reader dstream, int startline,
-                                                           int startcolumn)
+  public void ReInit(final java.io.Reader dstream, final int startline,
+                                                           final int startcolumn)
@@ -302 +310 @@ public class SimpleCharStream
-  public void ReInit(java.io.Reader dstream)
+  public void ReInit(final java.io.Reader dstream)
@@ -306,2 +314,2 @@ public class SimpleCharStream
-  public SimpleCharStream(java.io.InputStream dstream, int startline,
-  int startcolumn, int buffersize)
+  public SimpleCharStream(final java.io.InputStream dstream, final int startline,
+  final int startcolumn, final int buffersize)
@@ -312,2 +320,2 @@ public class SimpleCharStream
-  public SimpleCharStream(java.io.InputStream dstream, int startline,
-                                                           int startcolumn)
+  public SimpleCharStream(final java.io.InputStream dstream, final int startline,
+                                                           final int startcolumn)
@@ -318 +326 @@ public class SimpleCharStream
-  public SimpleCharStream(java.io.InputStream dstream)
+  public SimpleCharStream(final java.io.InputStream dstream)
@@ -323,2 +331,2 @@ public class SimpleCharStream
-  public void ReInit(java.io.InputStream dstream, int startline,
-                          int startcolumn, int buffersize)
+  public void ReInit(final java.io.InputStream dstream, final int startline,
+                          final int startcolumn, final int buffersize)
@@ -329 +337 @@ public class SimpleCharStream
-  public void ReInit(java.io.InputStream dstream)
+  public void ReInit(final java.io.InputStream dstream)
@@ -333,2 +341,2 @@ public class SimpleCharStream
-  public void ReInit(java.io.InputStream dstream, int startline,
-                                                           int startcolumn)
+  public void ReInit(final java.io.InputStream dstream, final int startline,
+                                                           final int startcolumn)
@@ -340 +348 @@ public class SimpleCharStream
-     if (bufpos >= tokenBegin)
+     if (bufpos >= tokenBegin) {
@@ -342 +350 @@ public class SimpleCharStream
-     else
+    } else {
@@ -344,0 +353 @@ public class SimpleCharStream
+    }
@@ -347 +356 @@ public class SimpleCharStream
-  public char[] GetSuffix(int len)
+  public char[] GetSuffix(final int len)
@@ -349 +358 @@ public class SimpleCharStream
-     char[] ret = new char[len];
+     final char[] ret = new char[len];
@@ -351 +360 @@ public class SimpleCharStream
-     if ((bufpos + 1) >= len)
+     if (bufpos + 1 >= len) {
@@ -353 +362 @@ public class SimpleCharStream
-     else
+    } else
@@ -372 +381 @@ public class SimpleCharStream
-   * 
+   *
@@ -376 +385 @@ public class SimpleCharStream
-  public void adjustBeginLineColumn(int newLine, int newCol)
+  public void adjustBeginLineColumn(int newLine, final int newCol)
@@ -410,4 +419,5 @@ public class SimpleCharStream
-           if (bufline[j = start % bufsize] != bufline[++start % bufsize])
-              bufline[j] = newLine++;
-           else
-              bufline[j] = newLine;
+           if (bufline[j = start % bufsize] != bufline[++start % bufsize]) {
+            bufline[j] = newLine++;
+        } else {
+            bufline[j] = newLine;
+        }
diff --git a/src/main/java/org/apache/commons/jxpath/ri/parser/Token.java b/src/main/java/org/apache/commons/jxpath/ri/parser/Token.java
index 53dc6d53..3fa347c2 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/parser/Token.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/parser/Token.java
@@ -72 +72,2 @@ public class Token {
-  public String toString()
+  @Override
+public String toString()
@@ -81 +82 @@ public class Token {
-   * 
+   *
@@ -85 +86 @@ public class Token {
-   * 
+   *
@@ -87 +88 @@ public class Token {
-   * 
+   *
@@ -91 +92 @@ public class Token {
-  public static final Token newToken(int ofKind)
+  public static final Token newToken(final int ofKind)
diff --git a/src/main/java/org/apache/commons/jxpath/ri/parser/TokenMgrError.java b/src/main/java/org/apache/commons/jxpath/ri/parser/TokenMgrError.java
index a6d59f5a..68ccfa0e 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/parser/TokenMgrError.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/parser/TokenMgrError.java
@@ -30,0 +31,5 @@ public class TokenMgrError extends Error
+     *
+     */
+    private static final long serialVersionUID = 1L;
+
+/**
@@ -58 +63 @@ public class TokenMgrError extends Error
-    * 
+    *
@@ -62,2 +67,2 @@ public class TokenMgrError extends Error
-   public static final String addEscapes(String str) {
-      StringBuffer retval = new StringBuffer();
+   public static final String addEscapes(final String str) {
+      final StringBuffer retval = new StringBuffer();
@@ -96 +101 @@ public class TokenMgrError extends Error
-                 String s = "0000" + Integer.toString(ch, 16);
+                 final String s = "0000" + Integer.toString(ch, 16);
@@ -109 +114 @@ public class TokenMgrError extends Error
-    * 
+    *
@@ -111 +116 @@ public class TokenMgrError extends Error
-    * 
+    *
@@ -120,6 +125,6 @@ public class TokenMgrError extends Error
-   protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
-      return("Lexical error at line " +
-           errorLine + ", column " +
-           errorColumn + ".  Encountered: " +
-           (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar + "), ") +
-           "after : \"" + addEscapes(errorAfter) + "\"");
+   protected static String LexicalError(final boolean EOFSeen, final int lexState, final int errorLine, final int errorColumn, final String errorAfter, final char curChar) {
+      return "Lexical error at line " +
+       errorLine + ", column " +
+       errorColumn + ".  Encountered: " +
+       (EOFSeen ? "<EOF> " : "\"" + addEscapes(String.valueOf(curChar)) + "\"" + " (" + (int)curChar + "), ") +
+       "after : \"" + addEscapes(errorAfter) + "\"";
@@ -137 +142,2 @@ public class TokenMgrError extends Error
-   public String getMessage() {
+   @Override
+public String getMessage() {
@@ -148 +154 @@ public class TokenMgrError extends Error
-   public TokenMgrError(String message, int reason) {
+   public TokenMgrError(final String message, final int reason) {
@@ -153 +159 @@ public class TokenMgrError extends Error
-   public TokenMgrError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, int reason) {
+   public TokenMgrError(final boolean EOFSeen, final int lexState, final int errorLine, final int errorColumn, final String errorAfter, final char curChar, final int reason) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/parser/XPathParser.java b/src/main/java/org/apache/commons/jxpath/ri/parser/XPathParser.java
index be5e56a4..e0606568 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/parser/XPathParser.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/parser/XPathParser.java
@@ -27 +27 @@
-        public void setCompiler(Compiler compiler){
+        public void setCompiler(final Compiler compiler){
@@ -165 +165,3 @@
-        {if (true) return token.image;}
+        {if (true) {
+            return token.image;
+        }}
@@ -191 +193,3 @@
-        {if (true) return token.image;}
+        {if (true) {
+            return token.image;
+        }}
@@ -327 +331,3 @@
-        {if (true) return code;}
+        {if (true) {
+            return code;
+        }}
@@ -344 +350,3 @@
-            {if (true) return compiler.qname(null, nc1);}
+            {if (true) {
+                return compiler.qname(null, nc1);
+            }}
@@ -347 +355,3 @@
-            {if (true) return compiler.qname(nc1, nc2);}
+            {if (true) {
+                return compiler.qname(nc1, nc2);
+            }}
@@ -374 +384,3 @@
-            {if (true) return compiler.qname(null, nc1);}
+            {if (true) {
+                return compiler.qname(null, nc1);
+            }}
@@ -377 +389,3 @@
-            {if (true) return compiler.qname(nc1, nc2);}
+            {if (true) {
+                return compiler.qname(nc1, nc2);
+            }}
@@ -386 +400,3 @@
-        {if (true) return ex;}
+        {if (true) {
+            return ex;
+        }}
@@ -532 +548,3 @@
-        {if (true) return ex;}
+        {if (true) {
+            return ex;
+        }}
@@ -539 +557 @@
-    ArrayList steps = new ArrayList();
+    final ArrayList steps = new ArrayList();
@@ -566 +584,3 @@
-        {if (true) return compiler.locationPath(true, steps.toArray());}
+        {if (true) {
+            return compiler.locationPath(true, steps.toArray());
+        }}
@@ -572 +592 @@
-    ArrayList steps = new ArrayList();
+    final ArrayList steps = new ArrayList();
@@ -587 +607,3 @@
-        {if (true) return compiler.locationPath(false, steps.toArray());}
+        {if (true) {
+            return compiler.locationPath(false, steps.toArray());
+        }}
@@ -600 +622 @@
-  final public void LocationStep(ArrayList steps) throws ParseException {
+  final public void LocationStep(final ArrayList steps) throws ParseException {
@@ -602 +624 @@
-    Object s;
+    final Object s;
@@ -622 +644 @@
-  final public void NodeTest(ArrayList steps) throws ParseException {
+  final public void NodeTest(final ArrayList steps) throws ParseException {
@@ -629 +651 @@
-    ArrayList ps = new ArrayList();
+    final ArrayList ps = new ArrayList();
@@ -812 +834,3 @@
-        {if (true) return axis;}
+        {if (true) {
+            return axis;
+        }}
@@ -884 +908,3 @@
-        {if (true) return axis;}
+        {if (true) {
+            return axis;
+        }}
@@ -903 +929,3 @@
-        {if (true) return ex;}
+        {if (true) {
+            return ex;
+        }}
@@ -921 +949,3 @@
-        {if (true) return axis;}
+        {if (true) {
+            return axis;
+        }}
@@ -947 +977,3 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) return ex;}
+        {if (true) {
+            return ex;
+        }}
@@ -1026 +1058,3 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) return ex;}
+        {if (true) {
+            return ex;
+        }}
@@ -1041 +1075,3 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-            {if (true) return compiler.function(name, null);}
+            {if (true) {
+                return compiler.function(name, null);
+            }}
@@ -1044 +1080,3 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-            {if (true) return compiler.function(name, args.toArray());}
+            {if (true) {
+                return compiler.function(name, args.toArray());
+            }}
@@ -1055 +1093,3 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-            {if (true) return compiler.function(code, null);}
+            {if (true) {
+                return compiler.function(code, null);
+            }}
@@ -1058 +1098,3 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-            {if (true) return compiler.function(code, args.toArray());}
+            {if (true) {
+                return compiler.function(code, args.toArray());
+            }}
@@ -1154 +1196,3 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) return args;}
+        {if (true) {
+            return args;
+        }}
@@ -1162 +1206,3 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) return ex;}
+        {if (true) {
+            return ex;
+        }}
@@ -1196 +1242,3 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) return ex;}
+        {if (true) {
+            return ex;
+        }}
@@ -1203 +1251 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-    Object[] steps;
+    final Object[] steps;
@@ -1275 +1323,3 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) return ex;}
+        {if (true) {
+            return ex;
+        }}
@@ -1282 +1332 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-    ArrayList ps = new ArrayList();
+    final ArrayList ps = new ArrayList();
@@ -1284 +1334 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-    ArrayList steps = new ArrayList();
+    final ArrayList steps = new ArrayList();
@@ -1315 +1365,3 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-            {if (true) return compiler.expressionPath(ex, ps.toArray(), steps.toArray());}
+            {if (true) {
+                return compiler.expressionPath(ex, ps.toArray(), steps.toArray());
+            }}
@@ -1318 +1370,3 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-            {if (true) return ex;}
+            {if (true) {
+                return ex;
+            }}
@@ -1353 +1407,3 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) return ex;}
+        {if (true) {
+            return ex;
+        }}
@@ -1383 +1439,3 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) return ex;}
+        {if (true) {
+            return ex;
+        }}
@@ -1419 +1477,3 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) return ex;}
+        {if (true) {
+            return ex;
+        }}
@@ -1468 +1528,3 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) return ex;}
+        {if (true) {
+            return ex;
+        }}
@@ -1502 +1564,3 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) return ex;}
+        {if (true) {
+            return ex;
+        }}
@@ -1523 +1587,3 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) return ex;}
+        {if (true) {
+            return ex;
+        }}
@@ -1566 +1632,3 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) return ex;}
+        {if (true) {
+            return ex;
+        }}
@@ -1649 +1717,3 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
-        {if (true) return ex;}
+        {if (true) {
+            return ex;
+        }}
@@ -1690 +1760,3 @@ specified to disambiguate the grammar:
-        {if (true) return qname;}
+        {if (true) {
+            return qname;
+        }}
@@ -1699 +1771,3 @@ specified to disambiguate the grammar:
-        {if (true) return compiler.variableReference(ex);}
+        {if (true) {
+            return compiler.variableReference(ex);
+        }}
@@ -1825 +1899,3 @@ specified to disambiguate the grammar:
-        {if (true) return qn;}
+        {if (true) {
+            return qn;
+        }}
@@ -1854 +1930,3 @@ specified to disambiguate the grammar:
-        {if (true) return type;}
+        {if (true) {
+            return type;
+        }}
@@ -1858 +1936 @@ specified to disambiguate the grammar:
-  final private boolean jj_2_1(int xla) {
+  private boolean jj_2_1(final int xla) {
@@ -1861 +1939 @@ specified to disambiguate the grammar:
-    catch(LookaheadSuccess ls) { return true; }
+    catch(final LookaheadSuccess ls) { return true; }
@@ -1865 +1943 @@ specified to disambiguate the grammar:
-  final private boolean jj_2_2(int xla) {
+  private boolean jj_2_2(final int xla) {
@@ -1868 +1946 @@ specified to disambiguate the grammar:
-    catch(LookaheadSuccess ls) { return true; }
+    catch(final LookaheadSuccess ls) { return true; }
@@ -1872 +1950 @@ specified to disambiguate the grammar:
-  final private boolean jj_2_3(int xla) {
+  private boolean jj_2_3(final int xla) {
@@ -1875 +1953 @@ specified to disambiguate the grammar:
-    catch(LookaheadSuccess ls) { return true; }
+    catch(final LookaheadSuccess ls) { return true; }
@@ -1879 +1957 @@ specified to disambiguate the grammar:
-  final private boolean jj_2_4(int xla) {
+  private boolean jj_2_4(final int xla) {
@@ -1882 +1960 @@ specified to disambiguate the grammar:
-    catch(LookaheadSuccess ls) { return true; }
+    catch(final LookaheadSuccess ls) { return true; }
@@ -1886 +1964 @@ specified to disambiguate the grammar:
-  final private boolean jj_2_5(int xla) {
+  private boolean jj_2_5(final int xla) {
@@ -1889 +1967 @@ specified to disambiguate the grammar:
-    catch(LookaheadSuccess ls) { return true; }
+    catch(final LookaheadSuccess ls) { return true; }
@@ -1893 +1971 @@ specified to disambiguate the grammar:
-  final private boolean jj_2_6(int xla) {
+  private boolean jj_2_6(final int xla) {
@@ -1896 +1974 @@ specified to disambiguate the grammar:
-    catch(LookaheadSuccess ls) { return true; }
+    catch(final LookaheadSuccess ls) { return true; }
@@ -1900,2 +1978,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3_2() {
-    if (jj_3R_16()) return true;
+  private boolean jj_3_2() {
+    if (jj_3R_16()) {
+        return true;
+    }
@@ -1905,2 +1985,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_144() {
-    if (jj_3R_16()) return true;
+  private boolean jj_3R_144() {
+    if (jj_3R_16()) {
+        return true;
+    }
@@ -1910,2 +1992,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_143() {
-    if (jj_3R_77()) return true;
+  private boolean jj_3R_143() {
+    if (jj_3R_77()) {
+        return true;
+    }
@@ -1915,2 +1999,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_150() {
-    if (jj_3R_16()) return true;
+  private boolean jj_3R_150() {
+    if (jj_3R_16()) {
+        return true;
+    }
@@ -1925,3 +2011,7 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_132() {
-    if (jj_scan_token(MINUS)) return true;
-    if (jj_3R_129()) return true;
+  private boolean jj_3R_132() {
+    if (jj_scan_token(MINUS)) {
+        return true;
+    }
+    if (jj_3R_129()) {
+        return true;
+    }
@@ -1931 +2021 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_130() {
+  private boolean jj_3R_130() {
@@ -1938 +2028,3 @@ specified to disambiguate the grammar:
-    if (jj_3R_135()) return true;
+    if (jj_3R_135()) {
+        return true;
+    }
@@ -1944 +2036 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_148() {
+  private boolean jj_3R_148() {
@@ -1949 +2041,3 @@ specified to disambiguate the grammar:
-    if (jj_scan_token(6)) return true;
+    if (jj_scan_token(6)) {
+        return true;
+    }
@@ -1954,2 +2048,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_131() {
-    if (jj_3R_136()) return true;
+  private boolean jj_3R_131() {
+    if (jj_3R_136()) {
+        return true;
+    }
@@ -1959 +2055 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_64() {
+  private boolean jj_3R_64() {
@@ -1970 +2066,3 @@ specified to disambiguate the grammar:
-    if (jj_scan_token(30)) return true;
+    if (jj_scan_token(30)) {
+        return true;
+    }
@@ -1978,2 +2076,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_113() {
-    if (jj_scan_token(87)) return true;
+  private boolean jj_3R_113() {
+    if (jj_scan_token(87)) {
+        return true;
+    }
@@ -1983 +2083 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_91() {
+  private boolean jj_3R_91() {
@@ -1986 +2086,3 @@ specified to disambiguate the grammar:
-    if (jj_3R_113()) jj_scanpos = xsp;
+    if (jj_3R_113()) {
+        jj_scanpos = xsp;
+    }
@@ -1990,2 +2092,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_141() {
-    if (jj_3R_19()) return true;
+  private boolean jj_3R_141() {
+    if (jj_3R_19()) {
+        return true;
+    }
@@ -2004 +2108 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_129() {
+  private boolean jj_3R_129() {
@@ -2009 +2113,3 @@ specified to disambiguate the grammar:
-    if (jj_3R_132()) return true;
+    if (jj_3R_132()) {
+        return true;
+    }
@@ -2014,2 +2120,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3_6() {
-    if (jj_3R_19()) return true;
+  private boolean jj_3_6() {
+    if (jj_3R_19()) {
+        return true;
+    }
@@ -2019,2 +2127,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_146() {
-    if (jj_3R_148()) return true;
+  private boolean jj_3R_146() {
+    if (jj_3R_148()) {
+        return true;
+    }
@@ -2024,3 +2134,7 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_135() {
-    if (jj_scan_token(MOD)) return true;
-    if (jj_3R_129()) return true;
+  private boolean jj_3R_135() {
+    if (jj_scan_token(MOD)) {
+        return true;
+    }
+    if (jj_3R_129()) {
+        return true;
+    }
@@ -2030,2 +2144,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_145() {
-    if (jj_3R_147()) return true;
+  private boolean jj_3R_145() {
+    if (jj_3R_147()) {
+        return true;
+    }
@@ -2035,3 +2151,7 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_134() {
-    if (jj_scan_token(DIV)) return true;
-    if (jj_3R_129()) return true;
+  private boolean jj_3R_134() {
+    if (jj_scan_token(DIV)) {
+        return true;
+    }
+    if (jj_3R_129()) {
+        return true;
+    }
@@ -2041,3 +2161,7 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_133() {
-    if (jj_scan_token(89)) return true;
-    if (jj_3R_129()) return true;
+  private boolean jj_3R_133() {
+    if (jj_scan_token(89)) {
+        return true;
+    }
+    if (jj_3R_129()) {
+        return true;
+    }
@@ -2047 +2171 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_142() {
+  private boolean jj_3R_142() {
@@ -2052 +2176,3 @@ specified to disambiguate the grammar:
-    if (jj_3R_146()) return true;
+    if (jj_3R_146()) {
+        return true;
+    }
@@ -2057,2 +2183,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_140() {
-    if (jj_3R_142()) return true;
+  private boolean jj_3R_140() {
+    if (jj_3R_142()) {
+        return true;
+    }
@@ -2062,2 +2190,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_139() {
-    if (jj_3R_141()) return true;
+  private boolean jj_3R_139() {
+    if (jj_3R_141()) {
+        return true;
+    }
@@ -2067,4 +2197,10 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_77() {
-    if (jj_scan_token(85)) return true;
-    if (jj_3R_70()) return true;
-    if (jj_scan_token(86)) return true;
+  private boolean jj_3R_77() {
+    if (jj_scan_token(85)) {
+        return true;
+    }
+    if (jj_3R_70()) {
+        return true;
+    }
+    if (jj_scan_token(86)) {
+        return true;
+    }
@@ -2074,2 +2210,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_127() {
-    if (jj_3R_129()) return true;
+  private boolean jj_3R_127() {
+    if (jj_3R_129()) {
+        return true;
+    }
@@ -2084 +2222 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_137() {
+  private boolean jj_3R_137() {
@@ -2089 +2227,3 @@ specified to disambiguate the grammar:
-    if (jj_3R_140()) return true;
+    if (jj_3R_140()) {
+        return true;
+    }
@@ -2094,3 +2234,7 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_128() {
-    if (jj_scan_token(MINUS)) return true;
-    if (jj_3R_127()) return true;
+  private boolean jj_3R_128() {
+    if (jj_scan_token(MINUS)) {
+        return true;
+    }
+    if (jj_3R_127()) {
+        return true;
+    }
@@ -2100,2 +2244,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_112() {
-    if (jj_scan_token(AXIS_DESCENDANT_OR_SELF)) return true;
+  private boolean jj_3R_112() {
+    if (jj_scan_token(AXIS_DESCENDANT_OR_SELF)) {
+        return true;
+    }
@@ -2105,2 +2251,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_111() {
-    if (jj_scan_token(AXIS_PRECEDING_SIBLING)) return true;
+  private boolean jj_3R_111() {
+    if (jj_scan_token(AXIS_PRECEDING_SIBLING)) {
+        return true;
+    }
@@ -2110,2 +2258,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_110() {
-    if (jj_scan_token(AXIS_FOLLOWING_SIBLING)) return true;
+  private boolean jj_3R_110() {
+    if (jj_scan_token(AXIS_FOLLOWING_SIBLING)) {
+        return true;
+    }
@@ -2115,3 +2265,7 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_122() {
-    if (jj_scan_token(PLUS)) return true;
-    if (jj_3R_121()) return true;
+  private boolean jj_3R_122() {
+    if (jj_scan_token(PLUS)) {
+        return true;
+    }
+    if (jj_3R_121()) {
+        return true;
+    }
@@ -2121,2 +2275,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_109() {
-    if (jj_scan_token(AXIS_ANCESTOR_OR_SELF)) return true;
+  private boolean jj_3R_109() {
+    if (jj_scan_token(AXIS_ANCESTOR_OR_SELF)) {
+        return true;
+    }
@@ -2126,2 +2282,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_108() {
-    if (jj_scan_token(AXIS_DESCENDANT)) return true;
+  private boolean jj_3R_108() {
+    if (jj_scan_token(AXIS_DESCENDANT)) {
+        return true;
+    }
@@ -2131,2 +2289,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_107() {
-    if (jj_scan_token(AXIS_FOLLOWING)) return true;
+  private boolean jj_3R_107() {
+    if (jj_scan_token(AXIS_FOLLOWING)) {
+        return true;
+    }
@@ -2136,2 +2296,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_106() {
-    if (jj_scan_token(AXIS_PRECEDING)) return true;
+  private boolean jj_3R_106() {
+    if (jj_scan_token(AXIS_PRECEDING)) {
+        return true;
+    }
@@ -2141,2 +2303,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_121() {
-    if (jj_3R_127()) return true;
+  private boolean jj_3R_121() {
+    if (jj_3R_127()) {
+        return true;
+    }
@@ -2151,2 +2315,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_105() {
-    if (jj_scan_token(AXIS_NAMESPACE)) return true;
+  private boolean jj_3R_105() {
+    if (jj_scan_token(AXIS_NAMESPACE)) {
+        return true;
+    }
@@ -2156,2 +2322,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_104() {
-    if (jj_scan_token(AXIS_ATTRIBUTE)) return true;
+  private boolean jj_3R_104() {
+    if (jj_scan_token(AXIS_ATTRIBUTE)) {
+        return true;
+    }
@@ -2161,2 +2329,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_103() {
-    if (jj_scan_token(AXIS_ANCESTOR)) return true;
+  private boolean jj_3R_103() {
+    if (jj_scan_token(AXIS_ANCESTOR)) {
+        return true;
+    }
@@ -2166,2 +2336,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_20() {
-    if (jj_3R_64()) return true;
+  private boolean jj_3R_20() {
+    if (jj_3R_64()) {
+        return true;
+    }
@@ -2171,2 +2343,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_102() {
-    if (jj_scan_token(AXIS_PARENT)) return true;
+  private boolean jj_3R_102() {
+    if (jj_scan_token(AXIS_PARENT)) {
+        return true;
+    }
@@ -2176,2 +2350,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_101() {
-    if (jj_scan_token(AXIS_CHILD)) return true;
+  private boolean jj_3R_101() {
+    if (jj_scan_token(AXIS_CHILD)) {
+        return true;
+    }
@@ -2181,2 +2357,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_100() {
-    if (jj_scan_token(AXIS_SELF)) return true;
+  private boolean jj_3R_100() {
+    if (jj_scan_token(AXIS_SELF)) {
+        return true;
+    }
@@ -2186,3 +2364,7 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_138() {
-    if (jj_scan_token(UNION)) return true;
-    if (jj_3R_137()) return true;
+  private boolean jj_3R_138() {
+    if (jj_scan_token(UNION)) {
+        return true;
+    }
+    if (jj_3R_137()) {
+        return true;
+    }
@@ -2192 +2374 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_15() {
+  private boolean jj_3R_15() {
@@ -2265 +2447,3 @@ specified to disambiguate the grammar:
-    if (jj_scan_token(78)) return true;
+    if (jj_scan_token(78)) {
+        return true;
+    }
@@ -2304 +2488 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_90() {
+  private boolean jj_3R_90() {
@@ -2331 +2515,3 @@ specified to disambiguate the grammar:
-    if (jj_3R_112()) return true;
+    if (jj_3R_112()) {
+        return true;
+    }
@@ -2347,2 +2533,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_136() {
-    if (jj_3R_137()) return true;
+  private boolean jj_3R_136() {
+    if (jj_3R_137()) {
+        return true;
+    }
@@ -2357 +2545 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_118() {
+  private boolean jj_3R_118() {
@@ -2366 +2554,3 @@ specified to disambiguate the grammar:
-    if (jj_3R_126()) return true;
+    if (jj_3R_126()) {
+        return true;
+    }
@@ -2373,2 +2563,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_117() {
-    if (jj_3R_121()) return true;
+  private boolean jj_3R_117() {
+    if (jj_3R_121()) {
+        return true;
+    }
@@ -2383,2 +2575,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_83() {
-    if (jj_3R_91()) return true;
+  private boolean jj_3R_83() {
+    if (jj_3R_91()) {
+        return true;
+    }
@@ -2388,2 +2582,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_82() {
-    if (jj_3R_90()) return true;
+  private boolean jj_3R_82() {
+    if (jj_3R_90()) {
+        return true;
+    }
@@ -2393,2 +2589,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_96() {
-    if (jj_3R_70()) return true;
+  private boolean jj_3R_96() {
+    if (jj_3R_70()) {
+        return true;
+    }
@@ -2398,3 +2596,7 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_126() {
-    if (jj_scan_token(GTE)) return true;
-    if (jj_3R_117()) return true;
+  private boolean jj_3R_126() {
+    if (jj_scan_token(GTE)) {
+        return true;
+    }
+    if (jj_3R_117()) {
+        return true;
+    }
@@ -2404,3 +2606,7 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_97() {
-    if (jj_scan_token(88)) return true;
-    if (jj_3R_96()) return true;
+  private boolean jj_3R_97() {
+    if (jj_scan_token(88)) {
+        return true;
+    }
+    if (jj_3R_96()) {
+        return true;
+    }
@@ -2410,3 +2616,7 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_125() {
-    if (jj_scan_token(LTE)) return true;
-    if (jj_3R_117()) return true;
+  private boolean jj_3R_125() {
+    if (jj_scan_token(LTE)) {
+        return true;
+    }
+    if (jj_3R_117()) {
+        return true;
+    }
@@ -2416 +2626 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_73() {
+  private boolean jj_3R_73() {
@@ -2421 +2631,3 @@ specified to disambiguate the grammar:
-    if (jj_3R_83()) return true;
+    if (jj_3R_83()) {
+        return true;
+    }
@@ -2426,3 +2638,7 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_124() {
-    if (jj_scan_token(GT)) return true;
-    if (jj_3R_117()) return true;
+  private boolean jj_3R_124() {
+    if (jj_scan_token(GT)) {
+        return true;
+    }
+    if (jj_3R_117()) {
+        return true;
+    }
@@ -2432 +2648 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_116() {
+  private boolean jj_3R_116() {
@@ -2437 +2653,3 @@ specified to disambiguate the grammar:
-    if (jj_3R_120()) return true;
+    if (jj_3R_120()) {
+        return true;
+    }
@@ -2442,3 +2660,7 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_123() {
-    if (jj_scan_token(LT)) return true;
-    if (jj_3R_117()) return true;
+  private boolean jj_3R_123() {
+    if (jj_scan_token(LT)) {
+        return true;
+    }
+    if (jj_3R_117()) {
+        return true;
+    }
@@ -2448,2 +2670,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_88() {
-    if (jj_3R_96()) return true;
+  private boolean jj_3R_88() {
+    if (jj_3R_96()) {
+        return true;
+    }
@@ -2458,2 +2682,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_115() {
-    if (jj_3R_117()) return true;
+  private boolean jj_3R_115() {
+    if (jj_3R_117()) {
+        return true;
+    }
@@ -2468,2 +2694,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_26() {
-    if (jj_scan_token(PI)) return true;
+  private boolean jj_3R_26() {
+    if (jj_scan_token(PI)) {
+        return true;
+    }
@@ -2473,2 +2701,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_80() {
-    if (jj_scan_token(81)) return true;
+  private boolean jj_3R_80() {
+    if (jj_scan_token(81)) {
+        return true;
+    }
@@ -2477,2 +2707,6 @@ specified to disambiguate the grammar:
-    if (jj_3R_88()) jj_scanpos = xsp;
-    if (jj_scan_token(82)) return true;
+    if (jj_3R_88()) {
+        jj_scanpos = xsp;
+    }
+    if (jj_scan_token(82)) {
+        return true;
+    }
@@ -2482,2 +2716,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_25() {
-    if (jj_scan_token(COMMENT)) return true;
+  private boolean jj_3R_25() {
+    if (jj_scan_token(COMMENT)) {
+        return true;
+    }
@@ -2487,2 +2723,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_24() {
-    if (jj_scan_token(NODE)) return true;
+  private boolean jj_3R_24() {
+    if (jj_scan_token(NODE)) {
+        return true;
+    }
@@ -2492,3 +2730,7 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_120() {
-    if (jj_scan_token(NEQ)) return true;
-    if (jj_3R_115()) return true;
+  private boolean jj_3R_120() {
+    if (jj_scan_token(NEQ)) {
+        return true;
+    }
+    if (jj_3R_115()) {
+        return true;
+    }
@@ -2498,2 +2740,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_23() {
-    if (jj_scan_token(TEXT)) return true;
+  private boolean jj_3R_23() {
+    if (jj_scan_token(TEXT)) {
+        return true;
+    }
@@ -2503,3 +2747,7 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_119() {
-    if (jj_scan_token(EQ)) return true;
-    if (jj_3R_115()) return true;
+  private boolean jj_3R_119() {
+    if (jj_scan_token(EQ)) {
+        return true;
+    }
+    if (jj_3R_115()) {
+        return true;
+    }
@@ -2509,2 +2757,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_68() {
-    if (jj_3R_77()) return true;
+  private boolean jj_3R_68() {
+    if (jj_3R_77()) {
+        return true;
+    }
@@ -2514,3 +2764,7 @@ specified to disambiguate the grammar:
-  final private boolean jj_3_1() {
-    if (jj_3R_15()) return true;
-    if (jj_scan_token(80)) return true;
+  private boolean jj_3_1() {
+    if (jj_3R_15()) {
+        return true;
+    }
+    if (jj_scan_token(80)) {
+        return true;
+    }
@@ -2520,2 +2774,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3_4() {
-    if (jj_scan_token(PI)) return true;
+  private boolean jj_3_4() {
+    if (jj_scan_token(PI)) {
+        return true;
+    }
@@ -2525,4 +2781,10 @@ specified to disambiguate the grammar:
-  final private boolean jj_3_3() {
-    if (jj_3R_17()) return true;
-    if (jj_scan_token(81)) return true;
-    if (jj_scan_token(82)) return true;
+  private boolean jj_3_3() {
+    if (jj_3R_17()) {
+        return true;
+    }
+    if (jj_scan_token(81)) {
+        return true;
+    }
+    if (jj_scan_token(82)) {
+        return true;
+    }
@@ -2532 +2794 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_17() {
+  private boolean jj_3R_17() {
@@ -2541 +2803,3 @@ specified to disambiguate the grammar:
-    if (jj_3R_26()) return true;
+    if (jj_3R_26()) {
+        return true;
+    }
@@ -2548,2 +2812,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_67() {
-    if (jj_scan_token(84)) return true;
+  private boolean jj_3R_67() {
+    if (jj_scan_token(84)) {
+        return true;
+    }
@@ -2553,2 +2819,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_114() {
-    if (jj_3R_15()) return true;
+  private boolean jj_3R_114() {
+    if (jj_3R_15()) {
+        return true;
+    }
@@ -2558,2 +2826,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_66() {
-    if (jj_scan_token(83)) return true;
+  private boolean jj_3R_66() {
+    if (jj_scan_token(83)) {
+        return true;
+    }
@@ -2563,2 +2833,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_94() {
-    if (jj_3R_115()) return true;
+  private boolean jj_3R_94() {
+    if (jj_3R_115()) {
+        return true;
+    }
@@ -2573,2 +2845,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_76() {
-    if (jj_3R_84()) return true;
+  private boolean jj_3R_76() {
+    if (jj_3R_84()) {
+        return true;
+    }
@@ -2578,2 +2852,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_99() {
-    if (jj_3R_64()) return true;
+  private boolean jj_3R_99() {
+    if (jj_3R_64()) {
+        return true;
+    }
@@ -2583,4 +2859,10 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_98() {
-    if (jj_3R_15()) return true;
-    if (jj_scan_token(80)) return true;
-    if (jj_3R_15()) return true;
+  private boolean jj_3R_98() {
+    if (jj_3R_15()) {
+        return true;
+    }
+    if (jj_scan_token(80)) {
+        return true;
+    }
+    if (jj_3R_15()) {
+        return true;
+    }
@@ -2590,5 +2872,13 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_75() {
-    if (jj_scan_token(PI)) return true;
-    if (jj_scan_token(81)) return true;
-    if (jj_scan_token(Literal)) return true;
-    if (jj_scan_token(82)) return true;
+  private boolean jj_3R_75() {
+    if (jj_scan_token(PI)) {
+        return true;
+    }
+    if (jj_scan_token(81)) {
+        return true;
+    }
+    if (jj_scan_token(Literal)) {
+        return true;
+    }
+    if (jj_scan_token(82)) {
+        return true;
+    }
@@ -2598,2 +2888,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_92() {
-    if (jj_3R_15()) return true;
+  private boolean jj_3R_92() {
+    if (jj_3R_15()) {
+        return true;
+    }
@@ -2603,4 +2895,10 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_74() {
-    if (jj_3R_17()) return true;
-    if (jj_scan_token(81)) return true;
-    if (jj_scan_token(82)) return true;
+  private boolean jj_3R_74() {
+    if (jj_3R_17()) {
+        return true;
+    }
+    if (jj_scan_token(81)) {
+        return true;
+    }
+    if (jj_scan_token(82)) {
+        return true;
+    }
@@ -2610,3 +2908,7 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_71() {
-    if (jj_3R_18()) return true;
-    if (jj_3R_80()) return true;
+  private boolean jj_3R_71() {
+    if (jj_3R_18()) {
+        return true;
+    }
+    if (jj_3R_80()) {
+        return true;
+    }
@@ -2616,2 +2918,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_93() {
-    if (jj_scan_token(80)) return true;
+  private boolean jj_3R_93() {
+    if (jj_scan_token(80)) {
+        return true;
+    }
@@ -2622 +2926,3 @@ specified to disambiguate the grammar:
-    if (jj_3R_114()) return true;
+    if (jj_3R_114()) {
+        return true;
+    }
@@ -2627,2 +2933,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_65() {
-    if (jj_3R_73()) return true;
+  private boolean jj_3R_65() {
+    if (jj_3R_73()) {
+        return true;
+    }
@@ -2635 +2943,3 @@ specified to disambiguate the grammar:
-    if (jj_3R_76()) return true;
+    if (jj_3R_76()) {
+        return true;
+    }
@@ -2641,3 +2951,7 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_85() {
-    if (jj_scan_token(80)) return true;
-    if (jj_3R_15()) return true;
+  private boolean jj_3R_85() {
+    if (jj_scan_token(80)) {
+        return true;
+    }
+    if (jj_3R_15()) {
+        return true;
+    }
@@ -2647 +2961 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_89() {
+  private boolean jj_3R_89() {
@@ -2652 +2966,3 @@ specified to disambiguate the grammar:
-    if (jj_3R_99()) return true;
+    if (jj_3R_99()) {
+        return true;
+    }
@@ -2657,3 +2973,7 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_95() {
-    if (jj_scan_token(AND)) return true;
-    if (jj_3R_94()) return true;
+  private boolean jj_3R_95() {
+    if (jj_scan_token(AND)) {
+        return true;
+    }
+    if (jj_3R_94()) {
+        return true;
+    }
@@ -2663 +2983 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_84() {
+  private boolean jj_3R_84() {
@@ -2668 +2988,3 @@ specified to disambiguate the grammar:
-    if (jj_3R_92()) return true;
+    if (jj_3R_92()) {
+        return true;
+    }
@@ -2671 +2993,3 @@ specified to disambiguate the grammar:
-    if (jj_3R_93()) jj_scanpos = xsp;
+    if (jj_3R_93()) {
+        jj_scanpos = xsp;
+    }
@@ -2675 +2999 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_22() {
+  private boolean jj_3R_22() {
@@ -2682 +3006,3 @@ specified to disambiguate the grammar:
-    if (jj_3R_67()) return true;
+    if (jj_3R_67()) {
+        return true;
+    }
@@ -2692,3 +3018,7 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_72() {
-    if (jj_3R_81()) return true;
-    if (jj_3R_80()) return true;
+  private boolean jj_3R_72() {
+    if (jj_3R_81()) {
+        return true;
+    }
+    if (jj_3R_80()) {
+        return true;
+    }
@@ -2698,2 +3028,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_86() {
-    if (jj_3R_94()) return true;
+  private boolean jj_3R_86() {
+    if (jj_3R_94()) {
+        return true;
+    }
@@ -2708,2 +3040,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_151() {
-    if (jj_3R_16()) return true;
+  private boolean jj_3R_151() {
+    if (jj_3R_16()) {
+        return true;
+    }
@@ -2713,3 +3047,7 @@ specified to disambiguate the grammar:
-  final private boolean jj_3_5() {
-    if (jj_3R_18()) return true;
-    if (jj_scan_token(81)) return true;
+  private boolean jj_3_5() {
+    if (jj_3R_18()) {
+        return true;
+    }
+    if (jj_scan_token(81)) {
+        return true;
+    }
@@ -2719,2 +3057,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_78() {
-    if (jj_3R_15()) return true;
+  private boolean jj_3R_78() {
+    if (jj_3R_15()) {
+        return true;
+    }
@@ -2723 +3063,3 @@ specified to disambiguate the grammar:
-    if (jj_3R_85()) jj_scanpos = xsp;
+    if (jj_3R_85()) {
+        jj_scanpos = xsp;
+    }
@@ -2727,3 +3069,7 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_69() {
-    if (jj_scan_token(VARIABLE)) return true;
-    if (jj_3R_78()) return true;
+  private boolean jj_3R_69() {
+    if (jj_scan_token(VARIABLE)) {
+        return true;
+    }
+    if (jj_3R_78()) {
+        return true;
+    }
@@ -2733,2 +3079,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_57() {
-    if (jj_scan_token(FUNCTION_FORMAT_NUMBER)) return true;
+  private boolean jj_3R_57() {
+    if (jj_scan_token(FUNCTION_FORMAT_NUMBER)) {
+        return true;
+    }
@@ -2738,2 +3086,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_56() {
-    if (jj_scan_token(FUNCTION_KEY)) return true;
+  private boolean jj_3R_56() {
+    if (jj_scan_token(FUNCTION_KEY)) {
+        return true;
+    }
@@ -2743,2 +3093,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_55() {
-    if (jj_scan_token(FUNCTION_ROUND)) return true;
+  private boolean jj_3R_55() {
+    if (jj_scan_token(FUNCTION_ROUND)) {
+        return true;
+    }
@@ -2748,2 +3100,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_63() {
-    if (jj_3R_72()) return true;
+  private boolean jj_3R_63() {
+    if (jj_3R_72()) {
+        return true;
+    }
@@ -2753,2 +3107,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_54() {
-    if (jj_scan_token(FUNCTION_CEILING)) return true;
+  private boolean jj_3R_54() {
+    if (jj_scan_token(FUNCTION_CEILING)) {
+        return true;
+    }
@@ -2758,2 +3114,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_62() {
-    if (jj_3R_71()) return true;
+  private boolean jj_3R_62() {
+    if (jj_3R_71()) {
+        return true;
+    }
@@ -2763,2 +3121,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_53() {
-    if (jj_scan_token(FUNCTION_FLOOR)) return true;
+  private boolean jj_3R_53() {
+    if (jj_scan_token(FUNCTION_FLOOR)) {
+        return true;
+    }
@@ -2768,2 +3128,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_61() {
-    if (jj_scan_token(Number)) return true;
+  private boolean jj_3R_61() {
+    if (jj_scan_token(Number)) {
+        return true;
+    }
@@ -2773,2 +3135,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_52() {
-    if (jj_scan_token(FUNCTION_SUM)) return true;
+  private boolean jj_3R_52() {
+    if (jj_scan_token(FUNCTION_SUM)) {
+        return true;
+    }
@@ -2778,2 +3142,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_21() {
-    if (jj_scan_token(SLASHSLASH)) return true;
+  private boolean jj_3R_21() {
+    if (jj_scan_token(SLASHSLASH)) {
+        return true;
+    }
@@ -2783,2 +3149,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_60() {
-    if (jj_scan_token(Literal)) return true;
+  private boolean jj_3R_60() {
+    if (jj_scan_token(Literal)) {
+        return true;
+    }
@@ -2788,2 +3156,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_51() {
-    if (jj_scan_token(FUNCTION_NUMBER)) return true;
+  private boolean jj_3R_51() {
+    if (jj_scan_token(FUNCTION_NUMBER)) {
+        return true;
+    }
@@ -2793,4 +3163,10 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_59() {
-    if (jj_scan_token(81)) return true;
-    if (jj_3R_70()) return true;
-    if (jj_scan_token(82)) return true;
+  private boolean jj_3R_59() {
+    if (jj_scan_token(81)) {
+        return true;
+    }
+    if (jj_3R_70()) {
+        return true;
+    }
+    if (jj_scan_token(82)) {
+        return true;
+    }
@@ -2800,3 +3176,7 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_87() {
-    if (jj_scan_token(OR)) return true;
-    if (jj_3R_86()) return true;
+  private boolean jj_3R_87() {
+    if (jj_scan_token(OR)) {
+        return true;
+    }
+    if (jj_3R_86()) {
+        return true;
+    }
@@ -2806,2 +3186,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_50() {
-    if (jj_scan_token(FUNCTION_LANG)) return true;
+  private boolean jj_3R_50() {
+    if (jj_scan_token(FUNCTION_LANG)) {
+        return true;
+    }
@@ -2811,2 +3193,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_58() {
-    if (jj_3R_69()) return true;
+  private boolean jj_3R_58() {
+    if (jj_3R_69()) {
+        return true;
+    }
@@ -2816,2 +3200,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_81() {
-    if (jj_3R_89()) return true;
+  private boolean jj_3R_81() {
+    if (jj_3R_89()) {
+        return true;
+    }
@@ -2821,2 +3207,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_49() {
-    if (jj_scan_token(FUNCTION_NULL)) return true;
+  private boolean jj_3R_49() {
+    if (jj_scan_token(FUNCTION_NULL)) {
+        return true;
+    }
@@ -2826,2 +3214,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_48() {
-    if (jj_scan_token(FUNCTION_FALSE)) return true;
+  private boolean jj_3R_48() {
+    if (jj_scan_token(FUNCTION_FALSE)) {
+        return true;
+    }
@@ -2831,2 +3221,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_47() {
-    if (jj_scan_token(FUNCTION_TRUE)) return true;
+  private boolean jj_3R_47() {
+    if (jj_scan_token(FUNCTION_TRUE)) {
+        return true;
+    }
@@ -2836,2 +3228,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_46() {
-    if (jj_scan_token(FUNCTION_NOT)) return true;
+  private boolean jj_3R_46() {
+    if (jj_scan_token(FUNCTION_NOT)) {
+        return true;
+    }
@@ -2841 +3235 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_16() {
+  private boolean jj_3R_16() {
@@ -2846 +3240,6 @@ specified to disambiguate the grammar:
-    if (jj_3R_21()) return true;
+    if (jj_3R_21()) {
+        return true;
+    }
+    }
+    if (jj_3R_22()) {
+        return true;
@@ -2848 +3246,0 @@ specified to disambiguate the grammar:
-    if (jj_3R_22()) return true;
@@ -2852,2 +3250,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_149() {
-    if (jj_3R_16()) return true;
+  private boolean jj_3R_149() {
+    if (jj_3R_16()) {
+        return true;
+    }
@@ -2857,2 +3257,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_45() {
-    if (jj_scan_token(FUNCTION_BOOLEAN)) return true;
+  private boolean jj_3R_45() {
+    if (jj_scan_token(FUNCTION_BOOLEAN)) {
+        return true;
+    }
@@ -2862,2 +3264,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_44() {
-    if (jj_scan_token(FUNCTION_TRANSLATE)) return true;
+  private boolean jj_3R_44() {
+    if (jj_scan_token(FUNCTION_TRANSLATE)) {
+        return true;
+    }
@@ -2867 +3271 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_19() {
+  private boolean jj_3R_19() {
@@ -2880 +3284,3 @@ specified to disambiguate the grammar:
-    if (jj_3R_63()) return true;
+    if (jj_3R_63()) {
+        return true;
+    }
@@ -2889,2 +3295,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_43() {
-    if (jj_scan_token(FUNCTION_NORMALIZE_SPACE)) return true;
+  private boolean jj_3R_43() {
+    if (jj_scan_token(FUNCTION_NORMALIZE_SPACE)) {
+        return true;
+    }
@@ -2894,2 +3302,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_42() {
-    if (jj_scan_token(FUNCTION_STRING_LENGTH)) return true;
+  private boolean jj_3R_42() {
+    if (jj_scan_token(FUNCTION_STRING_LENGTH)) {
+        return true;
+    }
@@ -2899,2 +3309,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_41() {
-    if (jj_scan_token(FUNCTION_SUBSTRING)) return true;
+  private boolean jj_3R_41() {
+    if (jj_scan_token(FUNCTION_SUBSTRING)) {
+        return true;
+    }
@@ -2904,2 +3316,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_40() {
-    if (jj_scan_token(FUNCTION_SUBSTRING_AFTER)) return true;
+  private boolean jj_3R_40() {
+    if (jj_scan_token(FUNCTION_SUBSTRING_AFTER)) {
+        return true;
+    }
@@ -2909,2 +3323,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_79() {
-    if (jj_3R_86()) return true;
+  private boolean jj_3R_79() {
+    if (jj_3R_86()) {
+        return true;
+    }
@@ -2919,2 +3335,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_39() {
-    if (jj_scan_token(FUNCTION_SUBSTRING_BEFORE)) return true;
+  private boolean jj_3R_39() {
+    if (jj_scan_token(FUNCTION_SUBSTRING_BEFORE)) {
+        return true;
+    }
@@ -2924,2 +3342,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_38() {
-    if (jj_scan_token(FUNCTION_CONTAINS)) return true;
+  private boolean jj_3R_38() {
+    if (jj_scan_token(FUNCTION_CONTAINS)) {
+        return true;
+    }
@@ -2929,2 +3349,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_37() {
-    if (jj_scan_token(FUNCTION_ENDS_WITH)) return true;
+  private boolean jj_3R_37() {
+    if (jj_scan_token(FUNCTION_ENDS_WITH)) {
+        return true;
+    }
@@ -2934,2 +3356,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_36() {
-    if (jj_scan_token(FUNCTION_STARTS_WITH)) return true;
+  private boolean jj_3R_36() {
+    if (jj_scan_token(FUNCTION_STARTS_WITH)) {
+        return true;
+    }
@@ -2939,2 +3363,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_35() {
-    if (jj_scan_token(FUNCTION_CONCAT)) return true;
+  private boolean jj_3R_35() {
+    if (jj_scan_token(FUNCTION_CONCAT)) {
+        return true;
+    }
@@ -2944,2 +3370,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_34() {
-    if (jj_scan_token(FUNCTION_STRING)) return true;
+  private boolean jj_3R_34() {
+    if (jj_scan_token(FUNCTION_STRING)) {
+        return true;
+    }
@@ -2949,2 +3377,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_33() {
-    if (jj_scan_token(FUNCTION_NAME)) return true;
+  private boolean jj_3R_33() {
+    if (jj_scan_token(FUNCTION_NAME)) {
+        return true;
+    }
@@ -2954,2 +3384,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_32() {
-    if (jj_scan_token(FUNCTION_NAMESPACE_URI)) return true;
+  private boolean jj_3R_32() {
+    if (jj_scan_token(FUNCTION_NAMESPACE_URI)) {
+        return true;
+    }
@@ -2959,2 +3391,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_31() {
-    if (jj_scan_token(FUNCTION_LOCAL_NAME)) return true;
+  private boolean jj_3R_31() {
+    if (jj_scan_token(FUNCTION_LOCAL_NAME)) {
+        return true;
+    }
@@ -2964,2 +3398,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_70() {
-    if (jj_3R_79()) return true;
+  private boolean jj_3R_70() {
+    if (jj_3R_79()) {
+        return true;
+    }
@@ -2969,2 +3405,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_30() {
-    if (jj_scan_token(FUNCTION_ID)) return true;
+  private boolean jj_3R_30() {
+    if (jj_scan_token(FUNCTION_ID)) {
+        return true;
+    }
@@ -2974,2 +3412,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_29() {
-    if (jj_scan_token(FUNCTION_COUNT)) return true;
+  private boolean jj_3R_29() {
+    if (jj_scan_token(FUNCTION_COUNT)) {
+        return true;
+    }
@@ -2979,2 +3419,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_28() {
-    if (jj_scan_token(FUNCTION_POSITION)) return true;
+  private boolean jj_3R_28() {
+    if (jj_scan_token(FUNCTION_POSITION)) {
+        return true;
+    }
@@ -2984,2 +3426,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_27() {
-    if (jj_scan_token(FUNCTION_LAST)) return true;
+  private boolean jj_3R_27() {
+    if (jj_scan_token(FUNCTION_LAST)) {
+        return true;
+    }
@@ -2989,2 +3433,4 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_147() {
-    if (jj_3R_22()) return true;
+  private boolean jj_3R_147() {
+    if (jj_3R_22()) {
+        return true;
+    }
@@ -2999 +3445 @@ specified to disambiguate the grammar:
-  final private boolean jj_3R_18() {
+  private boolean jj_3R_18() {
@@ -3062 +3508,3 @@ specified to disambiguate the grammar:
-    if (jj_3R_57()) return true;
+    if (jj_3R_57()) {
+        return true;
+    }
@@ -3126 +3574 @@ specified to disambiguate the grammar:
-  public XPathParser(java.io.InputStream stream) {
+  public XPathParser(final java.io.InputStream stream) {
@@ -3132,2 +3580,6 @@ specified to disambiguate the grammar:
-    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
-    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
+    for (int i = 0; i < 39; i++) {
+        jj_la1[i] = -1;
+    }
+    for (int i = 0; i < jj_2_rtns.length; i++) {
+        jj_2_rtns[i] = new JJCalls();
+    }
@@ -3136 +3588 @@ specified to disambiguate the grammar:
-  public void ReInit(java.io.InputStream stream) {
+  public void ReInit(final java.io.InputStream stream) {
@@ -3142,2 +3594,6 @@ specified to disambiguate the grammar:
-    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
-    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
+    for (int i = 0; i < 39; i++) {
+        jj_la1[i] = -1;
+    }
+    for (int i = 0; i < jj_2_rtns.length; i++) {
+        jj_2_rtns[i] = new JJCalls();
+    }
@@ -3146 +3602 @@ specified to disambiguate the grammar:
-  public XPathParser(java.io.Reader stream) {
+  public XPathParser(final java.io.Reader stream) {
@@ -3152,2 +3608,6 @@ specified to disambiguate the grammar:
-    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
-    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
+    for (int i = 0; i < 39; i++) {
+        jj_la1[i] = -1;
+    }
+    for (int i = 0; i < jj_2_rtns.length; i++) {
+        jj_2_rtns[i] = new JJCalls();
+    }
@@ -3156 +3616 @@ specified to disambiguate the grammar:
-  public void ReInit(java.io.Reader stream) {
+  public void ReInit(final java.io.Reader stream) {
@@ -3162,2 +3622,6 @@ specified to disambiguate the grammar:
-    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
-    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
+    for (int i = 0; i < 39; i++) {
+        jj_la1[i] = -1;
+    }
+    for (int i = 0; i < jj_2_rtns.length; i++) {
+        jj_2_rtns[i] = new JJCalls();
+    }
@@ -3166 +3630 @@ specified to disambiguate the grammar:
-  public XPathParser(XPathParserTokenManager tm) {
+  public XPathParser(final XPathParserTokenManager tm) {
@@ -3171,2 +3635,6 @@ specified to disambiguate the grammar:
-    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
-    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
+    for (int i = 0; i < 39; i++) {
+        jj_la1[i] = -1;
+    }
+    for (int i = 0; i < jj_2_rtns.length; i++) {
+        jj_2_rtns[i] = new JJCalls();
+    }
@@ -3175 +3643 @@ specified to disambiguate the grammar:
-  public void ReInit(XPathParserTokenManager tm) {
+  public void ReInit(final XPathParserTokenManager tm) {
@@ -3180,2 +3648,6 @@ specified to disambiguate the grammar:
-    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
-    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
+    for (int i = 0; i < 39; i++) {
+        jj_la1[i] = -1;
+    }
+    for (int i = 0; i < jj_2_rtns.length; i++) {
+        jj_2_rtns[i] = new JJCalls();
+    }
@@ -3184,4 +3656,7 @@ specified to disambiguate the grammar:
-  final private Token jj_consume_token(int kind) throws ParseException {
-    Token oldToken = token;
-    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
-    else jj_nt = jj_nt.next = token_source.getNextToken();
+  private Token jj_consume_token(final int kind) throws ParseException {
+    final Token oldToken = token;
+    if ((token = jj_nt).next != null) {
+        jj_nt = jj_nt.next;
+    } else {
+        jj_nt = jj_nt.next = token_source.getNextToken();
+    }
@@ -3192,2 +3667,2 @@ specified to disambiguate the grammar:
-        for (int i = 0; i < jj_2_rtns.length; i++) {
-          JJCalls c = jj_2_rtns[i];
+        for (final JJCalls jj_2_rtn : jj_2_rtns) {
+          JJCalls c = jj_2_rtn;
@@ -3195 +3670,3 @@ specified to disambiguate the grammar:
-            if (c.gen < jj_gen) c.first = null;
+            if (c.gen < jj_gen) {
+                c.first = null;
+            }
@@ -3208 +3685,6 @@ specified to disambiguate the grammar:
-  static private final class LookaheadSuccess extends java.lang.Error { }
+  static private final class LookaheadSuccess extends Error {
+
+    /**
+     *
+     */
+    private static final long serialVersionUID = 1L; }
@@ -3210 +3692 @@ specified to disambiguate the grammar:
-  final private boolean jj_scan_token(int kind) {
+  private boolean jj_scan_token(final int kind) {
@@ -3224 +3706,9 @@ specified to disambiguate the grammar:
-      if (tok != null) jj_add_error_token(kind, i);
+      if (tok != null) {
+        jj_add_error_token(kind, i);
+    }
+    }
+    if (jj_scanpos.kind != kind) {
+        return true;
+    }
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) {
+        throw jj_ls;
@@ -3226,2 +3715,0 @@ specified to disambiguate the grammar:
-    if (jj_scanpos.kind != kind) return true;
-    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
@@ -3232,2 +3720,5 @@ specified to disambiguate the grammar:
-    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
-    else jj_nt = jj_nt.next = token_source.getNextToken();
+    if ((token = jj_nt).next != null) {
+        jj_nt = jj_nt.next;
+    } else {
+        jj_nt = jj_nt.next = token_source.getNextToken();
+    }
@@ -3238 +3729 @@ specified to disambiguate the grammar:
-  final public Token getToken(int index) {
+  final public Token getToken(final int index) {
@@ -3241,2 +3732,5 @@ specified to disambiguate the grammar:
-      if (t.next != null) t = t.next;
-      else t = t.next = token_source.getNextToken();
+      if (t.next != null) {
+        t = t.next;
+    } else {
+        t = t.next = token_source.getNextToken();
+    }
@@ -3247 +3741 @@ specified to disambiguate the grammar:
-  private java.util.Vector jj_expentries = new java.util.Vector();
+  private final java.util.Vector jj_expentries = new java.util.Vector();
@@ -3250 +3744 @@ specified to disambiguate the grammar:
-  private int[] jj_lasttokens = new int[100];
+  private final int[] jj_lasttokens = new int[100];
@@ -3253,2 +3747,4 @@ specified to disambiguate the grammar:
-  private void jj_add_error_token(int kind, int pos) {
-    if (pos >= 100) return;
+  private void jj_add_error_token(final int kind, final int pos) {
+    if (pos >= 100) {
+        return;
+    }
@@ -3263,2 +3759,2 @@ specified to disambiguate the grammar:
-      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
-        int[] oldentry = (int[])(e.nextElement());
+      for (final java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
+        final int[] oldentry = (int[])e.nextElement();
@@ -3273 +3769,3 @@ specified to disambiguate the grammar:
-          if (exists) break;
+          if (exists) {
+            break;
+        }
@@ -3276,2 +3774,6 @@ specified to disambiguate the grammar:
-      if (!exists) jj_expentries.addElement(jj_expentry);
-      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
+      if (!exists) {
+        jj_expentries.addElement(jj_expentry);
+    }
+      if (pos != 0) {
+        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
+    }
@@ -3283 +3785 @@ specified to disambiguate the grammar:
-    boolean[] la1tokens = new boolean[90];
+    final boolean[] la1tokens = new boolean[90];
@@ -3294 +3796 @@ specified to disambiguate the grammar:
-          if ((jj_la1_0[i] & (1<<j)) != 0) {
+          if ((jj_la1_0[i] & 1<<j) != 0) {
@@ -3297 +3799 @@ specified to disambiguate the grammar:
-          if ((jj_la1_1[i] & (1<<j)) != 0) {
+          if ((jj_la1_1[i] & 1<<j) != 0) {
@@ -3300 +3802 @@ specified to disambiguate the grammar:
-          if ((jj_la1_2[i] & (1<<j)) != 0) {
+          if ((jj_la1_2[i] & 1<<j) != 0) {
@@ -3316 +3818 @@ specified to disambiguate the grammar:
-    int[][] exptokseq = new int[jj_expentries.size()][];
+    final int[][] exptokseq = new int[jj_expentries.size()][];
@@ -3329 +3831 @@ specified to disambiguate the grammar:
-  final private void jj_rescan_token() {
+  private void jj_rescan_token() {
@@ -3351 +3853 @@ specified to disambiguate the grammar:
-  final private void jj_save(int index, int xla) {
+  private void jj_save(final int index, final int xla) {
diff --git a/src/main/java/org/apache/commons/jxpath/ri/parser/XPathParserTokenManager.java b/src/main/java/org/apache/commons/jxpath/ri/parser/XPathParserTokenManager.java
index da2a1031..2a1a74c7 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/parser/XPathParserTokenManager.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/parser/XPathParserTokenManager.java
@@ -20,2 +19,0 @@ package org.apache.commons.jxpath.ri.parser;
-import org.apache.commons.jxpath.ri.Compiler;
-import java.util.ArrayList;
@@ -26,2 +24,2 @@ public class XPathParserTokenManager implements XPathParserConstants
-  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
-private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
+  public  void setDebugStream(final java.io.PrintStream ds) { debugStream = ds; }
+private int jjStopStringLiteralDfa_0(final int pos, final long active0, final long active1)
@@ -32 +30 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
-         if ((active1 & 0x180000L) != 0L)
+         if ((active1 & 0x180000L) != 0L) {
@@ -33,0 +32 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
+        }
@@ -47 +46 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
-         if ((active0 & 0x8000008000000L) != 0L)
+         if ((active0 & 0x8000008000000L) != 0L) {
@@ -48,0 +48 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
+        }
@@ -51 +51 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
-         if ((active0 & 0x10000070000000L) != 0L || (active1 & 0x410L) != 0L)
+         if ((active0 & 0x10000070000000L) != 0L || (active1 & 0x410L) != 0L) {
@@ -52,0 +53 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
+        }
@@ -61 +62 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
-         if ((active0 & 0xc1010180000000L) != 0L || (active1 & 0x1a0L) != 0L)
+         if ((active0 & 0xc1010180000000L) != 0L || (active1 & 0x1a0L) != 0L) {
@@ -62,0 +64 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
+        }
@@ -80 +82 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
-         if ((active0 & 0x4000000000000L) != 0L || (active1 & 0x2840L) != 0L)
+         if ((active0 & 0x4000000000000L) != 0L || (active1 & 0x2840L) != 0L) {
@@ -81,0 +84 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
+        }
@@ -93 +96 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
-         if ((active0 & 0x300000000000000L) != 0L || (active1 & 0x201L) != 0L)
+         if ((active0 & 0x300000000000000L) != 0L || (active1 & 0x201L) != 0L) {
@@ -94,0 +98 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
+        }
@@ -124 +128 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
-         if ((active0 & 0x200000000L) != 0L || (active1 & 0x1008L) != 0L)
+         if ((active0 & 0x200000000L) != 0L || (active1 & 0x1008L) != 0L) {
@@ -125,0 +130 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
+        }
@@ -152 +157 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
-         if ((active0 & 0x1002000000000000L) != 0L)
+         if ((active0 & 0x1002000000000000L) != 0L) {
@@ -153,0 +159 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
+        }
@@ -171 +177 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
-         if ((active0 & 0xe800000000000000L) != 0L || (active1 & 0x4L) != 0L)
+         if ((active0 & 0xe800000000000000L) != 0L || (active1 & 0x4L) != 0L) {
@@ -172,0 +179 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
+        }
@@ -193 +200 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
-         if ((active0 & 0x20000000000000L) != 0L)
+         if ((active0 & 0x20000000000000L) != 0L) {
@@ -194,0 +202 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
+        }
@@ -221 +229 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
-         if ((active0 & 0x400000000000000L) != 0L)
+         if ((active0 & 0x400000000000000L) != 0L) {
@@ -222,0 +231 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
+        }
@@ -272 +281 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
-         if ((active0 & 0x40000000000000L) != 0L || (active1 & 0x4001L) != 0L)
+         if ((active0 & 0x40000000000000L) != 0L || (active1 & 0x4001L) != 0L) {
@@ -273,0 +283 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
+        }
@@ -284 +294 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
-         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x2L) != 0L)
+         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x2L) != 0L) {
@@ -285,0 +296 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
+        }
@@ -294 +305 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
-         if ((active0 & 0x2000000000000000L) != 0L)
+         if ((active0 & 0x2000000000000000L) != 0L) {
@@ -295,0 +307 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
+        }
@@ -401 +413 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
-private final int jjStartNfa_0(int pos, long active0, long active1)
+private int jjStartNfa_0(final int pos, final long active0, final long active1)
@@ -405 +417 @@ private final int jjStartNfa_0(int pos, long active0, long active1)
-private final int jjStopAtPos(int pos, int kind)
+private int jjStopAtPos(final int pos, final int kind)
@@ -411 +423 @@ private final int jjStopAtPos(int pos, int kind)
-private final int jjStartNfaWithStates_0(int pos, int kind, int state)
+private int jjStartNfaWithStates_0(final int pos, final int kind, final int state)
@@ -416 +428 @@ private final int jjStartNfaWithStates_0(int pos, int kind, int state)
-   catch(java.io.IOException e) { return pos + 1; }
+   catch(final java.io.IOException e) { return pos + 1; }
@@ -419 +431 @@ private final int jjStartNfaWithStates_0(int pos, int kind, int state)
-private final int jjMoveStringLiteralDfa0_0()
+private int jjMoveStringLiteralDfa0_0()
@@ -499 +511 @@ private final int jjMoveStringLiteralDfa0_0()
-private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
+private int jjMoveStringLiteralDfa1_0(final long active0, final long active1)
@@ -502 +514 @@ private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
-   catch(java.io.IOException e) {
+   catch(final java.io.IOException e) {
@@ -509 +521 @@ private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
-         if ((active1 & 0x100000L) != 0L)
+         if ((active1 & 0x100000L) != 0L) {
@@ -510,0 +523 @@ private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
+        }
@@ -513 +526 @@ private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
-         if ((active0 & 0x80L) != 0L)
+         if ((active0 & 0x80L) != 0L) {
@@ -514,0 +528 @@ private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
+        }
@@ -517 +531 @@ private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
-         if ((active0 & 0x1000L) != 0L)
+         if ((active0 & 0x1000L) != 0L) {
@@ -519 +533 @@ private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
-         else if ((active0 & 0x4000L) != 0L)
+        } else if ((active0 & 0x4000L) != 0L) {
@@ -521 +535 @@ private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
-         else if ((active0 & 0x10000L) != 0L)
+        } else if ((active0 & 0x10000L) != 0L) {
@@ -522,0 +537 @@ private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
+        }
@@ -527 +542 @@ private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
-         if ((active0 & 0x8000000000000L) != 0L)
+         if ((active0 & 0x8000000000000L) != 0L) {
@@ -528,0 +544 @@ private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
+        }
@@ -543 +559 @@ private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
-         if ((active0 & 0x8000000L) != 0L)
+         if ((active0 & 0x8000000L) != 0L) {
@@ -544,0 +561 @@ private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
+        }
@@ -555 +572 @@ private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
-private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
+private int jjMoveStringLiteralDfa2_0(final long old0, long active0, final long old1, long active1)
@@ -557,2 +574,3 @@ private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1,
-   if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(0, old0, old1); 
+   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
+    return jjStartNfa_0(0, old0, old1);
+}
@@ -560 +578 @@ private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1,
-   catch(java.io.IOException e) {
+   catch(final java.io.IOException e) {
@@ -573 +591 @@ private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1,
-         if ((active0 & 0x10000000L) != 0L)
+         if ((active0 & 0x10000000L) != 0L) {
@@ -575 +593 @@ private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1,
-         else if ((active0 & 0x20000000L) != 0L)
+        } else if ((active0 & 0x20000000L) != 0L) {
@@ -576,0 +595 @@ private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1,
+        }
@@ -585 +604 @@ private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1,
-         if ((active1 & 0x400L) != 0L)
+         if ((active1 & 0x400L) != 0L) {
@@ -586,0 +606 @@ private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1,
+        }
@@ -597 +617 @@ private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1,
-         if ((active1 & 0x10L) != 0L)
+         if ((active1 & 0x10L) != 0L) {
@@ -598,0 +619 @@ private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1,
+        }
@@ -603 +624 @@ private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1,
-         if ((active0 & 0x40000000L) != 0L)
+         if ((active0 & 0x40000000L) != 0L) {
@@ -604,0 +626 @@ private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1,
+        }
@@ -609 +631 @@ private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1,
-         if ((active0 & 0x10000000000000L) != 0L)
+         if ((active0 & 0x10000000000000L) != 0L) {
@@ -610,0 +633 @@ private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1,
+        }
@@ -617 +640 @@ private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1,
-private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
+private int jjMoveStringLiteralDfa3_0(final long old0, long active0, final long old1, long active1)
@@ -619,2 +642,3 @@ private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1,
-   if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(1, old0, old1); 
+   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
+    return jjStartNfa_0(1, old0, old1);
+}
@@ -622 +646 @@ private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1,
-   catch(java.io.IOException e) {
+   catch(final java.io.IOException e) {
@@ -635 +659 @@ private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1,
-         if ((active0 & 0x80000000L) != 0L)
+         if ((active0 & 0x80000000L) != 0L) {
@@ -637 +661 @@ private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1,
-         else if ((active0 & 0x80000000000000L) != 0L)
+        } else if ((active0 & 0x80000000000000L) != 0L)
@@ -642 +666 @@ private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1,
-         else if ((active1 & 0x20L) != 0L)
+         else if ((active1 & 0x20L) != 0L) {
@@ -643,0 +668 @@ private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1,
+        }
@@ -648 +673 @@ private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1,
-         if ((active1 & 0x100L) != 0L)
+         if ((active1 & 0x100L) != 0L) {
@@ -649,0 +675 @@ private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1,
+        }
@@ -654 +680 @@ private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1,
-         if ((active1 & 0x80L) != 0L)
+         if ((active1 & 0x80L) != 0L) {
@@ -655,0 +682 @@ private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1,
+        }
@@ -668 +695 @@ private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1,
-         if ((active0 & 0x100000000L) != 0L)
+         if ((active0 & 0x100000000L) != 0L) {
@@ -670 +697 @@ private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1,
-         else if ((active0 & 0x1000000000000L) != 0L)
+        } else if ((active0 & 0x1000000000000L) != 0L) {
@@ -671,0 +699 @@ private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1,
+        }
@@ -678 +706 @@ private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1,
-private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
+private int jjMoveStringLiteralDfa4_0(final long old0, long active0, final long old1, long active1)
@@ -680,2 +708,3 @@ private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1,
-   if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(2, old0, old1); 
+   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
+    return jjStartNfa_0(2, old0, old1);
+}
@@ -683 +712 @@ private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1,
-   catch(java.io.IOException e) {
+   catch(final java.io.IOException e) {
@@ -696 +725 @@ private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1,
-         if ((active1 & 0x2000L) != 0L)
+         if ((active1 & 0x2000L) != 0L) {
@@ -697,0 +727 @@ private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1,
+        }
@@ -700 +730 @@ private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1,
-         if ((active1 & 0x40L) != 0L)
+         if ((active1 & 0x40L) != 0L) {
@@ -701,0 +732 @@ private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1,
+        }
@@ -712 +743 @@ private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1,
-         if ((active1 & 0x800L) != 0L)
+         if ((active1 & 0x800L) != 0L) {
@@ -713,0 +745 @@ private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1,
+        }
@@ -718 +750 @@ private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1,
-         if ((active0 & 0x4000000000000L) != 0L)
+         if ((active0 & 0x4000000000000L) != 0L) {
@@ -719,0 +752 @@ private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1,
+        }
@@ -726 +759 @@ private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1,
-private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
+private int jjMoveStringLiteralDfa5_0(final long old0, long active0, final long old1, long active1)
@@ -728,2 +761,3 @@ private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1,
-   if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(3, old0, old1); 
+   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
+    return jjStartNfa_0(3, old0, old1);
+}
@@ -731 +765 @@ private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1,
-   catch(java.io.IOException e) {
+   catch(final java.io.IOException e) {
@@ -740 +774 @@ private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1,
-         if ((active0 & 0x800000000L) != 0L)
+         if ((active0 & 0x800000000L) != 0L) {
@@ -741,0 +776 @@ private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1,
+        }
@@ -765 +800 @@ private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1,
-         if ((active1 & 0x200L) != 0L)
+         if ((active1 & 0x200L) != 0L) {
@@ -766,0 +802 @@ private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1,
+        }
@@ -771 +807 @@ private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1,
-         if ((active0 & 0x200000000000000L) != 0L)
+         if ((active0 & 0x200000000000000L) != 0L) {
@@ -772,0 +809 @@ private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1,
+        }
@@ -781 +818 @@ private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1,
-private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
+private int jjMoveStringLiteralDfa6_0(final long old0, long active0, final long old1, long active1)
@@ -783,2 +820,3 @@ private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1,
-   if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(4, old0, old1); 
+   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
+    return jjStartNfa_0(4, old0, old1);
+}
@@ -786 +824 @@ private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1,
-   catch(java.io.IOException e) {
+   catch(final java.io.IOException e) {
@@ -795 +833 @@ private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1,
-         if ((active0 & 0x1000000000L) != 0L)
+         if ((active0 & 0x1000000000L) != 0L) {
@@ -796,0 +835 @@ private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1,
+        }
@@ -803 +842 @@ private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1,
-         if ((active1 & 0x1000L) != 0L)
+         if ((active1 & 0x1000L) != 0L) {
@@ -804,0 +844 @@ private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1,
+        }
@@ -809 +849 @@ private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1,
-         if ((active1 & 0x8L) != 0L)
+         if ((active1 & 0x8L) != 0L) {
@@ -810,0 +851 @@ private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1,
+        }
@@ -817 +858 @@ private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1,
-         if ((active0 & 0x200000000L) != 0L)
+         if ((active0 & 0x200000000L) != 0L) {
@@ -818,0 +860 @@ private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1,
+        }
@@ -827 +869 @@ private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1,
-private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
+private int jjMoveStringLiteralDfa7_0(final long old0, long active0, final long old1, long active1)
@@ -829,2 +871,3 @@ private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1,
-   if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(5, old0, old1); 
+   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
+    return jjStartNfa_0(5, old0, old1);
+}
@@ -832 +875 @@ private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1,
-   catch(java.io.IOException e) {
+   catch(final java.io.IOException e) {
@@ -839 +882 @@ private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1,
-         if ((active0 & 0x2000000000L) != 0L)
+         if ((active0 & 0x2000000000L) != 0L) {
@@ -840,0 +884 @@ private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1,
+        }
@@ -851 +895 @@ private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1,
-         if ((active0 & 0x2000000000000L) != 0L)
+         if ((active0 & 0x2000000000000L) != 0L) {
@@ -852,0 +897 @@ private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1,
+        }
@@ -857 +902 @@ private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1,
-         if ((active0 & 0x1000000000000000L) != 0L)
+         if ((active0 & 0x1000000000000000L) != 0L) {
@@ -858,0 +904 @@ private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1,
+        }
@@ -871 +917 @@ private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1,
-private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
+private int jjMoveStringLiteralDfa8_0(final long old0, long active0, final long old1, long active1)
@@ -873,2 +919,3 @@ private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1,
-   if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(6, old0, old1); 
+   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
+    return jjStartNfa_0(6, old0, old1);
+}
@@ -876 +923 @@ private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1,
-   catch(java.io.IOException e) {
+   catch(final java.io.IOException e) {
@@ -887 +934 @@ private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1,
-         if ((active1 & 0x4L) != 0L)
+         if ((active1 & 0x4L) != 0L) {
@@ -888,0 +936 @@ private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1,
+        }
@@ -898 +946 @@ private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1,
-         if ((active0 & 0x800000000000000L) != 0L)
+         if ((active0 & 0x800000000000000L) != 0L) {
@@ -899,0 +948 @@ private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1,
+        }
@@ -914 +963 @@ private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1,
-private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
+private int jjMoveStringLiteralDfa9_0(final long old0, long active0, final long old1, long active1)
@@ -916,2 +965,3 @@ private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1,
-   if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(7, old0, old1); 
+   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
+    return jjStartNfa_0(7, old0, old1);
+}
@@ -919 +969 @@ private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1,
-   catch(java.io.IOException e) {
+   catch(final java.io.IOException e) {
@@ -928 +978 @@ private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1,
-         if ((active0 & 0x4000000000L) != 0L)
+         if ((active0 & 0x4000000000L) != 0L) {
@@ -929,0 +980 @@ private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1,
+        }
@@ -932 +983 @@ private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1,
-         if ((active0 & 0x20000000000000L) != 0L)
+         if ((active0 & 0x20000000000000L) != 0L) {
@@ -933,0 +985 @@ private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1,
+        }
@@ -950 +1002 @@ private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1,
-private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
+private int jjMoveStringLiteralDfa10_0(final long old0, long active0, final long old1, long active1)
@@ -952,2 +1004,3 @@ private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1,
-   if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(8, old0, old1); 
+   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
+    return jjStartNfa_0(8, old0, old1);
+}
@@ -955 +1008 @@ private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1,
-   catch(java.io.IOException e) {
+   catch(final java.io.IOException e) {
@@ -964 +1017 @@ private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1,
-         if ((active0 & 0x8000000000L) != 0L)
+         if ((active0 & 0x8000000000L) != 0L) {
@@ -966 +1019 @@ private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1,
-         else if ((active0 & 0x10000000000L) != 0L)
+        } else if ((active0 & 0x10000000000L) != 0L) {
@@ -968 +1021 @@ private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1,
-         else if ((active0 & 0x20000000000L) != 0L)
+        } else if ((active0 & 0x20000000000L) != 0L) {
@@ -970 +1023 @@ private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1,
-         else if ((active0 & 0x40000000000L) != 0L)
+        } else if ((active0 & 0x40000000000L) != 0L) {
@@ -971,0 +1025 @@ private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1,
+        }
@@ -980 +1034 @@ private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1,
-         if ((active0 & 0x400000000000000L) != 0L)
+         if ((active0 & 0x400000000000000L) != 0L) {
@@ -981,0 +1036 @@ private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1,
+        }
@@ -994 +1049 @@ private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1,
-private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
+private int jjMoveStringLiteralDfa11_0(final long old0, long active0, final long old1, long active1)
@@ -996,2 +1051,3 @@ private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1,
-   if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(9, old0, old1); 
+   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
+    return jjStartNfa_0(9, old0, old1);
+}
@@ -999 +1055 @@ private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1,
-   catch(java.io.IOException e) {
+   catch(final java.io.IOException e) {
@@ -1008 +1064 @@ private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1,
-         if ((active0 & 0x80000000000L) != 0L)
+         if ((active0 & 0x80000000000L) != 0L) {
@@ -1009,0 +1066 @@ private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1,
+        }
@@ -1030 +1087 @@ private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1,
-private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
+private int jjMoveStringLiteralDfa12_0(final long old0, long active0, final long old1, long active1)
@@ -1032,2 +1089,3 @@ private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1,
-   if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(10, old0, old1); 
+   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
+    return jjStartNfa_0(10, old0, old1);
+}
@@ -1035 +1093 @@ private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1,
-   catch(java.io.IOException e) {
+   catch(final java.io.IOException e) {
@@ -1048 +1106 @@ private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1,
-         if ((active1 & 0x1L) != 0L)
+         if ((active1 & 0x1L) != 0L) {
@@ -1049,0 +1108 @@ private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1,
+        }
@@ -1052 +1111 @@ private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1,
-         if ((active0 & 0x40000000000000L) != 0L)
+         if ((active0 & 0x40000000000000L) != 0L) {
@@ -1053,0 +1113 @@ private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1,
+        }
@@ -1058 +1118 @@ private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1,
-         if ((active1 & 0x4000L) != 0L)
+         if ((active1 & 0x4000L) != 0L) {
@@ -1059,0 +1120 @@ private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1,
+        }
@@ -1070 +1131 @@ private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1,
-private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
+private int jjMoveStringLiteralDfa13_0(final long old0, long active0, final long old1, long active1)
@@ -1072,2 +1133,3 @@ private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1,
-   if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(11, old0, old1); 
+   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
+    return jjStartNfa_0(11, old0, old1);
+}
@@ -1075 +1137 @@ private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1,
-   catch(java.io.IOException e) {
+   catch(final java.io.IOException e) {
@@ -1098 +1160 @@ private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1,
-private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
+private int jjMoveStringLiteralDfa14_0(final long old0, long active0, final long old1, long active1)
@@ -1100,2 +1162,3 @@ private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1,
-   if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(12, old0, old1); 
+   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
+    return jjStartNfa_0(12, old0, old1);
+}
@@ -1103 +1166 @@ private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1,
-   catch(java.io.IOException e) {
+   catch(final java.io.IOException e) {
@@ -1110 +1173 @@ private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1,
-         if ((active1 & 0x2L) != 0L)
+         if ((active1 & 0x2L) != 0L) {
@@ -1111,0 +1175 @@ private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1,
+        }
@@ -1118 +1182 @@ private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1,
-         if ((active0 & 0x4000000000000000L) != 0L)
+         if ((active0 & 0x4000000000000000L) != 0L) {
@@ -1119,0 +1184 @@ private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1,
+        }
@@ -1130 +1195 @@ private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1,
-private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
+private int jjMoveStringLiteralDfa15_0(final long old0, long active0, final long old1, long active1)
@@ -1132,2 +1197,3 @@ private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1,
-   if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(13, old0, old1); 
+   if (((active0 &= old0) | (active1 &= old1)) == 0L) {
+    return jjStartNfa_0(13, old0, old1);
+}
@@ -1135 +1201 @@ private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1,
-   catch(java.io.IOException e) {
+   catch(final java.io.IOException e) {
@@ -1142 +1208 @@ private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1,
-         if ((active0 & 0x2000000000000000L) != 0L)
+         if ((active0 & 0x2000000000000000L) != 0L) {
@@ -1143,0 +1210 @@ private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1,
+        }
@@ -1156 +1223 @@ private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1,
-private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
+private int jjMoveStringLiteralDfa16_0(final long old0, long active0)
@@ -1158,2 +1225,3 @@ private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_0(14, old0, 0L);
+   if ((active0 &= old0) == 0L) {
+    return jjStartNfa_0(14, old0, 0L);
+}
@@ -1161 +1229 @@ private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
-   catch(java.io.IOException e) {
+   catch(final java.io.IOException e) {
@@ -1180 +1248 @@ private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
-private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
+private int jjMoveStringLiteralDfa17_0(final long old0, long active0)
@@ -1182,2 +1250,3 @@ private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_0(15, old0, 0L);
+   if ((active0 &= old0) == 0L) {
+    return jjStartNfa_0(15, old0, 0L);
+}
@@ -1185 +1254 @@ private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
-   catch(java.io.IOException e) {
+   catch(final java.io.IOException e) {
@@ -1192 +1261 @@ private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
-         if ((active0 & 0x100000000000L) != 0L)
+         if ((active0 & 0x100000000000L) != 0L) {
@@ -1193,0 +1263 @@ private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
+        }
@@ -1204 +1274 @@ private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
-private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
+private int jjMoveStringLiteralDfa18_0(final long old0, long active0)
@@ -1206,2 +1276,3 @@ private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_0(16, old0, 0L);
+   if ((active0 &= old0) == 0L) {
+    return jjStartNfa_0(16, old0, 0L);
+}
@@ -1209 +1280 @@ private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
-   catch(java.io.IOException e) {
+   catch(final java.io.IOException e) {
@@ -1216 +1287 @@ private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
-         if ((active0 & 0x200000000000L) != 0L)
+         if ((active0 & 0x200000000000L) != 0L) {
@@ -1218 +1289 @@ private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
-         else if ((active0 & 0x400000000000L) != 0L)
+        } else if ((active0 & 0x400000000000L) != 0L) {
@@ -1219,0 +1291 @@ private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
+        }
@@ -1228 +1300 @@ private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
-private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
+private int jjMoveStringLiteralDfa19_0(final long old0, long active0)
@@ -1230,2 +1302,3 @@ private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_0(17, old0, 0L);
+   if ((active0 &= old0) == 0L) {
+    return jjStartNfa_0(17, old0, 0L);
+}
@@ -1233 +1306 @@ private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
-   catch(java.io.IOException e) {
+   catch(final java.io.IOException e) {
@@ -1240 +1313 @@ private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
-         if ((active0 & 0x800000000000L) != 0L)
+         if ((active0 & 0x800000000000L) != 0L) {
@@ -1241,0 +1315 @@ private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
+        }
@@ -1250 +1324 @@ private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
-private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
+private int jjMoveStringLiteralDfa20_0(final long old0, long active0)
@@ -1252,2 +1326,3 @@ private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_0(18, old0, 0L);
+   if ((active0 &= old0) == 0L) {
+    return jjStartNfa_0(18, old0, 0L);
+}
@@ -1255 +1330 @@ private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
-   catch(java.io.IOException e) {
+   catch(final java.io.IOException e) {
@@ -1268 +1343 @@ private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
-private final int jjMoveStringLiteralDfa21_0(long old0, long active0)
+private int jjMoveStringLiteralDfa21_0(final long old0, long active0)
@@ -1270,2 +1345,3 @@ private final int jjMoveStringLiteralDfa21_0(long old0, long active0)
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_0(19, old0, 0L);
+   if ((active0 &= old0) == 0L) {
+    return jjStartNfa_0(19, old0, 0L);
+}
@@ -1273 +1349 @@ private final int jjMoveStringLiteralDfa21_0(long old0, long active0)
-   catch(java.io.IOException e) {
+   catch(final java.io.IOException e) {
@@ -1280 +1356 @@ private final int jjMoveStringLiteralDfa21_0(long old0, long active0)
-         if ((active0 & 0x400000000L) != 0L)
+         if ((active0 & 0x400000000L) != 0L) {
@@ -1281,0 +1358 @@ private final int jjMoveStringLiteralDfa21_0(long old0, long active0)
+        }
@@ -1288 +1365 @@ private final int jjMoveStringLiteralDfa21_0(long old0, long active0)
-private final void jjCheckNAdd(int state)
+private void jjCheckNAdd(final int state)
@@ -1296 +1373 @@ private final void jjCheckNAdd(int state)
-private final void jjAddStates(int start, int end)
+private void jjAddStates(int start, final int end)
@@ -1302 +1379 @@ private final void jjAddStates(int start, int end)
-private final void jjCheckNAddTwoStates(int state1, int state2)
+private void jjCheckNAddTwoStates(final int state1, final int state2)
@@ -1307 +1384 @@ private final void jjCheckNAddTwoStates(int state1, int state2)
-private final void jjCheckNAddStates(int start, int end)
+private void jjCheckNAddStates(int start, final int end)
@@ -1313 +1390 @@ private final void jjCheckNAddStates(int start, int end)
-private final void jjCheckNAddStates(int start)
+private void jjCheckNAddStates(final int start)
@@ -1441 +1518 @@ static final long[] jjbitVec41 = {
-private final int jjMoveNfa_0(int startState, int curPos)
+private int jjMoveNfa_0(final int startState, int curPos)
@@ -1443 +1520 @@ private final int jjMoveNfa_0(int startState, int curPos)
-   int[] nextStates;
+   final int[] nextStates;
@@ -1448 +1525,2 @@ private final int jjMoveNfa_0(int startState, int curPos)
-   int j, kind = 0x7fffffff;
+   final int j;
+int kind = 0x7fffffff;
@@ -1451,2 +1529,3 @@ private final int jjMoveNfa_0(int startState, int curPos)
-      if (++jjround == 0x7fffffff)
-         ReInitRounds();
+      if (++jjround == 0x7fffffff) {
+        ReInitRounds();
+    }
@@ -1455 +1534 @@ private final int jjMoveNfa_0(int startState, int curPos)
-         long l = 1L << curChar;
+         final long l = 1L << curChar;
@@ -1463 +1542 @@ private final int jjMoveNfa_0(int startState, int curPos)
-                     if (kind > 20)
+                     if (kind > 20) {
@@ -1464,0 +1544 @@ private final int jjMoveNfa_0(int startState, int curPos)
+                    }
@@ -1467,6 +1547,7 @@ private final int jjMoveNfa_0(int startState, int curPos)
-                  else if (curChar == 46)
-                     jjCheckNAdd(10);
-                  else if (curChar == 39)
-                     jjCheckNAddTwoStates(4, 5);
-                  else if (curChar == 34)
-                     jjCheckNAddTwoStates(1, 2);
+                  else if (curChar == 46) {
+                    jjCheckNAdd(10);
+                } else if (curChar == 39) {
+                    jjCheckNAddTwoStates(4, 5);
+                } else if (curChar == 34) {
+                    jjCheckNAddTwoStates(1, 2);
+                }
@@ -1475,2 +1556,3 @@ private final int jjMoveNfa_0(int startState, int curPos)
-                  if ((0xfffffffbffffffffL & l) != 0L)
-                     jjCheckNAddTwoStates(1, 2);
+                  if ((0xfffffffbffffffffL & l) != 0L) {
+                    jjCheckNAddTwoStates(1, 2);
+                }
@@ -1479,2 +1561,3 @@ private final int jjMoveNfa_0(int startState, int curPos)
-                  if (curChar == 34 && kind > 18)
-                     kind = 18;
+                  if (curChar == 34 && kind > 18) {
+                    kind = 18;
+                }
@@ -1483,2 +1566,3 @@ private final int jjMoveNfa_0(int startState, int curPos)
-                  if (curChar == 39)
-                     jjCheckNAddTwoStates(4, 5);
+                  if (curChar == 39) {
+                    jjCheckNAddTwoStates(4, 5);
+                }
@@ -1487,2 +1571,3 @@ private final int jjMoveNfa_0(int startState, int curPos)
-                  if ((0xffffff7fffffffffL & l) != 0L)
-                     jjCheckNAddTwoStates(4, 5);
+                  if ((0xffffff7fffffffffL & l) != 0L) {
+                    jjCheckNAddTwoStates(4, 5);
+                }
@@ -1491,2 +1576,3 @@ private final int jjMoveNfa_0(int startState, int curPos)
-                  if (curChar == 39 && kind > 18)
-                     kind = 18;
+                  if (curChar == 39 && kind > 18) {
+                    kind = 18;
+                }
@@ -1495,4 +1581,6 @@ private final int jjMoveNfa_0(int startState, int curPos)
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 20)
-                     kind = 20;
+                  if ((0x3ff000000000000L & l) == 0L) {
+                    break;
+                }
+                  if (kind > 20) {
+                    kind = 20;
+                }
@@ -1502,4 +1590,6 @@ private final int jjMoveNfa_0(int startState, int curPos)
-                  if (curChar != 46)
-                     break;
-                  if (kind > 20)
-                     kind = 20;
+                  if (curChar != 46) {
+                    break;
+                }
+                  if (kind > 20) {
+                    kind = 20;
+                }
@@ -1509,4 +1599,6 @@ private final int jjMoveNfa_0(int startState, int curPos)
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 20)
-                     kind = 20;
+                  if ((0x3ff000000000000L & l) == 0L) {
+                    break;
+                }
+                  if (kind > 20) {
+                    kind = 20;
+                }
@@ -1516,2 +1608,3 @@ private final int jjMoveNfa_0(int startState, int curPos)
-                  if (curChar == 46)
-                     jjCheckNAdd(10);
+                  if (curChar == 46) {
+                    jjCheckNAdd(10);
+                }
@@ -1520,4 +1613,6 @@ private final int jjMoveNfa_0(int startState, int curPos)
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 20)
-                     kind = 20;
+                  if ((0x3ff000000000000L & l) == 0L) {
+                    break;
+                }
+                  if (kind > 20) {
+                    kind = 20;
+                }
@@ -1527,4 +1622,6 @@ private final int jjMoveNfa_0(int startState, int curPos)
-                  if ((0x3ff600000000000L & l) == 0L)
-                     break;
-                  if (kind > 79)
-                     kind = 79;
+                  if ((0x3ff600000000000L & l) == 0L) {
+                    break;
+                }
+                  if (kind > 79) {
+                    kind = 79;
+                }
@@ -1539 +1636 @@ private final int jjMoveNfa_0(int startState, int curPos)
-         long l = 1L << (curChar & 077);
+         final long l = 1L << (curChar & 077);
@@ -1546,4 +1643,6 @@ private final int jjMoveNfa_0(int startState, int curPos)
-                  if ((0x7fffffe87fffffeL & l) == 0L)
-                     break;
-                  if (kind > 79)
-                     kind = 79;
+                  if ((0x7fffffe87fffffeL & l) == 0L) {
+                    break;
+                }
+                  if (kind > 79) {
+                    kind = 79;
+                }
@@ -1564,5 +1663,5 @@ private final int jjMoveNfa_0(int startState, int curPos)
-         int hiByte = (int)(curChar >> 8);
-         int i1 = hiByte >> 6;
-         long l1 = 1L << (hiByte & 077);
-         int i2 = (curChar & 0xff) >> 6;
-         long l2 = 1L << (curChar & 077);
+         final int hiByte = curChar >> 8;
+         final int i1 = hiByte >> 6;
+         final long l1 = 1L << (hiByte & 077);
+         final int i2 = (curChar & 0xff) >> 6;
+         final long l2 = 1L << (curChar & 077);
@@ -1574,4 +1673,6 @@ private final int jjMoveNfa_0(int startState, int curPos)
-                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
-                     break;
-                  if (kind > 79)
-                     kind = 79;
+                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2)) {
+                    break;
+                }
+                  if (kind > 79) {
+                    kind = 79;
+                }
@@ -1581,2 +1682,3 @@ private final int jjMoveNfa_0(int startState, int curPos)
-                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
-                     jjAddStates(0, 1);
+                  if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
+                    jjAddStates(0, 1);
+                }
@@ -1585,2 +1687,3 @@ private final int jjMoveNfa_0(int startState, int curPos)
-                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
-                     jjAddStates(2, 3);
+                  if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
+                    jjAddStates(2, 3);
+                }
@@ -1589,4 +1692,6 @@ private final int jjMoveNfa_0(int startState, int curPos)
-                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
-                     break;
-                  if (kind > 79)
-                     kind = 79;
+                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2)) {
+                    break;
+                }
+                  if (kind > 79) {
+                    kind = 79;
+                }
@@ -1606,2 +1711,3 @@ private final int jjMoveNfa_0(int startState, int curPos)
-      if ((i = jjnewStateCnt) == (startsAt = 13 - (jjnewStateCnt = startsAt)))
-         return curPos;
+      if ((i = jjnewStateCnt) == (startsAt = 13 - (jjnewStateCnt = startsAt))) {
+        return curPos;
+    }
@@ -1609 +1715 @@ private final int jjMoveNfa_0(int startState, int curPos)
-      catch(java.io.IOException e) { return curPos; }
+      catch(final java.io.IOException e) { return curPos; }
@@ -1613 +1719 @@ static final int[] jjnextStates = {
-   1, 2, 4, 5, 
+   1, 2, 4, 5,
@@ -1615 +1721 @@ static final int[] jjnextStates = {
-private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
+private static boolean jjCanMove_0(final int hiByte, final int i1, final int i2, final long l1, final long l2)
@@ -1620,3 +1726,3 @@ private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec2[i2] & l2) != 0L);
-      default : 
-         if ((jjbitVec0[i1] & l1) != 0L)
+         return (jjbitVec2[i2] & l2) != 0L;
+      default :
+         if ((jjbitVec0[i1] & l1) != 0L) {
@@ -1623,0 +1730 @@ private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, lo
+        }
@@ -1627 +1734 @@ private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, lo
-private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
+private static boolean jjCanMove_1(final int hiByte, final int i1, final int i2, final long l1, final long l2)
@@ -1632 +1739 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec4[i2] & l2) != 0L);
+         return (jjbitVec4[i2] & l2) != 0L;
@@ -1634 +1741 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec5[i2] & l2) != 0L);
+         return (jjbitVec5[i2] & l2) != 0L;
@@ -1636 +1743 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec6[i2] & l2) != 0L);
+         return (jjbitVec6[i2] & l2) != 0L;
@@ -1638 +1745 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec7[i2] & l2) != 0L);
+         return (jjbitVec7[i2] & l2) != 0L;
@@ -1640 +1747 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec8[i2] & l2) != 0L);
+         return (jjbitVec8[i2] & l2) != 0L;
@@ -1642 +1749 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec9[i2] & l2) != 0L);
+         return (jjbitVec9[i2] & l2) != 0L;
@@ -1644 +1751 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec10[i2] & l2) != 0L);
+         return (jjbitVec10[i2] & l2) != 0L;
@@ -1646 +1753 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec11[i2] & l2) != 0L);
+         return (jjbitVec11[i2] & l2) != 0L;
@@ -1648 +1755 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec12[i2] & l2) != 0L);
+         return (jjbitVec12[i2] & l2) != 0L;
@@ -1650 +1757 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec13[i2] & l2) != 0L);
+         return (jjbitVec13[i2] & l2) != 0L;
@@ -1652 +1759 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec14[i2] & l2) != 0L);
+         return (jjbitVec14[i2] & l2) != 0L;
@@ -1654 +1761 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec15[i2] & l2) != 0L);
+         return (jjbitVec15[i2] & l2) != 0L;
@@ -1656 +1763 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec16[i2] & l2) != 0L);
+         return (jjbitVec16[i2] & l2) != 0L;
@@ -1658 +1765 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec17[i2] & l2) != 0L);
+         return (jjbitVec17[i2] & l2) != 0L;
@@ -1660 +1767 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec18[i2] & l2) != 0L);
+         return (jjbitVec18[i2] & l2) != 0L;
@@ -1662 +1769 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec19[i2] & l2) != 0L);
+         return (jjbitVec19[i2] & l2) != 0L;
@@ -1664 +1771 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec20[i2] & l2) != 0L);
+         return (jjbitVec20[i2] & l2) != 0L;
@@ -1666 +1773 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec21[i2] & l2) != 0L);
+         return (jjbitVec21[i2] & l2) != 0L;
@@ -1668 +1775 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec22[i2] & l2) != 0L);
+         return (jjbitVec22[i2] & l2) != 0L;
@@ -1670 +1777 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec23[i2] & l2) != 0L);
+         return (jjbitVec23[i2] & l2) != 0L;
@@ -1672 +1779 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec24[i2] & l2) != 0L);
+         return (jjbitVec24[i2] & l2) != 0L;
@@ -1674 +1781 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec25[i2] & l2) != 0L);
+         return (jjbitVec25[i2] & l2) != 0L;
@@ -1676,3 +1783,3 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec26[i2] & l2) != 0L);
-      default : 
-         if ((jjbitVec3[i1] & l1) != 0L)
+         return (jjbitVec26[i2] & l2) != 0L;
+      default :
+         if ((jjbitVec3[i1] & l1) != 0L) {
@@ -1679,0 +1787 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
+        }
@@ -1683 +1791 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
-private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
+private static boolean jjCanMove_2(final int hiByte, final int i1, final int i2, final long l1, final long l2)
@@ -1688 +1796 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec27[i2] & l2) != 0L);
+         return (jjbitVec27[i2] & l2) != 0L;
@@ -1690 +1798 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec5[i2] & l2) != 0L);
+         return (jjbitVec5[i2] & l2) != 0L;
@@ -1692 +1800 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec28[i2] & l2) != 0L);
+         return (jjbitVec28[i2] & l2) != 0L;
@@ -1694 +1802 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec29[i2] & l2) != 0L);
+         return (jjbitVec29[i2] & l2) != 0L;
@@ -1696 +1804 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec30[i2] & l2) != 0L);
+         return (jjbitVec30[i2] & l2) != 0L;
@@ -1698 +1806 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec31[i2] & l2) != 0L);
+         return (jjbitVec31[i2] & l2) != 0L;
@@ -1700 +1808 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec32[i2] & l2) != 0L);
+         return (jjbitVec32[i2] & l2) != 0L;
@@ -1702 +1810 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec33[i2] & l2) != 0L);
+         return (jjbitVec33[i2] & l2) != 0L;
@@ -1704 +1812 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec34[i2] & l2) != 0L);
+         return (jjbitVec34[i2] & l2) != 0L;
@@ -1706 +1814 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec35[i2] & l2) != 0L);
+         return (jjbitVec35[i2] & l2) != 0L;
@@ -1708 +1816 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec36[i2] & l2) != 0L);
+         return (jjbitVec36[i2] & l2) != 0L;
@@ -1710 +1818 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec37[i2] & l2) != 0L);
+         return (jjbitVec37[i2] & l2) != 0L;
@@ -1712 +1820 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec38[i2] & l2) != 0L);
+         return (jjbitVec38[i2] & l2) != 0L;
@@ -1714 +1822 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec39[i2] & l2) != 0L);
+         return (jjbitVec39[i2] & l2) != 0L;
@@ -1716 +1824 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec18[i2] & l2) != 0L);
+         return (jjbitVec18[i2] & l2) != 0L;
@@ -1718 +1826 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec19[i2] & l2) != 0L);
+         return (jjbitVec19[i2] & l2) != 0L;
@@ -1720 +1828 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec20[i2] & l2) != 0L);
+         return (jjbitVec20[i2] & l2) != 0L;
@@ -1722 +1830 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec21[i2] & l2) != 0L);
+         return (jjbitVec21[i2] & l2) != 0L;
@@ -1724 +1832 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec40[i2] & l2) != 0L);
+         return (jjbitVec40[i2] & l2) != 0L;
@@ -1726 +1834 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec22[i2] & l2) != 0L);
+         return (jjbitVec22[i2] & l2) != 0L;
@@ -1728 +1836 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec41[i2] & l2) != 0L);
+         return (jjbitVec41[i2] & l2) != 0L;
@@ -1730 +1838 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec24[i2] & l2) != 0L);
+         return (jjbitVec24[i2] & l2) != 0L;
@@ -1732 +1840 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec25[i2] & l2) != 0L);
+         return (jjbitVec25[i2] & l2) != 0L;
@@ -1734,3 +1842,3 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
-         return ((jjbitVec26[i2] & l2) != 0L);
-      default : 
-         if ((jjbitVec3[i1] & l1) != 0L)
+         return (jjbitVec26[i2] & l2) != 0L;
+      default :
+         if ((jjbitVec3[i1] & l1) != 0L) {
@@ -1737,0 +1846 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
+        }
@@ -1742,20 +1851,20 @@ public static final String[] jjstrLiteralImages = {
-"", null, null, null, null, null, "\57", "\57\57", "\174", "\53", "\55", 
-"\75", "\41\75", "\74", "\74\75", "\76", "\76\75", "\44", null, null, null, null, 
-null, null, null, null, null, "\157\162", "\141\156\144", "\155\157\144", 
-"\144\151\166", "\156\157\144\145", "\164\145\170\164", "\143\157\155\155\145\156\164", 
-"\160\162\157\143\145\163\163\151\156\147\55\151\156\163\164\162\165\143\164\151\157\156", "\163\145\154\146\72\72", "\143\150\151\154\144\72\72", 
-"\160\141\162\145\156\164\72\72", "\141\156\143\145\163\164\157\162\72\72", 
-"\141\164\164\162\151\142\165\164\145\72\72", "\156\141\155\145\163\160\141\143\145\72\72", 
-"\160\162\145\143\145\144\151\156\147\72\72", "\146\157\154\154\157\167\151\156\147\72\72", 
-"\144\145\163\143\145\156\144\141\156\164\72\72", "\141\156\143\145\163\164\157\162\55\157\162\55\163\145\154\146\72\72", 
-"\146\157\154\154\157\167\151\156\147\55\163\151\142\154\151\156\147\72\72", "\160\162\145\143\145\144\151\156\147\55\163\151\142\154\151\156\147\72\72", 
-"\144\145\163\143\145\156\144\141\156\164\55\157\162\55\163\145\154\146\72\72", "\154\141\163\164", "\160\157\163\151\164\151\157\156", 
-"\143\157\165\156\164", "\151\144", "\153\145\171", "\154\157\143\141\154\55\156\141\155\145", 
-"\156\141\155\145\163\160\141\143\145\55\165\162\151", "\156\141\155\145", "\163\164\162\151\156\147", "\143\157\156\143\141\164", 
-"\163\164\141\162\164\163\55\167\151\164\150", "\145\156\144\163\55\167\151\164\150", "\143\157\156\164\141\151\156\163", 
-"\163\165\142\163\164\162\151\156\147\55\142\145\146\157\162\145", "\163\165\142\163\164\162\151\156\147\55\141\146\164\145\162", 
-"\163\165\142\163\164\162\151\156\147", "\163\164\162\151\156\147\55\154\145\156\147\164\150", 
-"\156\157\162\155\141\154\151\172\145\55\163\160\141\143\145", "\164\162\141\156\163\154\141\164\145", "\142\157\157\154\145\141\156", 
-"\156\157\164", "\164\162\165\145", "\146\141\154\163\145", "\156\165\154\154", 
-"\154\141\156\147", "\156\165\155\142\145\162", "\163\165\155", "\146\154\157\157\162", 
-"\143\145\151\154\151\156\147", "\162\157\165\156\144", "\146\157\162\155\141\164\55\156\165\155\142\145\162", 
+"", null, null, null, null, null, "\57", "\57\57", "\174", "\53", "\55",
+"\75", "\41\75", "\74", "\74\75", "\76", "\76\75", "\44", null, null, null, null,
+null, null, null, null, null, "\157\162", "\141\156\144", "\155\157\144",
+"\144\151\166", "\156\157\144\145", "\164\145\170\164", "\143\157\155\155\145\156\164",
+"\160\162\157\143\145\163\163\151\156\147\55\151\156\163\164\162\165\143\164\151\157\156", "\163\145\154\146\72\72", "\143\150\151\154\144\72\72",
+"\160\141\162\145\156\164\72\72", "\141\156\143\145\163\164\157\162\72\72",
+"\141\164\164\162\151\142\165\164\145\72\72", "\156\141\155\145\163\160\141\143\145\72\72",
+"\160\162\145\143\145\144\151\156\147\72\72", "\146\157\154\154\157\167\151\156\147\72\72",
+"\144\145\163\143\145\156\144\141\156\164\72\72", "\141\156\143\145\163\164\157\162\55\157\162\55\163\145\154\146\72\72",
+"\146\157\154\154\157\167\151\156\147\55\163\151\142\154\151\156\147\72\72", "\160\162\145\143\145\144\151\156\147\55\163\151\142\154\151\156\147\72\72",
+"\144\145\163\143\145\156\144\141\156\164\55\157\162\55\163\145\154\146\72\72", "\154\141\163\164", "\160\157\163\151\164\151\157\156",
+"\143\157\165\156\164", "\151\144", "\153\145\171", "\154\157\143\141\154\55\156\141\155\145",
+"\156\141\155\145\163\160\141\143\145\55\165\162\151", "\156\141\155\145", "\163\164\162\151\156\147", "\143\157\156\143\141\164",
+"\163\164\141\162\164\163\55\167\151\164\150", "\145\156\144\163\55\167\151\164\150", "\143\157\156\164\141\151\156\163",
+"\163\165\142\163\164\162\151\156\147\55\142\145\146\157\162\145", "\163\165\142\163\164\162\151\156\147\55\141\146\164\145\162",
+"\163\165\142\163\164\162\151\156\147", "\163\164\162\151\156\147\55\154\145\156\147\164\150",
+"\156\157\162\155\141\154\151\172\145\55\163\160\141\143\145", "\164\162\141\156\163\154\141\164\145", "\142\157\157\154\145\141\156",
+"\156\157\164", "\164\162\165\145", "\146\141\154\163\145", "\156\165\154\154",
+"\154\141\156\147", "\156\165\155\142\145\162", "\163\165\155", "\146\154\157\157\162",
+"\143\145\151\154\151\156\147", "\162\157\165\156\144", "\146\157\162\155\141\164\55\156\165\155\142\145\162",
@@ -1764 +1873 @@ public static final String[] lexStateNames = {
-   "DEFAULT", 
+   "DEFAULT",
@@ -1767 +1876 @@ static final long[] jjtoToken = {
-   0xfffffffff817ffc1L, 0x3ffffffL, 
+   0xfffffffff817ffc1L, 0x3ffffffL,
@@ -1770 +1879 @@ static final long[] jjtoSkip = {
-   0x3eL, 0x0L, 
+   0x3eL, 0x0L,
@@ -1776 +1885 @@ protected char curChar;
-public XPathParserTokenManager(SimpleCharStream stream)
+public XPathParserTokenManager(final SimpleCharStream stream)
@@ -1778,2 +1887,3 @@ public XPathParserTokenManager(SimpleCharStream stream)
-   if (SimpleCharStream.staticFlag)
-      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
+   if (SimpleCharStream.staticFlag) {
+    throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
+}
@@ -1782 +1892 @@ public XPathParserTokenManager(SimpleCharStream stream)
-public XPathParserTokenManager(SimpleCharStream stream, int lexState)
+public XPathParserTokenManager(final SimpleCharStream stream, final int lexState)
@@ -1787 +1897 @@ public XPathParserTokenManager(SimpleCharStream stream, int lexState)
-public void ReInit(SimpleCharStream stream)
+public void ReInit(final SimpleCharStream stream)
@@ -1794 +1904 @@ public void ReInit(SimpleCharStream stream)
-private final void ReInitRounds()
+private void ReInitRounds()
@@ -1798,2 +1908,3 @@ private final void ReInitRounds()
-   for (i = 13; i-- > 0;)
-      jjrounds[i] = 0x80000000;
+   for (i = 13; i-- > 0;) {
+    jjrounds[i] = 0x80000000;
+}
@@ -1801 +1912 @@ private final void ReInitRounds()
-public void ReInit(SimpleCharStream stream, int lexState)
+public void ReInit(final SimpleCharStream stream, final int lexState)
@@ -1806 +1917 @@ public void ReInit(SimpleCharStream stream, int lexState)
-public void SwitchTo(int lexState)
+public void SwitchTo(final int lexState)
@@ -1808,4 +1919,5 @@ public void SwitchTo(int lexState)
-   if (lexState >= 1 || lexState < 0)
-      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
-   else
-      curLexState = lexState;
+   if (lexState >= 1 || lexState < 0) {
+    throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
+} else {
+    curLexState = lexState;
+}
@@ -1816 +1928 @@ protected Token jjFillToken()
-   Token t = Token.newToken(jjmatchedKind);
+   final Token t = Token.newToken(jjmatchedKind);
@@ -1818,2 +1930,2 @@ protected Token jjFillToken()
-   String im = jjstrLiteralImages[jjmatchedKind];
-   t.image = (im == null) ? input_stream.GetImage() : im;
+   final String im = jjstrLiteralImages[jjmatchedKind];
+   t.image = im == null ? input_stream.GetImage() : im;
@@ -1834 +1946 @@ int jjmatchedKind;
-public Token getNextToken() 
+public Token getNextToken()
@@ -1836,2 +1948,2 @@ public Token getNextToken()
-  int kind;
-  Token specialToken = null;
+  final int kind;
+  final Token specialToken = null;
@@ -1843,3 +1955,3 @@ public Token getNextToken()
-  {   
-   try   
-   {     
+  {
+   try
+   {
@@ -1847,3 +1959,3 @@ public Token getNextToken()
-   }     
-   catch(java.io.IOException e)
-   {        
+   }
+   catch(final java.io.IOException e)
+   {
@@ -1856,2 +1968,3 @@ public Token getNextToken()
-      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
-         curChar = input_stream.BeginToken();
+      while (curChar <= 32 && (0x100003600L & 1L << curChar) != 0L) {
+        curChar = input_stream.BeginToken();
+    }
@@ -1859 +1972 @@ public Token getNextToken()
-   catch (java.io.IOException e1) { continue EOFLoop; }
+   catch (final java.io.IOException e1) { continue EOFLoop; }
@@ -1865,3 +1978,4 @@ public Token getNextToken()
-      if (jjmatchedPos + 1 < curPos)
-         input_stream.backup(curPos - jjmatchedPos - 1);
-      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
+      if (jjmatchedPos + 1 < curPos) {
+        input_stream.backup(curPos - jjmatchedPos - 1);
+    }
+      if ((jjtoToken[jjmatchedKind >> 6] & 1L << (jjmatchedKind & 077)) != 0L)
@@ -1882 +1996 @@ public Token getNextToken()
-   catch (java.io.IOException e1) {
+   catch (final java.io.IOException e1) {
@@ -1888,3 +2002,3 @@ public Token getNextToken()
-      }
-      else
-         error_column++;
+      } else {
+        error_column++;
+    }
diff --git a/src/main/java/org/apache/commons/jxpath/servlet/HttpSessionAndServletContext.java b/src/main/java/org/apache/commons/jxpath/servlet/HttpSessionAndServletContext.java
index f5f78744..11bec18e 100644
--- a/src/main/java/org/apache/commons/jxpath/servlet/HttpSessionAndServletContext.java
+++ b/src/main/java/org/apache/commons/jxpath/servlet/HttpSessionAndServletContext.java
@@ -27,2 +27,2 @@ public class HttpSessionAndServletContext {
-    private HttpSession session;
-    private ServletContext context;
+    private final HttpSession session;
+    private final ServletContext context;
@@ -35,2 +35,2 @@ public class HttpSessionAndServletContext {
-    public HttpSessionAndServletContext(HttpSession session,
-            ServletContext context) {
+    public HttpSessionAndServletContext(final HttpSession session,
+            final ServletContext context) {
diff --git a/src/main/java/org/apache/commons/jxpath/servlet/HttpSessionHandler.java b/src/main/java/org/apache/commons/jxpath/servlet/HttpSessionHandler.java
index bcb3ce04..3f89f640 100644
--- a/src/main/java/org/apache/commons/jxpath/servlet/HttpSessionHandler.java
+++ b/src/main/java/org/apache/commons/jxpath/servlet/HttpSessionHandler.java
@@ -31,2 +31,3 @@ public class HttpSessionHandler extends ServletContextHandler {
-    protected void collectPropertyNames(HashSet set, Object bean) {
-        HttpSessionAndServletContext handle =
+    @Override
+    protected void collectPropertyNames(final HashSet set, final Object bean) {
+        final HttpSessionAndServletContext handle =
@@ -35 +36 @@ public class HttpSessionHandler extends ServletContextHandler {
-        HttpSession session = handle.getSession();
+        final HttpSession session = handle.getSession();
@@ -37 +38 @@ public class HttpSessionHandler extends ServletContextHandler {
-            Enumeration e = session.getAttributeNames();
+            final Enumeration e = session.getAttributeNames();
@@ -44,2 +45,3 @@ public class HttpSessionHandler extends ServletContextHandler {
-    public Object getProperty(Object bean, String property) {
-        HttpSessionAndServletContext handle =
+    @Override
+    public Object getProperty(final Object bean, final String property) {
+        final HttpSessionAndServletContext handle =
@@ -47 +49 @@ public class HttpSessionHandler extends ServletContextHandler {
-        HttpSession session = handle.getSession();
+        final HttpSession session = handle.getSession();
@@ -49 +51 @@ public class HttpSessionHandler extends ServletContextHandler {
-            Object object = session.getAttribute(property);
+            final Object object = session.getAttribute(property);
@@ -57,2 +59,3 @@ public class HttpSessionHandler extends ServletContextHandler {
-    public void setProperty(Object bean, String property, Object value) {
-        HttpSessionAndServletContext handle =
+    @Override
+    public void setProperty(final Object bean, final String property, final Object value) {
+        final HttpSessionAndServletContext handle =
@@ -60 +63 @@ public class HttpSessionHandler extends ServletContextHandler {
-        HttpSession session = handle.getSession();
+        final HttpSession session = handle.getSession();
diff --git a/src/main/java/org/apache/commons/jxpath/servlet/JXPathServletContexts.java b/src/main/java/org/apache/commons/jxpath/servlet/JXPathServletContexts.java
index 28cc3e58..e699d9ee 100644
--- a/src/main/java/org/apache/commons/jxpath/servlet/JXPathServletContexts.java
+++ b/src/main/java/org/apache/commons/jxpath/servlet/JXPathServletContexts.java
@@ -94 +94 @@ public final class JXPathServletContexts {
-    public static JXPathContext getPageContext(PageContext pageContext) {
+    public static JXPathContext getPageContext(final PageContext pageContext) {
@@ -98 +98 @@ public final class JXPathServletContexts {
-            JXPathContext parentContext =
+            final JXPathContext parentContext =
@@ -119,2 +119,2 @@ public final class JXPathServletContexts {
-    public static JXPathContext getRequestContext(ServletRequest request,
-            ServletContext servletContext) {
+    public static JXPathContext getRequestContext(final ServletRequest request,
+            final ServletContext servletContext) {
@@ -127 +127 @@ public final class JXPathServletContexts {
-            ServletRequestAndContext handle =
+            final ServletRequestAndContext handle =
@@ -136 +136 @@ public final class JXPathServletContexts {
-            HttpSession session =
+            final HttpSession session =
@@ -145 +145 @@ public final class JXPathServletContexts {
-        ServletRequestAndContext handle =
+        final ServletRequestAndContext handle =
@@ -161,2 +161,2 @@ public final class JXPathServletContexts {
-    public static JXPathContext getSessionContext(HttpSession session,
-            ServletContext servletContext) {
+    public static JXPathContext getSessionContext(final HttpSession session,
+            final ServletContext servletContext) {
@@ -166,2 +166,2 @@ public final class JXPathServletContexts {
-            JXPathContext parentContext = getApplicationContext(servletContext);
-            HttpSessionAndServletContext handle =
+            final JXPathContext parentContext = getApplicationContext(servletContext);
+            final HttpSessionAndServletContext handle =
@@ -184 +184 @@ public final class JXPathServletContexts {
-            ServletContext servletContext) {
+            final ServletContext servletContext) {
diff --git a/src/main/java/org/apache/commons/jxpath/servlet/KeywordVariables.java b/src/main/java/org/apache/commons/jxpath/servlet/KeywordVariables.java
index 57de7f01..53b562d3 100644
--- a/src/main/java/org/apache/commons/jxpath/servlet/KeywordVariables.java
+++ b/src/main/java/org/apache/commons/jxpath/servlet/KeywordVariables.java
@@ -28,2 +28,2 @@ public class KeywordVariables implements Variables {
-    private String keyword;
-    private Object object;
+    private final String keyword;
+    private final Object object;
@@ -36 +36 @@ public class KeywordVariables implements Variables {
-    public KeywordVariables(String keyword, Object object) {
+    public KeywordVariables(final String keyword, final Object object) {
@@ -44 +44,2 @@ public class KeywordVariables implements Variables {
-    public boolean isDeclaredVariable(String variable) {
+    @Override
+    public boolean isDeclaredVariable(final String variable) {
@@ -48 +49,2 @@ public class KeywordVariables implements Variables {
-    public Object getVariable(String variable) {
+    @Override
+    public Object getVariable(final String variable) {
@@ -52 +54,2 @@ public class KeywordVariables implements Variables {
-    public void declareVariable(String variable, Object value) {
+    @Override
+    public void declareVariable(final String variable, final Object value) {
@@ -57 +60,2 @@ public class KeywordVariables implements Variables {
-    public void undeclareVariable(String variable) {
+    @Override
+    public void undeclareVariable(final String variable) {
diff --git a/src/main/java/org/apache/commons/jxpath/servlet/PageContextHandler.java b/src/main/java/org/apache/commons/jxpath/servlet/PageContextHandler.java
index 40308b39..6a7d0c60 100644
--- a/src/main/java/org/apache/commons/jxpath/servlet/PageContextHandler.java
+++ b/src/main/java/org/apache/commons/jxpath/servlet/PageContextHandler.java
@@ -32,2 +32,3 @@ public class PageContextHandler implements DynamicPropertyHandler {
-    public String[] getPropertyNames(Object pageContext) {
-        HashSet list = new HashSet();
+    @Override
+    public String[] getPropertyNames(final Object pageContext) {
+        final HashSet list = new HashSet();
@@ -67 +68,2 @@ public class PageContextHandler implements DynamicPropertyHandler {
-    public Object getProperty(Object pageContext, String property) {
+    @Override
+    public Object getProperty(final Object pageContext, final String property) {
@@ -71 +73,2 @@ public class PageContextHandler implements DynamicPropertyHandler {
-    public void setProperty(Object pageContext, String property, Object value) {
+    @Override
+    public void setProperty(final Object pageContext, final String property, final Object value) {
diff --git a/src/main/java/org/apache/commons/jxpath/servlet/PageScopeContext.java b/src/main/java/org/apache/commons/jxpath/servlet/PageScopeContext.java
index cc23bb7f..7485230c 100644
--- a/src/main/java/org/apache/commons/jxpath/servlet/PageScopeContext.java
+++ b/src/main/java/org/apache/commons/jxpath/servlet/PageScopeContext.java
@@ -30 +30 @@ public class PageScopeContext {
-    private PageContext pageContext;
+    private final PageContext pageContext;
@@ -36 +36 @@ public class PageScopeContext {
-    public PageScopeContext(PageContext pageContext) {
+    public PageScopeContext(final PageContext pageContext) {
@@ -53 +53 @@ public class PageScopeContext {
-    public Object getAttribute(String attribute) {
+    public Object getAttribute(final String attribute) {
@@ -62 +62 @@ public class PageScopeContext {
-    public void setAttribute(String attribute, Object value) {
+    public void setAttribute(final String attribute, final Object value) {
diff --git a/src/main/java/org/apache/commons/jxpath/servlet/PageScopeContextHandler.java b/src/main/java/org/apache/commons/jxpath/servlet/PageScopeContextHandler.java
index 0700daa7..0c708cc1 100644
--- a/src/main/java/org/apache/commons/jxpath/servlet/PageScopeContextHandler.java
+++ b/src/main/java/org/apache/commons/jxpath/servlet/PageScopeContextHandler.java
@@ -32,3 +32,4 @@ public class PageScopeContextHandler implements DynamicPropertyHandler {
-    public String[] getPropertyNames(Object pageScope) {
-        Enumeration e = ((PageScopeContext) pageScope).getAttributeNames();
-        ArrayList list = new ArrayList(DEFAULT_LIST_SIZE);
+    @Override
+    public String[] getPropertyNames(final Object pageScope) {
+        final Enumeration e = ((PageScopeContext) pageScope).getAttributeNames();
+        final ArrayList list = new ArrayList(DEFAULT_LIST_SIZE);
@@ -41 +42,2 @@ public class PageScopeContextHandler implements DynamicPropertyHandler {
-    public Object getProperty(Object pageScope, String property) {
+    @Override
+    public Object getProperty(final Object pageScope, final String property) {
@@ -45 +47,2 @@ public class PageScopeContextHandler implements DynamicPropertyHandler {
-    public void setProperty(Object pageScope, String property, Object value) {
+    @Override
+    public void setProperty(final Object pageScope, final String property, final Object value) {
diff --git a/src/main/java/org/apache/commons/jxpath/servlet/ServletContextHandler.java b/src/main/java/org/apache/commons/jxpath/servlet/ServletContextHandler.java
index 592298e7..45f98160 100644
--- a/src/main/java/org/apache/commons/jxpath/servlet/ServletContextHandler.java
+++ b/src/main/java/org/apache/commons/jxpath/servlet/ServletContextHandler.java
@@ -21,2 +20,0 @@ import java.util.HashSet;
-import java.util.Set;
-
@@ -35,2 +33,3 @@ public class ServletContextHandler implements DynamicPropertyHandler {
-    public String[] getPropertyNames(Object context) {
-        HashSet list = new HashSet(DEFAULT_PROPERTY_COUNT);
+    @Override
+    public String[] getPropertyNames(final Object context) {
+        final HashSet list = new HashSet(DEFAULT_PROPERTY_COUNT);
@@ -46 +45 @@ public class ServletContextHandler implements DynamicPropertyHandler {
-    protected void collectPropertyNames(HashSet set, Object bean) {
+    protected void collectPropertyNames(final HashSet set, Object bean) {
@@ -50 +49 @@ public class ServletContextHandler implements DynamicPropertyHandler {
-        Enumeration e = ((ServletContext) bean).getAttributeNames();
+        final Enumeration e = ((ServletContext) bean).getAttributeNames();
@@ -56 +55,2 @@ public class ServletContextHandler implements DynamicPropertyHandler {
-    public Object getProperty(Object context, String property) {
+    @Override
+    public Object getProperty(final Object context, final String property) {
@@ -60 +60,2 @@ public class ServletContextHandler implements DynamicPropertyHandler {
-    public void setProperty(Object context, String property, Object value) {
+    @Override
+    public void setProperty(final Object context, final String property, final Object value) {
diff --git a/src/main/java/org/apache/commons/jxpath/servlet/ServletRequestAndContext.java b/src/main/java/org/apache/commons/jxpath/servlet/ServletRequestAndContext.java
index 1f6c494a..a0c225ba 100644
--- a/src/main/java/org/apache/commons/jxpath/servlet/ServletRequestAndContext.java
+++ b/src/main/java/org/apache/commons/jxpath/servlet/ServletRequestAndContext.java
@@ -29 +29 @@ public class ServletRequestAndContext extends HttpSessionAndServletContext {
-    private ServletRequest request;
+    private final ServletRequest request;
@@ -37,2 +37,2 @@ public class ServletRequestAndContext extends HttpSessionAndServletContext {
-    public ServletRequestAndContext(ServletRequest request,
-            ServletContext context) {
+    public ServletRequestAndContext(final ServletRequest request,
+            final ServletContext context) {
@@ -42,0 +43 @@ public class ServletRequestAndContext extends HttpSessionAndServletContext {
+    @Override
diff --git a/src/main/java/org/apache/commons/jxpath/servlet/ServletRequestHandler.java b/src/main/java/org/apache/commons/jxpath/servlet/ServletRequestHandler.java
index 7890f3fc..b67ee4f5 100644
--- a/src/main/java/org/apache/commons/jxpath/servlet/ServletRequestHandler.java
+++ b/src/main/java/org/apache/commons/jxpath/servlet/ServletRequestHandler.java
@@ -30 +30,2 @@ public class ServletRequestHandler extends HttpSessionHandler {
-    protected void collectPropertyNames(HashSet set, Object bean) {
+    @Override
+    protected void collectPropertyNames(final HashSet set, final Object bean) {
@@ -32,2 +33,2 @@ public class ServletRequestHandler extends HttpSessionHandler {
-        ServletRequestAndContext handle = (ServletRequestAndContext) bean;
-        ServletRequest servletRequest = handle.getServletRequest();
+        final ServletRequestAndContext handle = (ServletRequestAndContext) bean;
+        final ServletRequest servletRequest = handle.getServletRequest();
@@ -44,4 +45,5 @@ public class ServletRequestHandler extends HttpSessionHandler {
-    public Object getProperty(Object bean, String property) {
-        ServletRequestAndContext handle = (ServletRequestAndContext) bean;
-        ServletRequest servletRequest = handle.getServletRequest();
-        String[] strings = servletRequest.getParameterValues(property);
+    @Override
+    public Object getProperty(final Object bean, final String property) {
+        final ServletRequestAndContext handle = (ServletRequestAndContext) bean;
+        final ServletRequest servletRequest = handle.getServletRequest();
+        final String[] strings = servletRequest.getParameterValues(property);
@@ -59 +61 @@ public class ServletRequestHandler extends HttpSessionHandler {
-        Object object = servletRequest.getAttribute(property);
+        final Object object = servletRequest.getAttribute(property);
@@ -67 +69,2 @@ public class ServletRequestHandler extends HttpSessionHandler {
-    public void setProperty(Object request, String property, Object value) {
+    @Override
+    public void setProperty(final Object request, final String property, final Object value) {
diff --git a/src/main/java/org/apache/commons/jxpath/util/BasicTypeConverter.java b/src/main/java/org/apache/commons/jxpath/util/BasicTypeConverter.java
index 833a8451..a5fffe72 100644
--- a/src/main/java/org/apache/commons/jxpath/util/BasicTypeConverter.java
+++ b/src/main/java/org/apache/commons/jxpath/util/BasicTypeConverter.java
@@ -51 +51,2 @@ public class BasicTypeConverter implements TypeConverter {
-    public boolean canConvert(Object object, final Class toType) {
+    @Override
+    public boolean canConvert(final Object object, final Class toType) {
@@ -56 +57 @@ public class BasicTypeConverter implements TypeConverter {
-        Class fromType = object.getClass();
+        final Class fromType = object.getClass();
@@ -89,2 +90,2 @@ public class BasicTypeConverter implements TypeConverter {
-                Class cType = useType.getComponentType();
-                int length = Array.getLength(object);
+                final Class cType = useType.getComponentType();
+                final int length = Array.getLength(object);
@@ -92 +93 @@ public class BasicTypeConverter implements TypeConverter {
-                    Object value = Array.get(object, i);
+                    final Object value = Array.get(object, i);
@@ -103 +104 @@ public class BasicTypeConverter implements TypeConverter {
-                Object value = Array.get(object, 0);
+                final Object value = Array.get(object, 0);
@@ -111,2 +112,2 @@ public class BasicTypeConverter implements TypeConverter {
-                Class cType = useType.getComponentType();
-                Iterator it = ((Collection) object).iterator();
+                final Class cType = useType.getComponentType();
+                final Iterator it = ((Collection) object).iterator();
@@ -114 +115 @@ public class BasicTypeConverter implements TypeConverter {
-                    Object value = it.next();
+                    final Object value = it.next();
@@ -130 +131 @@ public class BasicTypeConverter implements TypeConverter {
-                    Iterator it = ((Collection) object).iterator();
+                    final Iterator it = ((Collection) object).iterator();
@@ -154 +155,2 @@ public class BasicTypeConverter implements TypeConverter {
-    public Object convert(Object object, final Class toType) {
+    @Override
+    public Object convert(final Object object, final Class toType) {
@@ -169 +171 @@ public class BasicTypeConverter implements TypeConverter {
-        Class fromType = object.getClass();
+        final Class fromType = object.getClass();
@@ -176 +178 @@ public class BasicTypeConverter implements TypeConverter {
-            int length = Array.getLength(object);
+            final int length = Array.getLength(object);
@@ -178 +180 @@ public class BasicTypeConverter implements TypeConverter {
-                Class cType = useType.getComponentType();
+                final Class cType = useType.getComponentType();
@@ -180 +182 @@ public class BasicTypeConverter implements TypeConverter {
-                Object array = Array.newInstance(cType, length);
+                final Object array = Array.newInstance(cType, length);
@@ -182 +184 @@ public class BasicTypeConverter implements TypeConverter {
-                    Object value = Array.get(object, i);
+                    final Object value = Array.get(object, i);
@@ -188 +190 @@ public class BasicTypeConverter implements TypeConverter {
-                Collection collection = allocateCollection(useType);
+                final Collection collection = allocateCollection(useType);
@@ -195 +197 @@ public class BasicTypeConverter implements TypeConverter {
-                Object value = Array.get(object, 0);
+                final Object value = Array.get(object, 0);
@@ -201 +203 @@ public class BasicTypeConverter implements TypeConverter {
-            int length = ((Collection) object).size();
+            final int length = ((Collection) object).size();
@@ -203,3 +205,3 @@ public class BasicTypeConverter implements TypeConverter {
-                Class cType = useType.getComponentType();
-                Object array = Array.newInstance(cType, length);
-                Iterator it = ((Collection) object).iterator();
+                final Class cType = useType.getComponentType();
+                final Object array = Array.newInstance(cType, length);
+                final Iterator it = ((Collection) object).iterator();
@@ -207 +209 @@ public class BasicTypeConverter implements TypeConverter {
-                    Object value = it.next();
+                    final Object value = it.next();
@@ -213 +215 @@ public class BasicTypeConverter implements TypeConverter {
-                Collection collection = allocateCollection(useType);
+                final Collection collection = allocateCollection(useType);
@@ -223 +225 @@ public class BasicTypeConverter implements TypeConverter {
-                    Iterator it = ((Collection) object).iterator();
+                    final Iterator it = ((Collection) object).iterator();
@@ -248 +250 @@ public class BasicTypeConverter implements TypeConverter {
-                catch (Exception e) {
+                catch (final Exception e) {
@@ -254 +256 @@ public class BasicTypeConverter implements TypeConverter {
-            double value = ((Number) object).doubleValue();
+            final double value = ((Number) object).doubleValue();
@@ -263 +265 @@ public class BasicTypeConverter implements TypeConverter {
-            Object value = convertStringToPrimitive(object, useType);
+            final Object value = convertStringToPrimitive(object, useType);
@@ -269 +271 @@ public class BasicTypeConverter implements TypeConverter {
-        Converter converter = ConvertUtils.lookup(useType);
+        final Converter converter = ConvertUtils.lookup(useType);
@@ -283 +285 @@ public class BasicTypeConverter implements TypeConverter {
-    protected Object convertNullToPrimitive(Class toType) {
+    protected Object convertNullToPrimitive(final Class toType) {
@@ -288 +290 @@ public class BasicTypeConverter implements TypeConverter {
-            return new Character('\0');
+            return Character.valueOf('\0');
@@ -291 +293 @@ public class BasicTypeConverter implements TypeConverter {
-            return new Byte((byte) 0);
+            return Byte.valueOf((byte) 0);
@@ -294 +296 @@ public class BasicTypeConverter implements TypeConverter {
-            return new Short((short) 0);
+            return Short.valueOf((short) 0);
@@ -297 +299 @@ public class BasicTypeConverter implements TypeConverter {
-            return new Integer(0);
+            return Integer.valueOf(0);
@@ -300 +302 @@ public class BasicTypeConverter implements TypeConverter {
-            return new Long(0L);
+            return Long.valueOf(0L);
@@ -303 +305 @@ public class BasicTypeConverter implements TypeConverter {
-            return new Float(0.0f);
+            return Float.valueOf(0.0f);
@@ -306 +308 @@ public class BasicTypeConverter implements TypeConverter {
-            return new Double(0.0);
+            return Double.valueOf(0.0);
@@ -317 +319 @@ public class BasicTypeConverter implements TypeConverter {
-    protected Object convertStringToPrimitive(Object object, Class toType) {
+    protected Object convertStringToPrimitive(final Object object, Class toType) {
@@ -323 +325 @@ public class BasicTypeConverter implements TypeConverter {
-            return new Character(((String) object).charAt(0));
+            return Character.valueOf(((String) object).charAt(0));
@@ -326 +328 @@ public class BasicTypeConverter implements TypeConverter {
-            return new Byte((String) object);
+            return Byte.valueOf((String) object);
@@ -329 +331 @@ public class BasicTypeConverter implements TypeConverter {
-            return new Short((String) object);
+            return Short.valueOf((String) object);
@@ -332 +334 @@ public class BasicTypeConverter implements TypeConverter {
-            return new Integer((String) object);
+            return Integer.valueOf((String) object);
@@ -335 +337 @@ public class BasicTypeConverter implements TypeConverter {
-            return new Long((String) object);
+            return Long.valueOf((String) object);
@@ -338 +340 @@ public class BasicTypeConverter implements TypeConverter {
-            return new Float((String) object);
+            return Float.valueOf((String) object);
@@ -341 +343 @@ public class BasicTypeConverter implements TypeConverter {
-            return new Double((String) object);
+            return Double.valueOf((String) object);
@@ -352 +354 @@ public class BasicTypeConverter implements TypeConverter {
-    protected Number allocateNumber(Class type, double value) {
+    protected Number allocateNumber(Class type, final double value) {
@@ -355 +357 @@ public class BasicTypeConverter implements TypeConverter {
-            return new Byte((byte) value);
+            return Byte.valueOf((byte) value);
@@ -358 +360 @@ public class BasicTypeConverter implements TypeConverter {
-            return new Short((short) value);
+            return Short.valueOf((short) value);
@@ -361 +363 @@ public class BasicTypeConverter implements TypeConverter {
-            return new Integer((int) value);
+            return Integer.valueOf((int) value);
@@ -364 +366 @@ public class BasicTypeConverter implements TypeConverter {
-            return new Long((long) value);
+            return Long.valueOf((long) value);
@@ -367 +369 @@ public class BasicTypeConverter implements TypeConverter {
-            return new Float((float) value);
+            return Float.valueOf((float) value);
@@ -370 +372 @@ public class BasicTypeConverter implements TypeConverter {
-            return new Double(value);
+            return Double.valueOf(value);
@@ -378 +380 @@ public class BasicTypeConverter implements TypeConverter {
-        String classname = type.getName();
+        final String classname = type.getName();
@@ -394 +396 @@ public class BasicTypeConverter implements TypeConverter {
-            catch (Exception e) {
+            catch (final Exception e) {
@@ -406 +408 @@ public class BasicTypeConverter implements TypeConverter {
-    protected boolean canCreateCollection(Class type) {
+    protected boolean canCreateCollection(final Class type) {
@@ -408 +410 @@ public class BasicTypeConverter implements TypeConverter {
-                && ((type.getModifiers() & Modifier.ABSTRACT) == 0)) {
+                && (type.getModifiers() & Modifier.ABSTRACT) == 0) {
@@ -413 +415 @@ public class BasicTypeConverter implements TypeConverter {
-            catch (Exception e) {
+            catch (final Exception e) {
@@ -425 +427 @@ public class BasicTypeConverter implements TypeConverter {
-    protected Collection allocateCollection(Class type) {
+    protected Collection allocateCollection(final Class type) {
@@ -427 +429 @@ public class BasicTypeConverter implements TypeConverter {
-                && ((type.getModifiers() & Modifier.ABSTRACT) == 0)) {
+                && (type.getModifiers() & Modifier.ABSTRACT) == 0) {
@@ -431 +433 @@ public class BasicTypeConverter implements TypeConverter {
-            catch (Exception ex) {
+            catch (final Exception ex) {
@@ -452 +454 @@ public class BasicTypeConverter implements TypeConverter {
-    protected Collection unmodifiableCollection(Collection collection) {
+    protected Collection unmodifiableCollection(final Collection collection) {
@@ -469 +471 @@ public class BasicTypeConverter implements TypeConverter {
-        private List values;
+        private final List values;
@@ -476 +478 @@ public class BasicTypeConverter implements TypeConverter {
-        public ValueNodeSet(List values) {
+        public ValueNodeSet(final List values) {
@@ -479,0 +482 @@ public class BasicTypeConverter implements TypeConverter {
+        @Override
@@ -483,0 +487 @@ public class BasicTypeConverter implements TypeConverter {
+        @Override
@@ -487,0 +492 @@ public class BasicTypeConverter implements TypeConverter {
+        @Override
@@ -506 +511 @@ public class BasicTypeConverter implements TypeConverter {
-        private Object bean;
+        private final Object bean;
@@ -512 +517 @@ public class BasicTypeConverter implements TypeConverter {
-        public ValuePointer(Object object) {
+        public ValuePointer(final Object object) {
@@ -515,0 +521 @@ public class BasicTypeConverter implements TypeConverter {
+        @Override
@@ -519,0 +526 @@ public class BasicTypeConverter implements TypeConverter {
+        @Override
@@ -523,0 +531 @@ public class BasicTypeConverter implements TypeConverter {
+        @Override
@@ -528 +536,2 @@ public class BasicTypeConverter implements TypeConverter {
-        public void setValue(Object value) {
+        @Override
+        public void setValue(final Object value) {
@@ -531,0 +541 @@ public class BasicTypeConverter implements TypeConverter {
+        @Override
@@ -536 +546,2 @@ public class BasicTypeConverter implements TypeConverter {
-        public int compareTo(Object object) {
+        @Override
+        public int compareTo(final Object object) {
@@ -539,0 +551 @@ public class BasicTypeConverter implements TypeConverter {
+        @Override
diff --git a/src/main/java/org/apache/commons/jxpath/util/ClassLoaderUtil.java b/src/main/java/org/apache/commons/jxpath/util/ClassLoaderUtil.java
index 131d2e3e..fa1db5e6 100644
--- a/src/main/java/org/apache/commons/jxpath/util/ClassLoaderUtil.java
+++ b/src/main/java/org/apache/commons/jxpath/util/ClassLoaderUtil.java
@@ -43 +43 @@ public class ClassLoaderUtil {
-    private static void addAbbreviation(String primitive, String abbreviation) {
+    private static void addAbbreviation(final String primitive, final String abbreviation) {
@@ -74 +74 @@ public class ClassLoaderUtil {
-    public static Class getClass(ClassLoader classLoader, String className, boolean initialize)
+    public static Class getClass(final ClassLoader classLoader, final String className, final boolean initialize)
@@ -78 +78 @@ public class ClassLoaderUtil {
-            String clsName = "[" + abbreviationMap.get(className);
+            final String clsName = "[" + abbreviationMap.get(className);
@@ -98 +98 @@ public class ClassLoaderUtil {
-    public static Class getClass(ClassLoader classLoader, String className) throws ClassNotFoundException {
+    public static Class getClass(final ClassLoader classLoader, final String className) throws ClassNotFoundException {
@@ -112 +112 @@ public class ClassLoaderUtil {
-    public static Class getClass(String className) throws ClassNotFoundException {
+    public static Class getClass(final String className) throws ClassNotFoundException {
@@ -127,3 +127,3 @@ public class ClassLoaderUtil {
-    public static Class getClass(String className, boolean initialize) throws ClassNotFoundException {
-        ClassLoader contextCL = Thread.currentThread().getContextClassLoader();
-        ClassLoader currentCL = ClassLoaderUtil.class.getClassLoader();
+    public static Class getClass(final String className, final boolean initialize) throws ClassNotFoundException {
+        final ClassLoader contextCL = Thread.currentThread().getContextClassLoader();
+        final ClassLoader currentCL = ClassLoaderUtil.class.getClassLoader();
@@ -134,2 +134,2 @@ public class ClassLoaderUtil {
-            catch (ClassNotFoundException e) {//NOPMD
-                // ignore this exception and try the current class loader.
+            catch (final ClassNotFoundException ignore) { // NOPMD
+                // ignore this exception and try the current class loader
@@ -152 +152 @@ public class ClassLoaderUtil {
-            StringBuffer classNameBuffer = new StringBuffer();
+            final StringBuffer classNameBuffer = new StringBuffer();
@@ -157 +157 @@ public class ClassLoaderUtil {
-            String abbreviation = (String) abbreviationMap.get(className);
+            final String abbreviation = (String) abbreviationMap.get(className);
diff --git a/src/main/java/org/apache/commons/jxpath/util/JXPath11CompatibleTypeConverter.java b/src/main/java/org/apache/commons/jxpath/util/JXPath11CompatibleTypeConverter.java
index 8f31805a..ae049416 100644
--- a/src/main/java/org/apache/commons/jxpath/util/JXPath11CompatibleTypeConverter.java
+++ b/src/main/java/org/apache/commons/jxpath/util/JXPath11CompatibleTypeConverter.java
@@ -29 +29,2 @@ public class JXPath11CompatibleTypeConverter extends BasicTypeConverter {
-    public boolean canConvert(Object object, Class toType) {
+    @Override
+    public boolean canConvert(final Object object, final Class toType) {
@@ -33 +34,2 @@ public class JXPath11CompatibleTypeConverter extends BasicTypeConverter {
-    public Object convert(Object object, Class toType) {
+    @Override
+    public Object convert(final Object object, final Class toType) {
diff --git a/src/main/java/org/apache/commons/jxpath/util/KeyManagerUtils.java b/src/main/java/org/apache/commons/jxpath/util/KeyManagerUtils.java
index f49bff09..4115ff48 100644
--- a/src/main/java/org/apache/commons/jxpath/util/KeyManagerUtils.java
+++ b/src/main/java/org/apache/commons/jxpath/util/KeyManagerUtils.java
@@ -37 +37 @@ public class KeyManagerUtils {
-        private KeyManager delegate;
+        private final KeyManager delegate;
@@ -43 +43 @@ public class KeyManagerUtils {
-        public SingleNodeExtendedKeyManager(KeyManager delegate) {
+        public SingleNodeExtendedKeyManager(final KeyManager delegate) {
@@ -47,4 +47,5 @@ public class KeyManagerUtils {
-        public NodeSet getNodeSetByKey(JXPathContext context, String key,
-                Object value) {
-            Pointer pointer = delegate.getPointerByKey(context, key, InfoSetUtil.stringValue(value));
-            BasicNodeSet result = new BasicNodeSet();
+        @Override
+        public NodeSet getNodeSetByKey(final JXPathContext context, final String key,
+                final Object value) {
+            final Pointer pointer = delegate.getPointerByKey(context, key, InfoSetUtil.stringValue(value));
+            final BasicNodeSet result = new BasicNodeSet();
@@ -55,2 +56,3 @@ public class KeyManagerUtils {
-        public Pointer getPointerByKey(JXPathContext context, String keyName,
-                String keyValue) {
+        @Override
+        public Pointer getPointerByKey(final JXPathContext context, final String keyName,
+                final String keyValue) {
@@ -68 +70 @@ public class KeyManagerUtils {
-    public static ExtendedKeyManager getExtendedKeyManager(KeyManager keyManager) {
+    public static ExtendedKeyManager getExtendedKeyManager(final KeyManager keyManager) {
diff --git a/src/main/java/org/apache/commons/jxpath/util/MethodLookupUtils.java b/src/main/java/org/apache/commons/jxpath/util/MethodLookupUtils.java
index 67532676..de0dbbef 100644
--- a/src/main/java/org/apache/commons/jxpath/util/MethodLookupUtils.java
+++ b/src/main/java/org/apache/commons/jxpath/util/MethodLookupUtils.java
@@ -44,2 +44,2 @@ public class MethodLookupUtils {
-        Class targetClass,
-        Object[] parameters) {
+        final Class targetClass,
+        final Object[] parameters) {
@@ -47,2 +47,2 @@ public class MethodLookupUtils {
-        int count = parameters == null ? 0 : parameters.length;
-        Class[] types = new Class[count];
+        final int count = parameters == null ? 0 : parameters.length;
+        final Class[] types = new Class[count];
@@ -50 +50 @@ public class MethodLookupUtils {
-            Object param = parameters[i];
+            final Object param = parameters[i];
@@ -70 +70 @@ public class MethodLookupUtils {
-            catch (NoSuchMethodException ex) { //NOPMD
+            catch (final NoSuchMethodException ignore) { // NOPMD
@@ -79,3 +79,3 @@ public class MethodLookupUtils {
-        Constructor[] constructors = targetClass.getConstructors();
-        for (int i = 0; i < constructors.length; i++) {
-            int match =
+        final Constructor[] constructors = targetClass.getConstructors();
+        for (final Constructor constructor2 : constructors) {
+            final int match =
@@ -83 +83 @@ public class MethodLookupUtils {
-                    constructors[i].getParameterTypes(),
+                    constructor2.getParameterTypes(),
@@ -87 +87 @@ public class MethodLookupUtils {
-                    constructor = constructors[i];
+                    constructor = constructor2;
@@ -111,3 +111,3 @@ public class MethodLookupUtils {
-        Class targetClass,
-        String name,
-        Object[] parameters) {
+        final Class targetClass,
+        final String name,
+        final Object[] parameters) {
@@ -115,2 +115,2 @@ public class MethodLookupUtils {
-        int count = parameters == null ? 0 : parameters.length;
-        Class[] types = new Class[count];
+        final int count = parameters == null ? 0 : parameters.length;
+        final Class[] types = new Class[count];
@@ -118 +118 @@ public class MethodLookupUtils {
-            Object param = parameters[i];
+            final Object param = parameters[i];
@@ -139 +139 @@ public class MethodLookupUtils {
-            catch (NoSuchMethodException ex) { //NOPMD
+            catch (final NoSuchMethodException ignore) { // NOPMD
@@ -148,5 +148,5 @@ public class MethodLookupUtils {
-        Method[] methods = targetClass.getMethods();
-        for (int i = 0; i < methods.length; i++) {
-            if (Modifier.isStatic(methods[i].getModifiers())
-                && methods[i].getName().equals(name)) {
-                int match =
+        final Method[] methods = targetClass.getMethods();
+        for (final Method method2 : methods) {
+            if (Modifier.isStatic(method2.getModifiers())
+                && method2.getName().equals(name)) {
+                final int match =
@@ -154 +154 @@ public class MethodLookupUtils {
-                        methods[i].getParameterTypes(),
+                        method2.getParameterTypes(),
@@ -158 +158 @@ public class MethodLookupUtils {
-                        method = methods[i];
+                        method = method2;
@@ -183,2 +183,2 @@ public class MethodLookupUtils {
-        String name,
-        Object[] parameters) {
+        final String name,
+        final Object[] parameters) {
@@ -198,3 +198,3 @@ public class MethodLookupUtils {
-        int count = parameters.length - 1;
-        Class[] types = new Class[count];
-        Object[] arguments = new Object[count];
+        final int count = parameters.length - 1;
+        final Class[] types = new Class[count];
+        final Object[] arguments = new Object[count];
@@ -202 +202 @@ public class MethodLookupUtils {
-            Object param = parameters[i + 1];
+            final Object param = parameters[i + 1];
@@ -224 +224 @@ public class MethodLookupUtils {
-            catch (NoSuchMethodException ex) { //NOPMD
+            catch (final NoSuchMethodException ignore) { // NOPMD
@@ -233,5 +233,5 @@ public class MethodLookupUtils {
-        Method[] methods = targetClass.getMethods();
-        for (int i = 0; i < methods.length; i++) {
-            if (!Modifier.isStatic(methods[i].getModifiers())
-                && methods[i].getName().equals(name)) {
-                int match =
+        final Method[] methods = targetClass.getMethods();
+        for (final Method method2 : methods) {
+            if (!Modifier.isStatic(method2.getModifiers())
+                && method2.getName().equals(name)) {
+                final int match =
@@ -239 +239 @@ public class MethodLookupUtils {
-                        methods[i].getParameterTypes(),
+                        method2.getParameterTypes(),
@@ -243 +243 @@ public class MethodLookupUtils {
-                        method = methods[i];
+                        method = method2;
@@ -266,2 +266,2 @@ public class MethodLookupUtils {
-        Class[] types,
-        Object[] parameters) {
+        final Class[] types,
+        final Object[] parameters) {
@@ -273 +273 @@ public class MethodLookupUtils {
-        int length = parameters == null ? 0 : parameters.length;
+        final int length = parameters == null ? 0 : parameters.length;
@@ -279 +279 @@ public class MethodLookupUtils {
-            int match = matchType(types[i + pi], parameters[i]);
+            final int match = matchType(types[i + pi], parameters[i]);
@@ -296 +296 @@ public class MethodLookupUtils {
-    private static int matchType(Class expected, Object object) {
+    private static int matchType(final Class expected, final Object object) {
@@ -301 +301 @@ public class MethodLookupUtils {
-        Class actual = object.getClass();
+        final Class actual = object.getClass();
diff --git a/src/main/java/org/apache/commons/jxpath/util/ReverseComparator.java b/src/main/java/org/apache/commons/jxpath/util/ReverseComparator.java
index b6672482..b28880a7 100644
--- a/src/main/java/org/apache/commons/jxpath/util/ReverseComparator.java
+++ b/src/main/java/org/apache/commons/jxpath/util/ReverseComparator.java
@@ -39 +39,2 @@ public final class ReverseComparator implements Comparator, Serializable {
-    public int compare(Object o1, Object o2) {
+    @Override
+    public int compare(final Object o1, final Object o2) {
diff --git a/src/main/java/org/apache/commons/jxpath/util/TypeUtils.java b/src/main/java/org/apache/commons/jxpath/util/TypeUtils.java
index 3f506896..a4fd2a59 100644
--- a/src/main/java/org/apache/commons/jxpath/util/TypeUtils.java
+++ b/src/main/java/org/apache/commons/jxpath/util/TypeUtils.java
@@ -26,0 +27,2 @@ public class TypeUtils {
+        private static final long serialVersionUID = 1L;
+
@@ -43 +45 @@ public class TypeUtils {
-    public static synchronized void setTypeConverter(TypeConverter converter) {
+    public static synchronized void setTypeConverter(final TypeConverter converter) {
@@ -62 +64 @@ public class TypeUtils {
-    public static boolean canConvert(Object object, Class toType) {
+    public static boolean canConvert(final Object object, final Class toType) {
@@ -73 +75 @@ public class TypeUtils {
-    public static Object convert(Object object, Class toType) {
+    public static Object convert(final Object object, final Class toType) {
@@ -83 +85 @@ public class TypeUtils {
-    public static Class wrapPrimitive(Class p) {
+    public static Class wrapPrimitive(final Class p) {
diff --git a/src/main/java/org/apache/commons/jxpath/util/ValueUtils.java b/src/main/java/org/apache/commons/jxpath/util/ValueUtils.java
index add16e4c..843715aa 100644
--- a/src/main/java/org/apache/commons/jxpath/util/ValueUtils.java
+++ b/src/main/java/org/apache/commons/jxpath/util/ValueUtils.java
@@ -67 +67 @@ public class ValueUtils {
-    public static int getCollectionHint(Class clazz) {
+    public static int getCollectionHint(final Class clazz) {
@@ -102,2 +102,2 @@ public class ValueUtils {
-    public static int getIndexedPropertyLength(Object object,
-            IndexedPropertyDescriptor pd) {
+    public static int getIndexedPropertyLength(final Object object,
+            final IndexedPropertyDescriptor pd) {
@@ -108 +108 @@ public class ValueUtils {
-        Method readMethod = pd.getIndexedReadMethod();
+        final Method readMethod = pd.getIndexedReadMethod();
@@ -116 +116 @@ public class ValueUtils {
-                readMethod.invoke(object, new Integer(i));
+                readMethod.invoke(object, Integer.valueOf(i));
@@ -118 +118 @@ public class ValueUtils {
-            catch (Throwable t) {
+            catch (final Throwable t) {
@@ -155 +155 @@ public class ValueUtils {
-    public static Iterator iterate(Object collection) {
+    public static Iterator iterate(final Object collection) {
@@ -160 +160 @@ public class ValueUtils {
-            int length = Array.getLength(collection);
+            final int length = Array.getLength(collection);
@@ -164 +164 @@ public class ValueUtils {
-            ArrayList list = new ArrayList();
+            final ArrayList list = new ArrayList();
@@ -183 +183 @@ public class ValueUtils {
-    public static Object expandCollection(Object collection, int size) {
+    public static Object expandCollection(final Object collection, final int size) {
@@ -192 +192 @@ public class ValueUtils {
-            Object bigger =
+            final Object bigger =
@@ -223 +223 @@ public class ValueUtils {
-    public static Object remove(Object collection, int index) {
+    public static Object remove(Object collection, final int index) {
@@ -232,2 +232,2 @@ public class ValueUtils {
-            int length = Array.getLength(collection);
-            Object smaller =
+            final int length = Array.getLength(collection);
+            final Object smaller =
@@ -251 +251 @@ public class ValueUtils {
-            int size = ((List) collection).size();
+            final int size = ((List) collection).size();
@@ -258 +258 @@ public class ValueUtils {
-            Iterator it = ((Collection) collection).iterator();
+            final Iterator it = ((Collection) collection).iterator();
@@ -285 +285 @@ public class ValueUtils {
-    public static Object getValue(Object collection, int index) {
+    public static Object getValue(Object collection, final int index) {
@@ -307 +307 @@ public class ValueUtils {
-                Iterator it = ((Collection) collection).iterator();
+                final Iterator it = ((Collection) collection).iterator();
@@ -329 +329 @@ public class ValueUtils {
-    public static void setValue(Object collection, int index, Object value) {
+    public static void setValue(Object collection, final int index, final Object value) {
@@ -356,2 +356,2 @@ public class ValueUtils {
-    public static Object getValue(Object bean,
-            PropertyDescriptor propertyDescriptor) {
+    public static Object getValue(final Object bean,
+            final PropertyDescriptor propertyDescriptor) {
@@ -360 +360 @@ public class ValueUtils {
-            Method method =
+            final Method method =
@@ -367 +367 @@ public class ValueUtils {
-        catch (Exception ex) {
+        catch (final Exception ex) {
@@ -385,2 +385,2 @@ public class ValueUtils {
-    public static void setValue(Object bean,
-            PropertyDescriptor propertyDescriptor, Object value) {
+    public static void setValue(final Object bean,
+            final PropertyDescriptor propertyDescriptor, Object value) {
@@ -388 +388 @@ public class ValueUtils {
-            Method method =
+            final Method method =
@@ -396 +396 @@ public class ValueUtils {
-        catch (Exception ex) {
+        catch (final Exception ex) {
@@ -412 +412 @@ public class ValueUtils {
-    private static Object convert(Object value, Class type) {
+    private static Object convert(final Object value, final Class type) {
@@ -416 +416 @@ public class ValueUtils {
-        catch (Exception ex) {
+        catch (final Exception ex) {
@@ -434,2 +434,2 @@ public class ValueUtils {
-    public static Object getValue(Object bean,
-            PropertyDescriptor propertyDescriptor, int index) {
+    public static Object getValue(final Object bean,
+            final PropertyDescriptor propertyDescriptor, final int index) {
@@ -438 +438 @@ public class ValueUtils {
-                IndexedPropertyDescriptor ipd =
+                final IndexedPropertyDescriptor ipd =
@@ -440 +440 @@ public class ValueUtils {
-                Method method = ipd.getIndexedReadMethod();
+                final Method method = ipd.getIndexedReadMethod();
@@ -444 +444 @@ public class ValueUtils {
-                            new Integer(index));
+                            Integer.valueOf(index));
@@ -447,2 +447,2 @@ public class ValueUtils {
-            catch (InvocationTargetException ex) {
-                Throwable t = ex.getTargetException();
+            catch (final InvocationTargetException ex) {
+                final Throwable t = ex.getTargetException();
@@ -456 +456 @@ public class ValueUtils {
-            catch (Throwable ex) {
+            catch (final Throwable ex) {
@@ -477,2 +477,2 @@ public class ValueUtils {
-    public static void setValue(Object bean,
-            PropertyDescriptor propertyDescriptor, int index, Object value) {
+    public static void setValue(final Object bean,
+            final PropertyDescriptor propertyDescriptor, final int index, final Object value) {
@@ -481 +481 @@ public class ValueUtils {
-                IndexedPropertyDescriptor ipd =
+                final IndexedPropertyDescriptor ipd =
@@ -483 +483 @@ public class ValueUtils {
-                Method method = ipd.getIndexedWriteMethod();
+                final Method method = ipd.getIndexedWriteMethod();
@@ -487 +487 @@ public class ValueUtils {
-                            new Integer(index),
+                            Integer.valueOf(index),
@@ -492 +492 @@ public class ValueUtils {
-            catch (Exception ex) {
+            catch (final Exception ex) {
@@ -501 +501 @@ public class ValueUtils {
-        Object collection = getValue(bean, propertyDescriptor);
+        final Object collection = getValue(bean, propertyDescriptor);
@@ -533 +533 @@ public class ValueUtils {
-    public static DynamicPropertyHandler getDynamicPropertyHandler(Class clazz) {
+    public static DynamicPropertyHandler getDynamicPropertyHandler(final Class clazz) {
@@ -540 +540 @@ public class ValueUtils {
-            catch (Exception ex) {
+            catch (final Exception ex) {
@@ -566 +566 @@ public class ValueUtils {
-    public static Method getAccessibleMethod(Method method) {
+    public static Method getAccessibleMethod(final Method method) {
@@ -570 +570 @@ public class ValueUtils {
-            return (null);
+            return null;
@@ -575 +575 @@ public class ValueUtils {
-            return (null);
+            return null;
@@ -581 +581 @@ public class ValueUtils {
-            return (method);
+            return method;
@@ -584,2 +584,2 @@ public class ValueUtils {
-        String name = method.getName();
-        Class[] parameterTypes = method.getParameterTypes();
+        final String name = method.getName();
+        final Class[] parameterTypes = method.getParameterTypes();
@@ -588 +588 @@ public class ValueUtils {
-            Method aMethod = getAccessibleMethodFromInterfaceNest(clazz,
+            final Method aMethod = getAccessibleMethodFromInterfaceNest(clazz,
@@ -599 +599 @@ public class ValueUtils {
-                catch (NoSuchMethodException e) { //NOPMD
+                catch (final NoSuchMethodException ignore) { // NOPMD
@@ -618,2 +618,2 @@ public class ValueUtils {
-    private static Method getAccessibleMethodFromInterfaceNest(Class clazz,
-            String methodName, Class[] parameterTypes) {
+    private static Method getAccessibleMethodFromInterfaceNest(final Class clazz,
+            final String methodName, final Class[] parameterTypes) {
@@ -624,2 +624,2 @@ public class ValueUtils {
-        Class[] interfaces = clazz.getInterfaces();
-        for (int i = 0; i < interfaces.length; i++) {
+        final Class[] interfaces = clazz.getInterfaces();
+        for (final Class element : interfaces) {
@@ -628 +628 @@ public class ValueUtils {
-            if (!Modifier.isPublic(interfaces[i].getModifiers())) {
+            if (!Modifier.isPublic(element.getModifiers())) {
@@ -635 +635 @@ public class ValueUtils {
-                    interfaces[i].getDeclaredMethod(methodName, parameterTypes);
+                    element.getDeclaredMethod(methodName, parameterTypes);
@@ -637,2 +637,2 @@ public class ValueUtils {
-            catch (NoSuchMethodException e) { //NOPMD
-                //ignore
+            catch (final NoSuchMethodException ignore) { // NOPMD
+                // ignore
@@ -647 +647 @@ public class ValueUtils {
-                    interfaces[i],
+                    element,
@@ -656 +656 @@ public class ValueUtils {
-        return (method);
+        return method;
diff --git a/src/main/java/org/apache/commons/jxpath/xml/DOMParser.java b/src/main/java/org/apache/commons/jxpath/xml/DOMParser.java
index ff5e8682..1ff6979f 100644
--- a/src/main/java/org/apache/commons/jxpath/xml/DOMParser.java
+++ b/src/main/java/org/apache/commons/jxpath/xml/DOMParser.java
@@ -30 +30,2 @@ public class DOMParser extends XMLParser2 {
-    public Object parseXML(InputStream stream) {
+    @Override
+    public Object parseXML(final InputStream stream) {
@@ -32 +33 @@ public class DOMParser extends XMLParser2 {
-            DocumentBuilderFactory factory =
+            final DocumentBuilderFactory factory =
@@ -44 +45 @@ public class DOMParser extends XMLParser2 {
-        catch (Exception ex) {
+        catch (final Exception ex) {
diff --git a/src/main/java/org/apache/commons/jxpath/xml/DocumentContainer.java b/src/main/java/org/apache/commons/jxpath/xml/DocumentContainer.java
index e3ddb743..e87b7153 100644
--- a/src/main/java/org/apache/commons/jxpath/xml/DocumentContainer.java
+++ b/src/main/java/org/apache/commons/jxpath/xml/DocumentContainer.java
@@ -59,2 +59,2 @@ public class DocumentContainer extends XMLParser2 implements Container {
-    private URL xmlURL;
-    private String model;
+    private final URL xmlURL;
+    private final String model;
@@ -68 +68 @@ public class DocumentContainer extends XMLParser2 implements Container {
-    public static void registerXMLParser(String model, XMLParser parser) {
+    public static void registerXMLParser(final String model, final XMLParser parser) {
@@ -78 +78 @@ public class DocumentContainer extends XMLParser2 implements Container {
-    public static void registerXMLParser(String model, String parserClassName) {
+    public static void registerXMLParser(final String model, final String parserClassName) {
@@ -89 +89 @@ public class DocumentContainer extends XMLParser2 implements Container {
-    public DocumentContainer(URL xmlURL) {
+    public DocumentContainer(final URL xmlURL) {
@@ -101 +101 @@ public class DocumentContainer extends XMLParser2 implements Container {
-    public DocumentContainer(URL xmlURL, String model) {
+    public DocumentContainer(final URL xmlURL, final String model) {
@@ -112,0 +113 @@ public class DocumentContainer extends XMLParser2 implements Container {
+    @Override
@@ -129 +130 @@ public class DocumentContainer extends XMLParser2 implements Container {
-            catch (IOException ex) {
+            catch (final IOException ex) {
@@ -143,2 +144,3 @@ public class DocumentContainer extends XMLParser2 implements Container {
-    public Object parseXML(InputStream stream) {
-        XMLParser parser = getParser(model);
+    @Override
+    public Object parseXML(final InputStream stream) {
+        final XMLParser parser = getParser(model);
@@ -146 +148 @@ public class DocumentContainer extends XMLParser2 implements Container {
-            XMLParser2 parser2 = (XMLParser2) parser;
+            final XMLParser2 parser2 = (XMLParser2) parser;
@@ -162 +164,2 @@ public class DocumentContainer extends XMLParser2 implements Container {
-    public void setValue(Object value) {
+    @Override
+    public void setValue(final Object value) {
@@ -171 +174 @@ public class DocumentContainer extends XMLParser2 implements Container {
-    private static XMLParser getParser(String model) {
+    private static XMLParser getParser(final String model) {
@@ -174 +177 @@ public class DocumentContainer extends XMLParser2 implements Container {
-            String className = (String) parserClasses.get(model);
+            final String className = (String) parserClasses.get(model);
@@ -179 +182 @@ public class DocumentContainer extends XMLParser2 implements Container {
-                Class clazz = ClassLoaderUtil.getClass(className, true);
+                final Class clazz = ClassLoaderUtil.getClass(className, true);
@@ -182 +185 @@ public class DocumentContainer extends XMLParser2 implements Container {
-            catch (Exception ex) {
+            catch (final Exception ex) {
diff --git a/src/main/java/org/apache/commons/jxpath/xml/JDOMParser.java b/src/main/java/org/apache/commons/jxpath/xml/JDOMParser.java
index fd52c67e..8fcfb446 100644
--- a/src/main/java/org/apache/commons/jxpath/xml/JDOMParser.java
+++ b/src/main/java/org/apache/commons/jxpath/xml/JDOMParser.java
@@ -29 +29,2 @@ public class JDOMParser extends XMLParser2 {
-    public Object parseXML(InputStream stream) {
+    @Override
+    public Object parseXML(final InputStream stream) {
@@ -36 +37 @@ public class JDOMParser extends XMLParser2 {
-            SAXBuilder builder = new SAXBuilder();
+            final SAXBuilder builder = new SAXBuilder();
@@ -43 +44 @@ public class JDOMParser extends XMLParser2 {
-        catch (Exception ex) {
+        catch (final Exception ex) {
diff --git a/src/main/java/org/apache/commons/jxpath/xml/XMLParser2.java b/src/main/java/org/apache/commons/jxpath/xml/XMLParser2.java
index ed3dfee6..957c547e 100644
--- a/src/main/java/org/apache/commons/jxpath/xml/XMLParser2.java
+++ b/src/main/java/org/apache/commons/jxpath/xml/XMLParser2.java
@@ -38 +38 @@ public abstract class XMLParser2 implements XMLParser {
-    public void setValidating(boolean validating) {
+    public void setValidating(final boolean validating) {
@@ -65 +65 @@ public abstract class XMLParser2 implements XMLParser {
-    public void setNamespaceAware(boolean namespaceAware) {
+    public void setNamespaceAware(final boolean namespaceAware) {
@@ -74 +74 @@ public abstract class XMLParser2 implements XMLParser {
-    public void setIgnoringElementContentWhitespace(boolean whitespace) {
+    public void setIgnoringElementContentWhitespace(final boolean whitespace) {
@@ -101 +101 @@ public abstract class XMLParser2 implements XMLParser {
-    public void setExpandEntityReferences(boolean expandEntityRef) {
+    public void setExpandEntityReferences(final boolean expandEntityRef) {
@@ -119 +119 @@ public abstract class XMLParser2 implements XMLParser {
-    public void setIgnoringComments(boolean ignoreComments) {
+    public void setIgnoringComments(final boolean ignoreComments) {
@@ -137 +137 @@ public abstract class XMLParser2 implements XMLParser {
-    public void setCoalescing(boolean coalescing) {
+    public void setCoalescing(final boolean coalescing) {
@@ -140,0 +141 @@ public abstract class XMLParser2 implements XMLParser {
+    @Override
diff --git a/src/test/java/org/apache/commons/jxpath/BasicNodeSetTest.java b/src/test/java/org/apache/commons/jxpath/BasicNodeSetTest.java
index 193df852..26643511 100644
--- a/src/test/java/org/apache/commons/jxpath/BasicNodeSetTest.java
+++ b/src/test/java/org/apache/commons/jxpath/BasicNodeSetTest.java
@@ -34,0 +35 @@ public class BasicNodeSetTest extends JXPathTestCase {
+    @Override
@@ -43 +44 @@ public class BasicNodeSetTest extends JXPathTestCase {
-     * 
+     *
@@ -46,2 +47,2 @@ public class BasicNodeSetTest extends JXPathTestCase {
-    protected void addPointers(String xpath) {
-        for (Iterator iter = context.iteratePointers(xpath); iter.hasNext();) {
+    protected void addPointers(final String xpath) {
+        for (final Iterator iter = context.iteratePointers(xpath); iter.hasNext();) {
@@ -55 +56 @@ public class BasicNodeSetTest extends JXPathTestCase {
-     * 
+     *
@@ -58,2 +59,2 @@ public class BasicNodeSetTest extends JXPathTestCase {
-    protected void removePointers(String xpath) {
-        for (Iterator iter = context.iteratePointers(xpath); iter.hasNext();) {
+    protected void removePointers(final String xpath) {
+        for (final Iterator iter = context.iteratePointers(xpath); iter.hasNext();) {
@@ -81,4 +82,4 @@ public class BasicNodeSetTest extends JXPathTestCase {
-        assertEquals(list(new Integer(1), new Integer(2), new Integer(3),
-                new Integer(4)), nodeSet.getValues());
-        assertEquals(list(new Integer(1), new Integer(2), new Integer(3),
-                new Integer(4)), nodeSet.getNodes());
+        assertEquals(list(Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3),
+                Integer.valueOf(4)), nodeSet.getValues());
+        assertEquals(list(Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3),
+                Integer.valueOf(4)), nodeSet.getNodes());
@@ -95 +96 @@ public class BasicNodeSetTest extends JXPathTestCase {
-        assertEquals(list(new Integer(1), new Integer(2), new Integer(3)),
+        assertEquals(list(Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3)),
@@ -97 +98 @@ public class BasicNodeSetTest extends JXPathTestCase {
-        assertEquals(list(new Integer(1), new Integer(2), new Integer(3)),
+        assertEquals(list(Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3)),
@@ -122 +123 @@ public class BasicNodeSetTest extends JXPathTestCase {
-    protected void assertElementNames(List names, List elements) {
+    protected void assertElementNames(final List names, final List elements) {
@@ -124,2 +125,2 @@ public class BasicNodeSetTest extends JXPathTestCase {
-        Iterator nameIter = names.iterator();
-        Iterator elementIter = elements.iterator();
+        final Iterator nameIter = names.iterator();
+        final Iterator elementIter = elements.iterator();
@@ -136 +137 @@ public class BasicNodeSetTest extends JXPathTestCase {
-    protected void assertElementValues(List values, List elements) {
+    protected void assertElementValues(final List values, final List elements) {
@@ -138,2 +139,2 @@ public class BasicNodeSetTest extends JXPathTestCase {
-        Iterator valueIter = values.iterator();
-        Iterator elementIter = elements.iterator();
+        final Iterator valueIter = values.iterator();
+        final Iterator elementIter = elements.iterator();
@@ -143 +144 @@ public class BasicNodeSetTest extends JXPathTestCase {
-        
+
diff --git a/src/test/java/org/apache/commons/jxpath/JXPathTestCase.java b/src/test/java/org/apache/commons/jxpath/JXPathTestCase.java
index d1dd0367..5896964a 100644
--- a/src/test/java/org/apache/commons/jxpath/JXPathTestCase.java
+++ b/src/test/java/org/apache/commons/jxpath/JXPathTestCase.java
@@ -43,3 +43,3 @@ public abstract class JXPathTestCase extends TestCase {
-    
-    protected void assertXPathValue(JXPathContext ctx,
-                String xpath, Object expected)
+
+    protected void assertXPathValue(final JXPathContext ctx,
+                final String xpath, final Object expected)
@@ -48 +48 @@ public abstract class JXPathTestCase extends TestCase {
-        Object actual = ctx.getValue(xpath);
+        final Object actual = ctx.getValue(xpath);
@@ -52,2 +52,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected void assertXPathValue(JXPathContext ctx,
-                String xpath, Object expected, Class resultType)
+    protected void assertXPathValue(final JXPathContext ctx,
+                final String xpath, final Object expected, final Class resultType)
@@ -56 +56 @@ public abstract class JXPathTestCase extends TestCase {
-        Object actual = ctx.getValue(xpath, resultType);
+        final Object actual = ctx.getValue(xpath, resultType);
@@ -60,2 +60,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected void assertXPathValueLenient(JXPathContext ctx,
-                String xpath, Object expected)
+    protected void assertXPathValueLenient(final JXPathContext ctx,
+                final String xpath, final Object expected)
@@ -64 +64 @@ public abstract class JXPathTestCase extends TestCase {
-        Object actual = ctx.getValue(xpath);
+        final Object actual = ctx.getValue(xpath);
@@ -69,2 +69,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected void assertXPathSetValue(JXPathContext ctx,
-                String xpath, Object value)
+    protected void assertXPathSetValue(final JXPathContext ctx,
+                final String xpath, final Object value)
@@ -74,3 +74,3 @@ public abstract class JXPathTestCase extends TestCase {
-    
-    protected void assertXPathSetValue(JXPathContext ctx,
-                String xpath, Object value, Object expected)
+
+    protected void assertXPathSetValue(final JXPathContext ctx,
+                final String xpath, final Object value, final Object expected)
@@ -79 +79 @@ public abstract class JXPathTestCase extends TestCase {
-        Object actual = ctx.getValue(xpath);
+        final Object actual = ctx.getValue(xpath);
@@ -82,4 +82,4 @@ public abstract class JXPathTestCase extends TestCase {
-    
-    protected void assertXPathCreatePath(JXPathContext ctx,
-                String xpath, 
-                Object expectedValue, String expectedPath)
+
+    protected void assertXPathCreatePath(final JXPathContext ctx,
+                final String xpath,
+                final Object expectedValue, final String expectedPath)
@@ -87,2 +87,2 @@ public abstract class JXPathTestCase extends TestCase {
-        Pointer pointer = ctx.createPath(xpath);
-        assertEquals("Creating path <" + xpath + ">", 
+        final Pointer pointer = ctx.createPath(xpath);
+        assertEquals("Creating path <" + xpath + ">",
@@ -90,2 +90,2 @@ public abstract class JXPathTestCase extends TestCase {
-                
-        assertEquals("Creating path (pointer value) <" + xpath + ">", 
+
+        assertEquals("Creating path (pointer value) <" + xpath + ">",
@@ -93,2 +93,2 @@ public abstract class JXPathTestCase extends TestCase {
-                
-        assertEquals("Creating path (context value) <" + xpath + ">", 
+
+        assertEquals("Creating path (context value) <" + xpath + ">",
@@ -97,4 +97,4 @@ public abstract class JXPathTestCase extends TestCase {
-    
-    protected void assertXPathCreatePathAndSetValue(JXPathContext ctx,
-                String xpath, Object value,
-                String expectedPath)
+
+    protected void assertXPathCreatePathAndSetValue(final JXPathContext ctx,
+                final String xpath, final Object value,
+                final String expectedPath)
@@ -102,2 +102,2 @@ public abstract class JXPathTestCase extends TestCase {
-        Pointer pointer = ctx.createPathAndSetValue(xpath, value);
-        assertEquals("Creating path <" + xpath + ">", 
+        final Pointer pointer = ctx.createPathAndSetValue(xpath, value);
+        assertEquals("Creating path <" + xpath + ">",
@@ -105,2 +105,2 @@ public abstract class JXPathTestCase extends TestCase {
-                
-        assertEquals("Creating path (pointer value) <" + xpath + ">", 
+
+        assertEquals("Creating path (pointer value) <" + xpath + ">",
@@ -108,2 +108,2 @@ public abstract class JXPathTestCase extends TestCase {
-                
-        assertEquals("Creating path (context value) <" + xpath + ">", 
+
+        assertEquals("Creating path (context value) <" + xpath + ">",
@@ -111,4 +111,4 @@ public abstract class JXPathTestCase extends TestCase {
-    }    
-    
-    protected void assertXPathPointer(JXPathContext ctx,
-                String xpath, String expected)
+    }
+
+    protected void assertXPathPointer(final JXPathContext ctx,
+                final String xpath, final String expected)
@@ -117,2 +117,2 @@ public abstract class JXPathTestCase extends TestCase {
-        Pointer pointer = ctx.getPointer(xpath);
-        String actual = pointer.toString();
+        final Pointer pointer = ctx.getPointer(xpath);
+        final String actual = pointer.toString();
@@ -122,2 +122,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected void assertXPathPointerLenient(JXPathContext ctx,
-                String xpath, String expected)
+    protected void assertXPathPointerLenient(final JXPathContext ctx,
+                final String xpath, final String expected)
@@ -126,2 +126,2 @@ public abstract class JXPathTestCase extends TestCase {
-        Pointer pointer = ctx.getPointer(xpath);
-        String actual = pointer.toString();
+        final Pointer pointer = ctx.getPointer(xpath);
+        final String actual = pointer.toString();
@@ -131,2 +131,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected void assertXPathValueAndPointer(JXPathContext ctx,
-                String xpath, Object expectedValue, String expectedPointer)
+    protected void assertXPathValueAndPointer(final JXPathContext ctx,
+                final String xpath, final Object expectedValue, final String expectedPointer)
@@ -137,3 +137,3 @@ public abstract class JXPathTestCase extends TestCase {
-    
-    protected void assertXPathValueIterator(JXPathContext ctx,
-                String xpath, Collection expected)
+
+    protected void assertXPathValueIterator(final JXPathContext ctx,
+                final String xpath, final Collection expected)
@@ -148 +148 @@ public abstract class JXPathTestCase extends TestCase {
-        Iterator it = ctx.iterate(xpath);
+        final Iterator it = ctx.iterate(xpath);
@@ -157,3 +157,3 @@ public abstract class JXPathTestCase extends TestCase {
-        JXPathContext ctx,
-        String xpath,
-        Collection expected) 
+        final JXPathContext ctx,
+        final String xpath,
+        final Collection expected)
@@ -168 +168 @@ public abstract class JXPathTestCase extends TestCase {
-        Iterator it = ctx.iteratePointers(xpath);
+        final Iterator it = ctx.iteratePointers(xpath);
@@ -170 +170 @@ public abstract class JXPathTestCase extends TestCase {
-            Pointer pointer = (Pointer) it.next();
+            final Pointer pointer = (Pointer) it.next();
@@ -180,4 +180,4 @@ public abstract class JXPathTestCase extends TestCase {
-        JXPathContext context,
-        String path1,
-        String path2,
-        int expected) 
+        final JXPathContext context,
+        final String path1,
+        final String path2,
+        final int expected)
@@ -185,2 +185,2 @@ public abstract class JXPathTestCase extends TestCase {
-        NodePointer np1 = (NodePointer) context.getPointer(path1);
-        NodePointer np2 = (NodePointer) context.getPointer(path2);
+        final NodePointer np1 = (NodePointer) context.getPointer(path1);
+        final NodePointer np2 = (NodePointer) context.getPointer(path2);
@@ -199 +199 @@ public abstract class JXPathTestCase extends TestCase {
-    
+
@@ -201,3 +201,3 @@ public abstract class JXPathTestCase extends TestCase {
-            JXPathContext ctx,
-            String xpath,
-            Class clazz) 
+            final JXPathContext ctx,
+            final String xpath,
+            final Class clazz)
@@ -206,2 +206,2 @@ public abstract class JXPathTestCase extends TestCase {
-        Object actual = ctx.getValue(xpath);
-        assertTrue("Evaluating <" + xpath + "> = " + actual.getClass(), 
+        final Object actual = ctx.getValue(xpath);
+        assertTrue("Evaluating <" + xpath + "> = " + actual.getClass(),
@@ -210 +210 @@ public abstract class JXPathTestCase extends TestCase {
-    
+
@@ -212,3 +212,3 @@ public abstract class JXPathTestCase extends TestCase {
-            JXPathContext ctx,
-            String xpath,
-            Class clazz) 
+            final JXPathContext ctx,
+            final String xpath,
+            final Class clazz)
@@ -217,2 +217,2 @@ public abstract class JXPathTestCase extends TestCase {
-        Pointer actual = ctx.getPointer(xpath);
-        assertTrue("Evaluating <" + xpath + "> = " + actual.getNode().getClass(), 
+        final Pointer actual = ctx.getPointer(xpath);
+        assertTrue("Evaluating <" + xpath + "> = " + actual.getNode().getClass(),
@@ -221 +221 @@ public abstract class JXPathTestCase extends TestCase {
-    
+
@@ -226,2 +226,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected static List list(Object o1) {
-        List list = new ArrayList();
+    protected static List list(final Object o1) {
+        final List list = new ArrayList();
@@ -232,2 +232,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected static List list(Object o1, Object o2) {
-        List list = new ArrayList();
+    protected static List list(final Object o1, final Object o2) {
+        final List list = new ArrayList();
@@ -239,2 +239,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected static List list(Object o1, Object o2, Object o3) {
-        List list = new ArrayList();
+    protected static List list(final Object o1, final Object o2, final Object o3) {
+        final List list = new ArrayList();
@@ -247,2 +247,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected static Set set(Object o1, Object o2) {
-        Set list = new HashSet();
+    protected static Set set(final Object o1, final Object o2) {
+        final Set list = new HashSet();
@@ -254,2 +254,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected static Set set(Object o1, Object o2, Object o3) {
-        Set list = new HashSet();
+    protected static Set set(final Object o1, final Object o2, final Object o3) {
+        final Set list = new HashSet();
@@ -262,2 +262,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected static List list(Object o1, Object o2, Object o3, Object o4) {
-        List list = new ArrayList();
+    protected static List list(final Object o1, final Object o2, final Object o3, final Object o4) {
+        final List list = new ArrayList();
@@ -271,2 +271,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected static Set set(Object o1, Object o2, Object o3, Object o4) {
-        Set list = new HashSet();
+    protected static Set set(final Object o1, final Object o2, final Object o3, final Object o4) {
+        final Set list = new HashSet();
@@ -280,2 +280,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected static List list(Object o1, Object o2, Object o3,
-                Object o4, Object o5)
+    protected static List list(final Object o1, final Object o2, final Object o3,
+                final Object o4, final Object o5)
@@ -283 +283 @@ public abstract class JXPathTestCase extends TestCase {
-        List list = new ArrayList();
+        final List list = new ArrayList();
@@ -292,2 +292,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected static Set set(Object o1, Object o2, Object o3, 
-                Object o4, Object o5) 
+    protected static Set set(final Object o1, final Object o2, final Object o3,
+                final Object o4, final Object o5)
@@ -295 +295 @@ public abstract class JXPathTestCase extends TestCase {
-        Set list = new HashSet();
+        final Set list = new HashSet();
@@ -304,2 +304,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected static List list(Object o1, Object o2, Object o3,
-                Object o4, Object o5, Object o6)
+    protected static List list(final Object o1, final Object o2, final Object o3,
+                final Object o4, final Object o5, final Object o6)
@@ -307 +307 @@ public abstract class JXPathTestCase extends TestCase {
-        List list = new ArrayList();
+        final List list = new ArrayList();
@@ -317,2 +317,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected static Set set(Object o1, Object o2, Object o3,
-                Object o4, Object o5, Object o6)
+    protected static Set set(final Object o1, final Object o2, final Object o3,
+                final Object o4, final Object o5, final Object o6)
@@ -320 +320 @@ public abstract class JXPathTestCase extends TestCase {
-        Set list = new HashSet();
+        final Set list = new HashSet();
@@ -329,3 +329,3 @@ public abstract class JXPathTestCase extends TestCase {
-    
-    protected static List list(Object o1, Object o2, Object o3,
-                Object o4, Object o5, Object o6, Object o7)
+
+    protected static List list(final Object o1, final Object o2, final Object o3,
+                final Object o4, final Object o5, final Object o6, final Object o7)
@@ -333 +333 @@ public abstract class JXPathTestCase extends TestCase {
-        List list = new ArrayList();
+        final List list = new ArrayList();
@@ -344,2 +344,2 @@ public abstract class JXPathTestCase extends TestCase {
-    protected static Set set(Object o1, Object o2, Object o3,
-                Object o4, Object o5, Object o6, Object o7)
+    protected static Set set(final Object o1, final Object o2, final Object o3,
+                final Object o4, final Object o5, final Object o6, final Object o7)
@@ -347 +347 @@ public abstract class JXPathTestCase extends TestCase {
-        Set list = new HashSet();
+        final Set list = new HashSet();
@@ -357 +357 @@ public abstract class JXPathTestCase extends TestCase {
-    
+
diff --git a/src/test/java/org/apache/commons/jxpath/NestedTestBean.java b/src/test/java/org/apache/commons/jxpath/NestedTestBean.java
index 97f2dfb6..74ee7708 100644
--- a/src/test/java/org/apache/commons/jxpath/NestedTestBean.java
+++ b/src/test/java/org/apache/commons/jxpath/NestedTestBean.java
@@ -29 +29 @@ public class NestedTestBean {
-    public NestedTestBean(String name) {
+    public NestedTestBean(final String name) {
@@ -33 +33 @@ public class NestedTestBean {
-    public void setName(String name) {
+    public void setName(final String name) {
@@ -51 +51 @@ public class NestedTestBean {
-    public void setInt(int value) {
+    public void setInt(final int value) {
@@ -63 +63 @@ public class NestedTestBean {
-        new String[] { "String 1", "String 2", "String 3" };
+        { "String 1", "String 2", "String 3" };
@@ -69 +69 @@ public class NestedTestBean {
-    public void setStrings(String[] array) {
+    public void setStrings(final String[] array) {
@@ -72,0 +73 @@ public class NestedTestBean {
+    @Override
diff --git a/src/test/java/org/apache/commons/jxpath/TestBean.java b/src/test/java/org/apache/commons/jxpath/TestBean.java
index 92768252..25aa0e7a 100644
--- a/src/test/java/org/apache/commons/jxpath/TestBean.java
+++ b/src/test/java/org/apache/commons/jxpath/TestBean.java
@@ -50 +50 @@ public class TestBean {
-    public void setBeans(NestedTestBean[] beans) {
+    public void setBeans(final NestedTestBean[] beans) {
@@ -62 +62 @@ public class TestBean {
-    public void setBoolean(boolean bool) {
+    public void setBoolean(final boolean bool) {
@@ -74 +74 @@ public class TestBean {
-    public void setInt(int integer) {
+    public void setInt(final int integer) {
@@ -86 +86 @@ public class TestBean {
-    public int getIntegers(int index) {
+    public int getIntegers(final int index) {
@@ -90 +90 @@ public class TestBean {
-    public void setIntegers(int index, int value) {
+    public void setIntegers(final int index, final int value) {
@@ -105 +105 @@ public class TestBean {
-            list.add(new Integer(3));
+            list.add(Integer.valueOf(3));
@@ -125 +125 @@ public class TestBean {
-    public void setMap(Map map) {
+    public void setMap(final Map map) {
@@ -137 +137 @@ public class TestBean {
-    public void setNestedBean(NestedTestBean bean) {
+    public void setNestedBean(final NestedTestBean bean) {
@@ -141 +141 @@ public class TestBean {
-    private NestedTestBean object = new NestedTestBean("Name 5");
+    private final NestedTestBean object = new NestedTestBean("Name 5");
@@ -165 +165 @@ public class TestBean {
-            set.add(new Integer(4));
+            set.add(Integer.valueOf(4));
@@ -170,0 +171 @@ public class TestBean {
+    @Override
diff --git a/src/test/java/org/apache/commons/jxpath/TestMixedModelBean.java b/src/test/java/org/apache/commons/jxpath/TestMixedModelBean.java
index 82a5ef60..210f1e08 100644
--- a/src/test/java/org/apache/commons/jxpath/TestMixedModelBean.java
+++ b/src/test/java/org/apache/commons/jxpath/TestMixedModelBean.java
@@ -33,5 +33,5 @@ public class TestMixedModelBean {
-    private String string;
-    private TestBean bean;
-    private Container container;
-    private Document document;
-    private Element element;
+    private final String string;
+    private final TestBean bean;
+    private final Container container;
+    private final Document document;
+    private final Element element;
@@ -39 +39 @@ public class TestMixedModelBean {
-    private Map map;
+    private final Map map;
@@ -41 +41 @@ public class TestMixedModelBean {
-    private List list;
+    private final List list;
@@ -107 +107 @@ public class TestMixedModelBean {
-    public void setMatrix(int[][] matrix) {
+    public void setMatrix(final int[][] matrix) {
diff --git a/src/test/java/org/apache/commons/jxpath/TestNull.java b/src/test/java/org/apache/commons/jxpath/TestNull.java
index 1866278f..53b970c1 100644
--- a/src/test/java/org/apache/commons/jxpath/TestNull.java
+++ b/src/test/java/org/apache/commons/jxpath/TestNull.java
@@ -30 +30 @@ public class TestNull {
-    public void setNothing(Object something) {
+    public void setNothing(final Object something) {
diff --git a/src/test/java/org/apache/commons/jxpath/issues/JXPath113Test.java b/src/test/java/org/apache/commons/jxpath/issues/JXPath113Test.java
index 24550546..57f894c2 100644
--- a/src/test/java/org/apache/commons/jxpath/issues/JXPath113Test.java
+++ b/src/test/java/org/apache/commons/jxpath/issues/JXPath113Test.java
@@ -35,2 +35,2 @@ public class JXPath113Test extends JXPathTestCase
-        Document doc = JAXP.getDocument("<xml/>");
-        JXPathContext context = JXPathContext.newContext(doc);
+        final Document doc = JAXP.getDocument("<xml/>");
+        final JXPathContext context = JXPathContext.newContext(doc);
@@ -43 +43 @@ public class JXPath113Test extends JXPathTestCase
-        public static Document getDocument(String xml) throws Exception
+        public static Document getDocument(final String xml) throws Exception
@@ -48 +48 @@ public class JXPath113Test extends JXPathTestCase
-        public static Document getDocument(InputSource is) throws Exception
+        public static Document getDocument(final InputSource is) throws Exception
@@ -59 +59 @@ public class JXPath113Test extends JXPathTestCase
-                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+                final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
@@ -65 +65 @@ public class JXPath113Test extends JXPathTestCase
-            catch (ParserConfigurationException e)
+            catch (final ParserConfigurationException e)
diff --git a/src/test/java/org/apache/commons/jxpath/issues/JXPath118Test.java b/src/test/java/org/apache/commons/jxpath/issues/JXPath118Test.java
index 3e4bcc97..aab9d223 100644
--- a/src/test/java/org/apache/commons/jxpath/issues/JXPath118Test.java
+++ b/src/test/java/org/apache/commons/jxpath/issues/JXPath118Test.java
@@ -33,3 +33,3 @@ public class JXPath118Test extends TestCase
-        Object contextBean = new SomeChildClass();
-        JXPathContext context = JXPathContext.newContext(contextBean);
-        Iterator iteratePointers = context.iteratePointers("//*");
+        final Object contextBean = new SomeChildClass();
+        final JXPathContext context = JXPathContext.newContext(contextBean);
+        final Iterator iteratePointers = context.iteratePointers("//*");
@@ -53 +53 @@ public class JXPath118Test extends TestCase
-        public void setFoo(int foo)
+        public void setFoo(final int foo)
@@ -63 +63 @@ public class JXPath118Test extends TestCase
-        public void setBar(int bar)
+        public void setBar(final int bar)
@@ -73 +73 @@ public class JXPath118Test extends TestCase
-        public void setBaz(int baz)
+        public void setBaz(final int baz)
diff --git a/src/test/java/org/apache/commons/jxpath/issues/JXPath149Test.java b/src/test/java/org/apache/commons/jxpath/issues/JXPath149Test.java
index 55d1d53f..dc4558f7 100644
--- a/src/test/java/org/apache/commons/jxpath/issues/JXPath149Test.java
+++ b/src/test/java/org/apache/commons/jxpath/issues/JXPath149Test.java
@@ -25 +25 @@ public class JXPath149Test extends JXPathTestCase {
-        JXPathContext context = JXPathContext.newContext(null);
+        final JXPathContext context = JXPathContext.newContext(null);
diff --git a/src/test/java/org/apache/commons/jxpath/issues/JXPath172DynamicTest.java b/src/test/java/org/apache/commons/jxpath/issues/JXPath172DynamicTest.java
index ff41f1f9..9534bad5 100644
--- a/src/test/java/org/apache/commons/jxpath/issues/JXPath172DynamicTest.java
+++ b/src/test/java/org/apache/commons/jxpath/issues/JXPath172DynamicTest.java
@@ -36 +36 @@ public class JXPath172DynamicTest extends JXPathTestCase
-        return (new TestSuite(JXPath172DynamicTest.class));
+        return new TestSuite(JXPath172DynamicTest.class);
@@ -115 +115 @@ public class JXPath172DynamicTest extends JXPathTestCase
-     * 
+     *
@@ -119 +119 @@ public class JXPath172DynamicTest extends JXPathTestCase
-    private JXPathContext getContext(final String val, boolean lenient)
+    private JXPathContext getContext(final String val, final boolean lenient)
diff --git a/src/test/java/org/apache/commons/jxpath/issues/JXPath172Test.java b/src/test/java/org/apache/commons/jxpath/issues/JXPath172Test.java
index 63dc655b..2d741ddb 100644
--- a/src/test/java/org/apache/commons/jxpath/issues/JXPath172Test.java
+++ b/src/test/java/org/apache/commons/jxpath/issues/JXPath172Test.java
@@ -36 +36 @@ public class JXPath172Test extends JXPathTestCase
-        return (new TestSuite(JXPath172Test.class));
+        return new TestSuite(JXPath172Test.class);
@@ -96 +96 @@ public class JXPath172Test extends JXPathTestCase
-        catch (JXPathNotFoundException e)
+        catch (final JXPathNotFoundException e)
@@ -106 +106 @@ public class JXPath172Test extends JXPathTestCase
-        catch (JXPathNotFoundException e)
+        catch (final JXPathNotFoundException e)
@@ -116 +116 @@ public class JXPath172Test extends JXPathTestCase
-        catch (JXPathNotFoundException e)
+        catch (final JXPathNotFoundException e)
@@ -127 +127 @@ public class JXPath172Test extends JXPathTestCase
-     * 
+     *
@@ -131 +131 @@ public class JXPath172Test extends JXPathTestCase
-    private JXPathContext getContext(final String val, boolean lenient)
+    private JXPathContext getContext(final String val, final boolean lenient)
@@ -150 +150 @@ public class JXPath172Test extends JXPathTestCase
-        public void setValue(String value)
+        public void setValue(final String value)
diff --git a/src/test/java/org/apache/commons/jxpath/issues/JXPath177Test.java b/src/test/java/org/apache/commons/jxpath/issues/JXPath177Test.java
index 313ff1e6..3739302a 100644
--- a/src/test/java/org/apache/commons/jxpath/issues/JXPath177Test.java
+++ b/src/test/java/org/apache/commons/jxpath/issues/JXPath177Test.java
@@ -30 +30 @@ public class JXPath177Test extends TestCase
-        
+
@@ -46 +46 @@ public class JXPath177Test extends TestCase
-        
+
@@ -51 +51 @@ public class JXPath177Test extends TestCase
-        
+
@@ -54 +54 @@ public class JXPath177Test extends TestCase
-    private void doTest(String xp, String expected)
+    private void doTest(final String xp, final String expected)
@@ -56 +56 @@ public class JXPath177Test extends TestCase
-        JXPathContext xpathContext = JXPathContext.newContext(model);
+        final JXPathContext xpathContext = JXPathContext.newContext(model);
@@ -58,2 +58,2 @@ public class JXPath177Test extends TestCase
-        Pointer p = xpathContext.getPointer(xp);
-        Object result = p.getNode();
+        final Pointer p = xpathContext.getPointer(xp);
+        final Object result = p.getNode();
@@ -74 +74 @@ public class JXPath177Test extends TestCase
-        public JXPathVariablesResolver(Object root)
+        public JXPathVariablesResolver(final Object root)
@@ -79 +79,2 @@ public class JXPath177Test extends TestCase
-        public boolean isDeclaredVariable(String varName)
+        @Override
+        public boolean isDeclaredVariable(final String varName)
@@ -88 +89,2 @@ public class JXPath177Test extends TestCase
-        public Object getVariable(String varName)
+        @Override
+        public Object getVariable(final String varName)
@@ -102 +104,2 @@ public class JXPath177Test extends TestCase
-        public void declareVariable(String varName, Object value)
+        @Override
+        public void declareVariable(final String varName, final Object value)
@@ -107 +110,2 @@ public class JXPath177Test extends TestCase
-        public void undeclareVariable(String varName)
+        @Override
+        public void undeclareVariable(final String varName)
diff --git a/src/test/java/org/apache/commons/jxpath/ri/ExceptionHandlerTest.java b/src/test/java/org/apache/commons/jxpath/ri/ExceptionHandlerTest.java
index 250a6784..86cd559b 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/ExceptionHandlerTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/ExceptionHandlerTest.java
@@ -35 +35 @@ public class ExceptionHandlerTest extends JXPathTestCase {
-    private Bar bar = new Bar();
+    private final Bar bar = new Bar();
@@ -36,0 +37 @@ public class ExceptionHandlerTest extends JXPathTestCase {
+    @Override
@@ -40,2 +41,3 @@ public class ExceptionHandlerTest extends JXPathTestCase {
-            
-            public void handle(Throwable t, Pointer ptr) {
+
+            @Override
+            public void handle(final Throwable t, final Pointer ptr) {
@@ -52 +54 @@ public class ExceptionHandlerTest extends JXPathTestCase {
-    
+
@@ -56 +58 @@ public class ExceptionHandlerTest extends JXPathTestCase {
-    
+
diff --git a/src/test/java/org/apache/commons/jxpath/ri/JXPathCompiledExpressionTest.java b/src/test/java/org/apache/commons/jxpath/ri/JXPathCompiledExpressionTest.java
index 96964db9..6e5a934f 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/JXPathCompiledExpressionTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/JXPathCompiledExpressionTest.java
@@ -55 +55 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-    
+
@@ -92 +92 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-    
+
@@ -97 +97 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-        
+
@@ -108 +108 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-    
+
@@ -122 +122 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-    
+
@@ -133 +133 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-    
+
@@ -153 +153 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-    
+
@@ -159 +159 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-    
+
@@ -167 +167 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-    
+
@@ -176 +176 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-    
+
@@ -182 +182 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-    
+
@@ -186 +186 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
- 
+
@@ -191 +191 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-    
+
@@ -200 +200 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-    
+
@@ -205 +205 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-    
+
@@ -213 +213 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-    
+
@@ -217 +217 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-    
+
@@ -223 +223 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-    
+
@@ -233 +233 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-    
+
@@ -241 +241 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-    
+
@@ -246 +246 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-    
+
@@ -252,3 +252,3 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-    private void assertXPathExpression(String xpath, Class expectedClass, String expected) {
-        JXPathCompiledExpression expression = (JXPathCompiledExpression) JXPathContext.compile(xpath);
-        
+    private void assertXPathExpression(final String xpath, final Class expectedClass, final String expected) {
+        final JXPathCompiledExpression expression = (JXPathCompiledExpression) JXPathContext.compile(xpath);
+
@@ -258,2 +258,2 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-    
-    private void assertXPathExpression(String xpath, Class expectedClass) {
+
+    private void assertXPathExpression(final String xpath, final Class expectedClass) {
@@ -262 +262 @@ public class JXPathCompiledExpressionTest extends JXPathTestCase {
-    
+
diff --git a/src/test/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImplTestCase.java b/src/test/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImplTestCase.java
index 05204e0e..4280a527 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImplTestCase.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImplTestCase.java
@@ -34,2 +34,3 @@ public class JXPathContextReferenceImplTestCase extends TestCase {
-            while (JXPathContextReferenceImpl.removeNodePointerFactory(factory))
-                ;
+            while (JXPathContextReferenceImpl.removeNodePointerFactory(factory)) {
+
+            }
diff --git a/src/test/java/org/apache/commons/jxpath/ri/StressTest.java b/src/test/java/org/apache/commons/jxpath/ri/StressTest.java
index a7d9b10c..ee119102 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/StressTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/StressTest.java
@@ -27 +27 @@ public class StressTest extends TestCase {
-    
+
@@ -35,2 +35,2 @@ public class StressTest extends TestCase {
-        context = JXPathContext.newContext(null, new Double(100));
-        Thread[] threadArray = new Thread[THREAD_COUNT];
+        context = JXPathContext.newContext(null, Double.valueOf(100));
+        final Thread[] threadArray = new Thread[THREAD_COUNT];
@@ -40,3 +40,3 @@ public class StressTest extends TestCase {
-        
-        for (int i = 0; i < threadArray.length; i++) {
-            threadArray[i].start();
+
+        for (final Thread element : threadArray) {
+            element.start();
@@ -45 +45 @@ public class StressTest extends TestCase {
-        for (int i = 0; i < threadArray.length; i++) {
+        for (final Thread element : threadArray) {
@@ -47 +47 @@ public class StressTest extends TestCase {
-                threadArray[i].join();
+                element.join();
@@ -49 +49 @@ public class StressTest extends TestCase {
-            catch (InterruptedException e) {
+            catch (final InterruptedException e) {
@@ -58 +58 @@ public class StressTest extends TestCase {
-    }    
+    }
@@ -60,0 +61 @@ public class StressTest extends TestCase {
+        @Override
@@ -63,3 +64,3 @@ public class StressTest extends TestCase {
-                try { 
-                    double random = 1 + Math.random();
-                    double sum =
+                try {
+                    final double random = 1 + Math.random();
+                    final double sum =
@@ -72,2 +73,2 @@ public class StressTest extends TestCase {
-                }                    
-                catch (Throwable t) {
+                }
+                catch (final Throwable t) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/axes/RecursiveAxesTest.java b/src/test/java/org/apache/commons/jxpath/ri/axes/RecursiveAxesTest.java
index 0474a7ed..cae611ac 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/axes/RecursiveAxesTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/axes/RecursiveAxesTest.java
@@ -24 +24 @@ import org.apache.commons.jxpath.JXPathTestCase;
- * in descent down a recursive graph. 
+ * in descent down a recursive graph.
@@ -30,0 +31 @@ public class RecursiveAxesTest extends JXPathTestCase {
+    @Override
@@ -33,3 +34,3 @@ public class RecursiveAxesTest extends JXPathTestCase {
-        RecursiveBean bean1 = new RecursiveBean("one");
-        RecursiveBean bean2 = new RecursiveBean("two");
-        RecursiveBean bean3 = new RecursiveBean("three");
+        final RecursiveBean bean1 = new RecursiveBean("one");
+        final RecursiveBean bean2 = new RecursiveBean("two");
+        final RecursiveBean bean3 = new RecursiveBean("three");
diff --git a/src/test/java/org/apache/commons/jxpath/ri/axes/RecursiveBean.java b/src/test/java/org/apache/commons/jxpath/ri/axes/RecursiveBean.java
index 88fc7c71..f0b38ce2 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/axes/RecursiveBean.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/axes/RecursiveBean.java
@@ -26 +26 @@ public class RecursiveBean  {
-    private String name;
+    private final String name;
@@ -30 +30 @@ public class RecursiveBean  {
-    public RecursiveBean(String name) {
+    public RecursiveBean(final String name) {
@@ -33 +33 @@ public class RecursiveBean  {
-    
+
@@ -42 +42 @@ public class RecursiveBean  {
-    public void setFirst(RecursiveBean bean) {
+    public void setFirst(final RecursiveBean bean) {
@@ -50 +50 @@ public class RecursiveBean  {
-    public void setSecond(RecursiveBean bean) {
+    public void setSecond(final RecursiveBean bean) {
@@ -53 +53,2 @@ public class RecursiveBean  {
-    
+
+    @Override
diff --git a/src/test/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreterTest.java b/src/test/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreterTest.java
index 5f78fa36..19ee7286 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreterTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreterTest.java
@@ -44,0 +45 @@ public class SimplePathInterpreterTest extends TestCase {
+    @Override
@@ -47 +48 @@ public class SimplePathInterpreterTest extends TestCase {
-        HashMap submap = new HashMap();
+        final HashMap submap = new HashMap();
@@ -55 +56 @@ public class SimplePathInterpreterTest extends TestCase {
-                new Integer(2),
+                Integer.valueOf(2),
@@ -71 +72 @@ public class SimplePathInterpreterTest extends TestCase {
-                new Integer(1),
+                Integer.valueOf(1),
@@ -78 +79 @@ public class SimplePathInterpreterTest extends TestCase {
-                new Integer(1),
+                Integer.valueOf(1),
@@ -90 +91 @@ public class SimplePathInterpreterTest extends TestCase {
-                new Integer(1),
+                Integer.valueOf(1),
@@ -114 +115 @@ public class SimplePathInterpreterTest extends TestCase {
-                new Integer(1),
+                Integer.valueOf(1),
@@ -229 +230 @@ public class SimplePathInterpreterTest extends TestCase {
-                new Integer(1),
+                Integer.valueOf(1),
@@ -236 +237 @@ public class SimplePathInterpreterTest extends TestCase {
-                new Integer(1),
+                Integer.valueOf(1),
@@ -266 +267 @@ public class SimplePathInterpreterTest extends TestCase {
-                
+
@@ -430 +431 @@ public class SimplePathInterpreterTest extends TestCase {
-                new Integer(2),
+                Integer.valueOf(2),
@@ -459 +460 @@ public class SimplePathInterpreterTest extends TestCase {
-                new Integer(2),
+                Integer.valueOf(2),
@@ -478 +479 @@ public class SimplePathInterpreterTest extends TestCase {
-                new Integer(2),
+                Integer.valueOf(2),
@@ -492 +493 @@ public class SimplePathInterpreterTest extends TestCase {
-                new Integer(1),
+                Integer.valueOf(1),
@@ -536 +537 @@ public class SimplePathInterpreterTest extends TestCase {
-                new Integer(1),
+                Integer.valueOf(1),
@@ -543 +544 @@ public class SimplePathInterpreterTest extends TestCase {
-                new Integer(1),
+                Integer.valueOf(1),
@@ -559,2 +560,2 @@ public class SimplePathInterpreterTest extends TestCase {
-            String path, Object expectedValue, String expectedPath,
-            String expectedSignature)
+            final String path, final Object expectedValue, final String expectedPath,
+            final String expectedSignature)
@@ -569 +570 @@ public class SimplePathInterpreterTest extends TestCase {
-    
+
@@ -571,2 +572,2 @@ public class SimplePathInterpreterTest extends TestCase {
-            String path, Object expectedValue, String expectedPath,
-            String expectedSignature, String expectedValueSignature)
+            final String path, final Object expectedValue, final String expectedPath,
+            final String expectedSignature, final String expectedValueSignature)
@@ -574 +575 @@ public class SimplePathInterpreterTest extends TestCase {
-        Object value = context.getValue(path);
+        final Object value = context.getValue(path);
@@ -577 +578 @@ public class SimplePathInterpreterTest extends TestCase {
-        Pointer pointer = context.getPointer(path);
+        final Pointer pointer = context.getPointer(path);
@@ -583,2 +584,2 @@ public class SimplePathInterpreterTest extends TestCase {
-        
-        Pointer vPointer = ((NodePointer) pointer).getValuePointer();
+
+        final Pointer vPointer = ((NodePointer) pointer).getValuePointer();
@@ -589,2 +590,2 @@ public class SimplePathInterpreterTest extends TestCase {
-    private void assertNullPointer(String path, String expectedPath,
-            String expectedSignature)
+    private void assertNullPointer(final String path, final String expectedPath,
+            final String expectedSignature)
@@ -592 +593 @@ public class SimplePathInterpreterTest extends TestCase {
-        Pointer pointer = context.getPointer(path);
+        final Pointer pointer = context.getPointer(path);
@@ -599,2 +600,2 @@ public class SimplePathInterpreterTest extends TestCase {
-                
-        Pointer vPointer = ((NodePointer) pointer).getValuePointer();
+
+        final Pointer vPointer = ((NodePointer) pointer).getValuePointer();
@@ -612 +613 @@ public class SimplePathInterpreterTest extends TestCase {
-    private String pointerSignature(Pointer pointer) {
+    private String pointerSignature(final Pointer pointer) {
@@ -631 +632 @@ public class SimplePathInterpreterTest extends TestCase {
-        NodePointer parent = 
+        final NodePointer parent =
diff --git a/src/test/java/org/apache/commons/jxpath/ri/axes/TestBeanWithNode.java b/src/test/java/org/apache/commons/jxpath/ri/axes/TestBeanWithNode.java
index 66d3d517..58f938fc 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/axes/TestBeanWithNode.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/axes/TestBeanWithNode.java
@@ -39 +39 @@ public class TestBeanWithNode extends TestBean {
-    public void setVendor(Object node) {
+    public void setVendor(final Object node) {
@@ -42,0 +43 @@ public class TestBeanWithNode extends TestBean {
+    @Override
@@ -47 +48 @@ public class TestBeanWithNode extends TestBean {
-    public void setObject(Object object) {
+    public void setObject(final Object object) {
@@ -52 +53 @@ public class TestBeanWithNode extends TestBean {
-        DocumentContainer docCtr =
+        final DocumentContainer docCtr =
@@ -55,2 +56,2 @@ public class TestBeanWithNode extends TestBean {
-        Document doc = (Document) docCtr.getValue();
-        TestBeanWithNode tbwdom = new TestBeanWithNode();
+        final Document doc = (Document) docCtr.getValue();
+        final TestBeanWithNode tbwdom = new TestBeanWithNode();
diff --git a/src/test/java/org/apache/commons/jxpath/ri/compiler/ContextDependencyTest.java b/src/test/java/org/apache/commons/jxpath/ri/compiler/ContextDependencyTest.java
index 30272c9e..f9a4be17 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/compiler/ContextDependencyTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/compiler/ContextDependencyTest.java
@@ -40,2 +40,2 @@ public class ContextDependencyTest extends JXPathTestCase {
-    public void testContextDependency(String xpath, boolean expected) {
-        Expression expr = (Expression) Parser.parseExpression(xpath, new TreeCompiler());
+    public void testContextDependency(final String xpath, final boolean expected) {
+        final Expression expr = (Expression) Parser.parseExpression(xpath, new TreeCompiler());
diff --git a/src/test/java/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java b/src/test/java/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java
index 8d481e56..4610d255 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java
@@ -39,0 +40 @@ public class CoreFunctionTest extends JXPathTestCase {
+    @Override
@@ -43 +44 @@ public class CoreFunctionTest extends JXPathTestCase {
-            Variables vars = context.getVariables();
+            final Variables vars = context.getVariables();
@@ -82 +83 @@ public class CoreFunctionTest extends JXPathTestCase {
-        assertXPathValue(context, "string-length('12345')", new Double(5));
+        assertXPathValue(context, "string-length('12345')", Double.valueOf(5));
@@ -98,20 +99,20 @@ public class CoreFunctionTest extends JXPathTestCase {
-        assertXPathValue(context, "null()", null);        
-        assertXPathValue(context, "number('1')", new Double(1));
-        assertXPathValue(context, "number($bool_true)", new Double(1));
-        assertXPathValue(context, "number($bool_false)", new Double(0));
-        assertXPathValue(context, "floor(1.5)", new Double(1));
-        assertXPathValue(context, "floor(-1.5)", new Double(-2));
-        assertXPathValue(context, "ceiling(1.5)", new Double(2));
-        assertXPathValue(context, "ceiling(-1.5)", new Double(-1));
-        assertXPathValue(context, "round(1.5)", new Double(2));
-        assertXPathValue(context, "round(-1.5)", new Double(-1));
-
-        assertXPathValue(context, "floor('NaN')", new Double(Double.NaN));
-        assertXPathValue(context, "floor(-2 div 0)", new Double(Double.NEGATIVE_INFINITY));
-        assertXPathValue(context, "floor(2 div 0)", new Double(Double.POSITIVE_INFINITY));
-        assertXPathValue(context, "ceiling('NaN')", new Double(Double.NaN));
-        assertXPathValue(context, "ceiling(-2 div 0)", new Double(Double.NEGATIVE_INFINITY));
-        assertXPathValue(context, "ceiling(2 div 0)", new Double(Double.POSITIVE_INFINITY));
-        assertXPathValue(context, "round('NaN')", new Double(Double.NaN));
-        assertXPathValue(context, "round(-2 div 0)", new Double(Double.NEGATIVE_INFINITY));
-        assertXPathValue(context, "round(2 div 0)", new Double(Double.POSITIVE_INFINITY));
+        assertXPathValue(context, "null()", null);
+        assertXPathValue(context, "number('1')", Double.valueOf(1));
+        assertXPathValue(context, "number($bool_true)", Double.valueOf(1));
+        assertXPathValue(context, "number($bool_false)", Double.valueOf(0));
+        assertXPathValue(context, "floor(1.5)", Double.valueOf(1));
+        assertXPathValue(context, "floor(-1.5)", Double.valueOf(-2));
+        assertXPathValue(context, "ceiling(1.5)", Double.valueOf(2));
+        assertXPathValue(context, "ceiling(-1.5)", Double.valueOf(-1));
+        assertXPathValue(context, "round(1.5)", Double.valueOf(2));
+        assertXPathValue(context, "round(-1.5)", Double.valueOf(-1));
+
+        assertXPathValue(context, "floor('NaN')", Double.valueOf(Double.NaN));
+        assertXPathValue(context, "floor(-2 div 0)", Double.valueOf(Double.NEGATIVE_INFINITY));
+        assertXPathValue(context, "floor(2 div 0)", Double.valueOf(Double.POSITIVE_INFINITY));
+        assertXPathValue(context, "ceiling('NaN')", Double.valueOf(Double.NaN));
+        assertXPathValue(context, "ceiling(-2 div 0)", Double.valueOf(Double.NEGATIVE_INFINITY));
+        assertXPathValue(context, "ceiling(2 div 0)", Double.valueOf(Double.POSITIVE_INFINITY));
+        assertXPathValue(context, "round('NaN')", Double.valueOf(Double.NaN));
+        assertXPathValue(context, "round(-2 div 0)", Double.valueOf(Double.NEGATIVE_INFINITY));
+        assertXPathValue(context, "round(2 div 0)", Double.valueOf(Double.POSITIVE_INFINITY));
@@ -122 +123,2 @@ public class CoreFunctionTest extends JXPathTestCase {
-            public Pointer getPointerByID(JXPathContext context, String id) {
+            @Override
+            public Pointer getPointerByID(final JXPathContext context, final String id) {
@@ -142,0 +145 @@ public class CoreFunctionTest extends JXPathTestCase {
+            @Override
@@ -144,3 +147,3 @@ public class CoreFunctionTest extends JXPathTestCase {
-                JXPathContext context,
-                String key,
-                String value) 
+                final JXPathContext context,
+                final String key,
+                final String value)
@@ -157,2 +160,3 @@ public class CoreFunctionTest extends JXPathTestCase {
-            public Pointer getPointerByKey(JXPathContext context, String key,
-                    String value) {
+            @Override
+            public Pointer getPointerByKey(final JXPathContext context, final String key,
+                    final String value) {
@@ -162,2 +166,3 @@ public class CoreFunctionTest extends JXPathTestCase {
-            public NodeSet getNodeSetByKey(JXPathContext context,
-                    String keyName, Object keyValue) {
+            @Override
+            public NodeSet getNodeSetByKey(final JXPathContext context,
+                    final String keyName, final Object keyValue) {
@@ -165,0 +171 @@ public class CoreFunctionTest extends JXPathTestCase {
+                    @Override
@@ -169,0 +176 @@ public class CoreFunctionTest extends JXPathTestCase {
+                    @Override
@@ -174,0 +182 @@ public class CoreFunctionTest extends JXPathTestCase {
+                    @Override
@@ -194,2 +202,2 @@ public class CoreFunctionTest extends JXPathTestCase {
-        
-        DecimalFormatSymbols symbols = new DecimalFormatSymbols();
+
+        final DecimalFormatSymbols symbols = new DecimalFormatSymbols();
@@ -197 +205 @@ public class CoreFunctionTest extends JXPathTestCase {
-        
+
@@ -199 +207 @@ public class CoreFunctionTest extends JXPathTestCase {
-        
+
@@ -211,2 +219,2 @@ public class CoreFunctionTest extends JXPathTestCase {
-            context, 
-            "format-number(0.123456789, '##%')", 
+            context,
+            "format-number(0.123456789, '##%')",
diff --git a/src/test/java/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java b/src/test/java/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java
index b1083ba9..3760ba65 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java
@@ -29,0 +30 @@ public class CoreOperationTest extends JXPathTestCase {
+    @Override
@@ -33,2 +34,2 @@ public class CoreOperationTest extends JXPathTestCase {
-            Variables vars = context.getVariables();
-            vars.declareVariable("integer", new Integer(1));
+            final Variables vars = context.getVariables();
+            vars.declareVariable("integer", Integer.valueOf(1));
@@ -36 +37 @@ public class CoreOperationTest extends JXPathTestCase {
-            vars.declareVariable("nan", new Double(Double.NaN));
+            vars.declareVariable("nan", Double.valueOf(Double.NaN));
@@ -43 +44 @@ public class CoreOperationTest extends JXPathTestCase {
-        assertXPathValue(context, "1", new Double(1.0));
+        assertXPathValue(context, "1", Double.valueOf(1.0));
@@ -45 +46 @@ public class CoreOperationTest extends JXPathTestCase {
-        assertXPathValueIterator(context, "1", list(new Double(1.0)));
+        assertXPathValueIterator(context, "1", list(Double.valueOf(1.0)));
@@ -49,7 +50,7 @@ public class CoreOperationTest extends JXPathTestCase {
-        assertXPathValue(context, "-1", new Double(-1.0));
-        assertXPathValue(context, "2 + 2", new Double(4.0));
-        assertXPathValue(context, "3 - 2", new Double(1.0));
-        assertXPathValue(context, "1 + 2 + 3 - 4 + 5", new Double(7.0));
-        assertXPathValue(context, "3 * 2", new Double(3.0 * 2.0));
-        assertXPathValue(context, "3 div 2", new Double(3.0 / 2.0));
-        assertXPathValue(context, "5 mod 2", new Double(1.0));
+        assertXPathValue(context, "-1", Double.valueOf(-1.0));
+        assertXPathValue(context, "2 + 2", Double.valueOf(4.0));
+        assertXPathValue(context, "3 - 2", Double.valueOf(1.0));
+        assertXPathValue(context, "1 + 2 + 3 - 4 + 5", Double.valueOf(7.0));
+        assertXPathValue(context, "3 * 2", Double.valueOf(3.0 * 2.0));
+        assertXPathValue(context, "3 div 2", Double.valueOf(3.0 / 2.0));
+        assertXPathValue(context, "5 mod 2", Double.valueOf(1.0));
@@ -58 +59 @@ public class CoreOperationTest extends JXPathTestCase {
-        assertXPathValue(context, "5.9 mod 2.1", new Double(1.0));
+        assertXPathValue(context, "5.9 mod 2.1", Double.valueOf(1.0));
@@ -60,3 +61,3 @@ public class CoreOperationTest extends JXPathTestCase {
-        assertXPathValue(context, "5 mod -2", new Double(1.0));
-        assertXPathValue(context, "-5 mod 2", new Double(-1.0));
-        assertXPathValue(context, "-5 mod -2", new Double(-1.0));
+        assertXPathValue(context, "5 mod -2", Double.valueOf(1.0));
+        assertXPathValue(context, "-5 mod 2", Double.valueOf(-1.0));
+        assertXPathValue(context, "-5 mod -2", Double.valueOf(-1.0));
@@ -78 +79 @@ public class CoreOperationTest extends JXPathTestCase {
-        assertXPathValue(context, "$integer", new Double(1), Double.class);
+        assertXPathValue(context, "$integer", Double.valueOf(1), Double.class);
diff --git a/src/test/java/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java b/src/test/java/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java
index e6069db5..7ab105e9 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java
@@ -49,0 +50 @@ public class ExtensionFunctionTest extends JXPathTestCase {
+    @Override
@@ -54 +55 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            Variables vars = context.getVariables();
+            final Variables vars = context.getVariables();
@@ -57 +58 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            FunctionLibrary lib = new FunctionLibrary();
+            final FunctionLibrary lib = new FunctionLibrary();
@@ -73,0 +75 @@ public class ExtensionFunctionTest extends JXPathTestCase {
+    @Override
@@ -79,2 +81,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        Object[] args = new Object[] { new Integer(1), "x" };
-        Function func = functions.getFunction("test", "new", args);
+        final Object[] args = { Integer.valueOf(1), "x" };
+        final Function func = functions.getFunction("test", "new", args);
@@ -89,2 +91,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        Object[] args = new Object[] { "baz" };
-        Function func = functions.getFunction("test", "new", args);
+        final Object[] args = { "baz" };
+        final Function func = functions.getFunction("test", "new", args);
@@ -93 +95 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            func.invoke(new Context(new Integer(1)), args).toString(),
+            func.invoke(new Context(Integer.valueOf(1)), args).toString(),
@@ -98,2 +100,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        Object[] args = new Object[] { new Integer(1), "x" };
-        Function func = functions.getFunction("test", "build", args);
+        final Object[] args = { Integer.valueOf(1), "x" };
+        final Function func = functions.getFunction("test", "build", args);
@@ -107,2 +109,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        Object[] args = new Object[] { "7", new Integer(1)};
-        Function func = functions.getFunction("test", "build", args);
+        final Object[] args = { "7", Integer.valueOf(1)};
+        final Function func = functions.getFunction("test", "build", args);
@@ -116,2 +118,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        Object[] args = new Object[] { new TestFunctions()};
-        Function func = functions.getFunction("test", "getFoo", args);
+        final Object[] args = { new TestFunctions()};
+        final Function func = functions.getFunction("test", "getFoo", args);
@@ -125,2 +127,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        Object[] args = new Object[0];
-        Function func = functions.getFunction("test", "path", args);
+        final Object[] args = {};
+        final Function func = functions.getFunction("test", "path", args);
@@ -129 +131 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            func.invoke(new Context(new Integer(1)), args),
+            func.invoke(new Context(Integer.valueOf(1)), args),
@@ -134,2 +136,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        Object[] args = new Object[] { new TestFunctions()};
-        Function func = functions.getFunction("test", "instancePath", args);
+        final Object[] args = { new TestFunctions()};
+        final Function func = functions.getFunction("test", "instancePath", args);
@@ -138 +140 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            func.invoke(new Context(new Integer(1)), args),
+            func.invoke(new Context(Integer.valueOf(1)), args),
@@ -143,2 +145,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        Object[] args = new Object[] { new TestFunctions(), "*" };
-        Function func = functions.getFunction("test", "pathWithSuffix", args);
+        final Object[] args = { new TestFunctions(), "*" };
+        final Function func = functions.getFunction("test", "pathWithSuffix", args);
@@ -147 +149 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            func.invoke(new Context(new Integer(1)), args),
+            func.invoke(new Context(Integer.valueOf(1)), args),
@@ -152 +154 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        
+
@@ -176,2 +178,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        
-        context.getVariables().declareVariable("A", "baz");        
+
+        context.getVariables().declareVariable("A", "baz");
@@ -185 +187 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        assertXPathValue(context, "length('foo')", new Integer(3));
+        assertXPathValue(context, "length('foo')", Integer.valueOf(3));
@@ -192 +194 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        
+
@@ -205 +207 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-    
+
@@ -207,2 +209,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        
-        List list = new ArrayList();
+
+        final List list = new ArrayList();
@@ -213,4 +215,4 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            context, 
-            "size($myList)", 
-            new Integer(1));
-    
+            context,
+            "size($myList)",
+            Integer.valueOf(1));
+
@@ -218,4 +220,4 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            context, 
-            "size(beans)", 
-            new Integer(2));
-            
+            context,
+            "size(beans)",
+            Integer.valueOf(2));
+
@@ -224,2 +226,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        
-        JXPathContext context = JXPathContext.newContext(new ArrayList());
+
+        final JXPathContext context = JXPathContext.newContext(new ArrayList());
@@ -252 +254 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        
+
@@ -262,2 +264,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            context, 
-            "//.[test:isMap()]/Key1", 
+            context,
+            "//.[test:isMap()]/Key1",
@@ -271 +273 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            new Double(7));
+            Double.valueOf(7));
@@ -274 +276 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        // and checks their type for testing purposes            
+        // and checks their type for testing purposes
@@ -278 +280,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            new Integer(21));
+            Integer.valueOf(21));
+
@@ -280 +282,0 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        
@@ -282 +284 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        // and checks their type for testing purposes            
+        // and checks their type for testing purposes
@@ -286,2 +288,2 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            new Integer(21));
-            
+            Integer.valueOf(21));
+
@@ -295 +297 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-    
+
@@ -306 +308 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            
+
@@ -310 +312 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            "foo");        
+            "foo");
@@ -315,3 +317,3 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            "foo");   
-        
-        List list = new ArrayList();
+            "foo");
+
+        final List list = new ArrayList();
@@ -321 +323 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        Object values = context.getValue("test:items($list)");
+        final Object values = context.getValue("test:items($list)");
@@ -344 +346 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            
+
@@ -349 +351 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-            "/beans[1]/name");        
+            "/beans[1]/name");
@@ -386 +388 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        private Object object;
+        private final Object object;
@@ -388 +390 @@ public class ExtensionFunctionTest extends JXPathTestCase {
-        public Context(Object object) {
+        public Context(final Object object) {
@@ -391,0 +394 @@ public class ExtensionFunctionTest extends JXPathTestCase {
+        @Override
@@ -396,0 +400 @@ public class ExtensionFunctionTest extends JXPathTestCase {
+        @Override
@@ -400,0 +405 @@ public class ExtensionFunctionTest extends JXPathTestCase {
+        @Override
@@ -404,0 +410 @@ public class ExtensionFunctionTest extends JXPathTestCase {
+        @Override
diff --git a/src/test/java/org/apache/commons/jxpath/ri/compiler/TestFunctions.java b/src/test/java/org/apache/commons/jxpath/ri/compiler/TestFunctions.java
index ac947d22..ee5d8ff5 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/compiler/TestFunctions.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/compiler/TestFunctions.java
@@ -21 +20,0 @@ import java.util.Collection;
-import java.util.Iterator;
@@ -41 +40 @@ public class TestFunctions {
-    public TestFunctions(int foo, String bar) {
+    public TestFunctions(final int foo, final String bar) {
@@ -46 +45 @@ public class TestFunctions {
-    public TestFunctions(ExpressionContext context, String bar) {
+    public TestFunctions(final ExpressionContext context, final String bar) {
@@ -51,2 +50,2 @@ public class TestFunctions {
-    
-    public TestFunctions(int foo, Object object, boolean another) {
+
+    public TestFunctions(final int foo, final Object object, final boolean another) {
@@ -68 +67 @@ public class TestFunctions {
-    public TestFunctions setFooAndBar(int foo, String bar) {
+    public TestFunctions setFooAndBar(final int foo, final String bar) {
@@ -74 +73 @@ public class TestFunctions {
-    public static TestFunctions build(int foo, String bar) {
+    public static TestFunctions build(final int foo, final String bar) {
@@ -77,0 +77 @@ public class TestFunctions {
+    @Override
@@ -82 +82 @@ public class TestFunctions {
-    public static String path(ExpressionContext context) {
+    public static String path(final ExpressionContext context) {
@@ -86 +86 @@ public class TestFunctions {
-    public String instancePath(ExpressionContext context) {
+    public String instancePath(final ExpressionContext context) {
@@ -90 +90 @@ public class TestFunctions {
-    public String pathWithSuffix(ExpressionContext context, String suffix) {
+    public String pathWithSuffix(final ExpressionContext context, final String suffix) {
@@ -95,2 +95,2 @@ public class TestFunctions {
-        ExpressionContext context,
-        ExpressionContext child) 
+        final ExpressionContext context,
+        final ExpressionContext child)
@@ -104,3 +104,3 @@ public class TestFunctions {
-    public static boolean isMap(ExpressionContext context) {
-        Pointer ptr = context.getContextNodePointer();
-        return ptr == null ? false : (ptr.getValue() instanceof Map);
+    public static boolean isMap(final ExpressionContext context) {
+        final Pointer ptr = context.getContextNodePointer();
+        return ptr == null ? false : ptr.getValue() instanceof Map;
@@ -113,3 +113,2 @@ public class TestFunctions {
-    public static int count(ExpressionContext context, Collection col) {
-        for (Iterator iter = col.iterator(); iter.hasNext();) {
-            Object element = iter.next();
+    public static int count(final ExpressionContext context, final Collection col) {
+        for (final Object element : col) {
@@ -122,2 +121,2 @@ public class TestFunctions {
-    
-    public static int countPointers(NodeSet nodeSet) {
+
+    public static int countPointers(final NodeSet nodeSet) {
@@ -126,2 +125,2 @@ public class TestFunctions {
-    
-    public static String string(String string) {
+
+    public static String string(final String string) {
@@ -130 +129 @@ public class TestFunctions {
-    
+
@@ -132 +131 @@ public class TestFunctions {
-        ArrayList list = new ArrayList();
+        final ArrayList list = new ArrayList();
@@ -137,4 +136,4 @@ public class TestFunctions {
-    
-    public static NodeSet nodeSet(ExpressionContext context) {
-        JXPathContext jxpathCtx = context.getJXPathContext();
-        BasicNodeSet set = new BasicNodeSet();
+
+    public static NodeSet nodeSet(final ExpressionContext context) {
+        final JXPathContext jxpathCtx = context.getJXPathContext();
+        final BasicNodeSet set = new BasicNodeSet();
@@ -143 +142 @@ public class TestFunctions {
-        
+
@@ -146,2 +145,2 @@ public class TestFunctions {
-    
-    public static Collection items(Collection arg) {
+
+    public static Collection items(final Collection arg) {
@@ -151 +150 @@ public class TestFunctions {
-    public static Boolean isInstance(Object o, Class c) {
+    public static Boolean isInstance(final Object o, final Class c) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/compiler/TestFunctions2.java b/src/test/java/org/apache/commons/jxpath/ri/compiler/TestFunctions2.java
index d3e37927..e5b17bf2 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/compiler/TestFunctions2.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/compiler/TestFunctions2.java
@@ -24 +24 @@ public class TestFunctions2 {
-    public static int increment(int i) {
+    public static int increment(final int i) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/compiler/VariableFactory.java b/src/test/java/org/apache/commons/jxpath/ri/compiler/VariableFactory.java
index 3bc33e12..36ff9a6f 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/compiler/VariableFactory.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/compiler/VariableFactory.java
@@ -30,0 +31 @@ public class VariableFactory extends AbstractFactory {
+    @Override
@@ -32,5 +33,5 @@ public class VariableFactory extends AbstractFactory {
-        JXPathContext context,
-        Pointer pointer,
-        Object parent,
-        String name,
-        int index) 
+        final JXPathContext context,
+        final Pointer pointer,
+        final Object parent,
+        final String name,
+        final int index)
@@ -56 +57,2 @@ public class VariableFactory extends AbstractFactory {
-    public boolean declareVariable(JXPathContext context, String name) {
+    @Override
+    public boolean declareVariable(final JXPathContext context, final String name) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/compiler/VariableTest.java b/src/test/java/org/apache/commons/jxpath/ri/compiler/VariableTest.java
index 2776ad97..86dc3f82 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/compiler/VariableTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/compiler/VariableTest.java
@@ -30,0 +31 @@ public class VariableTest extends JXPathTestCase {
+    @Override
@@ -36,3 +37,3 @@ public class VariableTest extends JXPathTestCase {
-            Variables vars = context.getVariables();
-            vars.declareVariable("a", new Double(1));
-            vars.declareVariable("b", new Double(1));
+            final Variables vars = context.getVariables();
+            vars.declareVariable("a", Double.valueOf(1));
+            vars.declareVariable("b", Double.valueOf(1));
@@ -41,2 +42,2 @@ public class VariableTest extends JXPathTestCase {
-            vars.declareVariable("integer", new Integer(1));
-            vars.declareVariable("nan", new Double(Double.NaN));
+            vars.declareVariable("integer", Integer.valueOf(1));
+            vars.declareVariable("nan", Double.valueOf(Double.NaN));
@@ -49 +50 @@ public class VariableTest extends JXPathTestCase {
-        assertXPathValueAndPointer(context, "$a", new Double(1), "$a");
+        assertXPathValueAndPointer(context, "$a", Double.valueOf(1), "$a");
@@ -57 +58 @@ public class VariableTest extends JXPathTestCase {
-        assertXPathValue(context, "$a + 1", new Double(2));
+        assertXPathValue(context, "$a + 1", Double.valueOf(2));
@@ -69 +70 @@ public class VariableTest extends JXPathTestCase {
-        catch (Exception ex) {
+        catch (final Exception ex) {
@@ -75 +76 @@ public class VariableTest extends JXPathTestCase {
-        
+
@@ -78 +79 @@ public class VariableTest extends JXPathTestCase {
-            context.setValue("$none", new Integer(1));
+            context.setValue("$none", Integer.valueOf(1));
@@ -80 +81 @@ public class VariableTest extends JXPathTestCase {
-        catch (Exception ex) {
+        catch (final Exception ex) {
@@ -89 +90 @@ public class VariableTest extends JXPathTestCase {
-        JXPathContext nestedContext = JXPathContext.newContext(context, null);
+        final JXPathContext nestedContext = JXPathContext.newContext(context, null);
@@ -91 +92 @@ public class VariableTest extends JXPathTestCase {
-        assertXPathValue(nestedContext, "$a", new Double(1));
+        assertXPathValue(nestedContext, "$a", Double.valueOf(1));
@@ -95 +96 @@ public class VariableTest extends JXPathTestCase {
-        assertXPathSetValue(context, "$x", new Integer(1));
+        assertXPathSetValue(context, "$x", Integer.valueOf(1));
@@ -113 +114 @@ public class VariableTest extends JXPathTestCase {
-        // Calls factory.declareVariable("stringArray"). 
+        // Calls factory.declareVariable("stringArray").
@@ -129 +130 @@ public class VariableTest extends JXPathTestCase {
-        // Calls factory.declareVariable("stringArray"). 
+        // Calls factory.declareVariable("stringArray").
@@ -179 +180 @@ public class VariableTest extends JXPathTestCase {
-        // Calls factory.declareVariable("test"). 
+        // Calls factory.declareVariable("test").
@@ -190 +191 @@ public class VariableTest extends JXPathTestCase {
-        // Calls factory.declareVariable("test"). 
+        // Calls factory.declareVariable("test").
@@ -204 +205 @@ public class VariableTest extends JXPathTestCase {
-        // That one should produce an instance of TestBean and 
+        // That one should produce an instance of TestBean and
@@ -217 +218 @@ public class VariableTest extends JXPathTestCase {
-        // That one should produce an instance of TestBean and 
+        // That one should produce an instance of TestBean and
@@ -257 +258 @@ public class VariableTest extends JXPathTestCase {
-    
+
@@ -259,2 +260,2 @@ public class VariableTest extends JXPathTestCase {
-        assertXPathValue(context, "count($a | /document/vendor/location)", new Double(3));
-        assertXPathValue(context, "count($a | /list)", new Double(7)); //$o + list which contains six discrete values (one is duped, wrapped in a Container)
+        assertXPathValue(context, "count($a | /document/vendor/location)", Double.valueOf(3));
+        assertXPathValue(context, "count($a | /list)", Double.valueOf(7)); //$o + list which contains six discrete values (one is duped, wrapped in a Container)
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/AliasedNamespaceIterationTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/AliasedNamespaceIterationTest.java
index a5af442f..4c97e2bb 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/AliasedNamespaceIterationTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/AliasedNamespaceIterationTest.java
@@ -32,2 +32,2 @@ public class AliasedNamespaceIterationTest extends JXPathTestCase {
-    protected DocumentContainer createDocumentContainer(String model) {
-        DocumentContainer result = new DocumentContainer(JXPathTestCase.class
+    protected DocumentContainer createDocumentContainer(final String model) {
+        final DocumentContainer result = new DocumentContainer(JXPathTestCase.class
@@ -38,2 +38,2 @@ public class AliasedNamespaceIterationTest extends JXPathTestCase {
-    protected JXPathContext createContext(String model) {
-        JXPathContext context = JXPathContext.newContext(createDocumentContainer(model));
+    protected JXPathContext createContext(final String model) {
+        final JXPathContext context = JXPathContext.newContext(createDocumentContainer(model));
@@ -44 +44 @@ public class AliasedNamespaceIterationTest extends JXPathTestCase {
-    protected void doTestIterate(String xpath, String model, Collection expected) {
+    protected void doTestIterate(final String xpath, final String model, final Collection expected) {
@@ -48 +48 @@ public class AliasedNamespaceIterationTest extends JXPathTestCase {
-    protected void doTestIterate(String model) {
+    protected void doTestIterate(final String model) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java b/src/test/java/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java
index e2e2fed4..fa9ee56b 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/BeanModelTestCase.java
@@ -43,0 +44 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
+    @Override
@@ -74,5 +75,5 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        int relativePropertyIndex,
-        int offset,
-        boolean useStartLocation,
-        boolean reverse,
-        int expected) 
+        final int relativePropertyIndex,
+        final int offset,
+        final boolean useStartLocation,
+        final boolean reverse,
+        final int expected)
@@ -80 +81 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        PropertyOwnerPointer root =
+        final PropertyOwnerPointer root =
@@ -136,5 +137,5 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        int propertyIndex,
-        int offset,
-        boolean useStartLocation,
-        boolean reverse,
-        int expected) 
+        final int propertyIndex,
+        final int offset,
+        final boolean useStartLocation,
+        final boolean reverse,
+        final int expected)
@@ -142 +143 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        PropertyOwnerPointer root =
+        final PropertyOwnerPointer root =
@@ -176,2 +177,2 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-    private int relativeProperty(PropertyPointer holder, int offset) {
-        String[] names = holder.getPropertyNames();
+    private int relativeProperty(final PropertyPointer holder, final int offset) {
+        final String[] names = holder.getPropertyNames();
@@ -187,3 +188,3 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        JXPathContext context = JXPathContext.newContext(createContextBean());
-        Iterator it = context.iteratePointers("/integers");
-        List actual = new ArrayList();
+        final JXPathContext context = JXPathContext.newContext(createContextBean());
+        final Iterator it = context.iteratePointers("/integers");
+        final List actual = new ArrayList();
@@ -204,3 +205,3 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        JXPathContext context = JXPathContext.newContext(createContextBean());
-        Iterator it = context.iteratePointers("/integers");
-        List actual = new ArrayList();
+        final JXPathContext context = JXPathContext.newContext(createContextBean());
+        final Iterator it = context.iteratePointers("/integers");
+        final List actual = new ArrayList();
@@ -221 +222 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        JXPathContext context = JXPathContext.newContext(createContextBean());
+        final JXPathContext context = JXPathContext.newContext(createContextBean());
@@ -226,2 +227,2 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            NodePointer pointer = (NodePointer) it.next();
-            pointer.setValue(new Integer(i++));
+            final NodePointer pointer = (NodePointer) it.next();
+            pointer.setValue(Integer.valueOf(i++));
@@ -231 +232 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        List actual = new ArrayList();
+        final List actual = new ArrayList();
@@ -237 +238 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            list(new Integer(5), new Integer(6)),
+            list(Integer.valueOf(5), Integer.valueOf(6)),
@@ -245 +246 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        JXPathContext context = JXPathContext.newContext(createContextBean());
+        final JXPathContext context = JXPathContext.newContext(createContextBean());
@@ -259 +260 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        Iterator iter = context.iteratePointers("/beans/name");
+        final Iterator iter = context.iteratePointers("/beans/name");
@@ -262 +263 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            Pointer pointer = (Pointer) iter.next();
+            final Pointer pointer = (Pointer) iter.next();
@@ -290 +291 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Double(5));
+            Double.valueOf(5));
@@ -306 +307 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(set)", new Double(3));
+        assertXPathValue(context, "count(set)", Double.valueOf(3));
@@ -314 +315 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(*)", new Double(21));
+        assertXPathValue(context, "count(*)", Double.valueOf(21));
@@ -317 +318 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(child::node())", new Double(21));
+        assertXPathValue(context, "count(child::node())", Double.valueOf(21));
@@ -337,4 +338,4 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-                new Integer(1),
-                new Integer(2),
-                new Integer(3),
-                new Integer(4)));
+                Integer.valueOf(1),
+                Integer.valueOf(2),
+                Integer.valueOf(3),
+                Integer.valueOf(4)));
@@ -355 +356 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "integers[2]", new Integer(2));
+        assertXPathValue(context, "integers[2]", Integer.valueOf(2));
@@ -387 +388 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(descendant::node())", new Double(65));
+        assertXPathValue(context, "count(descendant::node())", Double.valueOf(65));
@@ -390 +391 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(descendant::root)", new Double(0));
+        assertXPathValue(context, "count(descendant::root)", Double.valueOf(0));
@@ -392 +393 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(descendant::name)", new Double(7));
+        assertXPathValue(context, "count(descendant::name)", Double.valueOf(7));
@@ -426 +427 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Double(1));
+            Double.valueOf(1));
@@ -429 +430 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(nestedBean//.)", new Double(7));
+        assertXPathValue(context, "count(nestedBean//.)", Double.valueOf(7));
@@ -432 +433 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(//self::beans)", new Double(2));
+        assertXPathValue(context, "count(//self::beans)", Double.valueOf(2));
@@ -438 +439 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Double(66));
+            Double.valueOf(66));
@@ -447 +448 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Double(21));
+            Double.valueOf(21));
@@ -452 +453 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Double(7));
+            Double.valueOf(7));
@@ -460 +461 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Double(8));
+            Double.valueOf(8));
@@ -465 +466 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Double(1));
+            Double.valueOf(1));
@@ -471 +472 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Double(8));
+            Double.valueOf(8));
@@ -476 +477 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Double(1));
+            Double.valueOf(1));
@@ -482 +483 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Double(53));
+            Double.valueOf(53));
@@ -487 +488 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Double(7));
+            Double.valueOf(7));
@@ -492 +493 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(/beans/..)", new Double(1));
+        assertXPathValue(context, "count(/beans/..)", Double.valueOf(1));
@@ -494 +495 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(//..)", new Double(9));
+        assertXPathValue(context, "count(//..)", Double.valueOf(9));
@@ -496 +497 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(//../..)", new Double(2));
+        assertXPathValue(context, "count(//../..)", Double.valueOf(2));
@@ -509 +510 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Double(8));
+            Double.valueOf(8));
@@ -514 +515 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Double(2));
+            Double.valueOf(2));
@@ -522 +523 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Double(2));
+            Double.valueOf(2));
@@ -527 +528 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Double(12));
+            Double.valueOf(12));
@@ -532 +533 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Double(10));
+            Double.valueOf(10));
@@ -551,4 +552,4 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-                new Integer(1),
-                new Integer(2),
-                new Integer(3),
-                new Integer(4)));
+                Integer.valueOf(1),
+                Integer.valueOf(2),
+                Integer.valueOf(3),
+                Integer.valueOf(4)));
@@ -559 +560 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Double(2));
+            Double.valueOf(2));
@@ -564 +565 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Double(3));
+            Double.valueOf(3));
@@ -568 +569 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "(integers)[2]", new Integer(2));
+        assertXPathValue(context, "(integers)[2]", Integer.valueOf(2));
@@ -573 +574 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(@*)", new Double(21.0));
+        assertXPathValue(context, "count(@*)", Double.valueOf(21.0));
@@ -584 +585 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "nestedBean[@name = 'int']", new Integer(1));
+        assertXPathValue(context, "nestedBean[@name = 'int']", Integer.valueOf(1));
@@ -596 +597 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(@xml:*)", new Double(1));
+        assertXPathValue(context, "count(@xml:*)", Double.valueOf(1));
@@ -619 +620 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "sum(integers)", new Double(10));        
+        assertXPathValue(context, "sum(integers)", Double.valueOf(10));
@@ -624 +625 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-                new Integer(4),
+                Integer.valueOf(4),
@@ -695,2 +696,2 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            list(new Integer(1), new Integer(2)));
-            
+            list(Integer.valueOf(1), Integer.valueOf(2)));
+
@@ -700 +701 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        
+
@@ -704 +705 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            list(new Integer(1)));
+            list(Integer.valueOf(1)));
@@ -727 +728 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathSetValue(context, "int", new Integer(2));
+        assertXPathSetValue(context, "int", Integer.valueOf(2));
@@ -730 +731 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathSetValue(context, "int", "3", new Integer(3));
+        assertXPathSetValue(context, "int", "3", Integer.valueOf(3));
@@ -733 +734 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathSetValue(context, "int", new int[] { 4 }, new Integer(4));
+        assertXPathSetValue(context, "int", new int[] { 4 }, Integer.valueOf(4));
@@ -736 +737 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathSetValue(context, "@int", new Integer(10));
+        assertXPathSetValue(context, "@int", Integer.valueOf(10));
@@ -741 +742 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        assertXPathSetValue(context, "integers[2]", new Integer(5));
+        assertXPathSetValue(context, "integers[2]", Integer.valueOf(5));
@@ -748 +749 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Integer(6));
+            Integer.valueOf(6));
@@ -756 +757 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Integer(8));
+            Integer.valueOf(8));
@@ -762 +763 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Integer(9));
+            Integer.valueOf(9));
@@ -786 +787 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Integer(1),
+            Integer.valueOf(1),
@@ -794 +795 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-                new Integer(1),
+                Integer.valueOf(1),
@@ -797 +798 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        catch (Exception e) {
+        catch (final Exception e) {
@@ -801 +802 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        
+
@@ -811 +812 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Integer(2),
+            Integer.valueOf(2),
@@ -818 +819 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        // Calls factory.createObject(..., testBean, "beans", 2), 
+        // Calls factory.createObject(..., testBean, "beans", 2),
@@ -823 +824 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Integer(1),
+            Integer.valueOf(1),
@@ -830 +831 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        // Calls factory.createObject(..., testBean, "beans", 2), 
+        // Calls factory.createObject(..., testBean, "beans", 2),
@@ -835 +836 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Integer(2),
+            Integer.valueOf(2),
@@ -845 +846 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Integer(3),
+            Integer.valueOf(3),
@@ -854 +855 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Integer(1),
+            Integer.valueOf(1),
@@ -863 +864 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Integer(2),
+            Integer.valueOf(2),
@@ -896 +897 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-            new Integer(0),
+            Integer.valueOf(0),
@@ -940 +941 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-    
+
@@ -942 +943 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        JXPathContext relative =
+        final JXPathContext relative =
@@ -944,4 +945,4 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        
-        assertXPathValueAndPointer(relative, 
-            "int", 
-            new Integer(1), 
+
+        assertXPathValueAndPointer(relative,
+            "int",
+            Integer.valueOf(1),
@@ -952 +953 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        JXPathContext relative =
+        final JXPathContext relative =
@@ -954,4 +955,4 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        
-        assertXPathValueAndPointer(relative, 
-            "/integers[2]", 
-            new Integer(2), 
+
+        assertXPathValueAndPointer(relative,
+            "/integers[2]",
+            Integer.valueOf(2),
@@ -962 +963 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        JXPathContext relative =
+        final JXPathContext relative =
@@ -964,4 +965,4 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        
-        assertXPathValueAndPointer(relative, 
-            "../integers[2]", 
-            new Integer(2), 
+
+        assertXPathValueAndPointer(relative,
+            "../integers[2]",
+            Integer.valueOf(2),
@@ -970 +971 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-    
+
@@ -973 +974 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        JXPathContext relative =
+        final JXPathContext relative =
@@ -975,4 +976,4 @@ public abstract class BeanModelTestCase extends JXPathTestCase {
-        
-        assertXPathValue(relative, 
-            "test:countPointers(strings)", 
-            new Integer(3));
+
+        assertXPathValue(relative,
+            "test:countPointers(strings)",
+            Integer.valueOf(3));
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/EmbeddedColonMapKeysTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/EmbeddedColonMapKeysTest.java
index 1e60e618..b69ca8ca 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/EmbeddedColonMapKeysTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/EmbeddedColonMapKeysTest.java
@@ -26 +26 @@ import org.apache.commons.jxpath.JXPathTestCase;
- * 
+ *
@@ -30,0 +31 @@ public class EmbeddedColonMapKeysTest extends JXPathTestCase {
+    @Override
@@ -33 +34 @@ public class EmbeddedColonMapKeysTest extends JXPathTestCase {
-        HashMap m = new HashMap();
+        final HashMap m = new HashMap();
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/EmptyCollectionTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/EmptyCollectionTest.java
index 716e421b..c78d123a 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/EmptyCollectionTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/EmptyCollectionTest.java
@@ -29 +29 @@ public class EmptyCollectionTest extends JXPathTestCase {
-        private Object child;
+        private final Object child;
@@ -34 +34 @@ public class EmptyCollectionTest extends JXPathTestCase {
-        public HasChild(Object child) {
+        public HasChild(final Object child) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/ExceptionPropertyTestBean.java b/src/test/java/org/apache/commons/jxpath/ri/model/ExceptionPropertyTestBean.java
index ad2b6e94..6031bb23 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/ExceptionPropertyTestBean.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/ExceptionPropertyTestBean.java
@@ -22 +22 @@ import org.apache.commons.jxpath.TestBean;
- * 
+ *
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java
index 1ddc714c..84833b50 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java
@@ -29,2 +29,2 @@ public class ExternalXMLNamespaceTest extends JXPathTestCase {
-    protected DocumentContainer createDocumentContainer(String model) {
-        DocumentContainer result = new DocumentContainer(JXPathTestCase.class
+    protected DocumentContainer createDocumentContainer(final String model) {
+        final DocumentContainer result = new DocumentContainer(JXPathTestCase.class
@@ -37,2 +37,2 @@ public class ExternalXMLNamespaceTest extends JXPathTestCase {
-    protected JXPathContext createContext(String model) {
-        JXPathContext context = JXPathContext
+    protected JXPathContext createContext(final String model) {
+        final JXPathContext context = JXPathContext
@@ -45 +45 @@ public class ExternalXMLNamespaceTest extends JXPathTestCase {
-    protected void doTest(String xpath, String model, String expected) {
+    protected void doTest(final String xpath, final String model, final String expected) {
@@ -49 +49 @@ public class ExternalXMLNamespaceTest extends JXPathTestCase {
-    protected void doTestAttribute(String model) {
+    protected void doTestAttribute(final String model) {
@@ -53 +53 @@ public class ExternalXMLNamespaceTest extends JXPathTestCase {
-    protected void doTestElement(String model) {
+    protected void doTestElement(final String model) {
@@ -57 +57 @@ public class ExternalXMLNamespaceTest extends JXPathTestCase {
-    protected void doTestCreateAndSetAttribute(String model) {
+    protected void doTestCreateAndSetAttribute(final String model) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/JXPath151Test.java b/src/test/java/org/apache/commons/jxpath/ri/model/JXPath151Test.java
index a416477d..ed566bcb 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/JXPath151Test.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/JXPath151Test.java
@@ -29,0 +30 @@ public class JXPath151Test extends JXPathTestCase {
+    @Override
@@ -31,2 +32,2 @@ public class JXPath151Test extends JXPathTestCase {
-        TestBean testBean = new TestBean();
-        HashMap m = new HashMap();
+        final TestBean testBean = new TestBean();
+        final HashMap m = new HashMap();
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/JXPath154Test.java b/src/test/java/org/apache/commons/jxpath/ri/model/JXPath154Test.java
index 9756f740..eff6253e 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/JXPath154Test.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/JXPath154Test.java
@@ -28 +28 @@ public class JXPath154Test extends JXPathTestCase {
-    protected DocumentContainer createDocumentContainer(String model) {
+    protected DocumentContainer createDocumentContainer(final String model) {
@@ -32,2 +32,2 @@ public class JXPath154Test extends JXPathTestCase {
-    protected void doTest(String path, String model, String expectedValue) {
-        JXPathContext context = JXPathContext.newContext(createDocumentContainer(model));
+    protected void doTest(final String path, final String model, final String expectedValue) {
+        final JXPathContext context = JXPathContext.newContext(createDocumentContainer(model));
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/MixedModelTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/MixedModelTest.java
index ff71df64..e4b23d53 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/MixedModelTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/MixedModelTest.java
@@ -41,0 +42 @@ public class MixedModelTest extends JXPathTestCase {
+    @Override
@@ -43 +44 @@ public class MixedModelTest extends JXPathTestCase {
-        TestMixedModelBean bean = new TestMixedModelBean();
+        final TestMixedModelBean bean = new TestMixedModelBean();
@@ -47 +48 @@ public class MixedModelTest extends JXPathTestCase {
-        Variables vars = context.getVariables();
+        final Variables vars = context.getVariables();
@@ -57 +58 @@ public class MixedModelTest extends JXPathTestCase {
-        int[][] matrix = new int[1][];
+        final int[][] matrix = new int[1][];
@@ -66,3 +67,3 @@ public class MixedModelTest extends JXPathTestCase {
-        assertXPathValueAndPointer(context, 
-            "$foo:bar", 
-            "baz", 
+        assertXPathValueAndPointer(context,
+            "$foo:bar",
+            "baz",
@@ -70 +71 @@ public class MixedModelTest extends JXPathTestCase {
-        
+
@@ -72 +73 @@ public class MixedModelTest extends JXPathTestCase {
-    
+
@@ -81 +82 @@ public class MixedModelTest extends JXPathTestCase {
-            new Integer(1),
+            Integer.valueOf(1),
@@ -131 +132 @@ public class MixedModelTest extends JXPathTestCase {
-            new Integer(1),
+            Integer.valueOf(1),
@@ -185 +186 @@ public class MixedModelTest extends JXPathTestCase {
-            new Integer(1),
+            Integer.valueOf(1),
@@ -241 +242 @@ public class MixedModelTest extends JXPathTestCase {
-            new Integer(1),
+            Integer.valueOf(1),
@@ -317 +318 @@ public class MixedModelTest extends JXPathTestCase {
-        JXPathContext ctx = JXPathContext.newContext(new TestNull());
+        final JXPathContext ctx = JXPathContext.newContext(new TestNull());
@@ -337 +338 @@ public class MixedModelTest extends JXPathTestCase {
-        TestBean bean = (TestBean) context.getContextBean();
+        final TestBean bean = (TestBean) context.getContextBean();
@@ -343 +344 @@ public class MixedModelTest extends JXPathTestCase {
-            new Integer(1),
+            Integer.valueOf(1),
@@ -350 +351 @@ public class MixedModelTest extends JXPathTestCase {
-            new Integer(1),
+            Integer.valueOf(1),
@@ -358 +359 @@ public class MixedModelTest extends JXPathTestCase {
-        Map map = new HashMap();
+        final Map map = new HashMap();
@@ -361 +362 @@ public class MixedModelTest extends JXPathTestCase {
-        JXPathContext context = JXPathContext.newContext(map);
+        final JXPathContext context = JXPathContext.newContext(map);
@@ -367 +368 @@ public class MixedModelTest extends JXPathTestCase {
-        Map map = new HashMap();
+        final Map map = new HashMap();
@@ -370 +371 @@ public class MixedModelTest extends JXPathTestCase {
-        JXPathContext context = JXPathContext.newContext(map);
+        final JXPathContext context = JXPathContext.newContext(map);
@@ -372,2 +373,2 @@ public class MixedModelTest extends JXPathTestCase {
-        Iterator it = context.iteratePointers("foo");
-        List actual = new ArrayList();
+        final Iterator it = context.iteratePointers("foo");
+        final List actual = new ArrayList();
@@ -375 +376 @@ public class MixedModelTest extends JXPathTestCase {
-            Pointer ptr = (Pointer) it.next();
+            final Pointer ptr = (Pointer) it.next();
@@ -385 +386 @@ public class MixedModelTest extends JXPathTestCase {
-        Map map = new HashMap();
+        final Map map = new HashMap();
@@ -388,4 +389,4 @@ public class MixedModelTest extends JXPathTestCase {
-        JXPathContext context = JXPathContext.newContext(map);
-        context.getVariables().declareVariable("x", new Integer(2));
-        Iterator it = context.iteratePointers("foo[$x]");
-        List actual = new ArrayList();
+        final JXPathContext context = JXPathContext.newContext(map);
+        context.getVariables().declareVariable("x", Integer.valueOf(2));
+        final Iterator it = context.iteratePointers("foo[$x]");
+        final List actual = new ArrayList();
@@ -393 +394 @@ public class MixedModelTest extends JXPathTestCase {
-            Pointer ptr = (Pointer) it.next();
+            final Pointer ptr = (Pointer) it.next();
@@ -400,2 +401,2 @@ public class MixedModelTest extends JXPathTestCase {
-        Map map = new HashMap();
-        Vector vec = new Vector();
+        final Map map = new HashMap();
+        final Vector vec = new Vector();
@@ -406 +407 @@ public class MixedModelTest extends JXPathTestCase {
-        JXPathContext context = JXPathContext.newContext(map);
+        final JXPathContext context = JXPathContext.newContext(map);
@@ -422 +423 @@ public class MixedModelTest extends JXPathTestCase {
-        catch (Throwable t) {
+        catch (final Throwable t) {
@@ -449 +450 @@ public class MixedModelTest extends JXPathTestCase {
-            new Integer(3),
+            Integer.valueOf(3),
@@ -452 +453 @@ public class MixedModelTest extends JXPathTestCase {
-        context.setValue("$matrix[1]/.[1]", new Integer(2));
+        context.setValue("$matrix[1]/.[1]", Integer.valueOf(2));
@@ -457 +458 @@ public class MixedModelTest extends JXPathTestCase {
-            new Integer(3),
+            Integer.valueOf(3),
@@ -462 +463 @@ public class MixedModelTest extends JXPathTestCase {
-        assertXPathValue(context, "matrix[1]/.[1]", new Integer(2));
+        assertXPathValue(context, "matrix[1]/.[1]", Integer.valueOf(2));
@@ -471 +472 @@ public class MixedModelTest extends JXPathTestCase {
-            new Integer(2),
+            Integer.valueOf(2),
@@ -478 +479 @@ public class MixedModelTest extends JXPathTestCase {
-        catch (Exception e) {
+        catch (final Exception e) {
@@ -487 +488 @@ public class MixedModelTest extends JXPathTestCase {
-        catch (Exception e) {
+        catch (final Exception e) {
@@ -502 +503 @@ public class MixedModelTest extends JXPathTestCase {
-            new Integer(4),
+            Integer.valueOf(4),
@@ -505 +506 @@ public class MixedModelTest extends JXPathTestCase {
-    
+
@@ -510,2 +511,2 @@ public class MixedModelTest extends JXPathTestCase {
-        List list = new ArrayList();
-        Map map = new HashMap();
+        final List list = new ArrayList();
+        final Map map = new HashMap();
@@ -514,2 +515,2 @@ public class MixedModelTest extends JXPathTestCase {
-        
-        Map map2 = new HashMap();
+
+        final Map map2 = new HashMap();
@@ -518 +519 @@ public class MixedModelTest extends JXPathTestCase {
-        
+
@@ -521,2 +522,2 @@ public class MixedModelTest extends JXPathTestCase {
-        
-        List list2 = new ArrayList();
+
+        final List list2 = new ArrayList();
@@ -527 +528 @@ public class MixedModelTest extends JXPathTestCase {
-        
+
@@ -529 +530 @@ public class MixedModelTest extends JXPathTestCase {
-        
+
@@ -532,3 +533,3 @@ public class MixedModelTest extends JXPathTestCase {
-        assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)"));
-        assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)"));
-        assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)"));
+        assertEquals(Integer.valueOf(3), context.getValue("size(.[1]/KeyThree)"));
+        assertEquals(Double.valueOf(6.0), context.getValue("count(.[1]/KeyThree/*)"));
+        assertEquals(Double.valueOf(3.0), context.getValue("count(.[1]/KeyThree/KeyA)"));
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/TestMixedModelFactory.java b/src/test/java/org/apache/commons/jxpath/ri/model/TestMixedModelFactory.java
index cf85e289..ee06f4e4 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/TestMixedModelFactory.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/TestMixedModelFactory.java
@@ -37,0 +38 @@ public class TestMixedModelFactory extends AbstractFactory {
+    @Override
@@ -39,5 +40,5 @@ public class TestMixedModelFactory extends AbstractFactory {
-        JXPathContext context,
-        Pointer pointer,
-        Object parent,
-        String name,
-        int index) 
+        final JXPathContext context,
+        final Pointer pointer,
+        final Object parent,
+        final String name,
+        final int index)
@@ -50 +51 @@ public class TestMixedModelFactory extends AbstractFactory {
-            TestBean bean = (TestBean) parent;
+            final TestBean bean = (TestBean) parent;
@@ -62 +63 @@ public class TestMixedModelFactory extends AbstractFactory {
-            TestBean tb = new TestBean();
+            final TestBean tb = new TestBean();
@@ -69 +70 @@ public class TestMixedModelFactory extends AbstractFactory {
-            int[][] matrix = new int[2][];
+            final int[][] matrix = new int[2][];
@@ -78 +79,2 @@ public class TestMixedModelFactory extends AbstractFactory {
-    public boolean declareVariable(JXPathContext context, String name) {
+    @Override
+    public boolean declareVariable(final JXPathContext context, final String name) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java b/src/test/java/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java
index 54700c59..4939cf9c 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java
@@ -36,0 +37 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
+    @Override
@@ -39 +40 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-            DocumentContainer docCtr = createDocumentContainer();
+            final DocumentContainer docCtr = createDocumentContainer();
@@ -41 +42 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-            Variables vars = context.getVariables();
+            final Variables vars = context.getVariables();
@@ -55 +56 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-    
+
@@ -57 +58 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        
+
@@ -59 +60 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        JXPathContext context =
+        final JXPathContext context =
@@ -79,7 +80,7 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        JXPathContext context,
-        String path,
-        String signature,
-        boolean elements,
-        boolean attributes,
-        boolean text,
-        boolean pi) 
+        final JXPathContext context,
+        final String path,
+        final String signature,
+        final boolean elements,
+        final boolean attributes,
+        final boolean text,
+        final boolean pi)
@@ -87,2 +88,2 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        Object node = context.getPointer(path).getNode();
-        String sig = getXMLSignature(node, elements, attributes, text, pi);
+        final Object node = context.getPointer(path).getNode();
+        final String sig = getXMLSignature(node, elements, attributes, text, pi);
@@ -113 +114 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-    
+
@@ -181 +182 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-         
+
@@ -183 +184 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-         
+
@@ -222 +223 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        
+
@@ -228 +229 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        
+
@@ -234 +235 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        
+
@@ -236 +237 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        
+
@@ -259 +260 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-            new Double(0),
+            Double.valueOf(0),
@@ -265 +266 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-            new Double(0),
+            Double.valueOf(0),
@@ -271 +272,2 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-            public Pointer getPointerByID(JXPathContext context, String id) {
+            @Override
+            public Pointer getPointerByID(final JXPathContext context, final String id) {
@@ -301 +303 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        
+
@@ -307 +309 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        
+
@@ -331 +333 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        
+
@@ -333 +335 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        
+
@@ -339 +341 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        catch (JXPathException ex) {
+        catch (final JXPathException ex) {
@@ -343 +345 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-                
+
@@ -349 +351 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        catch (JXPathException ex) {
+        catch (final JXPathException ex) {
@@ -353 +355 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        
+
@@ -358 +360 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-            new Double(2));
+            Double.valueOf(2));
@@ -361 +363 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(vendor/product/*)", new Double(4));
+        assertXPathValue(context, "count(vendor/product/*)", Double.valueOf(4));
@@ -365 +367 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        
+
@@ -383 +385 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, "count(//price:*)", new Double(2));
+        assertXPathValue(context, "count(//price:*)", Double.valueOf(2));
@@ -399 +401 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-    
+
@@ -485 +487 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        
+
@@ -553 +555 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        
+
@@ -574 +576 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        
+
@@ -593 +595 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-            new Double(3));
+            Double.valueOf(3));
@@ -750 +752 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-            new Double(10));
+            Double.valueOf(10));
@@ -762 +764 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-            new Double(11));
+            Double.valueOf(11));
@@ -787 +789 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-    
+
@@ -799,6 +801,6 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        assertEquals("Context node namespace resolution", 
-                "priceNS", 
-                context.getNamespaceURI("price"));        
-        
-        assertEquals("Registered namespace resolution", 
-                "priceNS", 
+        assertEquals("Context node namespace resolution",
+                "priceNS",
+                context.getNamespaceURI("price"));
+
+        assertEquals("Registered namespace resolution",
+                "priceNS",
@@ -808,3 +810,3 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        assertXPathValue(context, 
-                "count(vendor/product/rate:*)", 
-                new Double(2));
+        assertXPathValue(context,
+                "count(vendor/product/rate:*)",
+                Double.valueOf(2));
@@ -826,3 +828,3 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        
-        // Same, but with a child context        
-        JXPathContext childCtx = 
+
+        // Same, but with a child context
+        final JXPathContext childCtx =
@@ -834,3 +836,3 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        
-        // Same, but with a relative context        
-        JXPathContext relativeCtx = 
+
+        // Same, but with a relative context
+        final JXPathContext relativeCtx =
@@ -850 +852 @@ public abstract class XMLModelTestCase extends JXPathTestCase {
-        Pointer pointer = context.getPointer("/vendor[1]/contact[1]");
+        final Pointer pointer = context.getPointer("/vendor[1]/contact[1]");
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/XMLPreserveSpaceTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/XMLPreserveSpaceTest.java
index 9b3025b7..5deff557 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/XMLPreserveSpaceTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/XMLPreserveSpaceTest.java
@@ -29 +29 @@ public class XMLPreserveSpaceTest extends JXPathTestCase {
-    protected DocumentContainer createDocumentContainer(String model) {
+    protected DocumentContainer createDocumentContainer(final String model) {
@@ -34,2 +34,2 @@ public class XMLPreserveSpaceTest extends JXPathTestCase {
-    protected JXPathContext createContext(String model) {
-        JXPathContext context = JXPathContext
+    protected JXPathContext createContext(final String model) {
+        final JXPathContext context = JXPathContext
@@ -40,2 +40,2 @@ public class XMLPreserveSpaceTest extends JXPathTestCase {
-    protected void doTest(String id, String model, String expectedValue) {
-        JXPathContext context = JXPathContext
+    protected void doTest(final String id, final String model, final String expectedValue) {
+        final JXPathContext context = JXPathContext
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java
index 17f90354..bdbe0ab4 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java
@@ -29 +29 @@ public class XMLSpaceTest extends JXPathTestCase {
-    protected DocumentContainer createDocumentContainer(String model) {
+    protected DocumentContainer createDocumentContainer(final String model) {
@@ -34,2 +34,2 @@ public class XMLSpaceTest extends JXPathTestCase {
-    protected JXPathContext createContext(String model) {
-        JXPathContext context = JXPathContext
+    protected JXPathContext createContext(final String model) {
+        final JXPathContext context = JXPathContext
@@ -40,2 +40,2 @@ public class XMLSpaceTest extends JXPathTestCase {
-    protected void doTest(String id, String model, String expectedValue) {
-        JXPathContext context = JXPathContext
+    protected void doTest(final String id, final String model, final String expectedValue) {
+        final JXPathContext context = JXPathContext
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/XMLUpperCaseElementsTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/XMLUpperCaseElementsTest.java
index ecefaf3b..afa65c48 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/XMLUpperCaseElementsTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/XMLUpperCaseElementsTest.java
@@ -25 +25 @@ import org.apache.commons.jxpath.xml.DocumentContainer;
- * 
+ *
@@ -30 +30 @@ public class XMLUpperCaseElementsTest extends JXPathTestCase {
-    protected DocumentContainer createDocumentContainer(String model) {
+    protected DocumentContainer createDocumentContainer(final String model) {
@@ -34,2 +34,2 @@ public class XMLUpperCaseElementsTest extends JXPathTestCase {
-    protected JXPathContext createContext(String model) {
-        JXPathContext context = JXPathContext.newContext(createDocumentContainer(model));
+    protected JXPathContext createContext(final String model) {
+        final JXPathContext context = JXPathContext.newContext(createDocumentContainer(model));
@@ -39,2 +39,2 @@ public class XMLUpperCaseElementsTest extends JXPathTestCase {
-    protected void doTest(String id, String model, String expectedValue) {
-        JXPathContext context = JXPathContext.newContext(createDocumentContainer(model));
+    protected void doTest(final String id, final String model, final String expectedValue) {
+        final JXPathContext context = JXPathContext.newContext(createDocumentContainer(model));
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/beans/BadlyImplementedFactoryTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/beans/BadlyImplementedFactoryTest.java
index 24fc4a43..19b4352b 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/beans/BadlyImplementedFactoryTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/beans/BadlyImplementedFactoryTest.java
@@ -36,0 +37 @@ public class BadlyImplementedFactoryTest extends TestCase {
+    @Override
@@ -40 +41,2 @@ public class BadlyImplementedFactoryTest extends TestCase {
-            public boolean createObject(JXPathContext context, Pointer pointer, Object parent, String name, int index) {
+            @Override
+            public boolean createObject(final JXPathContext context, final Pointer pointer, final Object parent, final String name, final int index) {
@@ -51 +53 @@ public class BadlyImplementedFactoryTest extends TestCase {
-        } catch (JXPathException e) {
+        } catch (final JXPathException e) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/beans/BeanModelTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/beans/BeanModelTest.java
index a37e24fc..7d4463b6 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/beans/BeanModelTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/beans/BeanModelTest.java
@@ -29,0 +30 @@ public class BeanModelTest extends BeanModelTestCase {
+    @Override
@@ -33,0 +35 @@ public class BeanModelTest extends BeanModelTestCase {
+    @Override
@@ -37 +39 @@ public class BeanModelTest extends BeanModelTestCase {
-    
+
@@ -39 +41 @@ public class BeanModelTest extends BeanModelTestCase {
-        JXPathContext context =
+        final JXPathContext context =
@@ -41 +43 @@ public class BeanModelTest extends BeanModelTestCase {
-            
+
@@ -45 +47 @@ public class BeanModelTest extends BeanModelTestCase {
-            new Integer(0),
+            Integer.valueOf(0),
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/beans/TestBeanFactory.java b/src/test/java/org/apache/commons/jxpath/ri/model/beans/TestBeanFactory.java
index 3aa59b96..6060c3e6 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/beans/TestBeanFactory.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/beans/TestBeanFactory.java
@@ -32,0 +33 @@ public class TestBeanFactory extends AbstractFactory {
+    @Override
@@ -34,5 +35,5 @@ public class TestBeanFactory extends AbstractFactory {
-        JXPathContext context,
-        Pointer pointer,
-        Object parent,
-        String name,
-        int index) 
+        final JXPathContext context,
+        final Pointer pointer,
+        final Object parent,
+        final String name,
+        final int index)
@@ -45 +46 @@ public class TestBeanFactory extends AbstractFactory {
-            TestBean bean = (TestBean) parent;
+            final TestBean bean = (TestBean) parent;
@@ -53 +54 @@ public class TestBeanFactory extends AbstractFactory {
-            // This will implicitly expand the collection        
+            // This will implicitly expand the collection
@@ -63 +64,2 @@ public class TestBeanFactory extends AbstractFactory {
-    public boolean declareVariable(JXPathContext context, String name) {
+    @Override
+    public boolean declareVariable(final JXPathContext context, final String name) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/beans/TestIndexedPropertyBean.java b/src/test/java/org/apache/commons/jxpath/ri/model/beans/TestIndexedPropertyBean.java
index 3b732b24..e54f17f5 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/beans/TestIndexedPropertyBean.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/beans/TestIndexedPropertyBean.java
@@ -25 +25 @@ public class TestIndexedPropertyBean {
-    public int getIndexed(int i) {
+    public int getIndexed(final int i) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/container/ContainerModelTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/container/ContainerModelTest.java
index fd037493..e04da099 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/container/ContainerModelTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/container/ContainerModelTest.java
@@ -36 +36,3 @@ public class ContainerModelTest extends JXPathTestCase {
-        private String[] array = new String[]{"foo", "bar"};
+        private static final long serialVersionUID = 1L;
+        private final String[] array = {"foo", "bar"};
+        @Override
@@ -41 +43,2 @@ public class ContainerModelTest extends JXPathTestCase {
-        public void setValue(Object value) {
+        @Override
+        public void setValue(final Object value) {
@@ -48 +51,2 @@ public class ContainerModelTest extends JXPathTestCase {
-        private List list;
+        private static final long serialVersionUID = 1L;
+        private final List list;
@@ -55,0 +60 @@ public class ContainerModelTest extends JXPathTestCase {
+        @Override
@@ -60 +65,2 @@ public class ContainerModelTest extends JXPathTestCase {
-        public void setValue(Object value) {
+        @Override
+        public void setValue(final Object value) {
@@ -67 +73 @@ public class ContainerModelTest extends JXPathTestCase {
-        private ListContainer container = new ListContainer();
+        private final ListContainer container = new ListContainer();
@@ -73 +79 @@ public class ContainerModelTest extends JXPathTestCase {
-        
+
@@ -75,4 +81,4 @@ public class ContainerModelTest extends JXPathTestCase {
-        ArrayContainer container = new ArrayContainer();
-        String[] array = (String[]) container.getValue();
-        
-        JXPathContext context = JXPathContext.newContext(null);
+        final ArrayContainer container = new ArrayContainer();
+        final String[] array = (String[]) container.getValue();
+
+        final JXPathContext context = JXPathContext.newContext(null);
@@ -80 +86 @@ public class ContainerModelTest extends JXPathTestCase {
-        
+
@@ -84 +90 @@ public class ContainerModelTest extends JXPathTestCase {
-        
+
@@ -88 +94 @@ public class ContainerModelTest extends JXPathTestCase {
-    
+
@@ -90,6 +96,6 @@ public class ContainerModelTest extends JXPathTestCase {
-        Bean bean = new Bean();
-        List list = (List) bean.getContainer().getValue();
-        
-        JXPathContext context = JXPathContext.newContext(bean);
-        
-        assertXPathValueAndPointer(context, "/container", 
+        final Bean bean = new Bean();
+        final List list = (List) bean.getContainer().getValue();
+
+        final JXPathContext context = JXPathContext.newContext(bean);
+
+        assertXPathValueAndPointer(context, "/container",
@@ -101 +107 @@ public class ContainerModelTest extends JXPathTestCase {
-        
+
@@ -105 +111 @@ public class ContainerModelTest extends JXPathTestCase {
-    
+
@@ -107,4 +113,4 @@ public class ContainerModelTest extends JXPathTestCase {
-        ListContainer container = new ListContainer();
-        List list = (List) container.getValue();
-                
-        Map map = new HashMap();
+        final ListContainer container = new ListContainer();
+        final List list = (List) container.getValue();
+
+        final Map map = new HashMap();
@@ -112,4 +118,4 @@ public class ContainerModelTest extends JXPathTestCase {
-        
-        JXPathContext context = JXPathContext.newContext(map);
-        
-        assertXPathValueAndPointer(context, "/container", 
+
+        final JXPathContext context = JXPathContext.newContext(map);
+
+        assertXPathValueAndPointer(context, "/container",
@@ -121 +127 @@ public class ContainerModelTest extends JXPathTestCase {
-        
+
@@ -125 +131 @@ public class ContainerModelTest extends JXPathTestCase {
-    
+
@@ -127,4 +133,4 @@ public class ContainerModelTest extends JXPathTestCase {
-        ArrayContainer container = new ArrayContainer();
-        String[] array = (String[]) container.getValue();
-        
-        JXPathContext context = JXPathContext.newContext(container);
+        final ArrayContainer container = new ArrayContainer();
+        final String[] array = (String[]) container.getValue();
+
+        final JXPathContext context = JXPathContext.newContext(container);
@@ -132 +138 @@ public class ContainerModelTest extends JXPathTestCase {
-        
+
@@ -136 +142 @@ public class ContainerModelTest extends JXPathTestCase {
-        
+
@@ -139 +145 @@ public class ContainerModelTest extends JXPathTestCase {
-    
+
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/dom/DOMModelTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/dom/DOMModelTest.java
index 4a4d361b..094ffd59 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/dom/DOMModelTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/dom/DOMModelTest.java
@@ -35,0 +36 @@ public class DOMModelTest extends XMLModelTestCase {
+    @Override
@@ -39,0 +41 @@ public class DOMModelTest extends XMLModelTestCase {
+    @Override
@@ -43 +45 @@ public class DOMModelTest extends XMLModelTestCase {
-    
+
@@ -52 +54 @@ public class DOMModelTest extends XMLModelTestCase {
-        JXPathContext childContext = context.getRelativeContext(context.getPointer("/vendor"));
+        final JXPathContext childContext = context.getRelativeContext(context.getPointer("/vendor"));
@@ -56,0 +59 @@ public class DOMModelTest extends XMLModelTestCase {
+    @Override
@@ -58,5 +61,5 @@ public class DOMModelTest extends XMLModelTestCase {
-        Object node,
-        boolean elements,
-        boolean attributes,
-        boolean text,
-        boolean pi) 
+        final Object node,
+        final boolean elements,
+        final boolean attributes,
+        final boolean text,
+        final boolean pi)
@@ -64 +67 @@ public class DOMModelTest extends XMLModelTestCase {
-        StringBuffer buffer = new StringBuffer();
+        final StringBuffer buffer = new StringBuffer();
@@ -70,6 +73,6 @@ public class DOMModelTest extends XMLModelTestCase {
-        StringBuffer buffer,
-        Object object,
-        boolean elements,
-        boolean attributes,
-        boolean text,
-        boolean pi) 
+        final StringBuffer buffer,
+        final Object object,
+        final boolean elements,
+        final boolean attributes,
+        final boolean text,
+        final boolean pi)
@@ -77,2 +80,2 @@ public class DOMModelTest extends XMLModelTestCase {
-        Node node = (Node) object;
-        int type = node.getNodeType();
+        final Node node = (Node) object;
+        final int type = node.getNodeType();
@@ -93 +96 @@ public class DOMModelTest extends XMLModelTestCase {
-                String tag = elements ? ((Element) node).getTagName() : "E";
+                final String tag = elements ? ((Element) node).getTagName() : "E";
@@ -121,6 +124,6 @@ public class DOMModelTest extends XMLModelTestCase {
-        StringBuffer buffer,
-        NodeList children,
-        boolean elements,
-        boolean attributes,
-        boolean text,
-        boolean pi) 
+        final StringBuffer buffer,
+        final NodeList children,
+        final boolean elements,
+        final boolean attributes,
+        final boolean text,
+        final boolean pi)
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/dom/TestDOMFactory.java b/src/test/java/org/apache/commons/jxpath/ri/model/dom/TestDOMFactory.java
index 6d67cdae..538f0821 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/dom/TestDOMFactory.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/dom/TestDOMFactory.java
@@ -32,0 +33 @@ public class TestDOMFactory extends AbstractFactory {
+    @Override
@@ -34,5 +35,5 @@ public class TestDOMFactory extends AbstractFactory {
-        JXPathContext context,
-        Pointer pointer,
-        Object parent,
-        String name,
-        int index) 
+        final JXPathContext context,
+        final Pointer pointer,
+        final Object parent,
+        final String name,
+        final int index)
@@ -47 +48 @@ public class TestDOMFactory extends AbstractFactory {
-            String namespaceURI = context.getNamespaceURI("price");
+            final String namespaceURI = context.getNamespaceURI("price");
@@ -54 +55 @@ public class TestDOMFactory extends AbstractFactory {
-    private void addDOMElement(Node parent, int index, String tag, String namespaceURI) {
+    private void addDOMElement(final Node parent, final int index, final String tag, final String namespaceURI) {
@@ -66 +67 @@ public class TestDOMFactory extends AbstractFactory {
-            Document doc = parent.getOwnerDocument();
+            final Document doc = parent.getOwnerDocument();
@@ -70 +71 @@ public class TestDOMFactory extends AbstractFactory {
-            } 
+            }
@@ -74 +75 @@ public class TestDOMFactory extends AbstractFactory {
-       
+
@@ -80 +81,2 @@ public class TestDOMFactory extends AbstractFactory {
-    public boolean declareVariable(JXPathContext context, String name) {
+    @Override
+    public boolean declareVariable(final JXPathContext context, final String name) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanModelTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanModelTest.java
index a3348d50..4615a8e1 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanModelTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/dynabeans/DynaBeanModelTest.java
@@ -29,0 +30 @@ public class DynaBeanModelTest extends BeanModelTestCase {
+    @Override
@@ -33,0 +35 @@ public class DynaBeanModelTest extends BeanModelTestCase {
+    @Override
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/dynabeans/LazyDynaBeanTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/dynabeans/LazyDynaBeanTest.java
index 36988d55..5df0621b 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/dynabeans/LazyDynaBeanTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/dynabeans/LazyDynaBeanTest.java
@@ -26 +26 @@ import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
- * 
+ *
@@ -31,2 +31,2 @@ public class LazyDynaBeanTest extends JXPathTestCase {
-        LazyDynaBean bean = new LazyDynaBean();
-        JXPathContext context = JXPathContext.newContext(bean);
+        final LazyDynaBean bean = new LazyDynaBean();
+        final JXPathContext context = JXPathContext.newContext(bean);
@@ -42 +42 @@ public class LazyDynaBeanTest extends JXPathTestCase {
-        } catch (JXPathNotFoundException e) {
+        } catch (final JXPathNotFoundException e) {
@@ -45,2 +45,3 @@ public class LazyDynaBeanTest extends JXPathTestCase {
-            while (JXPathContextReferenceImpl.removeNodePointerFactory(factory))
-                ;
+            while (JXPathContextReferenceImpl.removeNodePointerFactory(factory)) {
+
+            }
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/dynabeans/TestDynaBeanFactory.java b/src/test/java/org/apache/commons/jxpath/ri/model/dynabeans/TestDynaBeanFactory.java
index ffe6aa7d..a16eb107 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/dynabeans/TestDynaBeanFactory.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/dynabeans/TestDynaBeanFactory.java
@@ -31,0 +32 @@ public class TestDynaBeanFactory extends AbstractFactory {
+    @Override
@@ -33,5 +34,5 @@ public class TestDynaBeanFactory extends AbstractFactory {
-        JXPathContext context,
-        Pointer pointer,
-        Object parent,
-        String name,
-        int index) 
+        final JXPathContext context,
+        final Pointer pointer,
+        final Object parent,
+        final String name,
+        final int index)
@@ -46 +47 @@ public class TestDynaBeanFactory extends AbstractFactory {
-            DynaBean bean = (DynaBean) parent;
+            final DynaBean bean = (DynaBean) parent;
@@ -56,2 +57,2 @@ public class TestDynaBeanFactory extends AbstractFactory {
-            DynaBean bean = (DynaBean) parent;
-            bean.set("integers", index, new Integer(0));
+            final DynaBean bean = (DynaBean) parent;
+            bean.set("integers", index, Integer.valueOf(0));
@@ -65 +66,2 @@ public class TestDynaBeanFactory extends AbstractFactory {
-    public boolean declareVariable(JXPathContext context, String name) {
+    @Override
+    public boolean declareVariable(final JXPathContext context, final String name) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertiesModelTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertiesModelTest.java
index fd9441f9..dbc78379 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertiesModelTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/dynamic/DynamicPropertiesModelTest.java
@@ -34,0 +35 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
+    @Override
@@ -98 +99 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-                        
+
@@ -100 +101 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        
+
@@ -115 +116 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        assertXPathSetValue(context, "map/Key1", new Integer(6));
+        assertXPathSetValue(context, "map/Key1", Integer.valueOf(6));
@@ -119 +120 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        // See if we can assign a whole collection        
+        // See if we can assign a whole collection
@@ -122 +123 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-            new Integer[] { new Integer(7), new Integer(8)});
+            new Integer[] { Integer.valueOf(7), Integer.valueOf(8)});
@@ -125 +126 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        assertXPathSetValue(context, "map/Key1[1]", new Integer(9));
+        assertXPathSetValue(context, "map/Key1[1]", Integer.valueOf(9));
@@ -134,2 +135,2 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        assertXPathSetValue(context, "map/Key4", new Integer(7));
-        
+        assertXPathSetValue(context, "map/Key4", Integer.valueOf(7));
+
@@ -138,2 +139,2 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        
-        assertXPathSetValue(context, "//map/Key5", new Integer(8));
+
+        assertXPathSetValue(context, "//map/Key5", Integer.valueOf(8));
@@ -143 +144 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        TestBean bean = (TestBean) context.getContextBean();
+        final TestBean bean = (TestBean) context.getContextBean();
@@ -156 +157 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        TestBean bean = (TestBean) context.getContextBean();
+        final TestBean bean = (TestBean) context.getContextBean();
@@ -169 +170 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        TestBean bean = (TestBean) context.getContextBean();
+        final TestBean bean = (TestBean) context.getContextBean();
@@ -178 +179 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-            new Integer(1),
+            Integer.valueOf(1),
@@ -183 +184 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        TestBean bean = (TestBean) context.getContextBean();
+        final TestBean bean = (TestBean) context.getContextBean();
@@ -192 +193 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-            new Integer(4),
+            Integer.valueOf(4),
@@ -197 +198 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        TestBean bean = (TestBean) context.getContextBean();
+        final TestBean bean = (TestBean) context.getContextBean();
@@ -215 +216 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        TestBean bean = (TestBean) context.getContextBean();
+        final TestBean bean = (TestBean) context.getContextBean();
@@ -233 +234 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        TestBean bean = (TestBean) context.getContextBean();
+        final TestBean bean = (TestBean) context.getContextBean();
@@ -240 +241 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-            new Integer(1),
+            Integer.valueOf(1),
@@ -249 +250 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-            new Integer(1),
+            Integer.valueOf(1),
@@ -254 +255 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        TestBean bean = (TestBean) context.getContextBean();
+        final TestBean bean = (TestBean) context.getContextBean();
@@ -261 +262 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-            new Integer(2),
+            Integer.valueOf(2),
@@ -270 +271 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-            new Integer(3),
+            Integer.valueOf(3),
@@ -275 +276 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        TestBean bean = (TestBean) context.getContextBean();
+        final TestBean bean = (TestBean) context.getContextBean();
@@ -287 +288 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        TestBean bean = (TestBean) context.getContextBean();
+        final TestBean bean = (TestBean) context.getContextBean();
@@ -296 +297 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-    
+
@@ -298,2 +299,2 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        TestBean bean = (TestBean) context.getContextBean();
-        List list = new ArrayList();
+        final TestBean bean = (TestBean) context.getContextBean();
+        final List list = new ArrayList();
@@ -301 +302 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        bean.getMap().put("stuff", list);        
+        bean.getMap().put("stuff", list);
@@ -323 +324 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-            list("apple", "banana"));        
+            list("apple", "banana"));
@@ -327 +328 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        TestBean bean = (TestBean) context.getContextBean();
+        final TestBean bean = (TestBean) context.getContextBean();
@@ -329 +330 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        Map fruit = new HashMap();
+        final Map fruit = new HashMap();
@@ -332,2 +333,2 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        
-        Map meat = new HashMap();
+
+        final Map meat = new HashMap();
@@ -336,4 +337,4 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        
-        bean.getMap().put("fruit", fruit);        
-        bean.getMap().put("meat", meat);        
-                
+
+        bean.getMap().put("fruit", fruit);
+        bean.getMap().put("meat", meat);
+
@@ -344 +345 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        
+
@@ -352,2 +353,2 @@ public class DynamicPropertiesModelTest extends JXPathTestCase {
-        
-        // Unambiguous, even though the particular key is missing 
+
+        // Unambiguous, even though the particular key is missing
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/dynamic/TestDynamicPropertyFactory.java b/src/test/java/org/apache/commons/jxpath/ri/model/dynamic/TestDynamicPropertyFactory.java
index 770e0955..0386eb18 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/dynamic/TestDynamicPropertyFactory.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/dynamic/TestDynamicPropertyFactory.java
@@ -37,0 +38 @@ public class TestDynamicPropertyFactory extends AbstractFactory {
+    @Override
@@ -39,5 +40,5 @@ public class TestDynamicPropertyFactory extends AbstractFactory {
-        JXPathContext context,
-        Pointer pointer,
-        Object parent,
-        String name,
-        int index) 
+        final JXPathContext context,
+        final Pointer pointer,
+        final Object parent,
+        final String name,
+        final int index)
@@ -58 +59 @@ public class TestDynamicPropertyFactory extends AbstractFactory {
-            Vector v = new Vector();
+            final Vector v = new Vector();
@@ -72 +73,2 @@ public class TestDynamicPropertyFactory extends AbstractFactory {
-    public boolean declareVariable(JXPathContext context, String name) {
+    @Override
+    public boolean declareVariable(final JXPathContext context, final String name) {
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/jdom/JDOMModelTest.java b/src/test/java/org/apache/commons/jxpath/ri/model/jdom/JDOMModelTest.java
index 12631f6b..4f241a72 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/jdom/JDOMModelTest.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/jdom/JDOMModelTest.java
@@ -36,0 +37 @@ public class JDOMModelTest extends XMLModelTestCase {
+    @Override
@@ -40 +41 @@ public class JDOMModelTest extends XMLModelTestCase {
-    
+
@@ -49 +50 @@ public class JDOMModelTest extends XMLModelTestCase {
-        JXPathContext childContext = context.getRelativeContext(context.getPointer("/vendor"));
+        final JXPathContext childContext = context.getRelativeContext(context.getPointer("/vendor"));
@@ -53,0 +55 @@ public class JDOMModelTest extends XMLModelTestCase {
+    @Override
@@ -57,0 +60 @@ public class JDOMModelTest extends XMLModelTestCase {
+    @Override
@@ -61,0 +65 @@ public class JDOMModelTest extends XMLModelTestCase {
+    @Override
@@ -63,5 +67,5 @@ public class JDOMModelTest extends XMLModelTestCase {
-        Object node,
-        boolean elements,
-        boolean attributes,
-        boolean text,
-        boolean pi) 
+        final Object node,
+        final boolean elements,
+        final boolean attributes,
+        final boolean text,
+        final boolean pi)
@@ -69 +73 @@ public class JDOMModelTest extends XMLModelTestCase {
-        StringBuffer buffer = new StringBuffer();
+        final StringBuffer buffer = new StringBuffer();
@@ -75,6 +79,6 @@ public class JDOMModelTest extends XMLModelTestCase {
-        StringBuffer buffer,
-        Object object,
-        boolean elements,
-        boolean attributes,
-        boolean text,
-        boolean pi) 
+        final StringBuffer buffer,
+        final Object object,
+        final boolean elements,
+        final boolean attributes,
+        final boolean text,
+        final boolean pi)
@@ -94 +98 @@ public class JDOMModelTest extends XMLModelTestCase {
-            String tag = elements ? ((Element) object).getName() : "E";
+            final String tag = elements ? ((Element) object).getName() : "E";
@@ -119,6 +123,6 @@ public class JDOMModelTest extends XMLModelTestCase {
-        StringBuffer buffer,
-        List children,
-        boolean elements,
-        boolean attributes,
-        boolean text,
-        boolean pi) 
+        final StringBuffer buffer,
+        final List children,
+        final boolean elements,
+        final boolean attributes,
+        final boolean text,
+        final boolean pi)
@@ -126 +130 @@ public class JDOMModelTest extends XMLModelTestCase {
-        for (int i = 0; i < children.size(); i++) {
+        for (final Object child : children) {
@@ -129 +133 @@ public class JDOMModelTest extends XMLModelTestCase {
-                children.get(i),
+                child,
diff --git a/src/test/java/org/apache/commons/jxpath/ri/model/jdom/TestJDOMFactory.java b/src/test/java/org/apache/commons/jxpath/ri/model/jdom/TestJDOMFactory.java
index 43dd4a9b..a6e88ce4 100644
--- a/src/test/java/org/apache/commons/jxpath/ri/model/jdom/TestJDOMFactory.java
+++ b/src/test/java/org/apache/commons/jxpath/ri/model/jdom/TestJDOMFactory.java
@@ -34,0 +35 @@ public class TestJDOMFactory extends AbstractFactory {
+    @Override
@@ -36,5 +37,5 @@ public class TestJDOMFactory extends AbstractFactory {
-        JXPathContext context,
-        Pointer pointer,
-        Object parent,
-        String name,
-        int index) 
+        final JXPathContext context,
+        final Pointer pointer,
+        final Object parent,
+        final String name,
+        final int index)
@@ -49 +50 @@ public class TestJDOMFactory extends AbstractFactory {
-            String namespaceURI = context.getNamespaceURI("price");
+            final String namespaceURI = context.getNamespaceURI("price");
@@ -57,2 +58,2 @@ public class TestJDOMFactory extends AbstractFactory {
-    private void addJDOMElement(Element parent, int index, String tag, String namespaceURI) {
-        List children = parent.getContent();
+    private void addJDOMElement(final Element parent, final int index, String tag, final String namespaceURI) {
+        final List children = parent.getContent();
@@ -60,2 +61 @@ public class TestJDOMFactory extends AbstractFactory {
-        for (int i = 0; i < children.size(); i++) {
-            Object child = children.get(i);
+        for (final Object child : children) {
@@ -74 +74 @@ public class TestJDOMFactory extends AbstractFactory {
-                String prefix = tag.substring(0, tag.indexOf(':'));
+                final String prefix = tag.substring(0, tag.indexOf(':'));
@@ -86 +86,2 @@ public class TestJDOMFactory extends AbstractFactory {
-    public boolean declareVariable(JXPathContext context, String name) {
+    @Override
+    public boolean declareVariable(final JXPathContext context, final String name) {
diff --git a/src/test/java/org/apache/commons/jxpath/servlet/JXPathServletContextTest.java b/src/test/java/org/apache/commons/jxpath/servlet/JXPathServletContextTest.java
index f1594670..8365921b 100644
--- a/src/test/java/org/apache/commons/jxpath/servlet/JXPathServletContextTest.java
+++ b/src/test/java/org/apache/commons/jxpath/servlet/JXPathServletContextTest.java
@@ -40 +40 @@ public class JXPathServletContextTest extends TestCase {
-        MockServletContext context = new MockServletContext();
+        final MockServletContext context = new MockServletContext();
@@ -45 +45 @@ public class JXPathServletContextTest extends TestCase {
-    
+
@@ -47,2 +47,2 @@ public class JXPathServletContextTest extends TestCase {
-        ServletContext context = getServletContext();
-        JXPathContext appContext = JXPathServletContexts.getApplicationContext(context);
+        final ServletContext context = getServletContext();
+        final JXPathContext appContext = JXPathServletContexts.getApplicationContext(context);
@@ -61 +61 @@ public class JXPathServletContextTest extends TestCase {
-        Variables variables = appContext.getVariables();
+        final Variables variables = appContext.getVariables();
@@ -67 +67 @@ public class JXPathServletContextTest extends TestCase {
-        ServletContext context = getServletContext();
+        final ServletContext context = getServletContext();
@@ -69 +69 @@ public class JXPathServletContextTest extends TestCase {
-        MockHttpSession session = new MockHttpSession();
+        final MockHttpSession session = new MockHttpSession();
@@ -72 +72 @@ public class JXPathServletContextTest extends TestCase {
-        Integer count = new Integer(10);
+        final Integer count = Integer.valueOf(10);
@@ -75 +75 @@ public class JXPathServletContextTest extends TestCase {
-        MockHttpServletRequest request = new MockHttpServletRequest();
+        final MockHttpServletRequest request = new MockHttpServletRequest();
@@ -84 +84 @@ public class JXPathServletContextTest extends TestCase {
-        JXPathContext reqContext = JXPathServletContexts.getRequestContext(request, context);
+        final JXPathContext reqContext = JXPathServletContexts.getRequestContext(request, context);
@@ -88 +88 @@ public class JXPathServletContextTest extends TestCase {
-        JXPathContext sessionContext = JXPathServletContexts.getSessionContext(session, context);
+        final JXPathContext sessionContext = JXPathServletContexts.getSessionContext(session, context);
@@ -115 +115 @@ public class JXPathServletContextTest extends TestCase {
-        ServletContext context = getServletContext();
+        final ServletContext context = getServletContext();
@@ -117 +117 @@ public class JXPathServletContextTest extends TestCase {
-        MockHttpServletRequest request = new MockHttpServletRequest();
+        final MockHttpServletRequest request = new MockHttpServletRequest();
@@ -119 +119 @@ public class JXPathServletContextTest extends TestCase {
-        JXPathContext reqContext = JXPathServletContexts.getRequestContext(request, context);
+        final JXPathContext reqContext = JXPathServletContexts.getRequestContext(request, context);
@@ -124,2 +124,2 @@ public class JXPathServletContextTest extends TestCase {
-    private void checkPointerIterator(JXPathContext context) {
-        Iterator it = context.iteratePointers("/*");
+    private void checkPointerIterator(final JXPathContext context) {
+        final Iterator it = context.iteratePointers("/*");
@@ -129 +129 @@ public class JXPathServletContextTest extends TestCase {
-            Pointer pointer = (Pointer) it.next();
+            final Pointer pointer = (Pointer) it.next();
@@ -136 +136 @@ public class JXPathServletContextTest extends TestCase {
-        MockServletContext servletContext = new MockServletContext();
+        final MockServletContext servletContext = new MockServletContext();
@@ -139 +139 @@ public class JXPathServletContextTest extends TestCase {
-        MockServletConfig servletConfig = new MockServletConfig();
+        final MockServletConfig servletConfig = new MockServletConfig();
@@ -142 +142 @@ public class JXPathServletContextTest extends TestCase {
-        MockHttpSession session = new MockHttpSession();
+        final MockHttpSession session = new MockHttpSession();
@@ -146 +146 @@ public class JXPathServletContextTest extends TestCase {
-        MockHttpServletRequest request = new MockHttpServletRequest();
+        final MockHttpServletRequest request = new MockHttpServletRequest();
@@ -150 +150 @@ public class JXPathServletContextTest extends TestCase {
-        MockPageContext pageContext = new MockPageContext();
+        final MockPageContext pageContext = new MockPageContext();
@@ -158 +158 @@ public class JXPathServletContextTest extends TestCase {
-        JXPathContext context = JXPathServletContexts.getPageContext(pageContext);
+        final JXPathContext context = JXPathServletContexts.getPageContext(pageContext);
@@ -160 +160 @@ public class JXPathServletContextTest extends TestCase {
-        
+
@@ -174 +174 @@ public class JXPathServletContextTest extends TestCase {
-        Iterator it = context.iteratePointers("$page/*");
+        final Iterator it = context.iteratePointers("$page/*");
diff --git a/src/test/java/org/apache/commons/jxpath/util/BasicTypeConverterTest.java b/src/test/java/org/apache/commons/jxpath/util/BasicTypeConverterTest.java
index 6a319ace..77c7ef82 100644
--- a/src/test/java/org/apache/commons/jxpath/util/BasicTypeConverterTest.java
+++ b/src/test/java/org/apache/commons/jxpath/util/BasicTypeConverterTest.java
@@ -34 +34 @@ import org.apache.commons.jxpath.Pointer;
- * 
+ *
@@ -39 +39 @@ public class BasicTypeConverterTest extends TestCase {
-        assertConversion(new Integer(1), String.class, "1");
+        assertConversion(Integer.valueOf(1), String.class, "1");
@@ -46 +46 @@ public class BasicTypeConverterTest extends TestCase {
-            Arrays.asList(new Object[] { new Integer(1), new Integer(2)}));
+            Arrays.asList(new Object[] { Integer.valueOf(1), Integer.valueOf(2)}));
@@ -58 +58 @@ public class BasicTypeConverterTest extends TestCase {
-            Arrays.asList(new Integer[] { new Integer(1), new Integer(2)}),
+            Arrays.asList(new Integer[] { Integer.valueOf(1), Integer.valueOf(2)}),
@@ -65 +65 @@ public class BasicTypeConverterTest extends TestCase {
-            Arrays.asList(new Integer[] { new Integer(1), new Integer(2)}));
+            Arrays.asList(new Integer[] { Integer.valueOf(1), Integer.valueOf(2)}));
@@ -73 +73 @@ public class BasicTypeConverterTest extends TestCase {
-        catch (Throwable ex) {
+        catch (final Throwable ex) {
@@ -79,2 +79,2 @@ public class BasicTypeConverterTest extends TestCase {
-    public void assertConversion(Object from, Class toType, Object expected) {
-        boolean can = TypeUtils.canConvert(from, toType);
+    public void assertConversion(final Object from, final Class toType, final Object expected) {
+        final boolean can = TypeUtils.canConvert(from, toType);
@@ -84 +84 @@ public class BasicTypeConverterTest extends TestCase {
-            ArrayList list = new ArrayList();
+            final ArrayList list = new ArrayList();
@@ -95 +95 @@ public class BasicTypeConverterTest extends TestCase {
-    
+
@@ -105,0 +106,2 @@ public class BasicTypeConverterTest extends TestCase {
+            private static final long serialVersionUID = 1L;
+            @Override
@@ -108,0 +111 @@ public class BasicTypeConverterTest extends TestCase {
+            @Override
@@ -112 +115,2 @@ public class BasicTypeConverterTest extends TestCase {
-            public void setValue(Object value) {
+            @Override
+            public void setValue(final Object value) {
@@ -113,0 +118 @@ public class BasicTypeConverterTest extends TestCase {
+            @Override
@@ -116,0 +122 @@ public class BasicTypeConverterTest extends TestCase {
+            @Override
@@ -119,0 +126 @@ public class BasicTypeConverterTest extends TestCase {
+            @Override
@@ -123 +130,2 @@ public class BasicTypeConverterTest extends TestCase {
-            public int compareTo(Object o) {
+            @Override
+            public int compareTo(final Object o) {
@@ -130,0 +139 @@ public class BasicTypeConverterTest extends TestCase {
+            @Override
@@ -133,0 +143 @@ public class BasicTypeConverterTest extends TestCase {
+            @Override
@@ -136,0 +147 @@ public class BasicTypeConverterTest extends TestCase {
+            @Override
@@ -138 +149 @@ public class BasicTypeConverterTest extends TestCase {
-                List list = new ArrayList();
+                final List list = new ArrayList();
@@ -148,0 +160 @@ public class BasicTypeConverterTest extends TestCase {
+            @Override
@@ -151,0 +164 @@ public class BasicTypeConverterTest extends TestCase {
+            @Override
@@ -154,0 +168 @@ public class BasicTypeConverterTest extends TestCase {
+            @Override
@@ -158,3 +172,3 @@ public class BasicTypeConverterTest extends TestCase {
-        }, Integer.class, new Integer(9));
-    }    
-    
+        }, Integer.class, Integer.valueOf(9));
+    }
+
diff --git a/src/test/java/org/apache/commons/jxpath/util/ClassLoaderUtilTest.java b/src/test/java/org/apache/commons/jxpath/util/ClassLoaderUtilTest.java
index 7c0bdfab..729f989d 100644
--- a/src/test/java/org/apache/commons/jxpath/util/ClassLoaderUtilTest.java
+++ b/src/test/java/org/apache/commons/jxpath/util/ClassLoaderUtilTest.java
@@ -8 +8 @@
- * 
+ *
@@ -10 +10 @@
- * 
+ *
@@ -35 +35 @@ public class ClassLoaderUtilTest extends TestCase {
-  
+
@@ -41 +41 @@ public class ClassLoaderUtilTest extends TestCase {
-  
+
@@ -43 +43 @@ public class ClassLoaderUtilTest extends TestCase {
-  
+
@@ -47 +47,2 @@ public class ClassLoaderUtilTest extends TestCase {
-  public void setUp() {
+  @Override
+public void setUp() {
@@ -50 +51 @@ public class ClassLoaderUtilTest extends TestCase {
-  
+
@@ -54 +55,2 @@ public class ClassLoaderUtilTest extends TestCase {
-  public void tearDown() {
+  @Override
+public void tearDown() {
@@ -57 +59 @@ public class ClassLoaderUtilTest extends TestCase {
-  
+
@@ -64 +66 @@ public class ClassLoaderUtilTest extends TestCase {
-    ClassLoader cl = new TestClassLoader(getClass().getClassLoader());
+    final ClassLoader cl = new TestClassLoader(getClass().getClassLoader());
@@ -67 +69 @@ public class ClassLoaderUtilTest extends TestCase {
-  
+
@@ -69 +71 @@ public class ClassLoaderUtilTest extends TestCase {
-   * Tests that JXPath can dynamically load a class, which is not visible to 
+   * Tests that JXPath can dynamically load a class, which is not visible to
@@ -75 +77 @@ public class ClassLoaderUtilTest extends TestCase {
-    ClassLoader cl = new TestClassLoader(getClass().getClassLoader());
+    final ClassLoader cl = new TestClassLoader(getClass().getClassLoader());
@@ -78 +80 @@ public class ClassLoaderUtilTest extends TestCase {
-  
+
@@ -80 +82 @@ public class ClassLoaderUtilTest extends TestCase {
-   * Tests that JXPath will use its class loader to dynamically load a 
+   * Tests that JXPath will use its class loader to dynamically load a
@@ -85 +87 @@ public class ClassLoaderUtilTest extends TestCase {
-    ClassLoader cl = new TestClassLoader(getClass().getClassLoader());
+    final ClassLoader cl = new TestClassLoader(getClass().getClassLoader());
@@ -89 +91 @@ public class ClassLoaderUtilTest extends TestCase {
-  
+
@@ -98 +100 @@ public class ClassLoaderUtilTest extends TestCase {
-  
+
@@ -104 +106 @@ public class ClassLoaderUtilTest extends TestCase {
-    JXPathContext context = JXPathContext.newContext(new Object());
+    final JXPathContext context = JXPathContext.newContext(new Object());
@@ -108 +110 @@ public class ClassLoaderUtilTest extends TestCase {
-    } catch( Exception e ) {
+    } catch( final Exception e ) {
@@ -112 +114 @@ public class ClassLoaderUtilTest extends TestCase {
-  
+
@@ -118 +120 @@ public class ClassLoaderUtilTest extends TestCase {
-    JXPathContext context = JXPathContext.newContext(new Object());
+    final JXPathContext context = JXPathContext.newContext(new Object());
@@ -123 +125 @@ public class ClassLoaderUtilTest extends TestCase {
-    } catch( Exception e ) {
+    } catch( final Exception e ) {
@@ -127 +129 @@ public class ClassLoaderUtilTest extends TestCase {
-  
+
@@ -129 +131 @@ public class ClassLoaderUtilTest extends TestCase {
-   * Loads this class through the given class loader and then invokes the 
+   * Loads this class through the given class loader and then invokes the
@@ -131 +133 @@ public class ClassLoaderUtilTest extends TestCase {
-   * 
+   *
@@ -136 +138 @@ public class ClassLoaderUtilTest extends TestCase {
-  private void executeTestMethodUnderClassLoader(ClassLoader cl, String methodName) {
+  private void executeTestMethodUnderClassLoader(final ClassLoader cl, final String methodName) {
@@ -140 +142 @@ public class ClassLoaderUtilTest extends TestCase {
-    } catch (ClassNotFoundException e) {
+    } catch (final ClassNotFoundException e) {
@@ -146,3 +148 @@ public class ClassLoaderUtilTest extends TestCase {
-    } catch (SecurityException e) {
-      fail(e.getMessage());
-    } catch (NoSuchMethodException e) {
+    } catch (final SecurityException | NoSuchMethodException e) {
@@ -151 +151 @@ public class ClassLoaderUtilTest extends TestCase {
-    
+
@@ -154,3 +154 @@ public class ClassLoaderUtilTest extends TestCase {
-    } catch (IllegalArgumentException e) {
-      fail(e.getMessage());
-    } catch (IllegalAccessException e) {
+    } catch (final IllegalArgumentException | IllegalAccessException e) {
@@ -158 +156 @@ public class ClassLoaderUtilTest extends TestCase {
-    } catch (InvocationTargetException e) {
+    } catch (final InvocationTargetException e) {
@@ -165 +163 @@ public class ClassLoaderUtilTest extends TestCase {
-  
+
@@ -167,2 +165,2 @@ public class ClassLoaderUtilTest extends TestCase {
-   * A simple class loader which delegates all class loading to its parent 
-   * with two exceptions. First, attempts to load the class 
+   * A simple class loader which delegates all class loading to its parent
+   * with two exceptions. First, attempts to load the class
@@ -171,3 +169,3 @@ public class ClassLoaderUtilTest extends TestCase {
-   * <code>org.apache.commons.jxpath.util.ClassLoadingExampleClass</code> will 
-   * result in the class being loaded by this class loader, regardless of 
-   * whether the parent can/has loaded it. 
+   * <code>org.apache.commons.jxpath.util.ClassLoadingExampleClass</code> will
+   * result in the class being loaded by this class loader, regardless of
+   * whether the parent can/has loaded it.
@@ -178,2 +176,2 @@ public class ClassLoaderUtilTest extends TestCase {
-    
-    public TestClassLoader(ClassLoader classLoader) {
+
+    public TestClassLoader(final ClassLoader classLoader) {
@@ -183 +181,2 @@ public class ClassLoaderUtilTest extends TestCase {
-    public synchronized Class loadClass(String name, boolean resolved) throws ClassNotFoundException {
+    @Override
+    public synchronized Class loadClass(final String name, final boolean resolved) throws ClassNotFoundException {
@@ -189,3 +188,3 @@ public class ClassLoaderUtilTest extends TestCase {
-          URL clazzUrl = this.getParent().getResource("org/apache/commons/jxpath/util/ClassLoaderUtilTest.class");
-          
-          ByteArrayOutputStream out = new ByteArrayOutputStream();
+          final URL clazzUrl = this.getParent().getResource("org/apache/commons/jxpath/util/ClassLoaderUtilTest.class");
+
+          final ByteArrayOutputStream out = new ByteArrayOutputStream();
@@ -195 +194 @@ public class ClassLoaderUtilTest extends TestCase {
-            byte[] buffer = new byte[2048];
+            final byte[] buffer = new byte[2048];
@@ -199 +198 @@ public class ClassLoaderUtilTest extends TestCase {
-          } catch( IOException e ) {
+          } catch( final IOException e ) {
@@ -202,2 +201,2 @@ public class ClassLoaderUtilTest extends TestCase {
-            try { in.close(); } catch( Exception e ) { }
-            try { out.close(); } catch( Exception e ) { }
+            try { in.close(); } catch( final Exception e ) { }
+            try { out.close(); } catch( final Exception e ) { }
@@ -205,2 +204,2 @@ public class ClassLoaderUtilTest extends TestCase {
-          
-          byte[] clazzBytes = out.toByteArray();
+
+          final byte[] clazzBytes = out.toByteArray();
diff --git a/src/test/java/org/apache/commons/jxpath/util/ClassLoadingExampleClass.java b/src/test/java/org/apache/commons/jxpath/util/ClassLoadingExampleClass.java
index 72d87af2..83ecbaa1 100644
--- a/src/test/java/org/apache/commons/jxpath/util/ClassLoadingExampleClass.java
+++ b/src/test/java/org/apache/commons/jxpath/util/ClassLoadingExampleClass.java
@@ -8 +8 @@
- * 
+ *
@@ -10 +10 @@
- * 
+ *
@@ -22 +22 @@ package org.apache.commons.jxpath.util;
- * 
+ *
diff --git a/src/test/java/org/apache/commons/jxpath/util/ValueUtilsTest.java b/src/test/java/org/apache/commons/jxpath/util/ValueUtilsTest.java
index cd53ed21..7cdff6f1 100644
--- a/src/test/java/org/apache/commons/jxpath/util/ValueUtilsTest.java
+++ b/src/test/java/org/apache/commons/jxpath/util/ValueUtilsTest.java
@@ -27,2 +27,2 @@ public class ValueUtilsTest extends TestCase {
-    
-    
+
+
@@ -61 +61 @@ public class ValueUtilsTest extends TestCase {
-    
+
