package
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
jdom
;
import
java
.
util
.
Collections
;
import
java
.
util
.
List
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
compiler
.
NodeTest
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodeIterator
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodePointer
;
import
org
.
jdom
.
Document
;
import
org
.
jdom
.
Element
;
public
class
JDOMNodeIterator
implements
NodeIterator
{
private
final
NodePointer
parent
;
private
final
NodeTest
nodeTest
;
private
final
boolean
reverse
;
private
int
position
=
0
;
private
int
index
=
0
;
private
List
children
;
private
Object
child
;
public
JDOMNodeIterator
(
final
NodePointer
parent
,
final
NodeTest
nodeTest
,
final
boolean
reverse
,
final
NodePointer
startWith
)
{
this
.
parent
=
parent
;
if
(
startWith
!=
null
)
{
this
.
child
=
startWith
.
getNode
(
)
;
}
final
Object
node
=
parent
.
getNode
(
)
;
if
(
node
instanceof
Document
)
{
this
.
children
=
(
(
Document
)
node
)
.
getContent
(
)
;
}
else
if
(
node
instanceof
Element
)
{
this
.
children
=
(
(
Element
)
node
)
.
getContent
(
)
;
}
else
{
this
.
children
=
Collections
.
EMPTY_LIST
;
}
this
.
nodeTest
=
nodeTest
;
this
.
reverse
=
reverse
;
}
@
Override
public
NodePointer
getNodePointer
(
)
{
if
(
child
==
null
)
{
if
(
!
setPosition
(
1
)
)
{
return
null
;
}
position
=
0
;
}
return
new
JDOMNodePointer
(
parent
,
child
)
;
}
@
Override
public
int
getPosition
(
)
{
return
position
;
}
@
Override
public
boolean
setPosition
(
final
int
position
)
{
while
(
this
.
position
<
position
)
{
if
(
!
next
(
)
)
{
return
false
;
}
}
while
(
this
.
position
>
position
)
{
if
(
!
previous
(
)
)
{
return
false
;
}
}
return
true
;
}
private
boolean
previous
(
)
{
position
--
;
if
(
!
reverse
)
{
while
(
--
index
>=
0
)
{
child
=
children
.
get
(
index
)
;
if
(
testChild
(
)
)
{
return
true
;
}
}
}
else
{
for
(
;
index
<
children
.
size
(
)
;
index
++
)
{
child
=
children
.
get
(
index
)
;
if
(
testChild
(
)
)
{
return
true
;
}
}
}
return
false
;
}
private
boolean
next
(
)
{
position
++
;
if
(
!
reverse
)
{
if
(
position
==
1
)
{
index
=
0
;
if
(
child
!=
null
)
{
index
=
children
.
indexOf
(
child
)
+
1
;
}
}
else
{
index
++
;
}
for
(
;
index
<
children
.
size
(
)
;
index
++
)
{
child
=
children
.
get
(
index
)
;
if
(
testChild
(
)
)
{
return
true
;
}
}
return
false
;
}
else
{
if
(
position
==
1
)
{
index
=
children
.
size
(
)
-
1
;
if
(
child
!=
null
)
{
index
=
children
.
indexOf
(
child
)
-
1
;
}
}
else
{
index
--
;
}
for
(
;
index
>=
0
;
index
--
)
{
child
=
children
.
get
(
index
)
;
if
(
testChild
(
)
)
{
return
true
;
}
}
return
false
;
}
}
private
boolean
testChild
(
)
{
return
JDOMNodePointer
.
testNode
(
parent
,
child
,
nodeTest
)
;
}
}
<EOF>
