package
org
.
apache
.
commons
.
jxpath
.
issues
;
import
java
.
io
.
StringReader
;
import
javax
.
xml
.
parsers
.
DocumentBuilder
;
import
javax
.
xml
.
parsers
.
DocumentBuilderFactory
;
import
javax
.
xml
.
parsers
.
ParserConfigurationException
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathContext
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathTestCase
;
import
org
.
w3c
.
dom
.
Document
;
import
org
.
xml
.
sax
.
InputSource
;
public
class
JXPath113Test
extends
JXPathTestCase
{
public
void
testIssue113
(
)
throws
Exception
{
Document
doc
=
JAXP
.
getDocument
(
"<xml/>"
)
;
JXPathContext
context
=
JXPathContext
.
newContext
(
doc
)
;
context
.
selectNodes
(
"//following-sibling::node()"
)
;
}
static
class
JAXP
{
public
static
Document
getDocument
(
String
xml
)
throws
Exception
{
return
getDocument
(
new
InputSource
(
new
StringReader
(
xml
)
)
)
;
}
public
static
Document
getDocument
(
InputSource
is
)
throws
Exception
{
final
DocumentBuilder
builder
=
getDocumentBuilder
(
)
;
return
builder
.
parse
(
is
)
;
}
private
static
DocumentBuilder
getDocumentBuilder
(
)
{
try
{
DocumentBuilderFactory
factory
=
DocumentBuilderFactory
.
newInstance
(
)
;
factory
.
setValidating
(
false
)
;
factory
.
setNamespaceAware
(
true
)
;
factory
.
setExpandEntityReferences
(
false
)
;
return
factory
.
newDocumentBuilder
(
)
;
}
catch
(
ParserConfigurationException
e
)
{
throw
new
Error
(
"JAXP config error:"
+
e
.
getMessage
(
)
,
e
)
;
}
}
}
}
<EOF>
