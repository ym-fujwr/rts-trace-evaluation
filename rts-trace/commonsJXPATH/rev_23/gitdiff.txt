diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java b/src/main/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java
index 645fdf53..b2e1deaa 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java
@@ -142,6 +142,10 @@ public class PredicateContext extends EvalContext {
-        if (dynamicPropertyPointer == null && !setupDynamicPropertyPointer()) {
-            return setPositionStandard(position);
-        }
-        if (position < 1
-            || position > dynamicPropertyPointer.getLength()) {
-            return false;
+        else {
+            if (dynamicPropertyPointer == null && !setupDynamicPropertyPointer()) {
+                return setPositionStandard(position);
+            }
+            if (position < 1
+                || position > dynamicPropertyPointer.getLength()) {
+                return false;
+            }
+            dynamicPropertyPointer.setIndex(position - 1);
+            return true;
@@ -149,2 +152,0 @@ public class PredicateContext extends EvalContext {
-        dynamicPropertyPointer.setIndex(position - 1);
-        return true;
diff --git a/src/main/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java b/src/main/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java
index 2efd1426..8f3c5c75 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java
@@ -636,6 +636,16 @@ public class SimplePathInterpreter {
-        // For a subscript, simply take the corresponding
-        // element from the list of results and
-        // proceed to the remaining predicates with that element
-        final int index = indexFromPredicate(context, predicate);
-        if (index < 0 || index >= parents.size()) {
-            return null;
+        else {
+            // For a subscript, simply take the corresponding
+            // element from the list of results and
+            // proceed to the remaining predicates with that element
+            final int index = indexFromPredicate(context, predicate);
+            if (index < 0 || index >= parents.size()) {
+                return null;
+            }
+            final NodePointer ptr = (NodePointer) parents.get(index);
+            return doPredicate(
+                context,
+                ptr,
+                steps,
+                currentStep,
+                predicates,
+                currentPredicate + 1);
@@ -643,8 +652,0 @@ public class SimplePathInterpreter {
-        final NodePointer ptr = (NodePointer) parents.get(index);
-        return doPredicate(
-            context,
-            ptr,
-            steps,
-            currentStep,
-            predicates,
-            currentPredicate + 1);
diff --git a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodeIterator.java b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodeIterator.java
index 89c142e8..872c638d 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodeIterator.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodeIterator.java
@@ -154,6 +153,0 @@ public class JDOMNodeIterator implements NodeIterator {
-        if (position == 1) {
-            index = children.size() - 1;
-            if (child != null) {
-                index = children.indexOf(child) - 1;
-            }
-        }
@@ -161,6 +155,8 @@ public class JDOMNodeIterator implements NodeIterator {
-            index--;
-        }
-        for (; index >= 0; index--) {
-            child = children.get(index);
-            if (testChild()) {
-                return true;
+            if (position == 1) {
+                index = children.size() - 1;
+                if (child != null) {
+                    index = children.indexOf(child) - 1;
+                }
+            }
+            else {
+                index--;
@@ -167,0 +164,7 @@ public class JDOMNodeIterator implements NodeIterator {
+            for (; index >= 0; index--) {
+                child = children.get(index);
+                if (testChild()) {
+                    return true;
+                }
+            }
+            return false;
@@ -169 +171,0 @@ public class JDOMNodeIterator implements NodeIterator {
-        return false;
diff --git a/src/main/java/org/apache/commons/jxpath/ri/parser/SimpleCharStream.java b/src/main/java/org/apache/commons/jxpath/ri/parser/SimpleCharStream.java
index 35e3deab..5e5443a6 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/parser/SimpleCharStream.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/parser/SimpleCharStream.java
@@ -130,0 +131,2 @@ public class SimpleCharStream
+        } else {
+            maxNextCharInd += i;
@@ -132 +133,0 @@ public class SimpleCharStream
-        maxNextCharInd += i;
@@ -348,0 +350,3 @@ public int getLine() {
+    } else {
+        return new String(buffer, tokenBegin, bufsize - tokenBegin) +
+                              new String(buffer, 0, bufpos + 1);
@@ -350,2 +353,0 @@ public int getLine() {
-    return new String(buffer, tokenBegin, bufsize - tokenBegin) +
-                          new String(buffer, 0, bufpos + 1);
diff --git a/src/main/java/org/apache/commons/jxpath/ri/parser/XPathParserTokenManager.java b/src/main/java/org/apache/commons/jxpath/ri/parser/XPathParserTokenManager.java
index 1cf32d67..2a1a74c7 100644
--- a/src/main/java/org/apache/commons/jxpath/ri/parser/XPathParserTokenManager.java
+++ b/src/main/java/org/apache/commons/jxpath/ri/parser/XPathParserTokenManager.java
@@ -1383,0 +1384,11 @@ private void jjCheckNAddTwoStates(final int state1, final int state2)
+private void jjCheckNAddStates(int start, final int end)
+{
+   do {
+      jjCheckNAdd(jjnextStates[start]);
+   } while (start++ != end);
+}
+private void jjCheckNAddStates(final int start)
+{
+   jjCheckNAdd(jjnextStates[start]);
+   jjCheckNAdd(jjnextStates[start + 1]);
+}
@@ -1508,0 +1520 @@ private int jjMoveNfa_0(final int startState, int curPos)
+   final int[] nextStates;
@@ -1512,0 +1525 @@ private int jjMoveNfa_0(final int startState, int curPos)
+   final int j;
@@ -1907,0 +1921,2 @@ public void SwitchTo(final int lexState)
+} else {
+    curLexState = lexState;
@@ -1909 +1923,0 @@ public void SwitchTo(final int lexState)
-curLexState = lexState;
@@ -1933,0 +1948,2 @@ public Token getNextToken()
+  final int kind;
+  final Token specialToken = null;
@@ -1970 +1986,4 @@ public Token getNextToken()
-    continue EOFLoop;
+      else
+      {
+         continue EOFLoop;
+      }
