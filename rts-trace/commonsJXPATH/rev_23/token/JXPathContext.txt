package
org
.
apache
.
commons
.
jxpath
;
import
java
.
text
.
DecimalFormatSymbols
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
import
java
.
util
.
Locale
;
import
org
.
apache
.
commons
.
jxpath
.
util
.
KeyManagerUtils
;
public
abstract
class
JXPathContext
{
private
static
volatile
JXPathContextFactory
contextFactory
;
private
static
volatile
JXPathContext
compilationContext
;
private
static
final
PackageFunctions
GENERIC_FUNCTIONS
=
new
PackageFunctions
(
""
,
null
)
;
protected
JXPathContext
parentContext
;
protected
Object
contextBean
;
protected
Variables
vars
;
protected
Functions
functions
;
protected
AbstractFactory
factory
;
protected
IdentityManager
idManager
;
protected
KeyManager
keyManager
;
protected
HashMap
decimalFormats
;
private
Locale
locale
;
private
boolean
lenientSet
=
false
;
private
boolean
lenient
=
false
;
public
static
JXPathContext
newContext
(
final
Object
contextBean
)
{
return
getContextFactory
(
)
.
newContext
(
null
,
contextBean
)
;
}
public
static
JXPathContext
newContext
(
final
JXPathContext
parentContext
,
final
Object
contextBean
)
{
return
getContextFactory
(
)
.
newContext
(
parentContext
,
contextBean
)
;
}
private
static
JXPathContextFactory
getContextFactory
(
)
{
if
(
contextFactory
==
null
)
{
contextFactory
=
JXPathContextFactory
.
newInstance
(
)
;
}
return
contextFactory
;
}
protected
JXPathContext
(
final
JXPathContext
parentContext
,
final
Object
contextBean
)
{
this
.
parentContext
=
parentContext
;
this
.
contextBean
=
contextBean
;
}
public
JXPathContext
getParentContext
(
)
{
return
parentContext
;
}
public
Object
getContextBean
(
)
{
return
contextBean
;
}
public
abstract
Pointer
getContextPointer
(
)
;
public
abstract
JXPathContext
getRelativeContext
(
Pointer
pointer
)
;
public
void
setVariables
(
final
Variables
vars
)
{
this
.
vars
=
vars
;
}
public
Variables
getVariables
(
)
{
if
(
vars
==
null
)
{
vars
=
new
BasicVariables
(
)
;
}
return
vars
;
}
public
void
setFunctions
(
final
Functions
functions
)
{
this
.
functions
=
functions
;
}
public
Functions
getFunctions
(
)
{
if
(
functions
!=
null
)
{
return
functions
;
}
if
(
parentContext
==
null
)
{
return
GENERIC_FUNCTIONS
;
}
return
null
;
}
public
void
setFactory
(
final
AbstractFactory
factory
)
{
this
.
factory
=
factory
;
}
public
AbstractFactory
getFactory
(
)
{
if
(
factory
==
null
&&
parentContext
!=
null
)
{
return
parentContext
.
getFactory
(
)
;
}
return
factory
;
}
public
synchronized
void
setLocale
(
final
Locale
locale
)
{
this
.
locale
=
locale
;
}
public
synchronized
Locale
getLocale
(
)
{
if
(
locale
==
null
)
{
if
(
parentContext
!=
null
)
{
return
parentContext
.
getLocale
(
)
;
}
locale
=
Locale
.
getDefault
(
)
;
}
return
locale
;
}
public
synchronized
void
setDecimalFormatSymbols
(
final
String
name
,
final
DecimalFormatSymbols
symbols
)
{
if
(
decimalFormats
==
null
)
{
decimalFormats
=
new
HashMap
(
)
;
}
decimalFormats
.
put
(
name
,
symbols
)
;
}
public
synchronized
DecimalFormatSymbols
getDecimalFormatSymbols
(
final
String
name
)
{
if
(
decimalFormats
==
null
)
{
return
parentContext
==
null
?
null
:
parentContext
.
getDecimalFormatSymbols
(
name
)
;
}
return
(
DecimalFormatSymbols
)
decimalFormats
.
get
(
name
)
;
}
public
synchronized
void
setLenient
(
final
boolean
lenient
)
{
this
.
lenient
=
lenient
;
lenientSet
=
true
;
}
public
synchronized
boolean
isLenient
(
)
{
if
(
!
lenientSet
&&
parentContext
!=
null
)
{
return
parentContext
.
isLenient
(
)
;
}
return
lenient
;
}
public
static
CompiledExpression
compile
(
final
String
xpath
)
{
if
(
compilationContext
==
null
)
{
compilationContext
=
JXPathContext
.
newContext
(
null
)
;
}
return
compilationContext
.
compilePath
(
xpath
)
;
}
protected
abstract
CompiledExpression
compilePath
(
String
xpath
)
;
public
Object
selectSingleNode
(
final
String
xpath
)
{
final
Pointer
pointer
=
getPointer
(
xpath
)
;
return
pointer
==
null
?
null
:
pointer
.
getNode
(
)
;
}
public
List
selectNodes
(
final
String
xpath
)
{
final
ArrayList
list
=
new
ArrayList
(
)
;
final
Iterator
iterator
=
iteratePointers
(
xpath
)
;
while
(
iterator
.
hasNext
(
)
)
{
final
Pointer
pointer
=
(
Pointer
)
iterator
.
next
(
)
;
list
.
add
(
pointer
.
getNode
(
)
)
;
}
return
list
;
}
public
abstract
Object
getValue
(
String
xpath
)
;
public
abstract
Object
getValue
(
String
xpath
,
Class
requiredType
)
;
public
abstract
void
setValue
(
String
xpath
,
Object
value
)
;
public
abstract
Pointer
createPath
(
String
xpath
)
;
public
abstract
Pointer
createPathAndSetValue
(
String
xpath
,
Object
value
)
;
public
abstract
void
removePath
(
String
xpath
)
;
public
abstract
void
removeAll
(
String
xpath
)
;
public
abstract
Iterator
iterate
(
String
xpath
)
;
public
abstract
Pointer
getPointer
(
String
xpath
)
;
public
abstract
Iterator
iteratePointers
(
String
xpath
)
;
public
void
setIdentityManager
(
final
IdentityManager
idManager
)
{
this
.
idManager
=
idManager
;
}
public
IdentityManager
getIdentityManager
(
)
{
if
(
idManager
==
null
&&
parentContext
!=
null
)
{
return
parentContext
.
getIdentityManager
(
)
;
}
return
idManager
;
}
public
Pointer
getPointerByID
(
final
String
id
)
{
final
IdentityManager
manager
=
getIdentityManager
(
)
;
if
(
manager
!=
null
)
{
return
manager
.
getPointerByID
(
this
,
id
)
;
}
throw
new
JXPathException
(
"Cannot find an element by ID - "
+
"no IdentityManager has been specified"
)
;
}
public
void
setKeyManager
(
final
KeyManager
keyManager
)
{
this
.
keyManager
=
keyManager
;
}
public
KeyManager
getKeyManager
(
)
{
if
(
keyManager
==
null
&&
parentContext
!=
null
)
{
return
parentContext
.
getKeyManager
(
)
;
}
return
keyManager
;
}
public
Pointer
getPointerByKey
(
final
String
key
,
final
String
value
)
{
final
KeyManager
manager
=
getKeyManager
(
)
;
if
(
manager
!=
null
)
{
return
manager
.
getPointerByKey
(
this
,
key
,
value
)
;
}
throw
new
JXPathException
(
"Cannot find an element by key - "
+
"no KeyManager has been specified"
)
;
}
public
NodeSet
getNodeSetByKey
(
final
String
key
,
final
Object
value
)
{
final
KeyManager
manager
=
getKeyManager
(
)
;
if
(
manager
!=
null
)
{
return
KeyManagerUtils
.
getExtendedKeyManager
(
manager
)
.
getNodeSetByKey
(
this
,
key
,
value
)
;
}
throw
new
JXPathException
(
"Cannot find an element by key - "
+
"no KeyManager has been specified"
)
;
}
public
void
registerNamespace
(
final
String
prefix
,
final
String
namespaceURI
)
{
throw
new
UnsupportedOperationException
(
"Namespace registration is not implemented by "
+
getClass
(
)
)
;
}
public
String
getNamespaceURI
(
final
String
prefix
)
{
throw
new
UnsupportedOperationException
(
"Namespace registration is not implemented by "
+
getClass
(
)
)
;
}
public
String
getPrefix
(
final
String
namespaceURI
)
{
throw
new
UnsupportedOperationException
(
"Namespace registration is not implemented by "
+
getClass
(
)
)
;
}
public
void
setNamespaceContextPointer
(
final
Pointer
namespaceContextPointer
)
{
throw
new
UnsupportedOperationException
(
"Namespace registration is not implemented by "
+
getClass
(
)
)
;
}
public
Pointer
getNamespaceContextPointer
(
)
{
throw
new
UnsupportedOperationException
(
"Namespace registration is not implemented by "
+
getClass
(
)
)
;
}
public
void
setExceptionHandler
(
final
ExceptionHandler
exceptionHandler
)
{
throw
new
UnsupportedOperationException
(
"ExceptionHandler registration is not implemented by "
+
getClass
(
)
)
;
}
}
<EOF>
