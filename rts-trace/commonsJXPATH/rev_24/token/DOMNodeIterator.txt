package
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
dom
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
compiler
.
NodeTest
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodeIterator
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodePointer
;
import
org
.
w3c
.
dom
.
Node
;
public
class
DOMNodeIterator
implements
NodeIterator
{
private
NodePointer
parent
;
private
NodeTest
nodeTest
;
private
Node
node
;
private
Node
child
=
null
;
private
boolean
reverse
;
private
int
position
=
0
;
public
DOMNodeIterator
(
NodePointer
parent
,
NodeTest
nodeTest
,
boolean
reverse
,
NodePointer
startWith
)
{
this
.
parent
=
parent
;
this
.
node
=
(
Node
)
parent
.
getNode
(
)
;
if
(
startWith
!=
null
)
{
this
.
child
=
(
Node
)
startWith
.
getNode
(
)
;
}
this
.
nodeTest
=
nodeTest
;
this
.
reverse
=
reverse
;
}
public
NodePointer
getNodePointer
(
)
{
if
(
position
==
0
)
{
setPosition
(
1
)
;
}
return
child
==
null
?
null
:
new
DOMNodePointer
(
parent
,
child
)
;
}
public
int
getPosition
(
)
{
return
position
;
}
public
boolean
setPosition
(
int
position
)
{
while
(
this
.
position
<
position
)
{
if
(
!
next
(
)
)
{
return
false
;
}
}
while
(
this
.
position
>
position
)
{
if
(
!
previous
(
)
)
{
return
false
;
}
}
return
true
;
}
private
boolean
previous
(
)
{
position
--
;
if
(
!
reverse
)
{
if
(
position
==
0
)
{
child
=
null
;
}
else
if
(
child
==
null
)
{
child
=
node
.
getLastChild
(
)
;
}
else
{
child
=
child
.
getPreviousSibling
(
)
;
}
while
(
child
!=
null
&&
!
testChild
(
)
)
{
child
=
child
.
getPreviousSibling
(
)
;
}
}
else
{
child
=
child
.
getNextSibling
(
)
;
while
(
child
!=
null
&&
!
testChild
(
)
)
{
child
=
child
.
getNextSibling
(
)
;
}
}
return
child
!=
null
;
}
private
boolean
next
(
)
{
position
++
;
if
(
!
reverse
)
{
if
(
position
==
1
)
{
if
(
child
==
null
)
{
child
=
node
.
getFirstChild
(
)
;
}
else
{
child
=
child
.
getNextSibling
(
)
;
}
}
else
{
child
=
child
.
getNextSibling
(
)
;
}
while
(
child
!=
null
&&
!
testChild
(
)
)
{
child
=
child
.
getNextSibling
(
)
;
}
}
else
{
if
(
position
==
1
)
{
if
(
child
==
null
)
{
child
=
node
.
getLastChild
(
)
;
}
else
{
child
=
child
.
getPreviousSibling
(
)
;
}
}
else
{
child
=
child
.
getPreviousSibling
(
)
;
}
while
(
child
!=
null
&&
!
testChild
(
)
)
{
child
=
child
.
getPreviousSibling
(
)
;
}
}
return
child
!=
null
;
}
private
boolean
testChild
(
)
{
return
DOMNodePointer
.
testNode
(
child
,
nodeTest
)
;
}
}
<EOF>
