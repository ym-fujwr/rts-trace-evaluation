package
org
.
apache
.
commons
.
jxpath
.
ri
.
parser
;
public
class
ParseException
extends
Exception
{
private
static
final
long
serialVersionUID
=
1L
;
public
ParseException
(
final
Token
currentTokenVal
,
final
int
[
]
[
]
expectedTokenSequencesVal
,
final
String
[
]
tokenImageVal
)
{
super
(
""
)
;
specialConstructor
=
true
;
currentToken
=
currentTokenVal
;
expectedTokenSequences
=
expectedTokenSequencesVal
;
tokenImage
=
tokenImageVal
;
}
public
ParseException
(
)
{
specialConstructor
=
false
;
}
public
ParseException
(
final
String
message
)
{
super
(
message
)
;
specialConstructor
=
false
;
}
protected
boolean
specialConstructor
;
public
Token
currentToken
;
public
int
[
]
[
]
expectedTokenSequences
;
public
String
[
]
tokenImage
;
@
Override
public
String
getMessage
(
)
{
if
(
!
specialConstructor
)
{
return
super
.
getMessage
(
)
;
}
String
expected
=
""
;
int
maxSize
=
0
;
for
(
final
int
[
]
element
:
expectedTokenSequences
)
{
if
(
maxSize
<
element
.
length
)
{
maxSize
=
element
.
length
;
}
for
(
final
int
element2
:
element
)
{
expected
+=
tokenImage
[
element2
]
+
" "
;
}
if
(
element
[
element
.
length
-
1
]
!=
0
)
{
expected
+=
"..."
;
}
expected
+=
eol
+
"    "
;
}
String
retval
=
"Encountered \""
;
Token
tok
=
currentToken
.
next
;
for
(
int
i
=
0
;
i
<
maxSize
;
i
++
)
{
if
(
i
!=
0
)
{
retval
+=
" "
;
}
if
(
tok
.
kind
==
0
)
{
retval
+=
tokenImage
[
0
]
;
break
;
}
retval
+=
add_escapes
(
tok
.
image
)
;
tok
=
tok
.
next
;
}
retval
+=
"\" at line "
+
currentToken
.
next
.
beginLine
+
", column "
+
currentToken
.
next
.
beginColumn
;
retval
+=
"."
+
eol
;
if
(
expectedTokenSequences
.
length
==
1
)
{
retval
+=
"Was expecting:"
+
eol
+
"    "
;
}
else
{
retval
+=
"Was expecting one of:"
+
eol
+
"    "
;
}
retval
+=
expected
;
return
retval
;
}
protected
String
eol
=
System
.
getProperty
(
"line.separator"
,
"\n"
)
;
protected
String
add_escapes
(
final
String
str
)
{
final
StringBuffer
retval
=
new
StringBuffer
(
)
;
char
ch
;
for
(
int
i
=
0
;
i
<
str
.
length
(
)
;
i
++
)
{
switch
(
str
.
charAt
(
i
)
)
{
case
0
:
continue
;
case
'\b'
:
retval
.
append
(
"\\b"
)
;
continue
;
case
'\t'
:
retval
.
append
(
"\\t"
)
;
continue
;
case
'\n'
:
retval
.
append
(
"\\n"
)
;
continue
;
case
'\f'
:
retval
.
append
(
"\\f"
)
;
continue
;
case
'\r'
:
retval
.
append
(
"\\r"
)
;
continue
;
case
'\"'
:
retval
.
append
(
"\\\""
)
;
continue
;
case
'\''
:
retval
.
append
(
"\\\'"
)
;
continue
;
case
'\\'
:
retval
.
append
(
"\\\\"
)
;
continue
;
default
:
if
(
(
ch
=
str
.
charAt
(
i
)
)
<
0x20
||
ch
>
0x7e
)
{
final
String
s
=
"0000"
+
Integer
.
toString
(
ch
,
16
)
;
retval
.
append
(
"\\u"
+
s
.
substring
(
s
.
length
(
)
-
4
,
s
.
length
(
)
)
)
;
}
else
{
retval
.
append
(
ch
)
;
}
continue
;
}
}
return
retval
.
toString
(
)
;
}
}
<EOF>
