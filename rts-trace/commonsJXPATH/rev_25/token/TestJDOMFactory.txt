package
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
jdom
;
import
java
.
util
.
List
;
import
org
.
apache
.
commons
.
jxpath
.
AbstractFactory
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathContext
;
import
org
.
apache
.
commons
.
jxpath
.
Pointer
;
import
org
.
jdom
.
Element
;
public
class
TestJDOMFactory
extends
AbstractFactory
{
@
Override
public
boolean
createObject
(
final
JXPathContext
context
,
final
Pointer
pointer
,
final
Object
parent
,
final
String
name
,
final
int
index
)
{
if
(
name
.
equals
(
"location"
)
||
name
.
equals
(
"address"
)
||
name
.
equals
(
"street"
)
)
{
addJDOMElement
(
(
Element
)
parent
,
index
,
name
,
null
)
;
return
true
;
}
if
(
name
.
startsWith
(
"price:"
)
)
{
final
String
namespaceURI
=
context
.
getNamespaceURI
(
"price"
)
;
addJDOMElement
(
(
Element
)
parent
,
index
,
name
,
namespaceURI
)
;
return
true
;
}
return
false
;
}
private
void
addJDOMElement
(
final
Element
parent
,
final
int
index
,
String
tag
,
final
String
namespaceURI
)
{
final
List
children
=
parent
.
getContent
(
)
;
int
count
=
0
;
for
(
final
Object
child
:
children
)
{
if
(
child
instanceof
Element
&&
(
(
Element
)
child
)
.
getQualifiedName
(
)
.
equals
(
tag
)
)
{
count
++
;
}
}
while
(
count
<=
index
)
{
Element
newElement
;
if
(
namespaceURI
!=
null
)
{
final
String
prefix
=
tag
.
substring
(
0
,
tag
.
indexOf
(
':'
)
)
;
tag
=
tag
.
substring
(
tag
.
indexOf
(
':'
)
+
1
)
;
newElement
=
new
Element
(
tag
,
prefix
,
namespaceURI
)
;
}
else
{
newElement
=
new
Element
(
tag
)
;
}
parent
.
addContent
(
newElement
)
;
count
++
;
}
}
@
Override
public
boolean
declareVariable
(
final
JXPathContext
context
,
final
String
name
)
{
return
false
;
}
}
<EOF>
