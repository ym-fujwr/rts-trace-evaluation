package
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
dynabeans
;
import
java
.
util
.
Locale
;
import
org
.
apache
.
commons
.
beanutils
.
DynaBean
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
QName
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodePointer
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
beans
.
PropertyOwnerPointer
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
beans
.
PropertyPointer
;
public
class
DynaBeanPointer
extends
PropertyOwnerPointer
{
private
static
final
long
serialVersionUID
=
-
9135052498044877965L
;
private
QName
name
;
private
DynaBean
dynaBean
;
public
DynaBeanPointer
(
QName
name
,
DynaBean
dynaBean
,
Locale
locale
)
{
super
(
null
,
locale
)
;
this
.
name
=
name
;
this
.
dynaBean
=
dynaBean
;
}
public
DynaBeanPointer
(
NodePointer
parent
,
QName
name
,
DynaBean
dynaBean
)
{
super
(
parent
)
;
this
.
name
=
name
;
this
.
dynaBean
=
dynaBean
;
}
public
PropertyPointer
getPropertyPointer
(
)
{
return
new
DynaBeanPropertyPointer
(
this
,
dynaBean
)
;
}
public
QName
getName
(
)
{
return
name
;
}
public
Object
getBaseValue
(
)
{
return
dynaBean
;
}
public
Object
getImmediateNode
(
)
{
return
dynaBean
;
}
public
boolean
isCollection
(
)
{
return
false
;
}
public
int
getLength
(
)
{
return
1
;
}
public
boolean
isLeaf
(
)
{
return
false
;
}
public
int
hashCode
(
)
{
return
name
==
null
?
0
:
name
.
hashCode
(
)
;
}
public
boolean
equals
(
Object
object
)
{
if
(
object
==
this
)
{
return
true
;
}
if
(
!
(
object
instanceof
DynaBeanPointer
)
)
{
return
false
;
}
DynaBeanPointer
other
=
(
DynaBeanPointer
)
object
;
if
(
!
(
equalObjects
(
parent
,
other
.
parent
)
&&
equalObjects
(
name
,
other
.
name
)
)
)
{
return
false
;
}
int
iThis
=
(
index
==
WHOLE_COLLECTION
?
0
:
index
)
;
int
iOther
=
(
other
.
index
==
WHOLE_COLLECTION
?
0
:
other
.
index
)
;
return
iThis
==
iOther
&&
dynaBean
==
other
.
dynaBean
;
}
public
String
asPath
(
)
{
return
parent
==
null
?
"/"
:
super
.
asPath
(
)
;
}
private
static
boolean
equalObjects
(
Object
o1
,
Object
o2
)
{
return
o1
==
o2
||
o1
!=
null
&&
o1
.
equals
(
o2
)
;
}
}
<EOF>
