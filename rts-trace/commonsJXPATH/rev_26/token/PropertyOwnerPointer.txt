package
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
beans
;
import
java
.
util
.
Locale
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathInvalidAccessException
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
Compiler
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
QName
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
compiler
.
NodeNameTest
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
compiler
.
NodeTest
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
compiler
.
NodeTypeTest
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodeIterator
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodePointer
;
import
org
.
apache
.
commons
.
jxpath
.
util
.
ValueUtils
;
public
abstract
class
PropertyOwnerPointer
extends
NodePointer
{
private
static
final
Object
UNINITIALIZED
=
new
Object
(
)
;
private
Object
value
=
UNINITIALIZED
;
public
NodeIterator
childIterator
(
NodeTest
test
,
boolean
reverse
,
NodePointer
startWith
)
{
if
(
test
==
null
)
{
return
createNodeIterator
(
null
,
reverse
,
startWith
)
;
}
if
(
test
instanceof
NodeNameTest
)
{
NodeNameTest
nodeNameTest
=
(
NodeNameTest
)
test
;
QName
testName
=
nodeNameTest
.
getNodeName
(
)
;
if
(
isValidProperty
(
testName
)
)
{
return
createNodeIterator
(
nodeNameTest
.
isWildcard
(
)
?
null
:
testName
.
toString
(
)
,
reverse
,
startWith
)
;
}
return
null
;
}
return
test
instanceof
NodeTypeTest
&&
(
(
NodeTypeTest
)
test
)
.
getNodeType
(
)
==
Compiler
.
NODE_TYPE_NODE
?
createNodeIterator
(
null
,
reverse
,
startWith
)
:
null
;
}
public
NodeIterator
createNodeIterator
(
String
property
,
boolean
reverse
,
NodePointer
startWith
)
{
return
new
PropertyIterator
(
this
,
property
,
reverse
,
startWith
)
;
}
public
NodeIterator
attributeIterator
(
QName
name
)
{
return
new
BeanAttributeIterator
(
this
,
name
)
;
}
protected
PropertyOwnerPointer
(
NodePointer
parent
,
Locale
locale
)
{
super
(
parent
,
locale
)
;
}
protected
PropertyOwnerPointer
(
NodePointer
parent
)
{
super
(
parent
)
;
}
public
void
setIndex
(
int
index
)
{
if
(
this
.
index
!=
index
)
{
super
.
setIndex
(
index
)
;
value
=
UNINITIALIZED
;
}
}
public
Object
getImmediateNode
(
)
{
if
(
value
==
UNINITIALIZED
)
{
value
=
index
==
WHOLE_COLLECTION
?
ValueUtils
.
getValue
(
getBaseValue
(
)
)
:
ValueUtils
.
getValue
(
getBaseValue
(
)
,
index
)
;
}
return
value
;
}
public
abstract
QName
getName
(
)
;
public
boolean
isValidProperty
(
QName
name
)
{
return
isDefaultNamespace
(
name
.
getPrefix
(
)
)
;
}
public
void
setValue
(
Object
value
)
{
this
.
value
=
value
;
if
(
parent
!=
null
)
{
if
(
parent
.
isContainer
(
)
)
{
parent
.
setValue
(
value
)
;
}
else
{
if
(
index
==
WHOLE_COLLECTION
)
{
throw
new
UnsupportedOperationException
(
"Cannot setValue of an object that is not "
+
"some other object's property"
)
;
}
throw
new
JXPathInvalidAccessException
(
"The specified collection element does not exist: "
+
this
)
;
}
}
else
{
throw
new
UnsupportedOperationException
(
"Cannot replace the root object"
)
;
}
}
public
void
remove
(
)
{
this
.
value
=
null
;
if
(
parent
!=
null
)
{
parent
.
remove
(
)
;
}
else
{
throw
new
UnsupportedOperationException
(
"Cannot remove an object that is not "
+
"some other object's property or a collection element"
)
;
}
}
public
abstract
PropertyPointer
getPropertyPointer
(
)
;
public
boolean
isDynamicPropertyDeclarationSupported
(
)
{
return
false
;
}
public
int
compareChildNodePointers
(
NodePointer
pointer1
,
NodePointer
pointer2
)
{
int
r
=
pointer1
.
getName
(
)
.
toString
(
)
.
compareTo
(
pointer2
.
getName
(
)
.
toString
(
)
)
;
return
r
==
0
?
pointer1
.
getIndex
(
)
-
pointer2
.
getIndex
(
)
:
r
;
}
}
<EOF>
