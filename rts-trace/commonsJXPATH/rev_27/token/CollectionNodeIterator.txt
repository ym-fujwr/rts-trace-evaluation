package
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
beans
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathException
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodeIterator
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodePointer
;
public
abstract
class
CollectionNodeIterator
implements
NodeIterator
{
private
CollectionPointer
pointer
;
private
boolean
reverse
;
private
NodePointer
startWith
;
private
int
position
;
private
List
collection
;
protected
CollectionNodeIterator
(
CollectionPointer
pointer
,
boolean
reverse
,
NodePointer
startWith
)
{
this
.
pointer
=
pointer
;
this
.
reverse
=
reverse
;
this
.
startWith
=
startWith
;
}
protected
abstract
NodeIterator
getElementNodeIterator
(
NodePointer
elementPointer
)
;
public
int
getPosition
(
)
{
return
position
;
}
public
boolean
setPosition
(
int
position
)
{
if
(
collection
==
null
)
{
prepare
(
)
;
}
if
(
position
<
1
||
position
>
collection
.
size
(
)
)
{
return
false
;
}
this
.
position
=
position
;
return
true
;
}
public
NodePointer
getNodePointer
(
)
{
if
(
position
==
0
)
{
return
null
;
}
return
(
NodePointer
)
collection
.
get
(
position
-
1
)
;
}
private
void
prepare
(
)
{
collection
=
new
ArrayList
(
)
;
NodePointer
ptr
=
(
NodePointer
)
pointer
.
clone
(
)
;
int
length
=
ptr
.
getLength
(
)
;
for
(
int
i
=
0
;
i
<
length
;
i
++
)
{
ptr
.
setIndex
(
i
)
;
NodePointer
elementPointer
=
ptr
.
getValuePointer
(
)
;
NodeIterator
iter
=
getElementNodeIterator
(
elementPointer
)
;
for
(
int
j
=
1
;
iter
.
setPosition
(
j
)
;
j
++
)
{
NodePointer
childPointer
=
iter
.
getNodePointer
(
)
;
if
(
reverse
)
{
collection
.
add
(
0
,
childPointer
)
;
}
else
{
collection
.
add
(
childPointer
)
;
}
}
}
if
(
startWith
!=
null
)
{
int
index
=
collection
.
indexOf
(
startWith
)
;
if
(
index
==
-
1
)
{
throw
new
JXPathException
(
"Invalid starting pointer for iterator: "
+
startWith
)
;
}
while
(
collection
.
size
(
)
>
index
)
{
if
(
!
reverse
)
{
collection
.
remove
(
collection
.
size
(
)
-
1
)
;
}
else
{
collection
.
remove
(
0
)
;
}
}
}
}
}
<EOF>
