package
org
.
apache
.
commons
.
jxpath
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Collections
;
import
java
.
util
.
List
;
public
class
BasicNodeSet
implements
NodeSet
{
private
List
pointers
=
new
ArrayList
(
)
;
private
List
readOnlyPointers
;
private
List
nodes
;
private
List
values
;
public
void
add
(
Pointer
pointer
)
{
if
(
pointers
.
add
(
pointer
)
)
{
clearCacheLists
(
)
;
}
}
public
void
add
(
NodeSet
nodeSet
)
{
if
(
pointers
.
addAll
(
nodeSet
.
getPointers
(
)
)
)
{
clearCacheLists
(
)
;
}
}
public
void
remove
(
Pointer
pointer
)
{
if
(
pointers
.
remove
(
pointer
)
)
{
clearCacheLists
(
)
;
}
}
public
synchronized
List
getPointers
(
)
{
if
(
readOnlyPointers
==
null
)
{
readOnlyPointers
=
Collections
.
unmodifiableList
(
pointers
)
;
}
return
readOnlyPointers
;
}
public
synchronized
List
getNodes
(
)
{
if
(
nodes
==
null
)
{
nodes
=
new
ArrayList
(
)
;
for
(
int
i
=
0
;
i
<
pointers
.
size
(
)
;
i
++
)
{
Pointer
pointer
=
(
Pointer
)
pointers
.
get
(
i
)
;
nodes
.
add
(
pointer
.
getNode
(
)
)
;
}
nodes
=
Collections
.
unmodifiableList
(
nodes
)
;
}
return
nodes
;
}
public
synchronized
List
getValues
(
)
{
if
(
values
==
null
)
{
values
=
new
ArrayList
(
)
;
for
(
int
i
=
0
;
i
<
pointers
.
size
(
)
;
i
++
)
{
Pointer
pointer
=
(
Pointer
)
pointers
.
get
(
i
)
;
values
.
add
(
pointer
.
getValue
(
)
)
;
}
values
=
Collections
.
unmodifiableList
(
values
)
;
}
return
values
;
}
public
String
toString
(
)
{
return
pointers
.
toString
(
)
;
}
private
synchronized
void
clearCacheLists
(
)
{
readOnlyPointers
=
null
;
nodes
=
null
;
values
=
null
;
}
}
<EOF>
