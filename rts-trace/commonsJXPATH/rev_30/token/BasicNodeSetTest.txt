package
org
.
apache
.
commons
.
jxpath
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
import
org
.
w3c
.
dom
.
Element
;
public
class
BasicNodeSetTest
extends
JXPathTestCase
{
protected
JXPathContext
context
;
protected
BasicNodeSet
nodeSet
;
protected
void
setUp
(
)
throws
Exception
{
super
.
setUp
(
)
;
context
=
JXPathContext
.
newContext
(
new
TestMixedModelBean
(
)
)
;
nodeSet
=
new
BasicNodeSet
(
)
;
}
protected
void
addPointers
(
String
xpath
)
{
for
(
Iterator
iter
=
context
.
iteratePointers
(
xpath
)
;
iter
.
hasNext
(
)
;
)
{
nodeSet
.
add
(
(
Pointer
)
iter
.
next
(
)
)
;
}
nudge
(
)
;
}
protected
void
removePointers
(
String
xpath
)
{
for
(
Iterator
iter
=
context
.
iteratePointers
(
xpath
)
;
iter
.
hasNext
(
)
;
)
{
nodeSet
.
remove
(
(
Pointer
)
iter
.
next
(
)
)
;
}
nudge
(
)
;
}
protected
void
nudge
(
)
{
nodeSet
.
getPointers
(
)
;
nodeSet
.
getValues
(
)
;
nodeSet
.
getNodes
(
)
;
}
public
void
testAdd
(
)
{
addPointers
(
"/bean/integers"
)
;
assertEquals
(
nodeSet
.
getPointers
(
)
.
toString
(
)
,
list
(
"/bean/integers[1]"
,
"/bean/integers[2]"
,
"/bean/integers[3]"
,
"/bean/integers[4]"
)
.
toString
(
)
)
;
assertEquals
(
list
(
new
Integer
(
1
)
,
new
Integer
(
2
)
,
new
Integer
(
3
)
,
new
Integer
(
4
)
)
,
nodeSet
.
getValues
(
)
)
;
assertEquals
(
list
(
new
Integer
(
1
)
,
new
Integer
(
2
)
,
new
Integer
(
3
)
,
new
Integer
(
4
)
)
,
nodeSet
.
getNodes
(
)
)
;
}
public
void
testRemove
(
)
{
addPointers
(
"/bean/integers"
)
;
removePointers
(
"/bean/integers[4]"
)
;
assertEquals
(
list
(
"/bean/integers[1]"
,
"/bean/integers[2]"
,
"/bean/integers[3]"
)
.
toString
(
)
,
nodeSet
.
getPointers
(
)
.
toString
(
)
)
;
assertEquals
(
list
(
new
Integer
(
1
)
,
new
Integer
(
2
)
,
new
Integer
(
3
)
)
,
nodeSet
.
getValues
(
)
)
;
assertEquals
(
list
(
new
Integer
(
1
)
,
new
Integer
(
2
)
,
new
Integer
(
3
)
)
,
nodeSet
.
getNodes
(
)
)
;
}
public
void
testNodes
(
)
{
addPointers
(
"/document/vendor/contact"
)
;
assertEquals
(
list
(
"/document/vendor[1]/contact[1]"
,
"/document/vendor[1]/contact[2]"
,
"/document/vendor[1]/contact[3]"
,
"/document/vendor[1]/contact[4]"
)
.
toString
(
)
,
nodeSet
.
getPointers
(
)
.
toString
(
)
)
;
assertEquals
(
list
(
"John"
,
"Jack"
,
"Jim"
,
"Jack Black"
)
,
nodeSet
.
getValues
(
)
)
;
assertElementNames
(
list
(
"contact"
,
"contact"
,
"contact"
,
"contact"
)
,
nodeSet
.
getNodes
(
)
)
;
assertElementValues
(
list
(
"John"
,
"Jack"
,
"Jim"
,
"Jack Black"
)
,
nodeSet
.
getNodes
(
)
)
;
}
protected
void
assertElementNames
(
List
names
,
List
elements
)
{
assertEquals
(
names
.
size
(
)
,
elements
.
size
(
)
)
;
Iterator
nameIter
=
names
.
iterator
(
)
;
Iterator
elementIter
=
elements
.
iterator
(
)
;
while
(
elementIter
.
hasNext
(
)
)
{
assertEquals
(
nameIter
.
next
(
)
,
(
(
Element
)
elementIter
.
next
(
)
)
.
getTagName
(
)
)
;
}
}
protected
void
assertElementValues
(
List
values
,
List
elements
)
{
assertEquals
(
values
.
size
(
)
,
elements
.
size
(
)
)
;
Iterator
valueIter
=
values
.
iterator
(
)
;
Iterator
elementIter
=
elements
.
iterator
(
)
;
while
(
elementIter
.
hasNext
(
)
)
{
assertEquals
(
valueIter
.
next
(
)
,
(
(
Element
)
elementIter
.
next
(
)
)
.
getFirstChild
(
)
.
getNodeValue
(
)
)
;
}
}
}
<EOF>
