package
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
beans
;
import
java
.
util
.
Locale
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathBeanInfo
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathIntrospector
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
QName
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodePointer
;
public
class
BeanPointer
extends
PropertyOwnerPointer
{
private
QName
name
;
private
Object
bean
;
private
JXPathBeanInfo
beanInfo
;
private
static
final
long
serialVersionUID
=
-
8227317938284982440L
;
public
BeanPointer
(
QName
name
,
Object
bean
,
JXPathBeanInfo
beanInfo
,
Locale
locale
)
{
super
(
null
,
locale
)
;
this
.
name
=
name
;
this
.
bean
=
bean
;
this
.
beanInfo
=
beanInfo
;
}
public
BeanPointer
(
NodePointer
parent
,
QName
name
,
Object
bean
,
JXPathBeanInfo
beanInfo
)
{
super
(
parent
)
;
this
.
name
=
name
;
this
.
bean
=
bean
;
this
.
beanInfo
=
beanInfo
;
}
public
PropertyPointer
getPropertyPointer
(
)
{
return
new
BeanPropertyPointer
(
this
,
beanInfo
)
;
}
public
QName
getName
(
)
{
return
name
;
}
public
Object
getBaseValue
(
)
{
return
bean
;
}
public
boolean
isCollection
(
)
{
return
false
;
}
public
int
getLength
(
)
{
return
1
;
}
public
boolean
isLeaf
(
)
{
Object
value
=
getNode
(
)
;
return
value
==
null
||
JXPathIntrospector
.
getBeanInfo
(
value
.
getClass
(
)
)
.
isAtomic
(
)
;
}
public
int
hashCode
(
)
{
return
name
==
null
?
0
:
name
.
hashCode
(
)
;
}
public
boolean
equals
(
Object
object
)
{
if
(
object
==
this
)
{
return
true
;
}
if
(
!
(
object
instanceof
BeanPointer
)
)
{
return
false
;
}
BeanPointer
other
=
(
BeanPointer
)
object
;
if
(
parent
!=
other
.
parent
&&
(
parent
==
null
||
!
parent
.
equals
(
other
.
parent
)
)
)
{
return
false
;
}
if
(
(
name
==
null
&&
other
.
name
!=
null
)
||
(
name
!=
null
&&
!
name
.
equals
(
other
.
name
)
)
)
{
return
false
;
}
int
iThis
=
(
index
==
WHOLE_COLLECTION
?
0
:
index
)
;
int
iOther
=
(
other
.
index
==
WHOLE_COLLECTION
?
0
:
other
.
index
)
;
if
(
iThis
!=
iOther
)
{
return
false
;
}
if
(
bean
instanceof
Number
||
bean
instanceof
String
||
bean
instanceof
Boolean
)
{
return
bean
.
equals
(
other
.
bean
)
;
}
return
bean
==
other
.
bean
;
}
public
String
asPath
(
)
{
if
(
parent
!=
null
)
{
return
super
.
asPath
(
)
;
}
if
(
bean
==
null
)
{
return
"null()"
;
}
if
(
bean
instanceof
Number
)
{
String
string
=
bean
.
toString
(
)
;
if
(
string
.
endsWith
(
".0"
)
)
{
string
=
string
.
substring
(
0
,
string
.
length
(
)
-
2
)
;
}
return
string
;
}
if
(
bean
instanceof
Boolean
)
{
return
(
(
Boolean
)
bean
)
.
booleanValue
(
)
?
"true()"
:
"false()"
;
}
if
(
bean
instanceof
String
)
{
return
"'"
+
bean
+
"'"
;
}
return
"/"
;
}
}
<EOF>
