package
org
.
apache
.
commons
.
jxpath
.
issues
;
import
java
.
util
.
HashMap
;
import
junit
.
framework
.
TestSuite
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathContext
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathTestCase
;
import
org
.
apache
.
commons
.
jxpath
.
Pointer
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
dynamic
.
DynamicPropertyPointer
;
public
class
JXPath172DynamicTest
extends
JXPathTestCase
{
public
static
TestSuite
suite
(
)
{
return
(
new
TestSuite
(
JXPath172DynamicTest
.
class
)
)
;
}
public
void
testIssue172_propertyExistAndIsNotNull
(
)
{
final
JXPathContext
context
=
getContext
(
"ciao"
,
false
)
;
final
Object
bRet
=
context
.
selectSingleNode
(
"value"
)
;
assertNotNull
(
"null!!"
,
bRet
)
;
assertEquals
(
"Is "
+
bRet
.
getClass
(
)
,
"ciao"
,
bRet
)
;
final
Pointer
pointer
=
context
.
getPointer
(
"value"
)
;
assertNotNull
(
pointer
)
;
assertEquals
(
DynamicPropertyPointer
.
class
,
pointer
.
getClass
(
)
)
;
assertEquals
(
"ciao"
,
pointer
.
getValue
(
)
)
;
}
public
void
testIssue172_propertyExistAndIsNull
(
)
{
final
JXPathContext
context
=
getContext
(
null
,
false
)
;
final
Object
bRet
=
context
.
selectSingleNode
(
"value"
)
;
assertNull
(
"not null!!"
,
bRet
)
;
final
Pointer
pointer
=
context
.
getPointer
(
"value"
)
;
assertNotNull
(
pointer
)
;
assertEquals
(
DynamicPropertyPointer
.
class
,
pointer
.
getClass
(
)
)
;
assertNull
(
pointer
.
getValue
(
)
)
;
}
public
void
testIssue172_propertyDoesNotExist
(
)
{
final
JXPathContext
context
=
getContext
(
null
,
false
)
;
final
Object
bRet
=
context
.
selectSingleNode
(
"unexisting"
)
;
assertNull
(
bRet
)
;
final
Pointer
pointer
=
context
.
getPointer
(
"unexisting"
)
;
assertEquals
(
DynamicPropertyPointer
.
class
,
pointer
.
getClass
(
)
)
;
assertNull
(
pointer
.
getValue
(
)
)
;
}
public
void
testIssue172_propertyDoesNotExist_Lenient
(
)
{
final
JXPathContext
context
=
getContext
(
null
,
true
)
;
final
Object
bRet
=
context
.
selectSingleNode
(
"unexisting"
)
;
assertNull
(
bRet
)
;
final
Pointer
pointer
=
context
.
getPointer
(
"unexisting"
)
;
assertEquals
(
DynamicPropertyPointer
.
class
,
pointer
.
getClass
(
)
)
;
assertNull
(
pointer
.
getValue
(
)
)
;
}
public
void
testIssue172_nestedpropertyDoesNotExist_Lenient
(
)
{
final
JXPathContext
context
=
getContext
(
null
,
true
)
;
final
Object
bRet
=
context
.
selectSingleNode
(
"value.unexisting"
)
;
assertNull
(
bRet
)
;
final
Pointer
pointer
=
context
.
getPointer
(
"value.unexisting"
)
;
assertEquals
(
DynamicPropertyPointer
.
class
,
pointer
.
getClass
(
)
)
;
assertNull
(
pointer
.
getValue
(
)
)
;
}
public
void
testIssue172_nestedpropertyDoesNotExist_NotLenient
(
)
{
final
JXPathContext
context
=
getContext
(
null
,
false
)
;
final
Object
bRet
=
context
.
selectSingleNode
(
"value.unexisting"
)
;
assertNull
(
bRet
)
;
final
Pointer
pointer
=
context
.
getPointer
(
"value.unexisting"
)
;
assertEquals
(
DynamicPropertyPointer
.
class
,
pointer
.
getClass
(
)
)
;
assertNull
(
pointer
.
getValue
(
)
)
;
}
private
JXPathContext
getContext
(
final
String
val
,
boolean
lenient
)
{
final
HashMap
map
=
new
HashMap
(
)
;
map
.
put
(
"value"
,
val
)
;
final
Object
target
=
map
;
final
JXPathContext
context
=
JXPathContext
.
newContext
(
null
,
target
)
;
context
.
setLenient
(
lenient
)
;
return
context
;
}
}
<EOF>
