package
org
.
apache
.
commons
.
jxpath
.
ri
.
compiler
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
EvalContext
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
axes
.
InitialContext
;
public
class
LocationPath
extends
Path
{
private
boolean
absolute
;
public
LocationPath
(
boolean
absolute
,
Step
[
]
steps
)
{
super
(
steps
)
;
this
.
absolute
=
absolute
;
}
public
boolean
isAbsolute
(
)
{
return
absolute
;
}
public
boolean
computeContextDependent
(
)
{
return
!
absolute
||
super
.
computeContextDependent
(
)
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
Step
[
]
steps
=
getSteps
(
)
;
if
(
steps
!=
null
)
{
for
(
int
i
=
0
;
i
<
steps
.
length
;
i
++
)
{
if
(
i
>
0
||
absolute
)
{
buffer
.
append
(
'/'
)
;
}
buffer
.
append
(
steps
[
i
]
)
;
}
}
return
buffer
.
toString
(
)
;
}
public
Object
compute
(
EvalContext
context
)
{
EvalContext
rootContext
;
if
(
isAbsolute
(
)
)
{
rootContext
=
context
.
getRootContext
(
)
.
getAbsoluteRootContext
(
)
;
}
else
{
rootContext
=
new
InitialContext
(
context
)
;
}
return
evalSteps
(
rootContext
)
;
}
public
Object
computeValue
(
EvalContext
context
)
{
EvalContext
rootContext
;
if
(
isAbsolute
(
)
)
{
rootContext
=
context
.
getRootContext
(
)
.
getAbsoluteRootContext
(
)
;
}
else
{
rootContext
=
new
InitialContext
(
context
)
;
}
return
getSingleNodePointerForSteps
(
rootContext
)
;
}
}
<EOF>
