package
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
jdom
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Collections
;
import
java
.
util
.
List
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
QName
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodeIterator
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodePointer
;
import
org
.
jdom
.
Attribute
;
import
org
.
jdom
.
Element
;
import
org
.
jdom
.
Namespace
;
public
class
JDOMAttributeIterator
implements
NodeIterator
{
private
NodePointer
parent
;
private
List
attributes
;
private
int
position
=
0
;
public
JDOMAttributeIterator
(
NodePointer
parent
,
QName
name
)
{
this
.
parent
=
parent
;
if
(
parent
.
getNode
(
)
instanceof
Element
)
{
Element
element
=
(
Element
)
parent
.
getNode
(
)
;
String
prefix
=
name
.
getPrefix
(
)
;
Namespace
ns
=
null
;
if
(
prefix
!=
null
)
{
if
(
prefix
.
equals
(
"xml"
)
)
{
ns
=
Namespace
.
XML_NAMESPACE
;
}
else
{
String
uri
=
parent
.
getNamespaceResolver
(
)
.
getNamespaceURI
(
prefix
)
;
if
(
uri
!=
null
)
{
ns
=
Namespace
.
getNamespace
(
prefix
,
uri
)
;
}
if
(
ns
==
null
)
{
attributes
=
Collections
.
EMPTY_LIST
;
return
;
}
}
}
else
{
ns
=
Namespace
.
NO_NAMESPACE
;
}
String
lname
=
name
.
getName
(
)
;
if
(
!
lname
.
equals
(
"*"
)
)
{
attributes
=
new
ArrayList
(
)
;
Attribute
attr
=
element
.
getAttribute
(
lname
,
ns
)
;
if
(
attr
!=
null
)
{
attributes
.
add
(
attr
)
;
}
}
else
{
attributes
=
new
ArrayList
(
)
;
List
allAttributes
=
element
.
getAttributes
(
)
;
for
(
int
i
=
0
;
i
<
allAttributes
.
size
(
)
;
i
++
)
{
Attribute
attr
=
(
Attribute
)
allAttributes
.
get
(
i
)
;
if
(
ns
==
Namespace
.
NO_NAMESPACE
||
attr
.
getNamespace
(
)
.
equals
(
ns
)
)
{
attributes
.
add
(
attr
)
;
}
}
}
}
}
public
NodePointer
getNodePointer
(
)
{
if
(
position
==
0
)
{
if
(
!
setPosition
(
1
)
)
{
return
null
;
}
position
=
0
;
}
int
index
=
position
-
1
;
if
(
index
<
0
)
{
index
=
0
;
}
return
new
JDOMAttributePointer
(
parent
,
(
Attribute
)
attributes
.
get
(
index
)
)
;
}
public
int
getPosition
(
)
{
return
position
;
}
public
boolean
setPosition
(
int
position
)
{
if
(
attributes
==
null
)
{
return
false
;
}
this
.
position
=
position
;
return
position
>=
1
&&
position
<=
attributes
.
size
(
)
;
}
}
<EOF>
