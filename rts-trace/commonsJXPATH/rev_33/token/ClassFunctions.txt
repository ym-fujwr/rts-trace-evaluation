package
org
.
apache
.
commons
.
jxpath
;
import
java
.
lang
.
reflect
.
Constructor
;
import
java
.
lang
.
reflect
.
Method
;
import
java
.
util
.
Collections
;
import
java
.
util
.
Set
;
import
org
.
apache
.
commons
.
jxpath
.
functions
.
ConstructorFunction
;
import
org
.
apache
.
commons
.
jxpath
.
functions
.
MethodFunction
;
import
org
.
apache
.
commons
.
jxpath
.
util
.
MethodLookupUtils
;
public
class
ClassFunctions
implements
Functions
{
private
static
final
Object
[
]
EMPTY_ARRAY
=
{
}
;
private
final
Class
functionClass
;
private
final
String
namespace
;
public
ClassFunctions
(
final
Class
functionClass
,
final
String
namespace
)
{
this
.
functionClass
=
functionClass
;
this
.
namespace
=
namespace
;
}
@
Override
public
Set
getUsedNamespaces
(
)
{
return
Collections
.
singleton
(
namespace
)
;
}
@
Override
public
Function
getFunction
(
final
String
namespace
,
final
String
name
,
Object
[
]
parameters
)
{
if
(
namespace
==
null
)
{
if
(
this
.
namespace
!=
null
)
{
return
null
;
}
}
else
if
(
!
namespace
.
equals
(
this
.
namespace
)
)
{
return
null
;
}
if
(
parameters
==
null
)
{
parameters
=
EMPTY_ARRAY
;
}
if
(
name
.
equals
(
"new"
)
)
{
final
Constructor
constructor
=
MethodLookupUtils
.
lookupConstructor
(
functionClass
,
parameters
)
;
if
(
constructor
!=
null
)
{
return
new
ConstructorFunction
(
constructor
)
;
}
}
else
{
Method
method
=
MethodLookupUtils
.
lookupStaticMethod
(
functionClass
,
name
,
parameters
)
;
if
(
method
!=
null
)
{
return
new
MethodFunction
(
method
)
;
}
method
=
MethodLookupUtils
.
lookupMethod
(
functionClass
,
name
,
parameters
)
;
if
(
method
!=
null
)
{
return
new
MethodFunction
(
method
)
;
}
}
return
null
;
}
}
<EOF>
