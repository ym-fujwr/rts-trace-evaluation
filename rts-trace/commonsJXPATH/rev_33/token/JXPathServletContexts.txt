package
org
.
apache
.
commons
.
jxpath
.
servlet
;
import
javax
.
servlet
.
ServletContext
;
import
javax
.
servlet
.
ServletRequest
;
import
javax
.
servlet
.
http
.
HttpServletRequest
;
import
javax
.
servlet
.
http
.
HttpSession
;
import
javax
.
servlet
.
jsp
.
PageContext
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathContext
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathContextFactory
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathIntrospector
;
public
final
class
JXPathServletContexts
{
private
static
JXPathContextFactory
factory
;
static
{
JXPathIntrospector
.
registerDynamicClass
(
PageScopeContext
.
class
,
PageScopeContextHandler
.
class
)
;
JXPathIntrospector
.
registerDynamicClass
(
PageContext
.
class
,
PageContextHandler
.
class
)
;
JXPathIntrospector
.
registerDynamicClass
(
ServletContext
.
class
,
ServletContextHandler
.
class
)
;
JXPathIntrospector
.
registerDynamicClass
(
ServletRequestAndContext
.
class
,
ServletRequestHandler
.
class
)
;
JXPathIntrospector
.
registerDynamicClass
(
HttpSessionAndServletContext
.
class
,
HttpSessionHandler
.
class
)
;
factory
=
JXPathContextFactory
.
newInstance
(
)
;
}
public
static
JXPathContext
getPageContext
(
PageContext
pageContext
)
{
JXPathContext
context
=
(
JXPathContext
)
pageContext
.
getAttribute
(
Constants
.
JXPATH_CONTEXT
)
;
if
(
context
==
null
)
{
JXPathContext
parentContext
=
getRequestContext
(
pageContext
.
getRequest
(
)
,
pageContext
.
getServletContext
(
)
)
;
context
=
factory
.
newContext
(
parentContext
,
pageContext
)
;
context
.
setVariables
(
new
KeywordVariables
(
Constants
.
PAGE_SCOPE
,
new
PageScopeContext
(
pageContext
)
)
)
;
pageContext
.
setAttribute
(
Constants
.
JXPATH_CONTEXT
,
context
)
;
}
return
context
;
}
public
static
JXPathContext
getRequestContext
(
ServletRequest
request
,
ServletContext
servletContext
)
{
JXPathContext
context
=
(
JXPathContext
)
request
.
getAttribute
(
Constants
.
JXPATH_CONTEXT
)
;
if
(
context
!=
null
)
{
ServletRequestAndContext
handle
=
(
ServletRequestAndContext
)
context
.
getContextBean
(
)
;
if
(
handle
.
getServletRequest
(
)
==
request
)
{
return
context
;
}
}
JXPathContext
parentContext
=
null
;
if
(
request
instanceof
HttpServletRequest
)
{
HttpSession
session
=
(
(
HttpServletRequest
)
request
)
.
getSession
(
false
)
;
if
(
session
!=
null
)
{
parentContext
=
getSessionContext
(
session
,
servletContext
)
;
}
else
{
parentContext
=
getApplicationContext
(
servletContext
)
;
}
}
ServletRequestAndContext
handle
=
new
ServletRequestAndContext
(
request
,
servletContext
)
;
context
=
factory
.
newContext
(
parentContext
,
handle
)
;
context
.
setVariables
(
new
KeywordVariables
(
Constants
.
REQUEST_SCOPE
,
handle
)
)
;
request
.
setAttribute
(
Constants
.
JXPATH_CONTEXT
,
context
)
;
return
context
;
}
public
static
JXPathContext
getSessionContext
(
HttpSession
session
,
ServletContext
servletContext
)
{
JXPathContext
context
=
(
JXPathContext
)
session
.
getAttribute
(
Constants
.
JXPATH_CONTEXT
)
;
if
(
context
==
null
)
{
JXPathContext
parentContext
=
getApplicationContext
(
servletContext
)
;
HttpSessionAndServletContext
handle
=
new
HttpSessionAndServletContext
(
session
,
servletContext
)
;
context
=
factory
.
newContext
(
parentContext
,
handle
)
;
context
.
setVariables
(
new
KeywordVariables
(
Constants
.
SESSION_SCOPE
,
handle
)
)
;
session
.
setAttribute
(
Constants
.
JXPATH_CONTEXT
,
context
)
;
}
return
context
;
}
public
static
JXPathContext
getApplicationContext
(
ServletContext
servletContext
)
{
JXPathContext
context
=
(
JXPathContext
)
servletContext
.
getAttribute
(
Constants
.
JXPATH_CONTEXT
)
;
if
(
context
==
null
)
{
context
=
factory
.
newContext
(
null
,
servletContext
)
;
context
.
setVariables
(
new
KeywordVariables
(
Constants
.
APPLICATION_SCOPE
,
servletContext
)
)
;
servletContext
.
setAttribute
(
Constants
.
JXPATH_CONTEXT
,
context
)
;
}
return
context
;
}
}
<EOF>
