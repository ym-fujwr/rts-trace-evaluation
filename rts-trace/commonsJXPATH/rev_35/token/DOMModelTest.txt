package
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
dom
;
import
org
.
apache
.
commons
.
jxpath
.
AbstractFactory
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathContext
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
XMLModelTestCase
;
import
org
.
apache
.
commons
.
jxpath
.
xml
.
DocumentContainer
;
import
org
.
w3c
.
dom
.
Attr
;
import
org
.
w3c
.
dom
.
Document
;
import
org
.
w3c
.
dom
.
Element
;
import
org
.
w3c
.
dom
.
Node
;
import
org
.
w3c
.
dom
.
NodeList
;
public
class
DOMModelTest
extends
XMLModelTestCase
{
@
Override
protected
String
getModel
(
)
{
return
DocumentContainer
.
MODEL_DOM
;
}
@
Override
protected
AbstractFactory
getAbstractFactory
(
)
{
return
new
TestDOMFactory
(
)
;
}
public
void
testGetNode
(
)
{
assertXPathNodeType
(
context
,
"/"
,
Document
.
class
)
;
assertXPathNodeType
(
context
,
"/vendor/location"
,
Element
.
class
)
;
assertXPathNodeType
(
context
,
"//location/@name"
,
Attr
.
class
)
;
assertXPathNodeType
(
context
,
"//vendor"
,
Element
.
class
)
;
}
public
void
testGetElementDescendantOrSelf
(
)
{
final
JXPathContext
childContext
=
context
.
getRelativeContext
(
context
.
getPointer
(
"/vendor"
)
)
;
assertTrue
(
childContext
.
getContextBean
(
)
instanceof
Element
)
;
assertXPathNodeType
(
childContext
,
"//vendor"
,
Element
.
class
)
;
}
@
Override
protected
String
getXMLSignature
(
final
Object
node
,
final
boolean
elements
,
final
boolean
attributes
,
final
boolean
text
,
final
boolean
pi
)
{
final
StringBuilder
buffer
=
new
StringBuilder
(
)
;
appendXMLSignature
(
buffer
,
node
,
elements
,
attributes
,
text
,
pi
)
;
return
buffer
.
toString
(
)
;
}
private
void
appendXMLSignature
(
final
StringBuilder
buffer
,
final
Object
object
,
final
boolean
elements
,
final
boolean
attributes
,
final
boolean
text
,
final
boolean
pi
)
{
final
Node
node
=
(
Node
)
object
;
final
int
type
=
node
.
getNodeType
(
)
;
switch
(
type
)
{
case
Node
.
DOCUMENT_NODE
:
buffer
.
append
(
"<D>"
)
;
appendXMLSignature
(
buffer
,
node
.
getChildNodes
(
)
,
elements
,
attributes
,
text
,
pi
)
;
buffer
.
append
(
"</D"
)
;
break
;
case
Node
.
ELEMENT_NODE
:
final
String
tag
=
elements
?
(
(
Element
)
node
)
.
getTagName
(
)
:
"E"
;
buffer
.
append
(
"<"
)
;
buffer
.
append
(
tag
)
;
buffer
.
append
(
">"
)
;
appendXMLSignature
(
buffer
,
node
.
getChildNodes
(
)
,
elements
,
attributes
,
text
,
pi
)
;
buffer
.
append
(
"</"
)
;
buffer
.
append
(
tag
)
;
buffer
.
append
(
">"
)
;
break
;
case
Node
.
TEXT_NODE
:
case
Node
.
CDATA_SECTION_NODE
:
if
(
text
)
{
String
string
=
node
.
getNodeValue
(
)
;
string
=
string
.
replace
(
'\n'
,
'='
)
;
buffer
.
append
(
string
)
;
}
break
;
}
}
private
void
appendXMLSignature
(
final
StringBuilder
buffer
,
final
NodeList
children
,
final
boolean
elements
,
final
boolean
attributes
,
final
boolean
text
,
final
boolean
pi
)
{
for
(
int
i
=
0
;
i
<
children
.
getLength
(
)
;
i
++
)
{
appendXMLSignature
(
buffer
,
children
.
item
(
i
)
,
elements
,
attributes
,
text
,
pi
)
;
}
}
}
<EOF>
