package
org
.
apache
.
commons
.
jxpath
.
ri
.
model
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathContext
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathTestCase
;
import
org
.
apache
.
commons
.
jxpath
.
xml
.
DocumentContainer
;
public
class
XMLPreserveSpaceTest
extends
JXPathTestCase
{
protected
JXPathContext
context
;
protected
DocumentContainer
createDocumentContainer
(
String
model
)
{
return
new
DocumentContainer
(
JXPathTestCase
.
class
.
getResource
(
"XmlPreserveSpace.xml"
)
,
model
)
;
}
protected
JXPathContext
createContext
(
String
model
)
{
JXPathContext
context
=
JXPathContext
.
newContext
(
createDocumentContainer
(
model
)
)
;
return
context
;
}
protected
void
doTest
(
String
id
,
String
model
,
String
expectedValue
)
{
JXPathContext
context
=
JXPathContext
.
newContext
(
createDocumentContainer
(
model
)
)
;
assertEquals
(
context
.
getValue
(
"test/text[@id='"
+
id
+
"']"
)
,
expectedValue
)
;
}
public
void
testUnspecifiedDOM
(
)
{
doTest
(
"unspecified"
,
DocumentContainer
.
MODEL_DOM
,
" foo "
)
;
}
public
void
testDefaultDOM
(
)
{
doTest
(
"default"
,
DocumentContainer
.
MODEL_DOM
,
"foo"
)
;
}
public
void
testPreserveDOM
(
)
{
doTest
(
"preserve"
,
DocumentContainer
.
MODEL_DOM
,
" foo "
)
;
}
public
void
testNestedDOM
(
)
{
doTest
(
"nested"
,
DocumentContainer
.
MODEL_DOM
,
" foo ;bar; baz "
)
;
}
public
void
testNestedWithCommentsDOM
(
)
{
doTest
(
"nested-with-comments"
,
DocumentContainer
.
MODEL_DOM
,
" foo ;bar; baz "
)
;
}
public
void
testUnspecifiedJDOM
(
)
{
doTest
(
"unspecified"
,
DocumentContainer
.
MODEL_JDOM
,
" foo "
)
;
}
public
void
testDefaultJDOM
(
)
{
doTest
(
"default"
,
DocumentContainer
.
MODEL_JDOM
,
"foo"
)
;
}
public
void
testPreserveJDOM
(
)
{
doTest
(
"preserve"
,
DocumentContainer
.
MODEL_JDOM
,
" foo "
)
;
}
public
void
testNestedJDOM
(
)
{
doTest
(
"nested"
,
DocumentContainer
.
MODEL_JDOM
,
" foo ;bar; baz "
)
;
}
public
void
testNestedWithCommentsJDOM
(
)
{
doTest
(
"nested-with-comments"
,
DocumentContainer
.
MODEL_JDOM
,
" foo ;bar; baz "
)
;
}
}
<EOF>
