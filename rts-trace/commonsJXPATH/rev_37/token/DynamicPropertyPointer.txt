package
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
dynamic
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
Map
;
import
org
.
apache
.
commons
.
jxpath
.
AbstractFactory
;
import
org
.
apache
.
commons
.
jxpath
.
DynamicPropertyHandler
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathAbstractFactoryException
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathContext
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathInvalidAccessException
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodePointer
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
beans
.
PropertyPointer
;
import
org
.
apache
.
commons
.
jxpath
.
util
.
ValueUtils
;
public
class
DynamicPropertyPointer
extends
PropertyPointer
{
private
static
final
long
serialVersionUID
=
-
5720585681149150822L
;
private
DynamicPropertyHandler
handler
;
private
String
name
;
private
String
[
]
names
;
private
String
requiredPropertyName
;
public
DynamicPropertyPointer
(
NodePointer
parent
,
DynamicPropertyHandler
handler
)
{
super
(
parent
)
;
this
.
handler
=
handler
;
}
public
boolean
isContainer
(
)
{
return
true
;
}
public
int
getPropertyCount
(
)
{
return
getPropertyNames
(
)
.
length
;
}
public
String
[
]
getPropertyNames
(
)
{
if
(
names
==
null
)
{
String
[
]
allNames
=
handler
.
getPropertyNames
(
getBean
(
)
)
;
names
=
new
String
[
allNames
.
length
]
;
System
.
arraycopy
(
allNames
,
0
,
names
,
0
,
names
.
length
)
;
Arrays
.
sort
(
names
)
;
if
(
requiredPropertyName
!=
null
)
{
int
inx
=
Arrays
.
binarySearch
(
names
,
requiredPropertyName
)
;
if
(
inx
<
0
)
{
allNames
=
names
;
names
=
new
String
[
allNames
.
length
+
1
]
;
names
[
0
]
=
requiredPropertyName
;
System
.
arraycopy
(
allNames
,
0
,
names
,
1
,
allNames
.
length
)
;
Arrays
.
sort
(
names
)
;
}
}
}
return
names
;
}
public
String
getPropertyName
(
)
{
if
(
name
==
null
)
{
String
[
]
names
=
getPropertyNames
(
)
;
name
=
propertyIndex
>=
0
&&
propertyIndex
<
names
.
length
?
names
[
propertyIndex
]
:
"*"
;
}
return
name
;
}
public
void
setPropertyName
(
String
propertyName
)
{
setPropertyIndex
(
UNSPECIFIED_PROPERTY
)
;
this
.
name
=
propertyName
;
requiredPropertyName
=
propertyName
;
if
(
names
!=
null
&&
Arrays
.
binarySearch
(
names
,
propertyName
)
<
0
)
{
names
=
null
;
}
}
public
int
getPropertyIndex
(
)
{
if
(
propertyIndex
==
UNSPECIFIED_PROPERTY
)
{
String
[
]
names
=
getPropertyNames
(
)
;
for
(
int
i
=
0
;
i
<
names
.
length
;
i
++
)
{
if
(
names
[
i
]
.
equals
(
name
)
)
{
setPropertyIndex
(
i
)
;
break
;
}
}
}
return
super
.
getPropertyIndex
(
)
;
}
public
void
setPropertyIndex
(
int
index
)
{
if
(
propertyIndex
!=
index
)
{
super
.
setPropertyIndex
(
index
)
;
name
=
null
;
}
}
public
Object
getBaseValue
(
)
{
return
handler
.
getProperty
(
getBean
(
)
,
getPropertyName
(
)
)
;
}
public
Object
getImmediateNode
(
)
{
Object
value
;
if
(
index
==
WHOLE_COLLECTION
)
{
value
=
ValueUtils
.
getValue
(
handler
.
getProperty
(
getBean
(
)
,
getPropertyName
(
)
)
)
;
}
else
{
value
=
ValueUtils
.
getValue
(
handler
.
getProperty
(
getBean
(
)
,
getPropertyName
(
)
)
,
index
)
;
}
return
value
;
}
protected
boolean
isActualProperty
(
)
{
return
true
;
}
public
void
setValue
(
Object
value
)
{
if
(
index
==
WHOLE_COLLECTION
)
{
handler
.
setProperty
(
getBean
(
)
,
getPropertyName
(
)
,
value
)
;
}
else
{
ValueUtils
.
setValue
(
handler
.
getProperty
(
getBean
(
)
,
getPropertyName
(
)
)
,
index
,
value
)
;
}
}
public
NodePointer
createPath
(
JXPathContext
context
)
{
Object
collection
=
getBaseValue
(
)
;
if
(
collection
==
null
)
{
AbstractFactory
factory
=
getAbstractFactory
(
context
)
;
boolean
success
=
factory
.
createObject
(
context
,
this
,
getBean
(
)
,
getPropertyName
(
)
,
0
)
;
if
(
!
success
)
{
throw
new
JXPathAbstractFactoryException
(
"Factory could not create an object for path: "
+
asPath
(
)
)
;
}
collection
=
getBaseValue
(
)
;
}
if
(
index
!=
WHOLE_COLLECTION
)
{
if
(
index
<
0
)
{
throw
new
JXPathInvalidAccessException
(
"Index is less than 1: "
+
asPath
(
)
)
;
}
if
(
index
>=
getLength
(
)
)
{
collection
=
ValueUtils
.
expandCollection
(
collection
,
index
+
1
)
;
handler
.
setProperty
(
getBean
(
)
,
getPropertyName
(
)
,
collection
)
;
}
}
return
this
;
}
public
NodePointer
createPath
(
JXPathContext
context
,
Object
value
)
{
if
(
index
==
WHOLE_COLLECTION
)
{
handler
.
setProperty
(
getBean
(
)
,
getPropertyName
(
)
,
value
)
;
}
else
{
createPath
(
context
)
;
ValueUtils
.
setValue
(
getBaseValue
(
)
,
index
,
value
)
;
}
return
this
;
}
public
void
remove
(
)
{
if
(
index
==
WHOLE_COLLECTION
)
{
removeKey
(
)
;
}
else
if
(
isCollection
(
)
)
{
Object
collection
=
ValueUtils
.
remove
(
getBaseValue
(
)
,
index
)
;
handler
.
setProperty
(
getBean
(
)
,
getPropertyName
(
)
,
collection
)
;
}
else
if
(
index
==
0
)
{
removeKey
(
)
;
}
}
private
void
removeKey
(
)
{
Object
bean
=
getBean
(
)
;
if
(
bean
instanceof
Map
)
{
(
(
Map
)
bean
)
.
remove
(
getPropertyName
(
)
)
;
}
else
{
handler
.
setProperty
(
bean
,
getPropertyName
(
)
,
null
)
;
}
}
public
String
asPath
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
getImmediateParentPointer
(
)
.
asPath
(
)
)
;
if
(
buffer
.
length
(
)
==
0
)
{
buffer
.
append
(
"/."
)
;
}
else
if
(
buffer
.
charAt
(
buffer
.
length
(
)
-
1
)
==
'/'
)
{
buffer
.
append
(
'.'
)
;
}
buffer
.
append
(
"[@name='"
)
;
buffer
.
append
(
escape
(
getPropertyName
(
)
)
)
;
buffer
.
append
(
"']"
)
;
if
(
index
!=
WHOLE_COLLECTION
&&
isCollection
(
)
)
{
buffer
.
append
(
'['
)
.
append
(
index
+
1
)
.
append
(
']'
)
;
}
return
buffer
.
toString
(
)
;
}
}
<EOF>
