package
org
.
apache
.
commons
.
jxpath
.
ri
.
axes
;
import
java
.
util
.
Stack
;
import
org
.
apache
.
commons
.
jxpath
.
Pointer
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
Compiler
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
EvalContext
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
compiler
.
NodeTest
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
compiler
.
NodeTypeTest
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodeIterator
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodePointer
;
public
class
DescendantContext
extends
EvalContext
{
private
NodeTest
nodeTest
;
private
boolean
setStarted
=
false
;
private
Stack
stack
=
null
;
private
NodePointer
currentNodePointer
=
null
;
private
boolean
includeSelf
;
private
static
final
NodeTest
ELEMENT_NODE_TEST
=
new
NodeTypeTest
(
Compiler
.
NODE_TYPE_NODE
)
;
public
DescendantContext
(
EvalContext
parentContext
,
boolean
includeSelf
,
NodeTest
nodeTest
)
{
super
(
parentContext
)
;
this
.
includeSelf
=
includeSelf
;
this
.
nodeTest
=
nodeTest
;
}
public
boolean
isChildOrderingRequired
(
)
{
return
true
;
}
public
NodePointer
getCurrentNodePointer
(
)
{
if
(
position
==
0
&&
!
setPosition
(
1
)
)
{
return
null
;
}
return
currentNodePointer
;
}
public
void
reset
(
)
{
super
.
reset
(
)
;
setStarted
=
false
;
}
public
boolean
setPosition
(
int
position
)
{
if
(
position
<
this
.
position
)
{
reset
(
)
;
}
while
(
this
.
position
<
position
)
{
if
(
!
nextNode
(
)
)
{
return
false
;
}
}
return
true
;
}
public
boolean
nextNode
(
)
{
if
(
!
setStarted
)
{
setStarted
=
true
;
if
(
stack
==
null
)
{
stack
=
new
Stack
(
)
;
}
else
{
stack
.
clear
(
)
;
}
currentNodePointer
=
parentContext
.
getCurrentNodePointer
(
)
;
if
(
currentNodePointer
!=
null
)
{
if
(
!
currentNodePointer
.
isLeaf
(
)
)
{
stack
.
push
(
currentNodePointer
.
childIterator
(
ELEMENT_NODE_TEST
,
false
,
null
)
)
;
}
if
(
includeSelf
&&
currentNodePointer
.
testNode
(
nodeTest
)
)
{
position
++
;
return
true
;
}
}
}
while
(
!
stack
.
isEmpty
(
)
)
{
NodeIterator
it
=
(
NodeIterator
)
stack
.
peek
(
)
;
if
(
it
.
setPosition
(
it
.
getPosition
(
)
+
1
)
)
{
currentNodePointer
=
it
.
getNodePointer
(
)
;
if
(
!
isRecursive
(
)
)
{
if
(
!
currentNodePointer
.
isLeaf
(
)
)
{
stack
.
push
(
currentNodePointer
.
childIterator
(
ELEMENT_NODE_TEST
,
false
,
null
)
)
;
}
if
(
currentNodePointer
.
testNode
(
nodeTest
)
)
{
position
++
;
return
true
;
}
}
}
else
{
stack
.
pop
(
)
;
}
}
return
false
;
}
private
boolean
isRecursive
(
)
{
Object
node
=
currentNodePointer
.
getNode
(
)
;
for
(
int
i
=
stack
.
size
(
)
-
1
;
--
i
>=
0
;
)
{
NodeIterator
it
=
(
NodeIterator
)
stack
.
get
(
i
)
;
Pointer
pointer
=
it
.
getNodePointer
(
)
;
if
(
pointer
!=
null
&&
pointer
.
getNode
(
)
==
node
)
{
return
true
;
}
}
return
false
;
}
}
<EOF>
