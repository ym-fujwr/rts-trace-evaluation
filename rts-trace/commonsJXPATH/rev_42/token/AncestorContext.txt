package
org
.
apache
.
commons
.
jxpath
.
ri
.
axes
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
EvalContext
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
compiler
.
NodeTest
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodePointer
;
public
class
AncestorContext
extends
EvalContext
{
private
final
NodeTest
nodeTest
;
private
boolean
setStarted
=
false
;
private
NodePointer
currentNodePointer
;
private
final
boolean
includeSelf
;
public
AncestorContext
(
final
EvalContext
parentContext
,
final
boolean
includeSelf
,
final
NodeTest
nodeTest
)
{
super
(
parentContext
)
;
this
.
includeSelf
=
includeSelf
;
this
.
nodeTest
=
nodeTest
;
}
@
Override
public
NodePointer
getCurrentNodePointer
(
)
{
return
currentNodePointer
;
}
@
Override
public
int
getDocumentOrder
(
)
{
return
-
1
;
}
@
Override
public
void
reset
(
)
{
super
.
reset
(
)
;
setStarted
=
false
;
}
@
Override
public
boolean
setPosition
(
final
int
position
)
{
if
(
position
<
getCurrentPosition
(
)
)
{
reset
(
)
;
}
while
(
getCurrentPosition
(
)
<
position
)
{
if
(
!
nextNode
(
)
)
{
return
false
;
}
}
return
true
;
}
@
Override
public
boolean
nextNode
(
)
{
if
(
!
setStarted
)
{
setStarted
=
true
;
currentNodePointer
=
parentContext
.
getCurrentNodePointer
(
)
;
if
(
includeSelf
&&
currentNodePointer
.
testNode
(
nodeTest
)
)
{
position
++
;
return
true
;
}
}
while
(
true
)
{
currentNodePointer
=
currentNodePointer
.
getImmediateParentPointer
(
)
;
if
(
currentNodePointer
==
null
)
{
return
false
;
}
if
(
currentNodePointer
.
testNode
(
nodeTest
)
)
{
position
++
;
return
true
;
}
}
}
}
<EOF>
