package
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
dynabeans
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Arrays
;
import
org
.
apache
.
commons
.
beanutils
.
DynaBean
;
import
org
.
apache
.
commons
.
beanutils
.
DynaClass
;
import
org
.
apache
.
commons
.
beanutils
.
DynaProperty
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathTypeConversionException
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodePointer
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
beans
.
PropertyPointer
;
import
org
.
apache
.
commons
.
jxpath
.
util
.
TypeUtils
;
import
org
.
apache
.
commons
.
jxpath
.
util
.
ValueUtils
;
public
class
DynaBeanPropertyPointer
extends
PropertyPointer
{
private
static
final
String
CLASS
=
"class"
;
private
DynaBean
dynaBean
;
private
String
name
;
private
String
[
]
names
;
private
static
final
long
serialVersionUID
=
2094421509141267239L
;
public
DynaBeanPropertyPointer
(
NodePointer
parent
,
DynaBean
dynaBean
)
{
super
(
parent
)
;
this
.
dynaBean
=
dynaBean
;
}
public
Object
getBaseValue
(
)
{
return
dynaBean
.
get
(
getPropertyName
(
)
)
;
}
public
boolean
isContainer
(
)
{
return
true
;
}
public
int
getPropertyCount
(
)
{
return
getPropertyNames
(
)
.
length
;
}
public
String
[
]
getPropertyNames
(
)
{
if
(
names
==
null
)
{
DynaClass
dynaClass
=
dynaBean
.
getDynaClass
(
)
;
DynaProperty
[
]
dynaProperties
=
dynaClass
.
getDynaProperties
(
)
;
ArrayList
properties
=
new
ArrayList
(
dynaProperties
.
length
)
;
for
(
int
i
=
0
;
i
<
dynaProperties
.
length
;
i
++
)
{
String
name
=
dynaProperties
[
i
]
.
getName
(
)
;
if
(
!
CLASS
.
equals
(
name
)
)
{
properties
.
add
(
name
)
;
}
}
names
=
(
String
[
]
)
properties
.
toArray
(
new
String
[
properties
.
size
(
)
]
)
;
Arrays
.
sort
(
names
)
;
}
return
names
;
}
public
String
getPropertyName
(
)
{
if
(
name
==
null
)
{
String
[
]
names
=
getPropertyNames
(
)
;
name
=
propertyIndex
>=
0
&&
propertyIndex
<
names
.
length
?
names
[
propertyIndex
]
:
"*"
;
}
return
name
;
}
public
void
setPropertyName
(
String
propertyName
)
{
setPropertyIndex
(
UNSPECIFIED_PROPERTY
)
;
this
.
name
=
propertyName
;
}
public
int
getPropertyIndex
(
)
{
if
(
propertyIndex
==
UNSPECIFIED_PROPERTY
)
{
String
[
]
names
=
getPropertyNames
(
)
;
for
(
int
i
=
0
;
i
<
names
.
length
;
i
++
)
{
if
(
names
[
i
]
.
equals
(
name
)
)
{
propertyIndex
=
i
;
name
=
null
;
break
;
}
}
}
return
super
.
getPropertyIndex
(
)
;
}
public
void
setPropertyIndex
(
int
index
)
{
if
(
propertyIndex
!=
index
)
{
super
.
setPropertyIndex
(
index
)
;
name
=
null
;
}
}
public
Object
getImmediateNode
(
)
{
String
name
=
getPropertyName
(
)
;
if
(
name
.
equals
(
"*"
)
)
{
return
null
;
}
Object
value
;
if
(
index
==
WHOLE_COLLECTION
)
{
value
=
ValueUtils
.
getValue
(
dynaBean
.
get
(
name
)
)
;
}
else
if
(
isIndexedProperty
(
)
)
{
try
{
value
=
ValueUtils
.
getValue
(
dynaBean
.
get
(
name
,
index
)
)
;
}
catch
(
ArrayIndexOutOfBoundsException
ex
)
{
value
=
null
;
}
catch
(
IllegalArgumentException
ex
)
{
value
=
dynaBean
.
get
(
name
)
;
value
=
ValueUtils
.
getValue
(
value
,
index
)
;
}
}
else
{
value
=
dynaBean
.
get
(
name
)
;
if
(
ValueUtils
.
isCollection
(
value
)
)
{
value
=
ValueUtils
.
getValue
(
value
,
index
)
;
}
else
if
(
index
!=
0
)
{
value
=
null
;
}
}
return
value
;
}
protected
boolean
isActualProperty
(
)
{
DynaClass
dynaClass
=
dynaBean
.
getDynaClass
(
)
;
return
dynaClass
.
getDynaProperty
(
getPropertyName
(
)
)
!=
null
;
}
protected
boolean
isIndexedProperty
(
)
{
DynaClass
dynaClass
=
dynaBean
.
getDynaClass
(
)
;
DynaProperty
property
=
dynaClass
.
getDynaProperty
(
name
)
;
return
property
.
isIndexed
(
)
;
}
public
void
setValue
(
Object
value
)
{
setValue
(
index
,
value
)
;
}
public
void
remove
(
)
{
if
(
index
==
WHOLE_COLLECTION
)
{
dynaBean
.
set
(
getPropertyName
(
)
,
null
)
;
}
else
if
(
isIndexedProperty
(
)
)
{
dynaBean
.
set
(
getPropertyName
(
)
,
index
,
null
)
;
}
else
if
(
isCollection
(
)
)
{
Object
collection
=
ValueUtils
.
remove
(
getBaseValue
(
)
,
index
)
;
dynaBean
.
set
(
getPropertyName
(
)
,
collection
)
;
}
else
if
(
index
==
0
)
{
dynaBean
.
set
(
getPropertyName
(
)
,
null
)
;
}
}
private
void
setValue
(
int
index
,
Object
value
)
{
if
(
index
==
WHOLE_COLLECTION
)
{
dynaBean
.
set
(
getPropertyName
(
)
,
convert
(
value
,
false
)
)
;
}
else
if
(
isIndexedProperty
(
)
)
{
dynaBean
.
set
(
getPropertyName
(
)
,
index
,
convert
(
value
,
true
)
)
;
}
else
{
Object
baseValue
=
dynaBean
.
get
(
getPropertyName
(
)
)
;
ValueUtils
.
setValue
(
baseValue
,
index
,
value
)
;
}
}
private
Object
convert
(
Object
value
,
boolean
element
)
{
DynaClass
dynaClass
=
dynaBean
.
getDynaClass
(
)
;
DynaProperty
property
=
dynaClass
.
getDynaProperty
(
getPropertyName
(
)
)
;
Class
type
=
property
.
getType
(
)
;
if
(
element
)
{
if
(
type
.
isArray
(
)
)
{
type
=
type
.
getComponentType
(
)
;
}
else
{
return
value
;
}
}
try
{
return
TypeUtils
.
convert
(
value
,
type
)
;
}
catch
(
Exception
ex
)
{
String
string
=
value
==
null
?
"null"
:
value
.
getClass
(
)
.
getName
(
)
;
throw
new
JXPathTypeConversionException
(
"Cannot convert value of class "
+
string
+
" to type "
+
type
,
ex
)
;
}
}
}
<EOF>
