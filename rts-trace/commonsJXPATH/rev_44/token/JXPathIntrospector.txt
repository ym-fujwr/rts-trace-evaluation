package
org
.
apache
.
commons
.
jxpath
;
import
java
.
util
.
Collections
;
import
java
.
util
.
Date
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
import
org
.
apache
.
commons
.
jxpath
.
util
.
ClassLoaderUtil
;
public
class
JXPathIntrospector
{
private
static
Map
byClass
=
Collections
.
synchronizedMap
(
new
HashMap
(
)
)
;
private
static
Map
byInterface
=
Collections
.
synchronizedMap
(
new
HashMap
(
)
)
;
static
{
registerAtomicClass
(
Class
.
class
)
;
registerAtomicClass
(
Boolean
.
TYPE
)
;
registerAtomicClass
(
Boolean
.
class
)
;
registerAtomicClass
(
Byte
.
TYPE
)
;
registerAtomicClass
(
Byte
.
class
)
;
registerAtomicClass
(
Character
.
TYPE
)
;
registerAtomicClass
(
Character
.
class
)
;
registerAtomicClass
(
Short
.
TYPE
)
;
registerAtomicClass
(
Short
.
class
)
;
registerAtomicClass
(
Integer
.
TYPE
)
;
registerAtomicClass
(
Integer
.
class
)
;
registerAtomicClass
(
Long
.
TYPE
)
;
registerAtomicClass
(
Long
.
class
)
;
registerAtomicClass
(
Float
.
TYPE
)
;
registerAtomicClass
(
Float
.
class
)
;
registerAtomicClass
(
Double
.
TYPE
)
;
registerAtomicClass
(
Double
.
class
)
;
registerAtomicClass
(
String
.
class
)
;
registerAtomicClass
(
Date
.
class
)
;
registerAtomicClass
(
java
.
sql
.
Date
.
class
)
;
registerAtomicClass
(
java
.
sql
.
Time
.
class
)
;
registerAtomicClass
(
java
.
sql
.
Timestamp
.
class
)
;
registerDynamicClass
(
Map
.
class
,
MapDynamicPropertyHandler
.
class
)
;
}
public
static
void
registerAtomicClass
(
final
Class
beanClass
)
{
synchronized
(
byClass
)
{
byClass
.
put
(
beanClass
,
new
JXPathBasicBeanInfo
(
beanClass
,
true
)
)
;
}
}
public
static
void
registerDynamicClass
(
final
Class
beanClass
,
final
Class
dynamicPropertyHandlerClass
)
{
final
JXPathBasicBeanInfo
bi
=
new
JXPathBasicBeanInfo
(
beanClass
,
dynamicPropertyHandlerClass
)
;
if
(
beanClass
.
isInterface
(
)
)
{
synchronized
(
byInterface
)
{
byInterface
.
put
(
beanClass
,
bi
)
;
}
}
else
{
synchronized
(
byClass
)
{
byClass
.
put
(
beanClass
,
bi
)
;
}
}
}
public
static
JXPathBeanInfo
getBeanInfo
(
final
Class
beanClass
)
{
JXPathBeanInfo
beanInfo
=
(
JXPathBeanInfo
)
byClass
.
get
(
beanClass
)
;
if
(
beanInfo
==
null
)
{
beanInfo
=
findDynamicBeanInfo
(
beanClass
)
;
if
(
beanInfo
==
null
)
{
beanInfo
=
findInformant
(
beanClass
)
;
if
(
beanInfo
==
null
)
{
beanInfo
=
new
JXPathBasicBeanInfo
(
beanClass
)
;
}
}
synchronized
(
byClass
)
{
byClass
.
put
(
beanClass
,
beanInfo
)
;
}
}
return
beanInfo
;
}
private
static
JXPathBeanInfo
findDynamicBeanInfo
(
final
Class
beanClass
)
{
JXPathBeanInfo
beanInfo
;
if
(
beanClass
.
isInterface
(
)
)
{
beanInfo
=
(
JXPathBeanInfo
)
byInterface
.
get
(
beanClass
)
;
if
(
beanInfo
!=
null
&&
beanInfo
.
isDynamic
(
)
)
{
return
beanInfo
;
}
}
final
Class
[
]
interfaces
=
beanClass
.
getInterfaces
(
)
;
if
(
interfaces
!=
null
)
{
for
(
final
Class
element
:
interfaces
)
{
beanInfo
=
findDynamicBeanInfo
(
element
)
;
if
(
beanInfo
!=
null
&&
beanInfo
.
isDynamic
(
)
)
{
return
beanInfo
;
}
}
}
final
Class
sup
=
beanClass
.
getSuperclass
(
)
;
if
(
sup
!=
null
)
{
beanInfo
=
(
JXPathBeanInfo
)
byClass
.
get
(
sup
)
;
if
(
beanInfo
!=
null
&&
beanInfo
.
isDynamic
(
)
)
{
return
beanInfo
;
}
return
findDynamicBeanInfo
(
sup
)
;
}
return
null
;
}
private
static
synchronized
JXPathBeanInfo
findInformant
(
final
Class
beanClass
)
{
final
String
name
=
beanClass
.
getName
(
)
+
"XBeanInfo"
;
try
{
return
(
JXPathBeanInfo
)
instantiate
(
beanClass
,
name
)
;
}
catch
(
final
Exception
ignore
)
{
}
try
{
if
(
JXPathBeanInfo
.
class
.
isAssignableFrom
(
beanClass
)
)
{
return
(
JXPathBeanInfo
)
beanClass
.
getConstructor
(
)
.
newInstance
(
)
;
}
}
catch
(
final
Exception
ignore
)
{
}
return
null
;
}
private
static
Object
instantiate
(
final
Class
sibling
,
final
String
className
)
throws
Exception
{
final
ClassLoader
cl
=
sibling
.
getClassLoader
(
)
;
if
(
cl
!=
null
)
{
try
{
final
Class
cls
=
cl
.
loadClass
(
className
)
;
return
cls
.
getConstructor
(
)
.
newInstance
(
)
;
}
catch
(
final
Exception
ex
)
{
}
}
final
Class
cls
=
ClassLoaderUtil
.
getClass
(
className
)
;
return
cls
.
newInstance
(
)
;
}
}
<EOF>
