package
org
.
apache
.
commons
.
net
.
ftp
;
import
java
.
io
.
IOException
;
import
java
.
time
.
Duration
;
import
java
.
time
.
Instant
;
import
java
.
util
.
Calendar
;
import
java
.
util
.
TreeSet
;
import
junit
.
framework
.
TestCase
;
public
class
FTPClientConfigFunctionalTest
extends
TestCase
{
private
final
FTPClient
ftpClient
=
new
FTPClient
(
)
;
private
FTPClientConfig
ftpClientConfig
;
public
FTPClientConfigFunctionalTest
(
)
{
}
public
FTPClientConfigFunctionalTest
(
final
String
arg0
)
{
super
(
arg0
)
;
}
private
TreeSet
<
FTPFile
>
getSortedSet
(
final
FTPFile
[
]
files
)
{
final
TreeSet
<
FTPFile
>
sorted
=
new
TreeSet
<
>
(
(
o1
,
o2
)
->
{
final
FTPFile
f1
=
(
FTPFile
)
o1
;
final
FTPFile
f2
=
(
FTPFile
)
o2
;
return
f1
.
getTimestamp
(
)
.
getTime
(
)
.
compareTo
(
f2
.
getTimestamp
(
)
.
getTime
(
)
)
;
}
)
;
for
(
final
FTPFile
file
:
files
)
{
if
(
file
.
getName
(
)
.
startsWith
(
"sn"
)
)
{
sorted
.
add
(
file
)
;
}
}
return
sorted
;
}
@
Override
protected
void
setUp
(
)
throws
Exception
{
super
.
setUp
(
)
;
ftpClientConfig
=
new
FTPClientConfig
(
FTPClientConfig
.
SYST_UNIX
)
;
ftpClientConfig
.
setServerTimeZoneId
(
"GMT"
)
;
ftpClient
.
configure
(
ftpClientConfig
)
;
try
{
ftpClient
.
connect
(
"tgftp.nws.noaa.gov"
)
;
ftpClient
.
login
(
"anonymous"
,
"testing@apache.org"
)
;
ftpClient
.
changeWorkingDirectory
(
"SL.us008001/DF.an/DC.sflnd/DS.metar"
)
;
ftpClient
.
enterLocalPassiveMode
(
)
;
}
catch
(
final
IOException
e
)
{
e
.
printStackTrace
(
)
;
}
}
@
Override
protected
void
tearDown
(
)
throws
Exception
{
ftpClient
.
disconnect
(
)
;
super
.
tearDown
(
)
;
}
public
void
testTimeZoneFunctionality
(
)
throws
Exception
{
final
java
.
util
.
Date
nowDate
=
new
java
.
util
.
Date
(
)
;
final
Instant
nowInstant
=
nowDate
.
toInstant
(
)
;
final
FTPFile
[
]
files
=
ftpClient
.
listFiles
(
)
;
final
TreeSet
<
FTPFile
>
sortedSet
=
getSortedSet
(
files
)
;
FTPFile
lastFile
=
null
;
FTPFile
firstFile
=
null
;
for
(
final
FTPFile
thisFile
:
sortedSet
)
{
if
(
firstFile
==
null
)
{
firstFile
=
thisFile
;
}
if
(
lastFile
!=
null
)
{
assertTrue
(
lastFile
.
getTimestamp
(
)
.
before
(
thisFile
.
getTimestamp
(
)
)
)
;
assertTrue
(
lastFile
.
getTimestampInstant
(
)
.
isBefore
(
thisFile
.
getTimestampInstant
(
)
)
)
;
}
lastFile
=
thisFile
;
}
if
(
firstFile
==
null
||
lastFile
==
null
)
{
fail
(
"No files found"
)
;
}
else
{
assertTrue
(
lastFile
.
getTimestamp
(
)
.
getTime
(
)
.
before
(
nowDate
)
)
;
assertTrue
(
lastFile
.
getTimestampInstant
(
)
.
isBefore
(
nowInstant
)
)
;
final
Calendar
firstCal
=
firstFile
.
getTimestamp
(
)
;
final
Instant
firstInstant
=
firstFile
.
getTimestampInstant
(
)
.
plus
(
Duration
.
ofDays
(
2
)
)
;
firstCal
.
add
(
Calendar
.
DAY_OF_MONTH
,
2
)
;
assertTrue
(
lastFile
.
getTimestamp
(
)
.
getTime
(
)
+
" before "
+
firstCal
.
getTime
(
)
,
lastFile
.
getTimestamp
(
)
.
before
(
firstCal
)
)
;
assertTrue
(
lastFile
.
getTimestampInstant
(
)
+
" before "
+
firstInstant
,
lastFile
.
getTimestampInstant
(
)
.
isBefore
(
firstInstant
)
)
;
}
}
}
<EOF>
