package
org
.
apache
.
commons
.
net
.
ftp
.
parser
;
import
java
.
io
.
File
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
FilenameFilter
;
import
java
.
io
.
InputStream
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
Calendar
;
import
java
.
util
.
Comparator
;
import
java
.
util
.
TimeZone
;
import
org
.
apache
.
commons
.
net
.
ftp
.
FTP
;
import
org
.
apache
.
commons
.
net
.
ftp
.
FTPClientConfig
;
import
org
.
apache
.
commons
.
net
.
ftp
.
FTPFile
;
import
org
.
apache
.
commons
.
net
.
ftp
.
FTPFileFilters
;
import
org
.
apache
.
commons
.
net
.
ftp
.
FTPListParseEngine
;
import
org
.
junit
.
Test
;
public
class
MLSDComparison
{
private
final
Comparator
<
FTPFile
>
cmp
=
(
o1
,
o2
)
->
{
final
String
n1
=
o1
.
getName
(
)
;
final
String
n2
=
o2
.
getName
(
)
;
return
n1
.
compareTo
(
n2
)
;
}
;
public
boolean
areEquivalent
(
final
FTPFile
a
,
final
FTPFile
b
)
{
return
a
.
getName
(
)
.
equals
(
b
.
getName
(
)
)
&&
areSame
(
a
.
getSize
(
)
,
b
.
getSize
(
)
,
-
1L
)
&&
areSame
(
a
.
getTimestamp
(
)
,
b
.
getTimestamp
(
)
)
&&
true
;
}
private
boolean
areSame
(
final
Calendar
a
,
final
Calendar
b
)
{
return
a
==
null
||
b
==
null
||
areSameDateTime
(
a
,
b
)
;
}
private
boolean
areSame
(
final
long
a
,
final
long
b
,
final
long
d
)
{
return
a
==
d
||
b
==
d
||
a
==
b
;
}
private
boolean
areSameDateTime
(
final
Calendar
a
,
final
Calendar
b
)
{
final
TimeZone
UTC
=
TimeZone
.
getTimeZone
(
"UTC"
)
;
final
Calendar
ac
=
Calendar
.
getInstance
(
UTC
)
;
ac
.
setTime
(
a
.
getTime
(
)
)
;
final
Calendar
bc
=
Calendar
.
getInstance
(
UTC
)
;
bc
.
setTime
(
b
.
getTime
(
)
)
;
return
isSameDay
(
ac
,
bc
)
&&
isSameTime
(
ac
,
bc
)
;
}
private
void
compareSortedLists
(
final
FTPFile
[
]
lst
,
final
FTPFile
[
]
mlst
)
{
Arrays
.
sort
(
lst
,
cmp
)
;
Arrays
.
sort
(
mlst
,
cmp
)
;
FTPFile
first
,
second
;
final
int
firstl
=
lst
.
length
;
final
int
secondl
=
mlst
.
length
;
int
one
=
0
,
two
=
0
;
first
=
lst
[
one
++
]
;
second
=
mlst
[
two
++
]
;
int
cmp
;
while
(
one
<
firstl
||
two
<
secondl
)
{
final
String
rl1
=
first
.
getRawListing
(
)
;
final
String
rl2
=
second
.
getRawListing
(
)
;
cmp
=
first
.
getName
(
)
.
compareTo
(
second
.
getName
(
)
)
;
if
(
cmp
==
0
)
{
if
(
first
.
getName
(
)
.
endsWith
(
"HEADER.html"
)
)
{
cmp
=
0
;
}
if
(
!
areEquivalent
(
first
,
second
)
)
{
final
long
tdiff
=
first
.
getTimestamp
(
)
.
getTimeInMillis
(
)
-
second
.
getTimestamp
(
)
.
getTimeInMillis
(
)
;
System
.
out
.
println
(
"Minutes diff "
+
tdiff
/
(
1000
*
60
)
)
;
}
if
(
one
<
firstl
)
{
first
=
lst
[
one
++
]
;
}
if
(
two
<
secondl
)
{
second
=
mlst
[
two
++
]
;
}
}
else
if
(
cmp
<
0
)
{
if
(
!
first
.
getName
(
)
.
startsWith
(
"."
)
)
{
System
.
out
.
println
(
"1: "
+
rl1
)
;
}
if
(
one
<
firstl
)
{
first
=
lst
[
one
++
]
;
}
}
else
{
System
.
out
.
println
(
"2: "
+
rl2
)
;
if
(
two
<
secondl
)
{
second
=
mlst
[
two
++
]
;
}
}
}
}
private
boolean
isSameDay
(
final
Calendar
a
,
final
Calendar
b
)
{
final
int
ad
=
a
.
get
(
Calendar
.
DAY_OF_MONTH
)
;
final
int
bd
=
b
.
get
(
Calendar
.
DAY_OF_MONTH
)
;
return
a
.
get
(
Calendar
.
YEAR
)
==
b
.
get
(
Calendar
.
YEAR
)
&&
a
.
get
(
Calendar
.
MONTH
)
==
b
.
get
(
Calendar
.
MONTH
)
&&
ad
==
bd
;
}
private
boolean
isSameTime
(
final
Calendar
a
,
final
Calendar
b
)
{
final
int
ah
=
a
.
get
(
Calendar
.
HOUR_OF_DAY
)
;
final
int
bh
=
b
.
get
(
Calendar
.
HOUR_OF_DAY
)
;
final
int
am
=
a
.
get
(
Calendar
.
MINUTE
)
;
final
int
bm
=
b
.
get
(
Calendar
.
MINUTE
)
;
final
int
as
=
a
.
get
(
Calendar
.
SECOND
)
;
final
int
bs
=
b
.
get
(
Calendar
.
SECOND
)
;
return
(
ah
==
0
&&
am
==
0
&&
as
==
0
)
||
(
bh
==
0
&&
bm
==
0
&&
bs
==
0
)
||
(
ah
==
bh
&&
am
==
bm
)
;
}
@
Test
public
void
testFile
(
)
throws
Exception
{
final
File
path
=
new
File
(
DownloadListings
.
DOWNLOAD_DIR
)
;
final
FilenameFilter
filter
=
(
dir
,
name
)
->
name
.
endsWith
(
"_mlsd.txt"
)
;
final
File
[
]
files
=
path
.
listFiles
(
filter
)
;
if
(
files
!=
null
)
{
for
(
final
File
mlsd
:
files
)
{
System
.
out
.
println
(
mlsd
)
;
FTPListParseEngine
engine
=
new
FTPListParseEngine
(
MLSxEntryParser
.
getInstance
(
)
)
;
try
(
final
InputStream
is
=
new
FileInputStream
(
mlsd
)
)
{
engine
.
readServerList
(
is
,
FTP
.
DEFAULT_CONTROL_ENCODING
)
;
}
final
FTPFile
[
]
mlsds
=
engine
.
getFiles
(
FTPFileFilters
.
ALL
)
;
final
File
listFile
=
new
File
(
mlsd
.
getParentFile
(
)
,
mlsd
.
getName
(
)
.
replace
(
"_mlsd"
,
"_list"
)
)
;
try
(
final
InputStream
inputStream
=
new
FileInputStream
(
listFile
)
)
{
final
FTPClientConfig
cfg
=
new
FTPClientConfig
(
)
;
cfg
.
setServerTimeZoneId
(
"GMT"
)
;
final
UnixFTPEntryParser
parser
=
new
UnixFTPEntryParser
(
cfg
)
;
engine
=
new
FTPListParseEngine
(
parser
)
;
engine
.
readServerList
(
inputStream
,
FTP
.
DEFAULT_CONTROL_ENCODING
)
;
final
FTPFile
[
]
lists
=
engine
.
getFiles
(
FTPFileFilters
.
ALL
)
;
compareSortedLists
(
mlsds
,
lists
)
;
}
}
}
}
}
<EOF>
