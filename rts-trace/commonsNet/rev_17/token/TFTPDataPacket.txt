package
org
.
apache
.
commons
.
net
.
tftp
;
import
java
.
net
.
DatagramPacket
;
import
java
.
net
.
InetAddress
;
public
final
class
TFTPDataPacket
extends
TFTPPacket
{
public
static
final
int
MAX_DATA_LENGTH
=
512
;
public
static
final
int
MIN_DATA_LENGTH
=
0
;
int
blockNumber
;
private
int
length
;
private
int
offset
;
private
byte
[
]
data
;
TFTPDataPacket
(
final
DatagramPacket
datagram
)
throws
TFTPPacketException
{
super
(
TFTPPacket
.
DATA
,
datagram
.
getAddress
(
)
,
datagram
.
getPort
(
)
)
;
this
.
data
=
datagram
.
getData
(
)
;
this
.
offset
=
4
;
if
(
getType
(
)
!=
this
.
data
[
1
]
)
{
throw
new
TFTPPacketException
(
"TFTP operator code does not match type."
)
;
}
this
.
blockNumber
=
(
(
(
this
.
data
[
2
]
&
0xff
)
<
<
8
)
|
(
this
.
data
[
3
]
&
0xff
)
)
;
this
.
length
=
datagram
.
getLength
(
)
-
4
;
if
(
this
.
length
>
MAX_DATA_LENGTH
)
{
this
.
length
=
MAX_DATA_LENGTH
;
}
}
public
TFTPDataPacket
(
final
InetAddress
destination
,
final
int
port
,
final
int
blockNumber
,
final
byte
[
]
data
)
{
this
(
destination
,
port
,
blockNumber
,
data
,
0
,
data
.
length
)
;
}
public
TFTPDataPacket
(
final
InetAddress
destination
,
final
int
port
,
final
int
blockNumber
,
final
byte
[
]
data
,
final
int
offset
,
final
int
length
)
{
super
(
TFTPPacket
.
DATA
,
destination
,
port
)
;
this
.
blockNumber
=
blockNumber
;
this
.
data
=
data
;
this
.
offset
=
offset
;
this
.
length
=
Math
.
min
(
length
,
MAX_DATA_LENGTH
)
;
}
public
int
getBlockNumber
(
)
{
return
blockNumber
;
}
public
byte
[
]
getData
(
)
{
return
data
;
}
public
int
getDataLength
(
)
{
return
length
;
}
public
int
getDataOffset
(
)
{
return
offset
;
}
@
Override
public
DatagramPacket
newDatagram
(
)
{
final
byte
[
]
data
;
data
=
new
byte
[
length
+
4
]
;
data
[
0
]
=
0
;
data
[
1
]
=
(
byte
)
type
;
data
[
2
]
=
(
byte
)
(
(
blockNumber
&
0xffff
)
>
>
8
)
;
data
[
3
]
=
(
byte
)
(
blockNumber
&
0xff
)
;
System
.
arraycopy
(
this
.
data
,
offset
,
data
,
4
,
length
)
;
return
new
DatagramPacket
(
data
,
length
+
4
,
address
,
port
)
;
}
@
Override
DatagramPacket
newDatagram
(
final
DatagramPacket
datagram
,
final
byte
[
]
data
)
{
data
[
0
]
=
0
;
data
[
1
]
=
(
byte
)
type
;
data
[
2
]
=
(
byte
)
(
(
blockNumber
&
0xffff
)
>
>
8
)
;
data
[
3
]
=
(
byte
)
(
blockNumber
&
0xff
)
;
if
(
data
!=
this
.
data
)
{
System
.
arraycopy
(
this
.
data
,
offset
,
data
,
4
,
length
)
;
}
datagram
.
setAddress
(
address
)
;
datagram
.
setPort
(
port
)
;
datagram
.
setData
(
data
)
;
datagram
.
setLength
(
length
+
4
)
;
return
datagram
;
}
public
void
setBlockNumber
(
final
int
blockNumber
)
{
this
.
blockNumber
=
blockNumber
;
}
public
void
setData
(
final
byte
[
]
data
,
final
int
offset
,
final
int
length
)
{
this
.
data
=
data
;
this
.
offset
=
offset
;
this
.
length
=
length
;
this
.
length
=
Math
.
min
(
length
,
MAX_DATA_LENGTH
)
;
}
@
Override
public
String
toString
(
)
{
return
super
.
toString
(
)
+
" DATA "
+
blockNumber
+
" "
+
length
;
}
}
<EOF>
