diff --git a/.github/workflows/codeql-analysis.yml b/.github/workflows/codeql-analysis.yml
index 73b5dc9b9..6cc86f3f2 100644
--- a/.github/workflows/codeql-analysis.yml
+++ b/.github/workflows/codeql-analysis.yml
@@ -51 +51 @@ jobs:
-    - uses: actions/cache@v3.0.11
+    - uses: actions/cache@v3.0.10
diff --git a/.github/workflows/coverage.yml b/.github/workflows/coverage.yml
index d8e232793..31c065b1a 100644
--- a/.github/workflows/coverage.yml
+++ b/.github/workflows/coverage.yml
@@ -35 +35 @@ jobs:
-    - uses: actions/cache@v3.0.11
+    - uses: actions/cache@v3.0.10
@@ -42 +42 @@ jobs:
-      uses: actions/setup-java@v3.6.0
+      uses: actions/setup-java@v3.5.1
diff --git a/.github/workflows/maven.yml b/.github/workflows/maven.yml
index f4684fa1b..f2ea31c95 100644
--- a/.github/workflows/maven.yml
+++ b/.github/workflows/maven.yml
@@ -49 +49 @@ jobs:
-    - uses: actions/cache@v3.0.11
+    - uses: actions/cache@v3.0.10
@@ -56 +56 @@ jobs:
-      uses: actions/setup-java@v3.6.0
+      uses: actions/setup-java@v3.5.1
diff --git a/.github/workflows/maven_adhoc.yml b/.github/workflows/maven_adhoc.yml
index 00b0c6a6b..97d7e1eef 100644
--- a/.github/workflows/maven_adhoc.yml
+++ b/.github/workflows/maven_adhoc.yml
@@ -32 +32 @@ jobs:
-      uses: actions/setup-java@v3.6.0
+      uses: actions/setup-java@v3.5.1
diff --git a/.github/workflows/scorecards-analysis.yml b/.github/workflows/scorecards-analysis.yml
index d223bf49e..fd03907cd 100644
--- a/.github/workflows/scorecards-analysis.yml
+++ b/.github/workflows/scorecards-analysis.yml
@@ -34,2 +34 @@ jobs:
-      # Needed to upload the results to the code-scanning dashboard.
-      security-events: write
+      security-events: write    # Needed to upload the results to the code-scanning dashboard.
@@ -37,2 +36 @@ jobs:
-      id-token: write # This is required for requesting the JWT
-      contents: read  # This is required for actions/checkout
+      contents: read
@@ -43 +41 @@ jobs:
-        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8   # 3.1.0
+        uses: actions/checkout@v3.1.0   # 3.0.2
@@ -48 +46 @@ jobs:
-        uses: ossf/scorecard-action@99c53751e09b9529366343771cc321ec74e9bd3d    # 2.0.6
+        uses: ossf/scorecard-action@ce330fde6b1a5c9c75b417e7efc510b822a35564    # 1.1.2
@@ -60 +58 @@ jobs:
-        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb    # 3.1.0
+        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8    # 3.1.0
diff --git a/pom.xml b/pom.xml
index 0db5107fb..6342abc49 100644
--- a/pom.xml
+++ b/pom.xml
@@ -55,2 +54,0 @@ Supported protocols include: Echo, Finger, FTP, NNTP, NTP, POP3(S), SMTP(S), Tel
-        <japicmp.skip>false</japicmp.skip>
-        <jacoco.skip>false</jacoco.skip>
@@ -61 +59,2 @@ Supported protocols include: Echo, Finger, FTP, NNTP, NTP, POP3(S), SMTP(S), Tel
-        <commons.release.desc>(Requires Java ${maven.compiler.target} or later)</commons.release.desc>
+        <commons.release.desc>(Requires Java ${maven.compiler.target} or
+            later)</commons.release.desc>
@@ -99,2 +98,2 @@ Supported protocols include: Echo, Finger, FTP, NNTP, NTP, POP3(S), SMTP(S), Tel
-            <groupId>org.junit.vintage</groupId>
-            <artifactId>junit-vintage-engine</artifactId>
+            <groupId>org.junit.jupiter</groupId>
+            <artifactId>junit-jupiter-api</artifactId>
@@ -104,2 +103,2 @@ Supported protocols include: Echo, Finger, FTP, NNTP, NTP, POP3(S), SMTP(S), Tel
-            <groupId>org.junit.jupiter</groupId>
-            <artifactId>junit-jupiter-engine</artifactId>
+            <groupId>org.junit.vintage</groupId>
+            <artifactId>junit-vintage-engine</artifactId>
@@ -135,0 +135 @@ Supported protocols include: Echo, Finger, FTP, NNTP, NTP, POP3(S), SMTP(S), Tel
+                    <version>${commons.spotbugs.version}</version>
@@ -346,0 +347,11 @@ Supported protocols include: Echo, Finger, FTP, NNTP, NTP, POP3(S), SMTP(S), Tel
+            <!-- drop examples from CLI invocations -->
+            <plugin>
+                <groupId>org.codehaus.mojo</groupId>
+                <artifactId>clirr-maven-plugin</artifactId>
+                <configuration>
+                    <excludes>
+                        <exclude>**/examples/**</exclude>
+                    </excludes>
+                </configuration>
+            </plugin>
+
@@ -386,0 +398 @@ Supported protocols include: Echo, Finger, FTP, NNTP, NTP, POP3(S), SMTP(S), Tel
+                <version>${commons.spotbugs.version}</version>
@@ -391,0 +404,10 @@ Supported protocols include: Echo, Finger, FTP, NNTP, NTP, POP3(S), SMTP(S), Tel
+            <plugin>
+                <groupId>org.codehaus.mojo</groupId>
+                <artifactId>clirr-maven-plugin</artifactId>
+                <configuration>
+                    <excludes>
+                        <exclude>**/examples/**</exclude>
+                    </excludes>
+                </configuration>
+            </plugin>
+
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index cb8160b18..d42d4ed73 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -110 +110 @@ The <action> type attribute can be add,update,fix,remove.
-        Bump actions/cache from 2.1.6 to 3.0.11 #93, #102, #115, #116.
+        Bump actions/cache from 2.1.6 to 3.0.10 #93, #102, #115.
@@ -115,2 +115,2 @@ The <action> type attribute can be add,update,fix,remove.
-      <action dev="ggregory" type="update" due-to="Dependabot">
-        Bump actions/upload-artifact from 3.1.0 to 3.1.1 #124.
+      <action dev="ggregory" type="update" due-to="Gary Gregory">
+        A actions/setup-java from 1.4.3 to 3.5.1.
diff --git a/src/main/java/org/apache/commons/net/util/SubnetUtils.java b/src/main/java/org/apache/commons/net/util/SubnetUtils.java
index f1014b1ee..1a18afd55 100644
--- a/src/main/java/org/apache/commons/net/util/SubnetUtils.java
+++ b/src/main/java/org/apache/commons/net/util/SubnetUtils.java
@@ -210,7 +210,7 @@ public class SubnetUtils {
-            buf.append("CIDR Signature:\t[").append(getCidrSignature()).append("]\n")
-                .append("  Netmask: [").append(getNetmask()).append("]\n")
-                .append("  Network: [").append(getNetworkAddress()).append("]\n")
-                .append("  Broadcast: [").append(getBroadcastAddress()).append("]\n")
-                .append("  First address: [").append(getLowAddress()).append("]\n")
-                .append("  Last address: [").append(getHighAddress()).append("]\n")
-                .append("  Address Count: [").append(getAddressCountLong()).append("]\n");
+            buf.append("CIDR Signature:\t[").append(getCidrSignature()).append("]")
+                .append(" Netmask: [").append(getNetmask()).append("]\n")
+                .append("Network:\t[").append(getNetworkAddress()).append("]\n")
+                .append("Broadcast:\t[").append(getBroadcastAddress()).append("]\n")
+                 .append("First Address:\t[").append(getLowAddress()).append("]\n")
+                 .append("Last Address:\t[").append(getHighAddress()).append("]\n")
+                 .append("# Addresses:\t[").append(getAddressCount()).append("]\n");
@@ -252 +251,0 @@ public class SubnetUtils {
-
@@ -265,0 +265 @@ public class SubnetUtils {
+
@@ -269,0 +270 @@ public class SubnetUtils {
+
@@ -274,0 +276,2 @@ public class SubnetUtils {
+
+
@@ -287 +290 @@ public class SubnetUtils {
-      this.address = matchAddress(matcher);
+    this.address = matchAddress(matcher);
@@ -289 +292 @@ public class SubnetUtils {
-      // Create a binary netmask from the number of bits specification /x 
+      /* Create a binary netmask from the number of bits specification /x */
@@ -292,9 +295,8 @@ public class SubnetUtils {
-      
-      //
-      // An IPv4 netmask consists of 32 bits, a contiguous sequence
-      // of the specified number of ones followed by all zeros.
-      // So, it can be obtained by shifting an unsigned integer (32 bits) to the left by
-      // the number of trailing zeros which is (32 - the # bits specification).
-      // Note that there is no unsigned left shift operator, so we have to use
-      // a long to ensure that the left-most bit is shifted out correctly.
-      //
+      /*
+       * An IPv4 netmask consists of 32 bits, a contiguous sequence
+       * of the specified number of ones followed by all zeros.
+       * So, it can be obtained by shifting an unsigned integer (32 bits) to the left by
+       * the number of trailing zeros which is (32 - the # bits specification).
+       * Note that there is no unsigned left shift operator, so we have to use
+       * a long to ensure that the left-most bit is shifted out correctly.
+       */
@@ -303 +305 @@ public class SubnetUtils {
-      // Calculate base network address
+      /* Calculate base network address */
@@ -306 +308 @@ public class SubnetUtils {
-      // Calculate broadcast address
+      /* Calculate broadcast address */
@@ -325 +327 @@ public class SubnetUtils {
-        // Calculate base network address
+        /* Calculate base network address */
@@ -328 +330 @@ public class SubnetUtils {
-        // Calculate broadcast address
+        /* Calculate broadcast address */
diff --git a/src/test/java/org/apache/commons/net/SubnetUtilsTest.java b/src/test/java/org/apache/commons/net/SubnetUtilsTest.java
index a4715989d..4b0769ea2 100644
--- a/src/test/java/org/apache/commons/net/SubnetUtilsTest.java
+++ b/src/test/java/org/apache/commons/net/SubnetUtilsTest.java
@@ -20,4 +19,0 @@ package org.apache.commons.net;
-import static org.junit.jupiter.api.Assertions.assertArrayEquals;
-import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
-import static org.junit.jupiter.api.Assertions.assertThrows;
-
@@ -47,9 +42,0 @@ public class SubnetUtilsTest extends TestCase {
-        //
-        assertEquals(-1062731775, info.asInteger("192.168.0.1"));
-        assertThrows(IllegalArgumentException.class, () -> info.asInteger("bad"));
-        //
-        assertArrayEquals(new String[] { "192.168.0.1", "192.168.0.2", "192.168.0.3", "192.168.0.4", "192.168.0.5", "192.168.0.6" }, info.getAllAddresses());
-    }
-
-    public void testAddressIllegalArgument() {
-        assertThrows(IllegalArgumentException.class, () -> new SubnetUtils("bad"));
@@ -334,5 +320,0 @@ public class SubnetUtilsTest extends TestCase {
-    public void testNext() {
-        final SubnetUtils utils = new SubnetUtils("192.168.0.1/29");
-        assertEquals("192.168.0.2", utils.getNext().getInfo().getAddress());
-    }
-
@@ -341,2 +323,2 @@ public class SubnetUtilsTest extends TestCase {
-        final String masks[] = { "255.0.0.0", "255.255.0.0", "255.255.255.0", "255.255.255.248" };
-        final String bcastAddresses[] = { "192.255.255.255", "192.168.255.255", "192.168.0.255",
+        final String masks[] = new String[] { "255.0.0.0", "255.255.0.0", "255.255.255.0", "255.255.255.248" };
+        final String bcastAddresses[] = new String[] { "192.255.255.255", "192.168.255.255", "192.168.0.255",
@@ -344,2 +326,2 @@ public class SubnetUtilsTest extends TestCase {
-        final String lowAddresses[] = { "192.0.0.1", "192.168.0.1", "192.168.0.1", "192.168.0.1" };
-        final String highAddresses[] = { "192.255.255.254", "192.168.255.254", "192.168.0.254",
+        final String lowAddresses[] = new String[] { "192.0.0.1", "192.168.0.1", "192.168.0.1", "192.168.0.1" };
+        final String highAddresses[] = new String[] { "192.255.255.254", "192.168.255.254", "192.168.0.254",
@@ -347 +329 @@ public class SubnetUtilsTest extends TestCase {
-        final String nextAddresses[] = { "192.168.0.2", "192.168.0.2", "192.168.0.2",
+        final String nextAddresses[] = new String[] { "192.168.0.2", "192.168.0.2", "192.168.0.2",
@@ -349 +331 @@ public class SubnetUtilsTest extends TestCase {
-        final String previousAddresses[] = { "192.168.0.0", "192.168.0.0", "192.168.0.0",
+        final String previousAddresses[] = new String[] { "192.168.0.0", "192.168.0.0", "192.168.0.0",
@@ -351,2 +333,2 @@ public class SubnetUtilsTest extends TestCase {
-        final String networkAddresses[] = { "192.0.0.0", "192.168.0.0", "192.168.0.0", "192.168.0.0" };
-        final String cidrSignatures[] = { "192.168.0.1/8", "192.168.0.1/16", "192.168.0.1/24",
+        final String networkAddresses[] = new String[] { "192.0.0.0", "192.168.0.0", "192.168.0.0", "192.168.0.0" };
+        final String cidrSignatures[] = new String[] { "192.168.0.1/8", "192.168.0.1/16", "192.168.0.1/24",
@@ -354 +336 @@ public class SubnetUtilsTest extends TestCase {
-        final int usableAddresses[] = { 16777214, 65534, 254, 6 };
+        final int usableAddresses[] = new int[] { 16777214, 65534, 254, 6 };
@@ -359 +340,0 @@ public class SubnetUtilsTest extends TestCase {
-            assertEquals(address, info.getAddress());
@@ -373,7 +354,7 @@ public class SubnetUtilsTest extends TestCase {
-        final String masks[] = { "255.255.255.252", "255.255.255.254", "255.255.255.255" };
-        final String bcast[] = { "192.168.15.7", "192.168.15.7", "192.168.15.7" };
-        final String netwk[] = { "192.168.15.4", "192.168.15.6", "192.168.15.7" };
-        final String lowAd[] = { "192.168.15.5", "0.0.0.0", "0.0.0.0" };
-        final String highA[] = { "192.168.15.6", "0.0.0.0", "0.0.0.0" };
-        final String cidrS[] = { "192.168.15.7/30", "192.168.15.7/31", "192.168.15.7/32" };
-        final int usableAd[] = { 2, 0, 0 };
+        final String masks[] = new String[] { "255.255.255.252", "255.255.255.254", "255.255.255.255" };
+        final String bcast[] = new String[] { "192.168.15.7", "192.168.15.7", "192.168.15.7" };
+        final String netwk[] = new String[] { "192.168.15.4", "192.168.15.6", "192.168.15.7" };
+        final String lowAd[] = new String[] { "192.168.15.5", "0.0.0.0", "0.0.0.0" };
+        final String highA[] = new String[] { "192.168.15.6", "0.0.0.0", "0.0.0.0" };
+        final String cidrS[] = new String[] { "192.168.15.7/30", "192.168.15.7/31", "192.168.15.7/32" };
+        final int usableAd[] = new int[] { 2, 0, 0 };
@@ -397,7 +378,7 @@ public class SubnetUtilsTest extends TestCase {
-        final String masks[] = { "255.255.255.252", "255.255.255.254", "255.255.255.255" };
-        final String bcast[] = { "192.168.15.7", "192.168.15.7", "192.168.15.7" };
-        final String netwk[] = { "192.168.15.4", "192.168.15.6", "192.168.15.7" };
-        final String lowAd[] = { "192.168.15.4", "192.168.15.6", "192.168.15.7" };
-        final String highA[] = { "192.168.15.7", "192.168.15.7", "192.168.15.7" };
-        final String cidrS[] = { "192.168.15.7/30", "192.168.15.7/31", "192.168.15.7/32" };
-        final int usableAd[] = { 4, 2, 1 };
+        final String masks[] = new String[] { "255.255.255.252", "255.255.255.254", "255.255.255.255" };
+        final String bcast[] = new String[] { "192.168.15.7", "192.168.15.7", "192.168.15.7" };
+        final String netwk[] = new String[] { "192.168.15.4", "192.168.15.6", "192.168.15.7" };
+        final String lowAd[] = new String[] { "192.168.15.4", "192.168.15.6", "192.168.15.7" };
+        final String highA[] = new String[] { "192.168.15.7", "192.168.15.7", "192.168.15.7" };
+        final String cidrS[] = new String[] { "192.168.15.7/30", "192.168.15.7/31", "192.168.15.7/32" };
+        final int usableAd[] = new int[] { 4, 2, 1 };
@@ -418,12 +398,0 @@ public class SubnetUtilsTest extends TestCase {
-    public void testPrevious() {
-        final SubnetUtils utils = new SubnetUtils("192.168.0.1/29");
-        assertEquals("192.168.0.0", utils.getPrevious().getInfo().getAddress());
-    }
-
-    public void testToString() {
-        final SubnetUtils utils = new SubnetUtils("192.168.0.1/29");
-        assertDoesNotThrow(() -> utils.toString());
-        final SubnetInfo info = utils.getInfo();
-        assertDoesNotThrow(() -> info.toString());
-    }
-
diff --git a/src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java b/src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java
index ae30ef5d1..62a73a9cc 100644
--- a/src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java
+++ b/src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java
@@ -21,0 +22 @@ import static org.junit.Assert.fail;
+import static org.junit.jupiter.api.Assertions.assertThrows;
@@ -31,0 +33 @@ import org.junit.Test;
+import org.junit.jupiter.api.function.Executable;
@@ -106 +108 @@ public class SimpleSMTPHeaderTestCase {
-    @Test(expected=IllegalArgumentException.class)
+    @Test
@@ -108 +110,2 @@ public class SimpleSMTPHeaderTestCase {
-        new SimpleSMTPHeader(null, null, null);
+        final Executable testMethod = () -> new SimpleSMTPHeader(null, null, null);
+        assertThrows(IllegalArgumentException.class, testMethod);
