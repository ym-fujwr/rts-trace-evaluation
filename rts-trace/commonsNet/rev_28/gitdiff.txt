diff --git a/src/main/java/org/apache/commons/net/util/SubnetUtils.java b/src/main/java/org/apache/commons/net/util/SubnetUtils.java
index e4c78d472..b9bf0fb2c 100644
--- a/src/main/java/org/apache/commons/net/util/SubnetUtils.java
+++ b/src/main/java/org/apache/commons/net/util/SubnetUtils.java
@@ -31 +30,0 @@ public class SubnetUtils {
-     *
@@ -35 +34 @@ public class SubnetUtils {
-        /* Mask to convert unsigned int to a long (i.e. keep 32 bits) */
+        /** Mask to convert unsigned int to a long (i.e. keep 32 bits). */
@@ -45,2 +44,2 @@ public class SubnetUtils {
-        /*
-        * Converts a 4-element array into dotted decimal format
+       /**
+        * Converts a 4-element array into dotted decimal format.
@@ -77 +76 @@ public class SubnetUtils {
-            // N.B. cannot be negative
+            // Cannot be negative here
@@ -111 +110 @@ public class SubnetUtils {
-            return format(toArray(address)) + "/" + pop(netmask);
+            return format(toArray(address)) + "/" + Integer.bitCount(netmask);
@@ -191,2 +190,4 @@ public class SubnetUtils {
-        // long versions of the values (as unsigned int) which are more suitable for range checking
-        private long networkLong()  { return network &  UNSIGNED_INT_MASK; }
+        /** long versions of the values (as unsigned int) which are more suitable for range checking. */
+        private long networkLong() {
+            return network & UNSIGNED_INT_MASK;
+        }
@@ -254 +254,0 @@ public class SubnetUtils {
-
@@ -341 +341,3 @@ public class SubnetUtils {
-    public final SubnetInfo getInfo() { return new SubnetInfo(); }
+    public final SubnetInfo getInfo() {
+        return new SubnetInfo();
+    }
@@ -361,13 +362,0 @@ public class SubnetUtils {
-    /*
-     * Counts the number of 1-bits in a 32-bit integer using a divide-and-conquer strategy
-     * see Hacker's Delight section 5.1
-     */
-    int pop(int x) {
-        x = x - (x >>> 1 & 0x55555555);
-        x = (x & 0x33333333) + (x >>> 2 & 0x33333333);
-        x = x + (x >>> 4) & 0x0F0F0F0F;
-        x = x + (x >>> 8);
-        x = x + (x >>> 16);
-        return x & 0x0000003F;
-    }
-
