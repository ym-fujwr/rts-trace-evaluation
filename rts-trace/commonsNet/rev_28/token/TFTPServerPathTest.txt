package
org
.
apache
.
commons
.
net
.
tftp
;
import
java
.
io
.
File
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
FileOutputStream
;
import
java
.
io
.
IOException
;
import
org
.
apache
.
commons
.
net
.
tftp
.
TFTPServer
.
ServerMode
;
import
junit
.
framework
.
TestCase
;
public
class
TFTPServerPathTest
extends
TestCase
{
private
static
final
int
SERVER_PORT
=
6901
;
String
filePrefix
=
"tftp-"
;
File
serverDirectory
=
new
File
(
System
.
getProperty
(
"java.io.tmpdir"
)
)
;
public
void
testReadOnly
(
)
throws
IOException
{
final
TFTPServer
tftpS
=
new
TFTPServer
(
serverDirectory
,
serverDirectory
,
SERVER_PORT
,
ServerMode
.
GET_ONLY
,
null
,
null
)
;
final
TFTPClient
tftp
=
new
TFTPClient
(
)
;
tftp
.
open
(
)
;
tftp
.
setSoTimeout
(
2000
)
;
final
File
file
=
new
File
(
serverDirectory
,
filePrefix
+
"source.txt"
)
;
file
.
createNewFile
(
)
;
final
File
out
=
new
File
(
serverDirectory
,
filePrefix
+
"out"
)
;
out
.
delete
(
)
;
assertFalse
(
"Couldn't clear output location"
,
out
.
exists
(
)
)
;
try
(
final
FileOutputStream
output
=
new
FileOutputStream
(
out
)
)
{
tftp
.
receiveFile
(
file
.
getName
(
)
,
TFTP
.
BINARY_MODE
,
output
,
"localhost"
,
SERVER_PORT
)
;
}
assertTrue
(
"file not created"
,
out
.
exists
(
)
)
;
out
.
delete
(
)
;
try
(
final
FileInputStream
fis
=
new
FileInputStream
(
file
)
)
{
tftp
.
sendFile
(
out
.
getName
(
)
,
TFTP
.
BINARY_MODE
,
fis
,
"localhost"
,
SERVER_PORT
)
;
fail
(
"Server allowed write"
)
;
}
catch
(
final
IOException
e
)
{
}
file
.
delete
(
)
;
tftpS
.
shutdown
(
)
;
}
public
void
testWriteOnly
(
)
throws
IOException
{
final
TFTPServer
tftpS
=
new
TFTPServer
(
serverDirectory
,
serverDirectory
,
SERVER_PORT
,
ServerMode
.
PUT_ONLY
,
null
,
null
)
;
final
TFTPClient
tftp
=
new
TFTPClient
(
)
;
tftp
.
open
(
)
;
tftp
.
setSoTimeout
(
2000
)
;
final
File
file
=
new
File
(
serverDirectory
,
filePrefix
+
"source.txt"
)
;
file
.
createNewFile
(
)
;
final
File
out
=
new
File
(
serverDirectory
,
filePrefix
+
"out"
)
;
out
.
delete
(
)
;
assertFalse
(
"Couldn't clear output location"
,
out
.
exists
(
)
)
;
try
(
final
FileOutputStream
output
=
new
FileOutputStream
(
out
)
)
{
tftp
.
receiveFile
(
file
.
getName
(
)
,
TFTP
.
BINARY_MODE
,
output
,
"localhost"
,
SERVER_PORT
)
;
fail
(
"Server allowed read"
)
;
}
catch
(
final
IOException
e
)
{
}
out
.
delete
(
)
;
try
(
final
FileInputStream
fis
=
new
FileInputStream
(
file
)
)
{
tftp
.
sendFile
(
out
.
getName
(
)
,
TFTP
.
BINARY_MODE
,
fis
,
"localhost"
,
SERVER_PORT
)
;
}
assertTrue
(
"file not created"
,
out
.
exists
(
)
)
;
file
.
delete
(
)
;
out
.
delete
(
)
;
tftpS
.
shutdown
(
)
;
}
public
void
testWriteOutsideHome
(
)
throws
IOException
{
final
TFTPServer
tftpS
=
new
TFTPServer
(
serverDirectory
,
serverDirectory
,
SERVER_PORT
,
ServerMode
.
GET_AND_PUT
,
null
,
null
)
;
final
TFTPClient
tftp
=
new
TFTPClient
(
)
;
tftp
.
open
(
)
;
final
File
file
=
new
File
(
serverDirectory
,
filePrefix
+
"source.txt"
)
;
file
.
createNewFile
(
)
;
assertFalse
(
"test construction error"
,
new
File
(
serverDirectory
,
"../foo"
)
.
exists
(
)
)
;
try
(
final
FileInputStream
fis
=
new
FileInputStream
(
file
)
)
{
tftp
.
sendFile
(
"../foo"
,
TFTP
.
BINARY_MODE
,
fis
,
"localhost"
,
SERVER_PORT
)
;
fail
(
"Server allowed write!"
)
;
}
catch
(
final
IOException
e
)
{
}
assertFalse
(
"file created when it should not have been"
,
new
File
(
serverDirectory
,
"../foo"
)
.
exists
(
)
)
;
file
.
delete
(
)
;
tftpS
.
shutdown
(
)
;
}
}
<EOF>
