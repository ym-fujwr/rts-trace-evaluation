package
org
.
apache
.
commons
.
net
.
tftp
;
import
java
.
net
.
DatagramPacket
;
import
java
.
net
.
InetAddress
;
public
final
class
TFTPAckPacket
extends
TFTPPacket
{
int
blockNumber
;
TFTPAckPacket
(
final
DatagramPacket
datagram
)
throws
TFTPPacketException
{
super
(
TFTPPacket
.
ACKNOWLEDGEMENT
,
datagram
.
getAddress
(
)
,
datagram
.
getPort
(
)
)
;
final
byte
[
]
data
;
data
=
datagram
.
getData
(
)
;
if
(
getType
(
)
!=
data
[
1
]
)
{
throw
new
TFTPPacketException
(
"TFTP operator code does not match type."
)
;
}
this
.
blockNumber
=
(
(
(
data
[
2
]
&
0xff
)
<
<
8
)
|
(
data
[
3
]
&
0xff
)
)
;
}
public
TFTPAckPacket
(
final
InetAddress
destination
,
final
int
port
,
final
int
blockNumber
)
{
super
(
TFTPPacket
.
ACKNOWLEDGEMENT
,
destination
,
port
)
;
this
.
blockNumber
=
blockNumber
;
}
public
int
getBlockNumber
(
)
{
return
blockNumber
;
}
@
Override
public
DatagramPacket
newDatagram
(
)
{
final
byte
[
]
data
;
data
=
new
byte
[
4
]
;
data
[
0
]
=
0
;
data
[
1
]
=
(
byte
)
type
;
data
[
2
]
=
(
byte
)
(
(
blockNumber
&
0xffff
)
>
>
8
)
;
data
[
3
]
=
(
byte
)
(
blockNumber
&
0xff
)
;
return
new
DatagramPacket
(
data
,
data
.
length
,
address
,
port
)
;
}
@
Override
DatagramPacket
newDatagram
(
final
DatagramPacket
datagram
,
final
byte
[
]
data
)
{
data
[
0
]
=
0
;
data
[
1
]
=
(
byte
)
type
;
data
[
2
]
=
(
byte
)
(
(
blockNumber
&
0xffff
)
>
>
8
)
;
data
[
3
]
=
(
byte
)
(
blockNumber
&
0xff
)
;
datagram
.
setAddress
(
address
)
;
datagram
.
setPort
(
port
)
;
datagram
.
setData
(
data
)
;
datagram
.
setLength
(
4
)
;
return
datagram
;
}
public
void
setBlockNumber
(
final
int
blockNumber
)
{
this
.
blockNumber
=
blockNumber
;
}
@
Override
public
String
toString
(
)
{
return
super
.
toString
(
)
+
" ACK "
+
blockNumber
;
}
}
<EOF>
