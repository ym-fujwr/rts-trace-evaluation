package
org
.
apache
.
commons
.
net
.
ntp
;
import
java
.
util
.
Calendar
;
import
java
.
util
.
Date
;
import
junit
.
framework
.
TestCase
;
public
class
TimeStampTest
extends
TestCase
{
private
static
final
String
TIME1
=
"c1a9ae1c.cf6ac48d"
;
private
static
final
String
TIME2
=
"c1a9ae1c.cf6ac48f"
;
private
static
final
String
TIME3
=
"c1a9ae1d.cf6ac48e"
;
public
void
testCompare
(
)
{
final
TimeStamp
ts1
=
new
TimeStamp
(
TIME1
)
;
final
TimeStamp
ts2
=
new
TimeStamp
(
TIME1
)
;
final
TimeStamp
ts3
=
new
TimeStamp
(
TIME2
)
;
final
TimeStamp
ts4
=
new
TimeStamp
(
TIME3
)
;
assertEquals
(
"equals(1,2)"
,
ts1
,
ts2
)
;
assertEquals
(
"compareTo(1,2)"
,
0
,
ts1
.
compareTo
(
ts2
)
)
;
assertEquals
(
"ntpValue(1,2)"
,
ts1
.
ntpValue
(
)
,
ts2
.
ntpValue
(
)
)
;
assertEquals
(
"hashCode(1,2)"
,
ts1
.
hashCode
(
)
,
ts2
.
hashCode
(
)
)
;
assertEquals
(
"ts1==ts1"
,
ts1
,
ts1
)
;
assertFalse
(
"ts1 != ts3"
,
ts1
.
equals
(
ts3
)
)
;
assertEquals
(
"compareTo(1,3)"
,
-
1
,
ts1
.
compareTo
(
ts3
)
)
;
assertEquals
(
"seconds"
,
ts1
.
getSeconds
(
)
,
ts3
.
getSeconds
(
)
)
;
assertTrue
(
"fraction"
,
ts1
.
getFraction
(
)
!=
ts3
.
getFraction
(
)
)
;
assertTrue
(
"ntpValue(1,3)"
,
ts1
.
ntpValue
(
)
!=
ts3
.
ntpValue
(
)
)
;
assertTrue
(
"hashCode(1,3)"
,
ts1
.
hashCode
(
)
!=
ts3
.
hashCode
(
)
)
;
final
long
time1
=
ts1
.
getTime
(
)
;
final
long
time3
=
ts3
.
getTime
(
)
;
assertEquals
(
"equals(time1,3)"
,
time1
,
time3
)
;
assertFalse
(
"ts3 != ts4"
,
ts3
.
equals
(
ts4
)
)
;
assertTrue
(
"time3 != ts4.time"
,
time3
!=
ts4
.
getTime
(
)
)
;
}
public
void
testDateConversion
(
)
{
final
Calendar
refCal
=
Calendar
.
getInstance
(
java
.
util
.
TimeZone
.
getTimeZone
(
"UTC"
)
)
;
final
Date
refDate
=
refCal
.
getTime
(
)
;
final
TimeStamp
ts
=
new
TimeStamp
(
refDate
)
;
assertEquals
(
"refDate.getTime()"
,
refDate
.
getTime
(
)
,
ts
.
getTime
(
)
)
;
final
Date
tsDate
=
ts
.
getDate
(
)
;
assertEquals
(
refDate
,
tsDate
)
;
}
public
void
testNotSame
(
)
{
final
TimeStamp
time
=
TimeStamp
.
getCurrentTime
(
)
;
Object
other
=
Integer
.
valueOf
(
0
)
;
if
(
time
.
equals
(
other
)
)
{
fail
(
"TimeStamp cannot equal Date"
)
;
}
other
=
null
;
if
(
time
.
equals
(
other
)
)
{
fail
(
"TimeStamp cannot equal null"
)
;
}
}
public
void
testUTCString
(
)
{
final
TimeStamp
ts1
=
new
TimeStamp
(
TIME1
)
;
final
String
actual
=
ts1
.
toUTCString
(
)
;
assertEquals
(
"Tue, Dec 17 2002 14:07:24.810 UTC"
,
actual
)
;
}
}
<EOF>
