package
org
.
apache
.
commons
.
net
.
smtp
;
import
java
.
io
.
IOException
;
import
java
.
net
.
InetAddress
;
import
java
.
security
.
InvalidKeyException
;
import
java
.
security
.
NoSuchAlgorithmException
;
import
java
.
security
.
spec
.
InvalidKeySpecException
;
import
java
.
util
.
Arrays
;
import
javax
.
crypto
.
Mac
;
import
javax
.
crypto
.
spec
.
SecretKeySpec
;
import
javax
.
net
.
ssl
.
SSLContext
;
import
org
.
apache
.
commons
.
net
.
util
.
Base64
;
public
class
AuthenticatingSMTPClient
extends
SMTPSClient
{
public
enum
AUTH_METHOD
{
PLAIN
,
CRAM_MD5
,
LOGIN
,
XOAUTH
,
XOAUTH2
;
public
static
final
String
getAuthName
(
final
AUTH_METHOD
method
)
{
if
(
method
.
equals
(
AUTH_METHOD
.
PLAIN
)
)
{
return
"PLAIN"
;
}
if
(
method
.
equals
(
AUTH_METHOD
.
CRAM_MD5
)
)
{
return
"CRAM-MD5"
;
}
if
(
method
.
equals
(
AUTH_METHOD
.
LOGIN
)
)
{
return
"LOGIN"
;
}
if
(
method
.
equals
(
AUTH_METHOD
.
XOAUTH
)
)
{
return
"XOAUTH"
;
}
if
(
method
.
equals
(
AUTH_METHOD
.
XOAUTH2
)
)
{
return
"XOAUTH2"
;
}
return
null
;
}
}
public
AuthenticatingSMTPClient
(
)
{
}
public
AuthenticatingSMTPClient
(
final
boolean
implicit
,
final
SSLContext
ctx
)
{
super
(
implicit
,
ctx
)
;
}
public
AuthenticatingSMTPClient
(
final
String
protocol
)
{
super
(
protocol
)
;
}
public
AuthenticatingSMTPClient
(
final
String
proto
,
final
boolean
implicit
)
{
super
(
proto
,
implicit
)
;
}
public
AuthenticatingSMTPClient
(
final
String
proto
,
final
boolean
implicit
,
final
String
encoding
)
{
super
(
proto
,
implicit
,
encoding
)
;
}
public
AuthenticatingSMTPClient
(
final
String
protocol
,
final
String
encoding
)
{
super
(
protocol
,
false
,
encoding
)
;
}
public
boolean
auth
(
final
AuthenticatingSMTPClient
.
AUTH_METHOD
method
,
final
String
username
,
final
String
password
)
throws
IOException
,
NoSuchAlgorithmException
,
InvalidKeyException
,
InvalidKeySpecException
{
if
(
!
SMTPReply
.
isPositiveIntermediate
(
sendCommand
(
SMTPCommand
.
AUTH
,
AUTH_METHOD
.
getAuthName
(
method
)
)
)
)
{
return
false
;
}
if
(
method
.
equals
(
AUTH_METHOD
.
PLAIN
)
)
{
return
SMTPReply
.
isPositiveCompletion
(
sendCommand
(
Base64
.
encodeBase64StringUnChunked
(
(
"\000"
+
username
+
"\000"
+
password
)
.
getBytes
(
getCharset
(
)
)
)
)
)
;
}
if
(
method
.
equals
(
AUTH_METHOD
.
CRAM_MD5
)
)
{
final
byte
[
]
serverChallenge
=
Base64
.
decodeBase64
(
getReplyString
(
)
.
substring
(
4
)
.
trim
(
)
)
;
final
Mac
hmac_md5
=
Mac
.
getInstance
(
"HmacMD5"
)
;
hmac_md5
.
init
(
new
SecretKeySpec
(
password
.
getBytes
(
getCharset
(
)
)
,
"HmacMD5"
)
)
;
final
byte
[
]
hmacResult
=
convertToHexString
(
hmac_md5
.
doFinal
(
serverChallenge
)
)
.
getBytes
(
getCharset
(
)
)
;
final
byte
[
]
usernameBytes
=
username
.
getBytes
(
getCharset
(
)
)
;
final
byte
[
]
toEncode
=
new
byte
[
usernameBytes
.
length
+
1
+
hmacResult
.
length
]
;
System
.
arraycopy
(
usernameBytes
,
0
,
toEncode
,
0
,
usernameBytes
.
length
)
;
toEncode
[
usernameBytes
.
length
]
=
' '
;
System
.
arraycopy
(
hmacResult
,
0
,
toEncode
,
usernameBytes
.
length
+
1
,
hmacResult
.
length
)
;
return
SMTPReply
.
isPositiveCompletion
(
sendCommand
(
Base64
.
encodeBase64StringUnChunked
(
toEncode
)
)
)
;
}
if
(
method
.
equals
(
AUTH_METHOD
.
LOGIN
)
)
{
if
(
!
SMTPReply
.
isPositiveIntermediate
(
sendCommand
(
Base64
.
encodeBase64StringUnChunked
(
username
.
getBytes
(
getCharset
(
)
)
)
)
)
)
{
return
false
;
}
return
SMTPReply
.
isPositiveCompletion
(
sendCommand
(
Base64
.
encodeBase64StringUnChunked
(
password
.
getBytes
(
getCharset
(
)
)
)
)
)
;
}
if
(
method
.
equals
(
AUTH_METHOD
.
XOAUTH
)
||
method
.
equals
(
AUTH_METHOD
.
XOAUTH2
)
)
{
return
SMTPReply
.
isPositiveIntermediate
(
sendCommand
(
Base64
.
encodeBase64StringUnChunked
(
username
.
getBytes
(
getCharset
(
)
)
)
)
)
;
}
return
false
;
}
private
String
convertToHexString
(
final
byte
[
]
a
)
{
final
StringBuilder
result
=
new
StringBuilder
(
a
.
length
*
2
)
;
for
(
final
byte
element
:
a
)
{
if
(
(
element
&
0x0FF
)
<=
15
)
{
result
.
append
(
"0"
)
;
}
result
.
append
(
Integer
.
toHexString
(
element
&
0x0FF
)
)
;
}
return
result
.
toString
(
)
;
}
public
int
ehlo
(
final
String
hostname
)
throws
IOException
{
return
sendCommand
(
SMTPCommand
.
EHLO
,
hostname
)
;
}
public
boolean
elogin
(
)
throws
IOException
{
final
String
name
;
final
InetAddress
host
;
host
=
getLocalAddress
(
)
;
name
=
host
.
getHostName
(
)
;
if
(
name
==
null
)
{
return
false
;
}
return
SMTPReply
.
isPositiveCompletion
(
ehlo
(
name
)
)
;
}
public
boolean
elogin
(
final
String
hostname
)
throws
IOException
{
return
SMTPReply
.
isPositiveCompletion
(
ehlo
(
hostname
)
)
;
}
public
int
[
]
getEnhancedReplyCode
(
)
{
final
String
reply
=
getReplyString
(
)
.
substring
(
4
)
;
final
String
[
]
parts
=
reply
.
substring
(
0
,
reply
.
indexOf
(
' '
)
)
.
split
(
"\\."
)
;
final
int
[
]
res
=
new
int
[
parts
.
length
]
;
Arrays
.
setAll
(
res
,
i
->
Integer
.
parseInt
(
parts
[
i
]
)
)
;
return
res
;
}
}
<EOF>
