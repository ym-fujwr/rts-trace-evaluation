package
org
.
apache
.
commons
.
net
;
import
java
.
io
.
Closeable
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
OutputStream
;
import
java
.
net
.
InetAddress
;
import
java
.
net
.
InetSocketAddress
;
import
java
.
net
.
Proxy
;
import
java
.
net
.
Socket
;
import
java
.
net
.
SocketException
;
import
java
.
nio
.
charset
.
Charset
;
import
javax
.
net
.
ServerSocketFactory
;
import
javax
.
net
.
SocketFactory
;
public
abstract
class
SocketClient
{
public
static
final
String
NETASCII_EOL
=
"\r\n"
;
private
static
final
SocketFactory
DEFAULT_SOCKET_FACTORY
=
SocketFactory
.
getDefault
(
)
;
private
static
final
ServerSocketFactory
DEFAULT_SERVER_SOCKET_FACTORY
=
ServerSocketFactory
.
getDefault
(
)
;
private
static
final
int
DEFAULT_CONNECT_TIMEOUT
=
60000
;
private
ProtocolCommandSupport
commandSupport
;
protected
int
_timeout_
;
protected
Socket
_socket_
;
protected
String
_hostname_
;
protected
int
_defaultPort_
;
protected
InputStream
_input_
;
protected
OutputStream
_output_
;
protected
SocketFactory
_socketFactory_
;
protected
ServerSocketFactory
_serverSocketFactory_
;
protected
int
connectTimeout
=
DEFAULT_CONNECT_TIMEOUT
;
private
int
receiveBufferSize
=
-
1
;
private
int
sendBufferSize
=
-
1
;
private
Proxy
connProxy
;
private
Charset
charset
=
Charset
.
defaultCharset
(
)
;
public
SocketClient
(
)
{
_socket_
=
null
;
_hostname_
=
null
;
_input_
=
null
;
_output_
=
null
;
_timeout_
=
0
;
_defaultPort_
=
0
;
_socketFactory_
=
DEFAULT_SOCKET_FACTORY
;
_serverSocketFactory_
=
DEFAULT_SERVER_SOCKET_FACTORY
;
}
private
void
_connect
(
final
InetAddress
host
,
final
int
port
,
final
InetAddress
localAddr
,
final
int
localPort
)
throws
SocketException
,
IOException
{
_socket_
=
_socketFactory_
.
createSocket
(
)
;
if
(
receiveBufferSize
!=
-
1
)
{
_socket_
.
setReceiveBufferSize
(
receiveBufferSize
)
;
}
if
(
sendBufferSize
!=
-
1
)
{
_socket_
.
setSendBufferSize
(
sendBufferSize
)
;
}
if
(
localAddr
!=
null
)
{
_socket_
.
bind
(
new
InetSocketAddress
(
localAddr
,
localPort
)
)
;
}
_socket_
.
connect
(
new
InetSocketAddress
(
host
,
port
)
,
connectTimeout
)
;
_connectAction_
(
)
;
}
protected
void
_connectAction_
(
)
throws
IOException
{
applySocketAttributes
(
)
;
_input_
=
_socket_
.
getInputStream
(
)
;
_output_
=
_socket_
.
getOutputStream
(
)
;
}
public
void
addProtocolCommandListener
(
final
ProtocolCommandListener
listener
)
{
getCommandSupport
(
)
.
addProtocolCommandListener
(
listener
)
;
}
protected
void
applySocketAttributes
(
)
throws
SocketException
{
_socket_
.
setSoTimeout
(
_timeout_
)
;
}
private
void
closeQuietly
(
final
Closeable
close
)
{
if
(
close
!=
null
)
{
try
{
close
.
close
(
)
;
}
catch
(
final
IOException
e
)
{
}
}
}
private
void
closeQuietly
(
final
Socket
socket
)
{
if
(
socket
!=
null
)
{
try
{
socket
.
close
(
)
;
}
catch
(
final
IOException
e
)
{
}
}
}
public
void
connect
(
final
InetAddress
host
)
throws
SocketException
,
IOException
{
_hostname_
=
null
;
connect
(
host
,
_defaultPort_
)
;
}
public
void
connect
(
final
InetAddress
host
,
final
int
port
)
throws
SocketException
,
IOException
{
_hostname_
=
null
;
_connect
(
host
,
port
,
null
,
-
1
)
;
}
public
void
connect
(
final
InetAddress
host
,
final
int
port
,
final
InetAddress
localAddr
,
final
int
localPort
)
throws
SocketException
,
IOException
{
_hostname_
=
null
;
_connect
(
host
,
port
,
localAddr
,
localPort
)
;
}
public
void
connect
(
final
String
hostname
)
throws
SocketException
,
IOException
{
connect
(
hostname
,
_defaultPort_
)
;
}
public
void
connect
(
final
String
hostname
,
final
int
port
)
throws
SocketException
,
IOException
{
_hostname_
=
hostname
;
_connect
(
InetAddress
.
getByName
(
hostname
)
,
port
,
null
,
-
1
)
;
}
public
void
connect
(
final
String
hostname
,
final
int
port
,
final
InetAddress
localAddr
,
final
int
localPort
)
throws
SocketException
,
IOException
{
_hostname_
=
hostname
;
_connect
(
InetAddress
.
getByName
(
hostname
)
,
port
,
localAddr
,
localPort
)
;
}
protected
void
createCommandSupport
(
)
{
commandSupport
=
new
ProtocolCommandSupport
(
this
)
;
}
public
void
disconnect
(
)
throws
IOException
{
closeQuietly
(
_socket_
)
;
closeQuietly
(
_input_
)
;
closeQuietly
(
_output_
)
;
_socket_
=
null
;
_hostname_
=
null
;
_input_
=
null
;
_output_
=
null
;
}
protected
void
fireCommandSent
(
final
String
command
,
final
String
message
)
{
if
(
getCommandSupport
(
)
.
getListenerCount
(
)
>
0
)
{
getCommandSupport
(
)
.
fireCommandSent
(
command
,
message
)
;
}
}
protected
void
fireReplyReceived
(
final
int
replyCode
,
final
String
reply
)
{
if
(
getCommandSupport
(
)
.
getListenerCount
(
)
>
0
)
{
getCommandSupport
(
)
.
fireReplyReceived
(
replyCode
,
reply
)
;
}
}
public
Charset
getCharset
(
)
{
return
charset
;
}
@
Deprecated
public
String
getCharsetName
(
)
{
return
charset
.
name
(
)
;
}
protected
ProtocolCommandSupport
getCommandSupport
(
)
{
return
commandSupport
;
}
public
int
getConnectTimeout
(
)
{
return
connectTimeout
;
}
public
int
getDefaultPort
(
)
{
return
_defaultPort_
;
}
public
int
getDefaultTimeout
(
)
{
return
_timeout_
;
}
public
boolean
getKeepAlive
(
)
throws
SocketException
{
return
_socket_
.
getKeepAlive
(
)
;
}
public
InetAddress
getLocalAddress
(
)
{
return
_socket_
.
getLocalAddress
(
)
;
}
public
int
getLocalPort
(
)
{
return
_socket_
.
getLocalPort
(
)
;
}
public
Proxy
getProxy
(
)
{
return
connProxy
;
}
protected
int
getReceiveBufferSize
(
)
{
return
receiveBufferSize
;
}
public
InetAddress
getRemoteAddress
(
)
{
return
_socket_
.
getInetAddress
(
)
;
}
public
int
getRemotePort
(
)
{
return
_socket_
.
getPort
(
)
;
}
protected
int
getSendBufferSize
(
)
{
return
sendBufferSize
;
}
public
ServerSocketFactory
getServerSocketFactory
(
)
{
return
_serverSocketFactory_
;
}
public
int
getSoLinger
(
)
throws
SocketException
{
return
_socket_
.
getSoLinger
(
)
;
}
public
int
getSoTimeout
(
)
throws
SocketException
{
return
_socket_
.
getSoTimeout
(
)
;
}
public
boolean
getTcpNoDelay
(
)
throws
SocketException
{
return
_socket_
.
getTcpNoDelay
(
)
;
}
@
SuppressWarnings
(
"resource"
)
public
boolean
isAvailable
(
)
{
if
(
isConnected
(
)
)
{
try
{
if
(
_socket_
.
getInetAddress
(
)
==
null
)
{
return
false
;
}
if
(
_socket_
.
getPort
(
)
==
0
)
{
return
false
;
}
if
(
_socket_
.
getRemoteSocketAddress
(
)
==
null
)
{
return
false
;
}
if
(
_socket_
.
isClosed
(
)
)
{
return
false
;
}
if
(
_socket_
.
isInputShutdown
(
)
)
{
return
false
;
}
if
(
_socket_
.
isOutputShutdown
(
)
)
{
return
false
;
}
_socket_
.
getInputStream
(
)
;
_socket_
.
getOutputStream
(
)
;
}
catch
(
final
IOException
ioex
)
{
return
false
;
}
return
true
;
}
return
false
;
}
public
boolean
isConnected
(
)
{
if
(
_socket_
==
null
)
{
return
false
;
}
return
_socket_
.
isConnected
(
)
;
}
public
void
removeProtocolCommandListener
(
final
ProtocolCommandListener
listener
)
{
getCommandSupport
(
)
.
removeProtocolCommandListener
(
listener
)
;
}
public
void
setCharset
(
final
Charset
charset
)
{
this
.
charset
=
charset
;
}
public
void
setConnectTimeout
(
final
int
connectTimeout
)
{
this
.
connectTimeout
=
connectTimeout
;
}
public
void
setDefaultPort
(
final
int
port
)
{
_defaultPort_
=
port
;
}
public
void
setDefaultTimeout
(
final
int
timeout
)
{
_timeout_
=
timeout
;
}
public
void
setKeepAlive
(
final
boolean
keepAlive
)
throws
SocketException
{
_socket_
.
setKeepAlive
(
keepAlive
)
;
}
public
void
setProxy
(
final
Proxy
proxy
)
{
setSocketFactory
(
new
DefaultSocketFactory
(
proxy
)
)
;
connProxy
=
proxy
;
}
public
void
setReceiveBufferSize
(
final
int
size
)
throws
SocketException
{
receiveBufferSize
=
size
;
}
public
void
setSendBufferSize
(
final
int
size
)
throws
SocketException
{
sendBufferSize
=
size
;
}
public
void
setServerSocketFactory
(
final
ServerSocketFactory
factory
)
{
if
(
factory
==
null
)
{
_serverSocketFactory_
=
DEFAULT_SERVER_SOCKET_FACTORY
;
}
else
{
_serverSocketFactory_
=
factory
;
}
}
public
void
setSocketFactory
(
final
SocketFactory
factory
)
{
if
(
factory
==
null
)
{
_socketFactory_
=
DEFAULT_SOCKET_FACTORY
;
}
else
{
_socketFactory_
=
factory
;
}
}
public
void
setSoLinger
(
final
boolean
on
,
final
int
val
)
throws
SocketException
{
_socket_
.
setSoLinger
(
on
,
val
)
;
}
public
void
setSoTimeout
(
final
int
timeout
)
throws
SocketException
{
_socket_
.
setSoTimeout
(
timeout
)
;
}
public
void
setTcpNoDelay
(
final
boolean
on
)
throws
SocketException
{
_socket_
.
setTcpNoDelay
(
on
)
;
}
public
boolean
verifyRemote
(
final
Socket
socket
)
{
final
InetAddress
host1
;
final
InetAddress
host2
;
host1
=
socket
.
getInetAddress
(
)
;
host2
=
getRemoteAddress
(
)
;
return
host1
.
equals
(
host2
)
;
}
}
<EOF>
