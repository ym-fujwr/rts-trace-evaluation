package
org
.
apache
.
commons
.
net
.
io
;
import
java
.
io
.
FilterInputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
org
.
apache
.
commons
.
net
.
util
.
NetConstants
;
public
final
class
ToNetASCIIInputStream
extends
FilterInputStream
{
private
static
final
int
NOTHING_SPECIAL
=
0
;
private
static
final
int
LAST_WAS_CR
=
1
;
private
static
final
int
LAST_WAS_NL
=
2
;
private
int
status
;
public
ToNetASCIIInputStream
(
final
InputStream
input
)
{
super
(
input
)
;
status
=
NOTHING_SPECIAL
;
}
@
Override
public
int
available
(
)
throws
IOException
{
final
int
result
;
result
=
in
.
available
(
)
;
if
(
status
==
LAST_WAS_NL
)
{
return
result
+
1
;
}
return
result
;
}
@
Override
public
boolean
markSupported
(
)
{
return
false
;
}
@
Override
public
int
read
(
)
throws
IOException
{
final
int
ch
;
if
(
status
==
LAST_WAS_NL
)
{
status
=
NOTHING_SPECIAL
;
return
'\n'
;
}
ch
=
in
.
read
(
)
;
switch
(
ch
)
{
case
'\r'
:
status
=
LAST_WAS_CR
;
return
'\r'
;
case
'\n'
:
if
(
status
!=
LAST_WAS_CR
)
{
status
=
LAST_WAS_NL
;
return
'\r'
;
}
default
:
status
=
NOTHING_SPECIAL
;
return
ch
;
}
}
@
Override
public
int
read
(
final
byte
[
]
buffer
)
throws
IOException
{
return
read
(
buffer
,
0
,
buffer
.
length
)
;
}
@
Override
public
int
read
(
final
byte
[
]
buffer
,
int
offset
,
int
length
)
throws
IOException
{
int
ch
;
final
int
off
;
if
(
length
<
1
)
{
return
0
;
}
ch
=
available
(
)
;
if
(
length
>
ch
)
{
length
=
ch
;
}
if
(
length
<
1
)
{
length
=
1
;
}
if
(
(
ch
=
read
(
)
)
==
NetConstants
.
EOS
)
{
return
NetConstants
.
EOS
;
}
off
=
offset
;
do
{
buffer
[
offset
++
]
=
(
byte
)
ch
;
}
while
(
--
length
>
0
&&
(
ch
=
read
(
)
)
!=
NetConstants
.
EOS
)
;
return
offset
-
off
;
}
}
<EOF>
