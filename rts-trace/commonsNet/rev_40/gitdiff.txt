diff --git a/src/main/java/org/apache/commons/net/DatagramSocketClient.java b/src/main/java/org/apache/commons/net/DatagramSocketClient.java
index 9f906f9b6..2b081e59b 100644
--- a/src/main/java/org/apache/commons/net/DatagramSocketClient.java
+++ b/src/main/java/org/apache/commons/net/DatagramSocketClient.java
@@ -26,8 +26,19 @@ import java.nio.charset.Charset;
- * The DatagramSocketClient provides the basic operations that are required of client objects accessing datagram sockets. It is meant to be subclassed to avoid
- * having to rewrite the same code over and over again to open a socket, close a socket, set timeouts, etc. Of special note is the
- * {@link #setDatagramSocketFactory setDatagramSocketFactory } method, which allows you to control the type of DatagramSocket the DatagramSocketClient creates
- * for network communications. This is especially useful for adding things like proxy support as well as better support for applets. For example, you could
- * create a {@link org.apache.commons.net.DatagramSocketFactory} that requests browser security capabilities before creating a socket. All classes derived from
- * DatagramSocketClient should use the {@link #_socketFactory_ _socketFactory_ } member variable to create DatagramSocket instances rather than instantiating
- * them by directly invoking a constructor. By honoring this contract you guarantee that a user will always be able to provide his own Socket implementations by
- * substituting his own SocketFactory.
+ * The DatagramSocketClient provides the basic operations that are required
+ * of client objects accessing datagram sockets.  It is meant to be
+ * subclassed to avoid having to rewrite the same code over and over again
+ * to open a socket, close a socket, set timeouts, etc.  Of special note
+ * is the {@link #setDatagramSocketFactory  setDatagramSocketFactory }
+ * method, which allows you to control the type of DatagramSocket the
+ * DatagramSocketClient creates for network communications.  This is
+ * especially useful for adding things like proxy support as well as better
+ * support for applets.  For
+ * example, you could create a
+ * {@link org.apache.commons.net.DatagramSocketFactory}
+ *  that
+ * requests browser security capabilities before creating a socket.
+ * All classes derived from DatagramSocketClient should use the
+ * {@link #_socketFactory_  _socketFactory_ } member variable to
+ * create DatagramSocket instances rather than instantiating
+ * them by directly invoking a constructor.  By honoring this contract
+ * you guarantee that a user will always be able to provide his own
+ * Socket implementations by substituting his own SocketFactory.
@@ -39 +50,2 @@ import java.nio.charset.Charset;
-public abstract class DatagramSocketClient {
+public abstract class DatagramSocketClient
+{
@@ -41 +53,2 @@ public abstract class DatagramSocketClient {
-     * The default DatagramSocketFactory shared by all DatagramSocketClient instances.
+     * The default DatagramSocketFactory shared by all DatagramSocketClient
+     * instances.
@@ -43 +56,2 @@ public abstract class DatagramSocketClient {
-    private static final DatagramSocketFactory DEFAULT_SOCKET_FACTORY = new DefaultDatagramSocketFactory();
+    private static final DatagramSocketFactory DEFAULT_SOCKET_FACTORY =
+        new DefaultDatagramSocketFactory();
@@ -65 +79,2 @@ public abstract class DatagramSocketClient {
-     * Default constructor for DatagramSocketClient. Initializes _socket_ to null, _timeout_ to 0, and _isOpen_ to false.
+     * Default constructor for DatagramSocketClient.  Initializes
+     * _socket_ to null, _timeout_ to 0, and _isOpen_ to false.
@@ -67 +82,2 @@ public abstract class DatagramSocketClient {
-    public DatagramSocketClient() {
+    public DatagramSocketClient()
+    {
@@ -73,0 +90 @@ public abstract class DatagramSocketClient {
+
@@ -75,2 +92,4 @@ public abstract class DatagramSocketClient {
-     * Closes the DatagramSocket used for the connection. You should call this method after you've finished using the class instance and also before you call
-     * {@link #open open() } again. _isOpen_ is set to false and _socket_ is set to null.
+     * Closes the DatagramSocket used for the connection.
+     * You should call this method after you've finished using the class
+     * instance and also before you call {@link #open open() }
+     * again.   _isOpen_ is set to false and  _socket_ is set to null.
@@ -78 +97,2 @@ public abstract class DatagramSocketClient {
-    public void close() {
+    public void close()
+    {
@@ -85,0 +106 @@ public abstract class DatagramSocketClient {
+
@@ -95,0 +117 @@ public abstract class DatagramSocketClient {
+
@@ -107,0 +130,2 @@ public abstract class DatagramSocketClient {
+
+
@@ -109 +133,2 @@ public abstract class DatagramSocketClient {
-     * Returns the default timeout in milliseconds that is used when opening a socket.
+     * Returns the default timeout in milliseconds that is used when
+     * opening a socket.
@@ -111 +136,2 @@ public abstract class DatagramSocketClient {
-     * @return The default timeout in milliseconds that is used when opening a socket.
+     * @return The default timeout in milliseconds that is used when
+     *         opening a socket.
@@ -113 +139,2 @@ public abstract class DatagramSocketClient {
-    public int getDefaultTimeout() {
+    public int getDefaultTimeout()
+    {
@@ -116,0 +144 @@ public abstract class DatagramSocketClient {
+
@@ -118,2 +146,3 @@ public abstract class DatagramSocketClient {
-     * Returns the local address to which the client's socket is bound. If you call this method when the client socket is not open, a NullPointerException is
-     * thrown.
+     * Returns the local address to which the client's socket is bound.
+     * If you call this method when the client socket is not open, a
+     * NullPointerException is thrown.
@@ -123 +152,2 @@ public abstract class DatagramSocketClient {
-    public InetAddress getLocalAddress() {
+    public InetAddress getLocalAddress()
+    {
@@ -126,0 +157 @@ public abstract class DatagramSocketClient {
+
@@ -128,2 +159,3 @@ public abstract class DatagramSocketClient {
-     * Returns the port number of the open socket on the local host used for the connection. If you call this method when the client socket is not open, a
-     * NullPointerException is thrown.
+     * Returns the port number of the open socket on the local host used
+     * for the connection.  If you call this method when the client socket
+     * is not open, a NullPointerException is thrown.
@@ -131 +163,2 @@ public abstract class DatagramSocketClient {
-     * @return The port number of the open socket on the local host used for the connection.
+     * @return The port number of the open socket on the local host used
+     *         for the connection.
@@ -133 +166,2 @@ public abstract class DatagramSocketClient {
-    public int getLocalPort() {
+    public int getLocalPort()
+    {
@@ -136,0 +171 @@ public abstract class DatagramSocketClient {
+
@@ -138,2 +173,3 @@ public abstract class DatagramSocketClient {
-     * Returns the timeout in milliseconds of the currently opened socket. If you call this method when the client socket is not open, a NullPointerException is
-     * thrown.
+     * Returns the timeout in milliseconds of the currently opened socket.
+     * If you call this method when the client socket is not open,
+     * a NullPointerException is thrown.
@@ -144 +180,2 @@ public abstract class DatagramSocketClient {
-    public int getSoTimeout() throws SocketException {
+    public int getSoTimeout() throws SocketException
+    {
@@ -147,0 +185 @@ public abstract class DatagramSocketClient {
+
@@ -153 +191,2 @@ public abstract class DatagramSocketClient {
-    public boolean isOpen() {
+    public boolean isOpen()
+    {
@@ -156,0 +196 @@ public abstract class DatagramSocketClient {
+
@@ -158,2 +198,3 @@ public abstract class DatagramSocketClient {
-     * Opens a DatagramSocket on the local host at the first available port. Also sets the timeout on the socket to the default timeout set by
-     * {@link #setDefaultTimeout setDefaultTimeout() }.
+     * Opens a DatagramSocket on the local host at the first available port.
+     * Also sets the timeout on the socket to the default timeout set
+     * by {@link #setDefaultTimeout  setDefaultTimeout() }.
@@ -161 +202,2 @@ public abstract class DatagramSocketClient {
-     * _isOpen_ is set to true after calling this method and _socket_ is set to the newly opened socket.
+     * _isOpen_ is set to true after calling this method and _socket_
+     * is set to the newly opened socket.
@@ -163 +205,2 @@ public abstract class DatagramSocketClient {
-     * @throws SocketException If the socket could not be opened or the timeout could not be set.
+     * @throws SocketException If the socket could not be opened or the
+     *   timeout could not be set.
@@ -165 +208,2 @@ public abstract class DatagramSocketClient {
-    public void open() throws SocketException {
+    public void open() throws SocketException
+    {
@@ -170,0 +215 @@ public abstract class DatagramSocketClient {
+
@@ -172,2 +217,3 @@ public abstract class DatagramSocketClient {
-     * Opens a DatagramSocket on the local host at a specified port. Also sets the timeout on the socket to the default timeout set by {@link #setDefaultTimeout
-     * setDefaultTimeout() }.
+     * Opens a DatagramSocket on the local host at a specified port.
+     * Also sets the timeout on the socket to the default timeout set
+     * by {@link #setDefaultTimeout  setDefaultTimeout() }.
@@ -175 +221,2 @@ public abstract class DatagramSocketClient {
-     * _isOpen_ is set to true after calling this method and _socket_ is set to the newly opened socket.
+     * _isOpen_ is set to true after calling this method and _socket_
+     * is set to the newly opened socket.
@@ -178 +225,2 @@ public abstract class DatagramSocketClient {
-     * @throws SocketException If the socket could not be opened or the timeout could not be set.
+     * @throws SocketException If the socket could not be opened or the
+     *   timeout could not be set.
@@ -180 +228,2 @@ public abstract class DatagramSocketClient {
-    public void open(final int port) throws SocketException {
+    public void open(final int port) throws SocketException
+    {
@@ -185,0 +235 @@ public abstract class DatagramSocketClient {
+
@@ -187,2 +237,4 @@ public abstract class DatagramSocketClient {
-     * Opens a DatagramSocket at the specified address on the local host at a specified port. Also sets the timeout on the socket to the default timeout set by
-     * {@link #setDefaultTimeout setDefaultTimeout() }.
+     * Opens a DatagramSocket at the specified address on the local host
+     * at a specified port.
+     * Also sets the timeout on the socket to the default timeout set
+     * by {@link #setDefaultTimeout  setDefaultTimeout() }.
@@ -190 +242,2 @@ public abstract class DatagramSocketClient {
-     * _isOpen_ is set to true after calling this method and _socket_ is set to the newly opened socket.
+     * _isOpen_ is set to true after calling this method and _socket_
+     * is set to the newly opened socket.
@@ -192,3 +245,4 @@ public abstract class DatagramSocketClient {
-     * @param port  The port to use for the socket.
-     * @param laddr The local address to use.
-     * @throws SocketException If the socket could not be opened or the timeout could not be set.
+     * @param port The port to use for the socket.
+     * @param laddr  The local address to use.
+     * @throws SocketException If the socket could not be opened or the
+     *   timeout could not be set.
@@ -196 +250,2 @@ public abstract class DatagramSocketClient {
-    public void open(final int port, final InetAddress laddr) throws SocketException {
+    public void open(final int port, final InetAddress laddr) throws SocketException
+    {
@@ -201,0 +257 @@ public abstract class DatagramSocketClient {
+
@@ -213,2 +269,4 @@ public abstract class DatagramSocketClient {
-     * Sets the DatagramSocketFactory used by the DatagramSocketClient to open DatagramSockets. If the factory value is null, then a default factory is used
-     * (only do this to reset the factory after having previously altered it).
+     * Sets the DatagramSocketFactory used by the DatagramSocketClient
+     * to open DatagramSockets.  If the factory value is null, then a default
+     * factory is used (only do this to reset the factory after having
+     * previously altered it).
@@ -216 +274,2 @@ public abstract class DatagramSocketClient {
-     * @param factory The new DatagramSocketFactory the DatagramSocketClient should use.
+     * @param factory  The new DatagramSocketFactory the DatagramSocketClient
+     * should use.
@@ -218 +277,2 @@ public abstract class DatagramSocketClient {
-    public void setDatagramSocketFactory(final DatagramSocketFactory factory) {
+    public void setDatagramSocketFactory(final DatagramSocketFactory factory)
+    {
@@ -227,3 +287,6 @@ public abstract class DatagramSocketClient {
-     * Set the default timeout in milliseconds to use when opening a socket. After a call to open, the timeout for the socket is set using this value. This
-     * method should be used prior to a call to {@link #open open()} and should not be confused with {@link #setSoTimeout setSoTimeout()} which operates on the
-     * currently open socket. _timeout_ contains the new timeout value.
+     * Set the default timeout in milliseconds to use when opening a socket.
+     * After a call to open, the timeout for the socket is set using this value.
+     * This method should be used prior to a call to {@link #open open()}
+     * and should not be confused with {@link #setSoTimeout setSoTimeout()}
+     * which operates on the currently open socket.  _timeout_ contains
+     * the new timeout value.
@@ -231 +294,2 @@ public abstract class DatagramSocketClient {
-     * @param timeout The timeout in milliseconds to use for the datagram socket connection.
+     * @param timeout  The timeout in milliseconds to use for the datagram socket
+     *                 connection.
@@ -233 +297,2 @@ public abstract class DatagramSocketClient {
-    public void setDefaultTimeout(final int timeout) {
+    public void setDefaultTimeout(final int timeout)
+    {
@@ -238 +303,3 @@ public abstract class DatagramSocketClient {
-     * Set the timeout in milliseconds of a currently open connection. Only call this method after a connection has been opened by {@link #open open()}.
+     * Set the timeout in milliseconds of a currently open connection.
+     * Only call this method after a connection has been opened
+     * by {@link #open open()}.
@@ -240 +307,2 @@ public abstract class DatagramSocketClient {
-     * @param timeout The timeout in milliseconds to use for the currently open datagram socket connection.
+     * @param timeout  The timeout in milliseconds to use for the currently
+     *                 open datagram socket connection.
@@ -243 +311,2 @@ public abstract class DatagramSocketClient {
-    public void setSoTimeout(final int timeout) throws SocketException {
+    public void setSoTimeout(final int timeout) throws SocketException
+    {
diff --git a/src/main/java/org/apache/commons/net/DatagramSocketFactory.java b/src/main/java/org/apache/commons/net/DatagramSocketFactory.java
index ba48bf6eb..e260b705a 100644
--- a/src/main/java/org/apache/commons/net/DatagramSocketFactory.java
+++ b/src/main/java/org/apache/commons/net/DatagramSocketFactory.java
@@ -25,3 +25,9 @@ import java.net.SocketException;
- * The DatagramSocketFactory interface provides a means for the programmer to control the creation of datagram sockets and provide his own DatagramSocket
- * implementations for use by all classes derived from {@link org.apache.commons.net.DatagramSocketClient} . This allows you to provide your own DatagramSocket
- * implementations and to perform security checks or browser capability requests before creating a DatagramSocket.
+ * The DatagramSocketFactory interface provides a means for the
+ * programmer to control the creation of datagram sockets and
+ * provide his own DatagramSocket implementations for use by all
+ * classes derived from
+ * {@link org.apache.commons.net.DatagramSocketClient}
+ * .
+ * This allows you to provide your own DatagramSocket implementations and
+ * to perform security checks or browser capability requests before
+ * creating a DatagramSocket.
@@ -32 +38,2 @@ import java.net.SocketException;
-public interface DatagramSocketFactory {
+public interface DatagramSocketFactory
+{
@@ -36 +42,0 @@ public interface DatagramSocketFactory {
-     *
@@ -53 +59,2 @@ public interface DatagramSocketFactory {
-     * Creates a DatagramSocket at the specified address on the local host at a specified port.
+     * Creates a DatagramSocket at the specified address on the local host
+     * at a specified port.
@@ -55,2 +62,2 @@ public interface DatagramSocketFactory {
-     * @param port  The port to use for the socket.
-     * @param laddr The local address to use.
+     * @param port The port to use for the socket.
+     * @param laddr  The local address to use.
@@ -60 +67,2 @@ public interface DatagramSocketFactory {
-    DatagramSocket createDatagramSocket(int port, InetAddress laddr) throws SocketException;
+    DatagramSocket createDatagramSocket(int port, InetAddress laddr)
+    throws SocketException;
diff --git a/src/main/java/org/apache/commons/net/DefaultDatagramSocketFactory.java b/src/main/java/org/apache/commons/net/DefaultDatagramSocketFactory.java
index 62154badf..1f9d75a14 100644
--- a/src/main/java/org/apache/commons/net/DefaultDatagramSocketFactory.java
+++ b/src/main/java/org/apache/commons/net/DefaultDatagramSocketFactory.java
@@ -25,2 +25,5 @@ import java.net.SocketException;
- * DefaultDatagramSocketFactory implements the DatagramSocketFactory interface by simply wrapping the java.net.DatagramSocket constructors. It is the default
- * DatagramSocketFactory used by {@link org.apache.commons.net.DatagramSocketClient} implementations.
+ * DefaultDatagramSocketFactory implements the DatagramSocketFactory
+ * interface by simply wrapping the java.net.DatagramSocket
+ * constructors.  It is the default DatagramSocketFactory used by
+ * {@link org.apache.commons.net.DatagramSocketClient}
+ *  implementations.
@@ -34 +37,2 @@ import java.net.SocketException;
-public class DefaultDatagramSocketFactory implements DatagramSocketFactory {
+public class DefaultDatagramSocketFactory implements DatagramSocketFactory
+{
@@ -38 +41,0 @@ public class DefaultDatagramSocketFactory implements DatagramSocketFactory {
-     *
@@ -43 +46,2 @@ public class DefaultDatagramSocketFactory implements DatagramSocketFactory {
-    public DatagramSocket createDatagramSocket() throws SocketException {
+    public DatagramSocket createDatagramSocket() throws SocketException
+    {
@@ -55 +59,2 @@ public class DefaultDatagramSocketFactory implements DatagramSocketFactory {
-    public DatagramSocket createDatagramSocket(final int port) throws SocketException {
+    public DatagramSocket createDatagramSocket(final int port) throws SocketException
+    {
@@ -60 +65,2 @@ public class DefaultDatagramSocketFactory implements DatagramSocketFactory {
-     * Creates a DatagramSocket at the specified address on the local host at a specified port.
+     * Creates a DatagramSocket at the specified address on the local host
+     * at a specified port.
@@ -62,2 +68,2 @@ public class DefaultDatagramSocketFactory implements DatagramSocketFactory {
-     * @param port  The port to use for the socket.
-     * @param laddr The local address to use.
+     * @param port The port to use for the socket.
+     * @param laddr  The local address to use.
@@ -68 +74,3 @@ public class DefaultDatagramSocketFactory implements DatagramSocketFactory {
-    public DatagramSocket createDatagramSocket(final int port, final InetAddress laddr) throws SocketException {
+    public DatagramSocket createDatagramSocket(final int port, final InetAddress laddr)
+    throws SocketException
+    {
diff --git a/src/main/java/org/apache/commons/net/DefaultSocketFactory.java b/src/main/java/org/apache/commons/net/DefaultSocketFactory.java
index c466209dc..821416523 100644
--- a/src/main/java/org/apache/commons/net/DefaultSocketFactory.java
+++ b/src/main/java/org/apache/commons/net/DefaultSocketFactory.java
@@ -31,2 +31,5 @@ import javax.net.SocketFactory;
- * DefaultSocketFactory implements the SocketFactory interface by simply wrapping the java.net.Socket and java.net.ServerSocket constructors. It is the default
- * SocketFactory used by {@link org.apache.commons.net.SocketClient} implementations.
+ * DefaultSocketFactory implements the SocketFactory interface by
+ * simply wrapping the java.net.Socket and java.net.ServerSocket
+ * constructors.  It is the default SocketFactory used by
+ * {@link org.apache.commons.net.SocketClient}
+ * implementations.
@@ -40 +43,2 @@ import javax.net.SocketFactory;
-public class DefaultSocketFactory extends SocketFactory {
+public class DefaultSocketFactory extends SocketFactory
+{
@@ -47 +51,2 @@ public class DefaultSocketFactory extends SocketFactory {
-    public DefaultSocketFactory() {
+    public DefaultSocketFactory()
+    {
@@ -57 +62,2 @@ public class DefaultSocketFactory extends SocketFactory {
-    public DefaultSocketFactory(final Proxy proxy) {
+    public DefaultSocketFactory(final Proxy proxy)
+    {
@@ -62 +68,2 @@ public class DefaultSocketFactory extends SocketFactory {
-     * Creates a ServerSocket bound to a specified port. A port of 0 will create the ServerSocket on a system-determined free port.
+     * Creates a ServerSocket bound to a specified port.  A port
+     * of 0 will create the ServerSocket on a system-determined free port.
@@ -64 +71 @@ public class DefaultSocketFactory extends SocketFactory {
-     * @param port The port on which to listen, or 0 to use any free port.
+     * @param port  The port on which to listen, or 0 to use any free port.
@@ -66 +73,2 @@ public class DefaultSocketFactory extends SocketFactory {
-     * @throws IOException If an I/O error occurs while creating the ServerSocket.
+     * @throws IOException If an I/O error occurs while creating
+     *                        the ServerSocket.
@@ -68 +76,2 @@ public class DefaultSocketFactory extends SocketFactory {
-    public ServerSocket createServerSocket(final int port) throws IOException {
+    public ServerSocket createServerSocket(final int port) throws IOException
+    {
@@ -73,2 +82,3 @@ public class DefaultSocketFactory extends SocketFactory {
-     * Creates a ServerSocket bound to a specified port with a given maximum queue length for incoming connections. A port of 0 will create the ServerSocket on
-     * a system-determined free port.
+     * Creates a ServerSocket bound to a specified port with a given
+     * maximum queue length for incoming connections.  A port of 0 will
+     * create the ServerSocket on a system-determined free port.
@@ -76,2 +86,2 @@ public class DefaultSocketFactory extends SocketFactory {
-     * @param port    The port on which to listen, or 0 to use any free port.
-     * @param backlog The maximum length of the queue for incoming connections.
+     * @param port  The port on which to listen, or 0 to use any free port.
+     * @param backlog  The maximum length of the queue for incoming connections.
@@ -79 +89,2 @@ public class DefaultSocketFactory extends SocketFactory {
-     * @throws IOException If an I/O error occurs while creating the ServerSocket.
+     * @throws IOException If an I/O error occurs while creating
+     *                        the ServerSocket.
@@ -81 +92,3 @@ public class DefaultSocketFactory extends SocketFactory {
-    public ServerSocket createServerSocket(final int port, final int backlog) throws IOException {
+    public ServerSocket createServerSocket(final int port, final int backlog)
+    throws IOException
+    {
@@ -86 +99,3 @@ public class DefaultSocketFactory extends SocketFactory {
-     * Creates a ServerSocket bound to a specified port on a given local address with a given maximum queue length for incoming connections. A port of 0 will
+     * Creates a ServerSocket bound to a specified port on a given local
+     * address with a given maximum queue length for incoming connections.
+     * A port of 0 will
@@ -89 +104 @@ public class DefaultSocketFactory extends SocketFactory {
-     * @param port     The port on which to listen, or 0 to use any free port.
+     * @param port  The port on which to listen, or 0 to use any free port.
@@ -91 +106 @@ public class DefaultSocketFactory extends SocketFactory {
-     * @param bindAddr The local address to which the ServerSocket should bind.
+     * @param bindAddr  The local address to which the ServerSocket should bind.
@@ -93 +108,2 @@ public class DefaultSocketFactory extends SocketFactory {
-     * @throws IOException If an I/O error occurs while creating the ServerSocket.
+     * @throws IOException If an I/O error occurs while creating
+     *                        the ServerSocket.
@@ -95 +111,4 @@ public class DefaultSocketFactory extends SocketFactory {
-    public ServerSocket createServerSocket(final int port, final int backlog, final InetAddress bindAddr) throws IOException {
+    public ServerSocket createServerSocket(final int port, final int backlog,
+                                           final InetAddress bindAddr)
+    throws IOException
+    {
@@ -107,2 +126,4 @@ public class DefaultSocketFactory extends SocketFactory {
-    public Socket createSocket() throws IOException {
-        if (connProxy != null) {
+    public Socket createSocket() throws IOException
+    {
+        if (connProxy != null)
+        {
@@ -118 +139 @@ public class DefaultSocketFactory extends SocketFactory {
-     * @param port    The port to connect to.
+     * @param port The port to connect to.
@@ -123,2 +144,5 @@ public class DefaultSocketFactory extends SocketFactory {
-    public Socket createSocket(final InetAddress address, final int port) throws IOException {
-        if (connProxy != null) {
+    public Socket createSocket(final InetAddress address, final int port)
+    throws IOException
+    {
+        if (connProxy != null)
+        {
@@ -133 +157,2 @@ public class DefaultSocketFactory extends SocketFactory {
-     * Creates a Socket connected to the given host and port and originating from the specified local address and port.
+     * Creates a Socket connected to the given host and port and
+     * originating from the specified local address and port.
@@ -135,4 +160,4 @@ public class DefaultSocketFactory extends SocketFactory {
-     * @param address   The address of the host to connect to.
-     * @param port      The port to connect to.
-     * @param localAddr The local address to use.
-     * @param localPort The local port to use.
+     * @param address The address of the host to connect to.
+     * @param port The port to connect to.
+     * @param localAddr  The local address to use.
+     * @param localPort  The local port to use.
@@ -143,2 +168,6 @@ public class DefaultSocketFactory extends SocketFactory {
-    public Socket createSocket(final InetAddress address, final int port, final InetAddress localAddr, final int localPort) throws IOException {
-        if (connProxy != null) {
+    public Socket createSocket(final InetAddress address, final int port,
+                               final InetAddress localAddr, final int localPort)
+    throws IOException
+    {
+        if (connProxy != null)
+        {
@@ -159,2 +188,2 @@ public class DefaultSocketFactory extends SocketFactory {
-     * @throws UnknownHostException If the hostname cannot be resolved.
-     * @throws IOException          If an I/O error occurs while creating the Socket.
+     * @throws UnknownHostException  If the hostname cannot be resolved.
+     * @throws IOException If an I/O error occurs while creating the Socket.
@@ -163,2 +192,5 @@ public class DefaultSocketFactory extends SocketFactory {
-    public Socket createSocket(final String host, final int port) throws UnknownHostException, IOException {
-        if (connProxy != null) {
+    public Socket createSocket(final String host, final int port)
+    throws UnknownHostException, IOException
+    {
+        if (connProxy != null)
+        {
@@ -173 +205,2 @@ public class DefaultSocketFactory extends SocketFactory {
-     * Creates a Socket connected to the given host and port and originating from the specified local address and port.
+     * Creates a Socket connected to the given host and port and
+     * originating from the specified local address and port.
@@ -175,4 +208,4 @@ public class DefaultSocketFactory extends SocketFactory {
-     * @param host      The hostname to connect to.
-     * @param port      The port to connect to.
-     * @param localAddr The local address to use.
-     * @param localPort The local port to use.
+     * @param host The hostname to connect to.
+     * @param port The port to connect to.
+     * @param localAddr  The local address to use.
+     * @param localPort  The local port to use.
@@ -180,2 +213,2 @@ public class DefaultSocketFactory extends SocketFactory {
-     * @throws UnknownHostException If the hostname cannot be resolved.
-     * @throws IOException          If an I/O error occurs while creating the Socket.
+     * @throws UnknownHostException  If the hostname cannot be resolved.
+     * @throws IOException If an I/O error occurs while creating the Socket.
@@ -184,2 +217,6 @@ public class DefaultSocketFactory extends SocketFactory {
-    public Socket createSocket(final String host, final int port, final InetAddress localAddr, final int localPort) throws UnknownHostException, IOException {
-        if (connProxy != null) {
+    public Socket createSocket(final String host, final int port,
+                               final InetAddress localAddr, final int localPort)
+    throws UnknownHostException, IOException
+    {
+        if (connProxy != null)
+        {
diff --git a/src/main/java/org/apache/commons/net/MalformedServerReplyException.java b/src/main/java/org/apache/commons/net/MalformedServerReplyException.java
index abe857449..f405ca9fd 100644
--- a/src/main/java/org/apache/commons/net/MalformedServerReplyException.java
+++ b/src/main/java/org/apache/commons/net/MalformedServerReplyException.java
@@ -23,4 +23,8 @@ import java.io.IOException;
- * This exception is used to indicate that the reply from a server could not be interpreted. Most of the NetComponents classes attempt to be as lenient as
- * possible when receiving server replies. Many server implementations deviate from IETF protocol specifications, making it necessary to be as flexible as
- * possible. However, there will be certain situations where it is not possible to continue an operation because the server reply could not be interpreted in a
- * meaningful manner. In these cases, a MalformedServerReplyException should be thrown.
+ * This exception is used to indicate that the reply from a server
+ * could not be interpreted.  Most of the NetComponents classes attempt
+ * to be as lenient as possible when receiving server replies.  Many
+ * server implementations deviate from IETF protocol specifications, making
+ * it necessary to be as flexible as possible.  However, there will be
+ * certain situations where it is not possible to continue an operation
+ * because the server reply could not be interpreted in a meaningful manner.
+ * In these cases, a MalformedServerReplyException should be thrown.
@@ -31 +35,2 @@ import java.io.IOException;
-public class MalformedServerReplyException extends IOException {
+public class MalformedServerReplyException extends IOException
+{
@@ -36 +41,2 @@ public class MalformedServerReplyException extends IOException {
-    public MalformedServerReplyException() {
+    public MalformedServerReplyException()
+    {
@@ -42 +48 @@ public class MalformedServerReplyException extends IOException {
-     * @param message The message explaining the reason for the exception.
+     * @param message  The message explaining the reason for the exception.
@@ -44 +50,2 @@ public class MalformedServerReplyException extends IOException {
-    public MalformedServerReplyException(final String message) {
+    public MalformedServerReplyException(final String message)
+    {
diff --git a/src/main/java/org/apache/commons/net/PrintCommandListener.java b/src/main/java/org/apache/commons/net/PrintCommandListener.java
index 364eeae27..c3f4d76d9 100644
--- a/src/main/java/org/apache/commons/net/PrintCommandListener.java
+++ b/src/main/java/org/apache/commons/net/PrintCommandListener.java
@@ -24,2 +24,3 @@ import java.io.PrintWriter;
- * This is a support class for some of the example programs. It is a sample implementation of the ProtocolCommandListener interface which just prints out to a
- * specified stream all command/reply traffic.
+ * This is a support class for some of the example programs.  It is
+ * a sample implementation of the ProtocolCommandListener interface
+ * which just prints out to a specified stream all command/reply traffic.
@@ -30 +31,2 @@ import java.io.PrintWriter;
-public class PrintCommandListener implements ProtocolCommandListener {
+public class PrintCommandListener implements ProtocolCommandListener
+{
@@ -39 +41,2 @@ public class PrintCommandListener implements ProtocolCommandListener {
-     * @param stream where to write the commands and responses e.g. System.out
+     * @param stream where to write the commands and responses
+     * e.g. System.out
@@ -42 +45,2 @@ public class PrintCommandListener implements ProtocolCommandListener {
-    public PrintCommandListener(final PrintStream stream) {
+    public PrintCommandListener(final PrintStream stream)
+    {
@@ -47 +51,2 @@ public class PrintCommandListener implements ProtocolCommandListener {
-     * Create an instance which optionally suppresses login command text and indicates where the EOL starts with the specified character.
+     * Create an instance which optionally suppresses login command text
+     * and indicates where the EOL starts with the specified character.
@@ -49 +54 @@ public class PrintCommandListener implements ProtocolCommandListener {
-     * @param stream        where to write the commands and responses
+     * @param stream where to write the commands and responses
@@ -59 +64,2 @@ public class PrintCommandListener implements ProtocolCommandListener {
-     * Create an instance which optionally suppresses login command text and indicates where the EOL starts with the specified character.
+     * Create an instance which optionally suppresses login command text
+     * and indicates where the EOL starts with the specified character.
@@ -61 +67 @@ public class PrintCommandListener implements ProtocolCommandListener {
-     * @param stream        where to write the commands and responses
+     * @param stream where to write the commands and responses
@@ -63 +69 @@ public class PrintCommandListener implements ProtocolCommandListener {
-     * @param eolMarker     if non-zero, add a marker just before the EOL.
+     * @param eolMarker if non-zero, add a marker just before the EOL.
@@ -72 +78,2 @@ public class PrintCommandListener implements ProtocolCommandListener {
-     * Create an instance which optionally suppresses login command text and indicates where the EOL starts with the specified character.
+     * Create an instance which optionally suppresses login command text
+     * and indicates where the EOL starts with the specified character.
@@ -74 +81 @@ public class PrintCommandListener implements ProtocolCommandListener {
-     * @param stream        where to write the commands and responses
+     * @param stream where to write the commands and responses
@@ -76 +83 @@ public class PrintCommandListener implements ProtocolCommandListener {
-     * @param eolMarker     if non-zero, add a marker just before the EOL.
+     * @param eolMarker if non-zero, add a marker just before the EOL.
@@ -81 +88,2 @@ public class PrintCommandListener implements ProtocolCommandListener {
-    public PrintCommandListener(final PrintStream stream, final boolean suppressLogin, final char eolMarker, final boolean showDirection) {
+    public PrintCommandListener(final PrintStream stream, final boolean suppressLogin, final char eolMarker,
+            final boolean showDirection) {
@@ -90 +98,2 @@ public class PrintCommandListener implements ProtocolCommandListener {
-    public PrintCommandListener(final PrintWriter writer) {
+    public PrintCommandListener(final PrintWriter writer)
+    {
@@ -97 +106 @@ public class PrintCommandListener implements ProtocolCommandListener {
-     * @param writer        where to write the commands and responses
+     * @param writer where to write the commands and responses
@@ -102 +111,2 @@ public class PrintCommandListener implements ProtocolCommandListener {
-    public PrintCommandListener(final PrintWriter writer, final boolean suppressLogin) {
+    public PrintCommandListener(final PrintWriter writer, final boolean suppressLogin)
+    {
@@ -107 +117,2 @@ public class PrintCommandListener implements ProtocolCommandListener {
-     * Create an instance which optionally suppresses login command text and indicates where the EOL starts with the specified character.
+     * Create an instance which optionally suppresses login command text
+     * and indicates where the EOL starts with the specified character.
@@ -109 +120 @@ public class PrintCommandListener implements ProtocolCommandListener {
-     * @param writer        where to write the commands and responses
+     * @param writer where to write the commands and responses
@@ -111 +122 @@ public class PrintCommandListener implements ProtocolCommandListener {
-     * @param eolMarker     if non-zero, add a marker just before the EOL.
+     * @param eolMarker if non-zero, add a marker just before the EOL.
@@ -115 +126,2 @@ public class PrintCommandListener implements ProtocolCommandListener {
-    public PrintCommandListener(final PrintWriter writer, final boolean suppressLogin, final char eolMarker) {
+    public PrintCommandListener(final PrintWriter writer, final boolean suppressLogin, final char eolMarker)
+    {
@@ -120 +132,2 @@ public class PrintCommandListener implements ProtocolCommandListener {
-     * Create an instance which optionally suppresses login command text and indicates where the EOL starts with the specified character.
+     * Create an instance which optionally suppresses login command text
+     * and indicates where the EOL starts with the specified character.
@@ -122 +135 @@ public class PrintCommandListener implements ProtocolCommandListener {
-     * @param writer        where to write the commands and responses
+     * @param writer where to write the commands and responses
@@ -124 +137 @@ public class PrintCommandListener implements ProtocolCommandListener {
-     * @param eolMarker     if non-zero, add a marker just before the EOL.
+     * @param eolMarker if non-zero, add a marker just before the EOL.
@@ -129 +142,2 @@ public class PrintCommandListener implements ProtocolCommandListener {
-    public PrintCommandListener(final PrintWriter writer, final boolean suppressLogin, final char eolMarker, final boolean showDirection) {
+    public PrintCommandListener(final PrintWriter writer, final boolean suppressLogin, final char eolMarker,
+            final boolean showDirection) {
@@ -136 +150 @@ public class PrintCommandListener implements ProtocolCommandListener {
-    private String getPrintableString(final String msg) {
+    private String getPrintableString(final String msg){
@@ -143 +157 @@ public class PrintCommandListener implements ProtocolCommandListener {
-            sb.append(msg.substring(0, pos));
+            sb.append(msg.substring(0,pos));
@@ -152 +166,2 @@ public class PrintCommandListener implements ProtocolCommandListener {
-    public void protocolCommandSent(final ProtocolCommandEvent event) {
+    public void protocolCommandSent(final ProtocolCommandEvent event)
+    {
@@ -165 +180 @@ public class PrintCommandListener implements ProtocolCommandListener {
-                    msg = msg.substring(0, msg.indexOf(IMAP_LOGIN) + IMAP_LOGIN.length());
+                    msg=msg.substring(0, msg.indexOf(IMAP_LOGIN)+IMAP_LOGIN.length());
@@ -179 +194,2 @@ public class PrintCommandListener implements ProtocolCommandListener {
-    public void protocolReplyReceived(final ProtocolCommandEvent event) {
+    public void protocolReplyReceived(final ProtocolCommandEvent event)
+    {
@@ -186,0 +203 @@ public class PrintCommandListener implements ProtocolCommandListener {
+
diff --git a/src/main/java/org/apache/commons/net/ProtocolCommandEvent.java b/src/main/java/org/apache/commons/net/ProtocolCommandEvent.java
index 7330cf8cb..5cb749192 100644
--- a/src/main/java/org/apache/commons/net/ProtocolCommandEvent.java
+++ b/src/main/java/org/apache/commons/net/ProtocolCommandEvent.java
@@ -19 +18,0 @@ package org.apache.commons.net;
-
@@ -23,3 +22,7 @@ import java.util.EventObject;
- * There exists a large class of IETF protocols that work by sending an ASCII text command and arguments to a server, and then receiving an ASCII text reply.
- * For debugging and other purposes, it is extremely useful to log or keep track of the contents of the protocol messages. The ProtocolCommandEvent class
- * coupled with the {@link org.apache.commons.net.ProtocolCommandListener} interface facilitate this process.
+ * There exists a large class of IETF protocols that work by sending an
+ * ASCII text command and arguments to a server, and then receiving an
+ * ASCII text reply.  For debugging and other purposes, it is extremely
+ * useful to log or keep track of the contents of the protocol messages.
+ * The ProtocolCommandEvent class coupled with the
+ * {@link org.apache.commons.net.ProtocolCommandListener}
+ *  interface facilitate this process.
@@ -32 +35,2 @@ import java.util.EventObject;
-public class ProtocolCommandEvent extends EventObject {
+public class ProtocolCommandEvent extends EventObject
+{
@@ -40,2 +44,4 @@ public class ProtocolCommandEvent extends EventObject {
-     * Creates a ProtocolCommandEvent signalling a reply to a command was received. ProtocolCommandEvents created with this constructor should only be sent
-     * after a complete command reply has been received fromt a server.
+     * Creates a ProtocolCommandEvent signalling a reply to a command was
+     * received.  ProtocolCommandEvents created with this constructor
+     * should only be sent after a complete command reply has been received
+     * fromt a server.
@@ -43,5 +49,7 @@ public class ProtocolCommandEvent extends EventObject {
-     * @param source    The source of the event.
-     * @param replyCode The integer code indicating the natureof the reply. This will be the protocol integer value for protocols that use integer reply codes,
-     *                  or the reply class constant corresponding to the reply for protocols like POP3 that use strings like OK rather than integer codes (i.e.,
-     *                  POP3Repy.OK).
-     * @param message   The entire reply as received from the server.
+     * @param source  The source of the event.
+     * @param replyCode The integer code indicating the natureof the reply.
+     *   This will be the protocol integer value for protocols
+     *   that use integer reply codes, or the reply class constant
+     *   corresponding to the reply for protocols like POP3 that use
+     *   strings like OK rather than integer codes (i.e., POP3Repy.OK).
+     * @param message The entire reply as received from the server.
@@ -49 +57,2 @@ public class ProtocolCommandEvent extends EventObject {
-    public ProtocolCommandEvent(final Object source, final int replyCode, final String message) {
+    public ProtocolCommandEvent(final Object source, final int replyCode, final String message)
+    {
@@ -56,0 +66 @@ public class ProtocolCommandEvent extends EventObject {
+
@@ -58,2 +68,4 @@ public class ProtocolCommandEvent extends EventObject {
-     * Creates a ProtocolCommandEvent signalling a command was sent to the server. ProtocolCommandEvents created with this constructor should only be sent after
-     * a command has been sent, but before the reply has been received.
+     * Creates a ProtocolCommandEvent signalling a command was sent to
+     * the server.  ProtocolCommandEvents created with this constructor
+     * should only be sent after a command has been sent, but before the
+     * reply has been received.
@@ -62,2 +74,4 @@ public class ProtocolCommandEvent extends EventObject {
-     * @param command The string representation of the command type sent, not including the arguments (e.g., "STAT" or "GET").
-     * @param message The entire command string verbatim as sent to the server, including all arguments.
+     * @param command The string representation of the command type sent, not
+     *      including the arguments (e.g., "STAT" or "GET").
+     * @param message The entire command string verbatim as sent to the server,
+     *        including all arguments.
@@ -65 +79,2 @@ public class ProtocolCommandEvent extends EventObject {
-    public ProtocolCommandEvent(final Object source, final String command, final String message) {
+    public ProtocolCommandEvent(final Object source, final String command, final String message)
+    {
@@ -74 +89,3 @@ public class ProtocolCommandEvent extends EventObject {
-     * Returns the string representation of the command type sent (e.g., "STAT" or "GET"). If the ProtocolCommandEvent is a reply event, then null is returned.
+     * Returns the string representation of the command type sent (e.g., "STAT"
+     * or "GET").  If the ProtocolCommandEvent is a reply event, then null
+     * is returned.
@@ -76 +93,2 @@ public class ProtocolCommandEvent extends EventObject {
-     * @return The string representation of the command type sent, or null if this is a reply event.
+     * @return The string representation of the command type sent, or null
+     *         if this is a reply event.
@@ -78 +96,2 @@ public class ProtocolCommandEvent extends EventObject {
-    public String getCommand() {
+    public String getCommand()
+    {
@@ -81,0 +101 @@ public class ProtocolCommandEvent extends EventObject {
+
@@ -83 +103,2 @@ public class ProtocolCommandEvent extends EventObject {
-     * Returns the entire message sent to or received from the server. Includes the line terminator.
+     * Returns the entire message sent to or received from the server.
+     * Includes the line terminator.
@@ -87 +108,2 @@ public class ProtocolCommandEvent extends EventObject {
-    public String getMessage() {
+    public String getMessage()
+    {
@@ -92 +114,2 @@ public class ProtocolCommandEvent extends EventObject {
-     * Returns the reply code of the received server reply. Undefined if this is not a reply event.
+     * Returns the reply code of the received server reply.  Undefined if
+     * this is not a reply event.
@@ -94 +117,2 @@ public class ProtocolCommandEvent extends EventObject {
-     * @return The reply code of the received server reply. Undefined if not a reply event.
+     * @return The reply code of the received server reply.  Undefined if
+     *         not a reply event.
@@ -96 +120,2 @@ public class ProtocolCommandEvent extends EventObject {
-    public int getReplyCode() {
+    public int getReplyCode()
+    {
@@ -101 +126,2 @@ public class ProtocolCommandEvent extends EventObject {
-     * Returns true if the ProtocolCommandEvent was generated as a result of sending a command.
+     * Returns true if the ProtocolCommandEvent was generated as a result
+     * of sending a command.
@@ -103 +129,2 @@ public class ProtocolCommandEvent extends EventObject {
-     * @return true If the ProtocolCommandEvent was generated as a result of sending a command. False otherwise.
+     * @return true If the ProtocolCommandEvent was generated as a result
+     * of sending a command.  False otherwise.
@@ -105 +132,2 @@ public class ProtocolCommandEvent extends EventObject {
-    public boolean isCommand() {
+    public boolean isCommand()
+    {
@@ -110 +138,2 @@ public class ProtocolCommandEvent extends EventObject {
-     * Returns true if the ProtocolCommandEvent was generated as a result of receiving a reply.
+     * Returns true if the ProtocolCommandEvent was generated as a result
+     * of receiving a reply.
@@ -112 +141,2 @@ public class ProtocolCommandEvent extends EventObject {
-     * @return true If the ProtocolCommandEvent was generated as a result of receiving a reply. False otherwise.
+     * @return true If the ProtocolCommandEvent was generated as a result
+     * of receiving a reply.  False otherwise.
@@ -114 +144,2 @@ public class ProtocolCommandEvent extends EventObject {
-    public boolean isReply() {
+    public boolean isReply()
+    {
diff --git a/src/main/java/org/apache/commons/net/ProtocolCommandListener.java b/src/main/java/org/apache/commons/net/ProtocolCommandListener.java
index 36f06a247..19db61698 100644
--- a/src/main/java/org/apache/commons/net/ProtocolCommandListener.java
+++ b/src/main/java/org/apache/commons/net/ProtocolCommandListener.java
@@ -19 +18,0 @@ package org.apache.commons.net;
-
@@ -23,3 +22,6 @@ import java.util.EventListener;
- * There exists a large class of IETF protocols that work by sending an ASCII text command and arguments to a server, and then receiving an ASCII text reply.
- * For debugging and other purposes, it is extremely useful to log or keep track of the contents of the protocol messages. The ProtocolCommandListener interface
- * coupled with the {@link ProtocolCommandEvent} class facilitate this process.
+ * There exists a large class of IETF protocols that work by sending an
+ * ASCII text command and arguments to a server, and then receiving an
+ * ASCII text reply.  For debugging and other purposes, it is extremely
+ * useful to log or keep track of the contents of the protocol messages.
+ * The ProtocolCommandListener interface coupled with the
+ * {@link ProtocolCommandEvent} class facilitate this process.
@@ -27,2 +29,4 @@ import java.util.EventListener;
- * To receive ProtocolCommandEvents, you merely implement the ProtocolCommandListener interface and register the class as a listener with a ProtocolCommandEvent
- * source such as {@link org.apache.commons.net.ftp.FTPClient}.
+ * To receive ProtocolCommandEvents, you merely implement the
+ * ProtocolCommandListener interface and register the class as a listener
+ * with a ProtocolCommandEvent source such as
+ * {@link org.apache.commons.net.ftp.FTPClient}.
@@ -35 +39,2 @@ import java.util.EventListener;
-public interface ProtocolCommandListener extends EventListener {
+public interface ProtocolCommandListener extends EventListener
+{
@@ -38 +43,2 @@ public interface ProtocolCommandListener extends EventListener {
-     * This method is invoked by a ProtocolCommandEvent source after sending a protocol command to a server.
+     * This method is invoked by a ProtocolCommandEvent source after
+     * sending a protocol command to a server.
@@ -45 +51,2 @@ public interface ProtocolCommandListener extends EventListener {
-     * This method is invoked by a ProtocolCommandEvent source after receiving a reply from a server.
+     * This method is invoked by a ProtocolCommandEvent source after
+     * receiving a reply from a server.
diff --git a/src/main/java/org/apache/commons/net/ProtocolCommandSupport.java b/src/main/java/org/apache/commons/net/ProtocolCommandSupport.java
index 869748c50..0e842007e 100644
--- a/src/main/java/org/apache/commons/net/ProtocolCommandSupport.java
+++ b/src/main/java/org/apache/commons/net/ProtocolCommandSupport.java
@@ -27,2 +27,4 @@ import org.apache.commons.net.util.ListenerList;
- * ProtocolCommandSupport is a convenience class for managing a list of ProtocolCommandListeners and firing ProtocolCommandEvents. You can simply delegate
- * ProtocolCommandEvent firing and listener registering/unregistering tasks to this class.
+ * ProtocolCommandSupport is a convenience class for managing a list of
+ * ProtocolCommandListeners and firing ProtocolCommandEvents.  You can
+ * simply delegate ProtocolCommandEvent firing and listener
+ * registering/unregistering tasks to this class.
@@ -35 +37,2 @@ import org.apache.commons.net.util.ListenerList;
-public class ProtocolCommandSupport implements Serializable {
+public class ProtocolCommandSupport implements Serializable
+{
@@ -42 +45,2 @@ public class ProtocolCommandSupport implements Serializable {
-     * Creates a ProtocolCommandSupport instance using the indicated source as the source of ProtocolCommandEvents.
+     * Creates a ProtocolCommandSupport instance using the indicated source
+     * as the source of ProtocolCommandEvents.
@@ -44 +48 @@ public class ProtocolCommandSupport implements Serializable {
-     * @param source The source to use for all generated ProtocolCommandEvents.
+     * @param source  The source to use for all generated ProtocolCommandEvents.
@@ -46 +50,2 @@ public class ProtocolCommandSupport implements Serializable {
-    public ProtocolCommandSupport(final Object source) {
+    public ProtocolCommandSupport(final Object source)
+    {
@@ -50,0 +56 @@ public class ProtocolCommandSupport implements Serializable {
+
@@ -54 +60 @@ public class ProtocolCommandSupport implements Serializable {
-     * @param listener The ProtocolCommandListener to add.
+     * @param listener  The ProtocolCommandListener to add.
@@ -56 +62,2 @@ public class ProtocolCommandSupport implements Serializable {
-    public void addProtocolCommandListener(final ProtocolCommandListener listener) {
+    public void addProtocolCommandListener(final ProtocolCommandListener listener)
+    {
@@ -61,2 +68,4 @@ public class ProtocolCommandSupport implements Serializable {
-     * Fires a ProtocolCommandEvent signalling the sending of a command to all registered listeners, invoking their
-     * {@link org.apache.commons.net.ProtocolCommandListener#protocolCommandSent protocolCommandSent() } methods.
+     * Fires a ProtocolCommandEvent signalling the sending of a command to all
+     * registered listeners, invoking their
+     * {@link org.apache.commons.net.ProtocolCommandListener#protocolCommandSent protocolCommandSent() }
+     *  methods.
@@ -64,2 +73,4 @@ public class ProtocolCommandSupport implements Serializable {
-     * @param command The string representation of the command type sent, not including the arguments (e.g., "STAT" or "GET").
-     * @param message The entire command string verbatim as sent to the server, including all arguments.
+     * @param command The string representation of the command type sent, not
+     *      including the arguments (e.g., "STAT" or "GET").
+     * @param message The entire command string verbatim as sent to the server,
+     *        including all arguments.
@@ -67 +78,2 @@ public class ProtocolCommandSupport implements Serializable {
-    public void fireCommandSent(final String command, final String message) {
+    public void fireCommandSent(final String command, final String message)
+    {
@@ -72,2 +84,3 @@ public class ProtocolCommandSupport implements Serializable {
-        for (final EventListener listener : listeners) {
-            ((ProtocolCommandListener) listener).protocolCommandSent(event);
+        for (final EventListener listener : listeners)
+        {
+           ((ProtocolCommandListener)listener).protocolCommandSent(event);
@@ -78,2 +91,4 @@ public class ProtocolCommandSupport implements Serializable {
-     * Fires a ProtocolCommandEvent signalling the reception of a command reply to all registered listeners, invoking their
-     * {@link org.apache.commons.net.ProtocolCommandListener#protocolReplyReceived protocolReplyReceived() } methods.
+     * Fires a ProtocolCommandEvent signalling the reception of a command reply
+     * to all registered listeners, invoking their
+     * {@link org.apache.commons.net.ProtocolCommandListener#protocolReplyReceived protocolReplyReceived() }
+     *  methods.
@@ -81,4 +96,6 @@ public class ProtocolCommandSupport implements Serializable {
-     * @param replyCode The integer code indicating the natureof the reply. This will be the protocol integer value for protocols that use integer reply codes,
-     *                  or the reply class constant corresponding to the reply for protocols like POP3 that use strings like OK rather than integer codes (i.e.,
-     *                  POP3Repy.OK).
-     * @param message   The entire reply as received from the server.
+     * @param replyCode The integer code indicating the natureof the reply.
+     *   This will be the protocol integer value for protocols
+     *   that use integer reply codes, or the reply class constant
+     *   corresponding to the reply for protocols like POP3 that use
+     *   strings like OK rather than integer codes (i.e., POP3Repy.OK).
+     * @param message The entire reply as received from the server.
@@ -86 +103,2 @@ public class ProtocolCommandSupport implements Serializable {
-    public void fireReplyReceived(final int replyCode, final String message) {
+    public void fireReplyReceived(final int replyCode, final String message)
+    {
@@ -90,2 +108,3 @@ public class ProtocolCommandSupport implements Serializable {
-        for (final EventListener listener : listeners) {
-            ((ProtocolCommandListener) listener).protocolReplyReceived(event);
+        for (final EventListener listener : listeners)
+        {
+            ((ProtocolCommandListener)listener).protocolReplyReceived(event);
@@ -100 +119,2 @@ public class ProtocolCommandSupport implements Serializable {
-    public int getListenerCount() {
+    public int getListenerCount()
+    {
@@ -103,0 +124 @@ public class ProtocolCommandSupport implements Serializable {
+
@@ -107 +128 @@ public class ProtocolCommandSupport implements Serializable {
-     * @param listener The ProtocolCommandListener to remove.
+     * @param listener  The ProtocolCommandListener to remove.
@@ -109 +130,2 @@ public class ProtocolCommandSupport implements Serializable {
-    public void removeProtocolCommandListener(final ProtocolCommandListener listener) {
+    public void removeProtocolCommandListener(final ProtocolCommandListener listener)
+    {
@@ -114 +136,2 @@ public class ProtocolCommandSupport implements Serializable {
-     * Serialization is unnecessary for this class. Reject attempts to do so until such time as the Serializable attribute can be dropped.
+        Serialization is unnecessary for this class.
+        Reject attempts to do so until such time as the Serializable attribute can be dropped.
@@ -117 +140,2 @@ public class ProtocolCommandSupport implements Serializable {
-    private void writeObject(final java.io.ObjectOutputStream out) throws IOException {
+    private void writeObject(final java.io.ObjectOutputStream out) throws IOException
+    {
@@ -121 +145,2 @@ public class ProtocolCommandSupport implements Serializable {
-    private void readObject(final java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {
+    private void readObject(final java.io.ObjectInputStream in) throws IOException, ClassNotFoundException
+    {
diff --git a/src/main/java/org/apache/commons/net/SocketClient.java b/src/main/java/org/apache/commons/net/SocketClient.java
index a1291baa8..f3037d3ac 100644
--- a/src/main/java/org/apache/commons/net/SocketClient.java
+++ b/src/main/java/org/apache/commons/net/SocketClient.java
@@ -33,0 +34 @@ import javax.net.SocketFactory;
+
@@ -35,8 +36,17 @@ import javax.net.SocketFactory;
- * The SocketClient provides the basic operations that are required of client objects accessing sockets. It is meant to be subclassed to avoid having to rewrite
- * the same code over and over again to open a socket, close a socket, set timeouts, etc. Of special note is the {@link #setSocketFactory setSocketFactory }
- * method, which allows you to control the type of Socket the SocketClient creates for initiating network connections. This is especially useful for adding SSL
- * or proxy support as well as better support for applets. For example, you could create a {@link javax.net.SocketFactory} that requests browser security
- * capabilities before creating a socket. All classes derived from SocketClient should use the {@link #_socketFactory_ _socketFactory_ } member variable to
- * create Socket and ServerSocket instances rather than instantiating them by directly invoking a constructor. By honoring this contract you guarantee that a
- * user will always be able to provide his own Socket implementations by substituting his own SocketFactory.
- *
+ * The SocketClient provides the basic operations that are required of
+ * client objects accessing sockets.  It is meant to be
+ * subclassed to avoid having to rewrite the same code over and over again
+ * to open a socket, close a socket, set timeouts, etc.  Of special note
+ * is the {@link #setSocketFactory  setSocketFactory }
+ * method, which allows you to control the type of Socket the SocketClient
+ * creates for initiating network connections.  This is especially useful
+ * for adding SSL or proxy support as well as better support for applets.  For
+ * example, you could create a
+ * {@link javax.net.SocketFactory} that
+ * requests browser security capabilities before creating a socket.
+ * All classes derived from SocketClient should use the
+ * {@link #_socketFactory_  _socketFactory_ } member variable to
+ * create Socket and ServerSocket instances rather than instantiating
+ * them by directly invoking a constructor.  By honoring this contract
+ * you guarantee that a user will always be able to provide his own
+ * Socket implementations by substituting his own SocketFactory.
@@ -45 +55,2 @@ import javax.net.SocketFactory;
-public abstract class SocketClient {
+public abstract class SocketClient
+{
@@ -47 +58,2 @@ public abstract class SocketClient {
-     * The end of line character sequence used by most IETF protocols. That is a carriage return followed by a newline: "\r\n"
+     * The end of line character sequence used by most IETF protocols.  That
+     * is a carriage return followed by a newline: "\r\n"
@@ -52 +64,2 @@ public abstract class SocketClient {
-    private static final SocketFactory DEFAULT_SOCKET_FACTORY = SocketFactory.getDefault();
+    private static final SocketFactory DEFAULT_SOCKET_FACTORY =
+            SocketFactory.getDefault();
@@ -55 +68,2 @@ public abstract class SocketClient {
-    private static final ServerSocketFactory DEFAULT_SERVER_SOCKET_FACTORY = ServerSocketFactory.getDefault();
+    private static final ServerSocketFactory DEFAULT_SERVER_SOCKET_FACTORY =
+            ServerSocketFactory.getDefault();
@@ -61 +75,2 @@ public abstract class SocketClient {
-     * A ProtocolCommandSupport object used to manage the registering of ProtocolCommandListeners and the firing of ProtocolCommandEvents.
+     * A ProtocolCommandSupport object used to manage the registering of
+     * ProtocolCommandListeners and the firing of ProtocolCommandEvents.
@@ -106,2 +121,5 @@ public abstract class SocketClient {
-     * Default constructor for SocketClient. Initializes _socket_ to null, _timeout_ to 0, _defaultPort to 0, _isConnected_ to false, charset to
-     * {@code Charset.defaultCharset()} and _socketFactory_ to a shared instance of {@link org.apache.commons.net.DefaultSocketFactory}.
+     * Default constructor for SocketClient.  Initializes
+     * _socket_ to null, _timeout_ to 0, _defaultPort to 0,
+     * _isConnected_ to false, charset to {@code Charset.defaultCharset()}
+     * and _socketFactory_ to a shared instance of
+     * {@link org.apache.commons.net.DefaultSocketFactory}.
@@ -109 +127,2 @@ public abstract class SocketClient {
-    public SocketClient() {
+    public SocketClient()
+    {
@@ -119,0 +139 @@ public abstract class SocketClient {
+
@@ -121 +141,3 @@ public abstract class SocketClient {
-    private void _connect(final InetAddress host, final int port, final InetAddress localAddr, final int localPort) throws SocketException, IOException {
+    private void _connect(final InetAddress host, final int port, final InetAddress localAddr, final int localPort)
+        throws SocketException, IOException
+    {
@@ -137,3 +159,5 @@ public abstract class SocketClient {
-     * Because there are so many connect() methods, the _connectAction_() method is provided as a means of performing some action immediately after establishing
-     * a connection, rather than reimplementing all of the connect() methods. The last action performed by every connect() method after opening a socket is to
-     * call this method.
+     * Because there are so many connect() methods, the _connectAction_()
+     * method is provided as a means of performing some action immediately
+     * after establishing a connection, rather than reimplementing all
+     * of the connect() methods.  The last action performed by every
+     * connect() method after opening a socket is to call this method.
@@ -141,2 +165,4 @@ public abstract class SocketClient {
-     * This method sets the timeout on the just opened socket to the default timeout set by {@link #setDefaultTimeout setDefaultTimeout() }, sets _input_ and
-     * _output_ to the socket's InputStream and OutputStream respectively, and sets _isConnected_ to true.
+     * This method sets the timeout on the just opened socket to the default
+     * timeout set by {@link #setDefaultTimeout  setDefaultTimeout() },
+     * sets _input_ and _output_ to the socket's InputStream and OutputStream
+     * respectively, and sets _isConnected_ to true.
@@ -144,3 +170,3 @@ public abstract class SocketClient {
-     * Subclasses overriding this method should start by calling <code> super._connectAction_() </code> first to ensure the initialization of the aforementioned
-     * protected variables.
-     *
+     * Subclasses overriding this method should start by calling
+     * <code> super._connectAction_() </code> first to ensure the
+     * initialization of the aforementioned protected variables.
@@ -149 +175,2 @@ public abstract class SocketClient {
-    protected void _connectAction_() throws IOException {
+    protected void _connectAction_() throws IOException
+    {
@@ -158 +185 @@ public abstract class SocketClient {
-     * @param listener The ProtocolCommandListener to add.
+     * @param listener  The ProtocolCommandListener to add.
@@ -175,2 +202,3 @@ public abstract class SocketClient {
-    private void closeQuietly(final Closeable close) {
-        if (close != null) {
+
+    private void closeQuietly(final Closeable close){
+        if (close != null){
@@ -186 +214 @@ public abstract class SocketClient {
-        if (socket != null) {
+        if (socket != null){
@@ -196,2 +224,4 @@ public abstract class SocketClient {
-     * Opens a Socket connected to a remote host at the current default port and originating from the current host at a system assigned port. Before returning,
-     * {@link #_connectAction_ _connectAction_() } is called to perform connection initialization actions.
+     * Opens a Socket connected to a remote host at the current default port
+     * and originating from the current host at a system assigned port.
+     * Before returning, {@link #_connectAction_  _connectAction_() }
+     * is called to perform connection initialization actions.
@@ -199 +229 @@ public abstract class SocketClient {
-     * @param host The remote host.
+     * @param host  The remote host.
@@ -201,2 +231,3 @@ public abstract class SocketClient {
-     * @throws IOException     If the socket could not be opened. In most cases you will only want to catch IOException since SocketException is derived from
-     *                         it.
+     * @throws IOException If the socket could not be opened.  In most
+     *  cases you will only want to catch IOException since SocketException is
+     *  derived from it.
@@ -204 +235,2 @@ public abstract class SocketClient {
-    public void connect(final InetAddress host) throws SocketException, IOException {
+    public void connect(final InetAddress host) throws SocketException, IOException
+    {
@@ -208,0 +241 @@ public abstract class SocketClient {
+
@@ -210,2 +243,4 @@ public abstract class SocketClient {
-     * Opens a Socket connected to a remote host at the specified port and originating from the current host at a system assigned port. Before returning,
-     * {@link #_connectAction_ _connectAction_() } is called to perform connection initialization actions.
+     * Opens a Socket connected to a remote host at the specified port and
+     * originating from the current host at a system assigned port.
+     * Before returning, {@link #_connectAction_  _connectAction_() }
+     * is called to perform connection initialization actions.
@@ -213,2 +248,2 @@ public abstract class SocketClient {
-     * @param host The remote host.
-     * @param port The port to connect to on the remote host.
+     * @param host  The remote host.
+     * @param port  The port to connect to on the remote host.
@@ -216,2 +251,3 @@ public abstract class SocketClient {
-     * @throws IOException     If the socket could not be opened. In most cases you will only want to catch IOException since SocketException is derived from
-     *                         it.
+     * @throws IOException If the socket could not be opened.  In most
+     *  cases you will only want to catch IOException since SocketException is
+     *  derived from it.
@@ -219 +255,3 @@ public abstract class SocketClient {
-    public void connect(final InetAddress host, final int port) throws SocketException, IOException {
+    public void connect(final InetAddress host, final int port)
+    throws SocketException, IOException
+    {
@@ -223,0 +262 @@ public abstract class SocketClient {
+
@@ -225,2 +264,4 @@ public abstract class SocketClient {
-     * Opens a Socket connected to a remote host at the specified port and originating from the specified local address and port. Before returning,
-     * {@link #_connectAction_ _connectAction_() } is called to perform connection initialization actions.
+     * Opens a Socket connected to a remote host at the specified port and
+     * originating from the specified local address and port.
+     * Before returning, {@link #_connectAction_  _connectAction_() }
+     * is called to perform connection initialization actions.
@@ -228,4 +269,4 @@ public abstract class SocketClient {
-     * @param host      The remote host.
-     * @param port      The port to connect to on the remote host.
-     * @param localAddr The local address to use.
-     * @param localPort The local port to use.
+     * @param host  The remote host.
+     * @param port  The port to connect to on the remote host.
+     * @param localAddr  The local address to use.
+     * @param localPort  The local port to use.
@@ -233,4 +274,8 @@ public abstract class SocketClient {
-     * @throws IOException     If the socket could not be opened. In most cases you will only want to catch IOException since SocketException is derived from
-     *                         it.
-     */
-    public void connect(final InetAddress host, final int port, final InetAddress localAddr, final int localPort) throws SocketException, IOException {
+     * @throws IOException If the socket could not be opened.  In most
+     *  cases you will only want to catch IOException since SocketException is
+     *  derived from it.
+     */
+    public void connect(final InetAddress host, final int port,
+                        final InetAddress localAddr, final int localPort)
+    throws SocketException, IOException
+    {
@@ -240,0 +286 @@ public abstract class SocketClient {
+
@@ -242,2 +288,4 @@ public abstract class SocketClient {
-     * Opens a Socket connected to a remote host at the current default port and originating from the current host at a system assigned port. Before returning,
-     * {@link #_connectAction_ _connectAction_() } is called to perform connection initialization actions.
+     * Opens a Socket connected to a remote host at the current default
+     * port and originating from the current host at a system assigned port.
+     * Before returning, {@link #_connectAction_  _connectAction_() }
+     * is called to perform connection initialization actions.
@@ -245,4 +293,5 @@ public abstract class SocketClient {
-     * @param hostname The name of the remote host.
-     * @throws SocketException               If the socket timeout could not be set.
-     * @throws IOException                   If the socket could not be opened. In most cases you will only want to catch IOException since SocketException is
-     *                                       derived from it.
+     * @param hostname  The name of the remote host.
+     * @throws SocketException If the socket timeout could not be set.
+     * @throws IOException If the socket could not be opened.  In most
+     *  cases you will only want to catch IOException since SocketException is
+     *  derived from it.
@@ -251 +300,2 @@ public abstract class SocketClient {
-    public void connect(final String hostname) throws SocketException, IOException {
+    public void connect(final String hostname) throws SocketException, IOException
+    {
@@ -256,2 +306,4 @@ public abstract class SocketClient {
-     * Opens a Socket connected to a remote host at the specified port and originating from the current host at a system assigned port. Before returning,
-     * {@link #_connectAction_ _connectAction_() } is called to perform connection initialization actions.
+     * Opens a Socket connected to a remote host at the specified port and
+     * originating from the current host at a system assigned port.
+     * Before returning, {@link #_connectAction_  _connectAction_() }
+     * is called to perform connection initialization actions.
@@ -259,5 +311,6 @@ public abstract class SocketClient {
-     * @param hostname The name of the remote host.
-     * @param port     The port to connect to on the remote host.
-     * @throws SocketException               If the socket timeout could not be set.
-     * @throws IOException                   If the socket could not be opened. In most cases you will only want to catch IOException since SocketException is
-     *                                       derived from it.
+     * @param hostname  The name of the remote host.
+     * @param port  The port to connect to on the remote host.
+     * @throws SocketException If the socket timeout could not be set.
+     * @throws IOException If the socket could not be opened.  In most
+     *  cases you will only want to catch IOException since SocketException is
+     *  derived from it.
@@ -266 +319,3 @@ public abstract class SocketClient {
-    public void connect(final String hostname, final int port) throws SocketException, IOException {
+    public void connect(final String hostname, final int port)
+    throws SocketException, IOException
+    {
@@ -272,2 +327,4 @@ public abstract class SocketClient {
-     * Opens a Socket connected to a remote host at the specified port and originating from the specified local address and port. Before returning,
-     * {@link #_connectAction_ _connectAction_() } is called to perform connection initialization actions.
+     * Opens a Socket connected to a remote host at the specified port and
+     * originating from the specified local address and port.
+     * Before returning, {@link #_connectAction_  _connectAction_() }
+     * is called to perform connection initialization actions.
@@ -276,6 +333,7 @@ public abstract class SocketClient {
-     * @param port      The port to connect to on the remote host.
-     * @param localAddr The local address to use.
-     * @param localPort The local port to use.
-     * @throws SocketException               If the socket timeout could not be set.
-     * @throws IOException                   If the socket could not be opened. In most cases you will only want to catch IOException since SocketException is
-     *                                       derived from it.
+     * @param port  The port to connect to on the remote host.
+     * @param localAddr  The local address to use.
+     * @param localPort  The local port to use.
+     * @throws SocketException If the socket timeout could not be set.
+     * @throws IOException If the socket could not be opened.  In most
+     *  cases you will only want to catch IOException since SocketException is
+     *  derived from it.
@@ -284 +342,4 @@ public abstract class SocketClient {
-    public void connect(final String hostname, final int port, final InetAddress localAddr, final int localPort) throws SocketException, IOException {
+    public void connect(final String hostname, final int port,
+                        final InetAddress localAddr, final int localPort)
+    throws SocketException, IOException
+    {
@@ -286 +347 @@ public abstract class SocketClient {
-        _connect(InetAddress.getByName(hostname), port, localAddr, localPort);
+       _connect(InetAddress.getByName(hostname), port, localAddr, localPort);
@@ -288 +348,0 @@ public abstract class SocketClient {
-
@@ -292 +352 @@ public abstract class SocketClient {
-    protected void createCommandSupport() {
+    protected void createCommandSupport(){
@@ -297,2 +357,6 @@ public abstract class SocketClient {
-     * Disconnects the socket connection. You should call this method after you've finished using the class instance and also before you call {@link #connect
-     * connect() } again. _isConnected_ is set to false, _socket_ is set to null, _input_ is set to null, and _output_ is set to null.
+     * Disconnects the socket connection.
+     * You should call this method after you've finished using the class
+     * instance and also before you call
+     * {@link #connect connect() }
+     * again.  _isConnected_ is set to false, _socket_ is set to null,
+     * _input_ is set to null, and _output_ is set to null.
@@ -300 +364 @@ public abstract class SocketClient {
-     * @throws IOException If there is an error closing the socket.
+     * @throws IOException  If there is an error closing the socket.
@@ -302 +366,2 @@ public abstract class SocketClient {
-    public void disconnect() throws IOException {
+    public void disconnect() throws IOException
+    {
@@ -329 +394 @@ public abstract class SocketClient {
-     * @param reply     the full reply text
+     * @param reply the full reply text
@@ -337,0 +403 @@ public abstract class SocketClient {
+
@@ -347,0 +414 @@ public abstract class SocketClient {
+
@@ -359,0 +427 @@ public abstract class SocketClient {
+
@@ -361 +429,2 @@ public abstract class SocketClient {
-     * Subclasses can override this if they need to provide their own instance field for backwards compatibilty.
+     * Subclasses can override this if they need to provide their own
+     * instance field for backwards compatibilty.
@@ -369,0 +439 @@ public abstract class SocketClient {
+
@@ -372 +441,0 @@ public abstract class SocketClient {
-     *
@@ -381 +450,2 @@ public abstract class SocketClient {
-     * Returns the current value of the default port (stored in {@link #_defaultPort_ _defaultPort_ }).
+     * Returns the current value of the default port (stored in
+     * {@link #_defaultPort_  _defaultPort_ }).
@@ -385 +455,2 @@ public abstract class SocketClient {
-    public int getDefaultPort() {
+    public int getDefaultPort()
+    {
@@ -390 +461,2 @@ public abstract class SocketClient {
-     * Returns the default timeout in milliseconds that is used when opening a socket.
+     * Returns the default timeout in milliseconds that is used when
+     * opening a socket.
@@ -392 +464,2 @@ public abstract class SocketClient {
-     * @return The default timeout in milliseconds that is used when opening a socket.
+     * @return The default timeout in milliseconds that is used when
+     *         opening a socket.
@@ -394 +467,2 @@ public abstract class SocketClient {
-    public int getDefaultTimeout() {
+    public int getDefaultTimeout()
+    {
@@ -399,2 +473,2 @@ public abstract class SocketClient {
-     * Returns the current value of the SO_KEEPALIVE flag on the currently opened socket. Delegates to {@link Socket#getKeepAlive()}
-     *
+     * Returns the current value of the SO_KEEPALIVE flag on the currently opened socket.
+     * Delegates to {@link Socket#getKeepAlive()}
@@ -402 +476 @@ public abstract class SocketClient {
-     * @throws SocketException      if there is a problem with the socket
+     * @throws SocketException if there is a problem with the socket
@@ -411 +485,2 @@ public abstract class SocketClient {
-     * Returns the local address to which the client's socket is bound. Delegates to {@link Socket#getLocalAddress()}
+     * Returns the local address  to which the client's socket is bound.
+     * Delegates to {@link Socket#getLocalAddress()}
@@ -416 +491,2 @@ public abstract class SocketClient {
-    public InetAddress getLocalAddress() {
+    public InetAddress getLocalAddress()
+    {
@@ -421 +497,3 @@ public abstract class SocketClient {
-     * Returns the port number of the open socket on the local host used for the connection. Delegates to {@link Socket#getLocalPort()}
+     * Returns the port number of the open socket on the local host used
+     * for the connection.
+     * Delegates to {@link Socket#getLocalPort()}
@@ -423 +501,2 @@ public abstract class SocketClient {
-     * @return The port number of the open socket on the local host used for the connection.
+     * @return The port number of the open socket on the local host used
+     *         for the connection.
@@ -426 +505,2 @@ public abstract class SocketClient {
-    public int getLocalPort() {
+    public int getLocalPort()
+    {
@@ -429,0 +510 @@ public abstract class SocketClient {
+
@@ -432 +512,0 @@ public abstract class SocketClient {
-     *
@@ -441 +520,0 @@ public abstract class SocketClient {
-     *
@@ -445 +524 @@ public abstract class SocketClient {
-    protected int getReceiveBufferSize() {
+    protected int getReceiveBufferSize(){
@@ -450 +529,2 @@ public abstract class SocketClient {
-     * @return The remote address to which the client is connected. Delegates to {@link Socket#getInetAddress()}
+     * @return The remote address to which the client is connected.
+     * Delegates to {@link Socket#getInetAddress()}
@@ -453 +533,2 @@ public abstract class SocketClient {
-    public InetAddress getRemoteAddress() {
+    public InetAddress getRemoteAddress()
+    {
@@ -458 +539,3 @@ public abstract class SocketClient {
-     * Returns the port number of the remote host to which the client is connected. Delegates to {@link Socket#getPort()}
+     * Returns the port number of the remote host to which the client is
+     * connected.
+     * Delegates to {@link Socket#getPort()}
@@ -460 +543,2 @@ public abstract class SocketClient {
-     * @return The port number of the remote host to which the client is connected.
+     * @return The port number of the remote host to which the client is
+     *         connected.
@@ -463 +547,2 @@ public abstract class SocketClient {
-    public int getRemotePort() {
+    public int getRemotePort()
+    {
@@ -466,0 +552 @@ public abstract class SocketClient {
+
@@ -469 +554,0 @@ public abstract class SocketClient {
-     *
@@ -473 +558 @@ public abstract class SocketClient {
-    protected int getSendBufferSize() {
+    protected int getSendBufferSize(){
@@ -476,0 +562 @@ public abstract class SocketClient {
+
@@ -479 +564,0 @@ public abstract class SocketClient {
-     *
@@ -486,0 +572 @@ public abstract class SocketClient {
+
@@ -490,2 +576,3 @@ public abstract class SocketClient {
-     * @return The current SO_LINGER timeout. If SO_LINGER is disabled returns -1.
-     * @throws SocketException      If the operation fails.
+     * @return The current SO_LINGER timeout.  If SO_LINGER is disabled returns
+     *         -1.
+     * @throws SocketException If the operation fails.
@@ -494 +581,2 @@ public abstract class SocketClient {
-    public int getSoLinger() throws SocketException {
+    public int getSoLinger() throws SocketException
+    {
@@ -502 +590 @@ public abstract class SocketClient {
-     * @throws SocketException      If the operation fails.
+     * @throws SocketException If the operation fails.
@@ -505 +593,2 @@ public abstract class SocketClient {
-    public int getSoTimeout() throws SocketException {
+    public int getSoTimeout() throws SocketException
+    {
@@ -508,0 +598 @@ public abstract class SocketClient {
+
@@ -510 +600,2 @@ public abstract class SocketClient {
-     * Returns true if Nagle's algorithm is enabled on the currently opened socket.
+     * Returns true if Nagle's algorithm is enabled on the currently opened
+     * socket.
@@ -512,2 +603,3 @@ public abstract class SocketClient {
-     * @return True if Nagle's algorithm is enabled on the currently opened socket, false otherwise.
-     * @throws SocketException      If the operation fails.
+     * @return True if Nagle's algorithm is enabled on the currently opened
+     *        socket, false otherwise.
+     * @throws SocketException If the operation fails.
@@ -516 +608,2 @@ public abstract class SocketClient {
-    public boolean getTcpNoDelay() throws SocketException {
+    public boolean getTcpNoDelay() throws SocketException
+    {
@@ -519,0 +613 @@ public abstract class SocketClient {
+
@@ -521,2 +615,3 @@ public abstract class SocketClient {
-     * Make various checks on the socket to test if it is available for use. Note that the only sure test is to use it, but these checks may help in some cases.
-     *
+     * Make various checks on the socket to test if it is available for use.
+     * Note that the only sure test is to use it, but these checks may help
+     * in some cases.
@@ -528 +623 @@ public abstract class SocketClient {
-    public boolean isAvailable() {
+    public boolean isAvailable(){
@@ -530 +625,2 @@ public abstract class SocketClient {
-            try {
+            try
+            {
@@ -543,3 +639,3 @@ public abstract class SocketClient {
-                /*
-                 * these aren't exact checks (a Socket can be half-open), but since we usually require two-way data transfer, we check these here too:
-                 */
+                /* these aren't exact checks (a Socket can be half-open),
+                   but since we usually require two-way data transfer,
+                   we check these here too: */
@@ -557 +653,3 @@ public abstract class SocketClient {
-            } catch (final IOException ioex) {
+            }
+            catch (final IOException ioex)
+            {
@@ -564,0 +663 @@ public abstract class SocketClient {
+
@@ -569,2 +668,2 @@ public abstract class SocketClient {
-     *
-     * @return True if the client is currently connected to a server, false otherwise.
+     * @return True if the client is currently connected to a server,
+     *         false otherwise.
@@ -572 +671,2 @@ public abstract class SocketClient {
-    public boolean isConnected() {
+    public boolean isConnected()
+    {
@@ -583 +683 @@ public abstract class SocketClient {
-     * @param listener The ProtocolCommandListener to remove.
+     * @param listener  The ProtocolCommandListener to remove.
@@ -601,2 +701,2 @@ public abstract class SocketClient {
-     * Sets the connection timeout in milliseconds, which will be passed to the {@link Socket} object's connect() method.
-     *
+     * Sets the connection timeout in milliseconds, which will be passed to the {@link Socket} object's
+     * connect() method.
@@ -611,2 +711,4 @@ public abstract class SocketClient {
-     * Sets the default port the SocketClient should connect to when a port is not specified. The {@link #_defaultPort_ _defaultPort_ } variable stores this
-     * value. If never set, the default port is equal to zero.
+     * Sets the default port the SocketClient should connect to when a port
+     * is not specified.  The {@link #_defaultPort_  _defaultPort_ }
+     * variable stores this value.  If never set, the default port is equal
+     * to zero.
@@ -614 +716 @@ public abstract class SocketClient {
-     * @param port The default port to set.
+     * @param port  The default port to set.
@@ -616 +718,2 @@ public abstract class SocketClient {
-    public void setDefaultPort(final int port) {
+    public void setDefaultPort(final int port)
+    {
@@ -619,0 +723 @@ public abstract class SocketClient {
+
@@ -621,2 +725,6 @@ public abstract class SocketClient {
-     * Set the default timeout in milliseconds to use when opening a socket. This value is only used previous to a call to {@link #connect connect()} and should
-     * not be confused with {@link #setSoTimeout setSoTimeout()} which operates on an the currently opened socket. _timeout_ contains the new timeout value.
+     * Set the default timeout in milliseconds to use when opening a socket.
+     * This value is only used previous to a call to
+     * {@link #connect connect()}
+     * and should not be confused with {@link #setSoTimeout setSoTimeout()}
+     * which operates on an the currently opened socket.  _timeout_ contains
+     * the new timeout value.
@@ -624 +732,2 @@ public abstract class SocketClient {
-     * @param timeout The timeout in milliseconds to use for the socket connection.
+     * @param timeout  The timeout in milliseconds to use for the socket
+     *                 connection.
@@ -626 +735,2 @@ public abstract class SocketClient {
-    public void setDefaultTimeout(final int timeout) {
+    public void setDefaultTimeout(final int timeout)
+    {
@@ -633,5 +743,6 @@ public abstract class SocketClient {
-     * From the Javadocs, the default keepalive time is 2 hours (although this is implementation dependent). It looks as though the Windows WSA sockets
-     * implementation allows a specific keepalive value to be set, although this seems not to be the case on other systems.
-     *
-     * @param keepAlive If true, keepAlive is turned on
-     * @throws SocketException      if there is a problem with the socket
+     * From the Javadocs, the default keepalive time is 2 hours (although this is
+     * implementation  dependent). It looks as though the Windows WSA sockets implementation
+     * allows a specific keepalive value to be set, although this seems not to be the case on
+     * other systems.
+     * @param  keepAlive If true, keepAlive is turned on
+     * @throws SocketException if there is a problem with the socket
@@ -646 +757,3 @@ public abstract class SocketClient {
-     * Sets the proxy for use with all the connections. The proxy is used for connections established after the call to this method.
+     * Sets the proxy for use with all the connections.
+     * The proxy is used for connections established after the
+     * call to this method.
@@ -663 +776 @@ public abstract class SocketClient {
-    public void setReceiveBufferSize(final int size) throws SocketException {
+    public void setReceiveBufferSize(final int size) throws SocketException  {
@@ -679,2 +792,4 @@ public abstract class SocketClient {
-     * Sets the ServerSocketFactory used by the SocketClient to open ServerSocket connections. If the factory value is null, then a default factory is used
-     * (only do this to reset the factory after having previously altered it).
+     * Sets the ServerSocketFactory used by the SocketClient to open ServerSocket
+     * connections.  If the factory value is null, then a default
+     * factory is used (only do this to reset the factory after having
+     * previously altered it).
@@ -682 +797 @@ public abstract class SocketClient {
-     * @param factory The new ServerSocketFactory the SocketClient should use.
+     * @param factory  The new ServerSocketFactory the SocketClient should use.
@@ -694,2 +809,5 @@ public abstract class SocketClient {
-     * Sets the SocketFactory used by the SocketClient to open socket connections. If the factory value is null, then a default factory is used (only do this to
-     * reset the factory after having previously altered it). Any proxy setting is discarded.
+     * Sets the SocketFactory used by the SocketClient to open socket
+     * connections.  If the factory value is null, then a default
+     * factory is used (only do this to reset the factory after having
+     * previously altered it).
+     * Any proxy setting is discarded.
@@ -697 +815 @@ public abstract class SocketClient {
-     * @param factory The new SocketFactory the SocketClient should use.
+     * @param factory  The new SocketFactory the SocketClient should use.
@@ -699 +817,2 @@ public abstract class SocketClient {
-    public void setSocketFactory(final SocketFactory factory) {
+    public void setSocketFactory(final SocketFactory factory)
+    {
@@ -712 +831 @@ public abstract class SocketClient {
-     * @throws SocketException      If the operation fails.
+     * @throws SocketException If the operation fails.
@@ -715 +834,2 @@ public abstract class SocketClient {
-    public void setSoLinger(final boolean on, final int val) throws SocketException {
+    public void setSoLinger(final boolean on, final int val) throws SocketException
+    {
@@ -720 +840,3 @@ public abstract class SocketClient {
-     * Set the timeout in milliseconds of a currently open connection. Only call this method after a connection has been opened by {@link #connect connect()}.
+     * Set the timeout in milliseconds of a currently open connection.
+     * Only call this method after a connection has been opened
+     * by {@link #connect connect()}.
@@ -724,2 +846,3 @@ public abstract class SocketClient {
-     * @param timeout The timeout in milliseconds to use for the currently open socket connection.
-     * @throws SocketException      If the operation fails.
+     * @param timeout  The timeout in milliseconds to use for the currently
+     *                 open socket connection.
+     * @throws SocketException If the operation fails.
@@ -728 +851,2 @@ public abstract class SocketClient {
-    public void setSoTimeout(final int timeout) throws SocketException {
+    public void setSoTimeout(final int timeout) throws SocketException
+    {
@@ -733 +857,2 @@ public abstract class SocketClient {
-     * Enables or disables the Nagle's algorithm (TCP_NODELAY) on the currently opened socket.
+     * Enables or disables the Nagle's algorithm (TCP_NODELAY) on the
+     * currently opened socket.
@@ -735,2 +860,2 @@ public abstract class SocketClient {
-     * @param on True if Nagle's algorithm is to be enabled, false if not.
-     * @throws SocketException      If the operation fails.
+     * @param on  True if Nagle's algorithm is to be enabled, false if not.
+     * @throws SocketException If the operation fails.
@@ -739 +864,2 @@ public abstract class SocketClient {
-    public void setTcpNoDelay(final boolean on) throws SocketException {
+    public void setTcpNoDelay(final boolean on) throws SocketException
+    {
@@ -744,3 +870,5 @@ public abstract class SocketClient {
-     * Verifies that the remote end of the given socket is connected to the the same host that the SocketClient is currently connected to. This is useful for
-     * doing a quick security check when a client needs to accept a connection from a server, such as an FTP data connection or a BSD R command standard error
-     * stream.
+     * Verifies that the remote end of the given socket is connected to the
+     * the same host that the SocketClient is currently connected to.  This
+     * is useful for doing a quick security check when a client needs to
+     * accept a connection from a server, such as an FTP data connection or
+     * a BSD R command standard error stream.
@@ -751 +879,2 @@ public abstract class SocketClient {
-    public boolean verifyRemote(final Socket socket) {
+    public boolean verifyRemote(final Socket socket)
+    {
@@ -762,2 +891,2 @@ public abstract class SocketClient {
-     * N.B. Fields cannot be pulled up into a super-class without breaking binary compatibility, so the abstract method is needed to pass the instance to the
-     * methods which were moved here.
+     *  N.B. Fields cannot be pulled up into a super-class without breaking binary compatibility,
+     *  so the abstract method is needed to pass the instance to the methods which were moved here.
@@ -765,0 +895,2 @@ public abstract class SocketClient {
+
+
diff --git a/src/main/java/org/apache/commons/net/bsd/RCommandClient.java b/src/main/java/org/apache/commons/net/bsd/RCommandClient.java
index c03f5c458..e5ce9fef3 100644
--- a/src/main/java/org/apache/commons/net/bsd/RCommandClient.java
+++ b/src/main/java/org/apache/commons/net/bsd/RCommandClient.java
@@ -33,9 +33,21 @@ import org.apache.commons.net.io.SocketInputStream;
- * RCommandClient is very similar to {@link org.apache.commons.net.bsd.RExecClient}, from which it is derived, and implements the rcmd() facility that first
- * appeared in 4.2BSD Unix. rcmd() is the facility used by the rsh (rshell) and other commands to execute a command on another machine from a trusted host
- * without issuing a password. The trust relationship between two machines is established by the contents of a machine's /etc/hosts.equiv file and a user's
- * .rhosts file. These files specify from which hosts and accounts on those hosts rcmd() requests will be accepted. The only additional measure for establishing
- * trust is that all client connections must originate from a port between 512 and 1023. Consequently, there is an upper limit to the number of rcmd connections
- * that can be running simultaneously. The required ports are reserved ports on Unix systems, and can only be bound by a process running with root permissions
- * (to accomplish this rsh, rlogin, and related commands usualy have the suid bit set). Therefore, on a Unix system, you will only be able to successfully use
- * the RCommandClient class if the process runs as root. However, there is no such restriction on Windows95 and some other systems. The security risks are
- * obvious. However, when carefully used, rcmd() can be very useful when used behind a firewall.
+ * RCommandClient is very similar to
+ * {@link org.apache.commons.net.bsd.RExecClient},
+ * from which it is derived, and implements the rcmd() facility that
+ * first appeared in 4.2BSD Unix.  rcmd() is the facility used by the rsh
+ * (rshell) and other commands to execute a command on another machine
+ * from a trusted host without issuing a password.  The trust relationship
+ * between two machines is established by the contents of a machine's
+ * /etc/hosts.equiv file and a user's .rhosts file.  These files specify
+ * from which hosts and accounts on those hosts rcmd() requests will be
+ * accepted.  The only additional measure for establishing trust is that
+ * all client connections must originate from a port between 512 and 1023.
+ * Consequently, there is an upper limit to the number of rcmd connections
+ * that can be running simultaneously.   The required ports are reserved
+ * ports on Unix systems, and can only be bound by a
+ * process running with root permissions (to accomplish this rsh, rlogin,
+ * and related commands usualy have the suid bit set).  Therefore, on a
+ * Unix system, you will only be able to successfully use the RCommandClient
+ * class if the process runs as root.  However, there is no such restriction
+ * on Windows95 and some other systems.  The security risks are obvious.
+ * However, when carefully used, rcmd() can be very useful when used behind
+ * a firewall.
@@ -43,5 +55,11 @@ import org.apache.commons.net.io.SocketInputStream;
- * As with virtually all of the client classes in org.apache.commons.net, this class derives from SocketClient. But it overrides most of its connection methods
- * so that the local Socket will originate from an acceptable rshell port. The way to use RCommandClient is to first connect to the server, call the
- * {@link #rcommand rcommand() } method, and then fetch the connection's input, output, and optionally error streams. Interaction with the remote command is
- * controlled entirely through the I/O streams. Once you have finished processing the streams, you should invoke
- * {@link org.apache.commons.net.bsd.RExecClient#disconnect disconnect() } to clean up properly.
+ * As with virtually all of the client classes in org.apache.commons.net, this
+ * class derives from SocketClient.  But it overrides most of its connection
+ * methods so that the local Socket will originate from an acceptable
+ * rshell port.  The way to use RCommandClient is to first connect
+ * to the server, call the {@link #rcommand  rcommand() } method,
+ * and then
+ * fetch the connection's input, output, and optionally error streams.
+ * Interaction with the remote command is controlled entirely through the
+ * I/O streams.  Once you have finished processing the streams, you should
+ * invoke {@link org.apache.commons.net.bsd.RExecClient#disconnect disconnect() }
+ *  to clean up properly.
@@ -49,7 +67,16 @@ import org.apache.commons.net.io.SocketInputStream;
- * By default the standard output and standard error streams of the remote process are transmitted over the same connection, readable from the input stream
- * returned by {@link org.apache.commons.net.bsd.RExecClient#getInputStream getInputStream() } . However, it is possible to tell the rshd daemon to return the
- * standard error stream over a separate connection, readable from the input stream returned by {@link org.apache.commons.net.bsd.RExecClient#getErrorStream
- * getErrorStream() } . You can specify that a separate connection should be created for standard error by setting the boolean
- * <code> separateErrorStream </code> parameter of {@link #rcommand rcommand() } to <code> true </code>. The standard input of the remote process can be written
- * to through the output stream returned by {@link org.apache.commons.net.bsd.RExecClient#getOutputStream getOutputStream() } .
- *
+ * By default the standard output and standard error streams of the
+ * remote process are transmitted over the same connection, readable
+ * from the input stream returned by
+ * {@link org.apache.commons.net.bsd.RExecClient#getInputStream getInputStream() }
+ * .  However, it is
+ * possible to tell the rshd daemon to return the standard error
+ * stream over a separate connection, readable from the input stream
+ * returned by {@link org.apache.commons.net.bsd.RExecClient#getErrorStream getErrorStream() }
+ * .  You
+ * can specify that a separate connection should be created for standard
+ * error by setting the boolean <code> separateErrorStream </code>
+ * parameter of {@link #rcommand  rcommand() } to <code> true </code>.
+ * The standard input of the remote process can be written to through
+ * the output stream returned by
+ * {@link org.apache.commons.net.bsd.RExecClient#getOutputStream getOutputStream() }
+ * .
@@ -61 +88,2 @@ import org.apache.commons.net.io.SocketInputStream;
-public class RCommandClient extends RExecClient {
+public class RCommandClient extends RExecClient
+{
@@ -63 +91 @@ public class RCommandClient extends RExecClient {
-     * The default rshell port. Set to 514 in BSD Unix.
+     * The default rshell port.  Set to 514 in BSD Unix.
@@ -68 +96,2 @@ public class RCommandClient extends RExecClient {
-     * The smallest port number an rcmd client may use. By BSD convention this number is 512.
+     * The smallest port number an rcmd client may use.  By BSD convention
+     * this number is 512.
@@ -73 +102,2 @@ public class RCommandClient extends RExecClient {
-     * The largest port number an rcmd client may use. By BSD convention this number is 1023.
+     * The largest port number an rcmd client may use.  By BSD convention
+     * this number is 1023.
@@ -78 +108,2 @@ public class RCommandClient extends RExecClient {
-     * The default RCommandClient constructor. Initializes the default port to <code> DEFAULT_PORT </code>.
+     * The default RCommandClient constructor.  Initializes the
+     * default port to <code> DEFAULT_PORT </code>.
@@ -80 +111,2 @@ public class RCommandClient extends RExecClient {
-    public RCommandClient() {
+    public RCommandClient()
+    {
@@ -85,3 +117,5 @@ public class RCommandClient extends RExecClient {
-     * Opens a Socket connected to a remote host at the specified port and originating from the current host at a port in a range acceptable to the BSD rshell
-     * daemon. Before returning, {@link org.apache.commons.net.SocketClient#_connectAction_ _connectAction_() } is called to perform connection initialization
-     * actions.
+     * Opens a Socket connected to a remote host at the specified port and
+     * originating from the current host at a port in a range acceptable
+     * to the BSD rshell daemon.
+     * Before returning, {@link org.apache.commons.net.SocketClient#_connectAction_  _connectAction_() }
+     * is called to perform connection initialization actions.
@@ -89,2 +123,2 @@ public class RCommandClient extends RExecClient {
-     * @param host The remote host.
-     * @param port The port to connect to on the remote host.
+     * @param host  The remote host.
+     * @param port  The port to connect to on the remote host.
@@ -92,3 +126,4 @@ public class RCommandClient extends RExecClient {
-     * @throws BindException   If all acceptable rshell ports are in use.
-     * @throws IOException     If the socket could not be opened. In most cases you will only want to catch IOException since SocketException is derived from
-     *                         it.
+     * @throws BindException If all acceptable rshell ports are in use.
+     * @throws IOException If the socket could not be opened.  In most
+     *  cases you will only want to catch IOException since SocketException is
+     *  derived from it.
@@ -97 +132,3 @@ public class RCommandClient extends RExecClient {
-    public void connect(final InetAddress host, final int port) throws SocketException, IOException {
+    public void connect(final InetAddress host, final int port)
+    throws SocketException, IOException
+    {
@@ -100,0 +138 @@ public class RCommandClient extends RExecClient {
+
@@ -102,3 +140,5 @@ public class RCommandClient extends RExecClient {
-     * Opens a Socket connected to a remote host at the specified port and originating from the specified local address using a port in a range acceptable to
-     * the BSD rshell daemon. Before returning, {@link org.apache.commons.net.SocketClient#_connectAction_ _connectAction_() } is called to perform connection
-     * initialization actions.
+     * Opens a Socket connected to a remote host at the specified port and
+     * originating from the specified local address using a port in a range
+     * acceptable to the BSD rshell daemon.
+     * Before returning, {@link org.apache.commons.net.SocketClient#_connectAction_  _connectAction_() }
+     * is called to perform connection initialization actions.
@@ -106,3 +146,3 @@ public class RCommandClient extends RExecClient {
-     * @param host      The remote host.
-     * @param port      The port to connect to on the remote host.
-     * @param localAddr The local address to use.
+     * @param host  The remote host.
+     * @param port  The port to connect to on the remote host.
+     * @param localAddr  The local address to use.
@@ -110,3 +150,4 @@ public class RCommandClient extends RExecClient {
-     * @throws BindException   If all acceptable rshell ports are in use.
-     * @throws IOException     If the socket could not be opened. In most cases you will only want to catch IOException since SocketException is derived from
-     *                         it.
+     * @throws BindException If all acceptable rshell ports are in use.
+     * @throws IOException If the socket could not be opened.  In most
+     *  cases you will only want to catch IOException since SocketException is
+     *  derived from it.
@@ -114 +155,3 @@ public class RCommandClient extends RExecClient {
-    public void connect(final InetAddress host, final int port, final InetAddress localAddr) throws SocketException, BindException, IOException {
+    public void connect(final InetAddress host, final int port, final InetAddress localAddr)
+    throws SocketException, BindException, IOException
+    {
@@ -119,4 +162,9 @@ public class RCommandClient extends RExecClient {
-        for (localPort = MAX_CLIENT_PORT; localPort >= MIN_CLIENT_PORT; --localPort) {
-            try {
-                _socket_ = _socketFactory_.createSocket(host, port, localAddr, localPort);
-            } catch (final SocketException e) {
+        for (localPort = MAX_CLIENT_PORT; localPort >= MIN_CLIENT_PORT; --localPort)
+        {
+            try
+            {
+                _socket_ =
+                    _socketFactory_.createSocket(host, port, localAddr, localPort);
+            }
+            catch (final SocketException e)
+            {
@@ -134,0 +183,2 @@ public class RCommandClient extends RExecClient {
+
+
@@ -136,3 +186,7 @@ public class RCommandClient extends RExecClient {
-     * Opens a Socket connected to a remote host at the specified port and originating from the specified local address and port. The local port must lie
-     * between <code> MIN_CLIENT_PORT </code> and <code> MAX_CLIENT_PORT </code> or an IllegalArgumentException will be thrown. Before returning,
-     * {@link org.apache.commons.net.SocketClient#_connectAction_ _connectAction_() } is called to perform connection initialization actions.
+     * Opens a Socket connected to a remote host at the specified port and
+     * originating from the specified local address and port. The
+     * local port must lie between <code> MIN_CLIENT_PORT </code> and
+     * <code> MAX_CLIENT_PORT </code> or an IllegalArgumentException will
+     * be thrown.
+     * Before returning, {@link org.apache.commons.net.SocketClient#_connectAction_  _connectAction_() }
+     * is called to perform connection initialization actions.
@@ -140,8 +194,10 @@ public class RCommandClient extends RExecClient {
-     * @param host      The remote host.
-     * @param port      The port to connect to on the remote host.
-     * @param localAddr The local address to use.
-     * @param localPort The local port to use.
-     * @throws SocketException          If the socket timeout could not be set.
-     * @throws IOException              If the socket could not be opened. In most cases you will only want to catch IOException since SocketException is
-     *                                  derived from it.
-     * @throws IllegalArgumentException If an invalid local port number is specified.
+     * @param host  The remote host.
+     * @param port  The port to connect to on the remote host.
+     * @param localAddr  The local address to use.
+     * @param localPort  The local port to use.
+     * @throws SocketException If the socket timeout could not be set.
+     * @throws IOException If the socket could not be opened.  In most
+     *  cases you will only want to catch IOException since SocketException is
+     *  derived from it.
+     * @throws IllegalArgumentException If an invalid local port number
+     *            is specified.
@@ -150,2 +206,4 @@ public class RCommandClient extends RExecClient {
-    public void connect(final InetAddress host, final int port, final InetAddress localAddr, final int localPort)
-            throws SocketException, IOException, IllegalArgumentException {
+    public void connect(final InetAddress host, final int port,
+                        final InetAddress localAddr, final int localPort)
+    throws SocketException, IOException, IllegalArgumentException
+    {
@@ -157,0 +216 @@ public class RCommandClient extends RExecClient {
+
@@ -159,3 +218,5 @@ public class RCommandClient extends RExecClient {
-     * Opens a Socket connected to a remote host at the specified port and originating from the current host at a port in a range acceptable to the BSD rshell
-     * daemon. Before returning, {@link org.apache.commons.net.SocketClient#_connectAction_ _connectAction_() } is called to perform connection initialization
-     * actions.
+     * Opens a Socket connected to a remote host at the specified port and
+     * originating from the current host at a port in a range acceptable
+     * to the BSD rshell daemon.
+     * Before returning, {@link org.apache.commons.net.SocketClient#_connectAction_  _connectAction_() }
+     * is called to perform connection initialization actions.
@@ -163,6 +224,7 @@ public class RCommandClient extends RExecClient {
-     * @param hostname The name of the remote host.
-     * @param port     The port to connect to on the remote host.
-     * @throws SocketException      If the socket timeout could not be set.
-     * @throws BindException        If all acceptable rshell ports are in use.
-     * @throws IOException          If the socket could not be opened. In most cases you will only want to catch IOException since SocketException is derived
-     *                              from it.
+     * @param hostname  The name of the remote host.
+     * @param port  The port to connect to on the remote host.
+     * @throws SocketException If the socket timeout could not be set.
+     * @throws BindException If all acceptable rshell ports are in use.
+     * @throws IOException If the socket could not be opened.  In most
+     *  cases you will only want to catch IOException since SocketException is
+     *  derived from it.
@@ -172 +234,3 @@ public class RCommandClient extends RExecClient {
-    public void connect(final String hostname, final int port) throws SocketException, IOException, UnknownHostException {
+    public void connect(final String hostname, final int port)
+    throws SocketException, IOException, UnknownHostException
+    {
@@ -175,0 +240 @@ public class RCommandClient extends RExecClient {
+
@@ -177,3 +242,5 @@ public class RCommandClient extends RExecClient {
-     * Opens a Socket connected to a remote host at the specified port and originating from the specified local address using a port in a range acceptable to
-     * the BSD rshell daemon. Before returning, {@link org.apache.commons.net.SocketClient#_connectAction_ _connectAction_() } is called to perform connection
-     * initialization actions.
+     * Opens a Socket connected to a remote host at the specified port and
+     * originating from the specified local address using a port in a range
+     * acceptable to the BSD rshell daemon.
+     * Before returning, {@link org.apache.commons.net.SocketClient#_connectAction_  _connectAction_() }
+     * is called to perform connection initialization actions.
@@ -182,2 +249,2 @@ public class RCommandClient extends RExecClient {
-     * @param port      The port to connect to on the remote host.
-     * @param localAddr The local address to use.
+     * @param port  The port to connect to on the remote host.
+     * @param localAddr  The local address to use.
@@ -185,3 +252,4 @@ public class RCommandClient extends RExecClient {
-     * @throws BindException   If all acceptable rshell ports are in use.
-     * @throws IOException     If the socket could not be opened. In most cases you will only want to catch IOException since SocketException is derived from
-     *                         it.
+     * @throws BindException If all acceptable rshell ports are in use.
+     * @throws IOException If the socket could not be opened.  In most
+     *  cases you will only want to catch IOException since SocketException is
+     *  derived from it.
@@ -189 +257,3 @@ public class RCommandClient extends RExecClient {
-    public void connect(final String hostname, final int port, final InetAddress localAddr) throws SocketException, IOException {
+    public void connect(final String hostname, final int port, final InetAddress localAddr)
+    throws SocketException, IOException
+    {
@@ -192,0 +263 @@ public class RCommandClient extends RExecClient {
+
@@ -194,3 +265,7 @@ public class RCommandClient extends RExecClient {
-     * Opens a Socket connected to a remote host at the specified port and originating from the specified local address and port. The local port must lie
-     * between <code> MIN_CLIENT_PORT </code> and <code> MAX_CLIENT_PORT </code> or an IllegalArgumentException will be thrown. Before returning,
-     * {@link org.apache.commons.net.SocketClient#_connectAction_ _connectAction_() } is called to perform connection initialization actions.
+     * Opens a Socket connected to a remote host at the specified port and
+     * originating from the specified local address and port. The
+     * local port must lie between <code> MIN_CLIENT_PORT </code> and
+     * <code> MAX_CLIENT_PORT </code> or an IllegalArgumentException will
+     * be thrown.
+     * Before returning, {@link org.apache.commons.net.SocketClient#_connectAction_  _connectAction_() }
+     * is called to perform connection initialization actions.
@@ -199,8 +274,10 @@ public class RCommandClient extends RExecClient {
-     * @param port      The port to connect to on the remote host.
-     * @param localAddr The local address to use.
-     * @param localPort The local port to use.
-     * @throws SocketException          If the socket timeout could not be set.
-     * @throws IOException              If the socket could not be opened. In most cases you will only want to catch IOException since SocketException is
-     *                                  derived from it.
-     * @throws UnknownHostException     If the hostname cannot be resolved.
-     * @throws IllegalArgumentException If an invalid local port number is specified.
+     * @param port  The port to connect to on the remote host.
+     * @param localAddr  The local address to use.
+     * @param localPort  The local port to use.
+     * @throws SocketException If the socket timeout could not be set.
+     * @throws IOException If the socket could not be opened.  In most
+     *  cases you will only want to catch IOException since SocketException is
+     *  derived from it.
+     * @throws UnknownHostException If the hostname cannot be resolved.
+     * @throws IllegalArgumentException If an invalid local port number
+     *            is specified.
@@ -209,2 +286,4 @@ public class RCommandClient extends RExecClient {
-    public void connect(final String hostname, final int port, final InetAddress localAddr, final int localPort)
-            throws SocketException, IOException, IllegalArgumentException, UnknownHostException {
+    public void connect(final String hostname, final int port,
+                        final InetAddress localAddr, final int localPort)
+    throws SocketException, IOException, IllegalArgumentException, UnknownHostException
+    {
@@ -216,0 +296 @@ public class RCommandClient extends RExecClient {
+
@@ -220 +300,2 @@ public class RCommandClient extends RExecClient {
-    InputStream createErrorStream() throws IOException {
+    InputStream createErrorStream() throws IOException
+    {
@@ -228,3 +309,6 @@ public class RCommandClient extends RExecClient {
-        for (localPort = MAX_CLIENT_PORT; localPort >= MIN_CLIENT_PORT; --localPort) {
-            try {
-                server = _serverSocketFactory_.createServerSocket(localPort, 1, getLocalAddress());
+        for (localPort = MAX_CLIENT_PORT; localPort >= MIN_CLIENT_PORT; --localPort)
+        {
+            try
+            {
+                server = _serverSocketFactory_.createServerSocket(localPort, 1,
+                         getLocalAddress());
@@ -232 +316,3 @@ public class RCommandClient extends RExecClient {
-            } catch (final SocketException e) {
+            }
+            catch (final SocketException e)
+            {
@@ -248 +334,2 @@ public class RCommandClient extends RExecClient {
-        if (isRemoteVerificationEnabled() && !verifyRemote(socket)) {
+        if (isRemoteVerificationEnabled() && !verifyRemote(socket))
+        {
@@ -250 +337,3 @@ public class RCommandClient extends RExecClient {
-            throw new IOException("Security violation: unexpected connection attempt by " + socket.getInetAddress().getHostAddress());
+            throw new IOException(
+                "Security violation: unexpected connection attempt by " +
+                socket.getInetAddress().getHostAddress());
@@ -255,0 +345 @@ public class RCommandClient extends RExecClient {
+
@@ -257,3 +347,3 @@ public class RCommandClient extends RExecClient {
-     * Same as <code> rcommand(localUsername, remoteUsername, command, false); </code>
-     *
-     * @param localUsername  the local user
+     * Same as
+     * <code> rcommand(localUsername, remoteUsername, command, false); </code>
+     * @param localUsername the local user
@@ -261 +351 @@ public class RCommandClient extends RExecClient {
-     * @param command        the command
+     * @param command the command
@@ -264 +354,4 @@ public class RCommandClient extends RExecClient {
-    public void rcommand(final String localUsername, final String remoteUsername, final String command) throws IOException {
+    public void rcommand(final String localUsername, final String remoteUsername,
+                         final String command)
+    throws IOException
+    {
@@ -267,0 +361 @@ public class RCommandClient extends RExecClient {
+
@@ -269,4 +363,9 @@ public class RCommandClient extends RExecClient {
-     * Remotely executes a command through the rshd daemon on the server to which the RCommandClient is connected. After calling this method, you may interact
-     * with the remote process through its standard input, output, and error streams. You will typically be able to detect the termination of the remote process
-     * after reaching end of file on its standard output (accessible through {@link #getInputStream getInputStream() }. Disconnecting from the server or closing
-     * the process streams before reaching end of file will not necessarily terminate the remote process.
+     * Remotely executes a command through the rshd daemon on the server
+     * to which the RCommandClient is connected.  After calling this method,
+     * you may interact with the remote process through its standard input,
+     * output, and error streams.  You will typically be able to detect
+     * the termination of the remote process after reaching end of file
+     * on its standard output (accessible through
+     * {@link #getInputStream  getInputStream() }.  Disconnecting
+     * from the server or closing the process streams before reaching
+     * end of file will not necessarily terminate the remote process.
@@ -274,6 +373,13 @@ public class RCommandClient extends RExecClient {
-     * If a separate error stream is requested, the remote server will connect to a local socket opened by RCommandClient, providing an independent stream
-     * through which standard error will be transmitted. The local socket must originate from a secure port (512 - 1023), and rcommand() ensures that this will
-     * be so. RCommandClient will also do a simple security check when it accepts a connection for this error stream. If the connection does not originate from
-     * the remote server, an IOException will be thrown. This serves as a simple protection against possible hijacking of the error stream by an attacker
-     * monitoring the rexec() negotiation. You may disable this behavior with {@link org.apache.commons.net.bsd.RExecClient#setRemoteVerificationEnabled
-     * setRemoteVerificationEnabled()} .
+     * If a separate error stream is requested, the remote server will
+     * connect to a local socket opened by RCommandClient, providing an
+     * independent stream through which standard error will be transmitted.
+     * The local socket must originate from a secure port (512 - 1023),
+     * and rcommand() ensures that this will be so.
+     * RCommandClient will also do a simple security check when it accepts a
+     * connection for this error stream.  If the connection does not originate
+     * from the remote server, an IOException will be thrown.  This serves as
+     * a simple protection against possible hijacking of the error stream by
+     * an attacker monitoring the rexec() negotiation.  You may disable this
+     * behavior with
+     * {@link org.apache.commons.net.bsd.RExecClient#setRemoteVerificationEnabled setRemoteVerificationEnabled()}
+     * .
@@ -281,6 +387,10 @@ public class RCommandClient extends RExecClient {
-     *
-     * @param localUsername       The user account on the local machine that is requesting the command execution.
-     * @param remoteUsername      The account name on the server through which to execute the command.
-     * @param command             The command, including any arguments, to execute.
-     * @param separateErrorStream True if you would like the standard error to be transmitted through a different stream than standard output. False if not.
-     * @throws IOException If the rcommand() attempt fails. The exception will contain a message indicating the nature of the failure.
+     * @param localUsername  The user account on the local machine that is
+     *        requesting the command execution.
+     * @param remoteUsername  The account name on the server through which to
+     *        execute the command.
+     * @param command   The command, including any arguments, to execute.
+     * @param separateErrorStream True if you would like the standard error
+     *        to be transmitted through a different stream than standard output.
+     *        False if not.
+     * @throws IOException If the rcommand() attempt fails.  The exception
+     *            will contain a message indicating the nature of the failure.
@@ -288 +398,4 @@ public class RCommandClient extends RExecClient {
-    public void rcommand(final String localUsername, final String remoteUsername, final String command, final boolean separateErrorStream) throws IOException {
+    public void rcommand(final String localUsername, final String remoteUsername,
+                         final String command, final boolean separateErrorStream)
+    throws IOException
+    {
@@ -292,0 +406 @@ public class RCommandClient extends RExecClient {
+
diff --git a/src/main/java/org/apache/commons/net/bsd/RExecClient.java b/src/main/java/org/apache/commons/net/bsd/RExecClient.java
index 1c8ce9309..c099f21c0 100644
--- a/src/main/java/org/apache/commons/net/bsd/RExecClient.java
+++ b/src/main/java/org/apache/commons/net/bsd/RExecClient.java
@@ -32,3 +32,6 @@ import org.apache.commons.net.util.NetConstants;
- * RExecClient implements the rexec() facility that first appeared in 4.2BSD Unix. This class will probably only be of use for connecting to Unix systems and
- * only when the rexecd daemon is configured to run, which is a rarity these days because of the security risks involved. However, rexec() can be very useful
- * for performing administrative tasks on a network behind a firewall.
+ * RExecClient implements the rexec() facility that first appeared in
+ * 4.2BSD Unix.  This class will probably only be of use for connecting
+ * to Unix systems and only when the rexecd daemon is configured to run,
+ * which is a rarity these days because of the security risks involved.
+ * However, rexec() can be very useful for performing administrative tasks
+ * on a network behind a firewall.
@@ -36,4 +39,8 @@ import org.apache.commons.net.util.NetConstants;
- * As with virtually all of the client classes in org.apache.commons.net, this class derives from SocketClient, inheriting its connection methods. The way to
- * use RExecClient is to first connect to the server, call the {@link #rexec rexec()} method, and then fetch the connection's input, output, and optionally
- * error streams. Interaction with the remote command is controlled entirely through the I/O streams. Once you have finished processing the streams, you should
- * invoke {@link #disconnect disconnect()} to clean up properly.
+ * As with virtually all of the client classes in org.apache.commons.net, this
+ * class derives from SocketClient, inheriting its connection methods.
+ * The way to use RExecClient is to first connect
+ * to the server, call the {@link #rexec  rexec()} method, and then
+ * fetch the connection's input, output, and optionally error streams.
+ * Interaction with the remote command is controlled entirely through the
+ * I/O streams.  Once you have finished processing the streams, you should
+ * invoke {@link #disconnect  disconnect()} to clean up properly.
@@ -41,5 +48,13 @@ import org.apache.commons.net.util.NetConstants;
- * By default the standard output and standard error streams of the remote process are transmitted over the same connection, readable from the input stream
- * returned by {@link #getInputStream getInputStream()}. However, it is possible to tell the rexecd daemon to return the standard error stream over a separate
- * connection, readable from the input stream returned by {@link #getErrorStream getErrorStream()}. You can specify that a separate connection should be created
- * for standard error by setting the boolean <code> separateErrorStream </code> parameter of {@link #rexec rexec()} to <code> true </code>. The standard input
- * of the remote process can be written to through the output stream returned by {@link #getOutputStream getOutputSream()}.
+ * By default the standard output and standard error streams of the
+ * remote process are transmitted over the same connection, readable
+ * from the input stream returned by
+ * {@link #getInputStream  getInputStream()}.  However, it is
+ * possible to tell the rexecd daemon to return the standard error
+ * stream over a separate connection, readable from the input stream
+ * returned by {@link #getErrorStream  getErrorStream()}.  You
+ * can specify that a separate connection should be created for standard
+ * error by setting the boolean <code> separateErrorStream </code>
+ * parameter of {@link #rexec  rexec()} to <code> true </code>.
+ * The standard input of the remote process can be written to through
+ * the output stream returned by
+ * {@link #getOutputStream  getOutputSream()}.
@@ -52 +67,2 @@ import org.apache.commons.net.util.NetConstants;
-public class RExecClient extends SocketClient {
+public class RExecClient extends SocketClient
+{
@@ -59 +75 @@ public class RExecClient extends SocketClient {
-     * The default rexec port. Set to 512 in BSD Unix.
+     * The default rexec port.  Set to 512 in BSD Unix.
@@ -66,2 +82,4 @@ public class RExecClient extends SocketClient {
-     * If a separate error stream is requested, <code>_errorStream_</code> will point to an InputStream from which the standard error of the remote process can
-     * be read (after a call to rexec()). Otherwise, <code> _errorStream_ </code> will be null.
+     * If a separate error stream is requested, <code>_errorStream_</code>
+     * will point to an InputStream from which the standard error of the
+     * remote process can be read (after a call to rexec()).  Otherwise,
+     * <code> _errorStream_ </code> will be null.
@@ -72 +90,2 @@ public class RExecClient extends SocketClient {
-     * The default RExecClient constructor. Initializes the default port to <code> DEFAULT_PORT </code>.
+     * The default RExecClient constructor.  Initializes the
+     * default port to <code> DEFAULT_PORT </code>.
@@ -74 +93,2 @@ public class RExecClient extends SocketClient {
-    public RExecClient() {
+    public RExecClient()
+    {
@@ -78,0 +99 @@ public class RExecClient extends SocketClient {
+
@@ -81 +102,2 @@ public class RExecClient extends SocketClient {
-    InputStream createErrorStream() throws IOException {
+    InputStream createErrorStream() throws IOException
+    {
@@ -94 +116,2 @@ public class RExecClient extends SocketClient {
-        if (remoteVerificationEnabled && !verifyRemote(socket)) {
+        if (remoteVerificationEnabled && !verifyRemote(socket))
+        {
@@ -96 +119,3 @@ public class RExecClient extends SocketClient {
-            throw new IOException("Security violation: unexpected connection attempt by " + socket.getInetAddress().getHostAddress());
+            throw new IOException(
+                "Security violation: unexpected connection attempt by " +
+                socket.getInetAddress().getHostAddress());
@@ -101,0 +127 @@ public class RExecClient extends SocketClient {
+
@@ -103 +129,2 @@ public class RExecClient extends SocketClient {
-     * Disconnects from the server, closing all associated open sockets and streams.
+     * Disconnects from the server, closing all associated open sockets and
+     * streams.
@@ -108 +135,2 @@ public class RExecClient extends SocketClient {
-    public void disconnect() throws IOException {
+    public void disconnect() throws IOException
+    {
@@ -115,0 +144 @@ public class RExecClient extends SocketClient {
+
@@ -117,2 +146,4 @@ public class RExecClient extends SocketClient {
-     * Returns the InputStream from which the standard error of the remote process can be read if a separate error stream is requested from the server.
-     * Otherwise, null will be returned. The error stream will only be set after a successful rexec() invocation.
+     * Returns the InputStream from which the standard error of the remote
+     * process can be read if a separate error stream is requested from
+     * the server.  Otherwise, null will be returned.  The error stream
+     * will only be set after a successful rexec() invocation.
@@ -120,2 +151,3 @@ public class RExecClient extends SocketClient {
-     * @return The InputStream from which the standard error of the remote process can be read if a separate error stream is requested from the server.
-     *         Otherwise, null will be returned.
+     * @return The InputStream from which the standard error of the remote
+     * process can be read if a separate error stream is requested from
+     * the server.  Otherwise, null will be returned.
@@ -123 +155,2 @@ public class RExecClient extends SocketClient {
-    public InputStream getErrorStream() {
+    public InputStream getErrorStream()
+    {
@@ -126,0 +160 @@ public class RExecClient extends SocketClient {
+
@@ -128,2 +162,3 @@ public class RExecClient extends SocketClient {
-     * Returns the InputStream from which the standard output of the remote process can be read. The input stream will only be set after a successful rexec()
-     * invocation.
+     * Returns the InputStream from which the standard output of the remote
+     * process can be read.  The input stream will only be set after a
+     * successful rexec() invocation.
@@ -131 +166,2 @@ public class RExecClient extends SocketClient {
-     * @return The InputStream from which the standard output of the remote process can be read.
+     * @return The InputStream from which the standard output of the remote
+     * process can be read.
@@ -133 +169,2 @@ public class RExecClient extends SocketClient {
-    public InputStream getInputStream() {
+    public InputStream getInputStream()
+    {
@@ -136,0 +174 @@ public class RExecClient extends SocketClient {
+
@@ -138,2 +176,3 @@ public class RExecClient extends SocketClient {
-     * Returns the OutputStream through which the standard input of the remote process can be written. The output stream will only be set after a successful
-     * rexec() invocation.
+     * Returns the OutputStream through which the standard input of the remote
+     * process can be written.  The output stream will only be set after a
+     * successful rexec() invocation.
@@ -141 +180,2 @@ public class RExecClient extends SocketClient {
-     * @return The OutputStream through which the standard input of the remote process can be written.
+     * @return The OutputStream through which the standard input of the remote
+     * process can be written.
@@ -143 +183,2 @@ public class RExecClient extends SocketClient {
-    public OutputStream getOutputStream() {
+    public OutputStream getOutputStream()
+    {
@@ -146,0 +188 @@ public class RExecClient extends SocketClient {
+
@@ -148,2 +190,3 @@ public class RExecClient extends SocketClient {
-     * Return whether or not verification of the remote host providing a separate error stream is enabled. The default behavior is for verification to be
-     * enabled.
+     * Return whether or not verification of the remote host providing a
+     * separate error stream is enabled.  The default behavior is for
+     * verification to be enabled.
@@ -153 +196,2 @@ public class RExecClient extends SocketClient {
-    public final boolean isRemoteVerificationEnabled() {
+    public final boolean isRemoteVerificationEnabled()
+    {
@@ -159 +202,0 @@ public class RExecClient extends SocketClient {
-     *
@@ -162 +205 @@ public class RExecClient extends SocketClient {
-     * @param command  the command to run
+     * @param command the command to run
@@ -165 +208,4 @@ public class RExecClient extends SocketClient {
-    public void rexec(final String username, final String password, final String command) throws IOException {
+    public void rexec(final String username, final String password,
+                      final String command)
+    throws IOException
+    {
@@ -168,0 +215 @@ public class RExecClient extends SocketClient {
+
@@ -170,4 +217,9 @@ public class RExecClient extends SocketClient {
-     * Remotely executes a command through the rexecd daemon on the server to which the RExecClient is connected. After calling this method, you may interact
-     * with the remote process through its standard input, output, and error streams. You will typically be able to detect the termination of the remote process
-     * after reaching end of file on its standard output (accessible through {@link #getInputStream getInputStream() }. Disconnecting from the server or closing
-     * the process streams before reaching end of file will not necessarily terminate the remote process.
+     * Remotely executes a command through the rexecd daemon on the server
+     * to which the RExecClient is connected.  After calling this method,
+     * you may interact with the remote process through its standard input,
+     * output, and error streams.  You will typically be able to detect
+     * the termination of the remote process after reaching end of file
+     * on its standard output (accessible through
+     * {@link #getInputStream  getInputStream() }.    Disconnecting
+     * from the server or closing the process streams before reaching
+     * end of file will not necessarily terminate the remote process.
@@ -175,5 +227,10 @@ public class RExecClient extends SocketClient {
-     * If a separate error stream is requested, the remote server will connect to a local socket opened by RExecClient, providing an independent stream through
-     * which standard error will be transmitted. RExecClient will do a simple security check when it accepts a connection for this error stream. If the
-     * connection does not originate from the remote server, an IOException will be thrown. This serves as a simple protection against possible hijacking of the
-     * error stream by an attacker monitoring the rexec() negotiation. You may disable this behavior with {@link #setRemoteVerificationEnabled
-     * setRemoteVerificationEnabled()} .
+     * If a separate error stream is requested, the remote server will
+     * connect to a local socket opened by RExecClient, providing an
+     * independent stream through which standard error will be transmitted.
+     * RExecClient will do a simple security check when it accepts a
+     * connection for this error stream.  If the connection does not originate
+     * from the remote server, an IOException will be thrown.  This serves as
+     * a simple protection against possible hijacking of the error stream by
+     * an attacker monitoring the rexec() negotiation.  You may disable this
+     * behavior with {@link #setRemoteVerificationEnabled setRemoteVerificationEnabled()}
+     * .
@@ -181,5 +238,9 @@ public class RExecClient extends SocketClient {
-     * @param username            The account name on the server through which to execute the command.
-     * @param password            The plain text password of the user account.
-     * @param command             The command, including any arguments, to execute.
-     * @param separateErrorStream True if you would like the standard error to be transmitted through a different stream than standard output. False if not.
-     * @throws IOException If the rexec() attempt fails. The exception will contain a message indicating the nature of the failure.
+     * @param username  The account name on the server through which to execute
+     *                  the command.
+     * @param password  The plain text password of the user account.
+     * @param command   The command, including any arguments, to execute.
+     * @param separateErrorStream True if you would like the standard error
+     *        to be transmitted through a different stream than standard output.
+     *        False if not.
+     * @throws IOException If the rexec() attempt fails.  The exception
+     *            will contain a message indicating the nature of the failure.
@@ -187 +248,4 @@ public class RExecClient extends SocketClient {
-    public void rexec(final String username, final String password, final String command, final boolean separateErrorStream) throws IOException {
+    public void rexec(final String username, final String password,
+                      final String command, final boolean separateErrorStream)
+    throws IOException
+    {
@@ -190 +254,2 @@ public class RExecClient extends SocketClient {
-        if (separateErrorStream) {
+        if (separateErrorStream)
+        {
@@ -192 +257,3 @@ public class RExecClient extends SocketClient {
-        } else {
+        }
+        else
+        {
@@ -209 +276 @@ public class RExecClient extends SocketClient {
-                buffer.append((char) ch);
+                buffer.append((char)ch);
@@ -220,2 +287,5 @@ public class RExecClient extends SocketClient {
-     * Enable or disable verification that the remote host connecting to create a separate error stream is the same as the host to which the standard out stream
-     * is connected. The default is for verification to be enabled. You may set this value at any time, whether the client is currently connected or not.
+     * Enable or disable verification that the remote host connecting to
+     * create a separate error stream is the same as the host to which
+     * the standard out stream is connected.  The default is for verification
+     * to be enabled.  You may set this value at any time, whether the
+     * client is currently connected or not.
@@ -225 +295,2 @@ public class RExecClient extends SocketClient {
-    public final void setRemoteVerificationEnabled(final boolean enable) {
+    public final void setRemoteVerificationEnabled(final boolean enable)
+    {
@@ -229,0 +301 @@ public class RExecClient extends SocketClient {
+
diff --git a/src/main/java/org/apache/commons/net/bsd/RLoginClient.java b/src/main/java/org/apache/commons/net/bsd/RLoginClient.java
index 8bcb57cf6..f7aa6ed15 100644
--- a/src/main/java/org/apache/commons/net/bsd/RLoginClient.java
+++ b/src/main/java/org/apache/commons/net/bsd/RLoginClient.java
@@ -23,3 +23,8 @@ import java.io.IOException;
- * RLoginClient is very similar to {@link org.apache.commons.net.bsd.RCommandClient}, from which it is derived, and uses the rcmd() facility implemented in
- * RCommandClient to implement the functionality of the rlogin command that first appeared in 4.2BSD Unix. rlogin is a command used to login to a remote machine
- * from a trusted host, sometimes without issuing a password. The trust relationship is the same as described in the documentation for
+ * RLoginClient is very similar to
+ * {@link org.apache.commons.net.bsd.RCommandClient},
+ * from which it is derived, and uses the rcmd() facility implemented
+ * in RCommandClient to implement the functionality of the rlogin command that
+ * first appeared in 4.2BSD Unix.  rlogin is a command used to login to
+ * a remote machine from a trusted host, sometimes without issuing a
+ * password.  The trust relationship is the same as described in
+ * the documentation for
@@ -28,5 +33,12 @@ import java.io.IOException;
- * As with virtually all of the client classes in org.apache.commons.net, this class derives from SocketClient. But it relies on the connection methods defined
- * in RcommandClient which ensure that the local Socket will originate from an acceptable rshell port. The way to use RLoginClient is to first connect to the
- * server, call the {@link #rlogin rlogin() } method, and then fetch the connection's input and output streams. Interaction with the remote command is
- * controlled entirely through the I/O streams. Once you have finished processing the streams, you should invoke
- * {@link org.apache.commons.net.bsd.RExecClient#disconnect disconnect() } to clean up properly.
+ * As with virtually all of the client classes in org.apache.commons.net, this
+ * class derives from SocketClient.  But it relies on the connection
+ * methods defined  in RcommandClient which ensure that the local Socket
+ * will originate from an acceptable rshell port.  The way to use
+ * RLoginClient is to first connect
+ * to the server, call the {@link #rlogin  rlogin() } method,
+ * and then
+ * fetch the connection's input and output streams.
+ * Interaction with the remote command is controlled entirely through the
+ * I/O streams.  Once you have finished processing the streams, you should
+ * invoke {@link org.apache.commons.net.bsd.RExecClient#disconnect disconnect() }
+ *  to clean up properly.
@@ -34 +46,3 @@ import java.io.IOException;
- * The standard output and standard error streams of the remote process are transmitted over the same connection, readable from the input stream returned by
+ * The standard output and standard error streams of the
+ * remote process are transmitted over the same connection, readable
+ * from the input stream returned by
@@ -37,3 +51,8 @@ import java.io.IOException;
- * Unlike RExecClient and RCommandClient, it is not possible to tell the rlogind daemon to return the standard error stream over a separate connection.
- * {@link org.apache.commons.net.bsd.RExecClient#getErrorStream getErrorStream() } will always return null. The standard input of the remote process can be
- * written to through the output stream returned by {@link org.apache.commons.net.bsd.RExecClient#getOutputStream getOutputSream() }
+ * Unlike RExecClient and RCommandClient, it is
+ * not possible to tell the rlogind daemon to return the standard error
+ * stream over a separate connection.
+ * {@link org.apache.commons.net.bsd.RExecClient#getErrorStream getErrorStream() }
+ *  will always return null.
+ * The standard input of the remote process can be written to through
+ * the output stream returned by
+ * {@link org.apache.commons.net.bsd.RExecClient#getOutputStream getOutputSream() }
@@ -46 +65,2 @@ import java.io.IOException;
-public class RLoginClient extends RCommandClient {
+public class RLoginClient extends RCommandClient
+{
@@ -48 +68,2 @@ public class RLoginClient extends RCommandClient {
-     * The default rlogin port. Set to 513 in BSD Unix and according to RFC 1282.
+     * The default rlogin port.  Set to 513 in BSD Unix and according
+     * to RFC 1282.
@@ -53 +74,2 @@ public class RLoginClient extends RCommandClient {
-     * The default RLoginClient constructor. Initializes the default port to <code> DEFAULT_PORT </code>.
+     * The default RLoginClient constructor.  Initializes the
+     * default port to <code> DEFAULT_PORT </code>.
@@ -55 +77,2 @@ public class RLoginClient extends RCommandClient {
-    public RLoginClient() {
+    public RLoginClient()
+    {
@@ -58,0 +82 @@ public class RLoginClient extends RCommandClient {
+
@@ -61,2 +85 @@ public class RLoginClient extends RCommandClient {
-     *
-     * @param localUsername  the local user
+     * @param localUsername the local user
@@ -64 +87 @@ public class RLoginClient extends RCommandClient {
-     * @param terminalType   the terminal type
+     * @param terminalType the terminal type
@@ -67 +90,4 @@ public class RLoginClient extends RCommandClient {
-    public void rlogin(final String localUsername, final String remoteUsername, final String terminalType) throws IOException {
+    public void rlogin(final String localUsername, final String remoteUsername,
+                       final String terminalType)
+    throws IOException
+    {
@@ -72,5 +98,10 @@ public class RLoginClient extends RCommandClient {
-     * Logins into a remote machine through the rlogind daemon on the server to which the RLoginClient is connected. After calling this method, you may interact
-     * with the remote login shell through its standard input and output streams. Standard error is sent over the same stream as standard output. You will
-     * typically be able to detect the termination of the remote login shell after reaching end of file on its standard output (accessible through
-     * {@link #getInputStream getInputStream() }. Disconnecting from the server or closing the process streams before reaching end of file will terminate the
-     * remote login shell in most cases.
+     * Logins into a remote machine through the rlogind daemon on the server
+     * to which the RLoginClient is connected.  After calling this method,
+     * you may interact with the remote login shell through its standard input
+     * and output streams.  Standard error is sent over the same stream as
+     * standard output.  You will typically be able to detect
+     * the termination of the remote login shell after reaching end of file
+     * on its standard output (accessible through
+     * {@link #getInputStream  getInputStream() }.  Disconnecting
+     * from the server or closing the process streams before reaching
+     * end of file will terminate the remote login shell in most cases.
@@ -78,2 +109,4 @@ public class RLoginClient extends RCommandClient {
-     * If user authentication fails, the rlogind daemon will request that a password be entered interactively. You will be able to read the prompt from the
-     * output stream of the RLoginClient and write the password to the input stream of the RLoginClient.
+     * If user authentication fails, the rlogind daemon will request that
+     * a password be entered interactively.  You will be able to read the
+     * prompt from the output stream of the RLoginClient and write the
+     * password to the input stream of the RLoginClient.
@@ -81,5 +114,10 @@ public class RLoginClient extends RCommandClient {
-     * @param localUsername  The user account on the local machine that is trying to login to the remote host.
-     * @param remoteUsername The account name on the server that is being logged in to.
-     * @param terminalType   The name of the user's terminal (e.g., "vt100", "network", etc.)
-     * @param terminalSpeed  The speed of the user's terminal, expressed as a baud rate or bps (e.g., 9600 or 38400)
-     * @throws IOException If the rlogin() attempt fails. The exception will contain a message indicating the nature of the failure.
+     * @param localUsername  The user account on the local machine that is
+     *        trying to login to the remote host.
+     * @param remoteUsername  The account name on the server that is
+     *        being logged in to.
+     * @param terminalType   The name of the user's terminal (e.g., "vt100",
+     *        "network", etc.)
+     * @param terminalSpeed  The speed of the user's terminal, expressed
+     *        as a baud rate or bps (e.g., 9600 or 38400)
+     * @throws IOException If the rlogin() attempt fails.  The exception
+     *            will contain a message indicating the nature of the failure.
@@ -87,2 +125,6 @@ public class RLoginClient extends RCommandClient {
-    public void rlogin(final String localUsername, final String remoteUsername, final String terminalType, final int terminalSpeed) throws IOException {
-        rexec(localUsername, remoteUsername, terminalType + "/" + terminalSpeed, false);
+    public void rlogin(final String localUsername, final String remoteUsername,
+                       final String terminalType, final int terminalSpeed)
+    throws IOException
+    {
+        rexec(localUsername, remoteUsername, terminalType + "/" + terminalSpeed,
+              false);
diff --git a/src/main/java/org/apache/commons/net/chargen/CharGenTCPClient.java b/src/main/java/org/apache/commons/net/chargen/CharGenTCPClient.java
index 3a710e5a1..998aa3205 100644
--- a/src/main/java/org/apache/commons/net/chargen/CharGenTCPClient.java
+++ b/src/main/java/org/apache/commons/net/chargen/CharGenTCPClient.java
@@ -25,4 +25,8 @@ import org.apache.commons.net.SocketClient;
- * The CharGenTCPClient class is a TCP implementation of a client for the character generator protocol described in RFC 864. It can also be used for Systat (RFC
- * 866), Quote of the Day (RFC 865), and netstat (port 15). All of these protocols involve connecting to the appropriate port, and reading data from an input
- * stream. The chargen protocol actually sends data until the receiving end closes the connection. All of the others send only a fixed amount of data and then
- * close the connection.
+ * The CharGenTCPClient class is a TCP implementation of a client for the
+ * character generator protocol described in RFC 864.  It can also be
+ * used for Systat (RFC 866), Quote of the Day (RFC 865), and netstat
+ * (port 15).  All of these protocols involve connecting to the appropriate
+ * port, and reading data from an input stream.  The chargen protocol
+ * actually sends data until the receiving end closes the connection.  All
+ * of the others send only a fixed amount of data and then close the
+ * connection.
@@ -30,3 +34,7 @@ import org.apache.commons.net.SocketClient;
- * To use the CharGenTCPClient class, just establish a connection with {@link org.apache.commons.net.SocketClient#connect connect } and call
- * {@link #getInputStream getInputStream() } to access the data. Don't close the input stream when you're done with it. Rather, call
- * {@link org.apache.commons.net.SocketClient#disconnect disconnect } to clean up properly.
+ * To use the CharGenTCPClient class, just establish a
+ * connection with
+ * {@link org.apache.commons.net.SocketClient#connect  connect }
+ * and call {@link #getInputStream  getInputStream() } to access
+ * the data.  Don't close the input stream when you're done with it.  Rather,
+ * call {@link org.apache.commons.net.SocketClient#disconnect  disconnect }
+ * to clean up properly.
@@ -37 +45,2 @@ import org.apache.commons.net.SocketClient;
-public final class CharGenTCPClient extends SocketClient {
+public final class CharGenTCPClient extends SocketClient
+{
@@ -46 +55 @@ public final class CharGenTCPClient extends SocketClient {
-    /** The default chargen port. It is set to 19 according to RFC 864. */
+    /** The default chargen port.  It is set to 19 according to RFC 864. */
@@ -50 +59,2 @@ public final class CharGenTCPClient extends SocketClient {
-     * The default constructor for CharGenTCPClient. It merely sets the default port to <code> DEFAULT_PORT </code>.
+     * The default constructor for CharGenTCPClient.  It merely sets the
+     * default port to <code> DEFAULT_PORT </code>.
@@ -52 +62,2 @@ public final class CharGenTCPClient extends SocketClient {
-    public CharGenTCPClient() {
+    public CharGenTCPClient ()
+    {
@@ -57,2 +68,5 @@ public final class CharGenTCPClient extends SocketClient {
-     * Returns an InputStream from which the server generated data can be read. You should NOT close the InputStream when you're finished reading from it.
-     * Rather, you should call {@link org.apache.commons.net.SocketClient#disconnect disconnect } to clean up properly.
+     * Returns an InputStream from which the server generated data can be
+     * read.  You should NOT close the InputStream when you're finished
+     * reading from it.  Rather, you should call
+     * {@link org.apache.commons.net.SocketClient#disconnect  disconnect }
+     * to clean up properly.
@@ -62 +76,2 @@ public final class CharGenTCPClient extends SocketClient {
-    public InputStream getInputStream() {
+    public InputStream getInputStream()
+    {
@@ -65,0 +81,4 @@ public final class CharGenTCPClient extends SocketClient {
+
+
+
+
diff --git a/src/main/java/org/apache/commons/net/chargen/CharGenUDPClient.java b/src/main/java/org/apache/commons/net/chargen/CharGenUDPClient.java
index 834a836ee..25a5a77a0 100644
--- a/src/main/java/org/apache/commons/net/chargen/CharGenUDPClient.java
+++ b/src/main/java/org/apache/commons/net/chargen/CharGenUDPClient.java
@@ -28,4 +28,10 @@ import org.apache.commons.net.util.NetConstants;
- * The CharGenUDPClient class is a UDP implementation of a client for the character generator protocol described in RFC 864. It can also be used for Systat (RFC
- * 866), Quote of the Day (RFC 865), and netstat (port 15). All of these protocols involve sending a datagram to the appropriate port, and reading data
- * contained in one or more reply datagrams. The chargen and quote of the day protocols only send one reply datagram containing 512 bytes or less of data. The
- * other protocols may reply with more than one datagram, in which case you must wait for a timeout to determine that all reply datagrams have been sent.
+ * The CharGenUDPClient class is a UDP implementation of a client for the
+ * character generator protocol described in RFC 864.  It can also be
+ * used for Systat (RFC 866), Quote of the Day (RFC 865), and netstat
+ * (port 15).  All of these protocols involve sending a datagram to the
+ * appropriate port, and reading data contained in one or more reply
+ * datagrams.  The chargen and quote of the day protocols only send
+ * one reply datagram containing 512 bytes or less of data.  The other
+ * protocols may reply with more than one datagram, in which case you
+ * must wait for a timeout to determine that all reply datagrams have
+ * been sent.
@@ -33,4 +39,10 @@ import org.apache.commons.net.util.NetConstants;
- * To use the CharGenUDPClient class, just open a local UDP port with {@link org.apache.commons.net.DatagramSocketClient#open open } and call {@link #send send
- * } to send the datagram that will initiate the data reply. For chargen or quote of the day, just call {@link #receive receive }, and you're done. For netstat
- * and systat, call receive in a while loop, and catch a SocketException and InterruptedIOException to detect a timeout (don't forget to set the timeout
- * duration beforehand). Don't forget to call {@link org.apache.commons.net.DatagramSocketClient#close close() } to clean up properly.
+ * To use the CharGenUDPClient class, just open a local UDP port
+ * with {@link org.apache.commons.net.DatagramSocketClient#open  open }
+ * and call {@link #send  send } to send the datagram that will
+ * initiate the data reply.  For chargen or quote of the day, just
+ * call {@link #receive  receive }, and you're done.  For netstat and
+ * systat, call receive in a while loop, and catch a SocketException and
+ * InterruptedIOException to detect a timeout (don't forget to set the
+ * timeout duration beforehand).  Don't forget to call
+ * {@link org.apache.commons.net.DatagramSocketClient#close  close() }
+ * to clean up properly.
@@ -41 +53,2 @@ import org.apache.commons.net.util.NetConstants;
-public final class CharGenUDPClient extends DatagramSocketClient {
+public final class CharGenUDPClient extends DatagramSocketClient
+{
@@ -50 +63 @@ public final class CharGenUDPClient extends DatagramSocketClient {
-    /** The default chargen port. It is set to 19 according to RFC 864. */
+    /** The default chargen port.  It is set to 19 according to RFC 864. */
@@ -58,2 +71,3 @@ public final class CharGenUDPClient extends DatagramSocketClient {
-     * The default CharGenUDPClient constructor. It initializes some internal data structures for sending and receiving the necessary datagrams for the chargen
-     * and related protocols.
+     * The default CharGenUDPClient constructor.  It initializes some internal
+     * data structures for sending and receiving the necessary datagrams for
+     * the chargen and related protocols.
@@ -61 +75,2 @@ public final class CharGenUDPClient extends DatagramSocketClient {
-    public CharGenUDPClient() {
+    public CharGenUDPClient()
+    {
@@ -67,0 +83 @@ public final class CharGenUDPClient extends DatagramSocketClient {
+
@@ -69,2 +85,3 @@ public final class CharGenUDPClient extends DatagramSocketClient {
-     * Receive the reply data from the server. This will always be 512 bytes or less. Chargen and quote of the day only return one packet. Netstat and systat
-     * require multiple calls to receive() with timeout detection.
+     * Receive the reply data from the server.  This will always be 512 bytes
+     * or less.  Chargen and quote of the day only return one packet.  Netstat
+     * and systat require multiple calls to receive() with timeout detection.
@@ -75 +92,2 @@ public final class CharGenUDPClient extends DatagramSocketClient {
-    public byte[] receive() throws IOException {
+    public byte[] receive() throws IOException
+    {
@@ -87,3 +105 @@ public final class CharGenUDPClient extends DatagramSocketClient {
-    /**
-     * Same as <code>send(host, CharGenUDPClient.DEFAULT_PORT);</code>
-     *
+    /** Same as <code>send(host, CharGenUDPClient.DEFAULT_PORT);</code>
@@ -93 +109,2 @@ public final class CharGenUDPClient extends DatagramSocketClient {
-    public void send(final InetAddress host) throws IOException {
+    public void send(final InetAddress host) throws IOException
+    {
@@ -98 +115,3 @@ public final class CharGenUDPClient extends DatagramSocketClient {
-     * Sends the data initiation datagram. This data in the packet is ignored by the server, and merely serves to signal that the server should send its reply.
+     * Sends the data initiation datagram.  This data in the packet is ignored
+     * by the server, and merely serves to signal that the server should send
+     * its reply.
@@ -104 +123,2 @@ public final class CharGenUDPClient extends DatagramSocketClient {
-    public void send(final InetAddress host, final int port) throws IOException {
+    public void send(final InetAddress host, final int port) throws IOException
+    {
@@ -110,0 +131 @@ public final class CharGenUDPClient extends DatagramSocketClient {
+
diff --git a/src/main/java/org/apache/commons/net/daytime/DaytimeTCPClient.java b/src/main/java/org/apache/commons/net/daytime/DaytimeTCPClient.java
index 5c51b0d0e..2080e0fac 100644
--- a/src/main/java/org/apache/commons/net/daytime/DaytimeTCPClient.java
+++ b/src/main/java/org/apache/commons/net/daytime/DaytimeTCPClient.java
@@ -27,4 +27,8 @@ import org.apache.commons.net.SocketClient;
- * The DaytimeTCPClient class is a TCP implementation of a client for the Daytime protocol described in RFC 867. To use the class, merely establish a connection
- * with {@link org.apache.commons.net.SocketClient#connect connect } and call {@link #getTime getTime() } to retrieve the daytime string, then call
- * {@link org.apache.commons.net.SocketClient#disconnect disconnect } to close the connection properly.
- *
+ * The DaytimeTCPClient class is a TCP implementation of a client for the
+ * Daytime protocol described in RFC 867.  To use the class, merely
+ * establish a connection with
+ * {@link org.apache.commons.net.SocketClient#connect  connect }
+ * and call {@link #getTime  getTime() } to retrieve the daytime
+ * string, then
+ * call {@link org.apache.commons.net.SocketClient#disconnect  disconnect }
+ * to close the connection properly.
@@ -33,2 +37,3 @@ import org.apache.commons.net.SocketClient;
-public final class DaytimeTCPClient extends SocketClient {
-    /** The default daytime port. It is set to 13 according to RFC 867. */
+public final class DaytimeTCPClient extends SocketClient
+{
+    /** The default daytime port.  It is set to 13 according to RFC 867. */
@@ -42 +47,2 @@ public final class DaytimeTCPClient extends SocketClient {
-     * The default DaytimeTCPClient constructor. It merely sets the default port to <code> DEFAULT_PORT </code>.
+     * The default DaytimeTCPClient constructor.  It merely sets the default
+     * port to <code> DEFAULT_PORT </code>.
@@ -44 +50,2 @@ public final class DaytimeTCPClient extends SocketClient {
-    public DaytimeTCPClient() {
+    public DaytimeTCPClient ()
+    {
@@ -49,3 +56,8 @@ public final class DaytimeTCPClient extends SocketClient {
-     * Retrieves the time string from the server and returns it. The server will have closed the connection at this point, so you should call
-     * {@link org.apache.commons.net.SocketClient#disconnect disconnect } after calling this method. To retrieve another time, you must initiate another
-     * connection with {@link org.apache.commons.net.SocketClient#connect connect } before calling <code> getTime() </code> again.
+     * Retrieves the time string from the server and returns it.  The
+     * server will have closed the connection at this point, so you should
+     * call
+     * {@link org.apache.commons.net.SocketClient#disconnect  disconnect }
+     * after calling this method.  To retrieve another time, you must
+     * initiate another connection with
+     * {@link org.apache.commons.net.SocketClient#connect  connect }
+     * before calling <code> getTime() </code> again.
@@ -54 +66 @@ public final class DaytimeTCPClient extends SocketClient {
-     * @throws IOException If an error occurs while fetching the time string.
+     * @throws IOException  If an error occurs while fetching the time string.
@@ -56 +68,2 @@ public final class DaytimeTCPClient extends SocketClient {
-    public String getTime() throws IOException {
+    public String getTime() throws IOException
+    {
@@ -63 +76,2 @@ public final class DaytimeTCPClient extends SocketClient {
-        while (true) {
+        while (true)
+        {
@@ -74,0 +89 @@ public final class DaytimeTCPClient extends SocketClient {
+
diff --git a/src/main/java/org/apache/commons/net/daytime/DaytimeUDPClient.java b/src/main/java/org/apache/commons/net/daytime/DaytimeUDPClient.java
index deb439acd..a41a7ee34 100644
--- a/src/main/java/org/apache/commons/net/daytime/DaytimeUDPClient.java
+++ b/src/main/java/org/apache/commons/net/daytime/DaytimeUDPClient.java
@@ -27,6 +27,12 @@ import org.apache.commons.net.DatagramSocketClient;
- * The DaytimeUDPClient class is a UDP implementation of a client for the Daytime protocol described in RFC 867. To use the class, merely open a local datagram
- * socket with {@link org.apache.commons.net.DatagramSocketClient#open open } and call {@link #getTime getTime } to retrieve the daytime string, then call
- * {@link org.apache.commons.net.DatagramSocketClient#close close } to close the connection properly. Unlike
- * {@link org.apache.commons.net.daytime.DaytimeTCPClient}, successive calls to {@link #getTime getTime } are permitted without re-establishing a connection.
- * That is because UDP is a connectionless protocol and the Daytime protocol is stateless.
- *
+ * The DaytimeUDPClient class is a UDP implementation of a client for the
+ * Daytime protocol described in RFC 867.  To use the class, merely
+ * open a local datagram socket with
+ * {@link org.apache.commons.net.DatagramSocketClient#open  open }
+ * and call {@link #getTime  getTime } to retrieve the daytime
+ * string, then
+ * call {@link org.apache.commons.net.DatagramSocketClient#close  close }
+ * to close the connection properly.  Unlike
+ * {@link org.apache.commons.net.daytime.DaytimeTCPClient},
+ * successive calls to {@link #getTime  getTime } are permitted
+ * without re-establishing a connection.  That is because UDP is a
+ * connectionless protocol and the Daytime protocol is stateless.
@@ -35,2 +41,3 @@ import org.apache.commons.net.DatagramSocketClient;
-public final class DaytimeUDPClient extends DatagramSocketClient {
-    /** The default daytime port. It is set to 13 according to RFC 867. */
+public final class DaytimeUDPClient extends DatagramSocketClient
+{
+    /** The default daytime port.  It is set to 13 according to RFC 867. */
@@ -43,3 +50 @@ public final class DaytimeUDPClient extends DatagramSocketClient {
-    /**
-     * Same as <code>getTime(host, DaytimeUDPClient.DEFAULT_PORT);</code>
-     *
+    /** Same as <code>getTime(host, DaytimeUDPClient.DEFAULT_PORT);</code>
@@ -47 +52 @@ public final class DaytimeUDPClient extends DatagramSocketClient {
-     * @return the time
+     * @return  the time
@@ -50 +55,2 @@ public final class DaytimeUDPClient extends DatagramSocketClient {
-    public String getTime(final InetAddress host) throws IOException {
+    public String getTime(final InetAddress host) throws IOException
+    {
@@ -55 +61,2 @@ public final class DaytimeUDPClient extends DatagramSocketClient {
-     * Retrieves the time string from the specified server and port and returns it.
+     * Retrieves the time string from the specified server and port and
+     * returns it.
@@ -62 +69,2 @@ public final class DaytimeUDPClient extends DatagramSocketClient {
-    public String getTime(final InetAddress host, final int port) throws IOException {
+    public String getTime(final InetAddress host, final int port) throws IOException
+    {
@@ -66 +74,2 @@ public final class DaytimeUDPClient extends DatagramSocketClient {
-        sendPacket = new DatagramPacket(dummyData, dummyData.length, host, port);
+        sendPacket =
+            new DatagramPacket(dummyData, dummyData.length, host, port);
@@ -75,0 +85 @@ public final class DaytimeUDPClient extends DatagramSocketClient {
+
diff --git a/src/main/java/org/apache/commons/net/discard/DiscardTCPClient.java b/src/main/java/org/apache/commons/net/discard/DiscardTCPClient.java
index 669d8e43a..9d3c2349c 100644
--- a/src/main/java/org/apache/commons/net/discard/DiscardTCPClient.java
+++ b/src/main/java/org/apache/commons/net/discard/DiscardTCPClient.java
@@ -25,4 +25,9 @@ import org.apache.commons.net.SocketClient;
- * The DiscardTCPClient class is a TCP implementation of a client for the Discard protocol described in RFC 863. To use the class, merely establish a connection
- * with {@link org.apache.commons.net.SocketClient#connect connect } and call {@link #getOutputStream getOutputStream() } to retrieve the discard output stream.
- * Don't close the output stream when you're done writing to it. Rather, call {@link org.apache.commons.net.SocketClient#disconnect disconnect } to clean up
- * properly.
+ * The DiscardTCPClient class is a TCP implementation of a client for the
+ * Discard protocol described in RFC 863.  To use the class, merely
+ * establish a connection with
+ * {@link org.apache.commons.net.SocketClient#connect  connect }
+ * and call {@link #getOutputStream  getOutputStream() } to
+ * retrieve the discard output stream.  Don't close the output stream
+ * when you're done writing to it.  Rather, call
+ * {@link org.apache.commons.net.SocketClient#disconnect  disconnect }
+ * to clean up properly.
@@ -33,2 +38,3 @@ import org.apache.commons.net.SocketClient;
-public class DiscardTCPClient extends SocketClient {
-    /** The default discard port. It is set to 9 according to RFC 863. */
+public class DiscardTCPClient extends SocketClient
+{
+    /** The default discard port.  It is set to 9 according to RFC 863. */
@@ -38 +44,2 @@ public class DiscardTCPClient extends SocketClient {
-     * The default DiscardTCPClient constructor. It merely sets the default port to <code> DEFAULT_PORT </code>.
+     * The default DiscardTCPClient constructor.  It merely sets the default
+     * port to <code> DEFAULT_PORT </code>.
@@ -40 +47,2 @@ public class DiscardTCPClient extends SocketClient {
-    public DiscardTCPClient() {
+    public DiscardTCPClient ()
+    {
@@ -45,2 +53,5 @@ public class DiscardTCPClient extends SocketClient {
-     * Returns an OutputStream through which you may write data to the server. You should NOT close the OutputStream when you're finished reading from it.
-     * Rather, you should call {@link org.apache.commons.net.SocketClient#disconnect disconnect } to clean up properly.
+     * Returns an OutputStream through which you may write data to the server.
+     * You should NOT close the OutputStream when you're finished
+     * reading from it.  Rather, you should call
+     * {@link org.apache.commons.net.SocketClient#disconnect  disconnect }
+     * to clean up properly.
@@ -50 +61,2 @@ public class DiscardTCPClient extends SocketClient {
-    public OutputStream getOutputStream() {
+    public OutputStream getOutputStream()
+    {
diff --git a/src/main/java/org/apache/commons/net/discard/DiscardUDPClient.java b/src/main/java/org/apache/commons/net/discard/DiscardUDPClient.java
index 5fb9f4090..b6b46101e 100644
--- a/src/main/java/org/apache/commons/net/discard/DiscardUDPClient.java
+++ b/src/main/java/org/apache/commons/net/discard/DiscardUDPClient.java
@@ -28,3 +28,8 @@ import org.apache.commons.net.util.NetConstants;
- * The DiscardUDPClient class is a UDP implementation of a client for the Discard protocol described in RFC 863. To use the class, just open a local UDP port
- * with {@link org.apache.commons.net.DatagramSocketClient#open open } and call {@link #send send } to send datagrams to the server After you're done sending
- * discard data, call {@link org.apache.commons.net.DatagramSocketClient#close close() } to clean up properly.
+ * The DiscardUDPClient class is a UDP implementation of a client for the
+ * Discard protocol described in RFC 863.  To use the class,
+ * just open a local UDP port
+ * with {@link org.apache.commons.net.DatagramSocketClient#open  open }
+ * and call {@link #send  send } to send datagrams to the server
+ * After you're done sending discard data, call
+ * {@link org.apache.commons.net.DatagramSocketClient#close  close() }
+ * to clean up properly.
@@ -35,2 +40,3 @@ import org.apache.commons.net.util.NetConstants;
-public class DiscardUDPClient extends DatagramSocketClient {
-    /** The default discard port. It is set to 9 according to RFC 863. */
+public class DiscardUDPClient extends DatagramSocketClient
+{
+    /** The default discard port.  It is set to 9 according to RFC 863. */
@@ -41 +47,2 @@ public class DiscardUDPClient extends DatagramSocketClient {
-    public DiscardUDPClient() {
+    public DiscardUDPClient()
+    {
@@ -44,0 +52 @@ public class DiscardUDPClient extends DatagramSocketClient {
+
@@ -46,2 +54,2 @@ public class DiscardUDPClient extends DatagramSocketClient {
-     * Same as <code>send(data, data.length, host. DiscardUDPClient.DEFAULT_PORT)</code>.
-     *
+     * Same as
+     * <code>send(data, data.length, host. DiscardUDPClient.DEFAULT_PORT)</code>.
@@ -53 +61,2 @@ public class DiscardUDPClient extends DatagramSocketClient {
-    public void send(final byte[] data, final InetAddress host) throws IOException {
+    public void send(final byte[] data, final InetAddress host) throws IOException
+    {
@@ -56,0 +66 @@ public class DiscardUDPClient extends DatagramSocketClient {
+
@@ -58,3 +68,3 @@ public class DiscardUDPClient extends DatagramSocketClient {
-     * Same as <code>send(data, length, host. DiscardUDPClient.DEFAULT_PORT)</code>.
-     *
-     * @param data   the buffer to send
+     * Same as
+     * <code>send(data, length, host. DiscardUDPClient.DEFAULT_PORT)</code>.
+     * @param data the buffer to send
@@ -62 +72 @@ public class DiscardUDPClient extends DatagramSocketClient {
-     * @param host   the target host
+     * @param host the target host
@@ -66 +76,3 @@ public class DiscardUDPClient extends DatagramSocketClient {
-    public void send(final byte[] data, final int length, final InetAddress host) throws IOException {
+    public void send(final byte[] data, final int length, final InetAddress host)
+    throws IOException
+    {
@@ -69,0 +82 @@ public class DiscardUDPClient extends DatagramSocketClient {
+
@@ -73,5 +86,7 @@ public class DiscardUDPClient extends DatagramSocketClient {
-     * @param data   The discard data to send.
-     * @param length The length of the data to send. Should be less than or equal to the length of the data byte array.
-     * @param host   The address of the server.
-     * @param port   The service port.
-     * @throws IOException If an error occurs during the datagram send operation.
+     * @param data  The discard data to send.
+     * @param length  The length of the data to send.  Should be less than
+     *    or equal to the length of the data byte array.
+     * @param host  The address of the server.
+     * @param port  The service port.
+     * @throws IOException If an error occurs during the datagram send
+     *            operation.
@@ -79 +94,3 @@ public class DiscardUDPClient extends DatagramSocketClient {
-    public void send(final byte[] data, final int length, final InetAddress host, final int port) throws IOException {
+    public void send(final byte[] data, final int length, final InetAddress host, final int port)
+    throws IOException
+    {
@@ -87,0 +105 @@ public class DiscardUDPClient extends DatagramSocketClient {
+
diff --git a/src/main/java/org/apache/commons/net/echo/EchoTCPClient.java b/src/main/java/org/apache/commons/net/echo/EchoTCPClient.java
index 77d22ab0e..48f330006 100644
--- a/src/main/java/org/apache/commons/net/echo/EchoTCPClient.java
+++ b/src/main/java/org/apache/commons/net/echo/EchoTCPClient.java
@@ -25,4 +25,11 @@ import org.apache.commons.net.discard.DiscardTCPClient;
- * The EchoTCPClient class is a TCP implementation of a client for the Echo protocol described in RFC 862. To use the class, merely establish a connection with
- * {@link org.apache.commons.net.SocketClient#connect connect } and call {@link DiscardTCPClient#getOutputStream getOutputStream() } to retrieve the echo output
- * stream and {@link #getInputStream getInputStream() } to get the echo input stream. Don't close either stream when you're done using them. Rather, call
- * {@link org.apache.commons.net.SocketClient#disconnect disconnect } to clean up properly.
+ * The EchoTCPClient class is a TCP implementation of a client for the
+ * Echo protocol described in RFC 862.  To use the class, merely
+ * establish a connection with
+ * {@link org.apache.commons.net.SocketClient#connect  connect }
+ * and call {@link DiscardTCPClient#getOutputStream  getOutputStream() } to
+ * retrieve the echo output stream and
+ * {@link #getInputStream getInputStream() }
+ *  to get the echo input stream.
+ * Don't close either stream when you're done using them.  Rather, call
+ * {@link org.apache.commons.net.SocketClient#disconnect  disconnect }
+ * to clean up properly.
@@ -34,2 +41,3 @@ import org.apache.commons.net.discard.DiscardTCPClient;
-public final class EchoTCPClient extends DiscardTCPClient {
-    /** The default echo port. It is set to 7 according to RFC 862. */
+public final class EchoTCPClient extends DiscardTCPClient
+{
+    /** The default echo port.  It is set to 7 according to RFC 862. */
@@ -39 +47,2 @@ public final class EchoTCPClient extends DiscardTCPClient {
-     * The default EchoTCPClient constructor. It merely sets the default port to <code> DEFAULT_PORT </code>.
+     * The default EchoTCPClient constructor.  It merely sets the default
+     * port to <code> DEFAULT_PORT </code>.
@@ -41 +50,2 @@ public final class EchoTCPClient extends DiscardTCPClient {
-    public EchoTCPClient() {
+    public EchoTCPClient ()
+    {
@@ -46,2 +56,5 @@ public final class EchoTCPClient extends DiscardTCPClient {
-     * Returns an InputStream from which you may read echoed data from the server. You should NOT close the InputStream when you're finished reading from it.
-     * Rather, you should call {@link org.apache.commons.net.SocketClient#disconnect disconnect } to clean up properly.
+     * Returns an InputStream from which you may read echoed data from
+     * the server.  You should NOT close the InputStream when you're finished
+     * reading from it.  Rather, you should call
+     * {@link org.apache.commons.net.SocketClient#disconnect  disconnect }
+     * to clean up properly.
@@ -49 +62,2 @@ public final class EchoTCPClient extends DiscardTCPClient {
-     * @return An InputStream from which you can read echoed data from the server.
+     * @return An InputStream from which you can read echoed data from the
+     *         server.
@@ -51 +65,2 @@ public final class EchoTCPClient extends DiscardTCPClient {
-    public InputStream getInputStream() {
+    public InputStream getInputStream()
+    {
diff --git a/src/main/java/org/apache/commons/net/echo/EchoUDPClient.java b/src/main/java/org/apache/commons/net/echo/EchoUDPClient.java
index fb4caa55b..902616e68 100644
--- a/src/main/java/org/apache/commons/net/echo/EchoUDPClient.java
+++ b/src/main/java/org/apache/commons/net/echo/EchoUDPClient.java
@@ -28,3 +28,9 @@ import org.apache.commons.net.util.NetConstants;
- * The EchoUDPClient class is a UDP implementation of a client for the Echo protocol described in RFC 862. To use the class, just open a local UDP port with
- * {@link org.apache.commons.net.DatagramSocketClient#open open } and call {@link #send send } to send datagrams to the server, then call {@link #receive
- * receive } to receive echoes. After you're done echoing data, call {@link org.apache.commons.net.DatagramSocketClient#close close() } to clean up properly.
+ * The EchoUDPClient class is a UDP implementation of a client for the
+ * Echo protocol described in RFC 862.  To use the class,
+ * just open a local UDP port
+ * with {@link org.apache.commons.net.DatagramSocketClient#open  open }
+ * and call {@link #send  send } to send datagrams to the server,
+ * then call {@link #receive  receive } to receive echoes.
+ * After you're done echoing data, call
+ * {@link org.apache.commons.net.DatagramSocketClient#close  close() }
+ * to clean up properly.
@@ -36,2 +42,3 @@ import org.apache.commons.net.util.NetConstants;
-public final class EchoUDPClient extends DiscardUDPClient {
-    /** The default echo port. It is set to 7 according to RFC 862. */
+public final class EchoUDPClient extends DiscardUDPClient
+{
+    /** The default echo port.  It is set to 7 according to RFC 862. */
@@ -42,3 +49 @@ public final class EchoUDPClient extends DiscardUDPClient {
-    /**
-     * Same as <code> receive(data, data.length)</code>
-     *
+    /** Same as <code> receive(data, data.length)</code>
@@ -49 +54,2 @@ public final class EchoUDPClient extends DiscardUDPClient {
-    public int receive(final byte[] data) throws IOException {
+    public int receive(final byte[] data) throws IOException
+    {
@@ -52,0 +59 @@ public final class EchoUDPClient extends DiscardUDPClient {
+
@@ -54,2 +61,6 @@ public final class EchoUDPClient extends DiscardUDPClient {
-     * Receives echoed data and returns its length. The data may be divided up among multiple datagrams, requiring multiple calls to receive. Also, the UDP
-     * packets will not necessarily arrive in the same order they were sent.
+     * Receives echoed data and returns its length.  The data may be divided
+     * up among multiple datagrams, requiring multiple calls to receive.
+     * Also, the UDP packets will not necessarily arrive in the same order
+     * they were sent.
+     * @param  data the buffer to receive the input
+     * @param length  of the buffer
@@ -57,4 +68 @@ public final class EchoUDPClient extends DiscardUDPClient {
-     * @param data   the buffer to receive the input
-     * @param length of the buffer
-     *
-     * @return Length of actual data received.
+     * @return  Length of actual data received.
@@ -63 +71,2 @@ public final class EchoUDPClient extends DiscardUDPClient {
-    public int receive(final byte[] data, final int length) throws IOException {
+    public int receive(final byte[] data, final int length) throws IOException
+    {
@@ -69,0 +79 @@ public final class EchoUDPClient extends DiscardUDPClient {
+
@@ -72 +82,2 @@ public final class EchoUDPClient extends DiscardUDPClient {
-    public void send(final byte[] data, final InetAddress host) throws IOException {
+    public void send(final byte[] data, final InetAddress host) throws IOException
+    {
@@ -77 +88,2 @@ public final class EchoUDPClient extends DiscardUDPClient {
-     * Sends the specified data to the specified server at the default echo port.
+     * Sends the specified data to the specified server at the default echo
+     * port.
@@ -79,4 +91,6 @@ public final class EchoUDPClient extends DiscardUDPClient {
-     * @param data   The echo data to send.
-     * @param length The length of the data to send. Should be less than or equal to the length of the data byte array.
-     * @param host   The address of the server.
-     * @throws IOException If an error occurs during the datagram send operation.
+     * @param data  The echo data to send.
+     * @param length  The length of the data to send.  Should be less than
+     *    or equal to the length of the data byte array.
+     * @param host  The address of the server.
+     * @throws IOException If an error occurs during the datagram send
+     *     operation.
@@ -85 +99,3 @@ public final class EchoUDPClient extends DiscardUDPClient {
-    public void send(final byte[] data, final int length, final InetAddress host) throws IOException {
+    public void send(final byte[] data, final int length, final InetAddress host)
+    throws IOException
+    {
@@ -89,0 +106 @@ public final class EchoUDPClient extends DiscardUDPClient {
+
diff --git a/src/main/java/org/apache/commons/net/examples/Main.java b/src/main/java/org/apache/commons/net/examples/Main.java
index c1ee0c22a..4e2fe92a5 100644
--- a/src/main/java/org/apache/commons/net/examples/Main.java
+++ b/src/main/java/org/apache/commons/net/examples/Main.java
@@ -36 +36 @@ public class Main {
-        if (codeSource != null) {
+        if ( codeSource != null) {
@@ -43 +43,3 @@ public class Main {
-     * Helper application for example classes. Lists available classes, and provides shorthand invocation. For example:<br>
+     * Helper application for example classes.
+     * Lists available classes, and provides shorthand invocation.
+     * For example:<br>
@@ -46 +48,2 @@ public class Main {
-     * @param args the first argument is used to name the class; remaining arguments are passed to the target class.
+     * @param args the first argument is used to name the class; remaining arguments
+     * are passed to the target class.
@@ -49 +52 @@ public class Main {
-    public static void main(final String[] args) throws Throwable {
+    public static void main(final String[] args) throws Throwable  {
@@ -59,3 +62,4 @@ public class Main {
-                System.out.println(
-                        "Usage: mvn -q exec:java  -Dexec.arguments=<alias or" + " exampleClass>,<exampleClass parameters> (comma-separated, no spaces)");
-                System.out.println("Or   : mvn -q exec:java  -Dexec.args=\"<alias" + " or exampleClass> <exampleClass parameters>\" (space separated)");
+                System.out.println("Usage: mvn -q exec:java  -Dexec.arguments=<alias or" +
+                                    " exampleClass>,<exampleClass parameters> (comma-separated, no spaces)");
+                System.out.println("Or   : mvn -q exec:java  -Dexec.args=\"<alias" +
+                                    " or exampleClass> <exampleClass parameters>\" (space separated)");
@@ -63 +67,2 @@ public class Main {
-                System.out.println("Usage: java -jar commons-net-examples-m.n.jar <alias or exampleClass> <exampleClass parameters>");
+                System.out.println(
+                    "Usage: java -jar commons-net-examples-m.n.jar <alias or exampleClass> <exampleClass parameters>");
@@ -65,2 +70,2 @@ public class Main {
-                System.out
-                        .println("Usage: java -cp target/classes org.apache.commons.net.examples.Main" + " <alias or exampleClass> <exampleClass parameters>");
+                System.out.println("Usage: java -cp target/classes org.apache.commons.net.examples.Main" +
+                                   " <alias or exampleClass> <exampleClass parameters>");
@@ -69 +74,2 @@ public class Main {
-            final List<String> l = (List<String>) Collections.list(fp.propertyNames());
+            final
+            List<String> l = (List<String>) Collections.list(fp.propertyNames());
@@ -75,2 +81,2 @@ public class Main {
-            for (final String s : l) {
-                System.out.printf("%-25s %s%n", s, fp.getProperty(s));
+            for(final String s : l) {
+                System.out.printf("%-25s %s%n",s,fp.getProperty(s));
@@ -89 +95 @@ public class Main {
-            final String[] args2 = new String[args.length - 1];
+            final String[] args2 = new String[args.length-1];
@@ -92 +98 @@ public class Main {
-                m.invoke(null, (Object) args2);
+                m.invoke(null, (Object)args2);
diff --git a/src/main/java/org/apache/commons/net/examples/cidr/SubnetUtilsExample.java b/src/main/java/org/apache/commons/net/examples/cidr/SubnetUtilsExample.java
index 61399b41e..678699355 100644
--- a/src/main/java/org/apache/commons/net/examples/cidr/SubnetUtilsExample.java
+++ b/src/main/java/org/apache/commons/net/examples/cidr/SubnetUtilsExample.java
@@ -38,2 +38,4 @@ public class SubnetUtilsExample {
-        System.out.printf("IP Address:\t\t\t%s\t[%s]%n", info.getAddress(), Integer.toBinaryString(info.asInteger(info.getAddress())));
-        System.out.printf("Netmask:\t\t\t%s\t[%s]%n", info.getNetmask(), Integer.toBinaryString(info.asInteger(info.getNetmask())));
+        System.out.printf("IP Address:\t\t\t%s\t[%s]%n", info.getAddress(),
+                Integer.toBinaryString(info.asInteger(info.getAddress())));
+        System.out.printf("Netmask:\t\t\t%s\t[%s]%n", info.getNetmask(),
+                Integer.toBinaryString(info.asInteger(info.getNetmask())));
@@ -44,4 +46,8 @@ public class SubnetUtilsExample {
-        System.out.printf("Network Address:\t\t%s\t[%s]%n", info.getNetworkAddress(), Integer.toBinaryString(info.asInteger(info.getNetworkAddress())));
-        System.out.printf("Broadcast Address:\t\t%s\t[%s]%n", info.getBroadcastAddress(), Integer.toBinaryString(info.asInteger(info.getBroadcastAddress())));
-        System.out.printf("Low Address:\t\t\t%s\t[%s]%n", info.getLowAddress(), Integer.toBinaryString(info.asInteger(info.getLowAddress())));
-        System.out.printf("High Address:\t\t\t%s\t[%s]%n", info.getHighAddress(), Integer.toBinaryString(info.asInteger(info.getHighAddress())));
+        System.out.printf("Network Address:\t\t%s\t[%s]%n", info.getNetworkAddress(),
+                Integer.toBinaryString(info.asInteger(info.getNetworkAddress())));
+        System.out.printf("Broadcast Address:\t\t%s\t[%s]%n", info.getBroadcastAddress(),
+                Integer.toBinaryString(info.asInteger(info.getBroadcastAddress())));
+        System.out.printf("Low Address:\t\t\t%s\t[%s]%n", info.getLowAddress(),
+                Integer.toBinaryString(info.asInteger(info.getLowAddress())));
+        System.out.printf("High Address:\t\t\t%s\t[%s]%n", info.getHighAddress(),
+                Integer.toBinaryString(info.asInteger(info.getHighAddress())));
@@ -57 +63,2 @@ public class SubnetUtilsExample {
-                System.out.println("The IP address [" + address + "] is " + (info.isInRange(address) ? "" : "not ") + "within the subnet [" + subnet + "]");
+                System.out.println("The IP address [" + address + "] is " + (info.isInRange(address) ? "" : "not ")
+                        + "within the subnet [" + subnet + "]");
diff --git a/src/main/java/org/apache/commons/net/examples/ftp/FTPClientExample.java b/src/main/java/org/apache/commons/net/examples/ftp/FTPClientExample.java
index ac0d91e07..aaf5029ca 100644
--- a/src/main/java/org/apache/commons/net/examples/ftp/FTPClientExample.java
+++ b/src/main/java/org/apache/commons/net/examples/ftp/FTPClientExample.java
@@ -45,3 +45,6 @@ import org.apache.commons.net.util.TrustManagerUtils;
- * This is an example program demonstrating how to use the FTPClient class. This program connects to an FTP server and retrieves the specified file. If the -s
- * flag is used, it stores the local file at the FTP server. Just so you can see what's happening, all reply strings are printed. If the -b flag is used, a
- * binary transfer is assumed (default is ASCII). See below for further options.
+ * This is an example program demonstrating how to use the FTPClient class.
+ * This program connects to an FTP server and retrieves the specified
+ * file.  If the -s flag is used, it stores the local file at the FTP server.
+ * Just so you can see what's happening, all reply strings are printed.
+ * If the -b flag is used, a binary transfer is assumed (default is ASCII).
+ * See below for further options.
@@ -49,28 +52,41 @@ import org.apache.commons.net.util.TrustManagerUtils;
-public final class FTPClientExample {
-
-    public static final String USAGE = "Expected Parameters: [options] <hostname> <username> <password> [<remote file> [<local file>]]\n"
-            + "\nDefault behavior is to download a file and use ASCII transfer mode.\n" + "\t-a - use local active mode (default is local passive)\n"
-            + "\t-A - anonymous login (omit username and password parameters)\n" + "\t-b - use binary transfer mode\n"
-            + "\t-c cmd - issue arbitrary command (remote is used as a parameter if provided) \n"
-            + "\t-d - list directory details using MLSD (remote is used as the pathname if provided)\n" + "\t-e - use EPSV with IPv4 (default false)\n"
-            + "\t-E - encoding to use for control channel\n" + "\t-f - issue FEAT command (remote and local files are ignored)\n"
-            + "\t-h - list hidden files (applies to -l and -n only)\n" + "\t-i - issue SIZE command for a file\n"
-            + "\t-k secs - use keep-alive timer (setControlKeepAliveTimeout)\n" + "\t-l - list files using LIST (remote is used as the pathname if provided)\n"
-            + "\t     Files are listed twice: first in raw mode, then as the formatted parsed data.\n"
-            + "\t     N.B. if the wrong server-type is used, output may be lost. Use -U or -S as necessary.\n"
-            + "\t-L - use lenient future dates (server dates may be up to 1 day into future)\n"
-            + "\t-m - list file details using MDTM (remote is used as the pathname if provided)\n"
-            + "\t-n - list file names using NLST (remote is used as the pathname if provided)\n"
-            + "\t-p true|false|protocol[,true|false] - use FTPSClient with the specified protocol and/or isImplicit setting\n"
-            + "\t-s - store file on server (upload)\n" + "\t-S - systemType set server system type (e.g. UNIX VMS WINDOWS)\n"
-            + "\t-t - list file details using MLST (remote is used as the pathname if provided)\n" + "\t-U - save unparseable responses\n"
-            + "\t-w msec - wait time for keep-alive reply (setControlKeepAliveReplyTimeout)\n"
-            + "\t-T  all|valid|none - use one of the built-in TrustManager implementations (none = JVM default)\n"
-            + "\t-y format - set default date format string\n" + "\t-Y format - set recent date format string\n"
-            + "\t-Z timezone - set the server time zone for parsing LIST responses\n"
-            + "\t-z timezone - set the time zone for displaying MDTM, LIST, MLSD, MLST responses\n"
-            + "\t-PrH server[:port] - HTTP Proxy host and optional port[80] \n" + "\t-PrU user - HTTP Proxy server username\n"
-            + "\t-PrP password - HTTP Proxy server password\n" + "\t-# - add hash display during transfers\n";
-
-    private static CopyStreamListener createListener() {
-        return new CopyStreamListener() {
+public final class FTPClientExample
+{
+
+    public static final String USAGE =
+        "Expected Parameters: [options] <hostname> <username> <password> [<remote file> [<local file>]]\n" +
+        "\nDefault behavior is to download a file and use ASCII transfer mode.\n" +
+        "\t-a - use local active mode (default is local passive)\n" +
+        "\t-A - anonymous login (omit username and password parameters)\n" +
+        "\t-b - use binary transfer mode\n" +
+        "\t-c cmd - issue arbitrary command (remote is used as a parameter if provided) \n" +
+        "\t-d - list directory details using MLSD (remote is used as the pathname if provided)\n" +
+        "\t-e - use EPSV with IPv4 (default false)\n" +
+        "\t-E - encoding to use for control channel\n" +
+        "\t-f - issue FEAT command (remote and local files are ignored)\n" +
+        "\t-h - list hidden files (applies to -l and -n only)\n" +
+        "\t-i - issue SIZE command for a file\n" +
+        "\t-k secs - use keep-alive timer (setControlKeepAliveTimeout)\n" +
+        "\t-l - list files using LIST (remote is used as the pathname if provided)\n" +
+        "\t     Files are listed twice: first in raw mode, then as the formatted parsed data.\n" +
+        "\t     N.B. if the wrong server-type is used, output may be lost. Use -U or -S as necessary.\n" +
+        "\t-L - use lenient future dates (server dates may be up to 1 day into future)\n" +
+        "\t-m - list file details using MDTM (remote is used as the pathname if provided)\n" +
+        "\t-n - list file names using NLST (remote is used as the pathname if provided)\n" +
+        "\t-p true|false|protocol[,true|false] - use FTPSClient with the specified protocol and/or isImplicit setting\n" +
+        "\t-s - store file on server (upload)\n" +
+        "\t-S - systemType set server system type (e.g. UNIX VMS WINDOWS)\n" +
+        "\t-t - list file details using MLST (remote is used as the pathname if provided)\n" +
+        "\t-U - save unparseable responses\n" +
+        "\t-w msec - wait time for keep-alive reply (setControlKeepAliveReplyTimeout)\n" +
+        "\t-T  all|valid|none - use one of the built-in TrustManager implementations (none = JVM default)\n" +
+        "\t-y format - set default date format string\n" +
+        "\t-Y format - set recent date format string\n" +
+        "\t-Z timezone - set the server time zone for parsing LIST responses\n" +
+        "\t-z timezone - set the time zone for displaying MDTM, LIST, MLSD, MLST responses\n" +
+        "\t-PrH server[:port] - HTTP Proxy host and optional port[80] \n" +
+        "\t-PrU user - HTTP Proxy server username\n" +
+        "\t-PrP password - HTTP Proxy server password\n" +
+        "\t-# - add hash display during transfers\n";
+
+    private static CopyStreamListener createListener(){
+        return new CopyStreamListener(){
@@ -85 +101,2 @@ public final class FTPClientExample {
-            public void bytesTransferred(final long totalBytesTransferred, final int bytesTransferred, final long streamSize) {
+            public void bytesTransferred(final long totalBytesTransferred,
+                    final int bytesTransferred, final long streamSize) {
@@ -95 +112,2 @@ public final class FTPClientExample {
-    public static void main(final String[] args) throws UnknownHostException {
+    public static void main(final String[] args) throws UnknownHostException
+    {
@@ -119,0 +138 @@ public final class FTPClientExample {
+
@@ -121 +140,2 @@ public final class FTPClientExample {
-        for (base = 0; base < args.length; base++) {
+        for (base = 0; base < args.length; base++)
+        {
@@ -124 +144,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-a")) {
+            }
+            else if (args[base].equals("-a")) {
@@ -126 +147,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-A")) {
+            }
+            else if (args[base].equals("-A")) {
@@ -128,2 +150,3 @@ public final class FTPClientExample {
-                password = System.getProperty("user.name") + "@" + InetAddress.getLocalHost().getHostName();
-            } else if (args[base].equals("-b")) {
+                password = System.getProperty("user.name")+"@"+InetAddress.getLocalHost().getHostName();
+            }
+            else if (args[base].equals("-b")) {
@@ -131 +154,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-c")) {
+            }
+            else if (args[base].equals("-c")) {
@@ -134 +158,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-d")) {
+            }
+            else if (args[base].equals("-d")) {
@@ -137 +162,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-e")) {
+            }
+            else if (args[base].equals("-e")) {
@@ -139 +165,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-E")) {
+            }
+            else if (args[base].equals("-E")) {
@@ -141 +168,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-f")) {
+            }
+            else if (args[base].equals("-f")) {
@@ -144 +172,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-h")) {
+            }
+            else if (args[base].equals("-h")) {
@@ -146 +175,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-i")) {
+            }
+            else if (args[base].equals("-i")) {
@@ -149 +179,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-k")) {
+            }
+            else if (args[base].equals("-k")) {
@@ -151 +182,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-l")) {
+            }
+            else if (args[base].equals("-l")) {
@@ -154 +186,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-m")) {
+            }
+            else if (args[base].equals("-m")) {
@@ -157 +190,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-L")) {
+            }
+            else if (args[base].equals("-L")) {
@@ -159 +193,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-n")) {
+            }
+            else if (args[base].equals("-n")) {
@@ -162 +197,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-p")) {
+            }
+            else if (args[base].equals("-p")) {
@@ -164 +200,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-S")) {
+            }
+            else if (args[base].equals("-S")) {
@@ -166 +203,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-t")) {
+            }
+            else if (args[base].equals("-t")) {
@@ -169 +207,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-U")) {
+            }
+            else if (args[base].equals("-U")) {
@@ -171 +210,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-w")) {
+            }
+            else if (args[base].equals("-w")) {
@@ -173 +213,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-T")) {
+            }
+            else if (args[base].equals("-T")) {
@@ -175 +216,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-y")) {
+            }
+            else if (args[base].equals("-y")) {
@@ -177 +219,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-Y")) {
+            }
+            else if (args[base].equals("-Y")) {
@@ -179 +222,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-Z")) {
+            }
+            else if (args[base].equals("-Z")) {
@@ -181 +225,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-z")) {
+            }
+            else if (args[base].equals("-z")) {
@@ -183 +228,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-PrH")) {
+            }
+            else if (args[base].equals("-PrH")) {
@@ -186,3 +232,3 @@ public final class FTPClientExample {
-                if (parts.length == 2) {
-                    proxyHost = parts[0];
-                    proxyPort = Integer.parseInt(parts[1]);
+                if (parts.length == 2){
+                    proxyHost=parts[0];
+                    proxyPort=Integer.parseInt(parts[1]);
@@ -190 +236,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-PrU")) {
+            }
+            else if (args[base].equals("-PrU")) {
@@ -192 +239,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-PrP")) {
+            }
+            else if (args[base].equals("-PrP")) {
@@ -194 +242,2 @@ public final class FTPClientExample {
-            } else if (args[base].equals("-#")) {
+            }
+            else if (args[base].equals("-#")) {
@@ -196 +245,2 @@ public final class FTPClientExample {
-            } else {
+            }
+            else {
@@ -217,3 +267,3 @@ public final class FTPClientExample {
-        if (parts.length == 2) {
-            server = parts[0];
-            port = Integer.parseInt(parts[1]);
+        if (parts.length == 2){
+            server=parts[0];
+            port=Integer.parseInt(parts[1]);
@@ -237,2 +287,2 @@ public final class FTPClientExample {
-        if (protocol == null) {
-            if (proxyHost != null) {
+        if (protocol == null ) {
+            if(proxyHost !=null) {
@@ -241 +291,2 @@ public final class FTPClientExample {
-            } else {
+            }
+            else {
@@ -300 +351,2 @@ public final class FTPClientExample {
-        try {
+        try
+        {
@@ -307 +359 @@ public final class FTPClientExample {
-            System.out.println("Connected to " + server + " on " + (port > 0 ? port : ftp.getDefaultPort()));
+            System.out.println("Connected to " + server + " on " + (port>0 ? port : ftp.getDefaultPort()));
@@ -313 +365,2 @@ public final class FTPClientExample {
-            if (!FTPReply.isPositiveCompletion(reply)) {
+            if (!FTPReply.isPositiveCompletion(reply))
+            {
@@ -318,3 +371,7 @@ public final class FTPClientExample {
-        } catch (final IOException e) {
-            if (ftp.isConnected()) {
-                try {
+        }
+        catch (final IOException e)
+        {
+            if (ftp.isConnected())
+            {
+                try
+                {
@@ -322 +379,3 @@ public final class FTPClientExample {
-                } catch (final IOException f) {
+                }
+                catch (final IOException f)
+                {
@@ -331,2 +390,5 @@ public final class FTPClientExample {
-        __main: try {
-            if (!ftp.login(username, password)) {
+__main:
+        try
+        {
+            if (!ftp.login(username, password))
+            {
@@ -358 +420,2 @@ public final class FTPClientExample {
-            if (storeFile) {
+            if (storeFile)
+            {
@@ -368 +431,2 @@ public final class FTPClientExample {
-            else if (listFiles || mlsd || mdtm || mlst || listNames || size) {
+            else if (listFiles || mlsd || mdtm || mlst || listNames || size)
+            {
@@ -386 +450 @@ public final class FTPClientExample {
-                    if (f != null) {
+                    if (f != null){
@@ -396 +460 @@ public final class FTPClientExample {
-                    System.out.println("Size=" + ftp.getSize(remote));
+                    System.out.println("Size="+ftp.getSize(remote));
@@ -405 +469 @@ public final class FTPClientExample {
-                        ftp.configure(config);
+                        ftp.configure(config );
@@ -413 +477,3 @@ public final class FTPClientExample {
-            } else if (feat) {
+            }
+            else if (feat)
+            {
@@ -417 +483 @@ public final class FTPClientExample {
-                        System.out.println("Has feature: " + remote);
+                        System.out.println("Has feature: "+remote);
@@ -419 +485 @@ public final class FTPClientExample {
-                        System.out.println("FEAT " + remote + " was not detected");
+                        System.out.println("FEAT "+remote+" was not detected");
@@ -421 +487 @@ public final class FTPClientExample {
-                        System.out.println("Command failed: " + ftp.getReplyString());
+                        System.out.println("Command failed: "+ftp.getReplyString());
@@ -425 +491 @@ public final class FTPClientExample {
-                    final String[] features = ftp.featureValues(remote);
+                    final String []features = ftp.featureValues(remote);
@@ -427,2 +493,2 @@ public final class FTPClientExample {
-                        for (final String f : features) {
-                            System.out.println("FEAT " + remote + "=" + f + ".");
+                        for(final String f : features) {
+                            System.out.println("FEAT "+remote+"="+f+".");
@@ -431 +497 @@ public final class FTPClientExample {
-                        System.out.println("FEAT " + remote + " is not present");
+                        System.out.println("FEAT "+remote+" is not present");
@@ -433 +499 @@ public final class FTPClientExample {
-                        System.out.println("Command failed: " + ftp.getReplyString());
+                        System.out.println("Command failed: "+ftp.getReplyString());
@@ -438 +504 @@ public final class FTPClientExample {
-                    System.out.println("Failed: " + ftp.getReplyString());
+                    System.out.println("Failed: "+ftp.getReplyString());
@@ -440 +506,3 @@ public final class FTPClientExample {
-            } else if (doCommand != null) {
+            }
+            else if (doCommand != null)
+            {
@@ -447 +515 @@ public final class FTPClientExample {
-                    System.out.println("Failed: " + ftp.getReplyString());
+                    System.out.println("Failed: "+ftp.getReplyString());
@@ -449 +517,3 @@ public final class FTPClientExample {
-            } else {
+            }
+            else
+            {
@@ -462 +532,3 @@ public final class FTPClientExample {
-        } catch (final FTPConnectionClosedException e) {
+        }
+        catch (final FTPConnectionClosedException e)
+        {
@@ -466 +538,3 @@ public final class FTPClientExample {
-        } catch (final IOException e) {
+        }
+        catch (final IOException e)
+        {
@@ -469,3 +543,7 @@ public final class FTPClientExample {
-        } finally {
-            if (ftp.isConnected()) {
-                try {
+        }
+        finally
+        {
+            if (ftp.isConnected())
+            {
+                try
+                {
@@ -473 +551,3 @@ public final class FTPClientExample {
-                } catch (final IOException f) {
+                }
+                catch (final IOException f)
+                {
@@ -484,2 +564,3 @@ public final class FTPClientExample {
-        final int[] stats = ftp.getCslDebug();
-        System.out.println("CslDebug=" + Arrays.toString(stats));
+        final
+        int []stats = ftp.getCslDebug();
+        System.out.println("CslDebug="+Arrays.toString(stats));
@@ -488,0 +570 @@ public final class FTPClientExample {
+
diff --git a/src/main/java/org/apache/commons/net/examples/ftp/ServerToServerFTP.java b/src/main/java/org/apache/commons/net/examples/ftp/ServerToServerFTP.java
index 86631d3aa..908deade1 100644
--- a/src/main/java/org/apache/commons/net/examples/ftp/ServerToServerFTP.java
+++ b/src/main/java/org/apache/commons/net/examples/ftp/ServerToServerFTP.java
@@ -30,3 +30,6 @@ import org.apache.commons.net.ftp.FTPReply;
- * This is an example program demonstrating how to use the FTPClient class. This program arranges a server to server file transfer that transfers a file from
- * host1 to host2. Keep in mind, this program might only work if host2 is the same as the host you run it on (for security reasons, some ftp servers only allow
- * PORT commands to be issued with a host argument equal to the client host).
+ * This is an example program demonstrating how to use the FTPClient class.
+ * This program arranges a server to server file transfer that transfers
+ * a file from host1 to host2.  Keep in mind, this program might only work
+ * if host2 is the same as the host you run it on (for security reasons,
+ * some ftp servers only allow PORT commands to be issued with a host
+ * argument equal to the client host).
@@ -36 +39,2 @@ import org.apache.commons.net.ftp.FTPReply;
-public final class ServerToServerFTP {
+public final class ServerToServerFTP
+{
@@ -38 +42,2 @@ public final class ServerToServerFTP {
-    public static void main(final String[] args) {
+    public static void main(final String[] args)
+    {
@@ -47,2 +52,2 @@ public final class ServerToServerFTP {
-        String[] parts;
-        int port1 = 0, port2 = 0;
+        String [] parts;
+        int port1=0, port2=0;
@@ -53,2 +58,5 @@ public final class ServerToServerFTP {
-        if (args.length < 8) {
-            System.err.println("Usage: ftp <host1> <user1> <pass1> <file1> <host2> <user2> <pass2> <file2>");
+        if (args.length < 8)
+        {
+            System.err.println(
+                "Usage: ftp <host1> <user1> <pass1> <file1> <host2> <user2> <pass2> <file2>"
+            );
@@ -61 +69 @@ public final class ServerToServerFTP {
-            server1 = parts[0];
+            server1=parts[0];
@@ -70 +78 @@ public final class ServerToServerFTP {
-            server2 = parts[0];
+            server2=parts[0];
@@ -83 +91,2 @@ public final class ServerToServerFTP {
-        try {
+        try
+        {
@@ -94 +103,2 @@ public final class ServerToServerFTP {
-            if (!FTPReply.isPositiveCompletion(reply)) {
+            if (!FTPReply.isPositiveCompletion(reply))
+            {
@@ -99,3 +109,7 @@ public final class ServerToServerFTP {
-        } catch (final IOException e) {
-            if (ftp1.isConnected()) {
-                try {
+        }
+        catch (final IOException e)
+        {
+            if (ftp1.isConnected())
+            {
+                try
+                {
@@ -103 +117,3 @@ public final class ServerToServerFTP {
-                } catch (final IOException f) {
+                }
+                catch (final IOException f)
+                {
@@ -112 +128,2 @@ public final class ServerToServerFTP {
-        try {
+        try
+        {
@@ -123 +140,2 @@ public final class ServerToServerFTP {
-            if (!FTPReply.isPositiveCompletion(reply)) {
+            if (!FTPReply.isPositiveCompletion(reply))
+            {
@@ -128,3 +146,7 @@ public final class ServerToServerFTP {
-        } catch (final IOException e) {
-            if (ftp2.isConnected()) {
-                try {
+        }
+        catch (final IOException e)
+        {
+            if (ftp2.isConnected())
+            {
+                try
+                {
@@ -132 +154,3 @@ public final class ServerToServerFTP {
-                } catch (final IOException f) {
+                }
+                catch (final IOException f)
+                {
@@ -141,2 +165,5 @@ public final class ServerToServerFTP {
-        __main: try {
-            if (!ftp1.login(username1, password1)) {
+__main:
+        try
+        {
+            if (!ftp1.login(username1, password1))
+            {
@@ -147 +174,2 @@ public final class ServerToServerFTP {
-            if (!ftp2.login(username2, password2)) {
+            if (!ftp2.login(username2, password2))
+            {
@@ -155 +183,2 @@ public final class ServerToServerFTP {
-            ftp1.enterRemoteActiveMode(InetAddress.getByName(ftp2.getPassiveHost()), ftp2.getPassivePort());
+            ftp1.enterRemoteActiveMode(InetAddress.getByName(ftp2.getPassiveHost()),
+                                       ftp2.getPassivePort());
@@ -159 +188 @@ public final class ServerToServerFTP {
-            // connections right after entering passive mode. Additionally, they
+            // connections right after entering passive mode.  Additionally, they
@@ -165 +194,2 @@ public final class ServerToServerFTP {
-                System.err.println("Couldn't initiate transfer. Check that file names are valid.");
+                System.err.println(
+                    "Couldn't initiate transfer. Check that file names are valid.");
@@ -168 +198 @@ public final class ServerToServerFTP {
-            // if(ftp1.remoteRetrieve(file1) && ftp2.remoteStore(file2)) {
+            //      if(ftp1.remoteRetrieve(file1) && ftp2.remoteStore(file2)) {
@@ -173 +203,3 @@ public final class ServerToServerFTP {
-        } catch (final IOException e) {
+        }
+        catch (final IOException e)
+        {
@@ -176,3 +208,7 @@ public final class ServerToServerFTP {
-        } finally {
-            try {
-                if (ftp1.isConnected()) {
+        }
+        finally
+        {
+            try
+            {
+                if (ftp1.isConnected())
+                {
@@ -182 +218,3 @@ public final class ServerToServerFTP {
-            } catch (final IOException e) {
+            }
+            catch (final IOException e)
+            {
@@ -186,2 +224,4 @@ public final class ServerToServerFTP {
-            try {
-                if (ftp2.isConnected()) {
+            try
+            {
+                if (ftp2.isConnected())
+                {
@@ -191 +231,3 @@ public final class ServerToServerFTP {
-            } catch (final IOException e) {
+            }
+            catch (final IOException e)
+            {
diff --git a/src/main/java/org/apache/commons/net/examples/ftp/TFTPExample.java b/src/main/java/org/apache/commons/net/examples/ftp/TFTPExample.java
index bb0455b05..e89936c0c 100644
--- a/src/main/java/org/apache/commons/net/examples/ftp/TFTPExample.java
+++ b/src/main/java/org/apache/commons/net/examples/ftp/TFTPExample.java
@@ -33 +33,3 @@ import org.apache.commons.net.tftp.TFTPPacket;
- * This is an example of a simple Java tftp client. Notice how all of the code is really just argument processing and error handling.
+ * This is an example of a simple Java tftp client.
+ * Notice how all of the code is really just argument processing and
+ * error handling.
@@ -35,4 +37,11 @@ import org.apache.commons.net.tftp.TFTPPacket;
- * Usage: tftp [options] hostname localfile remotefile hostname - The name of the remote host, with optional :port localfile - The name of the local file to
- * send or the name to use for the received file remotefile - The name of the remote file to receive or the name for the remote server to use to name the local
- * file being sent. options: (The default is to assume -r -b) -s Send a local file -r Receive a remote file -a Use ASCII transfer mode -b Use binary transfer
- * mode
+ * Usage: tftp [options] hostname localfile remotefile
+ * hostname   - The name of the remote host, with optional :port
+ * localfile  - The name of the local file to send or the name to use for
+ *              the received file
+ * remotefile - The name of the remote file to receive or the name for
+ *              the remote server to use to name the local file being sent.
+ * options: (The default is to assume -r -b)
+ *        -s Send a local file
+ *        -r Receive a remote file
+ *        -a Use ASCII transfer mode
+ *        -b Use binary transfer mode
@@ -40,6 +49,17 @@ import org.apache.commons.net.tftp.TFTPPacket;
-public final class TFTPExample {
-    static final String USAGE = "Usage: tftp [options] hostname localfile remotefile\n\n" + "hostname   - The name of the remote host [:port]\n"
-            + "localfile  - The name of the local file to send or the name to use for\n" + "\tthe received file\n"
-            + "remotefile - The name of the remote file to receive or the name for\n" + "\tthe remote server to use to name the local file being sent.\n\n"
-            + "options: (The default is to assume -r -b)\n" + "\t-t timeout in seconds (default 60s)\n" + "\t-s Send a local file\n"
-            + "\t-r Receive a remote file\n" + "\t-a Use ASCII transfer mode\n" + "\t-b Use binary transfer mode\n" + "\t-v Verbose (trace packets)\n";
+public final class TFTPExample
+{
+    static final String USAGE =
+        "Usage: tftp [options] hostname localfile remotefile\n\n" +
+        "hostname   - The name of the remote host [:port]\n" +
+        "localfile  - The name of the local file to send or the name to use for\n" +
+        "\tthe received file\n" +
+        "remotefile - The name of the remote file to receive or the name for\n" +
+        "\tthe remote server to use to name the local file being sent.\n\n" +
+        "options: (The default is to assume -r -b)\n" +
+        "\t-t timeout in seconds (default 60s)\n" +
+        "\t-s Send a local file\n" +
+        "\t-r Receive a remote file\n" +
+        "\t-a Use ASCII transfer mode\n" +
+        "\t-b Use binary transfer mode\n" +
+        "\t-v Verbose (trace packets)\n"
+        ;
@@ -50 +70,2 @@ public final class TFTPExample {
-        try {
+        try
+        {
@@ -55 +76,3 @@ public final class TFTPExample {
-        } catch (final IOException e) {
+        }
+        catch (final IOException e)
+        {
@@ -63 +86,2 @@ public final class TFTPExample {
-    public static void main(final String[] args) {
+    public static void main(final String[] args)
+    {
@@ -75 +99,2 @@ public final class TFTPExample {
-        for (argc = 0; argc < args.length; argc++) {
+        for (argc = 0; argc < args.length; argc++)
+        {
@@ -100 +125,2 @@ public final class TFTPExample {
-        if (args.length - argc != 3) {
+        if (args.length - argc != 3)
+        {
@@ -130 +156,2 @@ public final class TFTPExample {
-        if (receiveFile) {
+        if (receiveFile)
+        {
@@ -137 +164 @@ public final class TFTPExample {
-        System.out.println("Recd: " + tftp.getTotalBytesReceived() + " Sent: " + tftp.getTotalBytesSent());
+        System.out.println("Recd: "+tftp.getTotalBytesReceived()+" Sent: "+tftp.getTotalBytesSent());
@@ -148 +175,2 @@ public final class TFTPExample {
-        try {
+        try
+        {
@@ -150 +178,3 @@ public final class TFTPExample {
-        } catch (final SocketException e) {
+        }
+        catch (final SocketException e)
+        {
@@ -155,2 +185,2 @@ public final class TFTPExample {
-    private static boolean receive(final int transferMode, final String hostname, final String localFilename, final String remoteFilename,
-            final TFTPClient tftp) {
+    private static boolean receive(final int transferMode, final String hostname, final String localFilename,
+            final String remoteFilename, final TFTPClient tftp) {
@@ -164 +194,2 @@ public final class TFTPExample {
-        if (file.exists()) {
+        if (file.exists())
+        {
@@ -170 +201,2 @@ public final class TFTPExample {
-        try {
+        try
+        {
@@ -172 +204,3 @@ public final class TFTPExample {
-        } catch (final IOException e) {
+        }
+        catch (final IOException e)
+        {
@@ -180,2 +214,3 @@ public final class TFTPExample {
-        try {
-            final String[] parts = hostname.split(":");
+        try
+        {
+            final String [] parts = hostname.split(":");
@@ -187 +222,3 @@ public final class TFTPExample {
-        } catch (final UnknownHostException e) {
+        }
+        catch (final UnknownHostException e)
+        {
@@ -191,2 +228,5 @@ public final class TFTPExample {
-        } catch (final IOException e) {
-            System.err.println("Error: I/O exception occurred while receiving file.");
+        }
+        catch (final IOException e)
+        {
+            System.err.println(
+                "Error: I/O exception occurred while receiving file.");
@@ -195 +235,3 @@ public final class TFTPExample {
-        } finally {
+        }
+        finally
+        {
@@ -203 +245,2 @@ public final class TFTPExample {
-    private static boolean send(final int transferMode, final String hostname, final String localFilename, final String remoteFilename, final TFTPClient tftp) {
+    private static boolean send(final int transferMode, final String hostname, final String localFilename,
+            final String remoteFilename, final TFTPClient tftp) {
@@ -208 +251,2 @@ public final class TFTPExample {
-        try {
+        try
+        {
@@ -210 +254,3 @@ public final class TFTPExample {
-        } catch (final IOException e) {
+        }
+        catch (final IOException e)
+        {
@@ -218,2 +264,3 @@ public final class TFTPExample {
-        try {
-            final String[] parts = hostname.split(":");
+        try
+        {
+            final String [] parts = hostname.split(":");
@@ -225 +272,3 @@ public final class TFTPExample {
-        } catch (final UnknownHostException e) {
+        }
+        catch (final UnknownHostException e)
+        {
@@ -229 +278,3 @@ public final class TFTPExample {
-        } catch (final IOException e) {
+        }
+        catch (final IOException e)
+        {
@@ -233 +284,3 @@ public final class TFTPExample {
-        } finally {
+        }
+        finally
+        {
@@ -241,0 +295,2 @@ public final class TFTPExample {
+
+
diff --git a/src/main/java/org/apache/commons/net/examples/mail/IMAPExportMbox.java b/src/main/java/org/apache/commons/net/examples/mail/IMAPExportMbox.java
index 3f3d59fee..c6fffd82e 100644
--- a/src/main/java/org/apache/commons/net/examples/mail/IMAPExportMbox.java
+++ b/src/main/java/org/apache/commons/net/examples/mail/IMAPExportMbox.java
@@ -45,2 +45,2 @@ import org.apache.commons.net.imap.IMAPReply;
- * This is an example program demonstrating how to use the IMAP[S]Client class. This program connects to a IMAP[S] server and exports selected messages from a
- * folder into an mbox file.
+ * This is an example program demonstrating how to use the IMAP[S]Client class.
+ * This program connects to a IMAP[S] server and exports selected messages from a folder into an mbox file.
@@ -75 +75,2 @@ import org.apache.commons.net.imap.IMAPReply;
- * The item names are wrapped in parentheses if more than one is provided. Otherwise, the parameter is assumed to be wrapped if necessary.<br>
+ * The item names are wrapped in parentheses if more than one is provided.
+ * Otherwise, the parameter is assumed to be wrapped if necessary.<br>
@@ -77,2 +78,2 @@ import org.apache.commons.net.imap.IMAPReply;
- * Also the listener that writes the mailbox only captures the multi-line responses (e.g. ones that include BODY references). It does not capture the output
- * from FETCH commands using item names such as ENVELOPE or FLAGS that return a single line response.
+ * Also the listener that writes the mailbox only captures the multi-line responses (e.g. ones that include BODY references).
+ * It does not capture the output from FETCH commands using item names such as ENVELOPE or FLAGS that return a single line response.
@@ -80 +81,2 @@ import org.apache.commons.net.imap.IMAPReply;
-public final class IMAPExportMbox {
+public final class IMAPExportMbox
+{
@@ -91 +93 @@ public final class IMAPExportMbox {
-                = new SimpleDateFormat("EEE MMM dd HH:mm:ss yyyy");
+            = new SimpleDateFormat("EEE MMM dd HH:mm:ss yyyy");
@@ -100,2 +102,2 @@ public final class IMAPExportMbox {
-        MboxListener(final BufferedWriter bufferedWriter, final String lineSeparator, final boolean printHash, final boolean printMarker,
-                final boolean checkSequence) {
+        MboxListener(final BufferedWriter bufferedWriter, final String lineSeparator, final boolean printHash,
+            final boolean printMarker, final boolean checkSequence) {
@@ -119 +121 @@ public final class IMAPExportMbox {
-                    received = IDPARSE.parse(date);
+                    received=IDPARSE.parse(date);
@@ -127 +129 @@ public final class IMAPExportMbox {
-            for (int i = 1; i < replyStrings.length - 1; i++) {
+            for(int i=1; i< replyStrings.length - 1; i++) {
@@ -135 +137 @@ public final class IMAPExportMbox {
-                                replyTo = replyTo.substring(1, replyTo.length() - 1); // drop <> wrapper
+                                replyTo = replyTo.substring(1,replyTo.length()-1); // drop <> wrapper
@@ -137 +139 @@ public final class IMAPExportMbox {
-                                System.err.println("Unexpected Return-path: '" + line + "' in " + firstLine);
+                                System.err.println("Unexpected Return-path: '" + line+ "' in " + firstLine);
@@ -157 +159 @@ public final class IMAPExportMbox {
-                for (int i = 1; i < replyStrings.length - 1; i++) {
+                for(int i=1; i< replyStrings.length - 1; i++) {
@@ -159,5 +161,5 @@ public final class IMAPExportMbox {
-                    if (startsWith(line, PATFROM)) {
-                        bufferedWriter.append('>'); // Escape a From_ line
-                    }
-                    bufferedWriter.append(line);
-                    bufferedWriter.append(lineSeparator);
+                        if (startsWith(line, PATFROM)) {
+                            bufferedWriter.append('>'); // Escape a From_ line
+                        }
+                        bufferedWriter.append(line);
+                        bufferedWriter.append(lineSeparator);
@@ -166 +168 @@ public final class IMAPExportMbox {
-                final String lastLine = replyStrings[replyStrings.length - 1];
+                final String lastLine = replyStrings[replyStrings.length-1];
@@ -169 +171 @@ public final class IMAPExportMbox {
-                    bufferedWriter.append(lastLine, 0, lastLength - 1);
+                    bufferedWriter.append(lastLine, 0, lastLength-1);
@@ -186 +188 @@ public final class IMAPExportMbox {
-                            for (long j = lastSeq + 1; j < msgSeq; j++) {
+                            for(long j = lastSeq + 1; j < msgSeq; j++) {
@@ -189 +191,2 @@ public final class IMAPExportMbox {
-                            System.err.println("*** Sequence error: current=" + msgSeq + " previous=" + lastSeq + " Missing=" + missing);
+                            System.err.println(
+                                "*** Sequence error: current=" + msgSeq + " previous=" + lastSeq + " Missing=" + missing);
@@ -207 +209,0 @@ public final class IMAPExportMbox {
-
@@ -213 +215 @@ public final class IMAPExportMbox {
-    // e.g. * nnn (INTERNALDATE "27-Oct-2013 07:43:24 +0000" BODY[] {nn} ...)
+    // e.g. * nnn (INTERNALDATE "27-Oct-2013 07:43:24 +0000"  BODY[] {nn} ...)
@@ -231 +233,2 @@ public final class IMAPExportMbox {
-    public static void main(final String[] args) throws IOException, URISyntaxException {
+    public static void main(final String[] args) throws IOException, URISyntaxException
+    {
@@ -241 +244 @@ public final class IMAPExportMbox {
-        for (argIdx = 0; argIdx < args.length; argIdx++) {
+        for(argIdx = 0; argIdx < args.length; argIdx++) {
@@ -263,3 +266,4 @@ public final class IMAPExportMbox {
-        if (argCount < 2) {
-            System.err.println("Usage: IMAPExportMbox [-LF|-CRLF] [-c n] [-r n] [-R n] [-.] [-X]"
-                    + " imap[s]://user:password@host[:port]/folder/path [+|-]<mboxfile> [sequence-set] [itemnames]");
+        if (argCount < 2)
+        {
+            System.err.println("Usage: IMAPExportMbox [-LF|-CRLF] [-c n] [-r n] [-R n] [-.] [-X]" +
+                               " imap[s]://user:password@host[:port]/folder/path [+|-]<mboxfile> [sequence-set] [itemnames]");
@@ -275,2 +279,2 @@ public final class IMAPExportMbox {
-            System.err.println("\titemnames are the message data item name(s) e.g. BODY.PEEK[HEADER.FIELDS (SUBJECT)]"
-                    + " or a macro e.g. ALL - default (INTERNALDATE BODY.PEEK[])");
+            System.err.println("\titemnames are the message data item name(s) e.g. BODY.PEEK[HEADER.FIELDS (SUBJECT)]" +
+                               " or a macro e.g. ALL - default (INTERNALDATE BODY.PEEK[])");
@@ -284 +288 @@ public final class IMAPExportMbox {
-        } catch (final IllegalArgumentException e) { // cannot parse the path as is; let's pull it apart and try again
+        } catch(final IllegalArgumentException e) { // cannot parse the path as is; let's pull it apart and try again
@@ -292 +296 @@ public final class IMAPExportMbox {
-        final String file = args[argIdx++];
+        final String file  = args[argIdx++];
@@ -300,2 +304,2 @@ public final class IMAPExportMbox {
-                for (int i = 4; i <= argCount; i++) {
-                    if (i > 4) {
+                for(int i=4; i <= argCount; i++) {
+                    if (i>4) {
@@ -322 +326,2 @@ public final class IMAPExportMbox {
-            mboxListener = new MboxListener(new BufferedWriter(new FileWriter(mbox, true)), eol, printHash, printMarker, checkSequence);
+            mboxListener = new MboxListener(
+                new BufferedWriter(new FileWriter(mbox, true)), eol, printHash, printMarker, checkSequence);
@@ -326 +331,2 @@ public final class IMAPExportMbox {
-            mboxListener = new MboxListener(new BufferedWriter(new FileWriter(mbox, false)), eol, printHash, printMarker, checkSequence);
+            mboxListener = new MboxListener(
+                new BufferedWriter(new FileWriter(mbox, false)), eol, printHash, printMarker, checkSequence);
@@ -333 +339,2 @@ public final class IMAPExportMbox {
-            mboxListener = new MboxListener(new BufferedWriter(new FileWriter(mboxFile)), eol, printHash, printMarker, checkSequence);
+            mboxListener = new MboxListener(new BufferedWriter(new FileWriter(mboxFile)), eol, printHash, printMarker,
+                    checkSequence);
@@ -346 +353 @@ public final class IMAPExportMbox {
-                if (event.getReplyCode() != IMAPReply.PARTIAL) { // This is dealt with by the chunk listener
+                if (event.getReplyCode() != IMAPReply.PARTIAL){ // This is dealt with by the chunk listener
@@ -361 +368 @@ public final class IMAPExportMbox {
-            if (!imap.select(folder)) {
+            if (!imap.select(folder)){
@@ -365 +372 @@ public final class IMAPExportMbox {
-            for (final String line : imap.getReplyStrings()) {
+            for(final String line : imap.getReplyStrings()) {
@@ -375,0 +383 @@ public final class IMAPExportMbox {
+
@@ -382 +390 @@ public final class IMAPExportMbox {
-                final String replyString = imap.getReplyString(); // includes EOL
+                final String replyString = imap.getReplyString(); //includes EOL
@@ -384 +392 @@ public final class IMAPExportMbox {
-                    throw new IOException("FETCH " + sequenceSet + " " + itemNames + " failed with " + replyString);
+                    throw new IOException("FETCH " + sequenceSet + " " + itemNames+ " failed with " + replyString);
@@ -387 +395 @@ public final class IMAPExportMbox {
-                sequenceSet = mboxListener.lastSeq + 1 + ":*";
+                sequenceSet = mboxListener.lastSeq+1+":*";
@@ -397 +405,2 @@ public final class IMAPExportMbox {
-            System.err.println("FETCH " + sequenceSet + " " + itemNames + " failed after processing " + count + " complete messages ");
+            System.err.println(
+                    "FETCH " + sequenceSet + " " + itemNames + " failed after processing " + count + " complete messages ");
@@ -399 +408 @@ public final class IMAPExportMbox {
-                System.err.println("Last complete response seen: " + mboxListener.lastFetched);
+                System.err.println("Last complete response seen: "+mboxListener.lastFetched);
@@ -413 +422 @@ public final class IMAPExportMbox {
-                    for (;;) {
+                    for(;;) {
diff --git a/src/main/java/org/apache/commons/net/examples/mail/IMAPImportMbox.java b/src/main/java/org/apache/commons/net/examples/mail/IMAPImportMbox.java
index 37483517b..2214c98d2 100644
--- a/src/main/java/org/apache/commons/net/examples/mail/IMAPImportMbox.java
+++ b/src/main/java/org/apache/commons/net/examples/mail/IMAPImportMbox.java
@@ -34,2 +34,2 @@ import org.apache.commons.net.imap.IMAPClient;
- * This is an example program demonstrating how to use the IMAP[S]Client class. This program connects to a IMAP[S] server and imports messages into the folder
- * from an mbox file.
+ * This is an example program demonstrating how to use the IMAP[S]Client class.
+ * This program connects to a IMAP[S] server and imports messages into the folder from an mbox file.
@@ -48 +48,2 @@ import org.apache.commons.net.imap.IMAPClient;
-public final class IMAPImportMbox {
+public final class IMAPImportMbox
+{
@@ -54 +55 @@ public final class IMAPImportMbox {
-        // From SENDER Fri Sep 13 17:04:01 2019
+                                              // From SENDER Fri Sep 13 17:04:01 2019
@@ -56 +57 @@ public final class IMAPImportMbox {
-        // [Fri] Sep 13 HMS 2019
+        //                                                 [Fri]   Sep      13     HMS   2019
@@ -61 +62 @@ public final class IMAPImportMbox {
-            date = m.group(2) + "-" + m.group(1) + "-" + m.group(4) + " " + m.group(3) + " +0000";
+            date = m.group(2)+"-"+m.group(1)+"-"+m.group(4)+" "+m.group(3)+" +0000";
@@ -68 +68,0 @@ public final class IMAPImportMbox {
-     *
@@ -70 +70 @@ public final class IMAPImportMbox {
-     * @param string   the String to check against
+     * @param string the String to check against
@@ -74 +74 @@ public final class IMAPImportMbox {
-        for (final String entry : contains) {
+        for(final String entry : contains) {
@@ -82,2 +82,4 @@ public final class IMAPImportMbox {
-    public static void main(final String[] args) throws IOException {
-        if (args.length < 2) {
+    public static void main(final String[] args) throws IOException
+    {
+        if (args.length < 2)
+        {
@@ -85,2 +87,2 @@ public final class IMAPImportMbox {
-            System.err
-                    .println("\tWhere: a selector is a list of numbers/number ranges - 1,2,3-10" + " - or a list of strings to match in the initial From line");
+            System.err.println("\tWhere: a selector is a list of numbers/number ranges - 1,2,3-10" +
+                               " - or a list of strings to match in the initial From line");
@@ -90,2 +92,2 @@ public final class IMAPImportMbox {
-        final URI uri = URI.create(args[0]);
-        final String file = args[1];
+        final URI uri      = URI.create(args[0]);
+        final String file  = args[1];
@@ -107 +109 @@ public final class IMAPImportMbox {
-        for (int i = 2; i < args.length; i++) {
+        for(int i = 2; i < args.length; i++) {
@@ -110,2 +112,2 @@ public final class IMAPImportMbox {
-                for (final String entry : arg.split(",")) {
-                    final String[] parts = entry.split("-");
+                for(final String entry : arg.split(",")) {
+                    final String []parts = entry.split("-");
@@ -115 +117 @@ public final class IMAPImportMbox {
-                        for (int j = low; j <= high; j++) {
+                        for(int j=low; j <= high; j++) {
@@ -142 +144 @@ public final class IMAPImportMbox {
-            while ((line = br.readLine()) != null) {
+            while((line=br.readLine())!=null) {
@@ -148 +150 @@ public final class IMAPImportMbox {
-                    total++;
+                    total ++;
@@ -175 +177,2 @@ public final class IMAPImportMbox {
-    private static boolean process(final StringBuilder sb, final IMAPClient imap, final String folder, final int msgNum) throws IOException {
+    private static boolean process(final StringBuilder sb, final IMAPClient imap, final String folder
+            ,final int msgNum) throws IOException {
@@ -179,2 +182,2 @@ public final class IMAPImportMbox {
-            System.out.println("MsgNum: " + msgNum + " Length " + length);
-            sb.setLength(length - 2); // drop trailing CRLF (mbox format has trailing blank line)
+            System.out.println("MsgNum: " + msgNum +" Length " + length);
+            sb.setLength(length-2); // drop trailing CRLF (mbox format has trailing blank line)
@@ -197,3 +200,3 @@ public final class IMAPImportMbox {
-     * @param msgNum   the message number
-     * @param line     the From line
-     * @param msgNums  the list of wanted message numbers
+     * @param msgNum the message number
+     * @param line the From line
+     * @param msgNums the list of wanted message numbers
@@ -205,2 +208,2 @@ public final class IMAPImportMbox {
-                || msgNums.get(msgNum) // matches message number
-                || listContains(contains, line); // contains string
+             || msgNums.get(msgNum) // matches message number
+             || listContains(contains, line); // contains string
diff --git a/src/main/java/org/apache/commons/net/examples/mail/IMAPMail.java b/src/main/java/org/apache/commons/net/examples/mail/IMAPMail.java
index 7ad05b06a..17935f576 100644
--- a/src/main/java/org/apache/commons/net/examples/mail/IMAPMail.java
+++ b/src/main/java/org/apache/commons/net/examples/mail/IMAPMail.java
@@ -27,2 +27,3 @@ import org.apache.commons.net.imap.IMAPClient;
- * This is an example program demonstrating how to use the IMAP[S]Client class. This program connects to a IMAP[S] server, lists its capabilities and shows the
- * status of the Inbox.
+ * This is an example program demonstrating how to use the IMAP[S]Client class.
+ * This program connects to a IMAP[S] server, lists its capabilities and shows
+ * the status of the Inbox.
@@ -37 +38,2 @@ import org.apache.commons.net.imap.IMAPClient;
-public final class IMAPMail {
+public final class IMAPMail
+{
@@ -40,2 +42,4 @@ public final class IMAPMail {
-        if (args.length != 1) {
-            System.err.println("Usage: IMAPMail imap[s]://username:password@server/");
+        if (args.length != 1)
+        {
+            System.err.println(
+                "Usage: IMAPMail imap[s]://username:password@server/");
@@ -63 +67 @@ public final class IMAPMail {
-            imap.status("inbox", new String[] { "MESSAGES" });
+            imap.status("inbox", new String[]{"MESSAGES"});
diff --git a/src/main/java/org/apache/commons/net/examples/mail/IMAPUtils.java b/src/main/java/org/apache/commons/net/examples/mail/IMAPUtils.java
index 7e7f98049..b7711ae82 100644
--- a/src/main/java/org/apache/commons/net/examples/mail/IMAPUtils.java
+++ b/src/main/java/org/apache/commons/net/examples/mail/IMAPUtils.java
@@ -36 +36,2 @@ class IMAPUtils {
-     * @param uri            the URI to use, e.g. imaps://user:pass@imap.mail.yahoo.com/folder or imaps://user:pass@imap.googlemail.com/folder
+     * @param uri the URI to use, e.g. imaps://user:pass@imap.mail.yahoo.com/folder
+     * or imaps://user:pass@imap.googlemail.com/folder
@@ -38 +39 @@ class IMAPUtils {
-     * @param listener       for tracing protocol IO (may be null)
+     * @param listener for tracing protocol IO (may be null)
@@ -42 +43,2 @@ class IMAPUtils {
-    static IMAPClient imapLogin(final URI uri, final int defaultTimeout, final ProtocolCommandListener listener) throws IOException {
+    static IMAPClient imapLogin(final URI uri, final int defaultTimeout, final ProtocolCommandListener listener)
+            throws IOException {
@@ -48 +50 @@ class IMAPUtils {
-        final String[] userpass = userInfo.split(":");
+        final String []userpass = userInfo.split(":");
diff --git a/src/main/java/org/apache/commons/net/examples/mail/POP3ExportMbox.java b/src/main/java/org/apache/commons/net/examples/mail/POP3ExportMbox.java
index 536e65854..5dfe22886 100644
--- a/src/main/java/org/apache/commons/net/examples/mail/POP3ExportMbox.java
+++ b/src/main/java/org/apache/commons/net/examples/mail/POP3ExportMbox.java
@@ -36,2 +36,3 @@ import org.apache.commons.net.pop3.POP3SClient;
- * This is an example program demonstrating how to use the POP3[S]Client class. This program connects to a POP3[S] server and writes the messages to an mbox
- * file.
+ * This is an example program demonstrating how to use the POP3[S]Client class.
+ * This program connects to a POP3[S] server and writes the messages
+ * to an mbox file.
@@ -39,3 +40,4 @@ import org.apache.commons.net.pop3.POP3SClient;
- * The code currently assumes that POP3Client decodes the POP3 data as iso-8859-1. The POP3 standard only allows for ASCII so in theory iso-8859-1 should be OK.
- * However it appears that actual POP3 implementations may return 8bit data that is outside the ASCII range; this may result in loss of data when the mailbox is
- * created.
+ * The code currently assumes that POP3Client decodes the POP3 data as iso-8859-1.
+ * The POP3 standard only allows for ASCII so in theory iso-8859-1 should be OK.
+ * However it appears that actual POP3 implementations may return 8bit data that is
+ * outside the ASCII range; this may result in loss of data when the mailbox is created.
@@ -45 +47,2 @@ import org.apache.commons.net.pop3.POP3SClient;
-public final class POP3ExportMbox {
+public final class POP3ExportMbox
+{
@@ -49 +52,2 @@ public final class POP3ExportMbox {
-    public static void main(final String[] args) {
+    public static void main(final String[] args)
+    {
@@ -52 +56 @@ public final class POP3ExportMbox {
-        for (argIdx = 0; argIdx < args.length; argIdx++) {
+        for(argIdx = 0; argIdx < args.length; argIdx++) {
@@ -60,2 +64,4 @@ public final class POP3ExportMbox {
-        if (argCount < 3) {
-            System.err.println("Usage: POP3Mail [-F file/directory] <server[:port]> <username> <password|-|*|VARNAME> [TLS [true=implicit]]");
+        if (argCount < 3)
+        {
+            System.err.println(
+                "Usage: POP3Mail [-F file/directory] <server[:port]> <username> <password|-|*|VARNAME> [TLS [true=implicit]]");
@@ -66 +72 @@ public final class POP3ExportMbox {
-        final String server = arg0[0];
+        final String server=arg0[0];
@@ -83 +89 @@ public final class POP3ExportMbox {
-            System.out.println("Using secure protocol: " + proto);
+            System.out.println("Using secure protocol: "+proto);
@@ -95 +101 @@ public final class POP3ExportMbox {
-        System.out.println("Connecting to server " + server + " on " + port);
+        System.out.println("Connecting to server "+server+" on "+port);
@@ -100 +106,2 @@ public final class POP3ExportMbox {
-        try {
+        try
+        {
@@ -102 +109,3 @@ public final class POP3ExportMbox {
-        } catch (final IOException e) {
+        }
+        catch (final IOException e)
+        {
@@ -108,2 +117,4 @@ public final class POP3ExportMbox {
-        try {
-            if (!pop3.login(username, password)) {
+        try
+        {
+            if (!pop3.login(username, password))
+            {
@@ -132,2 +143,2 @@ public final class POP3ExportMbox {
-                        try (final OutputStreamWriter fw = new OutputStreamWriter(new FileOutputStream(new File(mbox, i + ".eml")),
-                                StandardCharsets.ISO_8859_1)) {
+                        try (final OutputStreamWriter fw = new OutputStreamWriter(
+                                new FileOutputStream(new File(mbox, i + ".eml")), StandardCharsets.ISO_8859_1)) {
@@ -140 +151,2 @@ public final class POP3ExportMbox {
-                    try (final OutputStreamWriter fw = new OutputStreamWriter(new FileOutputStream(mbox), StandardCharsets.ISO_8859_1)) {
+                    try (final OutputStreamWriter fw = new OutputStreamWriter(new FileOutputStream(mbox),
+                            StandardCharsets.ISO_8859_1)) {
@@ -150 +162,3 @@ public final class POP3ExportMbox {
-        } catch (final IOException e) {
+        }
+        catch (final IOException e)
+        {
@@ -193,0 +208 @@ public final class POP3ExportMbox {
+
diff --git a/src/main/java/org/apache/commons/net/examples/mail/POP3Mail.java b/src/main/java/org/apache/commons/net/examples/mail/POP3Mail.java
index 29b170ec2..af6940360 100644
--- a/src/main/java/org/apache/commons/net/examples/mail/POP3Mail.java
+++ b/src/main/java/org/apache/commons/net/examples/mail/POP3Mail.java
@@ -31,2 +31,4 @@ import org.apache.commons.net.pop3.POP3SClient;
- * This is an example program demonstrating how to use the POP3[S]Client class. This program connects to a POP3[S] server and retrieves the message headers of
- * all the messages, printing the From: and Subject: header entries for each message.
+ * This is an example program demonstrating how to use the POP3[S]Client class.
+ * This program connects to a POP3[S] server and retrieves the message
+ * headers of all the messages, printing the From: and Subject: header
+ * entries for each message.
@@ -36,5 +38,9 @@ import org.apache.commons.net.pop3.POP3SClient;
-public final class POP3Mail {
-
-    public static void main(final String[] args) {
-        if (args.length < 3) {
-            System.err.println("Usage: POP3Mail <server[:port]> <username> <password|-|*|VARNAME> [TLS [true=implicit]]");
+public final class POP3Mail
+{
+
+    public static void main(final String[] args)
+    {
+        if (args.length < 3)
+        {
+            System.err.println(
+                "Usage: POP3Mail <server[:port]> <username> <password|-|*|VARNAME> [TLS [true=implicit]]");
@@ -45 +51 @@ public final class POP3Mail {
-        final String server = arg0[0];
+        final String server=arg0[0];
@@ -62 +68 @@ public final class POP3Mail {
-            System.out.println("Using secure protocol: " + proto);
+            System.out.println("Using secure protocol: "+proto);
@@ -74 +80 @@ public final class POP3Mail {
-        System.out.println("Connecting to server " + server + " on " + port);
+        System.out.println("Connecting to server "+server+" on "+port);
@@ -82 +88,2 @@ public final class POP3Mail {
-        try {
+        try
+        {
@@ -84 +91,3 @@ public final class POP3Mail {
-        } catch (final IOException e) {
+        }
+        catch (final IOException e)
+        {
@@ -90,2 +99,4 @@ public final class POP3Mail {
-        try {
-            if (!pop3.login(username, password)) {
+        try
+        {
+            if (!pop3.login(username, password))
+            {
@@ -109 +120,2 @@ public final class POP3Mail {
-            if (messages == null) {
+            if (messages == null)
+            {
@@ -115 +127,2 @@ public final class POP3Mail {
-            if (messages.length == 0) {
+            if (messages.length == 0)
+            {
@@ -138 +151,3 @@ public final class POP3Mail {
-        } catch (final IOException e) {
+        }
+        catch (final IOException e)
+        {
@@ -144 +159 @@ public final class POP3Mail {
-    public static void printMessageInfo(final BufferedReader reader, final int id) throws IOException {
+    public static void printMessageInfo(final BufferedReader reader, final int id) throws IOException  {
@@ -148 +163,2 @@ public final class POP3Mail {
-        while ((line = reader.readLine()) != null) {
+        while ((line = reader.readLine()) != null)
+        {
@@ -152 +168 @@ public final class POP3Mail {
-            } else if (lower.startsWith("subject: ")) {
+            }  else if (lower.startsWith("subject: ")) {
@@ -159,0 +176 @@ public final class POP3Mail {
+
diff --git a/src/main/java/org/apache/commons/net/examples/mail/SMTPMail.java b/src/main/java/org/apache/commons/net/examples/mail/SMTPMail.java
index 366c7b48e..c7a1f3816 100644
--- a/src/main/java/org/apache/commons/net/examples/mail/SMTPMail.java
+++ b/src/main/java/org/apache/commons/net/examples/mail/SMTPMail.java
@@ -37,2 +37,3 @@ import org.apache.commons.net.smtp.SimpleSMTPHeader;
- * This is an example program using the SMTP package to send a message to the specified recipients. It prompts you for header information and a file name
- * containing the message.
+ * This is an example program using the SMTP package to send a message
+ * to the specified recipients.  It prompts you for header information and
+ * a file name containing the message.
@@ -41 +42,2 @@ import org.apache.commons.net.smtp.SimpleSMTPHeader;
-public final class SMTPMail {
+public final class SMTPMail
+{
@@ -43 +45,2 @@ public final class SMTPMail {
-    public static void main(final String[] args) {
+    public static void main(final String[] args)
+    {
@@ -57 +60,2 @@ public final class SMTPMail {
-        if (args.length < 1) {
+        if (args.length < 1)
+        {
@@ -66 +70,2 @@ public final class SMTPMail {
-        try {
+        try
+        {
@@ -84 +89,3 @@ public final class SMTPMail {
-            while (true) {
+
+            while (true)
+            {
@@ -90 +97 @@ public final class SMTPMail {
-                if (cc == null || cc.isEmpty()) {
+                if (cc== null || cc.isEmpty()) {
@@ -103 +110,2 @@ public final class SMTPMail {
-            try {
+            try
+            {
@@ -105 +113,3 @@ public final class SMTPMail {
-            } catch (final FileNotFoundException e) {
+            }
+            catch (final FileNotFoundException e)
+            {
@@ -110 +120,2 @@ public final class SMTPMail {
-            client.addProtocolCommandListener(new PrintCommandListener(new PrintWriter(System.out), true));
+            client.addProtocolCommandListener(new PrintCommandListener(
+                                                  new PrintWriter(System.out), true));
@@ -114 +125,2 @@ public final class SMTPMail {
-            if (!SMTPReply.isPositiveCompletion(client.getReplyCode())) {
+            if (!SMTPReply.isPositiveCompletion(client.getReplyCode()))
+            {
@@ -124,0 +137,2 @@ public final class SMTPMail {
+
+
@@ -131 +145,2 @@ public final class SMTPMail {
-            if (writer != null) {
+            if (writer != null)
+            {
@@ -138 +153 @@ public final class SMTPMail {
-            if (fileReader != null) {
+            if (fileReader != null ) {
@@ -145 +160,3 @@ public final class SMTPMail {
-        } catch (final IOException e) {
+        }
+        catch (final IOException e)
+        {
@@ -150,0 +168,2 @@ public final class SMTPMail {
+
+
diff --git a/src/main/java/org/apache/commons/net/examples/mail/Utils.java b/src/main/java/org/apache/commons/net/examples/mail/Utils.java
index 8f9c4b4e6..92bba30d7 100644
--- a/src/main/java/org/apache/commons/net/examples/mail/Utils.java
+++ b/src/main/java/org/apache/commons/net/examples/mail/Utils.java
@@ -32,2 +32,4 @@ class Utils {
-     * If the initial password is: '*' - replace it with a line read from the system console '-' - replace it with next line from STDIN 'ABCD' - if the input is
-     * all upper case, use the field as an environment variable name
+     * If the initial password is:
+     * '*' - replace it with a line read from the system console
+     * '-' - replace it with next line from STDIN
+     * 'ABCD' - if the input is all upper case, use the field as an environment variable name
@@ -37 +39,2 @@ class Utils {
-     * Even using the console may be subject to memory snooping, however it should be safer than the other methods.
+     * Even using the console may be subject to memory snooping,
+     * however it should be safer than the other methods.
@@ -39 +42,2 @@ class Utils {
-     * STDIN may require creating a temporary file which could be read by others Environment variables may be visible by using PS
+     * STDIN may require creating a temporary file which could be read by others
+     * Environment variables may be visible by using PS
@@ -55 +59 @@ class Utils {
-                password = tmp;
+                password=tmp;
diff --git a/src/main/java/org/apache/commons/net/examples/nntp/ArticleReader.java b/src/main/java/org/apache/commons/net/examples/nntp/ArticleReader.java
index 7f8a1e55a..981a4d003 100644
--- a/src/main/java/org/apache/commons/net/examples/nntp/ArticleReader.java
+++ b/src/main/java/org/apache/commons/net/examples/nntp/ArticleReader.java
@@ -53 +53 @@ public class ArticleReader {
-            if (!client.authenticate(user, password)) {
+            if(!client.authenticate(user, password)) {
@@ -71 +71 @@ public class ArticleReader {
-            while ((line = brHdr.readLine()) != null) {
+            while((line=brHdr.readLine()) != null) {
@@ -84 +84 @@ public class ArticleReader {
-            while ((line = brBody.readLine()) != null) {
+            while((line=brBody.readLine()) != null) {
diff --git a/src/main/java/org/apache/commons/net/examples/nntp/ExtendedNNTPOps.java b/src/main/java/org/apache/commons/net/examples/nntp/ExtendedNNTPOps.java
index 9018ce6c4..4e2961ec6 100644
--- a/src/main/java/org/apache/commons/net/examples/nntp/ExtendedNNTPOps.java
+++ b/src/main/java/org/apache/commons/net/examples/nntp/ExtendedNNTPOps.java
@@ -27,0 +28 @@ import org.apache.commons.net.nntp.NewsgroupInfo;
+
@@ -32,0 +34 @@ public class ExtendedNNTPOps {
+
@@ -43 +45 @@ public class ExtendedNNTPOps {
-        ops.demo(args[0], argc >= 3 ? args[1] : null, argc >= 3 ? args[2] : null);
+        ops.demo(args[0], argc >=3 ? args[1] : null, argc >=3 ? args[2] : null);
@@ -47,0 +50 @@ public class ExtendedNNTPOps {
+
@@ -71 +74 @@ public class ExtendedNNTPOps {
-            final long highArticleNumber = lowArticleNumber + 100;
+            final long  highArticleNumber = lowArticleNumber + 100;
@@ -76 +79 @@ public class ExtendedNNTPOps {
-                    System.out.println("Could not parse: " + article.getSubject());
+                    System.out.println("Could not parse: "+article.getSubject());
@@ -84 +87,2 @@ public class ExtendedNNTPOps {
-            for (final NewsgroupInfo fanGroup : fanGroups) {
+            for (final NewsgroupInfo fanGroup : fanGroups)
+            {
diff --git a/src/main/java/org/apache/commons/net/examples/nntp/ListNewsgroups.java b/src/main/java/org/apache/commons/net/examples/nntp/ListNewsgroups.java
index 515fa403d..b870475c8 100644
--- a/src/main/java/org/apache/commons/net/examples/nntp/ListNewsgroups.java
+++ b/src/main/java/org/apache/commons/net/examples/nntp/ListNewsgroups.java
@@ -26,3 +26,5 @@ import org.apache.commons.net.nntp.NewsgroupInfo;
- * This is a trivial example using the NNTP package to approximate the Unix newsgroups command. It merely connects to the specified news server and issues
- * fetches the list of newsgroups stored by the server. On servers that store a lot of newsgroups, this command can take a very long time (listing upwards of
- * 30,000 groups).
+ * This is a trivial example using the NNTP package to approximate the
+ * Unix newsgroups command.  It merely connects to the specified news
+ * server and issues fetches the list of newsgroups stored by the server.
+ * On servers that store a lot of newsgroups, this command can take a very
+ * long time (listing upwards of 30,000 groups).
@@ -31 +33,2 @@ import org.apache.commons.net.nntp.NewsgroupInfo;
-public final class ListNewsgroups {
+public final class ListNewsgroups
+{
@@ -33,2 +36,4 @@ public final class ListNewsgroups {
-    public static void main(final String[] args) {
-        if (args.length < 1) {
+    public static void main(final String[] args)
+    {
+        if (args.length < 1)
+        {
@@ -42 +47,2 @@ public final class ListNewsgroups {
-        try {
+        try
+        {
@@ -47 +53 @@ public final class ListNewsgroups {
-                for (final String s : client.iterateNewsgroupListing(pattern)) {
+                for(final String s : client.iterateNewsgroupListing(pattern)) {
@@ -57 +63 @@ public final class ListNewsgroups {
-            for (final NewsgroupInfo n : client.iterateNewsgroups(pattern)) {
+            for(final NewsgroupInfo n : client.iterateNewsgroups(pattern)) {
@@ -62 +68,3 @@ public final class ListNewsgroups {
-        } catch (final IOException e) {
+        }
+        catch (final IOException e)
+        {
@@ -64,2 +72,5 @@ public final class ListNewsgroups {
-        } finally {
-            try {
+        }
+        finally
+        {
+            try
+            {
@@ -69 +80,3 @@ public final class ListNewsgroups {
-            } catch (final IOException e) {
+            }
+            catch (final IOException e)
+            {
@@ -78,0 +92,2 @@ public final class ListNewsgroups {
+
+
diff --git a/src/main/java/org/apache/commons/net/examples/nntp/MessageThreading.java b/src/main/java/org/apache/commons/net/examples/nntp/MessageThreading.java
index 5be1bdb3d..547ede82d 100644
--- a/src/main/java/org/apache/commons/net/examples/nntp/MessageThreading.java
+++ b/src/main/java/org/apache/commons/net/examples/nntp/MessageThreading.java
@@ -17,0 +18 @@
+
@@ -51 +52 @@ public class MessageThreading {
-            if (!client.authenticate(user, password)) {
+            if(!client.authenticate(user, password)) {
@@ -60 +61 @@ public class MessageThreading {
-            for (final String s : fmt) {
+            for(final String s : fmt) {
@@ -77 +78 @@ public class MessageThreading {
-        final Article root = (Article) threader.thread(articles);
+        final Article root = (Article)threader.thread(articles);
diff --git a/src/main/java/org/apache/commons/net/examples/nntp/NNTPUtils.java b/src/main/java/org/apache/commons/net/examples/nntp/NNTPUtils.java
index cc6b91e62..def8b59ea 100644
--- a/src/main/java/org/apache/commons/net/examples/nntp/NNTPUtils.java
+++ b/src/main/java/org/apache/commons/net/examples/nntp/NNTPUtils.java
@@ -32,4 +32,4 @@ public class NNTPUtils {
-     * Given an {@link NNTPClient} instance, and an integer range of messages, return an array of {@link Article} instances.
-     *
-     * @param client            the client to use
-     * @param lowArticleNumber  low number
+     * Given an {@link NNTPClient} instance, and an integer range of messages, return
+     * an array of {@link Article} instances.
+     * @param client the client to use
+     * @param lowArticleNumber low number
@@ -40 +40,2 @@ public class NNTPUtils {
-    public static List<Article> getArticleInfo(final NNTPClient client, final long lowArticleNumber, final long highArticleNumber) throws IOException {
+    public  static List<Article> getArticleInfo(final NNTPClient client, final long lowArticleNumber, final long highArticleNumber)
+    throws IOException {
@@ -43 +44 @@ public class NNTPUtils {
-        for (final Article article : arts) {
+        for(final Article article : arts){
diff --git a/src/main/java/org/apache/commons/net/examples/nntp/PostMessage.java b/src/main/java/org/apache/commons/net/examples/nntp/PostMessage.java
index 9b2f71686..78d687720 100644
--- a/src/main/java/org/apache/commons/net/examples/nntp/PostMessage.java
+++ b/src/main/java/org/apache/commons/net/examples/nntp/PostMessage.java
@@ -33,0 +34 @@ import org.apache.commons.net.nntp.SimpleNNTPHeader;
+
@@ -35,2 +36,3 @@ import org.apache.commons.net.nntp.SimpleNNTPHeader;
- * This is an example program using the NNTP package to post an article to the specified newsgroup(s). It prompts you for header information and a file name to
- * post.
+ * This is an example program using the NNTP package to post an article
+ * to the specified newsgroup(s).  It prompts you for header information and
+ * a file name to post.
@@ -39 +41,2 @@ import org.apache.commons.net.nntp.SimpleNNTPHeader;
-public final class PostMessage {
+public final class PostMessage
+{
@@ -41 +44,2 @@ public final class PostMessage {
-    public static void main(final String[] args) {
+    public static void main(final String[] args)
+    {
@@ -54 +58,2 @@ public final class PostMessage {
-        if (args.length < 1) {
+        if (args.length < 1)
+        {
@@ -63 +68,2 @@ public final class PostMessage {
-        try {
+        try
+        {
@@ -82 +88,2 @@ public final class PostMessage {
-            while (true) {
+            while (true)
+            {
@@ -125 +132,2 @@ public final class PostMessage {
-            try {
+            try
+            {
@@ -127 +135,3 @@ public final class PostMessage {
-            } catch (final FileNotFoundException e) {
+            }
+            catch (final FileNotFoundException e)
+            {
@@ -133 +143,2 @@ public final class PostMessage {
-            client.addProtocolCommandListener(new PrintCommandListener(new PrintWriter(System.out), true));
+            client.addProtocolCommandListener(new PrintCommandListener(
+                                                  new PrintWriter(System.out), true));
@@ -137 +148,2 @@ public final class PostMessage {
-            if (!NNTPReply.isPositiveCompletion(client.getReplyCode())) {
+            if (!NNTPReply.isPositiveCompletion(client.getReplyCode()))
+            {
@@ -143 +155,2 @@ public final class PostMessage {
-            if (client.isAllowedToPost()) {
+            if (client.isAllowedToPost())
+            {
@@ -146 +159,2 @@ public final class PostMessage {
-                if (writer != null) {
+                if (writer != null)
+                {
@@ -159 +173,3 @@ public final class PostMessage {
-        } catch (final IOException e) {
+        }
+        catch (final IOException e)
+        {
@@ -164,0 +181,2 @@ public final class PostMessage {
+
+
diff --git a/src/main/java/org/apache/commons/net/examples/ntp/NTPClient.java b/src/main/java/org/apache/commons/net/examples/ntp/NTPClient.java
index 562e05d18..2c753c43b 100644
--- a/src/main/java/org/apache/commons/net/examples/ntp/NTPClient.java
+++ b/src/main/java/org/apache/commons/net/examples/ntp/NTPClient.java
@@ -33,3 +33,8 @@ import org.apache.commons.net.ntp.TimeStamp;
- * This is an example program demonstrating how to use the NTPUDPClient class. This program sends a Datagram client request packet to a Network time Protocol
- * (NTP) service port on a specified server, retrieves the time, and prints it to standard output along with the fields from the NTP message header (e.g.
- * stratum level, reference id, poll interval, root delay, mode, ...) See <A HREF="ftp://ftp.rfc-editor.org/in-notes/rfc868.txt"> the spec </A> for details.
+ * This is an example program demonstrating how to use the NTPUDPClient
+ * class. This program sends a Datagram client request packet to a
+ * Network time Protocol (NTP) service port on a specified server,
+ * retrieves the time, and prints it to standard output along with
+ * the fields from the NTP message header (e.g. stratum level, reference id,
+ * poll interval, root delay, mode, ...)
+ * See <A HREF="ftp://ftp.rfc-editor.org/in-notes/rfc868.txt"> the spec </A>
+ * for details.
@@ -43 +48,2 @@ import org.apache.commons.net.ntp.TimeStamp;
-public final class NTPClient {
+public final class NTPClient
+{
@@ -47 +53,2 @@ public final class NTPClient {
-    public static void main(final String[] args) {
+    public static void main(final String[] args)
+    {
@@ -58 +65,2 @@ public final class NTPClient {
-            for (final String arg : args) {
+            for (final String arg : args)
+            {
@@ -78 +85,0 @@ public final class NTPClient {
-     *
@@ -81 +88,2 @@ public final class NTPClient {
-    public static void processResponse(final TimeInfo info) {
+    public static void processResponse(final TimeInfo info)
+    {
@@ -96 +104,2 @@ public final class NTPClient {
-        System.out.println(" leap=" + li + ", version=" + version + ", precision=" + message.getPrecision());
+        System.out.println(" leap=" + li + ", version="
+                + version + ", precision=" + message.getPrecision());
@@ -101 +110,2 @@ public final class NTPClient {
-        System.out.println(" poll: " + (poll <= 0 ? 1 : (int) Math.pow(2, poll)) + " seconds" + " (2 ** " + poll + ")");
+        System.out.println(" poll: " + (poll <= 0 ? 1 : (int) Math.pow(2, poll))
+                + " seconds" + " (2 ** " + poll + ")");
@@ -103 +113,2 @@ public final class NTPClient {
-        System.out.println(" rootdelay=" + numberFormat.format(message.getRootDelayInMillisDouble()) + ", rootdispersion(ms): " + numberFormat.format(disp));
+        System.out.println(" rootdelay=" + numberFormat.format(message.getRootDelayInMillisDouble())
+                + ", rootdispersion(ms): " + numberFormat.format(disp));
@@ -166 +177,2 @@ public final class NTPClient {
-        System.out.println(" Roundtrip delay(ms)=" + delay + ", clock offset(ms)=" + offset); // offset in ms
+        System.out.println(" Roundtrip delay(ms)=" + delay
+                + ", clock offset(ms)=" + offset); // offset in ms
diff --git a/src/main/java/org/apache/commons/net/examples/ntp/SimpleNTPServer.java b/src/main/java/org/apache/commons/net/examples/ntp/SimpleNTPServer.java
index cd10bb534..594578433 100644
--- a/src/main/java/org/apache/commons/net/examples/ntp/SimpleNTPServer.java
+++ b/src/main/java/org/apache/commons/net/examples/ntp/SimpleNTPServer.java
@@ -29,3 +29,6 @@ import org.apache.commons.net.ntp.TimeStamp;
- * The SimpleNTPServer class is a UDP implementation of a server for the Network Time Protocol (NTP) version 3 as described in RFC 1305. It is a minimal NTP
- * server that doesn't actually adjust the time but only responds to NTP datagram requests with response sent back to originating host with info filled out
- * using the current clock time. To be used for debugging or testing.
+ * The SimpleNTPServer class is a UDP implementation of a server for the
+ * Network Time Protocol (NTP) version 3 as described in RFC 1305.
+ * It is a minimal NTP server that doesn't actually adjust the time but
+ * only responds to NTP datagram requests with response sent back to
+ * originating host with info filled out using the current clock time.
+ * To be used for debugging or testing.
@@ -33 +36,2 @@ import org.apache.commons.net.ntp.TimeStamp;
- * To prevent this from interfering with the actual NTP service it can be run from any local port.
+ * To prevent this from interfering with the actual NTP service it can be
+ * run from any local port.
@@ -37 +41,2 @@ public class SimpleNTPServer implements Runnable {
-    public static void main(final String[] args) {
+    public static void main(final String[] args)
+    {
@@ -39 +44,2 @@ public class SimpleNTPServer implements Runnable {
-        if (args.length != 0) {
+        if (args.length != 0)
+        {
@@ -53 +58,0 @@ public class SimpleNTPServer implements Runnable {
-
@@ -63 +68,2 @@ public class SimpleNTPServer implements Runnable {
-    public SimpleNTPServer() {
+    public SimpleNTPServer()
+    {
@@ -70 +76,2 @@ public class SimpleNTPServer implements Runnable {
-     * @param port the local port the server socket is bound to, or <code>zero</code> for a system selected free port.
+     * @param port the local port the server socket is bound to, or
+     *             <code>zero</code> for a system selected free port.
@@ -73 +80,2 @@ public class SimpleNTPServer implements Runnable {
-    public SimpleNTPServer(final int port) {
+    public SimpleNTPServer(final int port)
+    {
@@ -85,2 +93,4 @@ public class SimpleNTPServer implements Runnable {
-    public void connect() throws IOException {
-        if (socket == null) {
+    public void connect() throws IOException
+    {
+        if (socket == null)
+        {
@@ -96 +106,2 @@ public class SimpleNTPServer implements Runnable {
-    public int getPort() {
+    public int getPort()
+    {
@@ -101 +112,2 @@ public class SimpleNTPServer implements Runnable {
-     * Handles incoming packet. If NTP packet is client-mode then respond to that host with a NTP response packet otherwise ignore.
+     * Handles incoming packet. If NTP packet is client-mode then respond
+     * to that host with a NTP response packet otherwise ignore.
@@ -106 +118 @@ public class SimpleNTPServer implements Runnable {
-     * @throws IOException if an I/O error occurs.
+     * @throws IOException  if an I/O error occurs.
@@ -108 +120,2 @@ public class SimpleNTPServer implements Runnable {
-    protected void handlePacket(final DatagramPacket request, final long rcvTime) throws IOException {
+    protected void handlePacket(final DatagramPacket request, final long rcvTime) throws IOException
+    {
@@ -111 +124,2 @@ public class SimpleNTPServer implements Runnable {
-        System.out.printf("NTP packet from %s mode=%s%n", request.getAddress().getHostAddress(), NtpUtils.getModeName(message.getMode()));
+        System.out.printf("NTP packet from %s mode=%s%n", request.getAddress().getHostAddress(),
+                NtpUtils.getModeName(message.getMode()));
@@ -146 +160,2 @@ public class SimpleNTPServer implements Runnable {
-    public boolean isRunning() {
+    public boolean isRunning()
+    {
@@ -155 +170,2 @@ public class SimpleNTPServer implements Runnable {
-    public boolean isStarted() {
+    public boolean isStarted()
+    {
@@ -163 +179,2 @@ public class SimpleNTPServer implements Runnable {
-    public void run() {
+    public void run()
+    {
@@ -173 +190,2 @@ public class SimpleNTPServer implements Runnable {
-                if (running) {
+                if (running)
+                {
@@ -186,2 +204,4 @@ public class SimpleNTPServer implements Runnable {
-    public void start() throws IOException {
-        if (socket == null) {
+    public void start() throws IOException
+    {
+        if (socket == null)
+        {
@@ -190 +210,2 @@ public class SimpleNTPServer implements Runnable {
-        if (!started) {
+        if (!started)
+        {
@@ -199 +220,2 @@ public class SimpleNTPServer implements Runnable {
-    public void stop() {
+    public void stop()
+    {
@@ -201,2 +223,3 @@ public class SimpleNTPServer implements Runnable {
-        if (socket != null) {
-            socket.close(); // force closing of the socket
+        if (socket != null)
+        {
+            socket.close();  // force closing of the socket
diff --git a/src/main/java/org/apache/commons/net/examples/ntp/TimeClient.java b/src/main/java/org/apache/commons/net/examples/ntp/TimeClient.java
index 3d5619d45..3eb56c375 100644
--- a/src/main/java/org/apache/commons/net/examples/ntp/TimeClient.java
+++ b/src/main/java/org/apache/commons/net/examples/ntp/TimeClient.java
@@ -27,3 +27,7 @@ import org.apache.commons.net.time.TimeUDPClient;
- * This is an example program demonstrating how to use the TimeTCPClient and TimeUDPClient classes. This program connects to the default time service port of a
- * specified server, retrieves the time, and prints it to standard output. See <A HREF="ftp://ftp.rfc-editor.org/in-notes/rfc868.txt"> the spec </A> for
- * details. The default is to use the TCP port. Use the -udp flag to use the UDP port.
+ * This is an example program demonstrating how to use the TimeTCPClient
+ * and TimeUDPClient classes.
+ * This program connects to the default time service port of a
+ * specified server, retrieves the time, and prints it to standard output.
+ * See <A HREF="ftp://ftp.rfc-editor.org/in-notes/rfc868.txt"> the spec </A>
+ * for details.  The default is to use the TCP port.  Use the -udp flag to
+ * use the UDP port.
@@ -34 +38,2 @@ import org.apache.commons.net.time.TimeUDPClient;
-public final class TimeClient {
+public final class TimeClient
+{
@@ -36 +41,2 @@ public final class TimeClient {
-    public static void main(final String[] args) {
+    public static void main(final String[] args)
+    {
@@ -38,2 +44,4 @@ public final class TimeClient {
-        if (args.length == 1) {
-            try {
+        if (args.length == 1)
+        {
+            try
+            {
@@ -41 +49,3 @@ public final class TimeClient {
-            } catch (final IOException e) {
+            }
+            catch (final IOException e)
+            {
@@ -45,2 +55,5 @@ public final class TimeClient {
-        } else if (args.length == 2 && args[0].equals("-udp")) {
-            try {
+        }
+        else if (args.length == 2 && args[0].equals("-udp"))
+        {
+            try
+            {
@@ -48 +61,3 @@ public final class TimeClient {
-            } catch (final IOException e) {
+            }
+            catch (final IOException e)
+            {
@@ -52 +67,3 @@ public final class TimeClient {
-        } else {
+        }
+        else
+        {
@@ -59 +76,2 @@ public final class TimeClient {
-    public static void timeTCP(final String host) throws IOException {
+    public static void timeTCP(final String host) throws IOException
+    {
@@ -61,8 +79,8 @@ public final class TimeClient {
-        try {
-            // We want to timeout if a response takes longer than 60 seconds
-            client.setDefaultTimeout(60000);
-            client.connect(host);
-            System.out.println(client.getDate());
-        } finally {
-            client.disconnect();
-        }
+    try {
+          // We want to timeout if a response takes longer than 60 seconds
+          client.setDefaultTimeout(60000);
+      client.connect(host);
+          System.out.println(client.getDate());
+    } finally {
+          client.disconnect();
+    }
@@ -71 +89,2 @@ public final class TimeClient {
-    public static void timeUDP(final String host) throws IOException {
+    public static void timeUDP(final String host) throws IOException
+    {
@@ -81,0 +101 @@ public final class TimeClient {
+
diff --git a/src/main/java/org/apache/commons/net/examples/telnet/TelnetClientExample.java b/src/main/java/org/apache/commons/net/examples/telnet/TelnetClientExample.java
index 13f94c7eb..804bf6739 100644
--- a/src/main/java/org/apache/commons/net/examples/telnet/TelnetClientExample.java
+++ b/src/main/java/org/apache/commons/net/examples/telnet/TelnetClientExample.java
@@ -33,0 +34 @@ import org.apache.commons.net.telnet.TerminalTypeOptionHandler;
+
@@ -35,2 +36,5 @@ import org.apache.commons.net.telnet.TerminalTypeOptionHandler;
- * This is a simple example of use of TelnetClient. An external option handler (SimpleTelnetOptionHandler) is used. Initial configuration requested by
- * TelnetClient will be: WILL ECHO, WILL SUPPRESS-GA, DO SUPPRESS-GA. VT100 terminal type will be subnegotiated.
+ * This is a simple example of use of TelnetClient.
+ * An external option handler (SimpleTelnetOptionHandler) is used.
+ * Initial configuration requested by TelnetClient will be:
+ * WILL ECHO, WILL SUPPRESS-GA, DO SUPPRESS-GA.
+ * VT100 terminal type will be subnegotiated.
@@ -38,2 +42,5 @@ import org.apache.commons.net.telnet.TerminalTypeOptionHandler;
- * Also, use of the sendAYT(), getLocalOptionState(), getRemoteOptionState() is demonstrated. When connected, type AYT to send an AYT command to the server and
- * see the result. Type OPT to see a report of the state of the first 25 options.
+ * Also, use of the sendAYT(), getLocalOptionState(), getRemoteOptionState()
+ * is demonstrated.
+ * When connected, type AYT to send an AYT command to the server and see
+ * the result.
+ * Type OPT to see a report of the state of the first 25 options.
@@ -41 +48,2 @@ import org.apache.commons.net.telnet.TerminalTypeOptionHandler;
-public class TelnetClientExample implements Runnable, TelnetNotificationHandler {
+public class TelnetClientExample implements Runnable, TelnetNotificationHandler
+{
@@ -46 +53,0 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-     *
@@ -50 +57,2 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-    public static void main(final String[] args) throws Exception {
+    public static void main(final String[] args) throws Exception
+    {
@@ -53 +61,2 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-        if (args.length < 1) {
+        if(args.length < 1)
+        {
@@ -62 +71,2 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-        if (args.length > 1) {
+        if (args.length > 1)
+        {
@@ -64 +74,3 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-        } else {
+        }
+        else
+        {
@@ -68,4 +80,9 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-        try {
-            fout = new FileOutputStream("spy.log", true);
-        } catch (final IOException e) {
-            System.err.println("Exception while opening the spy file: " + e.getMessage());
+        try
+        {
+            fout = new FileOutputStream ("spy.log", true);
+        }
+        catch (final IOException e)
+        {
+            System.err.println(
+                "Exception while opening the spy file: "
+                + e.getMessage());
@@ -80 +97,2 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-        try {
+        try
+        {
@@ -84 +102,3 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-        } catch (final InvalidTelnetOptionException e) {
+        }
+        catch (final InvalidTelnetOptionException e)
+        {
@@ -88 +108,2 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-        while (true) {
+        while (true)
+        {
@@ -90 +111,2 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-            try {
+            try
+            {
@@ -93 +115,2 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-                final Thread reader = new Thread(new TelnetClientExample());
+
+                final Thread reader = new Thread (new TelnetClientExample());
@@ -110,2 +133,4 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-                do {
-                    try {
+                do
+                {
+                    try
+                    {
@@ -113 +138,2 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-                        if (ret_read > 0) {
+                        if(ret_read > 0)
+                        {
@@ -115,2 +141,4 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-                            if (line.startsWith("AYT")) {
-                                try {
+                            if(line.startsWith("AYT"))
+                            {
+                                try
+                                {
@@ -120,2 +147,0 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-                                } catch (final IOException e) {
-                                    System.err.println("Exception waiting AYT response: " + e.getMessage());
@@ -123,5 +149,3 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-                            } else if (line.startsWith("OPT")) {
-                                System.out.println("Status of options:");
-                                for (int ii = 0; ii < 25; ii++) {
-                                    System.out.println("Local Option " + ii + ":" + tc.getLocalOptionState(ii) + " Remote Option " + ii + ":"
-                                            + tc.getRemoteOptionState(ii));
+                                catch (final IOException e)
+                                {
+                                    System.err.println("Exception waiting AYT response: " + e.getMessage());
@@ -129 +153,11 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-                            } else if (line.startsWith("REGISTER")) {
+                            }
+                            else if(line.startsWith("OPT"))
+                            {
+                                 System.out.println("Status of options:");
+                                 for(int ii=0; ii<25; ii++) {
+                                     System.out.println("Local Option " + ii + ":" + tc.getLocalOptionState(ii) +
+                                                        " Remote Option " + ii + ":" + tc.getRemoteOptionState(ii));
+                                 }
+                            }
+                            else if(line.startsWith("REGISTER"))
+                            {
@@ -131 +165,2 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-                                try {
+                                try
+                                {
@@ -138 +173,2 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-                                    final SimpleOptionHandler opthand = new SimpleOptionHandler(opcode, initlocal, initremote, acceptlocal, acceptremote);
+                                    final SimpleOptionHandler opthand = new SimpleOptionHandler(opcode, initlocal, initremote,
+                                                                    acceptlocal, acceptremote);
@@ -140,2 +176,5 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-                                } catch (final Exception e) {
-                                    if (e instanceof InvalidTelnetOptionException) {
+                                }
+                                catch (final Exception e)
+                                {
+                                    if(e instanceof InvalidTelnetOptionException)
+                                    {
@@ -143 +182,3 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-                                    } else {
+                                    }
+                                    else
+                                    {
@@ -150 +191,3 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-                            } else if (line.startsWith("UNREGISTER")) {
+                            }
+                            else if(line.startsWith("UNREGISTER"))
+                            {
@@ -152 +195,2 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-                                try {
+                                try
+                                {
@@ -156,2 +200,5 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-                                } catch (final Exception e) {
-                                    if (e instanceof InvalidTelnetOptionException) {
+                                }
+                                catch (final Exception e)
+                                {
+                                    if(e instanceof InvalidTelnetOptionException)
+                                    {
@@ -159 +206,3 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-                                    } else {
+                                    }
+                                    else
+                                    {
@@ -165 +214,3 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-                            } else if (line.startsWith("SPY")) {
+                            }
+                            else if(line.startsWith("SPY"))
+                            {
@@ -167 +218,3 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-                            } else if (line.startsWith("UNSPY")) {
+                            }
+                            else if(line.startsWith("UNSPY"))
+                            {
@@ -169 +222,3 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-                            } else if (line.matches("^\\^[A-Z^]\\r?\\n?$")) {
+                            }
+                            else if(line.matches("^\\^[A-Z^]\\r?\\n?$"))
+                            {
@@ -177,6 +232,11 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-                            } else {
-                                try {
-                                    outstr.write(buff, 0, ret_read);
-                                    outstr.flush();
-                                } catch (final IOException e) {
-                                    end_loop = true;
+                            }
+                            else
+                            {
+                                try
+                                {
+                                        outstr.write(buff, 0 , ret_read);
+                                        outstr.flush();
+                                }
+                                catch (final IOException e)
+                                {
+                                        end_loop = true;
@@ -186 +246,3 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-                    } catch (final IOException e) {
+                    }
+                    catch (final IOException e)
+                    {
@@ -190 +252,2 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-                } while (ret_read > 0 && !end_loop);
+                }
+                while(ret_read > 0 && !end_loop);
@@ -192 +255,2 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-                try {
+                try
+                {
@@ -194,2 +257,0 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-                } catch (final IOException e) {
-                    System.err.println("Exception while connecting:" + e.getMessage());
@@ -197,3 +259,9 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-            } catch (final IOException e) {
-                System.err.println("Exception while connecting:" + e.getMessage());
-                System.exit(1);
+                catch (final IOException e)
+                {
+                          System.err.println("Exception while connecting:" + e.getMessage());
+                }
+            }
+            catch (final IOException e)
+            {
+                    System.err.println("Exception while connecting:" + e.getMessage());
+                    System.exit(1);
@@ -203,0 +272 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
+
@@ -205 +274,2 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-     * Callback method called when TelnetClient receives an option negotiation command.
+     * Callback method called when TelnetClient receives an option
+     * negotiation command.
@@ -207,2 +277,3 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-     * @param negotiation_code - type of negotiation command received (RECEIVED_DO, RECEIVED_DONT, RECEIVED_WILL, RECEIVED_WONT, RECEIVED_COMMAND)
-     * @param option_code      - code of the option negotiated
+     * @param negotiation_code - type of negotiation command received
+     * (RECEIVED_DO, RECEIVED_DONT, RECEIVED_WILL, RECEIVED_WONT, RECEIVED_COMMAND)
+     * @param option_code - code of the option negotiated
@@ -211 +282,2 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-    public void receivedNegotiation(final int negotiation_code, final int option_code) {
+    public void receivedNegotiation(final int negotiation_code, final int option_code)
+    {
@@ -214,18 +286,18 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-        case TelnetNotificationHandler.RECEIVED_DO:
-            command = "DO";
-            break;
-        case TelnetNotificationHandler.RECEIVED_DONT:
-            command = "DONT";
-            break;
-        case TelnetNotificationHandler.RECEIVED_WILL:
-            command = "WILL";
-            break;
-        case TelnetNotificationHandler.RECEIVED_WONT:
-            command = "WONT";
-            break;
-        case TelnetNotificationHandler.RECEIVED_COMMAND:
-            command = "COMMAND";
-            break;
-        default:
-            command = Integer.toString(negotiation_code); // Should not happen
-            break;
+            case TelnetNotificationHandler.RECEIVED_DO:
+                command = "DO";
+                break;
+            case TelnetNotificationHandler.RECEIVED_DONT:
+                command = "DONT";
+                break;
+            case TelnetNotificationHandler.RECEIVED_WILL:
+                command = "WILL";
+                break;
+            case TelnetNotificationHandler.RECEIVED_WONT:
+                command = "WONT";
+                break;
+            case TelnetNotificationHandler.RECEIVED_COMMAND:
+                command = "COMMAND";
+                break;
+            default:
+                command = Integer.toString(negotiation_code); // Should not happen
+                break;
@@ -234 +306 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-    }
+   }
@@ -237 +309,3 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-     * Reader thread. Reads lines from the TelnetClient and echoes them on the screen.
+     * Reader thread.
+     * Reads lines from the TelnetClient and echoes them
+     * on the screen.
@@ -240 +314,2 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-    public void run() {
+    public void run()
+    {
@@ -243 +318,2 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-        try {
+        try
+        {
@@ -247 +323,2 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-            do {
+            do
+            {
@@ -249 +326,2 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-                if (ret_read > 0) {
+                if(ret_read > 0)
+                {
@@ -252,2 +330,5 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-            } while (ret_read >= 0);
-        } catch (final IOException e) {
+            }
+            while (ret_read >= 0);
+        }
+        catch (final IOException e)
+        {
@@ -257 +338,2 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-        try {
+        try
+        {
@@ -259 +341,3 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
-        } catch (final IOException e) {
+        }
+        catch (final IOException e)
+        {
@@ -263,0 +348 @@ public class TelnetClientExample implements Runnable, TelnetNotificationHandler
+
diff --git a/src/main/java/org/apache/commons/net/examples/telnet/WeatherTelnet.java b/src/main/java/org/apache/commons/net/examples/telnet/WeatherTelnet.java
index ee297e596..cd22b336c 100644
--- a/src/main/java/org/apache/commons/net/examples/telnet/WeatherTelnet.java
+++ b/src/main/java/org/apache/commons/net/examples/telnet/WeatherTelnet.java
@@ -26,4 +26,9 @@ import org.apache.commons.net.telnet.TelnetClient;
- * This is an example of a trivial use of the TelnetClient class. It connects to the weather server at the University of Michigan, um-weather.sprl.umich.edu
- * port 3000, and allows the user to interact with the server via standard input. You could use this example to connect to any telnet server, but it is
- * obviously not general purpose because it reads from standard input a line at a time, making it inconvenient for use with a remote interactive shell. The
- * TelnetClient class used by itself is mostly intended for automating access to telnet resources rather than interactive use.
+ * This is an example of a trivial use of the TelnetClient class.
+ * It connects to the weather server at the University of Michigan,
+ * um-weather.sprl.umich.edu port 3000, and allows the user to interact
+ * with the server via standard input.  You could use this example to
+ * connect to any telnet server, but it is obviously not general purpose
+ * because it reads from standard input a line at a time, making it
+ * inconvenient for use with a remote interactive shell.  The TelnetClient
+ * class used by itself is mostly intended for automating access to telnet
+ * resources rather than interactive use.
@@ -33 +38,2 @@ import org.apache.commons.net.telnet.TelnetClient;
-public final class WeatherTelnet {
+public final class WeatherTelnet
+{
@@ -35 +41,2 @@ public final class WeatherTelnet {
-    public static void main(final String[] args) {
+    public static void main(final String[] args)
+    {
@@ -40 +47,2 @@ public final class WeatherTelnet {
-        try {
+        try
+        {
@@ -42 +50,3 @@ public final class WeatherTelnet {
-        } catch (final IOException e) {
+        }
+        catch (final IOException e)
+        {
@@ -47 +57,2 @@ public final class WeatherTelnet {
-        IOUtil.readWrite(telnet.getInputStream(), telnet.getOutputStream(), System.in, System.out);
+        IOUtil.readWrite(telnet.getInputStream(), telnet.getOutputStream(),
+                         System.in, System.out);
@@ -49 +60,2 @@ public final class WeatherTelnet {
-        try {
+        try
+        {
@@ -51 +63,3 @@ public final class WeatherTelnet {
-        } catch (final IOException e) {
+        }
+        catch (final IOException e)
+        {
@@ -59,0 +74,2 @@ public final class WeatherTelnet {
+
+
diff --git a/src/main/java/org/apache/commons/net/examples/unix/chargen.java b/src/main/java/org/apache/commons/net/examples/unix/chargen.java
index 326a7ef08..713215a01 100644
--- a/src/main/java/org/apache/commons/net/examples/unix/chargen.java
+++ b/src/main/java/org/apache/commons/net/examples/unix/chargen.java
@@ -31,3 +31,8 @@ import org.apache.commons.net.chargen.CharGenUDPClient;
- * This is an example program demonstrating how to use the CharGenTCPClient and CharGenUDPClient classes. This program connects to the default chargen service
- * port of a specified server, then reads 100 lines from of generated output, writing each line to standard output, and then closes the connection. The UDP
- * invocation of the program sends 50 datagrams, printing the reply to each. The default is to use the TCP port. Use the -udp flag to use the UDP port.
+ * This is an example program demonstrating how to use the CharGenTCPClient
+ * and CharGenUDPClient classes.  This program connects to the default
+ * chargen service port of a specified server, then reads 100 lines from
+ * of generated output, writing each line to standard output, and then
+ * closes the connection.  The UDP invocation of the program sends 50
+ * datagrams, printing the reply to each.
+ * The default is to use the TCP port.  Use the -udp flag to use the UDP
+ * port.
@@ -37 +42,2 @@ import org.apache.commons.net.chargen.CharGenUDPClient;
-public final class chargen {
+public final class chargen
+{
@@ -39 +45,2 @@ public final class chargen {
-    public static void chargenTCP(final String host) throws IOException {
+    public static void chargenTCP(final String host) throws IOException
+    {
@@ -62 +69,2 @@ public final class chargen {
-    public static void chargenUDP(final String host) throws IOException {
+    public static void chargenUDP(final String host) throws IOException
+    {
@@ -76 +84,2 @@ public final class chargen {
-        while (packets-- > 0) {
+        while (packets-- > 0)
+        {
@@ -79 +88,2 @@ public final class chargen {
-            try {
+            try
+            {
@@ -86 +96,2 @@ public final class chargen {
-            catch (final SocketException e) {
+            catch (final SocketException e)
+            {
@@ -90 +101,3 @@ public final class chargen {
-            } catch (final InterruptedIOException e) {
+            }
+            catch (final InterruptedIOException e)
+            {
@@ -92 +105,2 @@ public final class chargen {
-                System.err.println("InterruptedIOException: Timed out and dropped packet");
+                System.err.println(
+                    "InterruptedIOException: Timed out and dropped packet");
@@ -102 +115,0 @@ public final class chargen {
-    public static void main(final String[] args) {
@@ -104,2 +117,7 @@ public final class chargen {
-        if (args.length == 1) {
-            try {
+    public static void main(final String[] args)
+    {
+
+        if (args.length == 1)
+        {
+            try
+            {
@@ -107 +125,3 @@ public final class chargen {
-            } catch (final IOException e) {
+            }
+            catch (final IOException e)
+            {
@@ -111,2 +131,5 @@ public final class chargen {
-        } else if (args.length == 2 && args[0].equals("-udp")) {
-            try {
+        }
+        else if (args.length == 2 && args[0].equals("-udp"))
+        {
+            try
+            {
@@ -114 +137,3 @@ public final class chargen {
-            } catch (final IOException e) {
+            }
+            catch (final IOException e)
+            {
@@ -118 +143,3 @@ public final class chargen {
-        } else {
+        }
+        else
+        {
@@ -125,0 +153 @@ public final class chargen {
+
diff --git a/src/main/java/org/apache/commons/net/examples/unix/daytime.java b/src/main/java/org/apache/commons/net/examples/unix/daytime.java
index ecb11ea08..6ccbf645c 100644
--- a/src/main/java/org/apache/commons/net/examples/unix/daytime.java
+++ b/src/main/java/org/apache/commons/net/examples/unix/daytime.java
@@ -27,2 +27,6 @@ import org.apache.commons.net.daytime.DaytimeUDPClient;
- * This is an example program demonstrating how to use the DaytimeTCP and DaytimeUDP classes. This program connects to the default daytime service port of a
- * specified server, retrieves the daytime, and prints it to standard output. The default is to use the TCP port. Use the -udp flag to use the UDP port.
+ * This is an example program demonstrating how to use the DaytimeTCP
+ * and DaytimeUDP classes.
+ * This program connects to the default daytime service port of a
+ * specified server, retrieves the daytime, and prints it to standard output.
+ * The default is to use the TCP port.  Use the -udp flag to use the UDP
+ * port.
@@ -32 +36,2 @@ import org.apache.commons.net.daytime.DaytimeUDPClient;
-public final class daytime {
+public final class daytime
+{
@@ -34 +39,2 @@ public final class daytime {
-    public static void daytimeTCP(final String host) throws IOException {
+    public static void daytimeTCP(final String host) throws IOException
+    {
@@ -44 +50,2 @@ public final class daytime {
-    public static void daytimeUDP(final String host) throws IOException {
+    public static void daytimeUDP(final String host) throws IOException
+    {
@@ -50 +57,2 @@ public final class daytime {
-        System.out.println(client.getTime(InetAddress.getByName(host)).trim());
+        System.out.println(client.getTime(
+                                          InetAddress.getByName(host)).trim());
@@ -54 +61,0 @@ public final class daytime {
-    public static void main(final String[] args) {
@@ -56,2 +63,7 @@ public final class daytime {
-        if (args.length == 1) {
-            try {
+    public static void main(final String[] args)
+    {
+
+        if (args.length == 1)
+        {
+            try
+            {
@@ -59 +71,3 @@ public final class daytime {
-            } catch (final IOException e) {
+            }
+            catch (final IOException e)
+            {
@@ -63,2 +77,5 @@ public final class daytime {
-        } else if (args.length == 2 && args[0].equals("-udp")) {
-            try {
+        }
+        else if (args.length == 2 && args[0].equals("-udp"))
+        {
+            try
+            {
@@ -66 +83,3 @@ public final class daytime {
-            } catch (final IOException e) {
+            }
+            catch (final IOException e)
+            {
@@ -70 +89,3 @@ public final class daytime {
-        } else {
+        }
+        else
+        {
@@ -77,0 +99 @@ public final class daytime {
+
diff --git a/src/main/java/org/apache/commons/net/examples/unix/echo.java b/src/main/java/org/apache/commons/net/examples/unix/echo.java
index b753179dd..27a599958 100644
--- a/src/main/java/org/apache/commons/net/examples/unix/echo.java
+++ b/src/main/java/org/apache/commons/net/examples/unix/echo.java
@@ -33,3 +33,6 @@ import org.apache.commons.net.echo.EchoUDPClient;
- * This is an example program demonstrating how to use the EchoTCPClient and EchoUDPClient classes. This program connects to the default echo service port of a
- * specified server, then reads lines from standard input, writing them to the echo server, and then printing the echo. The default is to use the TCP port. Use
- * the -udp flag to use the UDP port.
+ * This is an example program demonstrating how to use the EchoTCPClient
+ * and EchoUDPClient classes.  This program connects to the default echo
+ * service port of a specified server, then reads lines from standard
+ * input, writing them to the echo server, and then printing the echo.
+ * The default is to use the TCP port.  Use the -udp flag to use the UDP
+ * port.
@@ -39 +42,2 @@ import org.apache.commons.net.echo.EchoUDPClient;
-public final class echo {
+public final class echo
+{
@@ -41 +45,2 @@ public final class echo {
-    public static void echoTCP(final String host) throws IOException {
+    public static void echoTCP(final String host) throws IOException
+    {
@@ -53,2 +58,4 @@ public final class echo {
-        echoOutput = new PrintWriter(new OutputStreamWriter(client.getOutputStream()), true);
-        echoInput = new BufferedReader(new InputStreamReader(client.getInputStream()));
+        echoOutput =
+            new PrintWriter(new OutputStreamWriter(client.getOutputStream()), true);
+        echoInput =
+            new BufferedReader(new InputStreamReader(client.getInputStream()));
@@ -56 +63,2 @@ public final class echo {
-        while ((line = input.readLine()) != null) {
+        while ((line = input.readLine()) != null)
+        {
@@ -66 +74,2 @@ public final class echo {
-    public static void echoUDP(final String host) throws IOException {
+    public static void echoUDP(final String host) throws IOException
+    {
@@ -85 +94,2 @@ public final class echo {
-        while ((line = input.readLine()) != null) {
+        while ((line = input.readLine()) != null)
+        {
@@ -89,2 +99,4 @@ public final class echo {
-            do {
-                try {
+            do
+            {
+                try
+                {
@@ -97 +109,2 @@ public final class echo {
-                catch (final SocketException e) {
+                catch (final SocketException e)
+                {
@@ -99 +112,2 @@ public final class echo {
-                    System.err.println("SocketException: Timed out and dropped packet");
+                    System.err.println(
+                        "SocketException: Timed out and dropped packet");
@@ -101 +115,3 @@ public final class echo {
-                } catch (final InterruptedIOException e) {
+                }
+                catch (final InterruptedIOException e)
+                {
@@ -103 +119,2 @@ public final class echo {
-                    System.err.println("InterruptedIOException: Timed out and dropped packet");
+                    System.err.println(
+                        "InterruptedIOException: Timed out and dropped packet");
@@ -108 +125,2 @@ public final class echo {
-            } while (count < data.length);
+            }
+            while (count < data.length);
@@ -116 +133,0 @@ public final class echo {
-    public static void main(final String[] args) {
@@ -118,2 +135,7 @@ public final class echo {
-        if (args.length == 1) {
-            try {
+    public static void main(final String[] args)
+    {
+
+        if (args.length == 1)
+        {
+            try
+            {
@@ -121 +143,3 @@ public final class echo {
-            } catch (final IOException e) {
+            }
+            catch (final IOException e)
+            {
@@ -125,2 +149,5 @@ public final class echo {
-        } else if (args.length == 2 && args[0].equals("-udp")) {
-            try {
+        }
+        else if (args.length == 2 && args[0].equals("-udp"))
+        {
+            try
+            {
@@ -128 +155,3 @@ public final class echo {
-            } catch (final IOException e) {
+            }
+            catch (final IOException e)
+            {
@@ -132 +161,3 @@ public final class echo {
-        } else {
+        }
+        else
+        {
@@ -139,0 +171 @@ public final class echo {
+
diff --git a/src/main/java/org/apache/commons/net/examples/unix/finger.java b/src/main/java/org/apache/commons/net/examples/unix/finger.java
index 0ee6e1f54..eb658d36b 100644
--- a/src/main/java/org/apache/commons/net/examples/unix/finger.java
+++ b/src/main/java/org/apache/commons/net/examples/unix/finger.java
@@ -27,2 +27,5 @@ import org.apache.commons.net.finger.FingerClient;
- * This is an example of how you would implement the finger command in Java using NetComponents. The Java version is much shorter. But keep in mind that the
- * Unix finger command reads all sorts of local files to output local finger information. This program only queries the finger daemon.
+ * This is an example of how you would implement the finger command
+ * in Java using NetComponents.  The Java version is much shorter.
+ * But keep in mind that the Unix finger command reads all sorts of
+ * local files to output local finger information.  This program only
+ * queries the finger daemon.
@@ -32 +35,2 @@ import org.apache.commons.net.finger.FingerClient;
-public final class finger {
+public final class finger
+{
@@ -34 +38,2 @@ public final class finger {
-    public static void main(final String[] args) {
+    public static void main(final String[] args)
+    {
@@ -41,2 +46,3 @@ public final class finger {
-        // Get flags. If an invalid flag is present, exit with usage message.
-        while (arg < args.length && args[arg].startsWith("-")) {
+        // Get flags.  If an invalid flag is present, exit with usage message.
+        while (arg < args.length && args[arg].startsWith("-"))
+        {
@@ -51,0 +58 @@ public final class finger {
+
@@ -56 +63,2 @@ public final class finger {
-        if (arg >= args.length) {
+        if (arg >= args.length)
+        {
@@ -59 +67,2 @@ public final class finger {
-            try {
+            try
+            {
@@ -61 +70,3 @@ public final class finger {
-            } catch (final UnknownHostException e) {
+            }
+            catch (final UnknownHostException e)
+            {
@@ -66 +77,2 @@ public final class finger {
-            try {
+            try
+            {
@@ -70 +82,3 @@ public final class finger {
-            } catch (final IOException e) {
+            }
+            catch (final IOException e)
+            {
@@ -75 +89 @@ public final class finger {
-            return;
+            return ;
@@ -79 +93,2 @@ public final class finger {
-        while (arg < args.length) {
+        while (arg < args.length)
+        {
@@ -83 +98,2 @@ public final class finger {
-            if (index == -1) {
+            if (index == -1)
+            {
@@ -85 +101,2 @@ public final class finger {
-                try {
+                try
+                {
@@ -87 +104,3 @@ public final class finger {
-                } catch (final UnknownHostException e) {
+                }
+                catch (final UnknownHostException e)
+                {
@@ -91 +110,3 @@ public final class finger {
-            } else {
+            }
+            else
+            {
@@ -95 +116,2 @@ public final class finger {
-                try {
+                try
+                {
@@ -98 +120,3 @@ public final class finger {
-                } catch (final UnknownHostException e) {
+                }
+                catch (final UnknownHostException e)
+                {
@@ -104 +128,2 @@ public final class finger {
-            try {
+            try
+            {
@@ -108 +133,3 @@ public final class finger {
-            } catch (final IOException e) {
+            }
+            catch (final IOException e)
+            {
@@ -119,0 +147 @@ public final class finger {
+
diff --git a/src/main/java/org/apache/commons/net/examples/unix/fwhois.java b/src/main/java/org/apache/commons/net/examples/unix/fwhois.java
index 262050bc0..2cbca6a0f 100644
--- a/src/main/java/org/apache/commons/net/examples/unix/fwhois.java
+++ b/src/main/java/org/apache/commons/net/examples/unix/fwhois.java
@@ -27 +27,2 @@ import org.apache.commons.net.whois.WhoisClient;
- * This is an example of how you would implement the Linux fwhois command in Java using NetComponents. The Java version is much shorter.
+ * This is an example of how you would implement the Linux fwhois command
+ * in Java using NetComponents.  The Java version is much shorter.
@@ -29 +30,2 @@ import org.apache.commons.net.whois.WhoisClient;
-public final class fwhois {
+public final class fwhois
+{
@@ -31 +33,2 @@ public final class fwhois {
-    public static void main(final String[] args) {
+    public static void main(final String[] args)
+    {
@@ -38 +41,2 @@ public final class fwhois {
-        if (args.length != 1) {
+        if (args.length != 1)
+        {
@@ -49 +53,2 @@ public final class fwhois {
-        if (index == -1) {
+        if (index == -1)
+        {
@@ -52 +57,3 @@ public final class fwhois {
-        } else {
+        }
+        else
+        {
@@ -57 +64,2 @@ public final class fwhois {
-        try {
+        try
+        {
@@ -60 +68,3 @@ public final class fwhois {
-        } catch (final UnknownHostException e) {
+        }
+        catch (final UnknownHostException e)
+        {
@@ -65 +75,2 @@ public final class fwhois {
-        try {
+        try
+        {
@@ -69 +80,3 @@ public final class fwhois {
-        } catch (final IOException e) {
+        }
+        catch (final IOException e)
+        {
diff --git a/src/main/java/org/apache/commons/net/examples/unix/rdate.java b/src/main/java/org/apache/commons/net/examples/unix/rdate.java
index ed39c54e8..60edfe3ac 100644
--- a/src/main/java/org/apache/commons/net/examples/unix/rdate.java
+++ b/src/main/java/org/apache/commons/net/examples/unix/rdate.java
@@ -27,3 +27,7 @@ import org.apache.commons.net.time.TimeUDPClient;
- * This is an example program demonstrating how to use the TimeTCPClient and TimeUDPClient classes. It's very similar to the simple Unix rdate command. This
- * program connects to the default time service port of a specified server, retrieves the time, and prints it to standard output. The default is to use the TCP
- * port. Use the -udp flag to use the UDP port. You can test this program by using the NIST time server at 132.163.135.130 (warning: the IP address may change).
+ * This is an example program demonstrating how to use the TimeTCPClient
+ * and TimeUDPClient classes.  It's very similar to the simple Unix rdate
+ * command.  This program connects to the default time service port of a
+ * specified server, retrieves the time, and prints it to standard output.
+ * The default is to use the TCP port.  Use the -udp flag to use the UDP
+ * port.  You can test this program by using the NIST time server at
+ * 132.163.135.130 (warning: the IP address may change).
@@ -33 +37,2 @@ import org.apache.commons.net.time.TimeUDPClient;
-public final class rdate {
+public final class rdate
+{
@@ -35 +40,2 @@ public final class rdate {
-    public static void main(final String[] args) {
+    public static void main(final String[] args)
+    {
@@ -37,2 +43,4 @@ public final class rdate {
-        if (args.length == 1) {
-            try {
+        if (args.length == 1)
+        {
+            try
+            {
@@ -40 +48,3 @@ public final class rdate {
-            } catch (final IOException e) {
+            }
+            catch (final IOException e)
+            {
@@ -44,2 +54,5 @@ public final class rdate {
-        } else if (args.length == 2 && args[0].equals("-udp")) {
-            try {
+        }
+        else if (args.length == 2 && args[0].equals("-udp"))
+        {
+            try
+            {
@@ -47 +60,3 @@ public final class rdate {
-            } catch (final IOException e) {
+            }
+            catch (final IOException e)
+            {
@@ -51 +66,3 @@ public final class rdate {
-        } else {
+        }
+        else
+        {
@@ -58 +75,2 @@ public final class rdate {
-    public static void timeTCP(final String host) throws IOException {
+    public static void timeTCP(final String host) throws IOException
+    {
@@ -68 +86,3 @@ public final class rdate {
-    public static void timeUDP(final String host) throws IOException {
+
+    public static void timeUDP(final String host) throws IOException
+    {
@@ -78,0 +99 @@ public final class rdate {
+
diff --git a/src/main/java/org/apache/commons/net/examples/unix/rexec.java b/src/main/java/org/apache/commons/net/examples/unix/rexec.java
index 2577c2a7e..688a7fa57 100644
--- a/src/main/java/org/apache/commons/net/examples/unix/rexec.java
+++ b/src/main/java/org/apache/commons/net/examples/unix/rexec.java
@@ -26,3 +26,6 @@ import org.apache.commons.net.examples.util.IOUtil;
- * This is an example program demonstrating how to use the RExecClient class. This program connects to an rexec server and requests that the given command be
- * executed on the server. It then reads input from stdin (this will be line buffered on most systems, so don't expect character at a time interactivity),
- * passing it to the remote process and writes the process stdout and stderr to local stdout.
+ * This is an example program demonstrating how to use the RExecClient class.
+ * This program connects to an rexec server and requests that the
+ * given command be executed on the server.  It then reads input from stdin
+ * (this will be line buffered on most systems, so don't expect character
+ * at a time interactivity), passing it to the remote process and writes
+ * the process stdout and stderr to local stdout.
@@ -36 +39,2 @@ import org.apache.commons.net.examples.util.IOUtil;
-public final class rexec {
+public final class rexec
+{
@@ -38 +42,2 @@ public final class rexec {
-    public static void main(final String[] args) {
+    public static void main(final String[] args)
+    {
@@ -45,2 +50,4 @@ public final class rexec {
-        if (args.length != 4) {
-            System.err.println("Usage: rexec <hostname> <username> <password> <command>");
+        if (args.length != 4)
+        {
+            System.err.println(
+                "Usage: rexec <hostname> <username> <password> <command>");
@@ -48 +55 @@ public final class rexec {
-            return; // so compiler can do proper flow control analysis
+            return ; // so compiler can do proper flow control analysis
@@ -58 +65,2 @@ public final class rexec {
-        try {
+        try
+        {
@@ -60 +68,3 @@ public final class rexec {
-        } catch (final IOException e) {
+        }
+        catch (final IOException e)
+        {
@@ -66 +76,2 @@ public final class rexec {
-        try {
+        try
+        {
@@ -68,2 +79,5 @@ public final class rexec {
-        } catch (final IOException e) {
-            try {
+        }
+        catch (final IOException e)
+        {
+            try
+            {
@@ -71,2 +85,3 @@ public final class rexec {
-            } catch (final IOException f) {
-                /* ignored */}
+            }
+            catch (final IOException f)
+            {/* ignored */}
@@ -78 +92,0 @@ public final class rexec {
-        IOUtil.readWrite(client.getInputStream(), client.getOutputStream(), System.in, System.out);
@@ -80 +94,5 @@ public final class rexec {
-        try {
+        IOUtil.readWrite(client.getInputStream(), client.getOutputStream(),
+                         System.in, System.out);
+
+        try
+        {
@@ -82 +100,3 @@ public final class rexec {
-        } catch (final IOException e) {
+        }
+        catch (final IOException e)
+        {
@@ -90,0 +111 @@ public final class rexec {
+
diff --git a/src/main/java/org/apache/commons/net/examples/unix/rlogin.java b/src/main/java/org/apache/commons/net/examples/unix/rlogin.java
index 9ac5e8217..cf93e299f 100644
--- a/src/main/java/org/apache/commons/net/examples/unix/rlogin.java
+++ b/src/main/java/org/apache/commons/net/examples/unix/rlogin.java
@@ -26,4 +26,7 @@ import org.apache.commons.net.examples.util.IOUtil;
- * This is an example program demonstrating how to use the RLoginClient class. This program connects to an rlogin daemon and begins to interactively read input
- * from stdin (this will be line buffered on most systems, so don't expect character at a time interactivity), passing it to the remote login process and
- * writing the remote stdout and stderr to local stdout. If you don't have .rhosts or hosts.equiv files set up, the rlogin daemon will prompt you for a
- * password.
+ * This is an example program demonstrating how to use the RLoginClient
+ * class. This program connects to an rlogin daemon and begins to
+ * interactively read input from stdin (this will be line buffered on most
+ * systems, so don't expect character at a time interactivity), passing it
+ * to the remote login process and writing the remote stdout and stderr
+ * to local stdout.  If you don't have .rhosts or hosts.equiv files set up,
+ * the rlogin daemon will prompt you for a password.
@@ -31 +34,3 @@ import org.apache.commons.net.examples.util.IOUtil;
- * On Unix systems you will not be able to use the rshell capability unless the process runs as root since only root can bind port addresses lower than 1024.
+ * On Unix systems you will not be able to use the rshell capability
+ * unless the process runs as root since only root can bind port addresses
+ * lower than 1024.
@@ -33,3 +38,5 @@ import org.apache.commons.net.examples.util.IOUtil;
- * JVM's using green threads will likely have problems if the rlogin daemon requests a password. This program is merely a demonstration and is not suitable for
- * use as an application, especially given that it relies on line buffered input from System.in. The best way to run this example is probably from a Win95 dos
- * box into a Unix host.
+ * JVM's using green threads will likely have problems if the rlogin daemon
+ * requests a password.  This program is merely a demonstration and is
+ * not suitable for use as an application, especially given that it relies
+ * on line buffered input from System.in.  The best way to run this example
+ * is probably from a Win95 dos box into a Unix host.
@@ -43 +50,2 @@ import org.apache.commons.net.examples.util.IOUtil;
-public final class rlogin {
+public final class rlogin
+{
@@ -45 +53,2 @@ public final class rlogin {
-    public static void main(final String[] args) {
+    public static void main(final String[] args)
+    {
@@ -52,2 +61,4 @@ public final class rlogin {
-        if (args.length != 4) {
-            System.err.println("Usage: rlogin <hostname> <localuser> <remoteuser> <terminal>");
+        if (args.length != 4)
+        {
+            System.err.println(
+                "Usage: rlogin <hostname> <localuser> <remoteuser> <terminal>");
@@ -55 +66 @@ public final class rlogin {
-            return; // so compiler can do proper flow control analysis
+            return ; // so compiler can do proper flow control analysis
@@ -65 +76,2 @@ public final class rlogin {
-        try {
+        try
+        {
@@ -67 +79,3 @@ public final class rlogin {
-        } catch (final IOException e) {
+        }
+        catch (final IOException e)
+        {
@@ -73 +87,2 @@ public final class rlogin {
-        try {
+        try
+        {
@@ -75,2 +90,5 @@ public final class rlogin {
-        } catch (final IOException e) {
-            try {
+        }
+        catch (final IOException e)
+        {
+            try
+            {
@@ -78,2 +96,3 @@ public final class rlogin {
-            } catch (final IOException f) {
-                /* ignored */}
+            }
+            catch (final IOException f)
+            {/* ignored */}
@@ -85 +103,0 @@ public final class rlogin {
-        IOUtil.readWrite(client.getInputStream(), client.getOutputStream(), System.in, System.out);
@@ -87 +105,5 @@ public final class rlogin {
-        try {
+        IOUtil.readWrite(client.getInputStream(), client.getOutputStream(),
+                         System.in, System.out);
+
+        try
+        {
@@ -89 +111,3 @@ public final class rlogin {
-        } catch (final IOException e) {
+        }
+        catch (final IOException e)
+        {
@@ -97,0 +122 @@ public final class rlogin {
+
diff --git a/src/main/java/org/apache/commons/net/examples/unix/rshell.java b/src/main/java/org/apache/commons/net/examples/unix/rshell.java
index 6502f3a9f..67766e648 100644
--- a/src/main/java/org/apache/commons/net/examples/unix/rshell.java
+++ b/src/main/java/org/apache/commons/net/examples/unix/rshell.java
@@ -26,3 +26,6 @@ import org.apache.commons.net.examples.util.IOUtil;
- * This is an example program demonstrating how to use the RCommandClient class. This program connects to an rshell daemon and requests that the given command
- * be executed on the server. It then reads input from stdin (this will be line buffered on most systems, so don't expect character at a time interactivity),
- * passing it to the remote process and writes the process stdout and stderr to local stdout.
+ * This is an example program demonstrating how to use the RCommandClient
+ * class. This program connects to an rshell daemon and requests that the
+ * given command be executed on the server.  It then reads input from stdin
+ * (this will be line buffered on most systems, so don't expect character
+ * at a time interactivity), passing it to the remote process and writes
+ * the process stdout and stderr to local stdout.
@@ -30 +33,3 @@ import org.apache.commons.net.examples.util.IOUtil;
- * On Unix systems you will not be able to use the rshell capability unless the process runs as root since only root can bind port addresses lower than 1024.
+ * On Unix systems you will not be able to use the rshell capability
+ * unless the process runs as root since only root can bind port addresses
+ * lower than 1024.
@@ -38 +43,2 @@ import org.apache.commons.net.examples.util.IOUtil;
-public final class rshell {
+public final class rshell
+{
@@ -40 +46,2 @@ public final class rshell {
-    public static void main(final String[] args) {
+    public static void main(final String[] args)
+    {
@@ -47,2 +54,4 @@ public final class rshell {
-        if (args.length != 4) {
-            System.err.println("Usage: rshell <hostname> <localuser> <remoteuser> <command>");
+        if (args.length != 4)
+        {
+            System.err.println(
+                "Usage: rshell <hostname> <localuser> <remoteuser> <command>");
@@ -50 +59 @@ public final class rshell {
-            return; // so compiler can do proper flow control analysis
+            return ; // so compiler can do proper flow control analysis
@@ -60 +69,2 @@ public final class rshell {
-        try {
+        try
+        {
@@ -62 +72,3 @@ public final class rshell {
-        } catch (final IOException e) {
+        }
+        catch (final IOException e)
+        {
@@ -68 +80,2 @@ public final class rshell {
-        try {
+        try
+        {
@@ -70,2 +83,5 @@ public final class rshell {
-        } catch (final IOException e) {
-            try {
+        }
+        catch (final IOException e)
+        {
+            try
+            {
@@ -73,2 +89,3 @@ public final class rshell {
-            } catch (final IOException f) {
-                /* ignored */}
+            }
+            catch (final IOException f)
+            {/* ignored */}
@@ -80 +96,0 @@ public final class rshell {
-        IOUtil.readWrite(client.getInputStream(), client.getOutputStream(), System.in, System.out);
@@ -82 +98,5 @@ public final class rshell {
-        try {
+        IOUtil.readWrite(client.getInputStream(), client.getOutputStream(),
+                         System.in, System.out);
+
+        try
+        {
@@ -84 +104,3 @@ public final class rshell {
-        } catch (final IOException e) {
+        }
+        catch (final IOException e)
+        {
@@ -92,0 +115 @@ public final class rshell {
+
diff --git a/src/main/java/org/apache/commons/net/examples/util/IOUtil.java b/src/main/java/org/apache/commons/net/examples/util/IOUtil.java
index 14b6f1942..df226254c 100644
--- a/src/main/java/org/apache/commons/net/examples/util/IOUtil.java
+++ b/src/main/java/org/apache/commons/net/examples/util/IOUtil.java
@@ -28,4 +28,8 @@ import org.apache.commons.net.util.NetConstants;
- * This is a utility class providing a reader/writer capability required by the weatherTelnet, rexec, rshell, and rlogin example programs. The only point of the
- * class is to hold the static method readWrite which spawns a reader thread and a writer thread. The reader thread reads from a local input source (presumably
- * stdin) and writes the data to a remote output destination. The writer thread reads from a remote input source and writes to a local output destination. The
- * threads terminate when the remote input source closes.
+ * This is a utility class providing a reader/writer capability required
+ * by the weatherTelnet, rexec, rshell, and rlogin example programs.
+ * The only point of the class is to hold the static method readWrite
+ * which spawns a reader thread and a writer thread.  The reader thread
+ * reads from a local input source (presumably stdin) and writes the
+ * data to a remote output destination.  The writer thread reads from
+ * a remote input source and writes to a local output destination.
+ * The threads terminate when the remote input source closes.
@@ -34 +38,2 @@ import org.apache.commons.net.util.NetConstants;
-public final class IOUtil {
+public final class IOUtil
+{
@@ -36 +41,5 @@ public final class IOUtil {
-    public static void readWrite(final InputStream remoteInput, final OutputStream remoteOutput, final InputStream localInput, final OutputStream localOutput) {
+    public static void readWrite(final InputStream remoteInput,
+                                       final OutputStream remoteOutput,
+                                       final InputStream localInput,
+                                       final OutputStream localOutput)
+    {
@@ -43,2 +52,4 @@ public final class IOUtil {
-            try {
-                while (!Thread.interrupted() && (ch = localInput.read()) != NetConstants.EOS) {
+            try
+            {
+                while (!Thread.interrupted() && (ch = localInput.read()) != NetConstants.EOS)
+                {
@@ -48,2 +59,4 @@ public final class IOUtil {
-            } catch (final IOException e) {
-                // e.printStackTrace();
+            }
+            catch (final IOException e)
+            {
+                //e.printStackTrace();
@@ -52,0 +66 @@ public final class IOUtil {
+
@@ -54 +68,2 @@ public final class IOUtil {
-            try {
+            try
+            {
@@ -56 +71,3 @@ public final class IOUtil {
-            } catch (final IOException e) {
+            }
+            catch (final IOException e)
+            {
@@ -61,0 +79 @@ public final class IOUtil {
+
@@ -68 +86,2 @@ public final class IOUtil {
-        try {
+        try
+        {
@@ -71 +90,3 @@ public final class IOUtil {
-        } catch (final InterruptedException e) {
+        }
+        catch (final InterruptedException e)
+        {
@@ -76,0 +98 @@ public final class IOUtil {
+
diff --git a/src/main/java/org/apache/commons/net/finger/FingerClient.java b/src/main/java/org/apache/commons/net/finger/FingerClient.java
index 2fdb66ed8..255175e03 100644
--- a/src/main/java/org/apache/commons/net/finger/FingerClient.java
+++ b/src/main/java/org/apache/commons/net/finger/FingerClient.java
@@ -30,4 +30,6 @@ import org.apache.commons.net.util.Charsets;
- * The FingerClient class implements the client side of the Internet Finger Protocol defined in RFC 1288. To finger a host you create a FingerClient instance,
- * connect to the host, query the host, and finally disconnect from the host. If the finger service you want to query is on a non-standard port, connect to the
- * host at that port. Here's a sample use:
- *
+ * The FingerClient class implements the client side of the Internet Finger
+ * Protocol defined in RFC 1288.  To finger a host you create a
+ * FingerClient instance, connect to the host, query the host, and finally
+ * disconnect from the host.  If the finger service you want to query is on
+ * a non-standard port, connect to the host at that port.
+ * Here's a sample use:
@@ -35 +37 @@ import org.apache.commons.net.util.Charsets;
- * FingerClient finger;
+ *    FingerClient finger;
@@ -37 +39 @@ import org.apache.commons.net.util.Charsets;
- * finger = new FingerClient();
+ *    finger = new FingerClient();
@@ -39,8 +41,8 @@ import org.apache.commons.net.util.Charsets;
- * try {
- *     finger.connect("foo.bar.com");
- *     System.out.println(finger.query("foobar", false));
- *     finger.disconnect();
- * } catch (IOException e) {
- *     System.err.println("Error I/O exception: " + e.getMessage());
- *     return;
- * }
+ *    try {
+ *      finger.connect("foo.bar.com");
+ *      System.out.println(finger.query("foobar", false));
+ *      finger.disconnect();
+ *    } catch(IOException e) {
+ *      System.err.println("Error I/O exception: " + e.getMessage());
+ *      return;
+ *    }
@@ -51 +53,2 @@ import org.apache.commons.net.util.Charsets;
-public class FingerClient extends SocketClient {
+public class FingerClient extends SocketClient
+{
@@ -53 +56 @@ public class FingerClient extends SocketClient {
-     * The default FINGER port. Set to 79 according to RFC 1288.
+     * The default FINGER port.  Set to 79 according to RFC 1288.
@@ -62 +65,2 @@ public class FingerClient extends SocketClient {
-     * The default FingerClient constructor. Initializes the default port to <code> DEFAULT_PORT </code>.
+     * The default FingerClient constructor.  Initializes the
+     * default port to <code> DEFAULT_PORT </code>.
@@ -64 +68,2 @@ public class FingerClient extends SocketClient {
-    public FingerClient() {
+    public FingerClient()
+    {
@@ -67,0 +73 @@ public class FingerClient extends SocketClient {
+
@@ -69,3 +75,5 @@ public class FingerClient extends SocketClient {
-     * Fingers the connected host and returns the input stream from the network connection of the finger query. This is equivalent to calling
-     * getInputStream(longOutput, ""). You must first connect to a finger server before calling this method, and you should disconnect after finishing reading
-     * the stream.
+     * Fingers the connected host and returns the input stream from
+     * the network connection of the finger query.  This is equivalent to
+     * calling getInputStream(longOutput, "").  You must first connect to a
+     * finger server before calling this method, and you should disconnect
+     * after finishing reading the stream.
@@ -74 +82,2 @@ public class FingerClient extends SocketClient {
-     * @return The InputStream of the network connection of the finger query. Can be read to obtain finger results.
+     * @return The InputStream of the network connection of the finger query.
+     *         Can be read to obtain finger results.
@@ -77 +86,2 @@ public class FingerClient extends SocketClient {
-    public InputStream getInputStream(final boolean longOutput) throws IOException {
+    public InputStream getInputStream(final boolean longOutput) throws IOException
+    {
@@ -80,0 +91 @@ public class FingerClient extends SocketClient {
+
@@ -82,2 +93,4 @@ public class FingerClient extends SocketClient {
-     * Fingers a user and returns the input stream from the network connection of the finger query. You must first connect to a finger server before calling
-     * this method, and you should disconnect after finishing reading the stream.
+     * Fingers a user and returns the input stream from the network connection
+     * of the finger query.  You must first connect to a finger server before
+     * calling this method, and you should disconnect after finishing reading
+     * the stream.
@@ -86,2 +99,3 @@ public class FingerClient extends SocketClient {
-     * @param username   The name of the user to finger.
-     * @return The InputStream of the network connection of the finger query. Can be read to obtain finger results.
+     * @param username  The name of the user to finger.
+     * @return The InputStream of the network connection of the finger query.
+     *         Can be read to obtain finger results.
@@ -90 +104,3 @@ public class FingerClient extends SocketClient {
-    public InputStream getInputStream(final boolean longOutput, final String username) throws IOException {
+    public InputStream getInputStream(final boolean longOutput, final String username)
+    throws IOException
+    {
@@ -93,0 +110 @@ public class FingerClient extends SocketClient {
+
@@ -95,2 +112,4 @@ public class FingerClient extends SocketClient {
-     * Fingers a user and returns the input stream from the network connection of the finger query. You must first connect to a finger server before calling
-     * this method, and you should disconnect after finishing reading the stream.
+     * Fingers a user and returns the input stream from the network connection
+     * of the finger query.  You must first connect to a finger server before
+     * calling this method, and you should disconnect after finishing reading
+     * the stream.
@@ -99,3 +118,5 @@ public class FingerClient extends SocketClient {
-     * @param username   The name of the user to finger.
-     * @param encoding   the character encoding that should be used for the query, null for the platform's default encoding
-     * @return The InputStream of the network connection of the finger query. Can be read to obtain finger results.
+     * @param username  The name of the user to finger.
+     * @param encoding the character encoding that should be used for the query,
+     *        null for the platform's default encoding
+     * @return The InputStream of the network connection of the finger query.
+     *         Can be read to obtain finger results.
@@ -104 +125,2 @@ public class FingerClient extends SocketClient {
-    public InputStream getInputStream(final boolean longOutput, final String username, final String encoding) throws IOException {
+    public InputStream getInputStream(final boolean longOutput, final String username, final String encoding)
+            throws IOException {
@@ -125,2 +147,4 @@ public class FingerClient extends SocketClient {
-     * Fingers the connected host and returns the output as a String. You must first connect to a finger server before calling this method, and you should
-     * disconnect afterward. This is equivalent to calling <code> query(longOutput, "") </code>.
+     * Fingers the connected host and returns the output
+     * as a String.  You must first connect to a finger server before
+     * calling this method, and you should disconnect afterward.
+     * This is equivalent to calling <code> query(longOutput, "") </code>.
@@ -132 +156,2 @@ public class FingerClient extends SocketClient {
-    public String query(final boolean longOutput) throws IOException {
+    public String query(final boolean longOutput) throws IOException
+    {
@@ -137,2 +162,3 @@ public class FingerClient extends SocketClient {
-     * Fingers a user at the connected host and returns the output as a String. You must first connect to a finger server before calling this method, and you
-     * should disconnect afterward.
+     * Fingers a user at the connected host and returns the output
+     * as a String.  You must first connect to a finger server before
+     * calling this method, and you should disconnect afterward.
@@ -141 +167 @@ public class FingerClient extends SocketClient {
-     * @param username   The name of the user to finger.
+     * @param username  The name of the user to finger.
@@ -145 +171,2 @@ public class FingerClient extends SocketClient {
-    public String query(final boolean longOutput, final String username) throws IOException {
+    public String query(final boolean longOutput, final String username) throws IOException
+    {
@@ -149 +176,2 @@ public class FingerClient extends SocketClient {
-        try (final BufferedReader input = new BufferedReader(new InputStreamReader(getInputStream(longOutput, username), getCharset()))) {
+        try (final BufferedReader input = new BufferedReader(
+                new InputStreamReader(getInputStream(longOutput, username), getCharset()))) {
diff --git a/src/main/java/org/apache/commons/net/ftp/Configurable.java b/src/main/java/org/apache/commons/net/ftp/Configurable.java
index 2b24bbb71..bc2bd9084 100644
--- a/src/main/java/org/apache/commons/net/ftp/Configurable.java
+++ b/src/main/java/org/apache/commons/net/ftp/Configurable.java
@@ -19,0 +20 @@ package org.apache.commons.net.ftp;
+
@@ -21 +22,3 @@ package org.apache.commons.net.ftp;
- * This interface adds the aspect of configurability by means of a supplied FTPClientConfig object to other classes in the system, especially listing parsers.
+ * This interface adds the aspect of configurability by means of
+ * a supplied FTPClientConfig object to other classes in the
+ * system, especially listing parsers.
@@ -27 +30,3 @@ public interface Configurable {
-     * @throws IllegalArgumentException if the elements of the <code>config</code> are somehow inadequate to configure the Configurable object.
+     * @throws IllegalArgumentException if the elements of the
+     * <code>config</code> are somehow inadequate to configure the
+     * Configurable object.
diff --git a/src/main/java/org/apache/commons/net/ftp/FTP.java b/src/main/java/org/apache/commons/net/ftp/FTP.java
index af96e1dcc..d7969542e 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTP.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTP.java
@@ -19 +18,0 @@ package org.apache.commons.net.ftp;
-
@@ -40,2 +39,4 @@ import org.apache.commons.net.util.NetConstants;
- * FTP provides the basic the functionality necessary to implement your own FTP client. It extends org.apache.commons.net.SocketClient since extending
- * TelnetClient was causing unwanted behavior (like connections that did not time out properly).
+ * FTP provides the basic the functionality necessary to implement your
+ * own FTP client.  It extends org.apache.commons.net.SocketClient since
+ * extending TelnetClient was causing unwanted behavior (like connections
+ * that did not time out properly).
@@ -43,5 +44,11 @@ import org.apache.commons.net.util.NetConstants;
- * To derive the full benefits of the FTP class requires some knowledge of the FTP protocol defined in RFC 959. However, there is no reason why you should have
- * to use the FTP class. The {@link org.apache.commons.net.ftp.FTPClient} class, derived from FTP, implements all the functionality required of an FTP client.
- * The FTP class is made public to provide access to various FTP constants and to make it easier for adventurous programmers (or those with special needs) to
- * interact with the FTP protocol and implement their own clients. A set of methods with names corresponding to the FTP command names are provided to facilitate
- * this interaction.
+ * To derive the full benefits of the FTP class requires some knowledge
+ * of the FTP protocol defined in RFC 959.  However, there is no reason
+ * why you should have to use the FTP class.  The
+ * {@link org.apache.commons.net.ftp.FTPClient} class,
+ * derived from FTP,
+ * implements all the functionality required of an FTP client.  The
+ * FTP class is made public to provide access to various FTP constants
+ * and to make it easier for adventurous programmers (or those with
+ * special needs) to interact with the FTP protocol and implement their
+ * own clients.  A set of methods with names corresponding to the FTP
+ * command names are provided to facilitate this interaction.
@@ -49,9 +56,23 @@ import org.apache.commons.net.util.NetConstants;
- * You should keep in mind that the FTP server may choose to prematurely close a connection if the client has been idle for longer than a given time period
- * (usually 900 seconds). The FTP class will detect a premature FTP server connection closing when it receives a
- * {@link org.apache.commons.net.ftp.FTPReply#SERVICE_NOT_AVAILABLE FTPReply.SERVICE_NOT_AVAILABLE } response to a command. When that occurs, the FTP class
- * method encountering that reply will throw an {@link org.apache.commons.net.ftp.FTPConnectionClosedException} . <code>FTPConectionClosedException</code> is a
- * subclass of <code> IOException </code> and therefore need not be caught separately, but if you are going to catch it separately, its catch block must appear
- * before the more general <code> IOException </code> catch block. When you encounter an {@link org.apache.commons.net.ftp.FTPConnectionClosedException} , you
- * must disconnect the connection with {@link #disconnect disconnect() } to properly clean up the system resources used by FTP. Before disconnecting, you may
- * check the last reply code and text with {@link #getReplyCode getReplyCode }, {@link #getReplyString getReplyString }, and {@link #getReplyStrings
- * getReplyStrings}. You may avoid server disconnections while the client is idle by periodicaly sending NOOP commands to the server.
+ * You should keep in mind that the FTP server may choose to prematurely
+ * close a connection if the client has been idle for longer than a
+ * given time period (usually 900 seconds).  The FTP class will detect a
+ * premature FTP server connection closing when it receives a
+ * {@link org.apache.commons.net.ftp.FTPReply#SERVICE_NOT_AVAILABLE FTPReply.SERVICE_NOT_AVAILABLE }
+ *  response to a command.
+ * When that occurs, the FTP class method encountering that reply will throw
+ * an {@link org.apache.commons.net.ftp.FTPConnectionClosedException}
+ * .  <code>FTPConectionClosedException</code>
+ * is a subclass of <code> IOException </code> and therefore need not be
+ * caught separately, but if you are going to catch it separately, its
+ * catch block must appear before the more general <code> IOException </code>
+ * catch block.  When you encounter an
+ * {@link org.apache.commons.net.ftp.FTPConnectionClosedException}
+ * , you must disconnect the connection with
+ * {@link #disconnect  disconnect() } to properly clean up the
+ * system resources used by FTP.  Before disconnecting, you may check the
+ * last reply code and text with
+ * {@link #getReplyCode  getReplyCode },
+ * {@link #getReplyString  getReplyString },
+ * and {@link #getReplyStrings  getReplyStrings}.
+ * You may avoid server disconnections while the client is idle by
+ * periodicaly sending NOOP commands to the server.
@@ -59,4 +80,9 @@ import org.apache.commons.net.util.NetConstants;
- * Rather than list it separately for each method, we mention here that every method communicating with the server and throwing an IOException can also throw a
- * {@link org.apache.commons.net.MalformedServerReplyException} , which is a subclass of IOException. A MalformedServerReplyException will be thrown when the
- * reply received from the server deviates enough from the protocol specification that it cannot be interpreted in a useful manner despite attempts to be as
- * lenient as possible.
+ * Rather than list it separately for each method, we mention here that
+ * every method communicating with the server and throwing an IOException
+ * can also throw a
+ * {@link org.apache.commons.net.MalformedServerReplyException}
+ * , which is a subclass
+ * of IOException.  A MalformedServerReplyException will be thrown when
+ * the reply received from the server deviates enough from the protocol
+ * specification that it cannot be interpreted in a useful manner despite
+ * attempts to be as lenient as possible.
@@ -69 +95,2 @@ import org.apache.commons.net.util.NetConstants;
-public class FTP extends SocketClient {
+public class FTP extends SocketClient
+{
@@ -76,2 +103,3 @@ public class FTP extends SocketClient {
-     * A constant used to indicate the file(s) being transferred should be treated as ASCII. This is the default file type. All constants ending in
-     * <code>FILE_TYPE</code> are used to indicate file types.
+     * A constant used to indicate the file(s) being transferred should
+     * be treated as ASCII.  This is the default file type.  All constants
+     * ending in <code>FILE_TYPE</code> are used to indicate file types.
@@ -82,2 +110,4 @@ public class FTP extends SocketClient {
-     * A constant used to indicate the file(s) being transferred should be treated as EBCDIC. Note however that there are several different EBCDIC formats. All
-     * constants ending in <code>FILE_TYPE</code> are used to indicate file types.
+     * A constant used to indicate the file(s) being transferred should
+     * be treated as EBCDIC.  Note however that there are several different
+     * EBCDIC formats.  All constants ending in <code>FILE_TYPE</code>
+     * are used to indicate file types.
@@ -86,0 +117 @@ public class FTP extends SocketClient {
+
@@ -88,2 +119,4 @@ public class FTP extends SocketClient {
-     * A constant used to indicate the file(s) being transferred should be treated as a binary image, i.e., no translations should be performed. All constants
-     * ending in <code>FILE_TYPE</code> are used to indicate file types.
+     * A constant used to indicate the file(s) being transferred should
+     * be treated as a binary image, i.e., no translations should be
+     * performed.  All constants ending in <code>FILE_TYPE</code> are used to
+     * indicate file types.
@@ -94,2 +127,3 @@ public class FTP extends SocketClient {
-     * A constant used to indicate the file(s) being transferred should be treated as a local type. All constants ending in <code>FILE_TYPE</code> are used to
-     * indicate file types.
+     * A constant used to indicate the file(s) being transferred should
+     * be treated as a local type.  All constants ending in
+     * <code>FILE_TYPE</code> are used to indicate file types.
@@ -100,2 +134,4 @@ public class FTP extends SocketClient {
-     * A constant used for text files to indicate a non-print text format. This is the default format. All constants ending in <code>TEXT_FORMAT</code> are used
-     * to indicate text formatting for text transfers (both ASCII and EBCDIC).
+     * A constant used for text files to indicate a non-print text format.
+     * This is the default format.
+     * All constants ending in <code>TEXT_FORMAT</code> are used to indicate
+     * text formatting for text transfers (both ASCII and EBCDIC).
@@ -106,2 +142,4 @@ public class FTP extends SocketClient {
-     * A constant used to indicate a text file contains format vertical format control characters. All constants ending in <code>TEXT_FORMAT</code> are used to
-     * indicate text formatting for text transfers (both ASCII and EBCDIC).
+     * A constant used to indicate a text file contains format vertical format
+     * control characters.
+     * All constants ending in <code>TEXT_FORMAT</code> are used to indicate
+     * text formatting for text transfers (both ASCII and EBCDIC).
@@ -112,2 +150,4 @@ public class FTP extends SocketClient {
-     * A constant used to indicate a text file contains ASA vertical format control characters. All constants ending in <code>TEXT_FORMAT</code> are used to
-     * indicate text formatting for text transfers (both ASCII and EBCDIC).
+     * A constant used to indicate a text file contains ASA vertical format
+     * control characters.
+     * All constants ending in <code>TEXT_FORMAT</code> are used to indicate
+     * text formatting for text transfers (both ASCII and EBCDIC).
@@ -118,2 +158,4 @@ public class FTP extends SocketClient {
-     * A constant used to indicate a file is to be treated as a continuous sequence of bytes. This is the default structure. All constants ending in
-     * <code>_STRUCTURE</code> are used to indicate file structure for file transfers.
+     * A constant used to indicate a file is to be treated as a continuous
+     * sequence of bytes.  This is the default structure.  All constants ending
+     * in <code>_STRUCTURE</code> are used to indicate file structure for
+     * file transfers.
@@ -124,2 +166,3 @@ public class FTP extends SocketClient {
-     * A constant used to indicate a file is to be treated as a sequence of records. All constants ending in <code>_STRUCTURE</code> are used to indicate file
-     * structure for file transfers.
+     * A constant used to indicate a file is to be treated as a sequence
+     * of records.  All constants ending in <code>_STRUCTURE</code>
+     * are used to indicate file structure for file transfers.
@@ -130,2 +173,4 @@ public class FTP extends SocketClient {
-     * A constant used to indicate a file is to be treated as a set of independent indexed pages. All constants ending in <code>_STRUCTURE</code> are used to
-     * indicate file structure for file transfers.
+     * A constant used to indicate a file is to be treated as a set of
+     * independent indexed pages.  All constants ending in
+     * <code>_STRUCTURE</code> are used to indicate file structure for file
+     * transfers.
@@ -136,2 +181,4 @@ public class FTP extends SocketClient {
-     * A constant used to indicate a file is to be transferred as a stream of bytes. This is the default transfer mode. All constants ending in
-     * <code>TRANSFER_MODE</code> are used to indicate file transfer modes.
+     * A constant used to indicate a file is to be transferred as a stream
+     * of bytes.  This is the default transfer mode.  All constants ending
+     * in <code>TRANSFER_MODE</code> are used to indicate file transfer
+     * modes.
@@ -142,2 +189,3 @@ public class FTP extends SocketClient {
-     * A constant used to indicate a file is to be transferred as a series of blocks. All constants ending in <code>TRANSFER_MODE</code> are used to indicate
-     * file transfer modes.
+     * A constant used to indicate a file is to be transferred as a series
+     * of blocks.  All constants ending in <code>TRANSFER_MODE</code> are used
+     * to indicate file transfer modes.
@@ -148,2 +196,3 @@ public class FTP extends SocketClient {
-     * A constant used to indicate a file is to be transferred as FTP compressed data. All constants ending in <code>TRANSFER_MODE</code> are used to indicate
-     * file transfer modes.
+     * A constant used to indicate a file is to be transferred as FTP
+     * compressed data.  All constants ending in <code>TRANSFER_MODE</code>
+     * are used to indicate file transfer modes.
@@ -157,2 +206,5 @@ public class FTP extends SocketClient {
-     * The default character encoding used for communicating over an FTP control connection. The default encoding is an ASCII-compatible encoding. Some FTP
-     * servers expect other encodings. You can change the encoding used by an FTP instance with {@link #setControlEncoding setControlEncoding}.
+     * The default character encoding used for communicating over an
+     * FTP control connection.  The default encoding is an
+     * ASCII-compatible encoding.  Some FTP servers expect other
+     * encodings.  You can change the encoding used by an FTP instance
+     * with {@link #setControlEncoding setControlEncoding}.
@@ -173 +225,2 @@ public class FTP extends SocketClient {
-     * A ProtocolCommandSupport object used to manage the registering of ProtocolCommandListeners and the firing of ProtocolCommandEvents.
+     * A ProtocolCommandSupport object used to manage the registering of
+     * ProtocolCommandListeners and the firing of ProtocolCommandEvents.
@@ -178,2 +231,3 @@ public class FTP extends SocketClient {
-     * This is used to signal whether a block of multiline responses beginning with xxx must be terminated by the same numeric code xxx See section 4.2 of RFC
-     * 959 for details.
+     * This is used to signal whether a block of multiline responses beginning
+     * with xxx must be terminated by the same numeric code xxx
+     * See section 4.2 of RFC 959 for details.
@@ -184,2 +238,4 @@ public class FTP extends SocketClient {
-     * If this is true, then non-multiline replies must have the format: 3 digit code <space> <text> If false, then the 3 digit code does not have to be
-     * followed by space See section 4.2 of RFC 959 for details.
+     * If this is true, then non-multiline replies must have the format:
+     * 3 digit code <space> <text>
+     * If false, then the 3 digit code does not have to be followed by space
+     * See section 4.2 of RFC 959 for details.
@@ -190,2 +246,5 @@ public class FTP extends SocketClient {
-     * Wraps SocketClient._input_ to facilitate the reading of text from the FTP control connection. Do not access the control connection via
-     * SocketClient._input_. This member starts with a null value, is initialized in {@link #_connectAction_}, and set to null in {@link #disconnect}.
+     * Wraps SocketClient._input_ to facilitate the reading of text
+     * from the FTP control connection.  Do not access the control
+     * connection via SocketClient._input_.  This member starts
+     * with a null value, is initialized in {@link #_connectAction_},
+     * and set to null in {@link #disconnect}.
@@ -196,2 +255,5 @@ public class FTP extends SocketClient {
-     * Wraps SocketClient._output_ to facilitate the writing of text to the FTP control connection. Do not access the control connection via
-     * SocketClient._output_. This member starts with a null value, is initialized in {@link #_connectAction_}, and set to null in {@link #disconnect}.
+     * Wraps SocketClient._output_ to facilitate the writing of text
+     * to the FTP control connection.  Do not access the control
+     * connection via SocketClient._output_.  This member starts
+     * with a null value, is initialized in {@link #_connectAction_},
+     * and set to null in {@link #disconnect}.
@@ -202,2 +264,3 @@ public class FTP extends SocketClient {
-     * The default FTP constructor. Sets the default port to <code>DEFAULT_PORT</code> and initializes internal data structures for saving FTP reply
-     * information.
+     * The default FTP constructor.  Sets the default port to
+     * <code>DEFAULT_PORT</code> and initializes internal data structures
+     * for saving FTP reply information.
@@ -205 +268,2 @@ public class FTP extends SocketClient {
-    public FTP() {
+    public FTP()
+    {
@@ -215,2 +279,2 @@ public class FTP extends SocketClient {
-     * Get the reply, but don't pass it to command listeners. Used for keep-alive processing only.
-     *
+     * Get the reply, but don't pass it to command listeners.
+     * Used for keep-alive processing only.
@@ -220 +284,2 @@ public class FTP extends SocketClient {
-    protected void __getReplyNoReport() throws IOException {
+    protected void __getReplyNoReport()  throws IOException
+    {
@@ -225 +290,2 @@ public class FTP extends SocketClient {
-     * Send a noop and get the reply without reporting to the command listener. Intended for use with keep-alive.
+     * Send a noop and get the reply without reporting to the command listener.
+     * Intended for use with keep-alive.
@@ -237 +303,2 @@ public class FTP extends SocketClient {
-     * Initiates control connections and gets initial reply. Initializes {@link #_controlInput_} and {@link #_controlOutput_}.
+     * Initiates control connections and gets initial reply.
+     * Initializes {@link #_controlInput_} and {@link #_controlOutput_}.
@@ -240 +307,2 @@ public class FTP extends SocketClient {
-    protected void _connectAction_() throws IOException {
+    protected void _connectAction_() throws IOException
+    {
@@ -245 +313,2 @@ public class FTP extends SocketClient {
-     * Initiates control connections and gets initial reply. Initializes {@link #_controlInput_} and {@link #_controlOutput_}.
+     * Initiates control connections and gets initial reply.
+     * Initializes {@link #_controlInput_} and {@link #_controlOutput_}.
@@ -253,2 +322,3 @@ public class FTP extends SocketClient {
-        if (socketIsReader == null) {
-            _controlInput_ = new CRLFLineReader(new InputStreamReader(_input_, getControlEncoding()));
+        if(socketIsReader == null) {
+            _controlInput_ =
+                    new CRLFLineReader(new InputStreamReader(_input_, getControlEncoding()));
@@ -258 +328,2 @@ public class FTP extends SocketClient {
-        _controlOutput_ = new BufferedWriter(new OutputStreamWriter(_output_, getControlEncoding()));
+        _controlOutput_ =
+            new BufferedWriter(new OutputStreamWriter(_output_, getControlEncoding()));
@@ -285 +356,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP ABOR command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP ABOR command to the server,
+     * receive the reply, and return the reply code.
@@ -288,6 +360,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int abor() throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int abor() throws IOException
+    {
@@ -296,0 +373 @@ public class FTP extends SocketClient {
+
@@ -298 +375,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP ACCT command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP ACCT command to the server,
+     * receive the reply, and return the reply code.
@@ -300 +378 @@ public class FTP extends SocketClient {
-     * @param account The account name to access.
+     * @param account  The account name to access.
@@ -302,6 +380,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int acct(final String account) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int acct(final String account) throws IOException
+    {
@@ -310,0 +393 @@ public class FTP extends SocketClient {
+
@@ -312 +395,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP ALLO command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP ALLO command to the server,
+     * receive the reply, and return the reply code.
@@ -316,6 +400,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int allo(final int bytes) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int allo(final int bytes) throws IOException
+    {
@@ -324,0 +413 @@ public class FTP extends SocketClient {
+
@@ -326 +415,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP ALLO command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP ALLO command to the server,
+     * receive the reply, and return the reply code.
@@ -328,2 +418,2 @@ public class FTP extends SocketClient {
-     * @param bytes      The number of bytes to allocate.
-     * @param recordSize The size of a record.
+     * @param bytes The number of bytes to allocate.
+     * @param recordSize  The size of a record.
@@ -331,4 +421,7 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -336,2 +429,4 @@ public class FTP extends SocketClient {
-    public int allo(final int bytes, final int recordSize) throws IOException {
-        return sendCommand(FTPCmd.ALLO, Integer.toString(bytes) + " R " + Integer.toString(recordSize));
+    public int allo(final int bytes, final int recordSize) throws IOException
+    {
+        return sendCommand(FTPCmd.ALLO, Integer.toString(bytes) + " R " +
+                           Integer.toString(recordSize));
@@ -339,0 +435 @@ public class FTP extends SocketClient {
+
@@ -341 +437,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP ALLO command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP ALLO command to the server,
+     * receive the reply, and return the reply code.
@@ -345,6 +442,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int allo(final long bytes) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int allo(final long bytes) throws IOException
+    {
@@ -353,0 +455 @@ public class FTP extends SocketClient {
+
@@ -355 +457,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP ALLO command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP ALLO command to the server,
+     * receive the reply, and return the reply code.
@@ -357,2 +460,2 @@ public class FTP extends SocketClient {
-     * @param bytes      The number of bytes to allocate.
-     * @param recordSize The size of a record.
+     * @param bytes The number of bytes to allocate.
+     * @param recordSize  The size of a record.
@@ -360,4 +463,7 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -365,2 +471,4 @@ public class FTP extends SocketClient {
-    public int allo(final long bytes, final int recordSize) throws IOException {
-        return sendCommand(FTPCmd.ALLO, Long.toString(bytes) + " R " + Integer.toString(recordSize));
+    public int allo(final long bytes, final int recordSize) throws IOException
+    {
+        return sendCommand(FTPCmd.ALLO, Long.toString(bytes) + " R " +
+                           Integer.toString(recordSize));
@@ -370,3 +478,5 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP APPE command to the server, receive the reply, and return the reply code. Remember, it is up to you to manage the
-     * data connection. If you don't need this low level of access, use {@link org.apache.commons.net.ftp.FTPClient} , which will handle all low level details
-     * for you.
+     * A convenience method to send the FTP APPE command to the server,
+     * receive the reply, and return the reply code.  Remember, it is up
+     * to you to manage the data connection.  If you don't need this low
+     * level of access, use {@link org.apache.commons.net.ftp.FTPClient}
+     * , which will handle all low level details for you.
@@ -374 +484,2 @@ public class FTP extends SocketClient {
-     * @param pathname The pathname to use for the file when stored at the remote end of the transfer.
+     * @param pathname  The pathname to use for the file when stored at
+     *                  the remote end of the transfer.
@@ -376,6 +487,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int appe(final String pathname) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int appe(final String pathname) throws IOException
+    {
@@ -390 +505,2 @@ public class FTP extends SocketClient {
-        if (args != null) {
+        if (args != null)
+        {
@@ -399 +515,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP CDUP command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP CDUP command to the server,
+     * receive the reply, and return the reply code.
@@ -402,6 +519,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int cdup() throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int cdup() throws IOException
+    {
@@ -412 +533,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP CWD command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP CWD command to the server,
+     * receive the reply, and return the reply code.
@@ -416,6 +538,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int cwd(final String directory) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int cwd(final String directory) throws IOException
+    {
@@ -426 +552,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP DELE command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP DELE command to the server,
+     * receive the reply, and return the reply code.
@@ -430,6 +557,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int dele(final String pathname) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int dele(final String pathname) throws IOException
+    {
@@ -440,3 +571,5 @@ public class FTP extends SocketClient {
-     * Closes the control connection to the FTP server and sets to null some internal data so that the memory may be reclaimed by the garbage collector. The
-     * reply text and code information from the last command is voided so that the memory it used may be reclaimed. Also sets {@link #_controlInput_} and
-     * {@link #_controlOutput_} to null.
+     * Closes the control connection to the FTP server and sets to null
+     * some internal data so that the memory may be reclaimed by the
+     * garbage collector.  The reply text and code information from the
+     * last command is voided so that the memory it used may be reclaimed.
+     * Also sets {@link #_controlInput_} and {@link #_controlOutput_} to null.
@@ -447 +580,2 @@ public class FTP extends SocketClient {
-    public void disconnect() throws IOException {
+    public void disconnect() throws IOException
+    {
@@ -456 +590,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP EPRT command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP EPRT command to the server,
+     * receive the reply, and return the reply code.
@@ -466,2 +601,2 @@ public class FTP extends SocketClient {
-     * @param host The host owning the port.
-     * @param port The new port.
+     * @param host  The host owning the port.
+     * @param port  The new port.
@@ -469,4 +604,7 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -475 +613,2 @@ public class FTP extends SocketClient {
-    public int eprt(final InetAddress host, final int port) throws IOException {
+    public int eprt(final InetAddress host, final int port) throws IOException
+    {
@@ -502,0 +642 @@ public class FTP extends SocketClient {
+
@@ -504,2 +644,4 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP EPSV command to the server, receive the reply, and return the reply code. Remember, it's up to you to interpret the
-     * reply string containing the host/port information.
+     * A convenience method to send the FTP EPSV command to the server,
+     * receive the reply, and return the reply code.  Remember, it's up
+     * to you to interpret the reply string containing the host/port
+     * information.
@@ -508,4 +650,7 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -514 +659,2 @@ public class FTP extends SocketClient {
-    public int epsv() throws IOException {
+    public int epsv() throws IOException
+    {
@@ -517,0 +664 @@ public class FTP extends SocketClient {
+
@@ -519,2 +666,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP FEAT command to the server, receive the reply, and return the reply code.
-     *
+     * A convenience method to send the FTP FEAT command to the server, receive the reply,
+     * and return the reply code.
@@ -522 +669,2 @@ public class FTP extends SocketClient {
-     * @throws IOException If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -525 +673,2 @@ public class FTP extends SocketClient {
-    public int feat() throws IOException {
+    public int feat() throws IOException
+    {
@@ -536,0 +686 @@ public class FTP extends SocketClient {
+
@@ -538 +688,2 @@ public class FTP extends SocketClient {
-     * @return The character encoding used to communicate over the control connection.
+     * @return The character encoding used to communicate over the
+     * control connection.
@@ -545,3 +696,6 @@ public class FTP extends SocketClient {
-     * Fetches a reply from the FTP server and returns the integer reply code. After calling this method, the actual reply text can be accessed from either
-     * calling {@link #getReplyString getReplyString } or {@link #getReplyStrings getReplyStrings }. Only use this method if you are implementing your own FTP
-     * client or if you need to fetch a secondary response from the FTP server.
+     * Fetches a reply from the FTP server and returns the integer reply
+     * code.  After calling this method, the actual reply text can be accessed
+     * from either  calling {@link #getReplyString  getReplyString } or
+     * {@link #getReplyStrings  getReplyStrings }.  Only use this
+     * method if you are implementing your own FTP client or if you need to
+     * fetch a secondary response from the FTP server.
@@ -550,6 +704,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while receiving the server reply.
-     */
-    public int getReply() throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while receiving the
+     *                         server reply.
+     */
+    public int getReply() throws IOException
+    {
@@ -559 +717,2 @@ public class FTP extends SocketClient {
-    private int getReply(final boolean reportReply) throws IOException {
+    private int getReply(final boolean reportReply) throws IOException
+    {
@@ -568 +727,2 @@ public class FTP extends SocketClient {
-            throw new FTPConnectionClosedException("Connection closed without indication.");
+            throw new FTPConnectionClosedException(
+                    "Connection closed without indication.");
@@ -575 +735,2 @@ public class FTP extends SocketClient {
-            throw new MalformedServerReplyException("Truncated server reply: " + line);
+            throw new MalformedServerReplyException(
+                "Truncated server reply: " + line);
@@ -579 +740,2 @@ public class FTP extends SocketClient {
-        try {
+        try
+        {
@@ -582,2 +744,5 @@ public class FTP extends SocketClient {
-        } catch (final NumberFormatException e) {
-            throw new MalformedServerReplyException("Could not parse response code.\nServer Reply: " + line);
+        }
+        catch (final NumberFormatException e)
+        {
+            throw new MalformedServerReplyException(
+                "Could not parse response code.\nServer Reply: " + line);
@@ -593 +758,2 @@ public class FTP extends SocketClient {
-                do {
+                do
+                {
@@ -597 +763,2 @@ public class FTP extends SocketClient {
-                        throw new FTPConnectionClosedException("Connection closed without indication.");
+                        throw new FTPConnectionClosedException(
+                            "Connection closed without indication.");
@@ -605 +772,2 @@ public class FTP extends SocketClient {
-                } while (isStrictMultilineParsing() ? strictCheck(line, code) : lenientCheck(line));
+                }
+                while ( isStrictMultilineParsing() ? strictCheck(line, code) : lenientCheck(line));
@@ -609 +777 @@ public class FTP extends SocketClient {
-                    throw new MalformedServerReplyException("Truncated server reply: '" + line + "'");
+                    throw new MalformedServerReplyException("Truncated server reply: '" + line +"'");
@@ -612 +780 @@ public class FTP extends SocketClient {
-                    throw new MalformedServerReplyException("Invalid server reply: '" + line + "'");
+                    throw new MalformedServerReplyException("Invalid server reply: '" + line +"'");
@@ -616 +784 @@ public class FTP extends SocketClient {
-            throw new MalformedServerReplyException("Truncated server reply: '" + line + "'");
+            throw new MalformedServerReplyException("Truncated server reply: '" + line +"'");
@@ -628,0 +797 @@ public class FTP extends SocketClient {
+
@@ -630,2 +799,4 @@ public class FTP extends SocketClient {
-     * Returns the integer value of the reply code of the last FTP reply. You will usually only use this method after you connect to the FTP server to check
-     * that the connection was successful since <code> connect </code> is of type void.
+     * Returns the integer value of the reply code of the last FTP reply.
+     * You will usually only use this method after you connect to the
+     * FTP server to check that the connection was successful since
+     * <code> connect </code> is of type void.
@@ -635 +806,2 @@ public class FTP extends SocketClient {
-    public int getReplyCode() {
+    public int getReplyCode()
+    {
@@ -640 +812,3 @@ public class FTP extends SocketClient {
-     * Returns the entire text of the last FTP server response exactly as it was received, including all end of line markers in NETASCII format.
+     * Returns the entire text of the last FTP server response exactly
+     * as it was received, including all end of line markers in NETASCII
+     * format.
@@ -644 +818,2 @@ public class FTP extends SocketClient {
-    public String getReplyString() {
+    public String getReplyString()
+    {
@@ -654,2 +829,2 @@ public class FTP extends SocketClient {
-            buffer.append(line);
-            buffer.append(SocketClient.NETASCII_EOL);
+                buffer.append(line);
+                buffer.append(SocketClient.NETASCII_EOL);
@@ -658 +833 @@ public class FTP extends SocketClient {
-        _newReplyString = false;
+         _newReplyString = false;
@@ -664 +839,2 @@ public class FTP extends SocketClient {
-     * Returns the nth line of text from the last FTP server response as a string. The end of line markers of each are stripped from the line.
+     * Returns the nth line of text from the last FTP server response as a string. The end of line markers of each are
+     * stripped from the line.
@@ -670 +846,2 @@ public class FTP extends SocketClient {
-    String getReplyString(final int index) {
+    String getReplyString(final int index)
+    {
@@ -673,0 +851 @@ public class FTP extends SocketClient {
+
@@ -675,2 +853,3 @@ public class FTP extends SocketClient {
-     * Returns the lines of text from the last FTP server response as an array of strings, one entry per line. The end of line markers of each are stripped from
-     * each line.
+     * Returns the lines of text from the last FTP server response as an array
+     * of strings, one entry per line.  The end of line markers of each are
+     * stripped from each line.
@@ -680 +859,2 @@ public class FTP extends SocketClient {
-    public String[] getReplyStrings() {
+    public String[] getReplyStrings()
+    {
@@ -685 +865,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP HELP command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP HELP command to the server,
+     * receive the reply, and return the reply code.
@@ -688,6 +869,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int help() throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int help() throws IOException
+    {
@@ -698 +883,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP HELP command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP HELP command to the server,
+     * receive the reply, and return the reply code.
@@ -700 +886 @@ public class FTP extends SocketClient {
-     * @param command The command name on which to request help.
+     * @param command  The command name on which to request help.
@@ -702,6 +888,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int help(final String command) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int help(final String command) throws IOException
+    {
@@ -713 +902,0 @@ public class FTP extends SocketClient {
-     *
@@ -724,3 +913,4 @@ public class FTP extends SocketClient {
-     * The default is true, which requires the 3 digit code be followed by space and some text. <br>
-     * If false, only the 3 digit code is required (as was the case for versions up to 3.5) <br>
-     *
+     * The default is true, which requires the 3 digit code be followed by space and some text.
+     * <br>
+     * If false, only the 3 digit code is required (as was the case for versions up to 3.5)
+     * <br>
@@ -736 +926 @@ public class FTP extends SocketClient {
-    // 426 multi-line reply in response to ls /. We relax the condition to
+    // 426 multi-line reply in response to ls /.  We relax the condition to
@@ -740 +930,2 @@ public class FTP extends SocketClient {
-        return !(line.length() > REPLY_CODE_LEN && line.charAt(REPLY_CODE_LEN) != '-' && Character.isDigit(line.charAt(0)));
+        return !(line.length() > REPLY_CODE_LEN&& line.charAt(REPLY_CODE_LEN) != '-' &&
+                Character.isDigit(line.charAt(0)));
@@ -744,3 +935,5 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP LIST command to the server, receive the reply, and return the reply code. Remember, it is up to you to manage the
-     * data connection. If you don't need this low level of access, use {@link org.apache.commons.net.ftp.FTPClient} , which will handle all low level details
-     * for you.
+     * A convenience method to send the FTP LIST command to the server,
+     * receive the reply, and return the reply code.  Remember, it is up
+     * to you to manage the data connection.  If you don't need this low
+     * level of access, use {@link org.apache.commons.net.ftp.FTPClient}
+     * , which will handle all low level details for you.
@@ -749,6 +942,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int list() throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int list() throws IOException
+    {
@@ -759,3 +956,5 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP LIST command to the server, receive the reply, and return the reply code. Remember, it is up to you to manage the
-     * data connection. If you don't need this low level of access, use {@link org.apache.commons.net.ftp.FTPClient} , which will handle all low level details
-     * for you.
+     * A convenience method to send the FTP LIST command to the server,
+     * receive the reply, and return the reply code.  Remember, it is up
+     * to you to manage the data connection.  If you don't need this low
+     * level of access, use {@link org.apache.commons.net.ftp.FTPClient}
+     * , which will handle all low level details for you.
@@ -763 +962,2 @@ public class FTP extends SocketClient {
-     * @param pathname The pathname to list, may be {@code null} in which case the command is sent with no parameters
+     * @param pathname  The pathname to list,
+     * may be {@code null} in which case the command is sent with no parameters
@@ -765,6 +965,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int list(final String pathname) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int list(final String pathname) throws IOException
+    {
@@ -782 +986,2 @@ public class FTP extends SocketClient {
-    public int mdtm(final String file) throws IOException {
+    public int mdtm(final String file) throws IOException
+    {
@@ -786,2 +991,3 @@ public class FTP extends SocketClient {
-    /**
-     * A convenience method to send the FTP MFMT command to the server, receive the reply, and return the reply code.
+     /**
+     * A convenience method to send the FTP MFMT command to the server,
+     * receive the reply, and return the reply code.
@@ -790 +996 @@ public class FTP extends SocketClient {
-     * @param timeval  Timestamp in <code>yyyyMMDDhhmmss</code> format
+     * @param timeval Timestamp in <code>yyyyMMDDhhmmss</code> format
@@ -792,4 +998,7 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -799 +1008,2 @@ public class FTP extends SocketClient {
-    public int mfmt(final String pathname, final String timeval) throws IOException {
+    public int mfmt(final String pathname, final String timeval) throws IOException
+    {
@@ -804 +1014,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP MKD command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP MKD command to the server,
+     * receive the reply, and return the reply code.
@@ -808,6 +1019,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int mkd(final String pathname) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int mkd(final String pathname) throws IOException
+    {
@@ -816,0 +1032 @@ public class FTP extends SocketClient {
+
@@ -818,3 +1034,5 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP MLSD command to the server, receive the reply, and return the reply code. Remember, it is up to you to manage the
-     * data connection. If you don't need this low level of access, use {@link org.apache.commons.net.ftp.FTPClient} , which will handle all low level details
-     * for you.
+     * A convenience method to send the FTP MLSD command to the server,
+     * receive the reply, and return the reply code.  Remember, it is up
+     * to you to manage the data connection.  If you don't need this low
+     * level of access, use {@link org.apache.commons.net.ftp.FTPClient}
+     * , which will handle all low level details for you.
@@ -823,4 +1041,7 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -829 +1050,2 @@ public class FTP extends SocketClient {
-    public int mlsd() throws IOException {
+    public int mlsd() throws IOException
+    {
@@ -834,3 +1056,5 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP MLSD command to the server, receive the reply, and return the reply code. Remember, it is up to you to manage the
-     * data connection. If you don't need this low level of access, use {@link org.apache.commons.net.ftp.FTPClient} , which will handle all low level details
-     * for you.
+     * A convenience method to send the FTP MLSD command to the server,
+     * receive the reply, and return the reply code.  Remember, it is up
+     * to you to manage the data connection.  If you don't need this low
+     * level of access, use {@link org.apache.commons.net.ftp.FTPClient}
+     * , which will handle all low level details for you.
@@ -839,5 +1063,9 @@ public class FTP extends SocketClient {
-     * @return The reply code received from the server, may be {@code null} in which case the command is sent with no parameters
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
+     * @return The reply code received from the server,
+     * may be {@code null} in which case the command is sent with no parameters
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -846 +1074,2 @@ public class FTP extends SocketClient {
-    public int mlsd(final String path) throws IOException {
+    public int mlsd(final String path) throws IOException
+    {
@@ -851,3 +1080,5 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP MLST command to the server, receive the reply, and return the reply code. Remember, it is up to you to manage the
-     * data connection. If you don't need this low level of access, use {@link org.apache.commons.net.ftp.FTPClient} , which will handle all low level details
-     * for you.
+     * A convenience method to send the FTP MLST command to the server,
+     * receive the reply, and return the reply code.  Remember, it is up
+     * to you to manage the data connection.  If you don't need this low
+     * level of access, use {@link org.apache.commons.net.ftp.FTPClient}
+     * , which will handle all low level details for you.
@@ -856,4 +1087,7 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -862 +1096,2 @@ public class FTP extends SocketClient {
-    public int mlst() throws IOException {
+    public int mlst() throws IOException
+    {
@@ -867,3 +1102,5 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP MLST command to the server, receive the reply, and return the reply code. Remember, it is up to you to manage the
-     * data connection. If you don't need this low level of access, use {@link org.apache.commons.net.ftp.FTPClient} , which will handle all low level details
-     * for you.
+     * A convenience method to send the FTP MLST command to the server,
+     * receive the reply, and return the reply code.  Remember, it is up
+     * to you to manage the data connection.  If you don't need this low
+     * level of access, use {@link org.apache.commons.net.ftp.FTPClient}
+     * , which will handle all low level details for you.
@@ -872,5 +1109,9 @@ public class FTP extends SocketClient {
-     * @return The reply code received from the server, may be {@code null} in which case the command is sent with no parameters
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
+     * @return The reply code received from the server,
+     * may be {@code null} in which case the command is sent with no parameters
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -879 +1120,2 @@ public class FTP extends SocketClient {
-    public int mlst(final String path) throws IOException {
+    public int mlst(final String path) throws IOException
+    {
@@ -884 +1126,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP MODE command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP MODE command to the server,
+     * receive the reply, and return the reply code.
@@ -886 +1129,2 @@ public class FTP extends SocketClient {
-     * @param mode The transfer mode to use (one of the <code>TRANSFER_MODE</code> constants).
+     * @param mode  The transfer mode to use (one of the
+     *         <code>TRANSFER_MODE</code> constants).
@@ -888,4 +1132,7 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -893,2 +1140,4 @@ public class FTP extends SocketClient {
-    public int mode(final int mode) throws IOException {
-        return sendCommand(FTPCmd.MODE, modes.substring(mode, mode + 1));
+    public int mode(final int mode) throws IOException
+    {
+        return sendCommand(FTPCmd.MODE,
+                           modes.substring(mode, mode + 1));
@@ -898,3 +1147,5 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP NLST command to the server, receive the reply, and return the reply code. Remember, it is up to you to manage the
-     * data connection. If you don't need this low level of access, use {@link org.apache.commons.net.ftp.FTPClient} , which will handle all low level details
-     * for you.
+     * A convenience method to send the FTP NLST command to the server,
+     * receive the reply, and return the reply code.  Remember, it is up
+     * to you to manage the data connection.  If you don't need this low
+     * level of access, use {@link org.apache.commons.net.ftp.FTPClient}
+     * , which will handle all low level details for you.
@@ -903,6 +1154,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int nlst() throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int nlst() throws IOException
+    {
@@ -913,3 +1168,5 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP NLST command to the server, receive the reply, and return the reply code. Remember, it is up to you to manage the
-     * data connection. If you don't need this low level of access, use {@link org.apache.commons.net.ftp.FTPClient} , which will handle all low level details
-     * for you.
+     * A convenience method to send the FTP NLST command to the server,
+     * receive the reply, and return the reply code.  Remember, it is up
+     * to you to manage the data connection.  If you don't need this low
+     * level of access, use {@link org.apache.commons.net.ftp.FTPClient}
+     * , which will handle all low level details for you.
@@ -917 +1174,2 @@ public class FTP extends SocketClient {
-     * @param pathname The pathname to list, may be {@code null} in which case the command is sent with no parameters
+     * @param pathname  The pathname to list,
+     * may be {@code null} in which case the command is sent with no parameters
@@ -919,6 +1177,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int nlst(final String pathname) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int nlst(final String pathname) throws IOException
+    {
@@ -929 +1191,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP NOOP command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP NOOP command to the server,
+     * receive the reply, and return the reply code.
@@ -932,6 +1195,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int noop() throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int noop() throws IOException
+    {
@@ -942,2 +1209,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP PASS command to the server, receive the reply, and return the reply code.
-     *
+     * A convenience method to send the FTP PASS command to the server,
+     * receive the reply, and return the reply code.
@@ -946,6 +1213,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int pass(final String password) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int pass(final String password) throws IOException
+    {
@@ -956,2 +1227,4 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP PASV command to the server, receive the reply, and return the reply code. Remember, it's up to you to interpret the
-     * reply string containing the host/port information.
+     * A convenience method to send the FTP PASV command to the server,
+     * receive the reply, and return the reply code.  Remember, it's up
+     * to you to interpret the reply string containing the host/port
+     * information.
@@ -960,6 +1233,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int pasv() throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int pasv() throws IOException
+    {
@@ -970 +1247,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP PORT command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP PORT command to the server,
+     * receive the reply, and return the reply code.
@@ -972,2 +1250,2 @@ public class FTP extends SocketClient {
-     * @param host The host owning the port.
-     * @param port The new port.
+     * @param host  The host owning the port.
+     * @param port  The new port.
@@ -975,6 +1253,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int port(final InetAddress host, final int port) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int port(final InetAddress host, final int port) throws IOException
+    {
@@ -996 +1278,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP PWD command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP PWD command to the server,
+     * receive the reply, and return the reply code.
@@ -999,6 +1282,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int pwd() throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int pwd() throws IOException
+    {
@@ -1009 +1296,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP QUIT command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP QUIT command to the server,
+     * receive the reply, and return the reply code.
@@ -1012,6 +1300,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int quit() throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int quit() throws IOException
+    {
@@ -1022 +1314,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP REIN command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP REIN command to the server,
+     * receive the reply, and return the reply code.
@@ -1025,6 +1318,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int rein() throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int rein() throws IOException
+    {
@@ -1033,0 +1331 @@ public class FTP extends SocketClient {
+
@@ -1035 +1333,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP REST command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP REST command to the server,
+     * receive the reply, and return the reply code.
@@ -1039,6 +1338,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int rest(final String marker) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int rest(final String marker) throws IOException
+    {
@@ -1047,0 +1351 @@ public class FTP extends SocketClient {
+
@@ -1049,3 +1353,5 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP RETR command to the server, receive the reply, and return the reply code. Remember, it is up to you to manage the
-     * data connection. If you don't need this low level of access, use {@link org.apache.commons.net.ftp.FTPClient} , which will handle all low level details
-     * for you.
+     * A convenience method to send the FTP RETR command to the server,
+     * receive the reply, and return the reply code.  Remember, it is up
+     * to you to manage the data connection.  If you don't need this low
+     * level of access, use {@link org.apache.commons.net.ftp.FTPClient}
+     * , which will handle all low level details for you.
@@ -1053 +1359 @@ public class FTP extends SocketClient {
-     * @param pathname The pathname of the file to retrieve.
+     * @param pathname  The pathname of the file to retrieve.
@@ -1055,6 +1361,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int retr(final String pathname) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int retr(final String pathname) throws IOException
+    {
@@ -1063,0 +1374 @@ public class FTP extends SocketClient {
+
@@ -1065 +1376,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP RMD command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP RMD command to the server,
+     * receive the reply, and return the reply code.
@@ -1069,6 +1381,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int rmd(final String pathname) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int rmd(final String pathname) throws IOException
+    {
@@ -1079 +1395,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP RNFR command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP RNFR command to the server,
+     * receive the reply, and return the reply code.
@@ -1083,6 +1400,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int rnfr(final String pathname) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int rnfr(final String pathname) throws IOException
+    {
@@ -1093 +1414,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP RNTO command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP RNTO command to the server,
+     * receive the reply, and return the reply code.
@@ -1097,6 +1419,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int rnto(final String pathname) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int rnto(final String pathname) throws IOException
+    {
@@ -1106,2 +1432,3 @@ public class FTP extends SocketClient {
-    private void send(final String message) throws IOException, FTPConnectionClosedException, SocketException {
-        try {
+    private void send(final String message) throws IOException,
+            FTPConnectionClosedException, SocketException {
+        try{
@@ -1110,2 +1437,5 @@ public class FTP extends SocketClient {
-        } catch (final SocketException e) {
-            if (!isConnected()) {
+        }
+        catch (final SocketException e)
+        {
+            if (!isConnected())
+            {
@@ -1119,9 +1449,17 @@ public class FTP extends SocketClient {
-     * Sends an FTP command to the server, waits for a reply and returns the numerical response code. After invocation, for more detailed information, the
-     * actual reply text can be accessed by calling {@link #getReplyString getReplyString } or {@link #getReplyStrings getReplyStrings }.
-     *
-     * @param command The FTPCmd enum corresponding to the FTP command to send.
-     * @return The integer value of the FTP reply code returned by the server in response to the command.
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
+     * Sends an FTP command to the server, waits for a reply and returns the
+     * numerical response code.  After invocation, for more detailed
+     * information, the actual reply text can be accessed by calling
+     * {@link #getReplyString  getReplyString } or
+     * {@link #getReplyStrings  getReplyStrings }.
+     *
+     * @param command  The FTPCmd enum corresponding to the FTP command
+     *                 to send.
+     * @return The integer value of the FTP reply code returned by the server
+     *         in response to the command.
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -1130 +1468 @@ public class FTP extends SocketClient {
-    public int sendCommand(final FTPCmd command) throws IOException {
+    public int sendCommand(final FTPCmd command)  throws IOException{
@@ -1135,10 +1473,19 @@ public class FTP extends SocketClient {
-     * Sends an FTP command to the server, waits for a reply and returns the numerical response code. After invocation, for more detailed information, the
-     * actual reply text can be accessed by calling {@link #getReplyString getReplyString } or {@link #getReplyStrings getReplyStrings }.
-     *
-     * @param command The FTPCmd enum corresponding to the FTP command to send.
-     * @param args    The arguments to the FTP command. If this parameter is set to null, then the command is sent with no argument.
-     * @return The integer value of the FTP reply code returned by the server in response to the command.
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
+     * Sends an FTP command to the server, waits for a reply and returns the
+     * numerical response code.  After invocation, for more detailed
+     * information, the actual reply text can be accessed by calling
+     * {@link #getReplyString  getReplyString } or
+     * {@link #getReplyStrings  getReplyStrings }.
+     *
+     * @param command  The FTPCmd enum corresponding to the FTP command
+     *                 to send.
+     * @param args The arguments to the FTP command.  If this parameter is
+     *             set to null, then the command is sent with no argument.
+     * @return The integer value of the FTP reply code returned by the server
+     *         in response to the command.
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -1147 +1494 @@ public class FTP extends SocketClient {
-    public int sendCommand(final FTPCmd command, final String args) throws IOException {
+    public int sendCommand(final FTPCmd command, final String args)  throws IOException{
@@ -1152,2 +1499,5 @@ public class FTP extends SocketClient {
-     * Sends an FTP command with no arguments to the server, waits for a reply and returns the numerical response code. After invocation, for more detailed
-     * information, the actual reply text can be accessed by calling {@link #getReplyString getReplyString } or {@link #getReplyStrings getReplyStrings }.
+     * Sends an FTP command with no arguments to the server, waits for a
+     * reply and returns the numerical response code.  After invocation, for
+     * more detailed information, the actual reply text can be accessed by
+     * calling {@link #getReplyString  getReplyString } or
+     * {@link #getReplyStrings  getReplyStrings }.
@@ -1155,6 +1505,11 @@ public class FTP extends SocketClient {
-     * @param command The FTPCommand constant corresponding to the FTP command to send.
-     * @return The integer value of the FTP reply code returned by the server in response to the command.
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
+     * @param command  The FTPCommand constant corresponding to the FTP command
+     *                 to send.
+     * @return The integer value of the FTP reply code returned by the server
+     *         in response to the command.
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -1162 +1517,2 @@ public class FTP extends SocketClient {
-    public int sendCommand(final int command) throws IOException {
+    public int sendCommand(final int command) throws IOException
+    {
@@ -1167,10 +1523,19 @@ public class FTP extends SocketClient {
-     * Sends an FTP command to the server, waits for a reply and returns the numerical response code. After invocation, for more detailed information, the
-     * actual reply text can be accessed by calling {@link #getReplyString getReplyString } or {@link #getReplyStrings getReplyStrings }.
-     *
-     * @param command The FTPCommand constant corresponding to the FTP command to send.
-     * @param args    The arguments to the FTP command. If this parameter is set to null, then the command is sent with no argument.
-     * @return The integer value of the FTP reply code returned by the server in response to the command.
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
+     * Sends an FTP command to the server, waits for a reply and returns the
+     * numerical response code.  After invocation, for more detailed
+     * information, the actual reply text can be accessed by calling
+     * {@link #getReplyString  getReplyString } or
+     * {@link #getReplyStrings  getReplyStrings }.
+     *
+     * @param command  The FTPCommand constant corresponding to the FTP command
+     *                 to send.
+     * @param args The arguments to the FTP command.  If this parameter is
+     *             set to null, then the command is sent with no argument.
+     * @return The integer value of the FTP reply code returned by the server
+     *         in response to the command.
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -1180 +1545,2 @@ public class FTP extends SocketClient {
-    public int sendCommand(final int command, final String args) throws IOException {
+    public int sendCommand(final int command, final String args) throws IOException
+    {
@@ -1185,2 +1551,5 @@ public class FTP extends SocketClient {
-     * Sends an FTP command with no arguments to the server, waits for a reply and returns the numerical response code. After invocation, for more detailed
-     * information, the actual reply text can be accessed by calling {@link #getReplyString getReplyString } or {@link #getReplyStrings getReplyStrings }.
+     * Sends an FTP command with no arguments to the server, waits for a
+     * reply and returns the numerical response code.  After invocation, for
+     * more detailed information, the actual reply text can be accessed by
+     * calling {@link #getReplyString  getReplyString } or
+     * {@link #getReplyStrings  getReplyStrings }.
@@ -1188,6 +1557,10 @@ public class FTP extends SocketClient {
-     * @param command The text representation of the FTP command to send.
-     * @return The integer value of the FTP reply code returned by the server in response to the command.
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
+     * @param command  The text representation of the  FTP command to send.
+     * @return The integer value of the FTP reply code returned by the server
+     *         in response to the command.
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -1195 +1568,2 @@ public class FTP extends SocketClient {
-    public int sendCommand(final String command) throws IOException {
+    public int sendCommand(final String command) throws IOException
+    {
@@ -1200,12 +1574,21 @@ public class FTP extends SocketClient {
-     * Sends an FTP command to the server, waits for a reply and returns the numerical response code. After invocation, for more detailed information, the
-     * actual reply text can be accessed by calling {@link #getReplyString getReplyString } or {@link #getReplyStrings getReplyStrings }.
-     *
-     * @param command The text representation of the FTP command to send.
-     * @param args    The arguments to the FTP command. If this parameter is set to null, then the command is sent with no argument.
-     * @return The integer value of the FTP reply code returned by the server in response to the command.
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int sendCommand(final String command, final String args) throws IOException {
+     * Sends an FTP command to the server, waits for a reply and returns the
+     * numerical response code.  After invocation, for more detailed
+     * information, the actual reply text can be accessed by calling
+     * {@link #getReplyString  getReplyString } or
+     * {@link #getReplyStrings  getReplyStrings }.
+     *
+     * @param command  The text representation of the  FTP command to send.
+     * @param args The arguments to the FTP command.  If this parameter is
+     *             set to null, then the command is sent with no argument.
+     * @return The integer value of the FTP reply code returned by the server
+     *         in response to the command.
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int sendCommand(final String command, final String args) throws IOException
+    {
@@ -1226,2 +1609,4 @@ public class FTP extends SocketClient {
-     * Saves the character encoding to be used by the FTP control connection. Some FTP servers require that commands be issued in a non-ASCII encoding like
-     * UTF-8 so that file names with multi-byte character representations (e.g, Big 8) can be specified.
+     * Saves the character encoding to be used by the FTP control connection.
+     * Some FTP servers require that commands be issued in a non-ASCII
+     * encoding like UTF-8 so that file names with multi-byte character
+     * representations (e.g, Big 8) can be specified.
@@ -1239 +1623,0 @@ public class FTP extends SocketClient {
-     *
@@ -1250 +1634,2 @@ public class FTP extends SocketClient {
-     * If true, it requires the 3 digit code be followed by space and some text. <br>
+     * If true, it requires the 3 digit code be followed by space and some text.
+     * <br>
@@ -1253,2 +1638,2 @@ public class FTP extends SocketClient {
-     * <b>This should not be required by a well-behaved FTP server</b> <br>
-     *
+     * <b>This should not be required by a well-behaved FTP server</b>
+     * <br>
@@ -1263 +1648,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP SITE command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP SITE command to the server,
+     * receive the reply, and return the reply code.
@@ -1265 +1651 @@ public class FTP extends SocketClient {
-     * @param parameters The site parameters to send.
+     * @param parameters  The site parameters to send.
@@ -1267,6 +1653,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int site(final String parameters) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int site(final String parameters) throws IOException
+    {
@@ -1277 +1667,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP SIZE command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP SIZE command to the server,
+     * receive the reply, and return the reply code.
@@ -1279 +1670 @@ public class FTP extends SocketClient {
-     * @param parameters The site parameters to send.
+     * @param parameters  The site parameters to send.
@@ -1281,4 +1672,7 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -1287 +1681,2 @@ public class FTP extends SocketClient {
-    public int size(final String parameters) throws IOException {
+    public int size(final String parameters) throws IOException
+    {
@@ -1292 +1687,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP SMNT command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP SMNT command to the server,
+     * receive the reply, and return the reply code.
@@ -1294 +1690 @@ public class FTP extends SocketClient {
-     * @param dir The directory name.
+     * @param dir  The directory name.
@@ -1296,6 +1692,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int smnt(final String dir) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int smnt(final String dir) throws IOException
+    {
@@ -1306 +1706,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP STAT command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP STAT command to the server,
+     * receive the reply, and return the reply code.
@@ -1309,6 +1710,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int stat() throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int stat() throws IOException
+    {
@@ -1319 +1724,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP STAT command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP STAT command to the server,
+     * receive the reply, and return the reply code.
@@ -1321 +1727 @@ public class FTP extends SocketClient {
-     * @param pathname A pathname to list.
+     * @param pathname  A pathname to list.
@@ -1323,6 +1729,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int stat(final String pathname) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int stat(final String pathname) throws IOException
+    {
@@ -1333,3 +1743,5 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP STOR command to the server, receive the reply, and return the reply code. Remember, it is up to you to manage the
-     * data connection. If you don't need this low level of access, use {@link org.apache.commons.net.ftp.FTPClient} , which will handle all low level details
-     * for you.
+     * A convenience method to send the FTP STOR command to the server,
+     * receive the reply, and return the reply code.  Remember, it is up
+     * to you to manage the data connection.  If you don't need this low
+     * level of access, use {@link org.apache.commons.net.ftp.FTPClient}
+     * , which will handle all low level details for you.
@@ -1337 +1749,2 @@ public class FTP extends SocketClient {
-     * @param pathname The pathname to use for the file when stored at the remote end of the transfer.
+     * @param pathname  The pathname to use for the file when stored at
+     *                  the remote end of the transfer.
@@ -1339,6 +1752,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int stor(final String pathname) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int stor(final String pathname) throws IOException
+    {
@@ -1349,3 +1766,5 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP STOU command to the server, receive the reply, and return the reply code. Remember, it is up to you to manage the
-     * data connection. If you don't need this low level of access, use {@link org.apache.commons.net.ftp.FTPClient} , which will handle all low level details
-     * for you.
+     * A convenience method to send the FTP STOU command to the server,
+     * receive the reply, and return the reply code.  Remember, it is up
+     * to you to manage the data connection.  If you don't need this low
+     * level of access, use {@link org.apache.commons.net.ftp.FTPClient}
+     * , which will handle all low level details for you.
@@ -1354,6 +1773,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int stou() throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int stou() throws IOException
+    {
@@ -1364,5 +1787,8 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP STOU command to the server, receive the reply, and return the reply code. Remember, it is up to you to manage the
-     * data connection. If you don't need this low level of access, use {@link org.apache.commons.net.ftp.FTPClient} , which will handle all low level details
-     * for you.
-     *
-     * @param pathname The base pathname to use for the file when stored at the remote end of the transfer. Some FTP servers require this.
+     * A convenience method to send the FTP STOU command to the server,
+     * receive the reply, and return the reply code.  Remember, it is up
+     * to you to manage the data connection.  If you don't need this low
+     * level of access, use {@link org.apache.commons.net.ftp.FTPClient}
+     * , which will handle all low level details for you.
+     * @param pathname  The base pathname to use for the file when stored at
+     *                  the remote end of the transfer.  Some FTP servers
+     *                  require this.
@@ -1370,6 +1796,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int stou(final String pathname) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int stou(final String pathname) throws IOException
+    {
@@ -1385 +1815,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP STRU command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP STRU command to the server,
+     * receive the reply, and return the reply code.
@@ -1387 +1818,2 @@ public class FTP extends SocketClient {
-     * @param structure The structure of the file (one of the <code>_STRUCTURE</code> constants).
+     * @param structure  The structure of the file (one of the
+     *         <code>_STRUCTURE</code> constants).
@@ -1389,4 +1821,7 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -1394,2 +1829,4 @@ public class FTP extends SocketClient {
-    public int stru(final int structure) throws IOException {
-        return sendCommand(FTPCmd.STRU, modes.substring(structure, structure + 1));
+    public int stru(final int structure) throws IOException
+    {
+        return sendCommand(FTPCmd.STRU,
+                           modes.substring(structure, structure + 1));
@@ -1399 +1836,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP SYST command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP SYST command to the server,
+     * receive the reply, and return the reply code.
@@ -1402,6 +1840,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int syst() throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int syst() throws IOException
+    {
@@ -1412 +1854,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP TYPE command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP TYPE command to the server,
+     * receive the reply, and return the reply code.
@@ -1414 +1857,2 @@ public class FTP extends SocketClient {
-     * @param fileType The type of the file (one of the <code>FILE_TYPE</code> constants).
+     * @param fileType  The type of the file (one of the <code>FILE_TYPE</code>
+     *              constants).
@@ -1416,14 +1860,22 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int type(final int fileType) throws IOException {
-        return sendCommand(FTPCmd.TYPE, modes.substring(fileType, fileType + 1));
-    }
-
-    /**
-     * A convenience method to send the FTP TYPE command for text files to the server, receive the reply, and return the reply code.
-     *
-     * @param fileType         The type of the file (one of the <code>FILE_TYPE</code> constants).
-     * @param formatOrByteSize The format of the file (one of the <code>_FORMAT</code> constants. In the case of <code>LOCAL_FILE_TYPE</code>, the byte size.
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int type(final int fileType) throws IOException
+    {
+        return sendCommand(FTPCmd.TYPE,
+                           modes.substring(fileType, fileType + 1));
+    }
+
+    /**
+     * A convenience method to send the FTP TYPE command for text files
+     * to the server, receive the reply, and return the reply code.
+     * @param fileType  The type of the file (one of the <code>FILE_TYPE</code>
+     *              constants).
+     * @param formatOrByteSize  The format of the file (one of the
+     *              <code>_FORMAT</code> constants.  In the case of
+     *              <code>LOCAL_FILE_TYPE</code>, the byte size.
@@ -1431,6 +1883,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int type(final int fileType, final int formatOrByteSize) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int type(final int fileType, final int formatOrByteSize) throws IOException
+    {
@@ -1451 +1907,2 @@ public class FTP extends SocketClient {
-     * A convenience method to send the FTP USER command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the FTP USER command to the server,
+     * receive the reply, and return the reply code.
@@ -1453 +1910 @@ public class FTP extends SocketClient {
-     * @param username The username to login under.
+     * @param username  The username to login under.
@@ -1455,6 +1912,10 @@ public class FTP extends SocketClient {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int user(final String username) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int user(final String username) throws IOException
+    {
diff --git a/src/main/java/org/apache/commons/net/ftp/FTPClient.java b/src/main/java/org/apache/commons/net/ftp/FTPClient.java
index a4205d29e..5edb8ef62 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPClient.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPClient.java
@@ -64,6 +64,12 @@ import org.apache.commons.net.util.NetConstants;
- * FTPClient encapsulates all the functionality necessary to store and retrieve files from an FTP server. This class takes care of all low level details of
- * interacting with an FTP server and provides a convenient higher level interface. As with all classes derived from
- * {@link org.apache.commons.net.SocketClient}, you must first connect to the server with {@link org.apache.commons.net.SocketClient#connect connect } before
- * doing anything, and finally {@link org.apache.commons.net.SocketClient#disconnect disconnect } after you're completely finished interacting with the server.
- * Then you need to check the FTP reply code to see if the connection was successful. For example:
- *
+ * FTPClient encapsulates all the functionality necessary to store and
+ * retrieve files from an FTP server.  This class takes care of all
+ * low level details of interacting with an FTP server and provides
+ * a convenient higher level interface.  As with all classes derived
+ * from {@link org.apache.commons.net.SocketClient},
+ * you must first connect to the server with
+ * {@link org.apache.commons.net.SocketClient#connect  connect }
+ * before doing anything, and finally
+ * {@link org.apache.commons.net.SocketClient#disconnect  disconnect }
+ * after you're completely finished interacting with the server.
+ * Then you need to check the FTP reply code to see if the connection
+ * was successful.  For example:
@@ -110,5 +116,12 @@ import org.apache.commons.net.util.NetConstants;
- * Immediately after connecting is the only real time you need to check the reply code (because connect is of type void). The convention for all the FTP command
- * methods in FTPClient is such that they either return a boolean value or some other value. The boolean methods return true on a successful completion reply
- * from the FTP server and false on a reply resulting in an error condition or failure. The methods returning a value other than boolean return a value
- * containing the higher level data produced by the FTP command, or null if a reply resulted in an error condition or failure. If you want to access the exact
- * FTP reply code causing a success or failure, you must call {@link org.apache.commons.net.ftp.FTP#getReplyCode getReplyCode } after a success or failure.
+ * Immediately after connecting is the only real time you need to check the
+ * reply code (because connect is of type void).  The convention for all the
+ * FTP command methods in FTPClient is such that they either return a
+ * boolean value or some other value.
+ * The boolean methods return true on a successful completion reply from
+ * the FTP server and false on a reply resulting in an error condition or
+ * failure.  The methods returning a value other than boolean return a value
+ * containing the higher level data produced by the FTP command, or null if a
+ * reply resulted in an error condition or failure.  If you want to access
+ * the exact FTP reply code causing a success or failure, you must call
+ * {@link org.apache.commons.net.ftp.FTP#getReplyCode  getReplyCode } after
+ * a success or failure.
@@ -116,6 +129,14 @@ import org.apache.commons.net.util.NetConstants;
- * The default settings for FTPClient are for it to use <code> FTP.ASCII_FILE_TYPE </code>, <code> FTP.NON_PRINT_TEXT_FORMAT </code>,
- * <code> FTP.STREAM_TRANSFER_MODE </code>, and <code> FTP.FILE_STRUCTURE </code>. The only file types directly supported are <code> FTP.ASCII_FILE_TYPE </code>
- * and <code> FTP.BINARY_FILE_TYPE </code>. Because there are at least 4 different EBCDIC encodings, we have opted not to provide direct support for EBCDIC. To
- * transfer EBCDIC and other unsupported file types you must create your own filter InputStreams and OutputStreams and wrap them around the streams returned or
- * required by the FTPClient methods. FTPClient uses the {@link ToNetASCIIOutputStream NetASCII} filter streams to provide transparent handling of ASCII files.
- * We will consider incorporating EBCDIC support if there is enough demand.
+ * The default settings for FTPClient are for it to use
+ * <code> FTP.ASCII_FILE_TYPE </code>,
+ * <code> FTP.NON_PRINT_TEXT_FORMAT </code>,
+ * <code> FTP.STREAM_TRANSFER_MODE </code>, and
+ * <code> FTP.FILE_STRUCTURE </code>.  The only file types directly supported
+ * are <code> FTP.ASCII_FILE_TYPE </code> and
+ * <code> FTP.BINARY_FILE_TYPE </code>.  Because there are at least 4
+ * different EBCDIC encodings, we have opted not to provide direct support
+ * for EBCDIC.  To transfer EBCDIC and other unsupported file types you
+ * must create your own filter InputStreams and OutputStreams and wrap
+ * them around the streams returned or required by the FTPClient methods.
+ * FTPClient uses the {@link ToNetASCIIOutputStream NetASCII}
+ * filter streams to provide transparent handling of ASCII files.  We will
+ * consider incorporating EBCDIC support if there is enough demand.
@@ -123 +144,3 @@ import org.apache.commons.net.util.NetConstants;
- * <code> FTP.NON_PRINT_TEXT_FORMAT </code>, <code> FTP.STREAM_TRANSFER_MODE </code>, and <code> FTP.FILE_STRUCTURE </code> are the only supported formats,
+ * <code> FTP.NON_PRINT_TEXT_FORMAT </code>,
+ * <code> FTP.STREAM_TRANSFER_MODE </code>, and
+ * <code> FTP.FILE_STRUCTURE </code> are the only supported formats,
@@ -126,3 +149,7 @@ import org.apache.commons.net.util.NetConstants;
- * Because the handling of sockets on different platforms can differ significantly, the FTPClient automatically issues a new PORT (or EPRT) command prior to
- * every transfer requiring that the server connect to the client's data port. This ensures identical problem-free behavior on Windows, Unix, and Macintosh
- * platforms. Additionally, it relieves programmers from having to issue the PORT (or EPRT) command themselves and dealing with platform dependent issues.
+ * Because the handling of sockets on different platforms can differ
+ * significantly, the FTPClient automatically issues a new PORT (or EPRT) command
+ * prior to every transfer requiring that the server connect to the client's
+ * data port.  This ensures identical problem-free behavior on Windows, Unix,
+ * and Macintosh platforms.  Additionally, it relieves programmers from
+ * having to issue the PORT (or EPRT) command themselves and dealing with platform
+ * dependent issues.
@@ -130,2 +157,5 @@ import org.apache.commons.net.util.NetConstants;
- * Additionally, for security purposes, all data connections to the client are verified to ensure that they originated from the intended party (host and port).
- * If a data connection is initiated by an unexpected party, the command will close the socket and throw an IOException. You may disable this behavior with
+ * Additionally, for security purposes, all data connections to the
+ * client are verified to ensure that they originated from the intended
+ * party (host and port).  If a data connection is initiated by an unexpected
+ * party, the command will close the socket and throw an IOException.  You
+ * may disable this behavior with
@@ -134,10 +164,25 @@ import org.apache.commons.net.util.NetConstants;
- * You should keep in mind that the FTP server may choose to prematurely close a connection if the client has been idle for longer than a given time period
- * (usually 900 seconds). The FTPClient class will detect a premature FTP server connection closing when it receives a
- * {@link org.apache.commons.net.ftp.FTPReply#SERVICE_NOT_AVAILABLE FTPReply.SERVICE_NOT_AVAILABLE } response to a command. When that occurs, the FTP class
- * method encountering that reply will throw an {@link org.apache.commons.net.ftp.FTPConnectionClosedException} . <code>FTPConnectionClosedException</code> is a
- * subclass of <code> IOException </code> and therefore need not be caught separately, but if you are going to catch it separately, its catch block must appear
- * before the more general <code> IOException </code> catch block. When you encounter an {@link org.apache.commons.net.ftp.FTPConnectionClosedException} , you
- * must disconnect the connection with {@link #disconnect disconnect() } to properly clean up the system resources used by FTPClient. Before disconnecting, you
- * may check the last reply code and text with {@link org.apache.commons.net.ftp.FTP#getReplyCode getReplyCode },
- * {@link org.apache.commons.net.ftp.FTP#getReplyString getReplyString }, and {@link org.apache.commons.net.ftp.FTP#getReplyStrings getReplyStrings}. You may
- * avoid server disconnections while the client is idle by periodically sending NOOP commands to the server.
+ * You should keep in mind that the FTP server may choose to prematurely
+ * close a connection if the client has been idle for longer than a
+ * given time period (usually 900 seconds).  The FTPClient class will detect a
+ * premature FTP server connection closing when it receives a
+ * {@link org.apache.commons.net.ftp.FTPReply#SERVICE_NOT_AVAILABLE FTPReply.SERVICE_NOT_AVAILABLE }
+ *  response to a command.
+ * When that occurs, the FTP class method encountering that reply will throw
+ * an {@link org.apache.commons.net.ftp.FTPConnectionClosedException}
+ * .
+ * <code>FTPConnectionClosedException</code>
+ * is a subclass of <code> IOException </code> and therefore need not be
+ * caught separately, but if you are going to catch it separately, its
+ * catch block must appear before the more general <code> IOException </code>
+ * catch block.  When you encounter an
+ * {@link org.apache.commons.net.ftp.FTPConnectionClosedException}
+ * , you must disconnect the connection with
+ * {@link #disconnect  disconnect() } to properly clean up the
+ * system resources used by FTPClient.  Before disconnecting, you may check the
+ * last reply code and text with
+ * {@link org.apache.commons.net.ftp.FTP#getReplyCode  getReplyCode },
+ * {@link org.apache.commons.net.ftp.FTP#getReplyString  getReplyString },
+ * and
+ * {@link org.apache.commons.net.ftp.FTP#getReplyStrings  getReplyStrings}.
+ * You may avoid server disconnections while the client is idle by
+ * periodically sending NOOP commands to the server.
@@ -145,4 +190,9 @@ import org.apache.commons.net.util.NetConstants;
- * Rather than list it separately for each method, we mention here that every method communicating with the server and throwing an IOException can also throw a
- * {@link org.apache.commons.net.MalformedServerReplyException} , which is a subclass of IOException. A MalformedServerReplyException will be thrown when the
- * reply received from the server deviates enough from the protocol specification that it cannot be interpreted in a useful manner despite attempts to be as
- * lenient as possible.
+ * Rather than list it separately for each method, we mention here that
+ * every method communicating with the server and throwing an IOException
+ * can also throw a
+ * {@link org.apache.commons.net.MalformedServerReplyException}
+ * , which is a subclass
+ * of IOException.  A MalformedServerReplyException will be thrown when
+ * the reply received from the server deviates enough from the protocol
+ * specification that it cannot be interpreted in a useful manner despite
+ * attempts to be as lenient as possible.
@@ -150 +200,3 @@ import org.apache.commons.net.util.NetConstants;
- * Listing API Examples Both paged and unpaged examples of directory listings are available, as follows:
+ * Listing API Examples
+ * Both paged and unpaged examples of directory listings are available,
+ * as follows:
@@ -153 +204,0 @@ import org.apache.commons.net.util.NetConstants;
- *
@@ -155,4 +206,4 @@ import org.apache.commons.net.util.NetConstants;
- * FTPClient f = new FTPClient();
- * f.connect(server);
- * f.login(username, password);
- * FTPFile[] files = f.listFiles(directory);
+ *    FTPClient f = new FTPClient();
+ *    f.connect(server);
+ *    f.login(username, password);
+ *    FTPFile[] files = f.listFiles(directory);
@@ -161,3 +212,3 @@ import org.apache.commons.net.util.NetConstants;
- * Paged access, using a parser not accessible by auto-detect. The class defined in the first parameter of initateListParsing should be derived from
- * org.apache.commons.net.FTPFileEntryParser:
- *
+ * Paged access, using a parser not accessible by auto-detect.  The class
+ * defined in the first parameter of initateListParsing should be derived
+ * from org.apache.commons.net.FTPFileEntryParser:
@@ -165,4 +216,5 @@ import org.apache.commons.net.util.NetConstants;
- * FTPClient f = new FTPClient();
- * f.connect(server);
- * f.login(username, password);
- * FTPListParseEngine engine = f.initiateListParsing("com.whatever.YourOwnParser", directory);
+ *    FTPClient f = new FTPClient();
+ *    f.connect(server);
+ *    f.login(username, password);
+ *    FTPListParseEngine engine =
+ *       f.initiateListParsing("com.whatever.YourOwnParser", directory);
@@ -170,5 +222,5 @@ import org.apache.commons.net.util.NetConstants;
- * while (engine.hasNext()) {
- *     FTPFile[] files = engine.getNext(25); // "page size" you want
- *     // do whatever you want with these files, display them, etc.
- *     // expensive FTPFile objects not created until needed.
- * }
+ *    while (engine.hasNext()) {
+ *       FTPFile[] files = engine.getNext(25);  // "page size" you want
+ *       //do whatever you want with these files, display them, etc.
+ *       //expensive FTPFile objects not created until needed.
+ *    }
@@ -178 +229,0 @@ import org.apache.commons.net.util.NetConstants;
- *
@@ -180,4 +231,4 @@ import org.apache.commons.net.util.NetConstants;
- * FTPClient f = new FTPClient();
- * f.connect(server);
- * f.login(username, password);
- * FTPListParseEngine engine = f.initiateListParsing(directory);
+ *    FTPClient f = new FTPClient();
+ *    f.connect(server);
+ *    f.login(username, password);
+ *    FTPListParseEngine engine = f.initiateListParsing(directory);
@@ -185,5 +236,5 @@ import org.apache.commons.net.util.NetConstants;
- * while (engine.hasNext()) {
- *     FTPFile[] files = engine.getNext(25); // "page size" you want
- *     // do whatever you want with these files, display them, etc.
- *     // expensive FTPFile objects not created until needed.
- * }
+ *    while (engine.hasNext()) {
+ *       FTPFile[] files = engine.getNext(25);  // "page size" you want
+ *       //do whatever you want with these files, display them, etc.
+ *       //expensive FTPFile objects not created until needed.
+ *    }
@@ -196,3 +247,3 @@ import org.apache.commons.net.util.NetConstants;
- * <li>are in different time zones and you need accurate timestamps for dependency checking as in Ant</li>
- * </ul>
- * see {@link FTPClientConfig FTPClientConfig}.
+ * <li>are in different time zones and you need accurate timestamps for dependency checking
+ *     as in Ant</li>
+ * </ul>see {@link  FTPClientConfig  FTPClientConfig}.
@@ -202,2 +253,3 @@ import org.apache.commons.net.util.NetConstants;
- * <b>Please note:</b> this does not apply to the methods where the user is responsible for writing or reading the data stream, i.e.
- * {@link #retrieveFileStream(String)} , {@link #storeFileStream(String)} and the other xxxFileStream methods
+ * <b>Please note:</b> this does not apply to the methods where the user is responsible for writing or reading
+ * the data stream, i.e. {@link #retrieveFileStream(String)} , {@link #storeFileStream(String)}
+ * and the other xxxFileStream methods
@@ -205,6 +257,9 @@ import org.apache.commons.net.util.NetConstants;
- * During file transfers, the data connection is busy, but the control connection is idle. FTP servers know that the control connection is in use, so won't
- * close it through lack of activity, but it's a lot harder for network routers to know that the control and data connections are associated with each other.
- * Some routers may treat the control connection as idle, and disconnect it if the transfer over the data connection takes longer than the allowable idle time
- * for the router. <br>
- * One solution to this is to send a safe command (i.e. NOOP) over the control connection to reset the router's idle timer. This is enabled as follows:
- *
+ * During file transfers, the data connection is busy, but the control connection is idle.
+ * FTP servers know that the control connection is in use, so won't close it through lack of activity,
+ * but it's a lot harder for network routers to know that the control and data connections are associated
+ * with each other.
+ * Some routers may treat the control connection as idle, and disconnect it if the transfer over the data
+ * connection takes longer than the allowable idle time for the router.
+ * <br>
+ * One solution to this is to send a safe command (i.e. NOOP) over the control connection to reset the router's
+ * idle timer. This is enabled as follows:
@@ -212,2 +267,2 @@ import org.apache.commons.net.util.NetConstants;
- * // Set timeout to 5 minutes
- * ftpClient.setControlKeepAliveTimeout(Duration.ofMinutes(5));
+ *     // Set timeout to 5 minutes
+ *     ftpClient.setControlKeepAliveTimeout(Duration.ofMinutes(5));
@@ -215,2 +270,2 @@ import org.apache.commons.net.util.NetConstants;
- *
- * This will cause the file upload/download methods to send a NOOP approximately every 5 minutes. The following public methods support this:
+ * This will cause the file upload/download methods to send a NOOP approximately every 5 minutes.
+ * The following public methods support this:
@@ -224,3 +279,4 @@ import org.apache.commons.net.util.NetConstants;
- * This feature does not apply to the methods where the user is responsible for writing or reading the data stream, i.e. {@link #retrieveFileStream(String)} ,
- * {@link #storeFileStream(String)} and the other xxxFileStream methods. In such cases, the user is responsible for keeping the control connection alive if
- * necessary.
+ * This feature does not apply to the methods where the user is responsible for writing or reading
+ * the data stream, i.e. {@link #retrieveFileStream(String)} , {@link #storeFileStream(String)}
+ * and the other xxxFileStream methods.
+ * In such cases, the user is responsible for keeping the control connection alive if necessary.
@@ -229,2 +285,2 @@ import org.apache.commons.net.util.NetConstants;
- * {@link Util#copyStream(InputStream, OutputStream, int, long, CopyStreamListener, boolean)} method, so the timing is partially dependent on how long each
- * block transfer takes.
+ * {@link Util#copyStream(InputStream, OutputStream, int, long, CopyStreamListener, boolean)}
+ * method, so the timing is partially dependent on how long each block transfer takes.
@@ -271 +327,2 @@ public class FTPClient extends FTP implements Configurable {
-        public void bytesTransferred(final long totalBytesTransferred, final int bytesTransferred, final long streamSize) {
+        public void bytesTransferred(final long totalBytesTransferred,
+                final int bytesTransferred, final long streamSize) {
@@ -290 +347 @@ public class FTPClient extends FTP implements Configurable {
-                while (notAcked > 0) {
+                while(notAcked > 0) {
@@ -299 +356 @@ public class FTPClient extends FTP implements Configurable {
-            return new int[] { acksAcked, remain, notAcked, ioErrors }; // debug counts
+            return new int [] {acksAcked, remain, notAcked, ioErrors}; // debug counts
@@ -305 +362,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Strategy interface for updating host names received from FTP server for passive NAT workaround.
+     * Strategy interface for updating host names received from FTP server
+     * for passive NAT workaround.
@@ -314,2 +372,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Default strategy for passive NAT workaround (site-local replies are replaced.)
-     *
+     * Default strategy for passive NAT workaround (site-local
+     * replies are replaced.)
@@ -332 +390 @@ public class FTPClient extends FTP implements Configurable {
-                if (!remote.isSiteLocalAddress()) {
+                if (!remote.isSiteLocalAddress()){
@@ -395,3 +453,5 @@ public class FTPClient extends FTP implements Configurable {
-     * The name of an optional systemType properties file ({@value}), which is loaded using {@link Class#getResourceAsStream(String)}.<br>
-     * The entries are the systemType (as determined by {@link FTPClient#getSystemType}) and the values are the replacement type or parserClass, which is passed
-     * to {@link FTPFileEntryParserFactory#createFileEntryParser(String)}.<br>
+     * The name of an optional systemType properties file ({@value}), which is loaded
+     * using {@link Class#getResourceAsStream(String)}.<br>
+     * The entries are the systemType (as determined by {@link FTPClient#getSystemType})
+     * and the values are the replacement type or parserClass, which is passed to
+     * {@link FTPFileEntryParserFactory#createFileEntryParser(String)}.<br>
@@ -399 +458,0 @@ public class FTPClient extends FTP implements Configurable {
-     *
@@ -410,2 +469,5 @@ public class FTPClient extends FTP implements Configurable {
-     * A constant indicating the FTP session is expecting all transfers to occur between the client (local) and server and that the server should connect to the
-     * client's data port to initiate a data transfer. This is the default data connection mode when and FTPClient instance is created.
+     * A constant indicating the FTP session is expecting all transfers
+     * to occur between the client (local) and server and that the server
+     * should connect to the client's data port to initiate a data transfer.
+     * This is the default data connection mode when and FTPClient instance
+     * is created.
@@ -416,2 +478,4 @@ public class FTPClient extends FTP implements Configurable {
-     * A constant indicating the FTP session is expecting all transfers to occur between two remote servers and that the server the client is connected to
-     * should connect to the other server's data port to initiate a data transfer.
+     * A constant indicating the FTP session is expecting all transfers
+     * to occur between two remote servers and that the server
+     * the client is connected to should connect to the other server's
+     * data port to initiate a data transfer.
@@ -422,2 +486,4 @@ public class FTPClient extends FTP implements Configurable {
-     * A constant indicating the FTP session is expecting all transfers to occur between the client (local) and server and that the server is in passive mode,
-     * requiring the client to connect to the server's data port to initiate a transfer.
+     * A constant indicating the FTP session is expecting all transfers
+     * to occur between the client (local) and server and that the server
+     * is in passive mode, requiring the client to connect to the
+     * server's data port to initiate a transfer.
@@ -428,2 +494,5 @@ public class FTPClient extends FTP implements Configurable {
-     * A constant indicating the FTP session is expecting all transfers to occur between two remote servers and that the server the client is connected to is in
-     * passive mode, requiring the other server to connect to the first server's data port to initiate a data transfer.
+     * A constant indicating the FTP session is expecting all transfers
+     * to occur between two remote servers and that the server
+     * the client is connected to is in passive mode, requiring the other
+     * server to connect to the first server's data port to initiate a data
+     * transfer.
@@ -437 +506,2 @@ public class FTPClient extends FTP implements Configurable {
-        PARMS_PAT = java.util.regex.Pattern.compile("(\\d{1,3},\\d{1,3},\\d{1,3},\\d{1,3}),(\\d{1,3}),(\\d{1,3})");
+        PARMS_PAT = java.util.regex.Pattern.compile(
+                "(\\d{1,3},\\d{1,3},\\d{1,3},\\d{1,3}),(\\d{1,3}),(\\d{1,3})");
@@ -447,2 +517,5 @@ public class FTPClient extends FTP implements Configurable {
-     * According to RFC959 (http://www.ietf.org/rfc/rfc959.txt), it should be the same as for MKD i.e. {@code 257<space>"<directory-name>"[<space>commentary]}
-     * where any double-quotes in {@code <directory-name>} are doubled. Unlike MKD, the commentary is optional.
+     * According to RFC959 (http://www.ietf.org/rfc/rfc959.txt),
+     * it should be the same as for MKD i.e.
+     * {@code 257<space>"<directory-name>"[<space>commentary]}
+     * where any double-quotes in {@code <directory-name>} are doubled.
+     * Unlike MKD, the commentary is optional.
@@ -453,2 +526,3 @@ public class FTPClient extends FTP implements Configurable {
-     * @return the pathname, without enclosing quotes, or the full string after the reply code and space if the syntax is invalid (i.e. enclosing quotes are
-     *         missing or embedded quotes are not doubled)
+     * @return the pathname, without enclosing quotes,
+     * or the full string after the reply code and space if the syntax is invalid
+     * (i.e. enclosing quotes are missing or embedded quotes are not doubled)
@@ -457 +531,2 @@ public class FTPClient extends FTP implements Configurable {
-    static String parsePathname(final String reply) {
+    static String parsePathname(final String reply)
+    {
@@ -463 +538 @@ public class FTPClient extends FTP implements Configurable {
-            for (int i = 1; i < param.length(); i++) {
+            for(int i=1; i < param.length(); i++) {
@@ -465 +540 @@ public class FTPClient extends FTP implements Configurable {
-                if (ch == '"') {
+                if (ch=='"') {
@@ -468 +543 @@ public class FTPClient extends FTP implements Configurable {
-                        quoteSeen = false;
+                        quoteSeen=false;
@@ -471 +546 @@ public class FTPClient extends FTP implements Configurable {
-                        quoteSeen = true;
+                        quoteSeen=true;
@@ -554 +629,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Enable or disable replacement of internal IP in passive mode. Default enabled using {code NatServerResolverImpl}.
+     * Enable or disable replacement of internal IP in passive mode. Default enabled
+     * using {code NatServerResolverImpl}.
@@ -567,3 +643,7 @@ public class FTPClient extends FTP implements Configurable {
-     * Default FTPClient constructor. Creates a new FTPClient instance with the data connection mode set to <code> ACTIVE_LOCAL_DATA_CONNECTION_MODE </code>,
-     * the file type set to <code> FTP.ASCII_FILE_TYPE </code>, the file format set to <code> FTP.NON_PRINT_TEXT_FORMAT </code>, the file structure set to
-     * <code> FTP.FILE_STRUCTURE </code>, and the transfer mode set to <code> FTP.STREAM_TRANSFER_MODE </code>.
+     * Default FTPClient constructor.  Creates a new FTPClient instance
+     * with the data connection mode set to
+     * <code> ACTIVE_LOCAL_DATA_CONNECTION_MODE </code>, the file type
+     * set to <code> FTP.ASCII_FILE_TYPE </code>, the
+     * file format set to <code> FTP.NON_PRINT_TEXT_FORMAT </code>,
+     * the file structure set to <code> FTP.FILE_STRUCTURE </code>, and
+     * the transfer mode set to <code> FTP.STREAM_TRANSFER_MODE </code>.
@@ -571,2 +651,2 @@ public class FTPClient extends FTP implements Configurable {
-     * The list parsing auto-detect feature can be configured to use lenient future dates (short dates may be up to one day in the future) as follows:
-     *
+     * The list parsing auto-detect feature can be configured to use lenient future
+     * dates (short dates may be up to one day in the future) as follows:
@@ -577 +657 @@ public class FTPClient extends FTP implements Configurable {
-     * ftp.configure(config);
+     * ftp.configure(config );
@@ -580 +660,2 @@ public class FTPClient extends FTP implements Configurable {
-    public FTPClient() {
+    public FTPClient()
+    {
@@ -585 +666 @@ public class FTPClient extends FTP implements Configurable {
-        configuration = null;
+        configuration      = null;
@@ -589 +670 @@ public class FTPClient extends FTP implements Configurable {
-        passiveLocalHost = null;
+        passiveLocalHost   = null;
@@ -626,2 +707,5 @@ public class FTPClient extends FTP implements Configurable {
-     * Establishes a data connection with the FTP server, returning a Socket for the connection if successful. If a restart offset has been set with
-     * {@link #setRestartOffset(long)}, a REST command is issued to the server with the offset as an argument before establishing the data connection. Active
+     * Establishes a data connection with the FTP server, returning
+     * a Socket for the connection if successful.  If a restart
+     * offset has been set with {@link #setRestartOffset(long)},
+     * a REST command is issued to the server with the offset as
+     * an argument before establishing the data connection.  Active
@@ -630,5 +714,9 @@ public class FTPClient extends FTP implements Configurable {
-     * @param command The int representation of the FTP command to send.
-     * @param arg     The arguments to the FTP command. If this parameter is set to null, then the command is sent with no argument.
-     * @return A Socket corresponding to the established data connection. Null is returned if an FTP protocol error is reported at any point during the
-     *         establishment and initialization of the connection.
-     * @throws IOException If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @param command  The int representation of the FTP command to send.
+     * @param arg The arguments to the FTP command.  If this parameter is
+     *             set to null, then the command is sent with no argument.
+     * @return A Socket corresponding to the established data connection.
+     *         Null is returned if an FTP protocol error is reported at
+     *         any point during the establishment and initialization of
+     *         the connection.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -637 +725,3 @@ public class FTPClient extends FTP implements Configurable {
-    protected Socket _openDataConnection_(final FTPCmd command, final String arg) throws IOException {
+    protected Socket _openDataConnection_(final FTPCmd command, final String arg)
+    throws IOException
+    {
@@ -642,2 +732,5 @@ public class FTPClient extends FTP implements Configurable {
-     * Establishes a data connection with the FTP server, returning a Socket for the connection if successful. If a restart offset has been set with
-     * {@link #setRestartOffset(long)}, a REST command is issued to the server with the offset as an argument before establishing the data connection. Active
+     * Establishes a data connection with the FTP server, returning
+     * a Socket for the connection if successful.  If a restart
+     * offset has been set with {@link #setRestartOffset(long)},
+     * a REST command is issued to the server with the offset as
+     * an argument before establishing the data connection.  Active
@@ -647,5 +740,9 @@ public class FTPClient extends FTP implements Configurable {
-     * @param command The int representation of the FTP command to send.
-     * @param arg     The arguments to the FTP command. If this parameter is set to null, then the command is sent with no argument.
-     * @return A Socket corresponding to the established data connection. Null is returned if an FTP protocol error is reported at any point during the
-     *         establishment and initialization of the connection.
-     * @throws IOException If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @param command  The int representation of the FTP command to send.
+     * @param arg The arguments to the FTP command.  If this parameter is
+     *             set to null, then the command is sent with no argument.
+     * @return A Socket corresponding to the established data connection.
+     *         Null is returned if an FTP protocol error is reported at
+     *         any point during the establishment and initialization of
+     *         the connection.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -659,2 +756,5 @@ public class FTPClient extends FTP implements Configurable {
-     * Establishes a data connection with the FTP server, returning a Socket for the connection if successful. If a restart offset has been set with
-     * {@link #setRestartOffset(long)}, a REST command is issued to the server with the offset as an argument before establishing the data connection. Active
+     * Establishes a data connection with the FTP server, returning
+     * a Socket for the connection if successful.  If a restart
+     * offset has been set with {@link #setRestartOffset(long)},
+     * a REST command is issued to the server with the offset as
+     * an argument before establishing the data connection.  Active
@@ -663,5 +763,9 @@ public class FTPClient extends FTP implements Configurable {
-     * @param command The text representation of the FTP command to send.
-     * @param arg     The arguments to the FTP command. If this parameter is set to null, then the command is sent with no argument.
-     * @return A Socket corresponding to the established data connection. Null is returned if an FTP protocol error is reported at any point during the
-     *         establishment and initialization of the connection.
-     * @throws IOException If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @param command  The text representation of the FTP command to send.
+     * @param arg The arguments to the FTP command.  If this parameter is
+     *             set to null, then the command is sent with no argument.
+     * @return A Socket corresponding to the established data connection.
+     *         Null is returned if an FTP protocol error is reported at
+     *         any point during the establishment and initialization of
+     *         the connection.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -670,2 +774,5 @@ public class FTPClient extends FTP implements Configurable {
-    protected Socket _openDataConnection_(final String command, final String arg) throws IOException {
-        if (dataConnectionMode != ACTIVE_LOCAL_DATA_CONNECTION_MODE && dataConnectionMode != PASSIVE_LOCAL_DATA_CONNECTION_MODE) {
+    protected Socket _openDataConnection_(final String command, final String arg)
+    throws IOException
+    {
+        if (dataConnectionMode != ACTIVE_LOCAL_DATA_CONNECTION_MODE &&
+                dataConnectionMode != PASSIVE_LOCAL_DATA_CONNECTION_MODE) {
@@ -680 +787,2 @@ public class FTPClient extends FTP implements Configurable {
-        if (dataConnectionMode == ACTIVE_LOCAL_DATA_CONNECTION_MODE) {
+        if (dataConnectionMode == ACTIVE_LOCAL_DATA_CONNECTION_MODE)
+        {
@@ -708,2 +816,2 @@ public class FTPClient extends FTP implements Configurable {
-                // the data connection. It may be desirable to let this be a
-                // separately configurable value. In any case, we really want
+                // the data connection.  It may be desirable to let this be a
+                // separately configurable value.  In any case, we really want
@@ -727 +835,3 @@ public class FTPClient extends FTP implements Configurable {
-        } else { // We must be in PASSIVE_LOCAL_DATA_CONNECTION_MODE
+        }
+        else
+        { // We must be in PASSIVE_LOCAL_DATA_CONNECTION_MODE
@@ -737 +847,2 @@ public class FTPClient extends FTP implements Configurable {
-            if (attemptEPSV && epsv() == FTPReply.ENTERING_EPSV_MODE) {
+            if (attemptEPSV && epsv() == FTPReply.ENTERING_EPSV_MODE)
+            {
@@ -739 +850,3 @@ public class FTPClient extends FTP implements Configurable {
-            } else {
+            }
+            else
+            {
@@ -762,2 +875,2 @@ public class FTPClient extends FTP implements Configurable {
-            // the data connection. It may be desirable to let this be a
-            // separately configurable value. In any case, we really want
+            // the data connection.  It may be desirable to let this be a
+            // separately configurable value.  In any case, we really want
@@ -770 +883,2 @@ public class FTPClient extends FTP implements Configurable {
-            if ((restartOffset > 0) && !restart(restartOffset)) {
+            if ((restartOffset > 0) && !restart(restartOffset))
+            {
@@ -775 +889,2 @@ public class FTPClient extends FTP implements Configurable {
-            if (!FTPReply.isPositivePreliminary(sendCommand(command, arg))) {
+            if (!FTPReply.isPositivePreliminary(sendCommand(command, arg)))
+            {
@@ -781 +896,2 @@ public class FTPClient extends FTP implements Configurable {
-        if (remoteVerificationEnabled && !verifyRemote(socket)) {
+        if (remoteVerificationEnabled && !verifyRemote(socket))
+        {
@@ -788 +904,2 @@ public class FTPClient extends FTP implements Configurable {
-                    "Host attempting data connection " + socketHost.getHostAddress() + " is not same as server " + getRemoteAddress().getHostAddress());
+                    "Host attempting data connection " + socketHost.getHostAddress() +
+                    " is not same as server " + getRemoteAddress().getHostAddress());
@@ -803 +920,2 @@ public class FTPClient extends FTP implements Configurable {
-            throw new MalformedServerReplyException("Could not parse extended passive host information.\nServer Reply: " + reply);
+            throw new MalformedServerReplyException(
+                "Could not parse extended passive host information.\nServer Reply: " + reply);
@@ -810 +928,2 @@ public class FTPClient extends FTP implements Configurable {
-            throw new MalformedServerReplyException("Could not parse extended passive host information.\nServer Reply: " + reply);
+            throw new MalformedServerReplyException(
+                "Could not parse extended passive host information.\nServer Reply: " + reply);
@@ -821 +940 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws MalformedServerReplyException if the server reply does not match (n,n,n,n),(n),(n)
+     * @throws MalformedServerReplyException if the server reply does not match  (n,n,n,n),(n),(n)
@@ -868,2 +987,2 @@ public class FTPClient extends FTP implements Configurable {
-     * @param remote  the remote file name
-     * @param local   The local OutputStream to which to write the file.
+     * @param remote the remote file name
+     * @param local The local OutputStream to which to write the file.
@@ -874 +993,3 @@ public class FTPClient extends FTP implements Configurable {
-    protected boolean _retrieveFile(final String command, final String remote, final OutputStream local) throws IOException {
+    protected boolean _retrieveFile(final String command, final String remote, final OutputStream local)
+    throws IOException
+    {
@@ -896 +1017,2 @@ public class FTPClient extends FTP implements Configurable {
-                Util.copyStream(input, local, getBufferSize(), CopyStreamEvent.UNKNOWN_STREAM_SIZE, mergeListeners(csl), false);
+                Util.copyStream(input, local, getBufferSize(), CopyStreamEvent.UNKNOWN_STREAM_SIZE, mergeListeners(csl),
+                    false);
@@ -909,0 +1032 @@ public class FTPClient extends FTP implements Configurable {
+
@@ -912 +1035 @@ public class FTPClient extends FTP implements Configurable {
-     * @param remote  the remote file name
+     * @param remote the remote file name
@@ -917 +1040,3 @@ public class FTPClient extends FTP implements Configurable {
-    protected InputStream _retrieveFileStream(final String command, final String remote) throws IOException {
+    protected InputStream _retrieveFileStream(final String command, final String remote)
+    throws IOException
+    {
@@ -928 +1053 @@ public class FTPClient extends FTP implements Configurable {
-            // socket input stream. We don't buffer binary transfers
+            // socket input stream.  We don't buffer binary transfers
@@ -930 +1055 @@ public class FTPClient extends FTP implements Configurable {
-            // programmer if possible. Programmers can decide on their
+            // programmer if possible.  Programmers can decide on their
@@ -939,0 +1065 @@ public class FTPClient extends FTP implements Configurable {
+
@@ -943,2 +1069,3 @@ public class FTPClient extends FTP implements Configurable {
-     * @param remote  the remote file name
-     * @param local   The local InputStream from which to read the data to be written/appended to the remote file.
+     * @param remote the remote file name
+     * @param local The local InputStream from which to read the data to
+     *                be written/appended to the remote file.
@@ -948 +1075,3 @@ public class FTPClient extends FTP implements Configurable {
-    protected boolean _storeFile(final String command, final String remote, final InputStream local) throws IOException {
+    protected boolean _storeFile(final String command, final String remote, final InputStream local)
+    throws IOException
+    {
@@ -969,2 +1098,5 @@ public class FTPClient extends FTP implements Configurable {
-        try {
-            Util.copyStream(local, output, getBufferSize(), CopyStreamEvent.UNKNOWN_STREAM_SIZE, mergeListeners(csl), false);
+        try
+        {
+            Util.copyStream(local, output, getBufferSize(),
+                    CopyStreamEvent.UNKNOWN_STREAM_SIZE, mergeListeners(csl),
+                    false);
@@ -976 +1108,3 @@ public class FTPClient extends FTP implements Configurable {
-        } catch (final IOException e) {
+        }
+        catch (final IOException e)
+        {
@@ -989 +1123 @@ public class FTPClient extends FTP implements Configurable {
-     * @param remote  the remote file name
+     * @param remote the remote file name
@@ -994 +1128,3 @@ public class FTPClient extends FTP implements Configurable {
-    protected OutputStream _storeFileStream(final String command, final String remote) throws IOException {
+    protected OutputStream _storeFileStream(final String command, final String remote)
+    throws IOException
+    {
@@ -1005 +1141 @@ public class FTPClient extends FTP implements Configurable {
-            // socket output stream. We don't buffer binary transfers
+            // socket output stream.  We don't buffer binary transfers
@@ -1007 +1143 @@ public class FTPClient extends FTP implements Configurable {
-            // programmer if possible. Programmers can decide on their
+            // programmer if possible.  Programmers can decide on their
@@ -1021,6 +1157,10 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean abort() throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean abort() throws IOException
+    {
@@ -1033 +1173 @@ public class FTPClient extends FTP implements Configurable {
-     * @param bytes The number of bytes which the server should allocate.
+     * @param bytes  The number of bytes which the server should allocate.
@@ -1035,6 +1175,10 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean allocate(final int bytes) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean allocate(final int bytes) throws IOException
+    {
@@ -1047,2 +1191,2 @@ public class FTPClient extends FTP implements Configurable {
-     * @param bytes      The number of bytes which the server should allocate.
-     * @param recordSize The size of a file record.
+     * @param bytes  The number of bytes which the server should allocate.
+     * @param recordSize  The size of a file record.
@@ -1050,6 +1194,10 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean allocate(final int bytes, final int recordSize) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean allocate(final int bytes, final int recordSize) throws IOException
+    {
@@ -1062 +1210 @@ public class FTPClient extends FTP implements Configurable {
-     * @param bytes The number of bytes which the server should allocate.
+     * @param bytes  The number of bytes which the server should allocate.
@@ -1064,6 +1212,10 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean allocate(final long bytes) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean allocate(final long bytes) throws IOException
+    {
@@ -1076,2 +1228,2 @@ public class FTPClient extends FTP implements Configurable {
-     * @param bytes      The number of bytes which the server should allocate.
-     * @param recordSize The size of a file record.
+     * @param bytes  The number of bytes which the server should allocate.
+     * @param recordSize  The size of a file record.
@@ -1079,6 +1231,10 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean allocate(final long bytes, final int recordSize) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean allocate(final long bytes, final int recordSize) throws IOException
+    {
@@ -1089,3 +1245,5 @@ public class FTPClient extends FTP implements Configurable {
-     * Appends to a file on the server with the given name, taking input from the given InputStream. This method does NOT close the given InputStream. If the
-     * current file type is ASCII, line separators in the file are transparently converted to the NETASCII format (i.e., you should not attempt to create a
-     * special InputStream to do this).
+     * Appends to a file on the server with the given name, taking input
+     * from the given InputStream.  This method does NOT close the given
+     * InputStream.  If the current file type is ASCII, line separators in
+     * the file are transparently converted to the NETASCII format (i.e.,
+     * you should not attempt to create a special InputStream to do this).
@@ -1093,2 +1251,3 @@ public class FTPClient extends FTP implements Configurable {
-     * @param remote The name of the remote file.
-     * @param local  The local InputStream from which to read the data to be appended to the remote file.
+     * @param remote  The name of the remote file.
+     * @param local   The local InputStream from which to read the data to
+     *                be appended to the remote file.
@@ -1096,10 +1255,17 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException                  If the FTP server prematurely closes the connection as a result of the client being idle or some
-     *                                                       other reason causing the server to send FTP reply code 421. This exception may be caught either as
-     *                                                       an IOException or independently as itself.
-     * @throws org.apache.commons.net.io.CopyStreamException If an I/O error occurs while actually transferring the file. The CopyStreamException allows you to
-     *                                                       determine the number of bytes transferred and the IOException causing the error. This exception may
-     *                                                       be caught either as an IOException or independently as itself.
-     * @throws IOException                                   If an I/O error occurs while either sending a command to the server or receiving a reply from the
-     *                                                       server.
-     */
-    public boolean appendFile(final String remote, final InputStream local) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws org.apache.commons.net.io.CopyStreamException
+     *      If an I/O error occurs while actually
+     *      transferring the file.  The CopyStreamException allows you to
+     *      determine the number of bytes transferred and the IOException
+     *      causing the error.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean appendFile(final String remote, final InputStream local)
+    throws IOException
+    {
@@ -1110,4 +1276,8 @@ public class FTPClient extends FTP implements Configurable {
-     * Returns an OutputStream through which data can be written to append to a file on the server with the given name. If the current file type is ASCII, the
-     * returned OutputStream will convert line separators in the file to the NETASCII format (i.e., you should not attempt to create a special OutputStream to
-     * do this). You must close the OutputStream when you finish writing to it. The OutputStream itself will take care of closing the parent data connection
-     * socket upon being closed.
+     * Returns an OutputStream through which data can be written to append
+     * to a file on the server with the given name.  If the current file type
+     * is ASCII, the returned OutputStream will convert line separators in
+     * the file to the NETASCII format  (i.e., you should not attempt to
+     * create a special OutputStream to do this).  You must close the
+     * OutputStream when you finish writing to it.  The OutputStream itself
+     * will take care of closing the parent data connection socket upon being
+     * closed.
@@ -1115 +1285,3 @@ public class FTPClient extends FTP implements Configurable {
-     * <b>To finalize the file transfer you must call {@link #completePendingCommand completePendingCommand } and check its return value to verify success.</b>
+     * <b>To finalize the file transfer you must call
+     * {@link #completePendingCommand  completePendingCommand } and
+     * check its return value to verify success.</b>
@@ -1118,9 +1290,15 @@ public class FTPClient extends FTP implements Configurable {
-     * @param remote The name of the remote file.
-     * @return An OutputStream through which the remote file can be appended. If the data connection cannot be opened (e.g., the file does not exist), null is
-     *         returned (in which case you may check the reply code to determine the exact reason for failure).
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public OutputStream appendFileStream(final String remote) throws IOException {
+     * @param remote  The name of the remote file.
+     * @return An OutputStream through which the remote file can be appended.
+     *      If the data connection cannot be opened (e.g., the file does not
+     *      exist), null is returned (in which case you may check the reply
+     *      code to determine the exact reason for failure).
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public OutputStream appendFileStream(final String remote) throws IOException
+    {
@@ -1129,0 +1308 @@ public class FTPClient extends FTP implements Configurable {
+
@@ -1134,6 +1313,10 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean changeToParentDirectory() throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean changeToParentDirectory() throws IOException
+    {
@@ -1142,0 +1326 @@ public class FTPClient extends FTP implements Configurable {
+
@@ -1146 +1330 @@ public class FTPClient extends FTP implements Configurable {
-     * @param pathname The new current working directory.
+     * @param pathname  The new current working directory.
@@ -1148,6 +1332,10 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean changeWorkingDirectory(final String pathname) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean changeWorkingDirectory(final String pathname) throws IOException
+    {
@@ -1158,3 +1346,7 @@ public class FTPClient extends FTP implements Configurable {
-     * There are a few FTPClient methods that do not complete the entire sequence of FTP commands to complete a transaction. These commands require some action
-     * by the programmer after the reception of a positive intermediate command. After the programmer's code completes its actions, it must call this method to
-     * receive the completion reply from the server and verify the success of the entire transaction.
+     * There are a few FTPClient methods that do not complete the
+     * entire sequence of FTP commands to complete a transaction.  These
+     * commands require some action by the programmer after the reception
+     * of a positive intermediate command.  After the programmer's code
+     * completes its actions, it must call this method to receive
+     * the completion reply from the server and verify the success of the
+     * entire transaction.
@@ -1163 +1354,0 @@ public class FTPClient extends FTP implements Configurable {
-     *
@@ -1190,6 +1381,10 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean completePendingCommand() throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean completePendingCommand() throws IOException
+    {
@@ -1200,4 +1395,5 @@ public class FTPClient extends FTP implements Configurable {
-     * Implementation of the {@link Configurable Configurable} interface. In the case of this class, configuring merely makes the config object available for
-     * the factory methods that construct parsers.
-     *
-     * @param config {@link FTPClientConfig FTPClientConfig} object used to provide non-standard configurations to the parser.
+     * Implementation of the {@link Configurable Configurable} interface.
+     * In the case of this class, configuring merely makes the config object available for the
+     * factory methods that construct parsers.
+     * @param config {@link FTPClientConfig FTPClientConfig} object used to
+     * provide non-standard configurations to the parser.
@@ -1216 +1412 @@ public class FTPClient extends FTP implements Configurable {
-        if (entryParser == null || (parserKey != null && !entryParserKey.equals(parserKey))) {
+        if(entryParser == null ||  (parserKey != null && ! entryParserKey.equals(parserKey))) {
@@ -1220 +1416,2 @@ public class FTPClient extends FTP implements Configurable {
-                entryParser = parserFactory.createFileEntryParser(parserKey);
+                entryParser =
+                    parserFactory.createFileEntryParser(parserKey);
@@ -1226 +1423,2 @@ public class FTPClient extends FTP implements Configurable {
-                entryParser = parserFactory.createFileEntryParser(configuration);
+                entryParser =
+                    parserFactory.createFileEntryParser(configuration);
@@ -1257 +1455 @@ public class FTPClient extends FTP implements Configurable {
-     * @param pathname The pathname of the file to be deleted.
+     * @param pathname   The pathname of the file to be deleted.
@@ -1259,6 +1457,10 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean deleteFile(final String pathname) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean deleteFile(final String pathname) throws IOException
+    {
@@ -1269 +1471,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Closes the connection to the FTP server and restores connection parameters to the default values.
+     * Closes the connection to the FTP server and restores
+     * connection parameters to the default values.
@@ -1274 +1477,2 @@ public class FTPClient extends FTP implements Configurable {
-    public void disconnect() throws IOException {
+    public void disconnect() throws IOException
+    {
@@ -1282 +1486,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Should only be used with commands that return replies on the command channel - do not use for LIST, NLST, MLSD etc.
+     * Should only be used with commands that return replies on the
+     * command channel - do not use for LIST, NLST, MLSD etc.
@@ -1284 +1489 @@ public class FTPClient extends FTP implements Configurable {
-     * @param command The command to invoke
+     * @param command  The command to invoke
@@ -1286 +1491,3 @@ public class FTPClient extends FTP implements Configurable {
-     * @return True if successfully completed, false if not, in which case call {@link #getReplyCode()} or {@link #getReplyString()} to get the reason.
+     * @return True if successfully completed, false if not, in which case
+     * call {@link #getReplyCode()} or {@link #getReplyString()}
+     * to get the reason.
@@ -1288 +1495,2 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws IOException If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -1291 +1499,2 @@ public class FTPClient extends FTP implements Configurable {
-    public boolean doCommand(final String command, final String params) throws IOException {
+    public boolean doCommand(final String command, final String params) throws IOException
+    {
@@ -1298 +1507,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Should only be used with commands that return replies on the command channel - do not use for LIST, NLST, MLSD etc.
+     * Should only be used with commands that return replies on the
+     * command channel - do not use for LIST, NLST, MLSD etc.
@@ -1300 +1510 @@ public class FTPClient extends FTP implements Configurable {
-     * @param command The command to invoke
+     * @param command  The command to invoke
@@ -1302,2 +1512,3 @@ public class FTPClient extends FTP implements Configurable {
-     * @return The array of replies, or {@code null} if the command failed, in which case call {@link #getReplyCode()} or {@link #getReplyString()} to get the
-     *         reason.
+     * @return The array of replies, or {@code null} if the command failed, in which case
+     * call {@link #getReplyCode()} or {@link #getReplyString()}
+     * to get the reason.
@@ -1305 +1516,2 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws IOException If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -1308 +1520,2 @@ public class FTPClient extends FTP implements Configurable {
-    public String[] doCommandAsStrings(final String command, final String params) throws IOException {
+    public String[] doCommandAsStrings(final String command, final String params) throws IOException
+    {
@@ -1310 +1523 @@ public class FTPClient extends FTP implements Configurable {
-        if (success) {
+        if (success){
@@ -1317,3 +1530,7 @@ public class FTPClient extends FTP implements Configurable {
-     * Set the current data connection mode to <code>ACTIVE_LOCAL_DATA_CONNECTION_MODE</code>. No communication with the FTP server is conducted, but this
-     * causes all future data transfers to require the FTP server to connect to the client's data port. Additionally, to accommodate differences between socket
-     * implementations on different platforms, this method causes the client to issue a PORT command before every data transfer.
+     * Set the current data connection mode to
+     * <code>ACTIVE_LOCAL_DATA_CONNECTION_MODE</code>.  No communication
+     * with the FTP server is conducted, but this causes all future data
+     * transfers to require the FTP server to connect to the client's
+     * data port.  Additionally, to accommodate differences between socket
+     * implementations on different platforms, this method causes the
+     * client to issue a PORT command before every data transfer.
@@ -1321 +1538,2 @@ public class FTPClient extends FTP implements Configurable {
-    public void enterLocalActiveMode() {
+    public void enterLocalActiveMode()
+    {
@@ -1328,4 +1546,10 @@ public class FTPClient extends FTP implements Configurable {
-     * Set the current data connection mode to <code> PASSIVE_LOCAL_DATA_CONNECTION_MODE </code>. Use this method only for data transfers between the client and
-     * server. This method causes a PASV (or EPSV) command to be issued to the server before the opening of every data connection, telling the server to open a
-     * data port to which the client will connect to conduct data transfers. The FTPClient will stay in <code> PASSIVE_LOCAL_DATA_CONNECTION_MODE </code> until
-     * the mode is changed by calling some other method such as {@link #enterLocalActiveMode enterLocalActiveMode() }
+     * Set the current data connection mode to
+     * <code> PASSIVE_LOCAL_DATA_CONNECTION_MODE </code>.  Use this
+     * method only for data transfers between the client and server.
+     * This method causes a PASV (or EPSV) command to be issued to the server
+     * before the opening of every data connection, telling the server to
+     * open a data port to which the client will connect to conduct
+     * data transfers.  The FTPClient will stay in
+     * <code> PASSIVE_LOCAL_DATA_CONNECTION_MODE </code> until the
+     * mode is changed by calling some other method such as
+     * {@link #enterLocalActiveMode  enterLocalActiveMode() }
@@ -1333 +1557,2 @@ public class FTPClient extends FTP implements Configurable {
-     * <b>N.B.</b> currently calling any connect method will reset the mode to ACTIVE_LOCAL_DATA_CONNECTION_MODE.
+     * <b>N.B.</b> currently calling any connect method will reset the mode to
+     * ACTIVE_LOCAL_DATA_CONNECTION_MODE.
@@ -1335 +1560,2 @@ public class FTPClient extends FTP implements Configurable {
-    public void enterLocalPassiveMode() {
+    public void enterLocalPassiveMode()
+    {
@@ -1344,4 +1570,10 @@ public class FTPClient extends FTP implements Configurable {
-     * Set the current data connection mode to <code> ACTIVE_REMOTE_DATA_CONNECTION </code>. Use this method only for server to server data transfers. This
-     * method issues a PORT command to the server, indicating the other server and port to which it should connect for data transfers. You must call this method
-     * before EVERY server to server transfer attempt. The FTPClient will NOT automatically continue to issue PORT commands. You also must remember to call
-     * {@link #enterLocalActiveMode enterLocalActiveMode() } if you wish to return to the normal data connection mode.
+     * Set the current data connection mode to
+     * <code> ACTIVE_REMOTE_DATA_CONNECTION </code>.  Use this method only
+     * for server to server data transfers.  This method issues a PORT
+     * command to the server, indicating the other server and port to which
+     * it should connect for data transfers.  You must call this method
+     * before EVERY server to server transfer attempt.  The FTPClient will
+     * NOT automatically continue to issue PORT commands.  You also
+     * must remember to call
+     * {@link #enterLocalActiveMode  enterLocalActiveMode() } if you
+     * wish to return to the normal data connection mode.
@@ -1349 +1581,2 @@ public class FTPClient extends FTP implements Configurable {
-     * @param host The passive mode server accepting connections for data transfers.
+     * @param host The passive mode server accepting connections for data
+     *             transfers.
@@ -1352,7 +1585,13 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean enterRemoteActiveMode(final InetAddress host, final int port) throws IOException {
-        if (FTPReply.isPositiveCompletion(port(host, port))) {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean enterRemoteActiveMode(final InetAddress host, final int port)
+    throws IOException
+    {
+        if (FTPReply.isPositiveCompletion(port(host, port)))
+        {
@@ -1368,4 +1607,11 @@ public class FTPClient extends FTP implements Configurable {
-     * Set the current data connection mode to <code> PASSIVE_REMOTE_DATA_CONNECTION_MODE </code>. Use this method only for server to server data transfers.
-     * This method issues a PASV command to the server, telling it to open a data port to which the active server will connect to conduct data transfers. You
-     * must call this method before EVERY server to server transfer attempt. The FTPClient will NOT automatically continue to issue PASV commands. You also must
-     * remember to call {@link #enterLocalActiveMode enterLocalActiveMode() } if you wish to return to the normal data connection mode.
+     * Set the current data connection mode to
+     * <code> PASSIVE_REMOTE_DATA_CONNECTION_MODE </code>.  Use this
+     * method only for server to server data transfers.
+     * This method issues a PASV command to the server, telling it to
+     * open a data port to which the active server will connect to conduct
+     * data transfers.  You must call this method
+     * before EVERY server to server transfer attempt.  The FTPClient will
+     * NOT automatically continue to issue PASV commands.  You also
+     * must remember to call
+     * {@link #enterLocalActiveMode  enterLocalActiveMode() } if you
+     * wish to return to the normal data connection mode.
@@ -1374,6 +1620,10 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean enterRemotePassiveMode() throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean enterRemotePassiveMode() throws IOException
+    {
@@ -1391,3 +1641,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Queries the server for supported features. The server may reply with a list of server-supported extensions. For example, a typical client-server
-     * interaction might be (from RFC 2389):
-     *
+     * Queries the server for supported features. The server may reply with a list of server-supported extensions.
+     * For example, a typical client-server interaction might be (from RFC 2389):
@@ -1403 +1651,0 @@ public class FTPClient extends FTP implements Configurable {
-     *
@@ -1414,2 +1662,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Queries the server for a supported feature, and returns the its value (if any). Caches the parsed response to avoid resending the command repeatedly.
-     *
+     * Queries the server for a supported feature, and returns the its value (if any).
+     * Caches the parsed response to avoid resending the command repeatedly.
@@ -1418,2 +1666,4 @@ public class FTPClient extends FTP implements Configurable {
-     * @return if the feature is present, returns the feature value or the empty string if the feature exists but has no value. Returns {@code null} if the
-     *         feature is not found or the command failed. Check {@link #getReplyCode()} or {@link #getReplyString()} if so.
+     * @return if the feature is present, returns the feature value or the empty string
+     * if the feature exists but has no value.
+     * Returns {@code null} if the feature is not found or the command failed.
+     * Check {@link #getReplyCode()} or {@link #getReplyString()} if so.
@@ -1424 +1674 @@ public class FTPClient extends FTP implements Configurable {
-        final String[] values = featureValues(feature);
+        final String [] values = featureValues(feature);
@@ -1432,2 +1682,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Queries the server for a supported feature, and returns its values (if any). Caches the parsed response to avoid resending the command repeatedly.
-     *
+     * Queries the server for a supported feature, and returns its values (if any).
+     * Caches the parsed response to avoid resending the command repeatedly.
@@ -1436,2 +1686,3 @@ public class FTPClient extends FTP implements Configurable {
-     * @return if the feature is present, returns the feature values (empty array if none) Returns {@code null} if the feature is not found or the command
-     *         failed. Check {@link #getReplyCode()} or {@link #getReplyString()} if so.
+     * @return if the feature is present, returns the feature values (empty array if none)
+     * Returns {@code null} if the feature is not found or the command failed.
+     * Check {@link #getReplyCode()} or {@link #getReplyString()} if so.
@@ -1457,2 +1708,4 @@ public class FTPClient extends FTP implements Configurable {
-    int getActivePort() {
-        if (activeMinPort > 0 && activeMaxPort >= activeMinPort) {
+    int getActivePort()
+    {
+        if (activeMinPort > 0 && activeMaxPort >= activeMinPort)
+        {
@@ -1471 +1723,0 @@ public class FTPClient extends FTP implements Configurable {
-     *
@@ -1474 +1726,2 @@ public class FTPClient extends FTP implements Configurable {
-    public boolean getAutodetectUTF8() {
+    public boolean getAutodetectUTF8()
+    {
@@ -1494 +1746,0 @@ public class FTPClient extends FTP implements Configurable {
-     *
@@ -1524 +1776,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Gets the time to wait between sending control connection keepalive messages when processing file upload or download.
+     * Gets the time to wait between sending control connection keepalive messages
+     * when processing file upload or download.
@@ -1539 +1792,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Gets the time to wait between sending control connection keepalive messages when processing file upload or download.
+     * Gets the time to wait between sending control connection keepalive messages
+     * when processing file upload or download.
@@ -1557 +1811 @@ public class FTPClient extends FTP implements Configurable {
-    public CopyStreamListener getCopyStreamListener() {
+    public CopyStreamListener getCopyStreamListener(){
@@ -1573 +1826,0 @@ public class FTPClient extends FTP implements Configurable {
-     *
@@ -1583 +1836,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Returns the current data connection mode (one of the <code> _DATA_CONNECTION_MODE </code> constants.
+     * Returns the current data connection mode (one of the
+     * <code> _DATA_CONNECTION_MODE </code> constants.
@@ -1585 +1839,2 @@ public class FTPClient extends FTP implements Configurable {
-     * @return The current data connection mode (one of the <code> _DATA_CONNECTION_MODE </code> constants.
+     * @return The current data connection mode (one of the
+     * <code> _DATA_CONNECTION_MODE </code> constants.
@@ -1587 +1842,2 @@ public class FTPClient extends FTP implements Configurable {
-    public int getDataConnectionMode() {
+    public int getDataConnectionMode()
+    {
@@ -1592,2 +1848,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Gets the timeout to use when reading from the data connection. This timeout will be set immediately after opening the data connection, provided that the
-     * value is &ge; 0.
+     * Gets the timeout to use when reading from the data connection. This timeout will be set immediately after opening
+     * the data connection, provided that the value is &ge; 0.
@@ -1595 +1851,2 @@ public class FTPClient extends FTP implements Configurable {
-     * <b>Note:</b> the timeout will also be applied when calling accept() whilst establishing an active local data connection.
+     * <b>Note:</b> the timeout will also be applied when calling accept() whilst establishing an active local data
+     * connection.
@@ -1601 +1858,2 @@ public class FTPClient extends FTP implements Configurable {
-    public Duration getDataTimeout() {
+    public Duration getDataTimeout()
+    {
@@ -1616,2 +1874,4 @@ public class FTPClient extends FTP implements Configurable {
-    InetAddress getHostAddress() {
-        if (activeExternalHost != null) {
+    InetAddress getHostAddress()
+    {
+        if (activeExternalHost != null)
+        {
@@ -1630,2 +1890,4 @@ public class FTPClient extends FTP implements Configurable {
-        if (getListHiddenFiles()) {
-            if (pathname != null) {
+        if (getListHiddenFiles())
+        {
+            if (pathname != null)
+            {
@@ -1653,2 +1915,4 @@ public class FTPClient extends FTP implements Configurable {
-     * Issue the FTP MDTM command (not supported by all servers) to retrieve the last modification time of a file. The modification string should be in the ISO
-     * 3077 form "yyyyMMDDhhmmss(.xxx)?". The timestamp represented should also be in GMT, but not all FTP servers honor this.
+     * Issue the FTP MDTM command (not supported by all servers) to retrieve the last
+     * modification time of a file. The modification string should be in the
+     * ISO 3077 form "yyyyMMDDhhmmss(.xxx)?". The timestamp represented should also be in
+     * GMT, but not all FTP servers honor this.
@@ -1670,3 +1934,7 @@ public class FTPClient extends FTP implements Configurable {
-     * Returns the hostname or IP address (in the form of a string) returned by the server when entering passive mode. If not in passive mode, returns null.
-     * This method only returns a valid value AFTER a data connection has been opened after a call to {@link #enterLocalPassiveMode enterLocalPassiveMode()}.
-     * This is because FTPClient sends a PASV command to the server only just before opening a data connection, and not when you call
+     * Returns the hostname or IP address (in the form of a string) returned
+     * by the server when entering passive mode.  If not in passive mode,
+     * returns null.  This method only returns a valid value AFTER a
+     * data connection has been opened after a call to
+     * {@link #enterLocalPassiveMode enterLocalPassiveMode()}.
+     * This is because FTPClient sends a PASV command to the server only
+     * just before opening a data connection, and not when you call
@@ -1677 +1945,2 @@ public class FTPClient extends FTP implements Configurable {
-    public String getPassiveHost() {
+    public String getPassiveHost()
+    {
@@ -1682 +1951,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Set the local IP address in passive mode. Useful when there are multiple network cards.
+     * Set the local IP address in passive mode.
+     * Useful when there are multiple network cards.
@@ -1686 +1956,2 @@ public class FTPClient extends FTP implements Configurable {
-    public InetAddress getPassiveLocalIPAddress() {
+    public InetAddress getPassiveLocalIPAddress()
+    {
@@ -1691,3 +1962,7 @@ public class FTPClient extends FTP implements Configurable {
-     * If in passive mode, returns the data port of the passive host. This method only returns a valid value AFTER a data connection has been opened after a
-     * call to {@link #enterLocalPassiveMode enterLocalPassiveMode()}. This is because FTPClient sends a PASV command to the server only just before opening a
-     * data connection, and not when you call {@link #enterLocalPassiveMode enterLocalPassiveMode()}.
+     * If in passive mode, returns the data port of the passive host.
+     * This method only returns a valid value AFTER a
+     * data connection has been opened after a call to
+     * {@link #enterLocalPassiveMode enterLocalPassiveMode()}.
+     * This is because FTPClient sends a PASV command to the server only
+     * just before opening a data connection, and not when you call
+     * {@link #enterLocalPassiveMode enterLocalPassiveMode()}.
@@ -1695 +1970,2 @@ public class FTPClient extends FTP implements Configurable {
-     * @return The data port of the passive server. If not in passive mode, undefined.
+     * @return The data port of the passive server.  If not in passive
+     *         mode, undefined.
@@ -1697 +1973,2 @@ public class FTPClient extends FTP implements Configurable {
-    public int getPassivePort() {
+    public int getPassivePort()
+    {
@@ -1703 +1979,0 @@ public class FTPClient extends FTP implements Configurable {
-     *
@@ -1712 +1988,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Get the reported host address for active mode EPRT/PORT commands; allows override of {@link #getHostAddress()}.
+     * Get the reported host address for active mode EPRT/PORT commands;
+     * allows override of {@link #getHostAddress()}.
@@ -1720 +1997 @@ public class FTPClient extends FTP implements Configurable {
-            return reportActiveExternalHost;
+            return reportActiveExternalHost ;
@@ -1728 +2005,2 @@ public class FTPClient extends FTP implements Configurable {
-     * @return offset The offset into the remote file at which to start the next file transfer.
+     * @return offset  The offset into the remote file at which to start the
+     *           next file transfer.
@@ -1730 +2008,2 @@ public class FTPClient extends FTP implements Configurable {
-    public long getRestartOffset() {
+    public long getRestartOffset()
+    {
@@ -1736 +2014,0 @@ public class FTPClient extends FTP implements Configurable {
-     *
@@ -1745 +2023,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Issue the FTP SIZE command to the server for a given pathname. This should produce the size of the file.
+     * Issue the FTP SIZE command to the server for a given pathname.
+     * This should produce the size of the file.
@@ -1750,4 +2029,7 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -1756 +2038,2 @@ public class FTPClient extends FTP implements Configurable {
-    public String getSize(final String pathname) throws IOException {
+    public String getSize(final String pathname) throws IOException
+    {
@@ -1767,6 +2050,10 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public String getStatus() throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public String getStatus() throws IOException
+    {
@@ -1780,2 +2067,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Issue the FTP STAT command to the server for a given pathname. This should produce a listing of the file or directory.
-     *
+     * Issue the FTP STAT command to the server for a given pathname.  This
+     * should produce a listing of the file or directory.
@@ -1785,6 +2072,10 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public String getStatus(final String pathname) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public String getStatus(final String pathname) throws IOException
+    {
@@ -1803 +2094,2 @@ public class FTPClient extends FTP implements Configurable {
-    public String getSystemName() throws IOException {
+    public String getSystemName() throws IOException
+    {
@@ -1811,3 +2103,6 @@ public class FTPClient extends FTP implements Configurable {
-     * Fetches the system type from the server and returns the string. This value is cached for the duration of the connection after the first call to this
-     * method. In other words, only the first time that you invoke this method will it issue a SYST command to the FTP server. FTPClient will remember the value
-     * and return the cached value until a call to disconnect.
+     * Fetches the system type from the server and returns the string.
+     * This value is cached for the duration of the connection after the
+     * first call to this method.  In other words, only the first time
+     * that you invoke this method will it issue a SYST command to the
+     * FTP server.  FTPClient will remember the value and return the
+     * cached value until a call to disconnect.
@@ -1815,2 +2110,2 @@ public class FTPClient extends FTP implements Configurable {
-     * If the SYST command fails, and the system property {@link #FTP_SYSTEM_TYPE_DEFAULT} is defined, then this is used instead.
-     *
+     * If the SYST command fails, and the system property
+     * {@link #FTP_SYSTEM_TYPE_DEFAULT} is defined, then this is used instead.
@@ -1818,9 +2113,13 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server (and the
-     *                                      default system type property is not defined)
-     * @since 2.2
-     */
-    public String getSystemType() throws IOException {
-        // if (syst() == FTPReply.NAME_SYSTEM_TYPE)
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *  command to the server or receiving a reply from the server (and the default
+     *  system type property is not defined)
+     *  @since 2.2
+     */
+    public String getSystemType() throws IOException
+    {
+        //if (syst() == FTPReply.NAME_SYSTEM_TYPE)
@@ -1830 +2129 @@ public class FTPClient extends FTP implements Configurable {
-        if (systemName == null) {
+        if (systemName == null){
@@ -1847 +2146,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Queries the server for a supported feature. Caches the parsed response to avoid resending the command repeatedly.
+     * Queries the server for a supported feature.
+     * Caches the parsed response to avoid resending the command repeatedly.
@@ -1850,2 +2150,3 @@ public class FTPClient extends FTP implements Configurable {
-     * @return {@code true} if the feature is present, {@code false} if the feature is not present or the {@link #feat()} command failed. Check
-     *         {@link #getReplyCode()} or {@link #getReplyString()} if it is necessary to distinguish these cases.
+     * @return {@code true} if the feature is present, {@code false} if the feature is not present
+     * or the {@link #feat()} command failed. Check {@link #getReplyCode()} or {@link #getReplyString()}
+     * if it is necessary to distinguish these cases.
@@ -1861 +2162,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Queries the server for a supported feature. Caches the parsed response to avoid resending the command repeatedly.
+     * Queries the server for a supported feature.
+     * Caches the parsed response to avoid resending the command repeatedly.
@@ -1864,2 +2166,3 @@ public class FTPClient extends FTP implements Configurable {
-     * @return {@code true} if the feature is present, {@code false} if the feature is not present or the {@link #feat()} command failed. Check
-     *         {@link #getReplyCode()} or {@link #getReplyString()} if it is necessary to distinguish these cases.
+     * @return {@code true} if the feature is present, {@code false} if the feature is not present
+     * or the {@link #feat()} command failed. Check {@link #getReplyCode()} or {@link #getReplyString()}
+     * if it is necessary to distinguish these cases.
@@ -1878,2 +2181,3 @@ public class FTPClient extends FTP implements Configurable {
-     * Queries the server for a supported feature with particular value, for example "AUTH SSL" or "AUTH TLS". Caches the parsed response to avoid resending the
-     * command repeatedly.
+     * Queries the server for a supported feature with particular value,
+     * for example "AUTH SSL" or "AUTH TLS".
+     * Caches the parsed response to avoid resending the command repeatedly.
@@ -1882 +2186 @@ public class FTPClient extends FTP implements Configurable {
-     * @param value   the value to find.
+     * @param value the value to find.
@@ -1884,2 +2188,3 @@ public class FTPClient extends FTP implements Configurable {
-     * @return {@code true} if the feature is present, {@code false} if the feature is not present or the {@link #feat()} command failed. Check
-     *         {@link #getReplyCode()} or {@link #getReplyString()} if it is necessary to distinguish these cases.
+     * @return {@code true} if the feature is present, {@code false} if the feature is not present
+     * or the {@link #feat()} command failed. Check {@link #getReplyCode()} or {@link #getReplyString()}
+     * if it is necessary to distinguish these cases.
@@ -1901 +2206,2 @@ public class FTPClient extends FTP implements Configurable {
-    private void initDefaults() {
+    private void initDefaults()
+    {
@@ -1903,2 +2209,2 @@ public class FTPClient extends FTP implements Configurable {
-        passiveHost = null;
-        passivePort = -1;
+        passiveHost        = null;
+        passivePort        = -1;
@@ -1909,8 +2215,8 @@ public class FTPClient extends FTP implements Configurable {
-        fileType = FTP.ASCII_FILE_TYPE;
-        fileStructure = FTP.FILE_STRUCTURE;
-        fileFormat = FTP.NON_PRINT_TEXT_FORMAT;
-        fileTransferMode = FTP.STREAM_TRANSFER_MODE;
-        restartOffset = 0;
-        systemName = null;
-        entryParser = null;
-        entryParserKey = "";
+        fileType           = FTP.ASCII_FILE_TYPE;
+        fileStructure      = FTP.FILE_STRUCTURE;
+        fileFormat         = FTP.NON_PRINT_TEXT_FORMAT;
+        fileTransferMode   = FTP.STREAM_TRANSFER_MODE;
+        restartOffset      = 0;
+        systemName         = null;
+        entryParser        = null;
+        entryParserKey    = "";
@@ -1957,3 +2263,7 @@ public class FTPClient extends FTP implements Configurable {
-     * Using the default autodetect mechanism, initialize an FTPListParseEngine object containing a raw file information for the current working directory on
-     * the server This information is obtained through the LIST command. This object is then capable of being iterated to return a sequence of FTPFile objects
-     * with information filled in by the <code> FTPFileEntryParser </code> used.
+     * Using the default autodetect mechanism, initialize an FTPListParseEngine
+     * object containing a raw file information for the current working
+     * directory on the server
+     * This information is obtained through the LIST command.  This object
+     * is then capable of being iterated to return a sequence of FTPFile
+     * objects with information filled in by the
+     * <code> FTPFileEntryParser </code> used.
@@ -1961,14 +2271,22 @@ public class FTPClient extends FTP implements Configurable {
-     * This method differs from using the listFiles() methods in that expensive FTPFile objects are not created until needed which may be an advantage on large
-     * lists.
-     *
-     * @return A FTPListParseEngine object that holds the raw information and is capable of providing parsed FTPFile objects, one for each file containing
-     *         information contained in the given path in the format determined by the <code> parser </code> parameter. Null will be returned if a data
-     *         connection cannot be opened. If the current working directory contains no files, an empty array will be the return.
-     *
-     * @throws FTPConnectionClosedException                                    If the FTP server prematurely closes the connection as a result of the client
-     *                                                                         being idle or some other reason causing the server to send FTP reply code 421.
-     *                                                                         This exception may be caught either as an IOException or independently as itself.
-     * @throws IOException                                                     If an I/O error occurs while either sending a command to the server or receiving
-     *                                                                         a reply from the server.
-     * @throws org.apache.commons.net.ftp.parser.ParserInitializationException Thrown if the autodetect mechanism cannot resolve the type of system we are
-     *                                                                         connected with.
+     * This method differs from using the listFiles() methods in that
+     * expensive FTPFile objects are not created until needed which may be
+     * an advantage on large lists.
+     *
+     * @return A FTPListParseEngine object that holds the raw information and
+     * is capable of providing parsed FTPFile objects, one for each file
+     * containing information contained in the given path in the format
+     * determined by the <code> parser </code> parameter.   Null will be
+     * returned if a data connection cannot be opened.  If the current working
+     * directory contains no files, an empty array will be the return.
+     *
+     * @throws FTPConnectionClosedException
+     *                   If the FTP server prematurely closes the connection as a result
+     *                   of the client being idle or some other reason causing the server
+     *                   to send FTP reply code 421.  This exception may be caught either
+     *                   as an IOException or independently as itself.
+     * @throws IOException
+     *                   If an I/O error occurs while either sending a
+     *                   command to the server or receiving a reply from the server.
+     * @throws org.apache.commons.net.ftp.parser.ParserInitializationException
+     *                   Thrown if the autodetect mechanism cannot
+     *                   resolve the type of system we are connected with.
@@ -1977 +2295,3 @@ public class FTPClient extends FTP implements Configurable {
-    public FTPListParseEngine initiateListParsing() throws IOException {
+    public FTPListParseEngine initiateListParsing()
+    throws IOException
+    {
@@ -1982 +2302,2 @@ public class FTPClient extends FTP implements Configurable {
-     * private method through which all listFiles() and initiateListParsing methods pass once a parser is determined.
+     * private method through which all listFiles() and
+     * initiateListParsing methods pass once a parser is determined.
@@ -1984,4 +2305,8 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @throws FTPConnectionClosedException
+     *                   If the FTP server prematurely closes the connection as a result
+     *                   of the client being idle or some other reason causing the server
+     *                   to send FTP reply code 421.  This exception may be caught either
+     *                   as an IOException or independently as itself.
+     * @throws IOException
+     *                   If an I/O error occurs while either sending a
+     *                   command to the server or receiving a reply from the server.
@@ -1990 +2315,4 @@ public class FTPClient extends FTP implements Configurable {
-    private FTPListParseEngine initiateListParsing(final FTPFileEntryParser parser, final String pathname) throws IOException {
+    private FTPListParseEngine initiateListParsing(
+            final FTPFileEntryParser parser, final String pathname)
+    throws IOException
+    {
@@ -1994 +2322,2 @@ public class FTPClient extends FTP implements Configurable {
-        if (socket == null) {
+        if (socket == null)
+        {
@@ -2000 +2329,2 @@ public class FTPClient extends FTP implements Configurable {
-        } finally {
+        }
+        finally {
@@ -2009,3 +2339,6 @@ public class FTPClient extends FTP implements Configurable {
-     * Using the default autodetect mechanism, initialize an FTPListParseEngine object containing a raw file information for the supplied directory. This
-     * information is obtained through the LIST command. This object is then capable of being iterated to return a sequence of FTPFile objects with information
-     * filled in by the <code> FTPFileEntryParser </code> used.
+     * Using the default autodetect mechanism, initialize an FTPListParseEngine
+     * object containing a raw file information for the supplied directory.
+     * This information is obtained through the LIST command.  This object
+     * is then capable of being iterated to return a sequence of FTPFile
+     * objects with information filled in by the
+     * <code> FTPFileEntryParser </code> used.
@@ -2013,2 +2346,3 @@ public class FTPClient extends FTP implements Configurable {
-     * The server may or may not expand glob expressions. You should avoid using glob expressions because the return format for glob listings differs from
-     * server to server and will likely cause this method to fail.
+     * The server may or may not expand glob expressions.  You should avoid
+     * using glob expressions because the return format for glob listings
+     * differs from server to server and will likely cause this method to fail.
@@ -2016,2 +2350,3 @@ public class FTPClient extends FTP implements Configurable {
-     * This method differs from using the listFiles() methods in that expensive FTPFile objects are not created until needed which may be an advantage on large
-     * lists.
+     * This method differs from using the listFiles() methods in that
+     * expensive FTPFile objects are not created until needed which may be
+     * an advantage on large lists.
@@ -2020,10 +2355,10 @@ public class FTPClient extends FTP implements Configurable {
-     * FTPClient f = FTPClient();
-     * f.connect(server);
-     * f.login(username, password);
-     * FTPListParseEngine engine = f.initiateListParsing(directory);
-     *
-     * while (engine.hasNext()) {
-     *     FTPFile[] files = engine.getNext(25); // "page size" you want
-     *     // do whatever you want with these files, display them, etc.
-     *     // expensive FTPFile objects not created until needed.
-     * }
+     *    FTPClient f=FTPClient();
+     *    f.connect(server);
+     *    f.login(username, password);
+     *    FTPListParseEngine engine = f.initiateListParsing(directory);
+     *
+     *    while (engine.hasNext()) {
+     *       FTPFile[] files = engine.getNext(25);  // "page size" you want
+     *       //do whatever you want with these files, display them, etc.
+     *       //expensive FTPFile objects not created until needed.
+     *    }
@@ -2031 +2365,0 @@ public class FTPClient extends FTP implements Configurable {
-     *
@@ -2034,11 +2368,18 @@ public class FTPClient extends FTP implements Configurable {
-     * @return A FTPListParseEngine object that holds the raw information and is capable of providing parsed FTPFile objects, one for each file containing
-     *         information contained in the given path in the format determined by the <code> parser </code> parameter. Null will be returned if a data
-     *         connection cannot be opened. If the current working directory contains no files, an empty array will be the return.
-     *
-     * @throws FTPConnectionClosedException                                    If the FTP server prematurely closes the connection as a result of the client
-     *                                                                         being idle or some other reason causing the server to send FTP reply code 421.
-     *                                                                         This exception may be caught either as an IOException or independently as itself.
-     * @throws IOException                                                     If an I/O error occurs while either sending a command to the server or receiving
-     *                                                                         a reply from the server.
-     * @throws org.apache.commons.net.ftp.parser.ParserInitializationException Thrown if the autodetect mechanism cannot resolve the type of system we are
-     *                                                                         connected with.
+     * @return A FTPListParseEngine object that holds the raw information and
+     * is capable of providing parsed FTPFile objects, one for each file
+     * containing information contained in the given path in the format
+     * determined by the <code> parser </code> parameter.   Null will be
+     * returned if a data connection cannot be opened.  If the current working
+     * directory contains no files, an empty array will be the return.
+     *
+     * @throws FTPConnectionClosedException
+     *                   If the FTP server prematurely closes the connection as a result
+     *                   of the client being idle or some other reason causing the server
+     *                   to send FTP reply code 421.  This exception may be caught either
+     *                   as an IOException or independently as itself.
+     * @throws IOException
+     *                   If an I/O error occurs while either sending a
+     *                   command to the server or receiving a reply from the server.
+     * @throws org.apache.commons.net.ftp.parser.ParserInitializationException
+     *                   Thrown if the autodetect mechanism cannot
+     *                   resolve the type of system we are connected with.
@@ -2047 +2388,3 @@ public class FTPClient extends FTP implements Configurable {
-    public FTPListParseEngine initiateListParsing(final String pathname) throws IOException {
+    public FTPListParseEngine initiateListParsing(final String pathname)
+    throws IOException
+    {
@@ -2052,3 +2395,6 @@ public class FTPClient extends FTP implements Configurable {
-     * Using the supplied parser key, initialize an FTPListParseEngine object containing a raw file information for the supplied directory. This information is
-     * obtained through the LIST command. This object is then capable of being iterated to return a sequence of FTPFile objects with information filled in by
-     * the <code> FTPFileEntryParser </code> used.
+     * Using the supplied parser key, initialize an FTPListParseEngine
+     * object containing a raw file information for the supplied directory.
+     * This information is obtained through the LIST command.  This object
+     * is then capable of being iterated to return a sequence of FTPFile
+     * objects with information filled in by the
+     * <code> FTPFileEntryParser </code> used.
@@ -2056,2 +2402,3 @@ public class FTPClient extends FTP implements Configurable {
-     * The server may or may not expand glob expressions. You should avoid using glob expressions because the return format for glob listings differs from
-     * server to server and will likely cause this method to fail.
+     * The server may or may not expand glob expressions.  You should avoid
+     * using glob expressions because the return format for glob listings
+     * differs from server to server and will likely cause this method to fail.
@@ -2059,24 +2406,41 @@ public class FTPClient extends FTP implements Configurable {
-     * This method differs from using the listFiles() methods in that expensive FTPFile objects are not created until needed which may be an advantage on large
-     * lists.
-     *
-     * @param parserKey A string representing a designated code or fully-qualified class name of an <code> FTPFileEntryParser </code> that should be used to
-     *                  parse each server file listing. May be {@code null}, in which case the code checks first the system property {@link #FTP_SYSTEM_TYPE},
-     *                  and if that is not defined the SYST command is used to provide the value. To allow for arbitrary system types, the return from the SYST
-     *                  command is used to look up an alias for the type in the {@link #SYSTEM_TYPE_PROPERTIES} properties file if it is available.
-     * @param pathname  the starting directory
-     *
-     * @return A FTPListParseEngine object that holds the raw information and is capable of providing parsed FTPFile objects, one for each file containing
-     *         information contained in the given path in the format determined by the <code> parser </code> parameter. Null will be returned if a data
-     *         connection cannot be opened. If the current working directory contains no files, an empty array will be the return.
-     *
-     * @throws FTPConnectionClosedException                                    If the FTP server prematurely closes the connection as a result of the client
-     *                                                                         being idle or some other reason causing the server to send FTP reply code 421.
-     *                                                                         This exception may be caught either as an IOException or independently as itself.
-     * @throws IOException                                                     If an I/O error occurs while either sending a command to the server or receiving
-     *                                                                         a reply from the server.
-     * @throws org.apache.commons.net.ftp.parser.ParserInitializationException Thrown if the parserKey parameter cannot be resolved by the selected parser
-     *                                                                         factory. In the DefaultFTPEntryParserFactory, this will happen when parserKey is
-     *                                                                         neither the fully qualified class name of a class implementing the interface
-     *                                                                         org.apache.commons.net.ftp.FTPFileEntryParser nor a string containing one of the
-     *                                                                         recognized keys mapping to such a parser or if class loader security issues
-     *                                                                         prevent its being loaded.
+     * This method differs from using the listFiles() methods in that
+     * expensive FTPFile objects are not created until needed which may be
+     * an advantage on large lists.
+     *
+     * @param parserKey A string representing a designated code or fully-qualified
+     * class name of an  <code> FTPFileEntryParser </code> that should be
+     *               used to parse each server file listing.
+     *               May be {@code null}, in which case the code checks first
+     *               the system property {@link #FTP_SYSTEM_TYPE}, and if that is
+     *               not defined the SYST command is used to provide the value.
+     *               To allow for arbitrary system types, the return from the
+     *               SYST command is used to look up an alias for the type in the
+     *               {@link #SYSTEM_TYPE_PROPERTIES} properties file if it is available.
+     * @param pathname the starting directory
+     *
+     * @return A FTPListParseEngine object that holds the raw information and
+     * is capable of providing parsed FTPFile objects, one for each file
+     * containing information contained in the given path in the format
+     * determined by the <code> parser </code> parameter.   Null will be
+     * returned if a data connection cannot be opened.  If the current working
+     * directory contains no files, an empty array will be the return.
+     *
+     * @throws FTPConnectionClosedException
+     *                   If the FTP server prematurely closes the connection as a result
+     *                   of the client being idle or some other reason causing the server
+     *                   to send FTP reply code 421.  This exception may be caught either
+     *                   as an IOException or independently as itself.
+     * @throws IOException
+     *                   If an I/O error occurs while either sending a
+     *                   command to the server or receiving a reply from the server.
+     * @throws org.apache.commons.net.ftp.parser.ParserInitializationException
+     *                   Thrown if the parserKey parameter cannot be
+     *                   resolved by the selected parser factory.
+     *                   In the DefaultFTPEntryParserFactory, this will
+     *                   happen when parserKey is neither
+     *                   the fully qualified class name of a class
+     *                   implementing the interface
+     *                   org.apache.commons.net.ftp.FTPFileEntryParser
+     *                   nor a string containing one of the recognized keys
+     *                   mapping to such a parser or if class loader
+     *                   security issues prevent its being loaded.
@@ -2085 +2449,4 @@ public class FTPClient extends FTP implements Configurable {
-    public FTPListParseEngine initiateListParsing(final String parserKey, final String pathname) throws IOException {
+    public FTPListParseEngine initiateListParsing(
+            final String parserKey, final String pathname)
+    throws IOException
+    {
@@ -2096 +2463,2 @@ public class FTPClient extends FTP implements Configurable {
-    public FTPListParseEngine initiateMListParsing() throws IOException {
+    public FTPListParseEngine initiateMListParsing() throws IOException
+    {
@@ -2107 +2475,2 @@ public class FTPClient extends FTP implements Configurable {
-    public FTPListParseEngine initiateMListParsing(final String pathname) throws IOException {
+    public FTPListParseEngine initiateMListParsing(final String pathname) throws IOException
+    {
@@ -2110 +2479,2 @@ public class FTPClient extends FTP implements Configurable {
-        if (socket == null) {
+        if (socket == null)
+        {
@@ -2116 +2486,2 @@ public class FTPClient extends FTP implements Configurable {
-        } finally {
+        }
+        finally {
@@ -2124,2 +2495,3 @@ public class FTPClient extends FTP implements Configurable {
-     * Return whether or not verification of the remote host participating in data connections is enabled. The default behavior is for verification to be
-     * enabled.
+     * Return whether or not verification of the remote host participating
+     * in data connections is enabled.  The default behavior is for
+     * verification to be enabled.
@@ -2129 +2501,2 @@ public class FTPClient extends FTP implements Configurable {
-    public boolean isRemoteVerificationEnabled() {
+    public boolean isRemoteVerificationEnabled()
+    {
@@ -2134,2 +2507,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Whether should attempt to use EPSV with IPv4. Default (if not set) is <code>false</code>
-     *
+     * Whether should attempt to use EPSV with IPv4.
+     * Default (if not set) is <code>false</code>
@@ -2144 +2517,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Using the default system autodetect mechanism, obtain a list of directories contained in the current working directory.
+     * Using the default system autodetect mechanism, obtain a
+     * list of directories contained in the current working directory.
@@ -2146 +2520,3 @@ public class FTPClient extends FTP implements Configurable {
-     * This information is obtained through the LIST command. The contents of the returned array is determined by the<code> FTPFileEntryParser </code> used.
+     * This information is obtained through the LIST command.  The contents of
+     * the returned array is determined by the<code> FTPFileEntryParser </code>
+     * used.
@@ -2148,17 +2524,30 @@ public class FTPClient extends FTP implements Configurable {
-     * N.B. the LIST command does not generally return very precise timestamps. For recent files, the response usually contains hours and minutes (not seconds).
-     * For older files, the output may only contain a date. If the server supports it, the MLSD command returns timestamps with a precision of seconds, and may
-     * include milliseconds. See {@link #mlistDir()}
-     *
-     * @return The list of directories contained in the current directory in the format determined by the autodetection mechanism.
-     *
-     * @throws FTPConnectionClosedException                                    If the FTP server prematurely closes the connection as a result of the client
-     *                                                                         being idle or some other reason causing the server to send FTP reply code 421.
-     *                                                                         This exception may be caught either as an IOException or independently as itself.
-     * @throws IOException                                                     If an I/O error occurs while either sending a command to the server or receiving
-     *                                                                         a reply from the server.
-     * @throws org.apache.commons.net.ftp.parser.ParserInitializationException Thrown if the parserKey parameter cannot be resolved by the selected parser
-     *                                                                         factory. In the DefaultFTPEntryParserFactory, this will happen when parserKey is
-     *                                                                         neither the fully qualified class name of a class implementing the interface
-     *                                                                         org.apache.commons.net.ftp.FTPFileEntryParser nor a string containing one of the
-     *                                                                         recognized keys mapping to such a parser or if class loader security issues
-     *                                                                         prevent its being loaded.
+     * N.B. the LIST command does not generally return very precise timestamps.
+     * For recent files, the response usually contains hours and minutes (not seconds).
+     * For older files, the output may only contain a date.
+     * If the server supports it, the MLSD command returns timestamps with a precision
+     * of seconds, and may include milliseconds. See {@link #mlistDir()}
+     *
+     * @return The list of directories contained in the current directory
+     *         in the format determined by the autodetection mechanism.
+     *
+     * @throws FTPConnectionClosedException
+     *                   If the FTP server prematurely closes the connection
+     *                   as a result of the client being idle or some other
+     *                   reason causing the server to send FTP reply code 421.
+     *                   This exception may be caught either as an IOException
+     *                   or independently as itself.
+     * @throws IOException
+     *                   If an I/O error occurs while either sending a
+     *                   command to the server or receiving a reply
+     *                   from the server.
+     * @throws org.apache.commons.net.ftp.parser.ParserInitializationException
+     *                   Thrown if the parserKey parameter cannot be
+     *                   resolved by the selected parser factory.
+     *                   In the DefaultFTPEntryParserFactory, this will
+     *                   happen when parserKey is neither
+     *                   the fully qualified class name of a class
+     *                   implementing the interface
+     *                   org.apache.commons.net.ftp.FTPFileEntryParser
+     *                   nor a string containing one of the recognized keys
+     *                   mapping to such a parser or if class loader
+     *                   security issues prevent its being loaded.
@@ -2175 +2564,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Using the default system autodetect mechanism, obtain a list of directories contained in the specified directory.
+     * Using the default system autodetect mechanism, obtain a
+     * list of directories contained in the specified directory.
@@ -2177 +2567,3 @@ public class FTPClient extends FTP implements Configurable {
-     * This information is obtained through the LIST command. The contents of the returned array is determined by the<code> FTPFileEntryParser </code> used.
+     * This information is obtained through the LIST command.  The contents of
+     * the returned array is determined by the<code> FTPFileEntryParser </code>
+     * used.
@@ -2179,4 +2571,5 @@ public class FTPClient extends FTP implements Configurable {
-     * N.B. the LIST command does not generally return very precise timestamps. For recent files, the response usually contains hours and minutes (not seconds).
-     * For older files, the output may only contain a date. If the server supports it, the MLSD command returns timestamps with a precision of seconds, and may
-     * include milliseconds. See {@link #mlistDir()}
-     *
+     * N.B. the LIST command does not generally return very precise timestamps.
+     * For recent files, the response usually contains hours and minutes (not seconds).
+     * For older files, the output may only contain a date.
+     * If the server supports it, the MLSD command returns timestamps with a precision
+     * of seconds, and may include milliseconds. See {@link #mlistDir()}
@@ -2185,13 +2578,24 @@ public class FTPClient extends FTP implements Configurable {
-     * @return The list of directories contained in the specified directory in the format determined by the autodetection mechanism.
-     *
-     * @throws FTPConnectionClosedException                                    If the FTP server prematurely closes the connection as a result of the client
-     *                                                                         being idle or some other reason causing the server to send FTP reply code 421.
-     *                                                                         This exception may be caught either as an IOException or independently as itself.
-     * @throws IOException                                                     If an I/O error occurs while either sending a command to the server or receiving
-     *                                                                         a reply from the server.
-     * @throws org.apache.commons.net.ftp.parser.ParserInitializationException Thrown if the parserKey parameter cannot be resolved by the selected parser
-     *                                                                         factory. In the DefaultFTPEntryParserFactory, this will happen when parserKey is
-     *                                                                         neither the fully qualified class name of a class implementing the interface
-     *                                                                         org.apache.commons.net.ftp.FTPFileEntryParser nor a string containing one of the
-     *                                                                         recognized keys mapping to such a parser or if class loader security issues
-     *                                                                         prevent its being loaded.
+     * @return The list of directories contained in the specified directory
+     *         in the format determined by the autodetection mechanism.
+     *
+     * @throws FTPConnectionClosedException
+     *                   If the FTP server prematurely closes the connection
+     *                   as a result of the client being idle or some other
+     *                   reason causing the server to send FTP reply code 421.
+     *                   This exception may be caught either as an IOException
+     *                   or independently as itself.
+     * @throws IOException
+     *                   If an I/O error occurs while either sending a
+     *                   command to the server or receiving a reply
+     *                   from the server.
+     * @throws org.apache.commons.net.ftp.parser.ParserInitializationException
+     *                   Thrown if the parserKey parameter cannot be
+     *                   resolved by the selected parser factory.
+     *                   In the DefaultFTPEntryParserFactory, this will
+     *                   happen when parserKey is neither
+     *                   the fully qualified class name of a class
+     *                   implementing the interface
+     *                   org.apache.commons.net.ftp.FTPFileEntryParser
+     *                   nor a string containing one of the recognized keys
+     *                   mapping to such a parser or if class loader
+     *                   security issues prevent its being loaded.
@@ -2208 +2612,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Using the default system autodetect mechanism, obtain a list of file information for the current working directory.
+     * Using the default system autodetect mechanism, obtain a
+     * list of file information for the current working directory.
@@ -2210 +2615,3 @@ public class FTPClient extends FTP implements Configurable {
-     * This information is obtained through the LIST command. The contents of the returned array is determined by the<code> FTPFileEntryParser </code> used.
+     * This information is obtained through the LIST command.  The contents of
+     * the returned array is determined by the<code> FTPFileEntryParser </code>
+     * used.
@@ -2212,19 +2619,33 @@ public class FTPClient extends FTP implements Configurable {
-     * N.B. the LIST command does not generally return very precise timestamps. For recent files, the response usually contains hours and minutes (not seconds).
-     * For older files, the output may only contain a date. If the server supports it, the MLSD command returns timestamps with a precision of seconds, and may
-     * include milliseconds. See {@link #mlistDir()}
-     *
-     * @return The list of file information contained in the current directory in the format determined by the autodetection mechanism.
-     *         <p>
-     *         <b> NOTE:</b> This array may contain null members if any of the individual file listings failed to parse. The caller should check each entry for
-     *         null before referencing it.
-     * @throws FTPConnectionClosedException                                    If the FTP server prematurely closes the connection as a result of the client
-     *                                                                         being idle or some other reason causing the server to send FTP reply code 421.
-     *                                                                         This exception may be caught either as an IOException or independently as itself.
-     * @throws IOException                                                     If an I/O error occurs while either sending a command to the server or receiving
-     *                                                                         a reply from the server.
-     * @throws org.apache.commons.net.ftp.parser.ParserInitializationException Thrown if the parserKey parameter cannot be resolved by the selected parser
-     *                                                                         factory. In the DefaultFTPEntryParserFactory, this will happen when parserKey is
-     *                                                                         neither the fully qualified class name of a class implementing the interface
-     *                                                                         org.apache.commons.net.ftp.FTPFileEntryParser nor a string containing one of the
-     *                                                                         recognized keys mapping to such a parser or if class loader security issues
-     *                                                                         prevent its being loaded.
+     * N.B. the LIST command does not generally return very precise timestamps.
+     * For recent files, the response usually contains hours and minutes (not seconds).
+     * For older files, the output may only contain a date.
+     * If the server supports it, the MLSD command returns timestamps with a precision
+     * of seconds, and may include milliseconds. See {@link #mlistDir()}
+     *
+     * @return The list of file information contained in the current directory
+     *         in the format determined by the autodetection mechanism.
+     *         <p><b>
+     *         NOTE:</b> This array may contain null members if any of the
+     *         individual file listings failed to parse.  The caller should
+     *         check each entry for null before referencing it.
+     * @throws FTPConnectionClosedException
+     *                   If the FTP server prematurely closes the connection
+     *                   as a result of the client being idle or some other
+     *                   reason causing the server to send FTP reply code 421.
+     *                   This exception may be caught either as an IOException
+     *                   or independently as itself.
+     * @throws IOException
+     *                   If an I/O error occurs while either sending a
+     *                   command to the server or receiving a reply
+     *                   from the server.
+     * @throws org.apache.commons.net.ftp.parser.ParserInitializationException
+     *                   Thrown if the parserKey parameter cannot be
+     *                   resolved by the selected parser factory.
+     *                   In the DefaultFTPEntryParserFactory, this will
+     *                   happen when parserKey is neither
+     *                   the fully qualified class name of a class
+     *                   implementing the interface
+     *                   org.apache.commons.net.ftp.FTPFileEntryParser
+     *                   nor a string containing one of the recognized keys
+     *                   mapping to such a parser or if class loader
+     *                   security issues prevent its being loaded.
@@ -2235 +2656,3 @@ public class FTPClient extends FTP implements Configurable {
-    public FTPFile[] listFiles() throws IOException {
+    public FTPFile[] listFiles()
+    throws IOException
+    {
@@ -2240 +2663,3 @@ public class FTPClient extends FTP implements Configurable {
-     * Using the default system autodetect mechanism, obtain a list of file information for the current working directory or for just a single file.
+     * Using the default system autodetect mechanism, obtain a
+     * list of file information for the current working directory
+     * or for just a single file.
@@ -2242 +2667,3 @@ public class FTPClient extends FTP implements Configurable {
-     * This information is obtained through the LIST command. The contents of the returned array is determined by the<code> FTPFileEntryParser </code> used.
+     * This information is obtained through the LIST command.  The contents of
+     * the returned array is determined by the<code> FTPFileEntryParser </code>
+     * used.
@@ -2244,21 +2671,39 @@ public class FTPClient extends FTP implements Configurable {
-     * N.B. the LIST command does not generally return very precise timestamps. For recent files, the response usually contains hours and minutes (not seconds).
-     * For older files, the output may only contain a date. If the server supports it, the MLSD command returns timestamps with a precision of seconds, and may
-     * include milliseconds. See {@link #mlistDir()}
-     *
-     * @param pathname The file or directory to list. Since the server may or may not expand glob expressions, using them here is not recommended and may well
-     *                 cause this method to fail. Also, some servers treat a leading '-' as being an option. To avoid this interpretation, use an absolute
-     *                 pathname or prefix the pathname with ./ (unix style servers). Some servers may support "--" as meaning end of options, in which case "--
-     *                 -xyz" should work.
-     *
-     * @return The list of file information contained in the given path in the format determined by the autodetection mechanism
-     * @throws FTPConnectionClosedException                                    If the FTP server prematurely closes the connection as a result of the client
-     *                                                                         being idle or some other reason causing the server to send FTP reply code 421.
-     *                                                                         This exception may be caught either as an IOException or independently as itself.
-     * @throws IOException                                                     If an I/O error occurs while either sending a command to the server or receiving
-     *                                                                         a reply from the server.
-     * @throws org.apache.commons.net.ftp.parser.ParserInitializationException Thrown if the parserKey parameter cannot be resolved by the selected parser
-     *                                                                         factory. In the DefaultFTPEntryParserFactory, this will happen when parserKey is
-     *                                                                         neither the fully qualified class name of a class implementing the interface
-     *                                                                         org.apache.commons.net.ftp.FTPFileEntryParser nor a string containing one of the
-     *                                                                         recognized keys mapping to such a parser or if class loader security issues
-     *                                                                         prevent its being loaded.
+     * N.B. the LIST command does not generally return very precise timestamps.
+     * For recent files, the response usually contains hours and minutes (not seconds).
+     * For older files, the output may only contain a date.
+     * If the server supports it, the MLSD command returns timestamps with a precision
+     * of seconds, and may include milliseconds. See {@link #mlistDir()}
+     *
+     * @param pathname  The file or directory to list.  Since the server may
+     *                  or may not expand glob expressions, using them here
+     *                  is not recommended and may well cause this method to
+     *                  fail.
+     *                  Also, some servers treat a leading '-' as being an option.
+     *                  To avoid this interpretation, use an absolute pathname
+     *                  or prefix the pathname with ./ (unix style servers).
+     *                  Some servers may support "--" as meaning end of options,
+     *                  in which case "-- -xyz" should work.
+     *
+     * @return The list of file information contained in the given path in
+     *         the format determined by the autodetection mechanism
+     * @throws FTPConnectionClosedException
+     *                   If the FTP server prematurely closes the connection
+     *                   as a result of the client being idle or some other
+     *                   reason causing the server to send FTP reply code 421.
+     *                   This exception may be caught either as an IOException
+     *                   or independently as itself.
+     * @throws IOException
+     *                   If an I/O error occurs while either sending a
+     *                   command to the server or receiving a reply
+     *                   from the server.
+     * @throws org.apache.commons.net.ftp.parser.ParserInitializationException
+     *                   Thrown if the parserKey parameter cannot be
+     *                   resolved by the selected parser factory.
+     *                   In the DefaultFTPEntryParserFactory, this will
+     *                   happen when parserKey is neither
+     *                   the fully qualified class name of a class
+     *                   implementing the interface
+     *                   org.apache.commons.net.ftp.FTPFileEntryParser
+     *                   nor a string containing one of the recognized keys
+     *                   mapping to such a parser or if class loader
+     *                   security issues prevent its being loaded.
@@ -2274,2 +2719,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Version of {@link #listFiles(String)} which allows a filter to be provided. For example: <code>listFiles("site", FTPFileFilters.DIRECTORY);</code>
-     *
+     * Version of {@link #listFiles(String)} which allows a filter to be provided.
+     * For example: <code>listFiles("site", FTPFileFilters.DIRECTORY);</code>
@@ -2277 +2722 @@ public class FTPClient extends FTP implements Configurable {
-     * @param filter   the filter, non-null
+     * @param filter the filter, non-null
@@ -2287 +2732,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Fetches the system help information from the server and returns the full string.
+     * Fetches the system help information from the server and returns the
+     * full string.
@@ -2289,5 +2735,9 @@ public class FTPClient extends FTP implements Configurable {
-     * @return The system help string obtained from the server. null if the information could not be obtained.
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @return The system help string obtained from the server.  null if the
+     *       information could not be obtained.
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *  command to the server or receiving a reply from the server.
@@ -2300,2 +2750,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Fetches the help information for a given command from the server and returns the full string.
-     *
+     * Fetches the help information for a given command from the server and
+     * returns the full string.
@@ -2303,5 +2753,9 @@ public class FTPClient extends FTP implements Configurable {
-     * @return The command help string obtained from the server. null if the information could not be obtained.
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @return The command help string obtained from the server.  null if the
+     *       information could not be obtained.
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *  command to the server or receiving a reply from the server.
@@ -2314,12 +2768,22 @@ public class FTPClient extends FTP implements Configurable {
-     * Obtain a list of file names in the current working directory This information is obtained through the NLST command. If the current directory contains no
-     * files, a zero length array is returned only if the FTP server returned a positive completion code, otherwise, null is returned (the FTP server returned a
-     * 550 error No files found.). If the directory is not empty, an array of file names in the directory is returned.
-     *
-     * @return The list of file names contained in the current working directory. null if the list could not be obtained. If there are no file names in the
-     *         directory, a zero-length array is returned.
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public String[] listNames() throws IOException {
+     * Obtain a list of file names in the current working directory
+     * This information is obtained through the NLST command.  If the current
+     * directory contains no files, a zero length array is returned only
+     * if the FTP server returned a positive completion code, otherwise,
+     * null is returned (the FTP server returned a 550 error No files found.).
+     * If the directory is not empty, an array of file names in the directory is
+     * returned.
+     *
+     * @return The list of file names contained in the current working
+     *     directory.  null if the list could not be obtained.
+     *     If there are no file names in the directory, a zero-length array
+     *     is returned.
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public String[] listNames() throws IOException
+    {
@@ -2330,16 +2794,30 @@ public class FTPClient extends FTP implements Configurable {
-     * Obtain a list of file names in a directory (or just the name of a given file, which is not particularly useful). This information is obtained through the
-     * NLST command. If the given pathname is a directory and contains no files, a zero length array is returned only if the FTP server returned a positive
-     * completion code, otherwise null is returned (the FTP server returned a 550 error No files found.). If the directory is not empty, an array of file names
-     * in the directory is returned. If the pathname corresponds to a file, only that file will be listed. The server may or may not expand glob expressions.
-     *
-     * @param pathname The file or directory to list. Warning: the server may treat a leading '-' as an option introducer. If so, try using an absolute path, or
-     *                 prefix the path with ./ (unix style servers). Some servers may support "--" as meaning end of options, in which case "-- -xyz" should
-     *                 work.
-     * @return The list of file names contained in the given path. null if the list could not be obtained. If there are no file names in the directory, a
-     *         zero-length array is returned.
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public String[] listNames(final String pathname) throws IOException {
+     * Obtain a list of file names in a directory (or just the name of a given
+     * file, which is not particularly useful).  This information is obtained
+     * through the NLST command.  If the given pathname is a directory and
+     * contains no files,  a zero length array is returned only
+     * if the FTP server returned a positive completion code, otherwise
+     * null is returned (the FTP server returned a 550 error No files found.).
+     * If the directory is not empty, an array of file names in the directory is
+     * returned. If the pathname corresponds
+     * to a file, only that file will be listed.  The server may or may not
+     * expand glob expressions.
+     *
+     * @param pathname  The file or directory to list.
+     *                  Warning: the server may treat a leading '-' as an
+     *                  option introducer. If so, try using an absolute path,
+     *                  or prefix the path with ./ (unix style servers).
+     *                  Some servers may support "--" as meaning end of options,
+     *                  in which case "-- -xyz" should work.
+     * @return The list of file names contained in the given path.  null if
+     *     the list could not be obtained.  If there are no file names in
+     *     the directory, a zero-length array is returned.
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public String[] listNames(final String pathname) throws IOException
+    {
@@ -2353 +2831,2 @@ public class FTPClient extends FTP implements Configurable {
-            try (final BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), getControlEncoding()))) {
+            try (final BufferedReader reader = new BufferedReader(
+                    new InputStreamReader(socket.getInputStream(), getControlEncoding()))) {
@@ -2375,4 +2854,7 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -2380 +2862,2 @@ public class FTPClient extends FTP implements Configurable {
-    public boolean login(final String username, final String password) throws IOException {
+    public boolean login(final String username, final String password) throws IOException
+    {
@@ -2398,2 +2881,3 @@ public class FTPClient extends FTP implements Configurable {
-     * Login to the FTP server using the provided username, password, and account. If no account is required by the server, only the username and password, the
-     * account information is not used.
+     * Login to the FTP server using the provided username, password,
+     * and account.  If no account is required by the server, only
+     * the username and password, the account information is not used.
@@ -2405,6 +2889,11 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean login(final String username, final String password, final String account) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean login(final String username, final String password, final String account)
+    throws IOException
+    {
@@ -2440,6 +2929,10 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean logout() throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean logout() throws IOException
+    {
@@ -2450,2 +2943,3 @@ public class FTPClient extends FTP implements Configurable {
-     * Creates a new subdirectory on the FTP server in the current directory (if a relative pathname is given) or where specified (if an absolute pathname is
-     * given).
+     * Creates a new subdirectory on the FTP server in the current directory
+     * (if a relative pathname is given) or where specified (if an absolute
+     * pathname is given).
@@ -2455,6 +2949,10 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean makeDirectory(final String pathname) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean makeDirectory(final String pathname) throws IOException
+    {
@@ -2465,2 +2963,4 @@ public class FTPClient extends FTP implements Configurable {
-     * Issue the FTP MDTM command (not supported by all servers) to retrieve the last modification time of a file. The modification string should be in the ISO
-     * 3077 form "yyyyMMDDhhmmss(.xxx)?". The timestamp represented should also be in GMT, but not all FTP servers honor this.
+     * Issue the FTP MDTM command (not supported by all servers) to retrieve the last
+     * modification time of a file. The modification string should be in the
+     * ISO 3077 form "yyyyMMDDhhmmss(.xxx)?". The timestamp represented should also be in
+     * GMT, but not all FTP servers honor this.
@@ -2469 +2969,2 @@ public class FTPClient extends FTP implements Configurable {
-     * @return A Calendar representing the last file modification time, may be {@code null}. The Calendar timestamp will be null if a parse error occurs.
+     * @return A Calendar representing the last file modification time, may be {@code null}.
+     * The Calendar timestamp will be null if a parse error occurs.
@@ -2482,2 +2983,4 @@ public class FTPClient extends FTP implements Configurable {
-     * Issue the FTP MDTM command (not supported by all servers) to retrieve the last modification time of a file. The modification string should be in the ISO
-     * 3077 form "yyyyMMDDhhmmss(.xxx)?". The timestamp represented should also be in GMT, but not all FTP servers honor this.
+     * Issue the FTP MDTM command (not supported by all servers) to retrieve the last
+     * modification time of a file. The modification string should be in the
+     * ISO 3077 form "yyyyMMDDhhmmss(.xxx)?". The timestamp represented should also be in
+     * GMT, but not all FTP servers honor this.
@@ -2486 +2989,2 @@ public class FTPClient extends FTP implements Configurable {
-     * @return A FTPFile representing the last file modification time, may be {@code null}. The FTPFile timestamp will be null if a parse error occurs.
+     * @return A FTPFile representing the last file modification time, may be {@code null}.
+     * The FTPFile timestamp will be null if a parse error occurs.
@@ -2503,2 +3007,4 @@ public class FTPClient extends FTP implements Configurable {
-     * Issue the FTP MDTM command (not supported by all servers) to retrieve the last modification time of a file. The modification string should be in the ISO
-     * 3077 form "yyyyMMDDhhmmss(.xxx)?". The timestamp represented should also be in GMT, but not all FTP servers honor this.
+     * Issue the FTP MDTM command (not supported by all servers) to retrieve the last
+     * modification time of a file. The modification string should be in the
+     * ISO 3077 form "yyyyMMDDhhmmss(.xxx)?". The timestamp represented should also be in
+     * GMT, but not all FTP servers honor this.
@@ -2507 +3013,2 @@ public class FTPClient extends FTP implements Configurable {
-     * @return An Instant representing the last file modification time, may be {@code null}. The Instant timestamp will be null if a parse error occurs.
+     * @return An Instant representing the last file modification time, may be {@code null}.
+     * The Instant timestamp will be null if a parse error occurs.
@@ -2547 +3054,2 @@ public class FTPClient extends FTP implements Configurable {
-    public FTPFile[] mlistDir() throws IOException {
+    public FTPFile[] mlistDir() throws IOException
+    {
@@ -2567 +3075 @@ public class FTPClient extends FTP implements Configurable {
-     * @param filter   the filter to apply to the responses
+     * @param filter the filter to apply to the responses
@@ -2584 +3092,2 @@ public class FTPClient extends FTP implements Configurable {
-    public FTPFile mlistFile(final String pathname) throws IOException {
+    public FTPFile mlistFile(final String pathname) throws IOException
+    {
@@ -2586 +3095 @@ public class FTPClient extends FTP implements Configurable {
-        if (success) {
+        if (success){
@@ -2589,6 +3098,4 @@ public class FTPClient extends FTP implements Configurable {
-            if (reply.charAt(0) != ' ') {
-                reply = " " + reply;
-            }
-            /*
-             * check the response makes sense. Must have space before fact(s) and between fact(s) and file name Fact(s) can be absent, so at least 3 chars are
-             * needed.
+            if(reply.charAt(0) != ' ') { reply = " " + reply; }
+            /* check the response makes sense.
+             * Must have space before fact(s) and between fact(s) and file name
+             * Fact(s) can be absent, so at least 3 chars are needed.
@@ -2609,7 +3116,12 @@ public class FTPClient extends FTP implements Configurable {
-     * @return The pathname of the current working directory. If it cannot be obtained, returns null.
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public String printWorkingDirectory() throws IOException {
+     * @return The pathname of the current working directory.  If it cannot
+     *         be obtained, returns null.
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public String printWorkingDirectory() throws IOException
+    {
@@ -2620 +3132 @@ public class FTPClient extends FTP implements Configurable {
-        return parsePathname(_replyLines.get(_replyLines.size() - 1));
+        return parsePathname(_replyLines.get( _replyLines.size() - 1));
@@ -2624 +3136,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Reinitialize the FTP session. Not all FTP servers support this command, which issues the FTP REIN command.
+     * Reinitialize the FTP session.  Not all FTP servers support this
+     * command, which issues the FTP REIN command.
@@ -2627,4 +3140,7 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -2633 +3149,2 @@ public class FTPClient extends FTP implements Configurable {
-    public boolean reinitialize() throws IOException {
+    public boolean reinitialize() throws IOException
+    {
@@ -2636 +3153,4 @@ public class FTPClient extends FTP implements Configurable {
-        if (FTPReply.isPositiveCompletion(_replyCode) || (FTPReply.isPositivePreliminary(_replyCode) && FTPReply.isPositiveCompletion(getReply()))) {
+        if (FTPReply.isPositiveCompletion(_replyCode) ||
+                (FTPReply.isPositivePreliminary(_replyCode) &&
+                        FTPReply.isPositiveCompletion(getReply())))
+        {
@@ -2648,2 +3168,4 @@ public class FTPClient extends FTP implements Configurable {
-     * Initiate a server to server file transfer. This method tells the server to which the client is connected to append to a given file on the other server.
-     * The other server must have had a <code> remoteRetrieve </code> issued to it by another FTPClient.
+     * Initiate a server to server file transfer.  This method tells the
+     * server to which the client is connected to append to a given file on
+     * the other server.  The other server must have had a
+     * <code> remoteRetrieve </code> issued to it by another FTPClient.
@@ -2651 +3173,2 @@ public class FTPClient extends FTP implements Configurable {
-     * @param fileName The name of the file to be appended to, or if the file does not exist, the name to call the file being stored.
+     * @param fileName  The name of the file to be appended to, or if the
+     *        file does not exist, the name to call the file being stored.
@@ -2654,7 +3177,12 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean remoteAppend(final String fileName) throws IOException {
-        if (dataConnectionMode == ACTIVE_REMOTE_DATA_CONNECTION_MODE || dataConnectionMode == PASSIVE_REMOTE_DATA_CONNECTION_MODE) {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean remoteAppend(final String fileName) throws IOException
+    {
+        if (dataConnectionMode == ACTIVE_REMOTE_DATA_CONNECTION_MODE ||
+                dataConnectionMode == PASSIVE_REMOTE_DATA_CONNECTION_MODE) {
@@ -2667 +3195,3 @@ public class FTPClient extends FTP implements Configurable {
-     * Initiate a server to server file transfer. This method tells the server to which the client is connected to retrieve a given file from the other server.
+     * Initiate a server to server file transfer.  This method tells the
+     * server to which the client is connected to retrieve a given file from
+     * the other server.
@@ -2669 +3199 @@ public class FTPClient extends FTP implements Configurable {
-     * @param fileName The name of the file to retrieve.
+     * @param fileName  The name of the file to retrieve.
@@ -2671,7 +3201,12 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean remoteRetrieve(final String fileName) throws IOException {
-        if (dataConnectionMode == ACTIVE_REMOTE_DATA_CONNECTION_MODE || dataConnectionMode == PASSIVE_REMOTE_DATA_CONNECTION_MODE) {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean remoteRetrieve(final String fileName) throws IOException
+    {
+        if (dataConnectionMode == ACTIVE_REMOTE_DATA_CONNECTION_MODE ||
+                dataConnectionMode == PASSIVE_REMOTE_DATA_CONNECTION_MODE) {
@@ -2684,2 +3219,5 @@ public class FTPClient extends FTP implements Configurable {
-     * Initiate a server to server file transfer. This method tells the server to which the client is connected to store a file on the other server using the
-     * given file name. The other server must have had a <code> remoteRetrieve </code> issued to it by another FTPClient.
+     * Initiate a server to server file transfer.  This method tells the
+     * server to which the client is connected to store a file on
+     * the other server using the given file name.  The other server must
+     * have had a <code> remoteRetrieve </code> issued to it by another
+     * FTPClient.
@@ -2687 +3225 @@ public class FTPClient extends FTP implements Configurable {
-     * @param fileName The name to call the file that is to be stored.
+     * @param fileName  The name to call the file that is to be stored.
@@ -2689,7 +3227,12 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean remoteStore(final String fileName) throws IOException {
-        if (dataConnectionMode == ACTIVE_REMOTE_DATA_CONNECTION_MODE || dataConnectionMode == PASSIVE_REMOTE_DATA_CONNECTION_MODE) {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean remoteStore(final String fileName) throws IOException
+    {
+        if (dataConnectionMode == ACTIVE_REMOTE_DATA_CONNECTION_MODE ||
+                dataConnectionMode == PASSIVE_REMOTE_DATA_CONNECTION_MODE) {
@@ -2702,3 +3245,7 @@ public class FTPClient extends FTP implements Configurable {
-     * Initiate a server to server file transfer. This method tells the server to which the client is connected to store a file on the other server using a
-     * unique file name. The other server must have had a <code> remoteRetrieve </code> issued to it by another FTPClient. Many FTP servers require that a base
-     * file name be given from which the unique file name can be derived. For those servers use the other version of <code> remoteStoreUnique</code>
+     * Initiate a server to server file transfer.  This method tells the
+     * server to which the client is connected to store a file on
+     * the other server using a unique file name.
+     * The other server must have had a <code> remoteRetrieve </code> issued
+     * to it by another FTPClient.  Many FTP servers require that a base
+     * file name be given from which the unique file name can be derived.  For
+     * those servers use the other version of <code> remoteStoreUnique</code>
@@ -2707,7 +3254,12 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean remoteStoreUnique() throws IOException {
-        if (dataConnectionMode == ACTIVE_REMOTE_DATA_CONNECTION_MODE || dataConnectionMode == PASSIVE_REMOTE_DATA_CONNECTION_MODE) {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean remoteStoreUnique() throws IOException
+    {
+        if (dataConnectionMode == ACTIVE_REMOTE_DATA_CONNECTION_MODE ||
+                dataConnectionMode == PASSIVE_REMOTE_DATA_CONNECTION_MODE) {
@@ -2720,2 +3272,5 @@ public class FTPClient extends FTP implements Configurable {
-     * Initiate a server to server file transfer. This method tells the server to which the client is connected to store a file on the other server using a
-     * unique file name based on the given file name. The other server must have had a <code> remoteRetrieve </code> issued to it by another FTPClient.
+     * Initiate a server to server file transfer.  This method tells the
+     * server to which the client is connected to store a file on
+     * the other server using a unique file name based on the given file name.
+     * The other server must have had a <code> remoteRetrieve </code> issued
+     * to it by another FTPClient.
@@ -2723 +3278,2 @@ public class FTPClient extends FTP implements Configurable {
-     * @param fileName The name on which to base the file name of the file that is to be stored.
+     * @param fileName  The name on which to base the file name of the file
+     *                  that is to be stored.
@@ -2725,7 +3281,12 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean remoteStoreUnique(final String fileName) throws IOException {
-        if (dataConnectionMode == ACTIVE_REMOTE_DATA_CONNECTION_MODE || dataConnectionMode == PASSIVE_REMOTE_DATA_CONNECTION_MODE) {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean remoteStoreUnique(final String fileName) throws IOException
+    {
+        if (dataConnectionMode == ACTIVE_REMOTE_DATA_CONNECTION_MODE ||
+                dataConnectionMode == PASSIVE_REMOTE_DATA_CONNECTION_MODE) {
@@ -2740 +3301 @@ public class FTPClient extends FTP implements Configurable {
-     * @param pathname The pathname of the directory to remove.
+     * @param pathname  The pathname of the directory to remove.
@@ -2742,6 +3303,10 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean removeDirectory(final String pathname) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean removeDirectory(final String pathname) throws IOException
+    {
@@ -2754,2 +3319,2 @@ public class FTPClient extends FTP implements Configurable {
-     * @param from The name of the remote file to rename.
-     * @param to   The new name of the remote file.
+     * @param from  The name of the remote file to rename.
+     * @param to    The new name of the remote file.
@@ -2757,6 +3322,10 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean rename(final String from, final String to) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean rename(final String from, final String to) throws IOException
+    {
@@ -2771,3 +3340,5 @@ public class FTPClient extends FTP implements Configurable {
-     * Restart a <code>STREAM_TRANSFER_MODE</code> file transfer starting from the given offset. This will only work on FTP servers supporting the REST comand
-     * for the stream transfer mode. However, most FTP servers support this. Any subsequent file transfer will start reading or writing the remote file from the
-     * indicated offset.
+     * Restart a <code>STREAM_TRANSFER_MODE</code> file transfer starting
+     * from the given offset.  This will only work on FTP servers supporting
+     * the REST comand for the stream transfer mode.  However, most FTP
+     * servers support this.  Any subsequent file transfer will start
+     * reading or writing the remote file from the indicated offset.
@@ -2775 +3346,2 @@ public class FTPClient extends FTP implements Configurable {
-     * @param offset The offset into the remote file at which to start the next file transfer.
+     * @param offset  The offset into the remote file at which to start the
+     *           next file transfer.
@@ -2777,4 +3349,7 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -2783 +3358,2 @@ public class FTPClient extends FTP implements Configurable {
-    protected boolean restart(final long offset) throws IOException {
+    protected boolean restart(final long offset) throws IOException
+    {
@@ -2789,2 +3365,4 @@ public class FTPClient extends FTP implements Configurable {
-     * Retrieves a named file from the server and writes it to the given OutputStream. This method does NOT close the given OutputStream. If the current file
-     * type is ASCII, line separators in the file are converted to the local representation.
+     * Retrieves a named file from the server and writes it to the given
+     * OutputStream.  This method does NOT close the given OutputStream.
+     * If the current file type is ASCII, line separators in the file are
+     * converted to the local representation.
@@ -2792,4 +3370,4 @@ public class FTPClient extends FTP implements Configurable {
-     * Note: if you have used {@link #setRestartOffset(long)}, the file data will start from the selected offset.
-     *
-     * @param remote The name of the remote file.
-     * @param local  The local OutputStream to which to write the file.
+     * Note: if you have used {@link #setRestartOffset(long)},
+     * the file data will start from the selected offset.
+     * @param remote  The name of the remote file.
+     * @param local   The local OutputStream to which to write the file.
@@ -2797,10 +3375,17 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException                  If the FTP server prematurely closes the connection as a result of the client being idle or some
-     *                                                       other reason causing the server to send FTP reply code 421. This exception may be caught either as
-     *                                                       an IOException or independently as itself.
-     * @throws org.apache.commons.net.io.CopyStreamException If an I/O error occurs while actually transferring the file. The CopyStreamException allows you to
-     *                                                       determine the number of bytes transferred and the IOException causing the error. This exception may
-     *                                                       be caught either as an IOException or independently as itself.
-     * @throws IOException                                   If an I/O error occurs while either sending a command to the server or receiving a reply from the
-     *                                                       server.
-     */
-    public boolean retrieveFile(final String remote, final OutputStream local) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws org.apache.commons.net.io.CopyStreamException
+     *      If an I/O error occurs while actually
+     *      transferring the file.  The CopyStreamException allows you to
+     *      determine the number of bytes transferred and the IOException
+     *      causing the error.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean retrieveFile(final String remote, final OutputStream local)
+    throws IOException
+    {
@@ -2809,0 +3395 @@ public class FTPClient extends FTP implements Configurable {
+
@@ -2811,3 +3397,6 @@ public class FTPClient extends FTP implements Configurable {
-     * Returns an InputStream from which a named file from the server can be read. If the current file type is ASCII, the returned InputStream will convert line
-     * separators in the file to the local representation. You must close the InputStream when you finish reading from it. The InputStream itself will take care
-     * of closing the parent data connection socket upon being closed.
+     * Returns an InputStream from which a named file from the server
+     * can be read.  If the current file type is ASCII, the returned
+     * InputStream will convert line separators in the file to
+     * the local representation.  You must close the InputStream when you
+     * finish reading from it.  The InputStream itself will take care of
+     * closing the parent data connection socket upon being closed.
@@ -2815 +3404,3 @@ public class FTPClient extends FTP implements Configurable {
-     * <b>To finalize the file transfer you must call {@link #completePendingCommand completePendingCommand } and check its return value to verify success.</b>
+     * <b>To finalize the file transfer you must call
+     * {@link #completePendingCommand  completePendingCommand } and
+     * check its return value to verify success.</b>
@@ -2818,11 +3409,18 @@ public class FTPClient extends FTP implements Configurable {
-     * Note: if you have used {@link #setRestartOffset(long)}, the file data will start from the selected offset.
-     *
-     * @param remote The name of the remote file.
-     * @return An InputStream from which the remote file can be read. If the data connection cannot be opened (e.g., the file does not exist), null is returned
-     *         (in which case you may check the reply code to determine the exact reason for failure).
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public InputStream retrieveFileStream(final String remote) throws IOException {
+     * Note: if you have used {@link #setRestartOffset(long)},
+     * the file data will start from the selected offset.
+     *
+     * @param remote  The name of the remote file.
+     * @return An InputStream from which the remote file can be read.  If
+     *      the data connection cannot be opened (e.g., the file does not
+     *      exist), null is returned (in which case you may check the reply
+     *      code to determine the exact reason for failure).
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public InputStream retrieveFileStream(final String remote) throws IOException
+    {
@@ -2833 +3431,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Sends a NOOP command to the FTP server. This is useful for preventing server timeouts.
+     * Sends a NOOP command to the FTP server.  This is useful for preventing
+     * server timeouts.
@@ -2836,6 +3435,10 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean sendNoOp() throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean sendNoOp() throws IOException
+    {
@@ -2847 +3449,0 @@ public class FTPClient extends FTP implements Configurable {
-     *
@@ -2850,6 +3452,10 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean sendSiteCommand(final String arguments) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean sendSiteCommand(final String arguments) throws IOException
+    {
@@ -2860 +3466,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Set the external IP address in active mode. Useful when there are multiple network cards.
+     * Set the external IP address in active mode.
+     * Useful when there are multiple network cards.
@@ -2866 +3473,2 @@ public class FTPClient extends FTP implements Configurable {
-    public void setActiveExternalIPAddress(final String ipAddress) throws UnknownHostException {
+    public void setActiveExternalIPAddress(final String ipAddress) throws UnknownHostException
+    {
@@ -2877 +3485,2 @@ public class FTPClient extends FTP implements Configurable {
-    public void setActivePortRange(final int minPort, final int maxPort) {
+    public void setActivePortRange(final int minPort, final int maxPort)
+    {
@@ -2889 +3498,2 @@ public class FTPClient extends FTP implements Configurable {
-    public void setAutodetectUTF8(final boolean autodetect) {
+    public void setAutodetectUTF8(final boolean autodetect)
+    {
@@ -2927 +3537,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Sets the time to wait between sending control connection keepalive messages when processing file upload or download.
+     * Sets the time to wait between sending control connection keepalive messages
+     * when processing file upload or download.
@@ -2936 +3547 @@ public class FTPClient extends FTP implements Configurable {
-    public void setControlKeepAliveTimeout(final Duration controlIdle) {
+    public void setControlKeepAliveTimeout(final Duration controlIdle){
@@ -2941 +3552,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Sets the time to wait between sending control connection keepalive messages when processing file upload or download.
+     * Sets the time to wait between sending control connection keepalive messages
+     * when processing file upload or download.
@@ -2952 +3564 @@ public class FTPClient extends FTP implements Configurable {
-    public void setControlKeepAliveTimeout(final long controlIdleSeconds) {
+    public void setControlKeepAliveTimeout(final long controlIdleSeconds){
@@ -2957 +3569,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Set the listener to be used when performing store/retrieve operations. The default value (if not set) is {@code null}.
+     * Set the listener to be used when performing store/retrieve operations.
+     * The default value (if not set) is {@code null}.
@@ -2962 +3575 @@ public class FTPClient extends FTP implements Configurable {
-    public void setCopyStreamListener(final CopyStreamListener listener) {
+    public void setCopyStreamListener(final CopyStreamListener listener){
@@ -2967,2 +3580,3 @@ public class FTPClient extends FTP implements Configurable {
-     * Sets the timeout to use when reading from the data connection. This timeout will be set immediately after opening the data connection, provided that the
-     * value is &ge; 0.
+     * Sets the timeout to use when reading from the
+     * data connection.  This timeout will be set immediately after
+     * opening the data connection, provided that the value is &ge; 0.
@@ -2970,3 +3584,4 @@ public class FTPClient extends FTP implements Configurable {
-     * <b>Note:</b> the timeout will also be applied when calling accept() whilst establishing an active local data connection.
-     *
-     * @param timeout The default timeout that is used when opening a data connection socket. The value 0 (or null) means an infinite timeout.
+     * <b>Note:</b> the timeout will also be applied when calling accept()
+     * whilst establishing an active local data connection.
+     * @param  timeout The default timeout that is used when
+     *        opening a data connection socket. The value 0 (or null) means an infinite timeout.
@@ -2975 +3590,2 @@ public class FTPClient extends FTP implements Configurable {
-    public void setDataTimeout(final Duration timeout) {
+    public void setDataTimeout(final Duration timeout)
+    {
@@ -2980,2 +3596,3 @@ public class FTPClient extends FTP implements Configurable {
-     * Sets the timeout in milliseconds to use when reading from the data connection. This timeout will be set immediately after opening the data connection,
-     * provided that the value is &ge; 0.
+     * Sets the timeout in milliseconds to use when reading from the
+     * data connection.  This timeout will be set immediately after
+     * opening the data connection, provided that the value is &ge; 0.
@@ -2983 +3600,2 @@ public class FTPClient extends FTP implements Configurable {
-     * <b>Note:</b> the timeout will also be applied when calling accept() whilst establishing an active local data connection.
+     * <b>Note:</b> the timeout will also be applied when calling accept()
+     * whilst establishing an active local data connection.
@@ -2987 +3605,2 @@ public class FTPClient extends FTP implements Configurable {
-     * @param timeoutMillis The default timeout in milliseconds that is used when opening a data connection socket. The value 0 means an infinite timeout.
+     * @param  timeoutMillis The default timeout in milliseconds that is used when
+     *        opening a data connection socket. The value 0 means an infinite timeout.
@@ -2990 +3609,2 @@ public class FTPClient extends FTP implements Configurable {
-    public void setDataTimeout(final int timeoutMillis) {
+    public void setDataTimeout(final int timeoutMillis)
+    {
@@ -2995 +3615,3 @@ public class FTPClient extends FTP implements Configurable {
-     * Sets the file structure. The default structure is <code> FTP.FILE_STRUCTURE </code> if this method is never called or if a connect method is called.
+     * Sets the file structure.  The default structure is
+     * <code> FTP.FILE_STRUCTURE </code> if this method is never called
+     * or if a connect method is called.
@@ -2997 +3619,2 @@ public class FTPClient extends FTP implements Configurable {
-     * @param structure The structure of the file (one of the FTP class <code>_STRUCTURE</code> constants).
+     * @param structure  The structure of the file (one of the FTP class
+     *         <code>_STRUCTURE</code> constants).
@@ -2999,7 +3622,12 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean setFileStructure(final int structure) throws IOException {
-        if (FTPReply.isPositiveCompletion(stru(structure))) {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean setFileStructure(final int structure) throws IOException
+    {
+        if (FTPReply.isPositiveCompletion(stru(structure)))
+        {
@@ -3013,2 +3641,3 @@ public class FTPClient extends FTP implements Configurable {
-     * Sets the transfer mode. The default transfer mode <code> FTP.STREAM_TRANSFER_MODE </code> if this method is never called or if a connect method is
-     * called.
+     * Sets the transfer mode.  The default transfer mode
+     * <code> FTP.STREAM_TRANSFER_MODE </code> if this method is never called
+     * or if a connect method is called.
@@ -3016 +3645,2 @@ public class FTPClient extends FTP implements Configurable {
-     * @param mode The new transfer mode to use (one of the FTP class <code>_TRANSFER_MODE</code> constants).
+     * @param mode  The new transfer mode to use (one of the FTP class
+     *         <code>_TRANSFER_MODE</code> constants).
@@ -3018,7 +3648,12 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean setFileTransferMode(final int mode) throws IOException {
-        if (FTPReply.isPositiveCompletion(mode(mode))) {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean setFileTransferMode(final int mode) throws IOException
+    {
+        if (FTPReply.isPositiveCompletion(mode(mode)))
+        {
@@ -3032,5 +3667,11 @@ public class FTPClient extends FTP implements Configurable {
-     * Sets the file type to be transferred. This should be one of <code> FTP.ASCII_FILE_TYPE </code>, <code> FTP.BINARY_FILE_TYPE</code>, etc. The file type
-     * only needs to be set when you want to change the type. After changing it, the new type stays in effect until you change it again. The default file type
-     * is <code> FTP.ASCII_FILE_TYPE </code> if this method is never called. <br>
-     * The server default is supposed to be ASCII (see RFC 959), however many ftp servers default to BINARY. <b>To ensure correct operation with all servers,
-     * always specify the appropriate file type after connecting to the server.</b> <br>
+     * Sets the file type to be transferred.  This should be one of
+     * <code> FTP.ASCII_FILE_TYPE </code>, <code> FTP.BINARY_FILE_TYPE</code>,
+     * etc.  The file type only needs to be set when you want to change the
+     * type.  After changing it, the new type stays in effect until you change
+     * it again.  The default file type is <code> FTP.ASCII_FILE_TYPE </code>
+     * if this method is never called.
+     * <br>
+     * The server default is supposed to be ASCII (see RFC 959), however many
+     * ftp servers default to BINARY. <b>To ensure correct operation with all servers,
+     * always specify the appropriate file type after connecting to the server.</b>
+     * <br>
@@ -3038,3 +3679,4 @@ public class FTPClient extends FTP implements Configurable {
-     * <b>N.B.</b> currently calling any connect method will reset the type to FTP.ASCII_FILE_TYPE.
-     *
-     * @param fileType The <code> _FILE_TYPE </code> constant indicating the type of file.
+     * <b>N.B.</b> currently calling any connect method will reset the type to
+     * FTP.ASCII_FILE_TYPE.
+     * @param fileType The <code> _FILE_TYPE </code> constant indicating the
+     *                 type of file.
@@ -3042,7 +3684,12 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean setFileType(final int fileType) throws IOException {
-        if (FTPReply.isPositiveCompletion(type(fileType))) {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean setFileType(final int fileType) throws IOException
+    {
+        if (FTPReply.isPositiveCompletion(type(fileType)))
+        {
@@ -3057,7 +3704,16 @@ public class FTPClient extends FTP implements Configurable {
-     * Sets the file type to be transferred and the format. The type should be one of <code> FTP.ASCII_FILE_TYPE </code>, <code> FTP.BINARY_FILE_TYPE </code>,
-     * etc. The file type only needs to be set when you want to change the type. After changing it, the new type stays in effect until you change it again. The
-     * default file type is <code> FTP.ASCII_FILE_TYPE </code> if this method is never called. <br>
-     * The server default is supposed to be ASCII (see RFC 959), however many ftp servers default to BINARY. <b>To ensure correct operation with all servers,
-     * always specify the appropriate file type after connecting to the server.</b> <br>
-     * The format should be one of the FTP class <code> TEXT_FORMAT </code> constants, or if the type is <code> FTP.LOCAL_FILE_TYPE </code>, the format should
-     * be the byte size for that type. The default format is <code> FTP.NON_PRINT_TEXT_FORMAT </code> if this method is never called.
+     * Sets the file type to be transferred and the format.  The type should be
+     * one of  <code> FTP.ASCII_FILE_TYPE </code>,
+     * <code> FTP.BINARY_FILE_TYPE </code>, etc.  The file type only needs to
+     * be set when you want to change the type.  After changing it, the new
+     * type stays in effect until you change it again.  The default file type
+     * is <code> FTP.ASCII_FILE_TYPE </code> if this method is never called.
+     * <br>
+     * The server default is supposed to be ASCII (see RFC 959), however many
+     * ftp servers default to BINARY. <b>To ensure correct operation with all servers,
+     * always specify the appropriate file type after connecting to the server.</b>
+     * <br>
+     * The format should be one of the FTP class <code> TEXT_FORMAT </code>
+     * constants, or if the type is <code> FTP.LOCAL_FILE_TYPE </code>, the
+     * format should be the byte size for that type.  The default format
+     * is <code> FTP.NON_PRINT_TEXT_FORMAT </code> if this method is never
+     * called.
@@ -3065 +3721,2 @@ public class FTPClient extends FTP implements Configurable {
-     * <b>N.B.</b> currently calling any connect method will reset the type to FTP.ASCII_FILE_TYPE and the formatOrByteSize to FTP.NON_PRINT_TEXT_FORMAT.
+     * <b>N.B.</b> currently calling any connect method will reset the type to
+     * FTP.ASCII_FILE_TYPE and the formatOrByteSize to FTP.NON_PRINT_TEXT_FORMAT.
@@ -3067,2 +3724,5 @@ public class FTPClient extends FTP implements Configurable {
-     * @param fileType         The <code> _FILE_TYPE </code> constant indicating the type of file.
-     * @param formatOrByteSize The format of the file (one of the <code>_FORMAT</code> constants. In the case of <code>LOCAL_FILE_TYPE</code>, the byte size.
+     * @param fileType The <code> _FILE_TYPE </code> constant indicating the
+     *                 type of file.
+     * @param formatOrByteSize  The format of the file (one of the
+     *              <code>_FORMAT</code> constants.  In the case of
+     *              <code>LOCAL_FILE_TYPE</code>, the byte size.
@@ -3071,7 +3731,13 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean setFileType(final int fileType, final int formatOrByteSize) throws IOException {
-        if (FTPReply.isPositiveCompletion(type(fileType, formatOrByteSize))) {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean setFileType(final int fileType, final int formatOrByteSize)
+    throws IOException
+    {
+        if (FTPReply.isPositiveCompletion(type(fileType, formatOrByteSize)))
+        {
@@ -3086,2 +3752,4 @@ public class FTPClient extends FTP implements Configurable {
-     * You can set this to true if you would like to get hidden files when {@link #listFiles} too. A <code>LIST -a</code> will be issued to the ftp server. It
-     * depends on your ftp server if you need to call this method, also dont expect to get rid of hidden files if you call this method with "false".
+     * You can set this to true if you would like to get hidden files when {@link #listFiles} too.
+     * A <code>LIST -a</code> will be issued to the ftp server.
+     * It depends on your ftp server if you need to call this method, also dont expect to get rid
+     * of hidden files if you call this method with "false".
@@ -3097 +3765,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Issue the FTP MFMT command (not supported by all servers) which sets the last modified time of a file.
+     * Issue the FTP MFMT command (not supported by all servers) which sets the last
+     * modified time of a file.
@@ -3099 +3768,2 @@ public class FTPClient extends FTP implements Configurable {
-     * The timestamp should be in the form <code>yyyyMMDDhhmmss</code>. It should also be in GMT, but not all servers honor this.
+     * The timestamp should be in the form <code>yyyyMMDDhhmmss</code>. It should also
+     * be in GMT, but not all servers honor this.
@@ -3101,2 +3771,2 @@ public class FTPClient extends FTP implements Configurable {
-     * An FTP server would indicate its support of this feature by including "MFMT" in its response to the FEAT command, which may be retrieved by
-     * FTPClient.features()
+     * An FTP server would indicate its support of this feature by including "MFMT"
+     * in its response to the FEAT command, which may be retrieved by FTPClient.features()
@@ -3105 +3775 @@ public class FTPClient extends FTP implements Configurable {
-     * @param timeval  The timestamp to set to, in <code>yyyyMMDDhhmmss</code> format.
+     * @param timeval The timestamp to set to, in <code>yyyyMMDDhhmmss</code> format.
@@ -3118 +3788,2 @@ public class FTPClient extends FTP implements Configurable {
-     * @param parserFactory factory object used to create FTPFileEntryParsers
+     * @param parserFactory
+     *               factory object used to create FTPFileEntryParsers
@@ -3128 +3799,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Set the local IP address to use in passive mode. Useful when there are multiple network cards.
+     * Set the local IP address to use in passive mode.
+     * Useful when there are multiple network cards.
@@ -3132 +3804,2 @@ public class FTPClient extends FTP implements Configurable {
-    public void setPassiveLocalIPAddress(final InetAddress inetAddress) {
+    public void setPassiveLocalIPAddress(final InetAddress inetAddress)
+    {
@@ -3137 +3810,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Set the local IP address to use in passive mode. Useful when there are multiple network cards.
+     * Set the local IP address to use in passive mode.
+     * Useful when there are multiple network cards.
@@ -3142 +3816,2 @@ public class FTPClient extends FTP implements Configurable {
-    public void setPassiveLocalIPAddress(final String ipAddress) throws UnknownHostException {
+    public void setPassiveLocalIPAddress(final String ipAddress) throws UnknownHostException
+    {
@@ -3147,2 +3822,6 @@ public class FTPClient extends FTP implements Configurable {
-     * Enables or disables passive mode NAT workaround. If enabled, a site-local PASV mode reply address will be replaced with the remote host address to which
-     * the PASV mode request was sent (unless that is also a site local address). This gets around the problem that some NAT boxes may change the reply.
+     * Enables or disables passive mode NAT workaround.
+     * If enabled, a site-local PASV mode reply address will be replaced with the
+     * remote host address to which the PASV mode request was sent
+     * (unless that is also a site local address).
+     * This gets around the problem that some NAT boxes may change the
+     * reply.
@@ -3152 +3830,0 @@ public class FTPClient extends FTP implements Configurable {
-     *
@@ -3154 +3832,2 @@ public class FTPClient extends FTP implements Configurable {
-     * @param enabled true to enable replacing internal IP's in passive mode.
+     * @param enabled true to enable replacing internal IP's in passive
+     * mode.
@@ -3162,3 +3841,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Sets the workaround strategy to replace the PASV mode reply addresses. This gets around the problem that some NAT boxes may change the reply.
-     *
-     * The default implementation is {@code NatServerResolverImpl}, i.e. site-local replies are replaced.
+     * Sets the workaround strategy to replace the PASV mode reply addresses.
+     * This gets around the problem that some NAT boxes may change the reply.
@@ -3166 +3844,4 @@ public class FTPClient extends FTP implements Configurable {
-     * @param resolver strategy to replace internal IP's in passive mode or null to disable the workaround (i.e. use PASV mode reply address.)
+     * The default implementation is {@code NatServerResolverImpl}, i.e. site-local
+     * replies are replaced.
+     * @param resolver strategy to replace internal IP's in passive mode
+     * or null to disable the workaround (i.e. use PASV mode reply address.)
@@ -3174 +3855,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Sets the value to be used for the data socket SO_RCVBUF option. If the value is positive, the option will be set when the data socket has been created.
+     * Sets the value to be used for the data socket SO_RCVBUF option.
+     * If the value is positive, the option will be set when the data socket has been created.
@@ -3184,2 +3866,5 @@ public class FTPClient extends FTP implements Configurable {
-     * Enable or disable verification that the remote host taking part of a data connection is the same as the host to which the control connection is attached.
-     * The default is for verification to be enabled. You may set this value at any time, whether the FTPClient is currently connected or not.
+     * Enable or disable verification that the remote host taking part
+     * of a data connection is the same as the host to which the control
+     * connection is attached.  The default is for verification to be
+     * enabled.  You may set this value at any time, whether the
+     * FTPClient is currently connected or not.
@@ -3189 +3874,2 @@ public class FTPClient extends FTP implements Configurable {
-    public void setRemoteVerificationEnabled(final boolean enable) {
+    public void setRemoteVerificationEnabled(final boolean enable)
+    {
@@ -3194 +3880,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Sets the external IP address to report in EPRT/PORT commands in active mode. Useful when there are multiple network cards.
+     * Sets the external IP address to report in EPRT/PORT commands in active mode.
+     * Useful when there are multiple network cards.
@@ -3201 +3888,2 @@ public class FTPClient extends FTP implements Configurable {
-    public void setReportActiveExternalIPAddress(final String ipAddress) throws UnknownHostException {
+    public void setReportActiveExternalIPAddress(final String ipAddress) throws UnknownHostException
+    {
@@ -3208,2 +3896,4 @@ public class FTPClient extends FTP implements Configurable {
-     * The restart command is not sent to the server immediately. It is sent when a data connection is created as part of a subsequent command. The restart
-     * marker is reset to zero after use.
+     * The restart command is not sent to the server immediately.
+     * It is sent when a data connection is created as part of a
+     * subsequent command.
+     * The restart marker is reset to zero after use.
@@ -3212 +3902,2 @@ public class FTPClient extends FTP implements Configurable {
-     * <b>Note: This method should only be invoked immediately prior to the transfer to which it applies.</b>
+     * <b>Note: This method should only be invoked immediately prior to
+     * the transfer to which it applies.</b>
@@ -3214 +3905,3 @@ public class FTPClient extends FTP implements Configurable {
-     * @param offset The offset into the remote file at which to start the next file transfer. This must be a value greater than or equal to zero.
+     * @param offset  The offset into the remote file at which to start the
+     *           next file transfer.  This must be a value greater than or
+     *           equal to zero.
@@ -3216 +3909,2 @@ public class FTPClient extends FTP implements Configurable {
-    public void setRestartOffset(final long offset) {
+    public void setRestartOffset(final long offset)
+    {
@@ -3223 +3917,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Sets the value to be used for the data socket SO_SNDBUF option. If the value is positive, the option will be set when the data socket has been created.
+     * Sets the value to be used for the data socket SO_SNDBUF option.
+     * If the value is positive, the option will be set when the data socket has been created.
@@ -3226,2 +3921,2 @@ public class FTPClient extends FTP implements Configurable {
-     * @since 3.3
-     */
+      * @since 3.3
+    */
@@ -3233 +3928,2 @@ public class FTPClient extends FTP implements Configurable {
-     * Set whether to use EPSV with IPv4. Might be worth enabling in some circumstances.
+     * Set whether to use EPSV with IPv4.
+     * Might be worth enabling in some circumstances.
@@ -3235,3 +3931,6 @@ public class FTPClient extends FTP implements Configurable {
-     * For example, when using IPv4 with NAT it may work with some rare configurations. E.g. if FTP server has a static PASV address (external network) and the
-     * client is coming from another internal network. In that case the data connection after PASV command would fail, while EPSV would make the client succeed
-     * by taking just the port.
+     * For example, when using IPv4 with NAT it
+     * may work with some rare configurations.
+     * E.g. if FTP server has a static PASV address (external network)
+     * and the client is coming from another internal network.
+     * In that case the data connection after PASV command would fail,
+     * while EPSV would make the client succeed by taking just the port.
@@ -3246 +3945,3 @@ public class FTPClient extends FTP implements Configurable {
-    private boolean storeFile(final FTPCmd command, final String remote, final InputStream local) throws IOException {
+    private boolean storeFile(final FTPCmd command, final String remote, final InputStream local)
+    throws IOException
+    {
@@ -3251,3 +3952,5 @@ public class FTPClient extends FTP implements Configurable {
-     * Stores a file on the server using the given name and taking input from the given InputStream. This method does NOT close the given InputStream. If the
-     * current file type is ASCII, line separators in the file are transparently converted to the NETASCII format (i.e., you should not attempt to create a
-     * special InputStream to do this).
+     * Stores a file on the server using the given name and taking input
+     * from the given InputStream.  This method does NOT close the given
+     * InputStream.  If the current file type is ASCII, line separators in
+     * the file are transparently converted to the NETASCII format (i.e.,
+     * you should not attempt to create a special InputStream to do this).
@@ -3255,2 +3958,2 @@ public class FTPClient extends FTP implements Configurable {
-     * @param remote The name to give the remote file.
-     * @param local  The local InputStream from which to read the file.
+     * @param remote  The name to give the remote file.
+     * @param local   The local InputStream from which to read the file.
@@ -3258,10 +3961,17 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException                  If the FTP server prematurely closes the connection as a result of the client being idle or some
-     *                                                       other reason causing the server to send FTP reply code 421. This exception may be caught either as
-     *                                                       an IOException or independently as itself.
-     * @throws org.apache.commons.net.io.CopyStreamException If an I/O error occurs while actually transferring the file. The CopyStreamException allows you to
-     *                                                       determine the number of bytes transferred and the IOException causing the error. This exception may
-     *                                                       be caught either as an IOException or independently as itself.
-     * @throws IOException                                   If an I/O error occurs while either sending a command to the server or receiving a reply from the
-     *                                                       server.
-     */
-    public boolean storeFile(final String remote, final InputStream local) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws org.apache.commons.net.io.CopyStreamException
+     *      If an I/O error occurs while actually
+     *      transferring the file.  The CopyStreamException allows you to
+     *      determine the number of bytes transferred and the IOException
+     *      causing the error.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean storeFile(final String remote, final InputStream local)
+    throws IOException
+    {
@@ -3271 +3981,3 @@ public class FTPClient extends FTP implements Configurable {
-    private OutputStream storeFileStream(final FTPCmd command, final String remote) throws IOException {
+    private OutputStream storeFileStream(final FTPCmd command, final String remote)
+    throws IOException
+    {
@@ -3276,4 +3988,8 @@ public class FTPClient extends FTP implements Configurable {
-     * Returns an OutputStream through which data can be written to store a file on the server using the given name. If the current file type is ASCII, the
-     * returned OutputStream will convert line separators in the file to the NETASCII format (i.e., you should not attempt to create a special OutputStream to
-     * do this). You must close the OutputStream when you finish writing to it. The OutputStream itself will take care of closing the parent data connection
-     * socket upon being closed.
+     * Returns an OutputStream through which data can be written to store
+     * a file on the server using the given name.  If the current file type
+     * is ASCII, the returned OutputStream will convert line separators in
+     * the file to the NETASCII format  (i.e., you should not attempt to
+     * create a special OutputStream to do this).  You must close the
+     * OutputStream when you finish writing to it.  The OutputStream itself
+     * will take care of closing the parent data connection socket upon being
+     * closed.
@@ -3281 +3997,3 @@ public class FTPClient extends FTP implements Configurable {
-     * <b>To finalize the file transfer you must call {@link #completePendingCommand completePendingCommand } and check its return value to verify success.</b>
+     * <b>To finalize the file transfer you must call
+     * {@link #completePendingCommand  completePendingCommand } and
+     * check its return value to verify success.</b>
@@ -3284,9 +4002,15 @@ public class FTPClient extends FTP implements Configurable {
-     * @param remote The name to give the remote file.
-     * @return An OutputStream through which the remote file can be written. If the data connection cannot be opened (e.g., the file does not exist), null is
-     *         returned (in which case you may check the reply code to determine the exact reason for failure).
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public OutputStream storeFileStream(final String remote) throws IOException {
+     * @param remote  The name to give the remote file.
+     * @return An OutputStream through which the remote file can be written.  If
+     *      the data connection cannot be opened (e.g., the file does not
+     *      exist), null is returned (in which case you may check the reply
+     *      code to determine the exact reason for failure).
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public OutputStream storeFileStream(final String remote) throws IOException
+    {
@@ -3297,3 +4021,6 @@ public class FTPClient extends FTP implements Configurable {
-     * Stores a file on the server using a unique name assigned by the server and taking input from the given InputStream. This method does NOT close the given
-     * InputStream. If the current file type is ASCII, line separators in the file are transparently converted to the NETASCII format (i.e., you should not
-     * attempt to create a special InputStream to do this).
+     * Stores a file on the server using a unique name assigned by the
+     * server and taking input from the given InputStream.  This method does
+     * NOT close the given
+     * InputStream.  If the current file type is ASCII, line separators in
+     * the file are transparently converted to the NETASCII format (i.e.,
+     * you should not attempt to create a special InputStream to do this).
@@ -3301 +4028 @@ public class FTPClient extends FTP implements Configurable {
-     * @param local The local InputStream from which to read the file.
+     * @param local   The local InputStream from which to read the file.
@@ -3303,10 +4030,16 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException                  If the FTP server prematurely closes the connection as a result of the client being idle or some
-     *                                                       other reason causing the server to send FTP reply code 421. This exception may be caught either as
-     *                                                       an IOException or independently as itself.
-     * @throws org.apache.commons.net.io.CopyStreamException If an I/O error occurs while actually transferring the file. The CopyStreamException allows you to
-     *                                                       determine the number of bytes transferred and the IOException causing the error. This exception may
-     *                                                       be caught either as an IOException or independently as itself.
-     * @throws IOException                                   If an I/O error occurs while either sending a command to the server or receiving a reply from the
-     *                                                       server.
-     */
-    public boolean storeUniqueFile(final InputStream local) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws org.apache.commons.net.io.CopyStreamException
+     *      If an I/O error occurs while actually
+     *      transferring the file.  The CopyStreamException allows you to
+     *      determine the number of bytes transferred and the IOException
+     *      causing the error.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean storeUniqueFile(final InputStream local) throws IOException
+    {
@@ -3317,3 +4050,6 @@ public class FTPClient extends FTP implements Configurable {
-     * Stores a file on the server using a unique name derived from the given name and taking input from the given InputStream. This method does NOT close the
-     * given InputStream. If the current file type is ASCII, line separators in the file are transparently converted to the NETASCII format (i.e., you should
-     * not attempt to create a special InputStream to do this).
+     * Stores a file on the server using a unique name derived from the
+     * given name and taking input
+     * from the given InputStream.  This method does NOT close the given
+     * InputStream.  If the current file type is ASCII, line separators in
+     * the file are transparently converted to the NETASCII format (i.e.,
+     * you should not attempt to create a special InputStream to do this).
@@ -3321,2 +4057,3 @@ public class FTPClient extends FTP implements Configurable {
-     * @param remote The name on which to base the unique name given to the remote file.
-     * @param local  The local InputStream from which to read the file.
+     * @param remote  The name on which to base the unique name given to
+     *                the remote file.
+     * @param local   The local InputStream from which to read the file.
@@ -3324,10 +4061,17 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException                  If the FTP server prematurely closes the connection as a result of the client being idle or some
-     *                                                       other reason causing the server to send FTP reply code 421. This exception may be caught either as
-     *                                                       an IOException or independently as itself.
-     * @throws org.apache.commons.net.io.CopyStreamException If an I/O error occurs while actually transferring the file. The CopyStreamException allows you to
-     *                                                       determine the number of bytes transferred and the IOException causing the error. This exception may
-     *                                                       be caught either as an IOException or independently as itself.
-     * @throws IOException                                   If an I/O error occurs while either sending a command to the server or receiving a reply from the
-     *                                                       server.
-     */
-    public boolean storeUniqueFile(final String remote, final InputStream local) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws org.apache.commons.net.io.CopyStreamException
+     *      If an I/O error occurs while actually
+     *      transferring the file.  The CopyStreamException allows you to
+     *      determine the number of bytes transferred and the IOException
+     *      causing the error.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean storeUniqueFile(final String remote, final InputStream local)
+    throws IOException
+    {
@@ -3338,4 +4082,9 @@ public class FTPClient extends FTP implements Configurable {
-     * Returns an OutputStream through which data can be written to store a file on the server using a unique name assigned by the server. If the current file
-     * type is ASCII, the returned OutputStream will convert line separators in the file to the NETASCII format (i.e., you should not attempt to create a
-     * special OutputStream to do this). You must close the OutputStream when you finish writing to it. The OutputStream itself will take care of closing the
-     * parent data connection socket upon being closed.
+     * Returns an OutputStream through which data can be written to store
+     * a file on the server using a unique name assigned by the server.
+     * If the current file type
+     * is ASCII, the returned OutputStream will convert line separators in
+     * the file to the NETASCII format  (i.e., you should not attempt to
+     * create a special OutputStream to do this).  You must close the
+     * OutputStream when you finish writing to it.  The OutputStream itself
+     * will take care of closing the parent data connection socket upon being
+     * closed.
@@ -3343 +4092,3 @@ public class FTPClient extends FTP implements Configurable {
-     * <b>To finalize the file transfer you must call {@link #completePendingCommand completePendingCommand } and check its return value to verify success.</b>
+     * <b>To finalize the file transfer you must call
+     * {@link #completePendingCommand  completePendingCommand } and
+     * check its return value to verify success.</b>
@@ -3346,8 +4097,14 @@ public class FTPClient extends FTP implements Configurable {
-     * @return An OutputStream through which the remote file can be written. If the data connection cannot be opened (e.g., the file does not exist), null is
-     *         returned (in which case you may check the reply code to determine the exact reason for failure).
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public OutputStream storeUniqueFileStream() throws IOException {
+     * @return An OutputStream through which the remote file can be written.  If
+     *      the data connection cannot be opened (e.g., the file does not
+     *      exist), null is returned (in which case you may check the reply
+     *      code to determine the exact reason for failure).
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public OutputStream storeUniqueFileStream() throws IOException
+    {
@@ -3358,4 +4115,9 @@ public class FTPClient extends FTP implements Configurable {
-     * Returns an OutputStream through which data can be written to store a file on the server using a unique name derived from the given name. If the current
-     * file type is ASCII, the returned OutputStream will convert line separators in the file to the NETASCII format (i.e., you should not attempt to create a
-     * special OutputStream to do this). You must close the OutputStream when you finish writing to it. The OutputStream itself will take care of closing the
-     * parent data connection socket upon being closed.
+     * Returns an OutputStream through which data can be written to store
+     * a file on the server using a unique name derived from the given name.
+     * If the current file type
+     * is ASCII, the returned OutputStream will convert line separators in
+     * the file to the NETASCII format  (i.e., you should not attempt to
+     * create a special OutputStream to do this).  You must close the
+     * OutputStream when you finish writing to it.  The OutputStream itself
+     * will take care of closing the parent data connection socket upon being
+     * closed.
@@ -3363 +4125,3 @@ public class FTPClient extends FTP implements Configurable {
-     * <b>To finalize the file transfer you must call {@link #completePendingCommand completePendingCommand } and check its return value to verify success.</b>
+     * <b>To finalize the file transfer you must call
+     * {@link #completePendingCommand  completePendingCommand } and
+     * check its return value to verify success.</b>
@@ -3366,9 +4130,16 @@ public class FTPClient extends FTP implements Configurable {
-     * @param remote The name on which to base the unique name given to the remote file.
-     * @return An OutputStream through which the remote file can be written. If the data connection cannot be opened (e.g., the file does not exist), null is
-     *         returned (in which case you may check the reply code to determine the exact reason for failure).
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public OutputStream storeUniqueFileStream(final String remote) throws IOException {
+     * @param remote  The name on which to base the unique name given to
+     *                the remote file.
+     * @return An OutputStream through which the remote file can be written.  If
+     *      the data connection cannot be opened (e.g., the file does not
+     *      exist), null is returned (in which case you may check the reply
+     *      code to determine the exact reason for failure).
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public OutputStream storeUniqueFileStream(final String remote) throws IOException
+    {
@@ -3383,6 +4154,10 @@ public class FTPClient extends FTP implements Configurable {
-     * @throws FTPConnectionClosedException If the FTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                      causing the server to send FTP reply code 421. This exception may be caught either as an IOException or
-     *                                      independently as itself.
-     * @throws IOException                  If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean structureMount(final String pathname) throws IOException {
+     * @throws FTPConnectionClosedException
+     *      If the FTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send FTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean structureMount(final String pathname) throws IOException
+    {
@@ -3393,5 +4168,8 @@ public class FTPClient extends FTP implements Configurable {
-     * Returns, whether the IP address from the server's response should be used. Until 3.9.0, this has always been the case. Beginning with 3.9.0, that IP
-     * address will be silently ignored, and replaced with the remote IP address of the control connection, unless this configuration option is given, which
-     * restores the old behavior. To enable this by default, use the system property {@link FTPClient#FTP_IP_ADDRESS_FROM_PASV_RESPONSE}.
-     *
-     * @return True, if the IP address from the server's response will be used (pre-3.9 compatible behavior), or false (ignore that IP address).
+     * Returns, whether the IP address from the server's response should be used.
+     * Until 3.9.0, this has always been the case. Beginning with 3.9.0,
+     * that IP address will be silently ignored, and replaced with the remote
+     * IP address of the control connection, unless this configuration option is
+     * given, which restores the old behavior. To enable this by default, use
+     * the system property {@link FTPClient#FTP_IP_ADDRESS_FROM_PASV_RESPONSE}.
+     * @return True, if the IP address from the server's response will be used
+     *  (pre-3.9 compatible behavior), or false (ignore that IP address).
@@ -3408,3 +4186,6 @@ public class FTPClient extends FTP implements Configurable {
-     * Sets whether the IP address from the server's response should be used. Until 3.9.0, this has always been the case. Beginning with 3.9.0, that IP address
-     * will be silently ignored, and replaced with the remote IP address of the control connection, unless this configuration option is given, which restores
-     * the old behavior. To enable this by default, use the system property {@link FTPClient#FTP_IP_ADDRESS_FROM_PASV_RESPONSE}.
+     * Sets whether the IP address from the server's response should be used.
+     * Until 3.9.0, this has always been the case. Beginning with 3.9.0,
+     * that IP address will be silently ignored, and replaced with the remote
+     * IP address of the control connection, unless this configuration option is
+     * given, which restores the old behavior. To enable this by default, use
+     * the system property {@link FTPClient#FTP_IP_ADDRESS_FROM_PASV_RESPONSE}.
@@ -3412,2 +4193,3 @@ public class FTPClient extends FTP implements Configurable {
-     * @param usingIpAddressFromPasvResponse True, if the IP address from the server's response should be used (pre-3.9.0 compatible behavior), or false (ignore
-     *                                       that IP address).
+     * @param usingIpAddressFromPasvResponse True, if the IP address from the
+     *   server's response should be used (pre-3.9.0 compatible behavior), or
+     *   false (ignore that IP address).
diff --git a/src/main/java/org/apache/commons/net/ftp/FTPClientConfig.java b/src/main/java/org/apache/commons/net/ftp/FTPClientConfig.java
index 0714f6c5b..ac07afb52 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPClientConfig.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPClientConfig.java
@@ -29,2 +29,17 @@ import java.util.TreeMap;
- * This class implements an alternate means of configuring the {@link org.apache.commons.net.ftp.FTPClient FTPClient} object and also subordinate objects which
- * it uses. Any class implementing the {@link org.apache.commons.net.ftp.Configurable Configurable } interface can be configured by this object.
+ * This class implements an alternate means of configuring the
+ * {@link  org.apache.commons.net.ftp.FTPClient  FTPClient} object and
+ * also subordinate objects which it uses.  Any class implementing the
+ * {@link  org.apache.commons.net.ftp.Configurable  Configurable }
+ * interface can be configured by this object.
+ * </p><p>
+ * In particular this class was designed primarily to support configuration
+ * of FTP servers which express file timestamps in formats and languages
+ * other than those for the US locale, which although it is the most common
+ * is not universal.  Unfortunately, nothing in the FTP spec allows this to
+ * be determined in an automated way, so manual configuration such as this
+ * is necessary.
+ * </p><p>
+ * This functionality was designed to allow existing clients to work exactly
+ * as before without requiring use of this component.  This component should
+ * only need to be explicitly invoked by the user of this package for problem
+ * cases that previous implementations could not solve.
@@ -32,10 +47,3 @@ import java.util.TreeMap;
- * <p>
- * In particular this class was designed primarily to support configuration of FTP servers which express file timestamps in formats and languages other than
- * those for the US locale, which although it is the most common is not universal. Unfortunately, nothing in the FTP spec allows this to be determined in an
- * automated way, so manual configuration such as this is necessary.
- * </p>
- * <p>
- * This functionality was designed to allow existing clients to work exactly as before without requiring use of this component. This component should only need
- * to be explicitly invoked by the user of this package for problem cases that previous implementations could not solve.
- * </p>
- * <h2>Examples of use of FTPClientConfig</h2> Use cases: You are trying to access a server that
+ * <h2>Examples of use of FTPClientConfig</h2>
+ * Use cases:
+ * You are trying to access a server that
@@ -43,3 +51,6 @@ import java.util.TreeMap;
- * <li>lists files with timestamps that use month names in languages other than English</li>
- * <li>lists files with timestamps that use date formats other than the American English "standard" <code>MM dd yyyy</code></li>
- * <li>is in different time zone and you need accurate timestamps for dependency checking as in Ant</li>
+ * <li>lists files with timestamps that use month names in languages other
+ * than English</li>
+ * <li>lists files with timestamps that use date formats other
+ * than the American English "standard" <code>MM dd yyyy</code></li>
+ * <li>is in different time zone and you need accurate timestamps for
+ * dependency checking as in Ant</li>
@@ -48,2 +59,2 @@ import java.util.TreeMap;
- * Unpaged (whole list) access on a UNIX server that uses French month names but uses the "standard" <code>MMM d yyyy</code> date formatting
- *
+ * Unpaged (whole list) access on a UNIX server that uses French month names
+ * but uses the "standard" <code>MMM d yyyy</code> date formatting
@@ -51,7 +62,7 @@ import java.util.TreeMap;
- * FTPClient f = FTPClient();
- * FTPClientConfig conf = new FTPClientConfig(FTPClientConfig.SYST_UNIX);
- * conf.setServerLanguageCode("fr");
- * f.configure(conf);
- * f.connect(server);
- * f.login(username, password);
- * FTPFile[] files = listFiles(directory);
+ *    FTPClient f=FTPClient();
+ *    FTPClientConfig conf = new FTPClientConfig(FTPClientConfig.SYST_UNIX);
+ *    conf.setServerLanguageCode("fr");
+ *    f.configure(conf);
+ *    f.connect(server);
+ *    f.login(username, password);
+ *    FTPFile[] files = listFiles(directory);
@@ -60,2 +71,3 @@ import java.util.TreeMap;
- * Paged access on a UNIX server that uses Danish month names and "European" date formatting in Denmark's time zone, when you are in some other time zone.
- *
+ * Paged access on a UNIX server that uses Danish month names
+ * and "European" date formatting in Denmark's time zone, when you
+ * are in some other time zone.
@@ -63,10 +75,11 @@ import java.util.TreeMap;
- * FTPClient f = FTPClient();
- * FTPClientConfig conf = new FTPClientConfig(FTPClientConfig.SYST_UNIX);
- * conf.setServerLanguageCode("da");
- * conf.setDefaultDateFormat("d MMM yyyy");
- * conf.setRecentDateFormat("d MMM HH:mm");
- * conf.setTimeZoneId("Europe/Copenhagen");
- * f.configure(conf);
- * f.connect(server);
- * f.login(username, password);
- * FTPListParseEngine engine = f.initiateListParsing("com.whatever.YourOwnParser", directory);
+ *    FTPClient f=FTPClient();
+ *    FTPClientConfig conf = new FTPClientConfig(FTPClientConfig.SYST_UNIX);
+ *    conf.setServerLanguageCode("da");
+ *    conf.setDefaultDateFormat("d MMM yyyy");
+ *    conf.setRecentDateFormat("d MMM HH:mm");
+ *    conf.setTimeZoneId("Europe/Copenhagen");
+ *    f.configure(conf);
+ *    f.connect(server);
+ *    f.login(username, password);
+ *    FTPListParseEngine engine =
+ *       f.initiateListParsing("com.whatever.YourOwnParser", directory);
@@ -74,5 +87,5 @@ import java.util.TreeMap;
- * while (engine.hasNext()) {
- *     FTPFile[] files = engine.getNext(25); // "page size" you want
- *     // do whatever you want with these files, display them, etc.
- *     // expensive FTPFile objects not created until needed.
- * }
+ *    while (engine.hasNext()) {
+ *       FTPFile[] files = engine.getNext(25);  // "page size" you want
+ *       //do whatever you want with these files, display them, etc.
+ *       //expensive FTPFile objects not created until needed.
+ *    }
@@ -81,3 +94,3 @@ import java.util.TreeMap;
- * Unpaged (whole list) access on a VMS server that uses month names in a language not {@link #getSupportedLanguageCodes() supported} by the system. but uses
- * the "standard" <code>MMM d yyyy</code> date formatting
- *
+ * Unpaged (whole list) access on a VMS server that uses month names
+ * in a language not {@link #getSupportedLanguageCodes() supported} by the system.
+ * but uses the "standard" <code>MMM d yyyy</code> date formatting
@@ -85,7 +98,8 @@ import java.util.TreeMap;
- * FTPClient f = FTPClient();
- * FTPClientConfig conf = new FTPClientConfig(FTPClientConfig.SYST_VMS);
- * conf.setShortMonthNames("jan|feb|mar|apr|ma\u00ED|j\u00FAn|j\u00FAl|\u00e1g\u00FA|sep|okt|n\u00F3v|des");
- * f.configure(conf);
- * f.connect(server);
- * f.login(username, password);
- * FTPFile[] files = listFiles(directory);
+ *    FTPClient f=FTPClient();
+ *    FTPClientConfig conf = new FTPClientConfig(FTPClientConfig.SYST_VMS);
+ *    conf.setShortMonthNames(
+ *        "jan|feb|mar|apr|ma\u00ED|j\u00FAn|j\u00FAl|\u00e1g\u00FA|sep|okt|n\u00F3v|des");
+ *    f.configure(conf);
+ *    f.connect(server);
+ *    f.login(username, password);
+ *    FTPFile[] files = listFiles(directory);
@@ -94,3 +108,3 @@ import java.util.TreeMap;
- * Unpaged (whole list) access on a Windows-NT server in a different time zone. (Note, since the NT Format uses numeric date formatting, language issues are
- * irrelevant here).
- *
+ * Unpaged (whole list) access on a Windows-NT server in a different time zone.
+ * (Note, since the NT Format uses numeric date formatting, language issues
+ * are irrelevant here).
@@ -98,7 +112,7 @@ import java.util.TreeMap;
- * FTPClient f = FTPClient();
- * FTPClientConfig conf = new FTPClientConfig(FTPClientConfig.SYST_NT);
- * conf.setTimeZoneId("America/Denver");
- * f.configure(conf);
- * f.connect(server);
- * f.login(username, password);
- * FTPFile[] files = listFiles(directory);
+ *    FTPClient f=FTPClient();
+ *    FTPClientConfig conf = new FTPClientConfig(FTPClientConfig.SYST_NT);
+ *    conf.setTimeZoneId("America/Denver");
+ *    f.configure(conf);
+ *    f.connect(server);
+ *    f.login(username, password);
+ *    FTPFile[] files = listFiles(directory);
@@ -106,3 +120,2 @@ import java.util.TreeMap;
- *
- * Unpaged (whole list) access on a Windows-NT server in a different time zone but which has been configured to use a unix-style listing format.
- *
+ * Unpaged (whole list) access on a Windows-NT server in a different time zone
+ * but which has been configured to use a unix-style listing format.
@@ -110,7 +123,7 @@ import java.util.TreeMap;
- * FTPClient f = FTPClient();
- * FTPClientConfig conf = new FTPClientConfig(FTPClientConfig.SYST_UNIX);
- * conf.setTimeZoneId("America/Denver");
- * f.configure(conf);
- * f.connect(server);
- * f.login(username, password);
- * FTPFile[] files = listFiles(directory);
+ *    FTPClient f=FTPClient();
+ *    FTPClientConfig conf = new FTPClientConfig(FTPClientConfig.SYST_UNIX);
+ *    conf.setTimeZoneId("America/Denver");
+ *    f.configure(conf);
+ *    f.connect(server);
+ *    f.login(username, password);
+ *    FTPFile[] files = listFiles(directory);
@@ -125 +138,2 @@ import java.util.TreeMap;
-public class FTPClientConfig {
+public class FTPClientConfig
+{
@@ -128 +142,2 @@ public class FTPClientConfig {
-     * Identifier by which a unix-based ftp server is known throughout the commons-net ftp system.
+     * Identifier by which a unix-based ftp server is known throughout
+     * the commons-net ftp system.
@@ -130 +145 @@ public class FTPClientConfig {
-    public static final String SYST_UNIX = "UNIX";
+    public static final String SYST_UNIX  = "UNIX";
@@ -133,3 +148,4 @@ public class FTPClientConfig {
-     * Identifier for alternate UNIX parser; same as {@link #SYST_UNIX} but leading spaces are trimmed from file names. This is to maintain backwards
-     * compatibility with the original behavior of the parser which ignored multiple spaces between the date and the start of the file name.
-     *
+     * Identifier for alternate UNIX parser; same as {@link #SYST_UNIX} but leading spaces are
+     * trimmed from file names. This is to maintain backwards compatibility with
+     * the original behavior of the parser which ignored multiple spaces between the date
+     * and the start of the file name.
@@ -138 +154 @@ public class FTPClientConfig {
-    public static final String SYST_UNIX_TRIM_LEADING = "UNIX_LTRIM";
+    public static final String SYST_UNIX_TRIM_LEADING  = "UNIX_LTRIM";
@@ -141 +157,2 @@ public class FTPClientConfig {
-     * Identifier by which a vms-based ftp server is known throughout the commons-net ftp system.
+     * Identifier by which a vms-based ftp server is known throughout
+     * the commons-net ftp system.
@@ -143 +160 @@ public class FTPClientConfig {
-    public static final String SYST_VMS = "VMS";
+    public static final String SYST_VMS   = "VMS";
@@ -146 +163,2 @@ public class FTPClientConfig {
-     * Identifier by which a WindowsNT-based ftp server is known throughout the commons-net ftp system.
+     * Identifier by which a WindowsNT-based ftp server is known throughout
+     * the commons-net ftp system.
@@ -148 +166 @@ public class FTPClientConfig {
-    public static final String SYST_NT = "WINDOWS";
+    public static final String SYST_NT    = "WINDOWS";
@@ -151 +169,2 @@ public class FTPClientConfig {
-     * Identifier by which an OS/2-based ftp server is known throughout the commons-net ftp system.
+     * Identifier by which an OS/2-based ftp server is known throughout
+     * the commons-net ftp system.
@@ -153 +172 @@ public class FTPClientConfig {
-    public static final String SYST_OS2 = "OS/2";
+    public static final String SYST_OS2   = "OS/2";
@@ -156 +175,2 @@ public class FTPClientConfig {
-     * Identifier by which an OS/400-based ftp server is known throughout the commons-net ftp system.
+     * Identifier by which an OS/400-based ftp server is known throughout
+     * the commons-net ftp system.
@@ -161 +181,2 @@ public class FTPClientConfig {
-     * Identifier by which an AS/400-based ftp server is known throughout the commons-net ftp system.
+     * Identifier by which an AS/400-based ftp server is known throughout
+     * the commons-net ftp system.
@@ -166 +187,2 @@ public class FTPClientConfig {
-     * Identifier by which an MVS-based ftp server is known throughout the commons-net ftp system.
+     * Identifier by which an MVS-based ftp server is known throughout
+     * the commons-net ftp system.
@@ -171,2 +193,4 @@ public class FTPClientConfig {
-     * Some servers return an "UNKNOWN Type: L8" message in response to the SYST command. We set these to be a Unix-type system. This may happen if the ftpd in
-     * question was compiled without system information.
+     * Some servers return an "UNKNOWN Type: L8" message
+     * in response to the SYST command. We set these to be a Unix-type system.
+     * This may happen if the ftpd in question was compiled without system
+     * information.
@@ -174 +198,2 @@ public class FTPClientConfig {
-     * NET-230 - Updated to be UPPERCASE so that the check done in createFileEntryParser will succeed.
+     * NET-230 - Updated to be UPPERCASE so that the check done in
+     * createFileEntryParser will succeed.
@@ -181 +206,2 @@ public class FTPClientConfig {
-     * Identifier by which an Netware-based ftp server is known throughout the commons-net ftp system.
+     * Identifier by which an Netware-based ftp server is known throughout
+     * the commons-net ftp system.
@@ -188 +214,2 @@ public class FTPClientConfig {
-     * Identifier by which a Mac pre OS-X -based ftp server is known throughout the commons-net ftp system.
+     * Identifier by which a Mac pre OS-X -based ftp server is known throughout
+     * the commons-net ftp system.
@@ -193 +220 @@ public class FTPClientConfig {
-    public static final String SYST_MACOS_PETER = "MACOS PETER"; // NET-436
+    public static final String SYST_MACOS_PETER  = "MACOS PETER"; // NET-436
@@ -200,0 +228,2 @@ public class FTPClientConfig {
+
+
@@ -204,2 +233,2 @@ public class FTPClientConfig {
-        LANGUAGE_CODE_MAP.put("de", Locale.GERMAN);
-        LANGUAGE_CODE_MAP.put("it", Locale.ITALIAN);
+        LANGUAGE_CODE_MAP.put("de",Locale.GERMAN);
+        LANGUAGE_CODE_MAP.put("it",Locale.ITALIAN);
@@ -217,0 +247 @@ public class FTPClientConfig {
+
@@ -219 +249,2 @@ public class FTPClientConfig {
-        LANGUAGE_CODE_MAP.put("fr", "jan|f\u00e9v|mar|avr|mai|jun|jui|ao\u00fb|sep|oct|nov|d\u00e9c"); // french
+        LANGUAGE_CODE_MAP.put("fr",
+                "jan|f\u00e9v|mar|avr|mai|jun|jui|ao\u00fb|sep|oct|nov|d\u00e9c");  //french
@@ -222 +252,0 @@ public class FTPClientConfig {
-
@@ -224,4 +254,6 @@ public class FTPClientConfig {
-     * Returns a DateFormatSymbols object configured with short month names as in the supplied string
-     *
-     * @param shortmonths This should be as described in {@link #setShortMonthNames(String) shortMonthNames}
-     * @return a DateFormatSymbols object configured with short month names as in the supplied string
+     * Returns a DateFormatSymbols object configured with short month names
+     * as in the supplied string
+     * @param shortmonths This  should be as described in
+     *  {@link  #setShortMonthNames(String)  shortMonthNames}
+     * @return a DateFormatSymbols object configured with short month names
+     * as in the supplied string
@@ -229 +261,2 @@ public class FTPClientConfig {
-    public static DateFormatSymbols getDateFormatSymbols(final String shortmonths) {
+    public static DateFormatSymbols getDateFormatSymbols(final String shortmonths)
+    {
@@ -235 +267,0 @@ public class FTPClientConfig {
-
@@ -237,2 +269,3 @@ public class FTPClientConfig {
-     * Returns a Collection of all the language codes currently supported by this class. See {@link #setServerLanguageCode(String) serverLanguageCode} for a
-     * functional descrption of language codes within this system.
+     * Returns a Collection of all the language codes currently supported
+     * by this class. See {@link  #setServerLanguageCode(String)  serverLanguageCode}
+     * for a functional descrption of language codes within this system.
@@ -240 +273,2 @@ public class FTPClientConfig {
-     * @return a Collection of all the language codes currently supported by this class
+     * @return a Collection of all the language codes currently supported
+     * by this class
@@ -245 +278,0 @@ public class FTPClientConfig {
-
@@ -247,8 +280,13 @@ public class FTPClientConfig {
-     * Looks up the supplied language code in the internally maintained table of language codes. Returns a DateFormatSymbols object configured with short month
-     * names corresponding to the code. If there is no corresponding entry in the table, the object returned will be that for <code>Locale.US</code>
-     *
-     * @param languageCode See {@link #setServerLanguageCode(String) serverLanguageCode}
-     * @return a DateFormatSymbols object configured with short month names corresponding to the supplied code, or with month names for <code>Locale.US</code>
-     *         if there is no corresponding entry in the internal table.
-     */
-    public static DateFormatSymbols lookupDateFormatSymbols(final String languageCode) {
+     * Looks up the supplied language code in the internally maintained table of
+     * language codes.  Returns a DateFormatSymbols object configured with
+     * short month names corresponding to the code.  If there is no corresponding
+     * entry in the table, the object returned will be that for
+     * <code>Locale.US</code>
+     * @param languageCode See {@link  #setServerLanguageCode(String)  serverLanguageCode}
+     * @return a DateFormatSymbols object configured with short month names
+     * corresponding to the supplied code, or with month names for
+     * <code>Locale.US</code> if there is no corresponding entry in the internal
+     * table.
+     */
+    public static DateFormatSymbols lookupDateFormatSymbols(final String languageCode)
+    {
@@ -260 +298 @@ public class FTPClientConfig {
-            if (lang instanceof String) {
+            if (lang instanceof String){
@@ -266 +303,0 @@ public class FTPClientConfig {
-
@@ -271 +308,2 @@ public class FTPClientConfig {
-            throw new IllegalArgumentException("expecting a pipe-delimited string containing 12 tokens");
+            throw new IllegalArgumentException(
+                    "expecting a pipe-delimited string containing 12 tokens");
@@ -275 +313 @@ public class FTPClientConfig {
-        while (st.hasMoreTokens()) {
+        while(st.hasMoreTokens()) {
@@ -278 +316 @@ public class FTPClientConfig {
-        months[pos] = "";
+        months[pos]="";
@@ -281 +318,0 @@ public class FTPClientConfig {
-
@@ -284,0 +322 @@ public class FTPClientConfig {
+
@@ -298 +336,2 @@ public class FTPClientConfig {
-     * Convenience constructor mainly for use in testing. Constructs a UNIX configuration.
+     * Convenience constructor mainly for use in testing.
+     * Constructs a UNIX configuration.
@@ -306 +344,0 @@ public class FTPClientConfig {
-     *
@@ -320 +357,0 @@ public class FTPClientConfig {
-
@@ -323,4 +360,5 @@ public class FTPClientConfig {
-     *
-     * @param systemKey key representing system type of the server being connected to. See {@link #getServerSystemKey() serverSystemKey} If set to the empty
-     *                  string, then FTPClient uses the system type returned by the server. However this is not recommended for general use; the correct system
-     *                  type should be set if it is known.
+     * @param systemKey key representing system type of the  server being
+     * connected to. See {@link #getServerSystemKey() serverSystemKey}
+     * If set to the empty string, then FTPClient uses the system type returned by the server.
+     * However this is not recommended for general use;
+     * the correct system type should be set if it is known.
@@ -346,7 +384,13 @@ public class FTPClientConfig {
-     *
-     * @param systemKey            key representing system type of the server being connected to. See {@link #getServerSystemKey() serverSystemKey}
-     * @param defaultDateFormatStr See {@link #setDefaultDateFormatStr(String) defaultDateFormatStr}
-     * @param recentDateFormatStr  See {@link #setRecentDateFormatStr(String) recentDateFormatStr}
-     * @since 3.6
-     */
-    public FTPClientConfig(final String systemKey, final String defaultDateFormatStr, final String recentDateFormatStr) {
+     * @param systemKey key representing system type of the  server being
+     * connected to. See
+     *  {@link #getServerSystemKey() serverSystemKey}
+     * @param defaultDateFormatStr See
+     *  {@link  #setDefaultDateFormatStr(String)  defaultDateFormatStr}
+     * @param recentDateFormatStr See
+     *  {@link  #setRecentDateFormatStr(String)  recentDateFormatStr}
+     *  @since 3.6
+     */
+    public FTPClientConfig(final String systemKey,
+                           final String defaultDateFormatStr,
+                           final String recentDateFormatStr)
+    {
@@ -360,10 +404,21 @@ public class FTPClientConfig {
-     *
-     * @param systemKey            key representing system type of the server being connected to. See {@link #getServerSystemKey() serverSystemKey}
-     * @param defaultDateFormatStr See {@link #setDefaultDateFormatStr(String) defaultDateFormatStr}
-     * @param recentDateFormatStr  See {@link #setRecentDateFormatStr(String) recentDateFormatStr}
-     * @param serverLanguageCode   See {@link #setServerLanguageCode(String) serverLanguageCode}
-     * @param shortMonthNames      See {@link #setShortMonthNames(String) shortMonthNames}
-     * @param serverTimeZoneId     See {@link #setServerTimeZoneId(String) serverTimeZoneId}
-     */
-    public FTPClientConfig(final String systemKey, final String defaultDateFormatStr, final String recentDateFormatStr, final String serverLanguageCode,
-            final String shortMonthNames, final String serverTimeZoneId) {
+     * @param systemKey key representing system type of the  server being
+     * connected to. See
+     *  {@link #getServerSystemKey() serverSystemKey}
+     * @param defaultDateFormatStr See
+     *  {@link  #setDefaultDateFormatStr(String)  defaultDateFormatStr}
+     * @param recentDateFormatStr See
+     *  {@link  #setRecentDateFormatStr(String)  recentDateFormatStr}
+     * @param serverLanguageCode See
+     *  {@link  #setServerLanguageCode(String)  serverLanguageCode}
+     * @param shortMonthNames See
+     *  {@link  #setShortMonthNames(String)  shortMonthNames}
+     * @param serverTimeZoneId See
+     *  {@link  #setServerTimeZoneId(String)  serverTimeZoneId}
+     */
+    public FTPClientConfig(final String systemKey,
+                           final String defaultDateFormatStr,
+                           final String recentDateFormatStr,
+                           final String serverLanguageCode,
+                           final String shortMonthNames,
+                           final String serverTimeZoneId)
+    {
@@ -380,12 +435,27 @@ public class FTPClientConfig {
-     *
-     * @param systemKey              key representing system type of the server being connected to. See {@link #getServerSystemKey() serverSystemKey}
-     * @param defaultDateFormatStr   See {@link #setDefaultDateFormatStr(String) defaultDateFormatStr}
-     * @param recentDateFormatStr    See {@link #setRecentDateFormatStr(String) recentDateFormatStr}
-     * @param serverLanguageCode     See {@link #setServerLanguageCode(String) serverLanguageCode}
-     * @param shortMonthNames        See {@link #setShortMonthNames(String) shortMonthNames}
-     * @param serverTimeZoneId       See {@link #setServerTimeZoneId(String) serverTimeZoneId}
-     * @param lenientFutureDates     See {@link #setLenientFutureDates(boolean) lenientFutureDates}
-     * @param saveUnparseableEntries See {@link #setUnparseableEntries(boolean) saveUnparseableEntries}
-     */
-    public FTPClientConfig(final String systemKey, final String defaultDateFormatStr, final String recentDateFormatStr, final String serverLanguageCode,
-            final String shortMonthNames, final String serverTimeZoneId, final boolean lenientFutureDates, final boolean saveUnparseableEntries) {
+     * @param systemKey key representing system type of the  server being
+     * connected to. See
+     *  {@link #getServerSystemKey() serverSystemKey}
+     * @param defaultDateFormatStr See
+     *  {@link  #setDefaultDateFormatStr(String)  defaultDateFormatStr}
+     * @param recentDateFormatStr See
+     *  {@link  #setRecentDateFormatStr(String)  recentDateFormatStr}
+     * @param serverLanguageCode See
+     *  {@link  #setServerLanguageCode(String)  serverLanguageCode}
+     * @param shortMonthNames See
+     *  {@link  #setShortMonthNames(String)  shortMonthNames}
+     * @param serverTimeZoneId See
+     *  {@link  #setServerTimeZoneId(String)  serverTimeZoneId}
+     * @param lenientFutureDates See
+     * {@link  #setLenientFutureDates(boolean)  lenientFutureDates}
+     * @param saveUnparseableEntries See
+     * {@link  #setUnparseableEntries(boolean)  saveUnparseableEntries}
+     */
+    public FTPClientConfig(final String systemKey,
+                           final String defaultDateFormatStr,
+                           final String recentDateFormatStr,
+                           final String serverLanguageCode,
+                           final String shortMonthNames,
+                           final String serverTimeZoneId,
+                           final boolean lenientFutureDates,
+                           final boolean saveUnparseableEntries)
+    {
@@ -403,2 +473,2 @@ public class FTPClientConfig {
-     * getter for the {@link #setDefaultDateFormatStr(String) defaultDateFormatStr} property.
-     *
+     * getter for the {@link  #setDefaultDateFormatStr(String)  defaultDateFormatStr}
+     * property.
@@ -412,2 +482 @@ public class FTPClientConfig {
-     * getter for the {@link #setRecentDateFormatStr(String) recentDateFormatStr} property.
-     *
+     * getter for the {@link  #setRecentDateFormatStr(String)  recentDateFormatStr} property.
@@ -423 +492 @@ public class FTPClientConfig {
-     * getter for the {@link #setServerLanguageCode(String) serverLanguageCode} property.
+     * getter for the {@link  #setServerLanguageCode(String)  serverLanguageCode} property.
@@ -425 +493,0 @@ public class FTPClientConfig {
-     *
@@ -431 +498,0 @@ public class FTPClientConfig {
-
@@ -433,4 +500,6 @@ public class FTPClientConfig {
-     * Getter for the serverSystemKey property. This property specifies the general type of server to which the client connects. Should be either one of the
-     * <code>FTPClientConfig.SYST_*</code> codes or else the fully qualified class name of a parser implementing both the <code>FTPFileEntryParser</code> and
-     * <code>Configurable</code> interfaces.
-     *
+     * Getter for the serverSystemKey property.  This property
+     * specifies the general type of server to which the client connects.
+     * Should be either one of the <code>FTPClientConfig.SYST_*</code> codes
+     * or else the fully qualified class name of a parser implementing both
+     * the <code>FTPFileEntryParser</code> and <code>Configurable</code>
+     * interfaces.
@@ -444,2 +513 @@ public class FTPClientConfig {
-     * getter for the {@link #setServerTimeZoneId(String) serverTimeZoneId} property.
-     *
+     * getter for the {@link  #setServerTimeZoneId(String)  serverTimeZoneId} property.
@@ -454 +522,2 @@ public class FTPClientConfig {
-     * getter for the {@link #setShortMonthNames(String) shortMonthNames} property.
+     * getter for the {@link  #setShortMonthNames(String)  shortMonthNames}
+     * property.
@@ -456 +524,0 @@ public class FTPClientConfig {
-     *
@@ -462 +529,0 @@ public class FTPClientConfig {
-
@@ -465,3 +532,3 @@ public class FTPClientConfig {
-     *         <p>
-     *         If true, the FTPFile for any unparseable entries will contain only the unparsed entry {@link FTPFile#getRawListing()} and
-     *         {@link FTPFile#isValid()} will return {@code false}
+     * <p>
+     * If true, the FTPFile for any unparseable entries will contain only the unparsed entry
+     * {@link FTPFile#getRawListing()} and {@link FTPFile#isValid()} will return {@code false}
@@ -476 +543 @@ public class FTPClientConfig {
-     * getter for the {@link #setLenientFutureDates(boolean) lenientFutureDates} property.
+     * getter for the {@link  #setLenientFutureDates(boolean)  lenientFutureDates} property.
@@ -478 +544,0 @@ public class FTPClientConfig {
-     *
@@ -488,3 +554,9 @@ public class FTPClientConfig {
-     * setter for the defaultDateFormatStr property. This property specifies the main date format that will be used by a parser configured by this configuration
-     * to parse file timestamps. If this is not specified, such a parser will use as a default value, the most commonly used format which will be in as used in
-     * <code>en_US</code> locales.
+     * setter for the defaultDateFormatStr property.  This property
+     * specifies the main date format that will be used by a parser configured
+     * by this configuration to parse file timestamps.  If this is not
+     * specified, such a parser will use as a default value, the most commonly
+     * used format which will be in as used in <code>en_US</code> locales.
+     * </p><p>
+     * This should be in the format described for
+     * <code>java.text.SimpleDateFormat</code>.
+     * property.
@@ -492,4 +563,0 @@ public class FTPClientConfig {
-     * <p>
-     * This should be in the format described for <code>java.text.SimpleDateFormat</code>. property.
-     * </p>
-     *
@@ -504,7 +572,13 @@ public class FTPClientConfig {
-     * setter for the lenientFutureDates property. This boolean property (default: true) only has meaning when a {@link #setRecentDateFormatStr(String)
-     * recentDateFormatStr} property has been set. In that case, if this property is set true, then the parser, when it encounters a listing parseable with the
-     * recent date format, will only consider a date to belong to the previous year if it is more than one day in the future. This will allow all out-of-synch
-     * situations (whether based on "slop" - i.e. servers simply out of synch with one another or because of time zone differences - but in the latter case it
-     * is highly recommended to use the {@link #setServerTimeZoneId(String) serverTimeZoneId} property instead) to resolve correctly.
-     * </p>
-     * <p>
+     * setter for the lenientFutureDates property.  This boolean property
+     * (default: true) only has meaning when a
+     * {@link  #setRecentDateFormatStr(String)  recentDateFormatStr} property
+     * has been set.  In that case, if this property is set true, then the
+     * parser, when it encounters a listing parseable with the recent date
+     * format, will only consider a date to belong to the previous year if
+     * it is more than one day in the future.  This will allow all
+     * out-of-synch situations (whether based on "slop" - i.e. servers simply
+     * out of synch with one another or because of time zone differences -
+     * but in the latter case it is highly recommended to use the
+     * {@link  #setServerTimeZoneId(String)  serverTimeZoneId} property
+     * instead) to resolve correctly.
+     * </p><p>
@@ -513,2 +587,2 @@ public class FTPClientConfig {
-     *
-     * @param lenientFutureDates set true to compensate for out-of-synch conditions.
+     * @param lenientFutureDates set true to compensate for out-of-synch
+     * conditions.
@@ -522,3 +596,5 @@ public class FTPClientConfig {
-     * setter for the recentDateFormatStr property. This property specifies a secondary date format that will be used by a parser configured by this
-     * configuration to parse file timestamps, typically those less than a year old. If this is not specified, such a parser will not attempt to parse using an
-     * alternate format.
+     * setter for the recentDateFormatStr property.  This property
+     * specifies a secondary date format that will be used by a parser
+     * configured by this configuration to parse file timestamps, typically
+     * those less than a year old.  If this is  not specified, such a parser
+     * will not attempt to parse using an alternate format.
@@ -530 +606,2 @@ public class FTPClientConfig {
-     * This should be in the format described for <code>java.text.SimpleDateFormat</code>.
+     * This should be in the format described for
+     * <code>java.text.SimpleDateFormat</code>.
@@ -532 +608,0 @@ public class FTPClientConfig {
-     *
@@ -541,5 +617,11 @@ public class FTPClientConfig {
-     * setter for the serverLanguageCode property. This property allows user to specify a <a href="http://www.ics.uci.edu/pub/ietf/http/related/iso639.txt">
-     * two-letter ISO-639 language code</a> that will be used to configure the set of month names used by the file timestamp parser. If neither this nor the
-     * {@link #setShortMonthNames(String) shortMonthNames} is specified, parsing will assume English month names, which may or may not be significant, depending
-     * on whether the date format(s) specified via {@link #setDefaultDateFormatStr(String) defaultDateFormatStr} and/or {@link #setRecentDateFormatStr(String)
-     * recentDateFormatStr} are using numeric or alphabetic month names.
+     * setter for the serverLanguageCode property.  This property allows
+     * user to specify a
+     * <a href="http://www.ics.uci.edu/pub/ietf/http/related/iso639.txt">
+     * two-letter ISO-639 language code</a> that will be used to
+     * configure the set of month names used by the file timestamp parser.
+     * If neither this nor the {@link #setShortMonthNames(String) shortMonthNames}
+     * is specified, parsing will assume English month names, which may or
+     * may not be significant, depending on whether the date format(s)
+     * specified via {@link  #setDefaultDateFormatStr(String)  defaultDateFormatStr}
+     * and/or {@link  #setRecentDateFormatStr(String)  recentDateFormatStr} are using
+     * numeric or alphabetic month names.
@@ -547,6 +629,12 @@ public class FTPClientConfig {
-     * <p>
-     * If the code supplied is not supported here, <code>en_US</code> month names will be used. We are supporting here those language codes which, when a
-     * <code> java.util.Locale</code> is constucted using it, and a <code>java.text.SimpleDateFormat</code> is constructed using that Locale, the array returned
-     * by the SimpleDateFormat's <code>getShortMonths()</code> method consists solely of three 8-bit ASCII character strings. Additionally, languages which do
-     * not meet this requirement are included if a common alternative set of short month names is known to be used. This means that users who can tell us of
-     * additional such encodings may get them added to the list of supported languages by contacting the Apache Commons Net team.
+     * <p>If the code supplied is not supported here, <code>en_US</code>
+     * month names will be used.  We are supporting here those language
+     * codes which, when a <code> java.util.Locale</code> is constucted
+     * using it, and a <code>java.text.SimpleDateFormat</code> is
+     * constructed using that Locale, the array returned by the
+     * SimpleDateFormat's <code>getShortMonths()</code> method consists
+     * solely of three 8-bit ASCII character strings.  Additionally,
+     * languages which do not meet this requirement are included if a
+     * common alternative set of short month names is known to be used.
+     * This means that users who can tell us of additional such encodings
+     * may get them added to the list of supported languages by contacting
+     * the Apache Commons Net team.
@@ -554,5 +642,10 @@ public class FTPClientConfig {
-     * <p>
-     * <strong> Please note that this attribute will NOT be used to determine a locale-based date format for the language. </strong> Experience has shown that
-     * many if not most FTP servers outside the United States employ the standard <code>en_US</code> date format orderings of <code>MMM d yyyy</code> and
-     * <code>MMM d HH:mm</code> and attempting to deduce this automatically here would cause more problems than it would solve. The date format must be changed
-     * via the {@link #setDefaultDateFormatStr(String) defaultDateFormatStr} and/or {@link #setRecentDateFormatStr(String) recentDateFormatStr} parameters.
+     * <p><strong>
+     * Please note that this attribute will NOT be used to determine a
+     * locale-based date format for the language.  </strong>
+     * Experience has shown that many if not most FTP servers outside the
+     * United States employ the standard <code>en_US</code> date format
+     * orderings of <code>MMM d yyyy</code> and <code>MMM d HH:mm</code>
+     * and attempting to deduce this automatically here would cause more
+     * problems than it would solve.  The date format must be changed
+     * via the {@link  #setDefaultDateFormatStr(String)  defaultDateFormatStr} and/or
+     * {@link  #setRecentDateFormatStr(String)  recentDateFormatStr} parameters.
@@ -560 +652,0 @@ public class FTPClientConfig {
-     *
@@ -569,2 +661,9 @@ public class FTPClientConfig {
-     * setter for the serverTimeZoneId property. This property allows a time zone to be specified corresponding to that known to be used by an FTP server in
-     * file listings. This might be particularly useful to clients such as Ant that try to use these timestamps for dependency checking.
+     * setter for the serverTimeZoneId property.  This property
+     * allows a time zone to be specified corresponding to that known to be
+     * used by an FTP server in file listings.  This might be particularly
+     * useful to clients such as Ant that try to use these timestamps for
+     * dependency checking.
+     * </p><p>
+     * This should be one of the identifiers used by
+     * <code>java.util.TimeZone</code> to refer to time zones, for example,
+     * <code>America/Chicago</code> or <code>Asia/Rangoon</code>.
@@ -572,5 +670,0 @@ public class FTPClientConfig {
-     * <p>
-     * This should be one of the identifiers used by <code>java.util.TimeZone</code> to refer to time zones, for example, <code>America/Chicago</code> or
-     * <code>Asia/Rangoon</code>.
-     * </p>
-     *
@@ -585,6 +679,11 @@ public class FTPClientConfig {
-     * setter for the shortMonthNames property. This property allows the user to specify a set of month names used by the server that is different from those
-     * that may be specified using the {@link #setServerLanguageCode(String) serverLanguageCode} property.
-     * </p>
-     * <p>
-     * This should be a string containing twelve strings each composed of three characters, delimited by pipe (|) characters. Currently, only 8-bit ASCII
-     * characters are known to be supported. For example, a set of month names used by a hypothetical Icelandic FTP server might conceivably be specified as
+     * setter for the shortMonthNames property.
+     * This property allows the user to specify a set of month names
+     * used by the server that is different from those that may be
+     * specified using the {@link  #setServerLanguageCode(String)  serverLanguageCode}
+     * property.
+     * </p><p>
+     * This should be a string containing twelve strings each composed of
+     * three characters, delimited by pipe (|) characters.  Currently,
+     * only 8-bit ASCII characters are known to be supported.  For example,
+     * a set of month names used by a hypothetical Icelandic FTP server might
+     * conceivably be specified as
@@ -593 +691,0 @@ public class FTPClientConfig {
-     *
@@ -603,2 +701,2 @@ public class FTPClientConfig {
-     * In this case, the FTPFile will contain only the unparsed entry {@link FTPFile#getRawListing()} and {@link FTPFile#isValid()} will return {@code false}
-     *
+     * In this case, the FTPFile will contain only the unparsed entry {@link FTPFile#getRawListing()}
+     * and {@link FTPFile#isValid()} will return {@code false}
diff --git a/src/main/java/org/apache/commons/net/ftp/FTPCmd.java b/src/main/java/org/apache/commons/net/ftp/FTPCmd.java
index ed58aa5eb..312424893 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPCmd.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPCmd.java
@@ -22 +22 @@ package org.apache.commons.net.ftp;
- * @since 3.3
+* @since 3.3
@@ -25,2 +25,32 @@ public enum FTPCmd {
-    ABOR, ACCT, ALLO, APPE, CDUP, CWD, DELE, EPRT, EPSV, FEAT, HELP, LIST, MDTM, MFMT, MKD, MLSD, MLST, MODE, NLST, NOOP, PASS, PASV, PORT, PWD, QUIT, REIN,
-    REST, RETR, RMD, RNFR, RNTO, SITE,
+    ABOR,
+    ACCT,
+    ALLO,
+    APPE,
+    CDUP,
+    CWD,
+    DELE,
+    EPRT,
+    EPSV,
+    FEAT,
+    HELP,
+    LIST,
+    MDTM,
+    MFMT,
+    MKD,
+    MLSD,
+    MLST,
+    MODE,
+    NLST,
+    NOOP,
+    PASS,
+    PASV,
+    PORT,
+    PWD,
+    QUIT,
+    REIN,
+    REST,
+    RETR,
+    RMD,
+    RNFR,
+    RNTO,
+    SITE,
@@ -28 +58,10 @@ public enum FTPCmd {
-    SIZE, SMNT, STAT, STOR, STOU, STRU, SYST, TYPE, USER,;
+    SIZE,
+    SMNT,
+    STAT,
+    STOR,
+    STOU,
+    STRU,
+    SYST,
+    TYPE,
+    USER,
+    ;
@@ -68 +107,2 @@ public enum FTPCmd {
-     * Retrieve the FTP protocol command string corresponding to a specified command code.
+     * Retrieve the FTP protocol command string corresponding to a specified
+     * command code.
@@ -70 +110,2 @@ public enum FTPCmd {
-     * @return The FTP protcol command string corresponding to a specified command code.
+     * @return The FTP protcol command string corresponding to a specified
+     *         command code.
@@ -72 +113,2 @@ public enum FTPCmd {
-    public final String getCommand() {
+    public final String getCommand()
+    {
diff --git a/src/main/java/org/apache/commons/net/ftp/FTPCommand.java b/src/main/java/org/apache/commons/net/ftp/FTPCommand.java
index 740cdfa39..de88a8949 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPCommand.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPCommand.java
@@ -21,3 +21,6 @@ package org.apache.commons.net.ftp;
- * FTPCommand stores a set of constants for FTP command codes. To interpret the meaning of the codes, familiarity with RFC 959 is assumed. The mnemonic constant
- * names are transcriptions from the code descriptions of RFC 959. For those who think in terms of the actual FTP commands, a set of constants such as
- * {@link #USER USER } are provided where the constant name is the same as the FTP command.
+ * FTPCommand stores a set of constants for FTP command codes.  To interpret
+ * the meaning of the codes, familiarity with RFC 959 is assumed.
+ * The mnemonic constant names are transcriptions from the code descriptions
+ * of RFC 959.  For those who think in terms of the actual FTP commands,
+ * a set of constants such as {@link #USER  USER } are provided
+ * where the constant name is the same as the FTP command.
@@ -28 +31,2 @@ package org.apache.commons.net.ftp;
-public final class FTPCommand {
+public final class FTPCommand
+{
@@ -75,2 +79 @@ public final class FTPCommand {
-     * Machine parseable list for a directory
-     *
+     *  Machine parseable list for a directory
@@ -83 +85,0 @@ public final class FTPCommand {
-     *
@@ -117 +119 @@ public final class FTPCommand {
-    // public static final int LIST = LIST;
+    //  public static final int LIST = LIST;
@@ -122,2 +124,2 @@ public final class FTPCommand {
-    // public static final int HELP = HELP;
-    // public static final int NOOP = NOOP;
+    //public static final int HELP = HELP;
+    //public static final int NOOP = NOOP;
@@ -135,3 +137,6 @@ public final class FTPCommand {
-    private static final String[] COMMANDS = { "USER", "PASS", "ACCT", "CWD", "CDUP", "SMNT", "REIN", "QUIT", "PORT", "PASV", "TYPE", "STRU", "MODE", "RETR",
-            "STOR", "STOU", "APPE", "ALLO", "REST", "RNFR", "RNTO", "ABOR", "DELE", "RMD", "MKD", "PWD", "LIST", "NLST", "SITE", "SYST", "STAT", "HELP", "NOOP",
-            "MDTM", "FEAT", "MFMT", "EPSV", "EPRT", "MLSD", "MLST" };
+    private static final String[] COMMANDS = {
+                                          "USER", "PASS", "ACCT", "CWD", "CDUP", "SMNT", "REIN", "QUIT", "PORT",
+                                          "PASV", "TYPE", "STRU", "MODE", "RETR", "STOR", "STOU", "APPE", "ALLO",
+                                          "REST", "RNFR", "RNTO", "ABOR", "DELE", "RMD", "MKD", "PWD", "LIST",
+                                          "NLST", "SITE", "SYST", "STAT", "HELP", "NOOP", "MDTM", "FEAT", "MFMT",
+                                          "EPSV", "EPRT", "MLSD", "MLST" };
@@ -143 +148,2 @@ public final class FTPCommand {
-            throw new RuntimeException("Incorrect _commands array. Should have length " + expectedLength + " found " + COMMANDS.length);
+            throw new RuntimeException(
+                "Incorrect _commands array. Should have length " + expectedLength + " found " + COMMANDS.length);
@@ -148 +154,2 @@ public final class FTPCommand {
-     * Retrieve the FTP protocol command string corresponding to a specified command code.
+     * Retrieve the FTP protocol command string corresponding to a specified
+     * command code.
@@ -151 +158,2 @@ public final class FTPCommand {
-     * @return The FTP protcol command string corresponding to a specified command code.
+     * @return The FTP protcol command string corresponding to a specified
+     *         command code.
@@ -153 +161,2 @@ public final class FTPCommand {
-    public static String getCommand(final int command) {
+    public static String getCommand(final int command)
+    {
@@ -158,2 +167,2 @@ public final class FTPCommand {
-    private FTPCommand() {
-    }
+    private FTPCommand()
+    {}
diff --git a/src/main/java/org/apache/commons/net/ftp/FTPConnectionClosedException.java b/src/main/java/org/apache/commons/net/ftp/FTPConnectionClosedException.java
index 2fb44ce5e..9209a7cbc 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPConnectionClosedException.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPConnectionClosedException.java
@@ -19 +18,0 @@ package org.apache.commons.net.ftp;
-
@@ -23,3 +22,7 @@ import java.io.IOException;
- * FTPConnectionClosedException is used to indicate the premature or unexpected closing of an FTP connection resulting from a
- * {@link org.apache.commons.net.ftp.FTPReply#SERVICE_NOT_AVAILABLE FTPReply.SERVICE_NOT_AVAILABLE } response (FTP reply code 421) to a failed FTP command. This
- * exception is derived from IOException and therefore may be caught either as an IOException or specifically as an FTPConnectionClosedException.
+ * FTPConnectionClosedException is used to indicate the premature or
+ * unexpected closing of an FTP connection resulting from a
+ * {@link org.apache.commons.net.ftp.FTPReply#SERVICE_NOT_AVAILABLE FTPReply.SERVICE_NOT_AVAILABLE }
+ *  response (FTP reply code 421) to a
+ * failed FTP command.  This exception is derived from IOException and
+ * therefore may be caught either as an IOException or specifically as an
+ * FTPConnectionClosedException.
@@ -31 +34,2 @@ import java.io.IOException;
-public class FTPConnectionClosedException extends IOException {
+public class FTPConnectionClosedException extends IOException
+{
@@ -36 +40,2 @@ public class FTPConnectionClosedException extends IOException {
-    public FTPConnectionClosedException() {
+    public FTPConnectionClosedException()
+    {
@@ -42 +47 @@ public class FTPConnectionClosedException extends IOException {
-     * @param message The message explaining the reason for the exception.
+     * @param message  The message explaining the reason for the exception.
@@ -44 +49,2 @@ public class FTPConnectionClosedException extends IOException {
-    public FTPConnectionClosedException(final String message) {
+    public FTPConnectionClosedException(final String message)
+    {
diff --git a/src/main/java/org/apache/commons/net/ftp/FTPFile.java b/src/main/java/org/apache/commons/net/ftp/FTPFile.java
index cd83dbc87..21689865b 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPFile.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPFile.java
@@ -118 +118,2 @@ public class FTPFile implements Serializable {
-     * Gets the name of the group owning the file. Sometimes this will be a string representation of the group number.
+     * Gets the name of the group owning the file. Sometimes this will be a string representation of the group
+     * number.
@@ -136 +137,2 @@ public class FTPFile implements Serializable {
-     * If the FTPFile is a symbolic link, this method returns the name of the file being pointed to by the symbolic link. Otherwise it returns null.
+     * If the FTPFile is a symbolic link, this method returns the name of the file being pointed to by the symbolic
+     * link. Otherwise it returns null.
@@ -189,0 +192 @@ public class FTPFile implements Serializable {
+
@@ -191 +194,2 @@ public class FTPFile implements Serializable {
-     * Gets the type of the file (one of the <code>_TYPE</code> constants), e.g., if it is a directory, a regular file, or a symbolic link.
+     * Gets the type of the file (one of the <code>_TYPE</code> constants), e.g., if it is a directory, a regular
+     * file, or a symbolic link.
@@ -209,2 +213,2 @@ public class FTPFile implements Serializable {
-     * Tests if the given access group (one of the <code> _ACCESS </code> constants) has the given access permission (one of the <code> _PERMISSION </code>
-     * constants) to the file.
+     * Tests if the given access group (one of the <code> _ACCESS </code> constants) has the given access
+     * permission (one of the <code> _PERMISSION </code> constants) to the file.
@@ -212 +216 @@ public class FTPFile implements Serializable {
-     * @param access     The access group (one of the <code> _ACCESS </code> constants)
+     * @param access The access group (one of the <code> _ACCESS </code> constants)
@@ -261 +265,2 @@ public class FTPFile implements Serializable {
-     * Tests whether an entry is valid or not. If the entry is invalid, only the {@link #getRawListing()} method will be useful. Other methods may fail.
+     * Tests whether an entry is valid or not. If the entry is invalid, only the {@link #getRawListing()}
+     * method will be useful. Other methods may fail.
@@ -312 +317,2 @@ public class FTPFile implements Serializable {
-     * If the FTPFile is a symbolic link, use this method to set the name of the file being pointed to by the symbolic link.
+     * If the FTPFile is a symbolic link, use this method to set the name of the file being pointed to by the symbolic
+     * link.
@@ -330,2 +336,2 @@ public class FTPFile implements Serializable {
-     * Sets if the given access group (one of the <code> _ACCESS </code> constants) has the given access permission (one of the <code> _PERMISSION </code>
-     * constants) to the file.
+     * Sets if the given access group (one of the <code> _ACCESS </code> constants) has the given access permission (one
+     * of the <code> _PERMISSION </code> constants) to the file.
@@ -333 +339 @@ public class FTPFile implements Serializable {
-     * @param access     The access group (one of the <code> _ACCESS </code> constants)
+     * @param access The access group (one of the <code> _ACCESS </code> constants)
@@ -335 +341 @@ public class FTPFile implements Serializable {
-     * @param value      True if permission is allowed, false if not.
+     * @param value True if permission is allowed, false if not.
@@ -361 +367,2 @@ public class FTPFile implements Serializable {
-     * Sets the file timestamp. This usually the last modification time. The parameter is not cloned, so do not alter its value after calling this method.
+     * Sets the file timestamp. This usually the last modification time. The parameter is not cloned, so do not alter its
+     * value after calling this method.
@@ -388,2 +395,3 @@ public class FTPFile implements Serializable {
-     * Gets a string representation of the FTPFile information. This currently mimics the Unix listing format. This method uses the time zone of the Calendar
-     * entry, which is the server time zone (if one was provided) otherwise it is the local time zone.
+     * Gets a string representation of the FTPFile information. This currently mimics the Unix listing format. This
+     * method uses the time zone of the Calendar entry, which is the server time zone (if one was provided) otherwise it
+     * is the local time zone.
@@ -391 +399,2 @@ public class FTPFile implements Serializable {
-     * Note: if the instance is not valid {@link #isValid()}, no useful information can be returned. In this case, use {@link #getRawListing()} instead.
+     * Note: if the instance is not valid {@link #isValid()}, no useful information can be returned. In this case, use
+     * {@link #getRawListing()} instead.
@@ -402,2 +411,2 @@ public class FTPFile implements Serializable {
-     * Gets a string representation of the FTPFile information. This currently mimics the Unix listing format. This method allows the Calendar time zone to be
-     * overridden.
+     * Gets a string representation of the FTPFile information. This currently mimics the Unix listing format. This
+     * method allows the Calendar time zone to be overridden.
@@ -405 +414,2 @@ public class FTPFile implements Serializable {
-     * Note: if the instance is not valid {@link #isValid()}, no useful information can be returned. In this case, use {@link #getRawListing()} instead.
+     * Note: if the instance is not valid {@link #isValid()}, no useful information can be returned. In this case, use
+     * {@link #getRawListing()} instead.
@@ -471 +481,2 @@ public class FTPFile implements Serializable {
-     * Serialization is unnecessary for this class. Reject attempts to do so until such time as the Serializable attribute can be dropped.
+        Serialization is unnecessary for this class.
+        Reject attempts to do so until such time as the Serializable attribute can be dropped.
@@ -474 +485,2 @@ public class FTPFile implements Serializable {
-    private void writeObject(final java.io.ObjectOutputStream out) throws IOException {
+    private void writeObject(final java.io.ObjectOutputStream out) throws IOException
+    {
@@ -478 +490,2 @@ public class FTPFile implements Serializable {
-    private void readObject(final java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {
+    private void readObject(final java.io.ObjectInputStream in) throws IOException, ClassNotFoundException
+    {
@@ -481,0 +495 @@ public class FTPFile implements Serializable {
+
diff --git a/src/main/java/org/apache/commons/net/ftp/FTPFileEntryParser.java b/src/main/java/org/apache/commons/net/ftp/FTPFileEntryParser.java
index 29a46208d..9fa7987cc 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPFileEntryParser.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPFileEntryParser.java
@@ -19 +18,0 @@ package org.apache.commons.net.ftp;
-
@@ -25,3 +24,6 @@ import java.util.List;
- * FTPFileEntryParser defines the interface for parsing a single FTP file listing and converting that information into an
- * {@link org.apache.commons.net.ftp.FTPFile} instance. Sometimes you will want to parse unusual listing formats, in which case you would create your own
- * implementation of FTPFileEntryParser and if necessary, subclass FTPFile.
+ * FTPFileEntryParser defines the interface for parsing a single FTP file
+ * listing and converting that information into an
+ * {@link org.apache.commons.net.ftp.FTPFile} instance.
+ * Sometimes you will want to parse unusual listing formats, in which
+ * case you would create your own implementation of FTPFileEntryParser and
+ * if necessary, subclass FTPFile.
@@ -29 +31,2 @@ import java.util.List;
- * Here are some examples showing how to use one of the classes that implement this interface.
+ * Here are some examples showing how to use one of the classes that
+ * implement this interface.
@@ -32,2 +35,5 @@ import java.util.List;
- * The first example uses the <code>FTPClient.listFiles()</code> API to pull the whole list from the subfolder <code>subfolder</code> in one call, attempting to
- * automatically detect the parser type. This method, without a parserKey parameter, indicates that autodection should be used.
+ * The first example uses the <code>FTPClient.listFiles()</code>
+ * API to pull the whole list from the subfolder <code>subfolder</code> in
+ * one call, attempting to automatically detect the parser type.  This
+ * method, without a parserKey parameter, indicates that autodection should
+ * be used.
@@ -36,4 +42,4 @@ import java.util.List;
- * FTPClient f = FTPClient();
- * f.connect(server);
- * f.login(username, password);
- * FTPFile[] files = f.listFiles("subfolder");
+ *    FTPClient f=FTPClient();
+ *    f.connect(server);
+ *    f.login(username, password);
+ *    FTPFile[] files = f.listFiles("subfolder");
@@ -42,2 +48,5 @@ import java.util.List;
- * The second example uses the <code>FTPClient.listFiles()</code> API to pull the whole list from the current working directory in one call, but specifying by
- * classname the parser to be used. For this particular parser class, this approach is necessary since there is no way to autodetect this server type.
+ * The second example uses the <code>FTPClient.listFiles()</code>
+ * API to pull the whole list from the current working directory in one call,
+ * but specifying by classname the parser to be used.  For this particular
+ * parser class, this approach is necessary since there is no way to
+ * autodetect this server type.
@@ -46,4 +55,6 @@ import java.util.List;
- * FTPClient f = FTPClient();
- * f.connect(server);
- * f.login(username, password);
- * FTPFile[] files = f.listFiles("org.apache.commons.net.ftp.parser.EnterpriseUnixFTPFileEntryParser", ".");
+ *    FTPClient f=FTPClient();
+ *    f.connect(server);
+ *    f.login(username, password);
+ *    FTPFile[] files = f.listFiles(
+ *      "org.apache.commons.net.ftp.parser.EnterpriseUnixFTPFileEntryParser",
+ *      ".");
@@ -52,2 +63,3 @@ import java.util.List;
- * The third example uses the <code>FTPClient.listFiles()</code> API to pull a single file listing in an arbitrary directory in one call, specifying by KEY the
- * parser to be used, in this case, VMS.
+ * The third example uses the <code>FTPClient.listFiles()</code>
+ * API to pull a single file listing in an arbitrary directory in one call,
+ * specifying by KEY the parser to be used, in this case, VMS.
@@ -56,4 +68,4 @@ import java.util.List;
- * FTPClient f = FTPClient();
- * f.connect(server);
- * f.login(username, password);
- * FTPFile[] files = f.listFiles("VMS", "subfolder/foo.java");
+ *    FTPClient f=FTPClient();
+ *    f.connect(server);
+ *    f.login(username, password);
+ *    FTPFile[] files = f.listFiles("VMS", "subfolder/foo.java");
@@ -62 +74,2 @@ import java.util.List;
- * For an alternative approach, see the {@link FTPListParseEngine} class which provides iterative access.
+ * For an alternative approach, see the {@link FTPListParseEngine} class
+ * which provides iterative access.
@@ -67 +80,2 @@ import java.util.List;
-public interface FTPFileEntryParser {
+public interface FTPFileEntryParser
+{
@@ -69,3 +83,5 @@ public interface FTPFileEntryParser {
-     * Parses a line of an FTP server file listing and converts it into a usable format in the form of an <code> FTPFile </code> instance. If the file listing
-     * line doesn't describe a file, <code> null </code> should be returned, otherwise a <code> FTPFile </code> instance representing the files in the directory
-     * is returned.
+     * Parses a line of an FTP server file listing and converts it into a usable
+     * format in the form of an <code> FTPFile </code> instance.  If the
+     * file listing line doesn't describe a file, <code> null </code> should be
+     * returned, otherwise a <code> FTPFile </code> instance representing the
+     * files in the directory is returned.
@@ -79,2 +95,4 @@ public interface FTPFileEntryParser {
-     * This method is a hook for those implementors (such as VMSVersioningFTPEntryParser, and possibly others) which need to perform some action upon the
-     * FTPFileList after it has been created from the server stream, but before any clients see the list.
+     * This method is a hook for those implementors (such as
+     * VMSVersioningFTPEntryParser, and possibly others) which need to
+     * perform some action upon the FTPFileList after it has been created
+     * from the server stream, but before any clients see the list.
@@ -89,0 +108 @@ public interface FTPFileEntryParser {
+
@@ -91,2 +110,4 @@ public interface FTPFileEntryParser {
-     * Reads the next entry using the supplied BufferedReader object up to whatever delemits one entry from the next. Implementors must define this for the
-     * particular ftp system being parsed. In many but not all cases, this can be defined simply by calling BufferedReader.readLine().
+     * Reads the next entry using the supplied BufferedReader object up to
+     * whatever delemits one entry from the next.  Implementors must define
+     * this for the particular ftp system being parsed.  In many but not all
+     * cases, this can be defined simply by calling BufferedReader.readLine().
@@ -94 +115,2 @@ public interface FTPFileEntryParser {
-     * @param reader The BufferedReader object from which entries are to be read.
+     * @param reader The BufferedReader object from which entries are to be
+     * read.
@@ -100,0 +123 @@ public interface FTPFileEntryParser {
+
diff --git a/src/main/java/org/apache/commons/net/ftp/FTPFileEntryParserImpl.java b/src/main/java/org/apache/commons/net/ftp/FTPFileEntryParserImpl.java
index e2e9d457e..384bfe863 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPFileEntryParserImpl.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPFileEntryParserImpl.java
@@ -19 +18,0 @@ package org.apache.commons.net.ftp;
-
@@ -25,2 +24,3 @@ import java.util.List;
- * This abstract class implements both the older FTPFileListParser and newer FTPFileEntryParser interfaces with default functionality. All the classes in the
- * parser subpackage inherit from this.
+ * This abstract class implements both the older FTPFileListParser and
+ * newer FTPFileEntryParser interfaces with default functionality.
+ * All the classes in the parser subpackage inherit from this.
@@ -29 +29,3 @@ import java.util.List;
-public abstract class FTPFileEntryParserImpl implements FTPFileEntryParser {
+public abstract class FTPFileEntryParserImpl
+    implements FTPFileEntryParser
+{
@@ -33 +35,2 @@ public abstract class FTPFileEntryParserImpl implements FTPFileEntryParser {
-    public FTPFileEntryParserImpl() {
+    public FTPFileEntryParserImpl()
+    {
@@ -37,2 +40,4 @@ public abstract class FTPFileEntryParserImpl implements FTPFileEntryParser {
-     * This method is a hook for those implementors (such as VMSVersioningFTPEntryParser, and possibly others) which need to perform some action upon the
-     * FTPFileList after it has been created from the server stream, but before any clients see the list.
+     * This method is a hook for those implementors (such as
+     * VMSVersioningFTPEntryParser, and possibly others) which need to
+     * perform some action upon the FTPFileList after it has been created
+     * from the server stream, but before any clients see the list.
@@ -48,3 +53,2 @@ public abstract class FTPFileEntryParserImpl implements FTPFileEntryParser {
-        return original;
-    }
-
+         return original;
+     }
@@ -52,2 +56,3 @@ public abstract class FTPFileEntryParserImpl implements FTPFileEntryParser {
-     * Reads the next entry using the supplied BufferedReader object up to whatever delimits one entry from the next. This default implementation simply calls
-     * BufferedReader.readLine().
+     * Reads the next entry using the supplied BufferedReader object up to
+     * whatever delimits one entry from the next.  This default implementation
+     * simply calls BufferedReader.readLine().
@@ -55 +60,2 @@ public abstract class FTPFileEntryParserImpl implements FTPFileEntryParser {
-     * @param reader The BufferedReader object from which entries are to be read.
+     * @param reader The BufferedReader object from which entries are to be
+     * read.
@@ -61 +67,2 @@ public abstract class FTPFileEntryParserImpl implements FTPFileEntryParser {
-    public String readNextEntry(final BufferedReader reader) throws IOException {
+    public String readNextEntry(final BufferedReader reader) throws IOException
+    {
diff --git a/src/main/java/org/apache/commons/net/ftp/FTPFileFilters.java b/src/main/java/org/apache/commons/net/ftp/FTPFileFilters.java
index b1c3537d6..e9e0bbce8 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPFileFilters.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPFileFilters.java
@@ -25 +24,0 @@ import java.util.Objects;
- *
diff --git a/src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java b/src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java
index 3ee696a8d..c642eb169 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java
@@ -43 +43 @@ public class FTPHTTPClient extends FTPClient {
-    private static final byte[] CRLF = { '\r', '\n' };
+    private static final byte[] CRLF={'\r', '\n'};
@@ -69 +69 @@ public class FTPHTTPClient extends FTPClient {
-     * @param encoding  the encoding to use
+     * @param encoding the encoding to use
@@ -86,0 +87 @@ public class FTPHTTPClient extends FTPClient {
+
@@ -94 +95 @@ public class FTPHTTPClient extends FTPClient {
-     * @param encoding  the encoding to use
+     * @param encoding the encoding to use
@@ -96 +97,2 @@ public class FTPHTTPClient extends FTPClient {
-    public FTPHTTPClient(final String proxyHost, final int proxyPort, final String proxyUser, final String proxyPass, final Charset encoding) {
+    public FTPHTTPClient(final String proxyHost, final int proxyPort, final String proxyUser, final String proxyPass,
+            final Charset encoding) {
@@ -104,0 +107 @@ public class FTPHTTPClient extends FTPClient {
+
@@ -115 +118,2 @@ public class FTPHTTPClient extends FTPClient {
-    protected Socket _openDataConnection_(final int command, final String arg) throws IOException {
+    protected Socket _openDataConnection_(final int command, final String arg)
+    throws IOException {
@@ -126,2 +130,3 @@ public class FTPHTTPClient extends FTPClient {
-    protected Socket _openDataConnection_(final String command, final String arg) throws IOException {
-        // Force local passive mode, active mode not supported by through proxy
+    protected Socket _openDataConnection_(final String command, final String arg)
+    throws IOException {
+        //Force local passive mode, active mode not supported by through proxy
@@ -177 +182,2 @@ public class FTPHTTPClient extends FTPClient {
-        } catch (final Exception e) {
+        }
+        catch (final Exception e) {
@@ -185,2 +191,2 @@ public class FTPHTTPClient extends FTPClient {
-    private BufferedReader tunnelHandshake(final String host, final int port, final InputStream input, final OutputStream output)
-            throws IOException, UnsupportedEncodingException {
+    private BufferedReader tunnelHandshake(final String host, final int port, final InputStream input,
+            final OutputStream output) throws IOException, UnsupportedEncodingException {
@@ -234,0 +241,2 @@ public class FTPHTTPClient extends FTPClient {
+
+
diff --git a/src/main/java/org/apache/commons/net/ftp/FTPListParseEngine.java b/src/main/java/org/apache/commons/net/ftp/FTPListParseEngine.java
index 5946c54cc..a55a45878 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPListParseEngine.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPListParseEngine.java
@@ -30,0 +31 @@ import org.apache.commons.net.util.Charsets;
+
@@ -32 +33,2 @@ import org.apache.commons.net.util.Charsets;
- * This class handles the entire process of parsing a listing of file entries from the server.
+ * This class handles the entire process of parsing a listing of
+ * file entries from the server.
@@ -36,5 +38,10 @@ import org.apache.commons.net.util.Charsets;
- * The first part is comprised of reading the raw input into an internal list of strings. Every item in this list corresponds to an actual file. All extraneous
- * matter emitted by the server will have been removed by the end of this phase. This is accomplished in conjunction with the FTPFileEntryParser associated with
- * this engine, by calling its methods <code>readNextEntry()</code> - which handles the issue of what delimits one entry from another, usually but not always a
- * line feed and <code>preParse()</code> - which handles removal of extraneous matter such as the preliminary lines of a listing, removal of duplicates on
- * versioning systems, etc.
+ * The first part is comprised of reading the raw input into an internal
+ * list of strings.  Every item in this list corresponds to an actual
+ * file.  All extraneous matter emitted by the server will have been
+ * removed by the end of this phase.  This is accomplished in conjunction
+ * with the FTPFileEntryParser associated with this engine, by calling
+ * its methods <code>readNextEntry()</code> - which handles the issue of
+ * what delimits one entry from another, usually but not always a line
+ * feed and <code>preParse()</code> - which handles removal of
+ * extraneous matter such as the preliminary lines of a listing, removal
+ * of duplicates on versioning systems, etc.
@@ -42,3 +49,7 @@ import org.apache.commons.net.util.Charsets;
- * The second part is composed of the actual parsing, again in conjunction with the particular parser used by this engine. This is controlled by an iterator
- * over the internal list of strings. This may be done either in block mode, by calling the <code>getNext()</code> and <code>getPrevious()</code> methods to
- * provide "paged" output of less than the whole list at one time, or by calling the <code>getFiles()</code> method to return the entire list.
+ * The second part is composed of the actual parsing, again in conjunction
+ * with the particular parser used by this engine.  This is controlled
+ * by an iterator over the internal list of strings.  This may be done
+ * either in block mode, by calling the <code>getNext()</code> and
+ * <code>getPrevious()</code> methods to provide "paged" output of less
+ * than the whole list at one time, or by calling the
+ * <code>getFiles()</code> method to return the entire list.
@@ -49 +59,0 @@ import org.apache.commons.net.util.Charsets;
- *
@@ -51,4 +61,4 @@ import org.apache.commons.net.util.Charsets;
- * FTPClient f = FTPClient();
- * f.connect(server);
- * f.login(username, password);
- * FTPListParseEngine engine = f.initiateListParsing(directory);
+ *    FTPClient f=FTPClient();
+ *    f.connect(server);
+ *    f.login(username, password);
+ *    FTPListParseEngine engine = f.initiateListParsing(directory);
@@ -56,5 +66,5 @@ import org.apache.commons.net.util.Charsets;
- * while (engine.hasNext()) {
- *     FTPFile[] files = engine.getNext(25); // "page size" you want
- *     // do whatever you want with these files, display them, etc.
- *     // expensive FTPFile objects not created until needed.
- * }
+ *    while (engine.hasNext()) {
+ *       FTPFile[] files = engine.getNext(25);  // "page size" you want
+ *       //do whatever you want with these files, display them, etc.
+ *       //expensive FTPFile objects not created until needed.
+ *    }
@@ -63 +73,2 @@ import org.apache.commons.net.util.Charsets;
- * For unpaged access, simply use FTPClient.listFiles(). That method uses this class transparently.
+ * For unpaged access, simply use FTPClient.listFiles().  That method
+ * uses this class transparently.
@@ -84 +94,0 @@ public class FTPListParseEngine {
-     *
@@ -97 +107,2 @@ public class FTPListParseEngine {
-     * Returns an array of FTPFile objects containing the whole list of files returned by the server as read by this object's parser.
+     * Returns an array of FTPFile objects containing the whole list of
+     * files returned by the server as read by this object's parser.
@@ -99,2 +110,3 @@ public class FTPListParseEngine {
-     * @return an array of FTPFile objects containing the whole list of files returned by the server as read by this object's parser. None of the entries will
-     *         be null
+     * @return an array of FTPFile objects containing the whole list of
+     *         files returned by the server as read by this object's parser.
+     * None of the entries will be null
@@ -103 +115,2 @@ public class FTPListParseEngine {
-    public FTPFile[] getFiles() throws IOException // TODO remove; not actually thrown
+    public FTPFile[] getFiles()
+    throws IOException // TODO remove; not actually thrown
@@ -109,2 +122,3 @@ public class FTPListParseEngine {
-     * Returns an array of FTPFile objects containing the whole list of files returned by the server as read by this object's parser. The files are filtered
-     * before being added to the array.
+     * Returns an array of FTPFile objects containing the whole list of
+     * files returned by the server as read by this object's parser.
+     * The files are filtered before being added to the array.
@@ -114,4 +128,8 @@ public class FTPListParseEngine {
-     * @return an array of FTPFile objects containing the whole list of files returned by the server as read by this object's parser.
-     *         <p>
-     *         <b> NOTE:</b> This array may contain null members if any of the individual file listings failed to parse. The caller should check each entry for
-     *         null before referencing it, or use the a filter such as {@link FTPFileFilters#NON_NULL} which does not allow null entries.
+     * @return an array of FTPFile objects containing the whole list of
+     *         files returned by the server as read by this object's parser.
+     * <p><b>
+     * NOTE:</b> This array may contain null members if any of the
+     * individual file listings failed to parse.  The caller should
+     * check each entry for null before referencing it, or use the
+     * a filter such as {@link FTPFileFilters#NON_NULL} which does not
+     * allow null entries.
@@ -121 +139,2 @@ public class FTPListParseEngine {
-    public FTPFile[] getFiles(final FTPFileFilter filter) throws IOException // TODO remove; not actually thrown
+    public FTPFile[] getFiles(final FTPFileFilter filter)
+    throws IOException // TODO remove; not actually thrown
@@ -127,2 +146,3 @@ public class FTPListParseEngine {
-     * Returns a list of FTPFile objects containing the whole list of files returned by the server as read by this object's parser. The files are filtered
-     * before being added to the array.
+     * Returns a list of FTPFile objects containing the whole list of
+     * files returned by the server as read by this object's parser.
+     * The files are filtered before being added to the array.
@@ -132,4 +152,8 @@ public class FTPListParseEngine {
-     * @return a list of FTPFile objects containing the whole list of files returned by the server as read by this object's parser.
-     *         <p>
-     *         <b> NOTE:</b> This array may contain null members if any of the individual file listings failed to parse. The caller should check each entry for
-     *         null before referencing it, or use the a filter such as {@link FTPFileFilters#NON_NULL} which does not allow null entries.
+     * @return a list of FTPFile objects containing the whole list of
+     *         files returned by the server as read by this object's parser.
+     * <p><b>
+     * NOTE:</b> This array may contain null members if any of the
+     * individual file listings failed to parse.  The caller should
+     * check each entry for null before referencing it, or use the
+     * a filter such as {@link FTPFileFilters#NON_NULL} which does not
+     * allow null entries.
@@ -138 +162,2 @@ public class FTPListParseEngine {
-    public List<FTPFile> getFileList(final FTPFileFilter filter) {
+    public List<FTPFile> getFileList(final FTPFileFilter filter)
+    {
@@ -146,3 +171,6 @@ public class FTPListParseEngine {
-     * Returns an array of at most <code>quantityRequested</code> FTPFile objects starting at this object's internal iterator's current position. If fewer than
-     * <code>quantityRequested</code> such elements are available, the returned array will have a length equal to the number of entries at and after after the
-     * current position. If no such entries are found, this array will have a length of 0.
+     * Returns an array of at most <code>quantityRequested</code> FTPFile
+     * objects starting at this object's internal iterator's current position.
+     * If fewer than <code>quantityRequested</code> such
+     * elements are available, the returned array will have a length equal
+     * to the number of entries at and after after the current position.
+     * If no such entries are found, this array will have a length of 0.
@@ -150 +178,2 @@ public class FTPListParseEngine {
-     * After this method is called this object's internal iterator is advanced by a number of positions equal to the size of the array returned.
+     * After this method is called this object's internal iterator is advanced
+     * by a number of positions equal to the size of the array returned.
@@ -152 +181,2 @@ public class FTPListParseEngine {
-     * @param quantityRequested the maximum number of entries we want to get.
+     * @param quantityRequested
+     * the maximum number of entries we want to get.
@@ -154,5 +184,8 @@ public class FTPListParseEngine {
-     * @return an array of at most <code>quantityRequested</code> FTPFile objects starting at the current position of this iterator within its list and at least
-     *         the number of elements which exist in the list at and after its current position.
-     *         <p>
-     *         <b> NOTE:</b> This array may contain null members if any of the individual file listings failed to parse. The caller should check each entry for
-     *         null before referencing it.
+     * @return an array of at most <code>quantityRequested</code> FTPFile
+     * objects starting at the current position of this iterator within its
+     * list and at least the number of elements which  exist in the list at
+     * and after its current position.
+     * <p><b>
+     * NOTE:</b> This array may contain null members if any of the
+     * individual file listings failed to parse.  The caller should
+     * check each entry for null before referencing it.
@@ -177,2 +210,3 @@ public class FTPListParseEngine {
-     * Returns an array of at most <code>quantityRequested</code> FTPFile objects starting at this object's internal iterator's current position, and working
-     * back toward the beginning.
+     * Returns an array of at most <code>quantityRequested</code> FTPFile
+     * objects starting at this object's internal iterator's current position,
+     * and working back toward the beginning.
@@ -180,2 +214,4 @@ public class FTPListParseEngine {
-     * If fewer than <code>quantityRequested</code> such elements are available, the returned array will have a length equal to the number of entries at and
-     * after after the current position. If no such entries are found, this array will have a length of 0.
+     * If fewer than <code>quantityRequested</code> such
+     * elements are available, the returned array will have a length equal
+     * to the number of entries at and after after the current position.
+     * If no such entries are found, this array will have a length of 0.
@@ -183 +219,2 @@ public class FTPListParseEngine {
-     * After this method is called this object's internal iterator is moved back by a number of positions equal to the size of the array returned.
+     * After this method is called this object's internal iterator is moved
+     * back by a number of positions equal to the size of the array returned.
@@ -185 +222,2 @@ public class FTPListParseEngine {
-     * @param quantityRequested the maximum number of entries we want to get.
+     * @param quantityRequested
+     * the maximum number of entries we want to get.
@@ -187,6 +225,9 @@ public class FTPListParseEngine {
-     * @return an array of at most <code>quantityRequested</code> FTPFile objects starting at the current position of this iterator within its list and at least
-     *         the number of elements which exist in the list at and after its current position. This array will be in the same order as the underlying list
-     *         (not reversed).
-     *         <p>
-     *         <b> NOTE:</b> This array may contain null members if any of the individual file listings failed to parse. The caller should check each entry for
-     *         null before referencing it.
+     * @return an array of at most <code>quantityRequested</code> FTPFile
+     * objects starting at the current position of this iterator within its
+     * list and at least the number of elements which  exist in the list at
+     * and after its current position.  This array will be in the same order
+     * as the underlying list (not reversed).
+     * <p><b>
+     * NOTE:</b> This array may contain null members if any of the
+     * individual file listings failed to parse.  The caller should
+     * check each entry for null before referencing it.
@@ -203 +244 @@ public class FTPListParseEngine {
-            tmpResults.add(0, temp);
+            tmpResults.add(0,temp);
@@ -210 +251,2 @@ public class FTPListParseEngine {
-     * convenience method to allow clients to know whether this object's internal iterator's current position is at the end of the list.
+     * convenience method to allow clients to know whether this object's
+     * internal iterator's current position is at the end of the list.
@@ -212 +254,2 @@ public class FTPListParseEngine {
-     * @return true if internal iterator is not at end of list, false otherwise.
+     * @return true if internal iterator is not at end of list, false
+     * otherwise.
@@ -219 +262,2 @@ public class FTPListParseEngine {
-     * convenience method to allow clients to know whether this object's internal iterator's current position is at the beginning of the list.
+     * convenience method to allow clients to know whether this object's
+     * internal iterator's current position is at the beginning of the list.
@@ -221 +265,2 @@ public class FTPListParseEngine {
-     * @return true if internal iterator is not at beginning of list, false otherwise.
+     * @return true if internal iterator is not at beginning of list, false
+     * otherwise.
@@ -228,3 +273,4 @@ public class FTPListParseEngine {
-     * Internal method for reading (and closing) the input into the <code>entries</code> list. After this method has completed, <code>entries</code> will
-     * contain a collection of entries (as defined by <code>FTPFileEntryParser.readNextEntry()</code>), but this may contain various non-entry preliminary lines
-     * from the server output, duplicates, and other data that will not be part of the final listing.
+     * Internal method for reading (and closing) the input into the <code>entries</code> list. After this method has
+     * completed, <code>entries</code> will contain a collection of entries (as defined by
+     * <code>FTPFileEntryParser.readNextEntry()</code>), but this may contain various non-entry preliminary lines from
+     * the server output, duplicates, and other data that will not be part of the final listing.
@@ -238 +284,2 @@ public class FTPListParseEngine {
-        try (final BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, Charsets.toCharset(charsetName)))) {
+        try (final BufferedReader reader = new BufferedReader(
+            new InputStreamReader(inputStream, Charsets.toCharset(charsetName)))) {
@@ -251 +297,0 @@ public class FTPListParseEngine {
-     *
@@ -255 +301 @@ public class FTPListParseEngine {
-     */
+    */
@@ -262,2 +308,3 @@ public class FTPListParseEngine {
-     * Reads (and closes) the initial reading and preparsing of the list returned by the server. After this method has completed, this object will contain a
-     * list of unparsed entries (Strings) each referring to a unique file on the server.
+     * Reads (and closes) the initial reading and preparsing of the list returned by the server. After this method has
+     * completed, this object will contain a list of unparsed entries (Strings) each referring to a unique file on the
+     * server.
diff --git a/src/main/java/org/apache/commons/net/ftp/FTPReply.java b/src/main/java/org/apache/commons/net/ftp/FTPReply.java
index 3cf1b7603..70aff166a 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPReply.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPReply.java
@@ -21,2 +21,4 @@ package org.apache.commons.net.ftp;
- * FTPReply stores a set of constants for FTP reply codes. To interpret the meaning of the codes, familiarity with RFC 959 is assumed. The mnemonic constant
- * names are transcriptions from the code descriptions of RFC 959.
+ * FTPReply stores a set of constants for FTP reply codes.  To interpret
+ * the meaning of the codes, familiarity with RFC 959 is assumed.
+ * The mnemonic constant names are transcriptions from the code descriptions
+ * of RFC 959.
@@ -27 +29,2 @@ package org.apache.commons.net.ftp;
-public final class FTPReply {
+public final class FTPReply
+{
@@ -100,2 +103,4 @@ public final class FTPReply {
-     * Determine if a reply code is a negative permanent response. All codes beginning with a 5 are negative permanent responses. The FTP server will send a
-     * negative permanent response on the failure of a command that cannot be reattempted with success.
+     * Determine if a reply code is a negative permanent response.  All
+     * codes beginning with a 5 are negative permanent responses.
+     * The FTP server will send a negative permanent response on the
+     * failure of a command that cannot be reattempted with success.
@@ -103,2 +108,3 @@ public final class FTPReply {
-     * @param reply The reply code to test.
-     * @return True if a reply code is a negative permanent response, false if not.
+     * @param reply  The reply code to test.
+     * @return True if a reply code is a negative permanent response, false
+     *         if not.
@@ -106 +112,2 @@ public final class FTPReply {
-    public static boolean isNegativePermanent(final int reply) {
+    public static boolean isNegativePermanent(final int reply)
+    {
@@ -111,2 +118,4 @@ public final class FTPReply {
-     * Determine if a reply code is a negative transient response. All codes beginning with a 4 are negative transient responses. The FTP server will send a
-     * negative transient response on the failure of a command that can be reattempted with success.
+     * Determine if a reply code is a negative transient response.  All
+     * codes beginning with a 4 are negative transient responses.
+     * The FTP server will send a negative transient response on the
+     * failure of a command that can be reattempted with success.
@@ -114,2 +123,3 @@ public final class FTPReply {
-     * @param reply The reply code to test.
-     * @return True if a reply code is a negative transient response, false if not.
+     * @param reply  The reply code to test.
+     * @return True if a reply code is a negative transient response, false
+     *         if not.
@@ -117 +127,2 @@ public final class FTPReply {
-    public static boolean isNegativeTransient(final int reply) {
+    public static boolean isNegativeTransient(final int reply)
+    {
@@ -122,2 +133,4 @@ public final class FTPReply {
-     * Determine if a reply code is a positive completion response. All codes beginning with a 2 are positive completion responses. The FTP server will send a
-     * positive completion response on the final successful completion of a command.
+     * Determine if a reply code is a positive completion response.  All
+     * codes beginning with a 2 are positive completion responses.
+     * The FTP server will send a positive completion response on the final
+     * successful completion of a command.
@@ -125,2 +138,3 @@ public final class FTPReply {
-     * @param reply The reply code to test.
-     * @return True if a reply code is a positive completion response, false if not.
+     * @param reply  The reply code to test.
+     * @return True if a reply code is a positive completion response, false
+     *         if not.
@@ -128 +142,2 @@ public final class FTPReply {
-    public static boolean isPositiveCompletion(final int reply) {
+    public static boolean isPositiveCompletion(final int reply)
+    {
@@ -133,3 +148,7 @@ public final class FTPReply {
-     * Determine if a reply code is a positive intermediate response. All codes beginning with a 3 are positive intermediate responses. The FTP server will send
-     * a positive intermediate response on the successful completion of one part of a multi-part sequence of commands. For example, after a successful USER
-     * command, a positive intermediate response will be sent to indicate that the server is ready for the PASS command.
+     * Determine if a reply code is a positive intermediate response.  All
+     * codes beginning with a 3 are positive intermediate responses.
+     * The FTP server will send a positive intermediate response on the
+     * successful completion of one part of a multi-part sequence of
+     * commands.  For example, after a successful USER command, a positive
+     * intermediate response will be sent to indicate that the server is
+     * ready for the PASS command.
@@ -137,2 +156,3 @@ public final class FTPReply {
-     * @param reply The reply code to test.
-     * @return True if a reply code is a positive intermediate response, false if not.
+     * @param reply  The reply code to test.
+     * @return True if a reply code is a positive intermediate response, false
+     *         if not.
@@ -140 +160,2 @@ public final class FTPReply {
-    public static boolean isPositiveIntermediate(final int reply) {
+    public static boolean isPositiveIntermediate(final int reply)
+    {
@@ -145,3 +166,6 @@ public final class FTPReply {
-     * Determine if a reply code is a positive preliminary response. All codes beginning with a 1 are positive preliminary responses. Postitive preliminary
-     * responses are used to indicate tentative success. No further commands can be issued to the FTP server after a positive preliminary response until a
-     * follow up response is received from the server.
+     * Determine if a reply code is a positive preliminary response.  All
+     * codes beginning with a 1 are positive preliminary responses.
+     * Postitive preliminary responses are used to indicate tentative success.
+     * No further commands can be issued to the FTP server after a positive
+     * preliminary response until a follow up response is received from the
+     * server.
@@ -149,2 +173,3 @@ public final class FTPReply {
-     * @param reply The reply code to test.
-     * @return True if a reply code is a positive preliminary response, false if not.
+     * @param reply  The reply code to test.
+     * @return True if a reply code is a positive preliminary response, false
+     *         if not.
@@ -152 +177,2 @@ public final class FTPReply {
-    public static boolean isPositivePreliminary(final int reply) {
+    public static boolean isPositivePreliminary(final int reply)
+    {
@@ -158,3 +184,3 @@ public final class FTPReply {
-     *
-     * @param reply The reply code to test.
-     * @return True if a reply code is a protected response, false if not.
+     * @param reply  The reply code to test.
+     * @return True if a reply code is a protected response, false
+     *         if not.
@@ -163 +189,2 @@ public final class FTPReply {
-    public static boolean isProtectedReplyCode(final int reply) {
+    public static boolean isProtectedReplyCode(final int reply)
+    {
@@ -170,2 +197,3 @@ public final class FTPReply {
-    private FTPReply() {
-    }
+    private FTPReply()
+    {}
+
diff --git a/src/main/java/org/apache/commons/net/ftp/FTPSClient.java b/src/main/java/org/apache/commons/net/ftp/FTPSClient.java
index 47f321375..6a0befc05 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPSClient.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPSClient.java
@@ -46,4 +46,2 @@ import org.apache.commons.net.util.TrustManagerUtils;
- * FTP over SSL processing. If desired, the JVM property -Djavax.net.debug=all can be used to see wire-level SSL details.
- *
- * Warning: the hostname is not verified against the certificate by default, use {@link #setHostnameVerifier(HostnameVerifier)} or
- * {@link #setEndpointCheckingEnabled(boolean)} (on Java 1.7+) to enable verification. Verification is only performed on client mode connections.
+ * FTP over SSL processing. If desired, the JVM property -Djavax.net.debug=all can be used to
+ * see wire-level SSL details.
@@ -50,0 +49,3 @@ import org.apache.commons.net.util.TrustManagerUtils;
+ * Warning: the hostname is not verified against the certificate by default, use
+ * {@link #setHostnameVerifier(HostnameVerifier)} or {@link #setEndpointCheckingEnabled(boolean)}
+ * (on Java 1.7+) to enable verification. Verification is only performed on client mode connections.
@@ -65,2 +66,2 @@ public class FTPSClient extends FTPClient {
-    /** The value that I can set in PROT command (C = Clear, P = Protected) */
-    private static final String[] PROT_COMMAND_VALUE = { "C", "E", "S", "P" };
+    /** The value that I can set in PROT command  (C = Clear, P = Protected) */
+    private static final String[] PROT_COMMAND_VALUE = {"C","E","S","P"};
@@ -74 +75 @@ public class FTPSClient extends FTPClient {
-    /** The ADAT (Authentication/Security Data) command. */
+    /**  The ADAT (Authentication/Security Data) command. */
@@ -76 +77 @@ public class FTPSClient extends FTPClient {
-    /** The PROT (Data Channel Protection Level) command. */
+    /**  The PROT (Data Channel Protection Level) command. */
@@ -78 +79 @@ public class FTPSClient extends FTPClient {
-    /** The PBSZ (Protection Buffer Size) command. */
+    /**  The PBSZ (Protection Buffer Size) command. */
@@ -80 +81 @@ public class FTPSClient extends FTPClient {
-    /** The MIC (Integrity Protected Command) command. */
+    /**  The MIC (Integrity Protected Command) command. */
@@ -82 +83 @@ public class FTPSClient extends FTPClient {
-    /** The CONF (Confidentiality Protected Command) command. */
+    /**  The CONF (Confidentiality Protected Command) command. */
@@ -84 +85 @@ public class FTPSClient extends FTPClient {
-    /** The ENC (Privacy Protected Command) command. */
+    /**  The ENC (Privacy Protected Command) command. */
@@ -86 +87 @@ public class FTPSClient extends FTPClient {
-    /** The CCC (Clear Command Channel) command. */
+    /**  The CCC (Clear Command Channel) command. */
@@ -128,2 +129,2 @@ public class FTPSClient extends FTPClient {
-    /**
-     * The FTPS {@link TrustManager} implementation, default validate only {@link TrustManagerUtils#getValidateServerCertificateTrustManager()}.
+    /** The FTPS {@link TrustManager} implementation, default validate only
+     * {@link TrustManagerUtils#getValidateServerCertificateTrustManager()}.
@@ -152,2 +153,2 @@ public class FTPSClient extends FTPClient {
-     * Constructor for FTPSClient, using {@link #DEFAULT_PROTOCOL} - i.e. TLS Calls {@link #FTPSClient(String, boolean)}
-     *
+     * Constructor for FTPSClient, using {@link #DEFAULT_PROTOCOL} - i.e. TLS
+     * Calls {@link #FTPSClient(String, boolean)}
@@ -159,0 +161 @@ public class FTPSClient extends FTPClient {
+
@@ -161,3 +163,2 @@ public class FTPSClient extends FTPClient {
-     * Constructor for FTPSClient, using {@link #DEFAULT_PROTOCOL} - i.e. TLS The default TrustManager is set from
-     * {@link TrustManagerUtils#getValidateServerCertificateTrustManager()}
-     *
+     * Constructor for FTPSClient, using {@link #DEFAULT_PROTOCOL} - i.e. TLS
+     * The default TrustManager is set from {@link TrustManagerUtils#getValidateServerCertificateTrustManager()}
@@ -165 +166 @@ public class FTPSClient extends FTPClient {
-     * @param context    A pre-configured SSL Context
+     * @param context A pre-configured SSL Context
@@ -173,2 +174,3 @@ public class FTPSClient extends FTPClient {
-     * Constructor for FTPSClient, using {@link #DEFAULT_PROTOCOL} - i.e. TLS and isImplicit {@code false} Calls {@link #FTPSClient(boolean, SSLContext)}
-     *
+     * Constructor for FTPSClient, using {@link #DEFAULT_PROTOCOL} - i.e. TLS
+     * and isImplicit {@code false}
+     * Calls {@link #FTPSClient(boolean, SSLContext)}
@@ -180,0 +183 @@ public class FTPSClient extends FTPClient {
+
@@ -191,4 +194,5 @@ public class FTPSClient extends FTPClient {
-     * Constructor for FTPSClient allowing specification of protocol and security mode. If isImplicit is true, the port is set to {@link #DEFAULT_FTPS_PORT}
-     * i.e. 990. The default TrustManager is set from {@link TrustManagerUtils#getValidateServerCertificateTrustManager()}
-     *
-     * @param protocol   the protocol
+     * Constructor for FTPSClient allowing specification of protocol
+     * and security mode. If isImplicit is true, the port is set to
+     * {@link #DEFAULT_FTPS_PORT} i.e. 990.
+     * The default TrustManager is set from {@link TrustManagerUtils#getValidateServerCertificateTrustManager()}
+     * @param protocol the protocol
@@ -206,3 +210,4 @@ public class FTPSClient extends FTPClient {
-     * Because there are so many connect() methods, the _connectAction_() method is provided as a means of performing some action immediately after establishing
-     * a connection, rather than reimplementing all of the connect() methods.
-     *
+     * Because there are so many connect() methods,
+     * the _connectAction_() method is provided as a means of performing
+     * some action immediately after establishing a connection,
+     * rather than reimplementing all of the connect() methods.
@@ -228,2 +233,2 @@ public class FTPSClient extends FTPClient {
-     * Returns a socket of the data connection. Wrapped as an {@link SSLSocket}, which carries out handshake processing.
-     *
+     * Returns a socket of the data connection.
+     * Wrapped as an {@link SSLSocket}, which carries out handshake processing.
@@ -231,3 +236,6 @@ public class FTPSClient extends FTPClient {
-     * @param arg     The arguments to the FTP command. If this parameter is set to null, then the command is sent with no arguments.
-     * @return corresponding to the established data connection. Null is returned if an FTP protocol error is reported at any point during the establishment and
-     *         initialization of the connection.
+     * @param arg The arguments to the FTP command.
+     * If this parameter is set to null, then the command is sent with
+     * no arguments.
+     * @return corresponding to the established data connection.
+     * Null is returned if an FTP protocol error is reported at any point
+     * during the establishment and initialization of the connection.
@@ -242 +250,2 @@ public class FTPSClient extends FTPClient {
-    protected Socket _openDataConnection_(final int command, final String arg) throws IOException {
+    protected Socket _openDataConnection_(final int command, final String arg)
+            throws IOException {
@@ -250,3 +259,4 @@ public class FTPSClient extends FTPClient {
-     * @param arg     The arguments to the FTP command. If this parameter is set to null, then the command is sent with no arguments.
-     * @return corresponding to the established data connection. Null is returned if an FTP protocol error is reported at any point during the establishment and
-     *         initialization of the connection.
+     * @param arg The arguments to the FTP command. If this parameter is set to null, then the command is sent with no
+     *        arguments.
+     * @return corresponding to the established data connection. Null is returned if an FTP protocol error is reported
+     *         at any point during the establishment and initialization of the connection.
@@ -285,2 +295,5 @@ public class FTPSClient extends FTPClient {
-     * Establishes a data connection with the FTP server, returning a Socket for the connection if successful. If a restart offset has been set with
-     * {@link #setRestartOffset(long)}, a REST command is issued to the server with the offset as an argument before establishing the data connection. Active
+     * Establishes a data connection with the FTP server, returning
+     * a Socket for the connection if successful.  If a restart
+     * offset has been set with {@link #setRestartOffset(long)},
+     * a REST command is issued to the server with the offset as
+     * an argument before establishing the data connection.  Active
@@ -289,5 +302,9 @@ public class FTPSClient extends FTPClient {
-     * @param command The text representation of the FTP command to send.
-     * @param arg     The arguments to the FTP command. If this parameter is set to null, then the command is sent with no argument.
-     * @return A Socket corresponding to the established data connection. Null is returned if an FTP protocol error is reported at any point during the
-     *         establishment and initialization of the connection.
-     * @throws IOException If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @param command  The text representation of the FTP command to send.
+     * @param arg The arguments to the FTP command.  If this parameter is
+     *             set to null, then the command is sent with no argument.
+     * @return A Socket corresponding to the established data connection.
+     *         Null is returned if an FTP protocol error is reported at
+     *         any point during the establishment and initialization of
+     *         the connection.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -297 +314,2 @@ public class FTPSClient extends FTPClient {
-        if (getDataConnectionMode() != ACTIVE_LOCAL_DATA_CONNECTION_MODE && getDataConnectionMode() != PASSIVE_LOCAL_DATA_CONNECTION_MODE) {
+        if (getDataConnectionMode() != ACTIVE_LOCAL_DATA_CONNECTION_MODE &&
+                getDataConnectionMode() != PASSIVE_LOCAL_DATA_CONNECTION_MODE) {
@@ -306 +324,2 @@ public class FTPSClient extends FTPClient {
-        if (getDataConnectionMode() == ACTIVE_LOCAL_DATA_CONNECTION_MODE) {
+        if (getDataConnectionMode() == ACTIVE_LOCAL_DATA_CONNECTION_MODE)
+        {
@@ -334,2 +353,2 @@ public class FTPSClient extends FTPClient {
-                // the data connection. It may be desirable to let this be a
-                // separately configurable value. In any case, we really want
+                // the data connection.  It may be desirable to let this be a
+                // separately configurable value.  In any case, we really want
@@ -353 +372,3 @@ public class FTPSClient extends FTPClient {
-        } else { // We must be in PASSIVE_LOCAL_DATA_CONNECTION_MODE
+        }
+        else
+        { // We must be in PASSIVE_LOCAL_DATA_CONNECTION_MODE
@@ -363 +384,2 @@ public class FTPSClient extends FTPClient {
-            if (attemptEPSV && epsv() == FTPReply.ENTERING_EPSV_MODE) {
+            if (attemptEPSV && epsv() == FTPReply.ENTERING_EPSV_MODE)
+            {
@@ -365 +387,3 @@ public class FTPSClient extends FTPClient {
-            } else {
+            }
+            else
+            {
@@ -393,2 +417,2 @@ public class FTPSClient extends FTPClient {
-            // the data connection. It may be desirable to let this be a
-            // separately configurable value. In any case, we really want
+            // the data connection.  It may be desirable to let this be a
+            // separately configurable value.  In any case, we really want
@@ -406 +430,2 @@ public class FTPSClient extends FTPClient {
-            if ((getRestartOffset() > 0) && !restart(getRestartOffset())) {
+            if ((getRestartOffset() > 0) && !restart(getRestartOffset()))
+            {
@@ -411 +436,2 @@ public class FTPSClient extends FTPClient {
-            if (!FTPReply.isPositivePreliminary(sendCommand(command, arg))) {
+            if (!FTPReply.isPositivePreliminary(sendCommand(command, arg)))
+            {
@@ -417 +443,2 @@ public class FTPSClient extends FTPClient {
-        if (isRemoteVerificationEnabled() && !verifyRemote(socket)) {
+        if (isRemoteVerificationEnabled() && !verifyRemote(socket))
+        {
@@ -424 +451,2 @@ public class FTPSClient extends FTPClient {
-                    "Host attempting data connection " + socketHost.getHostAddress() + " is not same as server " + getRemoteAddress().getHostAddress());
+                    "Host attempting data connection " + socketHost.getHostAddress() +
+                            " is not same as server " + getRemoteAddress().getHostAddress());
@@ -430,9 +458,11 @@ public class FTPSClient extends FTPClient {
-    /**
-     * Performs any custom initialization for a newly created SSLSocket (before the SSL handshake happens). Called by {@link #_openDataConnection_(int, String)}
-     * immediately after creating the socket. The default implementation is a no-op
-     *
-     * @param socket the socket to set up
-     * @throws IOException on error
-     * @since 3.1
-     */
-    protected void _prepareDataSocket_(final Socket socket) throws IOException {
+        /**
+         * Performs any custom initialization for a newly created SSLSocket (before the SSL handshake happens). Called
+         * by {@link #_openDataConnection_(int, String)} immediately after creating the socket. The default
+         * implementation is a no-op
+         *
+         * @param socket the socket to set up
+         * @throws IOException on error
+         * @since 3.1
+         */
+        protected void _prepareDataSocket_(final Socket socket)
+            throws IOException {
@@ -443 +472,0 @@ public class FTPSClient extends FTPClient {
-     *
@@ -448 +477,2 @@ public class FTPSClient extends FTPClient {
-        for (final String element : PROT_COMMAND_VALUE) {
+        for (final String element : PROT_COMMAND_VALUE)
+        {
@@ -472 +502,2 @@ public class FTPSClient extends FTPClient {
-     * Closes the connection to the FTP server and restores connection parameters to the default values.
+     * Closes the connection to the FTP server and restores
+     * connection parameters to the default values.
@@ -474,3 +505,3 @@ public class FTPSClient extends FTPClient {
-     * Calls {@code setSocketFactory(null)} and {@code setServerSocketFactory(null)} to reset the factories that may have been changed during the session, e.g.
-     * by {@link #execPROT(String)}
-     *
+     * Calls {@code setSocketFactory(null)} and {@code setServerSocketFactory(null)}
+     * to reset the factories that may have been changed during the session,
+     * e.g. by {@link #execPROT(String)}
@@ -481 +512,2 @@ public class FTPSClient extends FTPClient {
-    public void disconnect() throws IOException {
+    public void disconnect() throws IOException
+    {
@@ -492 +523,0 @@ public class FTPSClient extends FTPClient {
-     *
@@ -495 +526,2 @@ public class FTPSClient extends FTPClient {
-     * @throws IOException If an I/O error occurs while sending the command.
+     * @throws IOException If an I/O error occurs while sending
+     * the command.
@@ -498,2 +530,4 @@ public class FTPSClient extends FTPClient {
-    public int execADAT(final byte[] data) throws IOException {
-        if (data != null) {
+    public int execADAT(final byte[] data) throws IOException
+    {
+        if (data != null)
+        {
@@ -507 +540,0 @@ public class FTPSClient extends FTPClient {
-     *
@@ -509 +542,2 @@ public class FTPSClient extends FTPClient {
-     * @throws IOException  If an I/O error occurs while either sending the command.
+     * @throws IOException If an I/O error occurs while either sending
+     * the command.
@@ -523 +556,0 @@ public class FTPSClient extends FTPClient {
-     *
@@ -526 +559,2 @@ public class FTPSClient extends FTPClient {
-     * @throws IOException If an I/O error occurs while sending the command.
+     * @throws IOException If an I/O error occurs while sending
+     * the command.
@@ -529 +563,2 @@ public class FTPSClient extends FTPClient {
-    public int execAUTH(final String mechanism) throws IOException {
+    public int execAUTH(final String mechanism) throws IOException
+    {
@@ -534,3 +569,3 @@ public class FTPSClient extends FTPClient {
-     * Send the CCC command to the server. The CCC (Clear Command Channel) command causes the underlying {@link SSLSocket} instance to be assigned to a plain
-     * {@link Socket} instances
-     *
+     * Send the CCC command to the server.
+     * The CCC (Clear Command Channel) command causes the underlying {@link SSLSocket} instance  to be assigned
+     * to a plain {@link Socket} instances
@@ -538 +573,2 @@ public class FTPSClient extends FTPClient {
-     * @throws IOException If an I/O error occurs while sending the command.
+     * @throws IOException If an I/O error occurs while sending
+     * the command.
@@ -541 +577,2 @@ public class FTPSClient extends FTPClient {
-    public int execCCC() throws IOException {
+    public int execCCC() throws IOException
+    {
@@ -559 +595,0 @@ public class FTPSClient extends FTPClient {
-     *
@@ -562 +598,2 @@ public class FTPSClient extends FTPClient {
-     * @throws IOException If an I/O error occurs while sending the command.
+     * @throws IOException If an I/O error occurs while sending
+     * the command.
@@ -565,2 +602,4 @@ public class FTPSClient extends FTPClient {
-    public int execCONF(final byte[] data) throws IOException {
-        if (data != null) {
+    public int execCONF(final byte[] data) throws IOException
+    {
+        if (data != null)
+        {
@@ -574 +612,0 @@ public class FTPSClient extends FTPClient {
-     *
@@ -577 +615,2 @@ public class FTPSClient extends FTPClient {
-     * @throws IOException If an I/O error occurs while sending the command.
+     * @throws IOException If an I/O error occurs while sending
+     * the command.
@@ -580,2 +619,4 @@ public class FTPSClient extends FTPClient {
-    public int execENC(final byte[] data) throws IOException {
-        if (data != null) {
+    public int execENC(final byte[] data) throws IOException
+    {
+        if (data != null)
+        {
@@ -589 +629,0 @@ public class FTPSClient extends FTPClient {
-     *
@@ -592 +632,2 @@ public class FTPSClient extends FTPClient {
-     * @throws IOException If an I/O error occurs while sending the command.
+     * @throws IOException If an I/O error occurs while sending
+     * the command.
@@ -595,2 +636,4 @@ public class FTPSClient extends FTPClient {
-    public int execMIC(final byte[] data) throws IOException {
-        if (data != null) {
+    public int execMIC(final byte[] data) throws IOException
+    {
+        if (data != null)
+        {
@@ -604 +646,0 @@ public class FTPSClient extends FTPClient {
-     *
@@ -607 +649,2 @@ public class FTPSClient extends FTPClient {
-     * @throws IOException  If an I/O error occurs while sending the command.
+     * @throws IOException If an I/O error occurs while sending
+     * the command.
@@ -628 +671,3 @@ public class FTPSClient extends FTPClient {
-     * <b>N.B.</b> the method calls {@link #setSocketFactory(javax.net.SocketFactory)} and {@link #setServerSocketFactory(javax.net.ServerSocketFactory)}
+     * <b>N.B.</b> the method calls
+     *  {@link #setSocketFactory(javax.net.SocketFactory)} and
+     *  {@link #setServerSocketFactory(javax.net.ServerSocketFactory)}
@@ -631,2 +676,3 @@ public class FTPSClient extends FTPClient {
-     * @throws SSLException If the server reply code does not equal {@code 200}.
-     * @throws IOException  If an I/O error occurs while sending the command.
+     * @throws SSLException If the server reply code does not equal  {@code 200}.
+     * @throws IOException If an I/O error occurs while sending
+     * the command.
@@ -656 +701,0 @@ public class FTPSClient extends FTPClient {
-     *
@@ -658 +703 @@ public class FTPSClient extends FTPClient {
-     * @param reply  where to find the prefix
+     * @param reply where to find the prefix
@@ -667 +712 @@ public class FTPSClient extends FTPClient {
-        return reply.substring(idx + prefix.length()).trim();
+        return reply.substring(idx+prefix.length()).trim();
@@ -672 +716,0 @@ public class FTPSClient extends FTPClient {
-     *
@@ -680,3 +724,3 @@ public class FTPSClient extends FTPClient {
-     * Returns the names of the cipher suites which could be enabled for use on this connection. When the underlying {@link Socket} is not an {@link SSLSocket}
-     * instance, returns null.
-     *
+     * Returns the names of the cipher suites which could be enabled
+     * for use on this connection.
+     * When the underlying {@link Socket} is not an {@link SSLSocket} instance, returns null.
@@ -687 +731 @@ public class FTPSClient extends FTPClient {
-            return ((SSLSocket) _socket_).getEnabledCipherSuites();
+            return ((SSLSocket)_socket_).getEnabledCipherSuites();
@@ -693,3 +737,3 @@ public class FTPSClient extends FTPClient {
-     * Returns the names of the protocol versions which are currently enabled for use on this connection. When the underlying {@link Socket} is not an
-     * {@link SSLSocket} instance, returns null.
-     *
+     * Returns the names of the protocol versions which are currently
+     * enabled for use on this connection.
+     * When the underlying {@link Socket} is not an {@link SSLSocket} instance, returns null.
@@ -700 +744 @@ public class FTPSClient extends FTPClient {
-            return ((SSLSocket) _socket_).getEnabledProtocols();
+            return ((SSLSocket)_socket_).getEnabledProtocols();
@@ -706,4 +750,7 @@ public class FTPSClient extends FTPClient {
-     * Returns true if new SSL sessions may be established by this socket. When the underlying {@link Socket} instance is not SSL-enabled (i.e. an instance of
-     * {@link SSLSocket} with {@link SSLSocket}{@link #getEnableSessionCreation()}) enabled, this returns False.
-     *
-     * @return true - Indicates that sessions may be created; this is the default. false - indicates that an existing session must be resumed.
+     * Returns true if new SSL sessions may be established by this socket.
+     * When the underlying {@link Socket} instance is not SSL-enabled (i.e. an
+     * instance of {@link SSLSocket} with {@link SSLSocket}{@link #getEnableSessionCreation()}) enabled,
+     * this returns False.
+     * @return true - Indicates that sessions may be created;
+     * this is the default.
+     * false - indicates that an existing session must be resumed.
@@ -713 +760 @@ public class FTPSClient extends FTPClient {
-            return ((SSLSocket) _socket_).getEnableSessionCreation();
+            return ((SSLSocket)_socket_).getEnableSessionCreation();
@@ -719,2 +766,2 @@ public class FTPSClient extends FTPClient {
-     * Get the currently configured {@link HostnameVerifier}. The verifier is only used on client mode connections.
-     *
+     * Get the currently configured {@link HostnameVerifier}.
+     * The verifier is only used on client mode connections.
@@ -724 +771,2 @@ public class FTPSClient extends FTPClient {
-    public HostnameVerifier getHostnameVerifier() {
+    public HostnameVerifier getHostnameVerifier()
+    {
@@ -738,3 +786,4 @@ public class FTPSClient extends FTPClient {
-     * Returns true if the socket will require client authentication. When the underlying {@link Socket} is not an {@link SSLSocket} instance, returns false.
-     *
-     * @return true - If the server mode socket should request that the client authenticate itself.
+     * Returns true if the socket will require client authentication.
+     * When the underlying {@link Socket} is not an {@link SSLSocket} instance, returns false.
+     * @return true - If the server mode socket should request
+     * that the client authenticate itself.
@@ -744 +793 @@ public class FTPSClient extends FTPClient {
-            return ((SSLSocket) _socket_).getNeedClientAuth();
+            return ((SSLSocket)_socket_).getNeedClientAuth();
@@ -759,4 +808,5 @@ public class FTPSClient extends FTPClient {
-     * Returns true if the socket is set to use client mode in its first handshake. When the underlying {@link Socket} is not an {@link SSLSocket} instance,
-     * returns false.
-     *
-     * @return true - If the socket should start its first handshake in "client" mode.
+     * Returns true if the socket is set to use client mode
+     * in its first handshake.
+     * When the underlying {@link Socket} is not an {@link SSLSocket} instance, returns false.
+     * @return true - If the socket should start its first handshake
+     * in "client" mode.
@@ -766 +816 @@ public class FTPSClient extends FTPClient {
-            return ((SSLSocket) _socket_).getUseClientMode();
+            return ((SSLSocket)_socket_).getUseClientMode();
@@ -772,3 +822,4 @@ public class FTPSClient extends FTPClient {
-     * Returns true if the socket will request client authentication. When the underlying {@link Socket} is not an {@link SSLSocket} instance, returns false.
-     *
-     * @return true - If the server mode socket should request that the client authenticate itself.
+     * Returns true if the socket will request client authentication.
+     * When the underlying {@link Socket} is not an {@link SSLSocket} instance, returns false.
+     * @return true - If the server mode socket should request
+     * that the client authenticate itself.
@@ -778 +829 @@ public class FTPSClient extends FTPClient {
-            return ((SSLSocket) _socket_).getWantClientAuth();
+            return ((SSLSocket)_socket_).getWantClientAuth();
@@ -785 +835,0 @@ public class FTPSClient extends FTPClient {
-     *
@@ -795 +845,2 @@ public class FTPSClient extends FTPClient {
-     * Return whether or not endpoint identification using the HTTPS algorithm on Java 1.7+ is enabled. The default behavior is for this to be disabled.
+     * Return whether or not endpoint identification using the HTTPS algorithm
+     * on Java 1.7+ is enabled. The default behavior is for this to be disabled.
@@ -802 +853,2 @@ public class FTPSClient extends FTPClient {
-    public boolean isEndpointCheckingEnabled() {
+    public boolean isEndpointCheckingEnabled()
+    {
@@ -808 +859,0 @@ public class FTPSClient extends FTPClient {
-     *
@@ -813 +864,2 @@ public class FTPSClient extends FTPClient {
-    public byte[] parseADATReply(final String reply) {
+    public byte[] parseADATReply(final String reply)
+    {
@@ -821 +873,2 @@ public class FTPSClient extends FTPClient {
-     * PBSZ command. pbsz value: 0 to (2^32)-1 decimal integer. Issues the command and parses the response to return the negotiated value.
+     * PBSZ command. pbsz value: 0 to (2^32)-1 decimal integer.
+     * Issues the command and parses the response to return the negotiated value.
@@ -825 +878,2 @@ public class FTPSClient extends FTPClient {
-     * @throws IOException  If an I/O error occurs while sending the command.
+     * @throws IOException If an I/O error occurs while sending
+     * the command.
@@ -844,3 +898,3 @@ public class FTPSClient extends FTPClient {
-     * Send an FTP command. A successful CCC (Clear Command Channel) command causes the underlying {@link SSLSocket} instance to be assigned to a plain
-     * {@link Socket}
-     *
+     * Send an FTP command.
+     * A successful CCC (Clear Command Channel) command causes the underlying {@link SSLSocket}
+     * instance to be assigned to a plain {@link Socket}
@@ -849 +903 @@ public class FTPSClient extends FTPClient {
-     * @throws IOException  If an I/O error occurs while sending the command.
+     * @throws IOException If an I/O error occurs while sending the command.
@@ -864,2 +918,6 @@ public class FTPSClient extends FTPClient {
-            _controlInput_ = new BufferedReader(new InputStreamReader(_socket_.getInputStream(), getControlEncoding()));
-            _controlOutput_ = new BufferedWriter(new OutputStreamWriter(_socket_.getOutputStream(), getControlEncoding()));
+            _controlInput_ = new BufferedReader(
+                new InputStreamReader(
+                    _socket_ .getInputStream(), getControlEncoding()));
+            _controlOutput_ = new BufferedWriter(
+                new OutputStreamWriter(
+                    _socket_.getOutputStream(), getControlEncoding()));
@@ -871,2 +929,2 @@ public class FTPSClient extends FTPClient {
-     * Set AUTH command use value. This processing is done before connected processing.
-     *
+     * Set AUTH command use value.
+     * This processing is done before connected processing.
@@ -880,2 +938,2 @@ public class FTPSClient extends FTPClient {
-     * Controls which particular cipher suites are enabled for use on this connection. Called before server negotiation.
-     *
+     * Controls which particular cipher suites are enabled for use on this
+     * connection. Called before server negotiation.
@@ -889,2 +947,2 @@ public class FTPSClient extends FTPClient {
-     * Controls which particular protocol versions are enabled for use on this connection. I perform setting before a server negotiation.
-     *
+     * Controls which particular protocol versions are enabled for use on this
+     * connection. I perform setting before a server negotiation.
@@ -899 +956,0 @@ public class FTPSClient extends FTPClient {
-     *
@@ -907 +964,2 @@ public class FTPSClient extends FTPClient {
-     * Automatic endpoint identification checking using the HTTPS algorithm is supported on Java 1.7+. The default behavior is for this to be disabled.
+     * Automatic endpoint identification checking using the HTTPS algorithm
+     * is supported on Java 1.7+. The default behavior is for this to be disabled.
@@ -914 +972,2 @@ public class FTPSClient extends FTPClient {
-    public void setEndpointCheckingEnabled(final boolean enable) {
+    public void setEndpointCheckingEnabled(final boolean enable)
+    {
@@ -919,2 +978,2 @@ public class FTPSClient extends FTPClient {
-     * Override the default {@link HostnameVerifier} to use. The verifier is only used on client mode connections.
-     *
+     * Override the default {@link HostnameVerifier} to use.
+     * The verifier is only used on client mode connections.
@@ -924 +983,2 @@ public class FTPSClient extends FTPClient {
-    public void setHostnameVerifier(final HostnameVerifier newHostnameVerifier) {
+    public void setHostnameVerifier(final HostnameVerifier newHostnameVerifier)
+    {
@@ -929,5 +989,5 @@ public class FTPSClient extends FTPClient {
-     * Set a {@link KeyManager} to use
-     *
-     * @param keyManager The KeyManager implementation to set.
-     * @see org.apache.commons.net.util.KeyManagerUtils
-     */
+    * Set a {@link KeyManager} to use
+    *
+    * @param keyManager The KeyManager implementation to set.
+    * @see org.apache.commons.net.util.KeyManagerUtils
+    */
@@ -940 +999,0 @@ public class FTPSClient extends FTPClient {
-     *
@@ -950 +1009,2 @@ public class FTPSClient extends FTPClient {
-     * Override the default {@link TrustManager} to use; if set to {@code null}, the default TrustManager from the JVM will be used.
+     * Override the default {@link TrustManager} to use; if set to {@code null},
+     * the default TrustManager from the JVM will be used.
@@ -960,2 +1020,2 @@ public class FTPSClient extends FTPClient {
-     * Configures the socket to use client (or server) mode in its first handshake.
-     *
+     * Configures the socket to use client (or server) mode in its first
+     * handshake.
@@ -969,2 +1029,3 @@ public class FTPSClient extends FTPClient {
-     * Configures the socket to request client authentication, but only if such a request is appropriate to the cipher suite negotiated.
-     *
+     * Configures the socket to request client authentication,
+     * but only if such a request is appropriate to the cipher
+     * suite negotiated.
@@ -978,2 +1039,2 @@ public class FTPSClient extends FTPClient {
-     * SSL/TLS negotiation. Acquires an SSL socket of a control connection and carries out handshake processing.
-     *
+     * SSL/TLS negotiation. Acquires an SSL socket of a control
+     * connection and carries out handshake processing.
@@ -1009,2 +1070,4 @@ public class FTPSClient extends FTPClient {
-        _controlInput_ = new BufferedReader(new InputStreamReader(socket.getInputStream(), getControlEncoding()));
-        _controlOutput_ = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), getControlEncoding()));
+        _controlInput_ = new BufferedReader(new InputStreamReader(
+                socket .getInputStream(), getControlEncoding()));
+        _controlOutput_ = new BufferedWriter(new OutputStreamWriter(
+                socket.getOutputStream(), getControlEncoding()));
@@ -1012 +1075,2 @@ public class FTPSClient extends FTPClient {
-        if (isClientMode && (hostnameVerifier != null && !hostnameVerifier.verify(_hostname_, socket.getSession()))) {
+        if (isClientMode && (hostnameVerifier != null &&
+            !hostnameVerifier.verify(_hostname_, socket.getSession()))) {
@@ -1019,2 +1083 @@ public class FTPSClient extends FTPClient {
-     *
-     * @param socket    main socket for proxy if enabled
+     * @param socket main socket for proxy if enabled
diff --git a/src/main/java/org/apache/commons/net/ftp/FTPSCommand.java b/src/main/java/org/apache/commons/net/ftp/FTPSCommand.java
index dc9c3aea9..b4b1f8767 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPSCommand.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPSCommand.java
@@ -22 +21,0 @@ package org.apache.commons.net.ftp;
- *
@@ -40 +39 @@ public final class FTPSCommand {
-    private static final String[] commands = { "AUTH", "ADAT", "PBSZ", "PROT", "CCC" };
+    private static final String[] commands = {"AUTH","ADAT","PBSZ","PROT","CCC"};
@@ -43 +42,2 @@ public final class FTPSCommand {
-     * Retrieve the FTPS command string corresponding to a specified command code.
+     * Retrieve the FTPS command string corresponding to a specified
+     * command code.
@@ -46 +46,2 @@ public final class FTPSCommand {
-     * @return The FTPS command string corresponding to a specified command code.
+     * @return The FTPS command string corresponding to a specified
+     *  command code.
diff --git a/src/main/java/org/apache/commons/net/ftp/FTPSServerSocketFactory.java b/src/main/java/org/apache/commons/net/ftp/FTPSServerSocketFactory.java
index 58beda783..46ad641c6 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPSServerSocketFactory.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPSServerSocketFactory.java
@@ -68 +68,2 @@ public class FTPSServerSocketFactory extends ServerSocketFactory {
-    public ServerSocket createServerSocket(final int port, final int backlog, final InetAddress ifAddress) throws IOException {
+    public ServerSocket createServerSocket(final int port, final int backlog, final InetAddress ifAddress)
+        throws IOException {
diff --git a/src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java b/src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java
index ef29131f3..211d74727 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java
@@ -42,3 +42,2 @@ public class FTPSSocketFactory extends SocketFactory {
-    /**
-     * @param port the port
-     * @return the socket
+    /** @param port the port
+     * @return  the socket
@@ -46,2 +45 @@ public class FTPSSocketFactory extends SocketFactory {
-     * @deprecated (2.2) use {@link FTPSServerSocketFactory#createServerSocket(int) instead}
-     */
+     * @deprecated (2.2) use {@link FTPSServerSocketFactory#createServerSocket(int) instead} */
@@ -53,2 +51 @@ public class FTPSSocketFactory extends SocketFactory {
-    /**
-     * @param port    the port
+    /** @param port  the port
@@ -56,4 +53,3 @@ public class FTPSSocketFactory extends SocketFactory {
-     * @return the socket
-     * @throws IOException on error
-     * @deprecated (2.2) use {@link FTPSServerSocketFactory#createServerSocket(int, int) instead}
-     */
+     * @return  the socket
+     * @throws IOException  on error
+     * @deprecated  (2.2) use {@link FTPSServerSocketFactory#createServerSocket(int, int) instead} */
@@ -65,3 +61,2 @@ public class FTPSSocketFactory extends SocketFactory {
-    /**
-     * @param port      the port
-     * @param backlog   the backlog
+    /** @param port  the port
+     * @param backlog the backlog
@@ -69,4 +64,3 @@ public class FTPSSocketFactory extends SocketFactory {
-     * @return the socket
-     * @throws IOException on error
-     * @deprecated (2.2) use {@link FTPSServerSocketFactory#createServerSocket(int, int, InetAddress) instead}
-     */
+     * @return  the socket
+     * @throws IOException  on error
+     * @deprecated  (2.2) use {@link FTPSServerSocketFactory#createServerSocket(int, int, InetAddress) instead} */
@@ -74 +68,2 @@ public class FTPSSocketFactory extends SocketFactory {
-    public java.net.ServerSocket createServerSocket(final int port, final int backlog, final InetAddress ifAddress) throws IOException {
+    public java.net.ServerSocket createServerSocket(final int port, final int backlog, final InetAddress ifAddress)
+            throws IOException {
@@ -80 +75 @@ public class FTPSSocketFactory extends SocketFactory {
-    public Socket createSocket() throws IOException {
+    public Socket createSocket() throws IOException{
@@ -92 +87,2 @@ public class FTPSSocketFactory extends SocketFactory {
-    public Socket createSocket(final InetAddress address, final int port, final InetAddress localAddress, final int localPort) throws IOException {
+    public Socket createSocket(final InetAddress address, final int port, final InetAddress localAddress,
+            final int localPort) throws IOException {
@@ -107,2 +103 @@ public class FTPSSocketFactory extends SocketFactory {
-    /**
-     * @param socket the socket
+    /** @param socket the socket
@@ -110,3 +105,2 @@ public class FTPSSocketFactory extends SocketFactory {
-     * @throws IOException on error
-     * @deprecated (2.2) use {@link FTPSServerSocketFactory#init(java.net.ServerSocket)}
-     */
+     * @throws IOException  on error
+     * @deprecated  (2.2) use {@link FTPSServerSocketFactory#init(java.net.ServerSocket)} */
diff --git a/src/main/java/org/apache/commons/net/ftp/FTPSTrustManager.java b/src/main/java/org/apache/commons/net/ftp/FTPSTrustManager.java
index d9797c948..7471b37b6 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPSTrustManager.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPSTrustManager.java
@@ -29 +28,0 @@ import org.apache.commons.net.util.NetConstants;
- *
@@ -31,2 +30,3 @@ import org.apache.commons.net.util.NetConstants;
- * @deprecated 3.0 use {@link org.apache.commons.net.util.TrustManagerUtils#getValidateServerCertificateTrustManager()
- *             TrustManagerUtils#getValidateServerCertificateTrustManager()} instead
+ * @deprecated 3.0 use
+ * {@link org.apache.commons.net.util.TrustManagerUtils#getValidateServerCertificateTrustManager()
+ *  TrustManagerUtils#getValidateServerCertificateTrustManager()} instead
@@ -35 +35,2 @@ import org.apache.commons.net.util.NetConstants;
-public class FTPSTrustManager implements X509TrustManager {
+public class FTPSTrustManager implements X509TrustManager
+{
@@ -40 +41,2 @@ public class FTPSTrustManager implements X509TrustManager {
-    public void checkClientTrusted(final X509Certificate[] certificates, final String authType) {
+    public void checkClientTrusted(final X509Certificate[] certificates, final String authType)
+    {
@@ -44,2 +46,4 @@ public class FTPSTrustManager implements X509TrustManager {
-    public void checkServerTrusted(final X509Certificate[] certificates, final String authType) throws CertificateException {
-        for (final X509Certificate certificate : certificates) {
+    public void checkServerTrusted(final X509Certificate[] certificates, final String authType) throws CertificateException
+    {
+        for (final X509Certificate certificate : certificates)
+        {
@@ -51 +55,2 @@ public class FTPSTrustManager implements X509TrustManager {
-    public X509Certificate[] getAcceptedIssuers() {
+    public X509Certificate[] getAcceptedIssuers()
+    {
diff --git a/src/main/java/org/apache/commons/net/ftp/parser/CompositeFileEntryParser.java b/src/main/java/org/apache/commons/net/ftp/parser/CompositeFileEntryParser.java
index 3d642ebbd..d405039fc 100644
--- a/src/main/java/org/apache/commons/net/ftp/parser/CompositeFileEntryParser.java
+++ b/src/main/java/org/apache/commons/net/ftp/parser/CompositeFileEntryParser.java
@@ -25,2 +25,5 @@ import org.apache.commons.net.ftp.FTPFileEntryParserImpl;
- * This implementation allows to pack some FileEntryParsers together and handle the case where to returned dir style isn't clearly defined. The matching parser
- * will be cached. If the cached parser wont match due to the server changed the dir style, a new matching parser will be searched.
+ * This implementation allows to pack some FileEntryParsers together
+ * and handle the case where to returned dir style isn't clearly defined.
+ * The matching parser will be cached.
+ * If the cached parser wont match due to the server changed the dir style,
+ * a new matching parser will be searched.
@@ -28 +31,2 @@ import org.apache.commons.net.ftp.FTPFileEntryParserImpl;
-public class CompositeFileEntryParser extends FTPFileEntryParserImpl {
+public class CompositeFileEntryParser extends FTPFileEntryParserImpl
+{
@@ -32 +36,2 @@ public class CompositeFileEntryParser extends FTPFileEntryParserImpl {
-    public CompositeFileEntryParser(final FTPFileEntryParser[] ftpFileEntryParsers) {
+    public CompositeFileEntryParser(final FTPFileEntryParser[] ftpFileEntryParsers)
+    {
@@ -38,2 +43,4 @@ public class CompositeFileEntryParser extends FTPFileEntryParserImpl {
-    public FTPFile parseFTPEntry(final String listEntry) {
-        if (cachedFtpFileEntryParser != null) {
+    public FTPFile parseFTPEntry(final String listEntry)
+    {
+        if (cachedFtpFileEntryParser != null)
+        {
@@ -42 +49,2 @@ public class CompositeFileEntryParser extends FTPFileEntryParserImpl {
-        for (final FTPFileEntryParser ftpFileEntryParser : ftpFileEntryParsers) {
+        for (final FTPFileEntryParser ftpFileEntryParser : ftpFileEntryParsers)
+        {
@@ -44 +52,2 @@ public class CompositeFileEntryParser extends FTPFileEntryParserImpl {
-            if (matched != null) {
+            if (matched != null)
+            {
diff --git a/src/main/java/org/apache/commons/net/ftp/parser/ConfigurableFTPFileEntryParserImpl.java b/src/main/java/org/apache/commons/net/ftp/parser/ConfigurableFTPFileEntryParserImpl.java
index 3ff88f095..ac886072e 100644
--- a/src/main/java/org/apache/commons/net/ftp/parser/ConfigurableFTPFileEntryParserImpl.java
+++ b/src/main/java/org/apache/commons/net/ftp/parser/ConfigurableFTPFileEntryParserImpl.java
@@ -25,0 +26 @@ import org.apache.commons.net.ftp.FTPClientConfig;
+
@@ -28,3 +29,6 @@ import org.apache.commons.net.ftp.FTPClientConfig;
- * This abstract class implements the common timestamp parsing algorithm for all the concrete parsers. Classes derived from this one will parse file listings
- * via a supplied regular expression that pulls out the date portion as a separate string which is passed to the underlying {@link FTPTimestampParser delegate}
- * to handle parsing of the file timestamp.
+ * This abstract class implements the common timestamp parsing
+ * algorithm for all the concrete parsers.  Classes derived from
+ * this one will parse file listings via a supplied regular expression
+ * that pulls out the date portion as a separate string which is
+ * passed to the underlying {@link FTPTimestampParser delegate} to
+ * handle parsing of the file timestamp.
@@ -32 +36,2 @@ import org.apache.commons.net.ftp.FTPClientConfig;
- * This class also implements the {@link Configurable Configurable} interface to allow the parser to be configured from the outside.
+ * This class also implements the {@link Configurable Configurable}
+ * interface to allow the parser to be configured from the outside.
@@ -36 +41,4 @@ import org.apache.commons.net.ftp.FTPClientConfig;
-public abstract class ConfigurableFTPFileEntryParserImpl extends RegexFTPFileEntryParserImpl implements Configurable {
+public abstract class ConfigurableFTPFileEntryParserImpl
+extends RegexFTPFileEntryParserImpl
+implements Configurable
+{
@@ -42,2 +50,2 @@ public abstract class ConfigurableFTPFileEntryParserImpl extends RegexFTPFileEnt
-     *
-     * @param regex Regular expression used main parsing of the file listing.
+     * @param regex  Regular expression used main parsing of the
+     * file listing.
@@ -45 +53,2 @@ public abstract class ConfigurableFTPFileEntryParserImpl extends RegexFTPFileEnt
-    public ConfigurableFTPFileEntryParserImpl(final String regex) {
+    public ConfigurableFTPFileEntryParserImpl(final String regex)
+    {
@@ -52,3 +61,4 @@ public abstract class ConfigurableFTPFileEntryParserImpl extends RegexFTPFileEnt
-     *
-     * @param regex Regular expression used main parsing of the file listing.
-     * @param flags the flags to apply, see {@link java.util.regex.Pattern#compile(String, int) Pattern#compile(String, int)}. Use 0 for none.
+     * @param regex  Regular expression used main parsing of the
+     * file listing.
+     * @param flags the flags to apply, see
+     * {@link java.util.regex.Pattern#compile(String, int) Pattern#compile(String, int)}. Use 0 for none.
@@ -57 +67,2 @@ public abstract class ConfigurableFTPFileEntryParserImpl extends RegexFTPFileEnt
-    public ConfigurableFTPFileEntryParserImpl(final String regex, final int flags) {
+    public ConfigurableFTPFileEntryParserImpl(final String regex, final int flags)
+    {
@@ -63,3 +74,6 @@ public abstract class ConfigurableFTPFileEntryParserImpl extends RegexFTPFileEnt
-     * Implementation of the {@link Configurable Configurable} interface. Configures this parser by delegating to the underlying Configurable FTPTimestampParser
-     * implementation, ' passing it the supplied {@link FTPClientConfig FTPClientConfig} if that is non-null or a default configuration defined by each concrete
-     * subclass.
+     * Implementation of the {@link  Configurable  Configurable}
+     * interface. Configures this parser by delegating to the
+     * underlying Configurable FTPTimestampParser implementation, '
+     * passing it the supplied {@link  FTPClientConfig FTPClientConfig}
+     * if that is non-null or a default configuration defined by
+     * each concrete subclass.
@@ -67,2 +81,3 @@ public abstract class ConfigurableFTPFileEntryParserImpl extends RegexFTPFileEnt
-     * @param config the configuration to be used to configure this parser. If it is null, a default configuration defined by each concrete subclass is used
-     *               instead.
+     * @param config the configuration to be used to configure this parser.
+     * If it is null, a default configuration defined by
+     * each concrete subclass is used instead.
@@ -71 +86,2 @@ public abstract class ConfigurableFTPFileEntryParserImpl extends RegexFTPFileEnt
-    public void configure(final FTPClientConfig config) {
+    public void configure(final FTPClientConfig config)
+    {
@@ -81 +97 @@ public abstract class ConfigurableFTPFileEntryParserImpl extends RegexFTPFileEnt
-                ((Configurable) this.timestampParser).configure(config);
+                ((Configurable)this.timestampParser).configure(config);
@@ -83 +99 @@ public abstract class ConfigurableFTPFileEntryParserImpl extends RegexFTPFileEnt
-                ((Configurable) this.timestampParser).configure(defaultCfg);
+                ((Configurable)this.timestampParser).configure(defaultCfg);
@@ -87,0 +104 @@ public abstract class ConfigurableFTPFileEntryParserImpl extends RegexFTPFileEnt
+
@@ -89,3 +106,4 @@ public abstract class ConfigurableFTPFileEntryParserImpl extends RegexFTPFileEnt
-     * Each concrete subclass must define this member to create a default configuration to be used when that subclass is instantiated without a
-     * {@link FTPClientConfig FTPClientConfig} parameter being specified.
-     *
+     * Each concrete subclass must define this member to create
+     * a default configuration to be used when that subclass is
+     * instantiated without a {@link  FTPClientConfig  FTPClientConfig}
+     * parameter being specified.
@@ -97 +115,2 @@ public abstract class ConfigurableFTPFileEntryParserImpl extends RegexFTPFileEnt
-     * This method is called by the concrete parsers to delegate timestamp parsing to the timestamp parser.
+     * This method is called by the concrete parsers to delegate
+     * timestamp parsing to the timestamp parser.
@@ -99,3 +118,5 @@ public abstract class ConfigurableFTPFileEntryParserImpl extends RegexFTPFileEnt
-     * @param timestampStr the timestamp string pulled from the file listing by the regular expression parser, to be submitted to the
-     *                     <code>timestampParser</code> for extracting the timestamp.
-     * @return a <code>java.util.Calendar</code> containing results of the timestamp parse.
+     * @param timestampStr the timestamp string pulled from the
+     * file listing by the regular expression parser, to be submitted
+     * to the <code>timestampParser</code> for extracting the timestamp.
+     * @return a <code>java.util.Calendar</code> containing results of the
+     * timestamp parse.
diff --git a/src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java b/src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java
index 7ea258e40..3ba52b789 100644
--- a/src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java
+++ b/src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java
@@ -25,0 +26 @@ import org.apache.commons.net.ftp.FTPFileEntryParser;
+
@@ -27,2 +28,5 @@ import org.apache.commons.net.ftp.FTPFileEntryParser;
- * This is the default implementation of the FTPFileEntryParserFactory interface. This is the implementation that will be used by
- * org.apache.commons.net.ftp.FTPClient.listFiles() if no other implementation has been specified.
+ * This is the default implementation of the
+ * FTPFileEntryParserFactory interface.  This is the
+ * implementation that will be used by
+ * org.apache.commons.net.ftp.FTPClient.listFiles()
+ * if no other implementation has been specified.
@@ -33 +37,3 @@ import org.apache.commons.net.ftp.FTPFileEntryParser;
-public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFactory {
+public class DefaultFTPFileEntryParserFactory
+    implements FTPFileEntryParserFactory
+{
@@ -38 +44 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-    private static final String JAVA_QUALIFIED_NAME = "(" + JAVA_IDENTIFIER + "\\.)+" + JAVA_IDENTIFIER;
+    private static final String JAVA_QUALIFIED_NAME  = "("+JAVA_IDENTIFIER+"\\.)+"+JAVA_IDENTIFIER;
@@ -43,3 +49,10 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-     * <p>
-     * Implementation extracts a key from the supplied {@link FTPClientConfig FTPClientConfig} parameter and creates an object implementing the interface
-     * FTPFileEntryParser and uses the supplied configuration to configure it.
+     * <p>Implementation extracts a key from the supplied
+     * {@link  FTPClientConfig FTPClientConfig}
+     * parameter and creates an object implementing the
+     * interface FTPFileEntryParser and uses the supplied configuration
+     * to configure it.
+     * </p><p>
+     * Note that this method will generally not be called in scenarios
+     * that call for autodetection of parser type but rather, for situations
+     * where the user knows that the server uses a non-default configuration
+     * and knows what that configuration is.
@@ -47,6 +60,2 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-     * <p>
-     * Note that this method will generally not be called in scenarios that call for autodetection of parser type but rather, for situations where the user
-     * knows that the server uses a non-default configuration and knows what that configuration is.
-     * </p>
-     *
-     * @param config A {@link FTPClientConfig FTPClientConfig} used to configure the parser created
+     * @param config  A {@link  FTPClientConfig FTPClientConfig}
+     * used to configure the parser created
@@ -54,3 +63,4 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-     * @return the @link FTPFileEntryParser FTPFileEntryParser} so created.
-     * @throws ParserInitializationException Thrown on any exception in instantiation
-     * @throws NullPointerException          if {@code config} is {@code null}
+     * @return the @link  FTPFileEntryParser FTPFileEntryParser} so created.
+     * @throws ParserInitializationException
+     *                   Thrown on any exception in instantiation
+     * @throws NullPointerException if {@code config} is {@code null}
@@ -60 +70,3 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-    public FTPFileEntryParser createFileEntryParser(final FTPClientConfig config) throws ParserInitializationException {
+    public FTPFileEntryParser createFileEntryParser(final FTPClientConfig config)
+    throws ParserInitializationException
+    {
@@ -66,4 +78,8 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-     * This default implementation of the FTPFileEntryParserFactory interface works according to the following logic: First it attempts to interpret the
-     * supplied key as a fully qualified classname (default package is not allowed) of a class implementing the FTPFileEntryParser interface. If that succeeds,
-     * a parser object of this class is instantiated and is returned; otherwise it attempts to interpret the key as an identirier commonly used by the FTP SYST
-     * command to identify systems.
+     * This default implementation of the FTPFileEntryParserFactory
+     * interface works according to the following logic:
+     * First it attempts to interpret the supplied key as a fully
+     * qualified classname (default package is not allowed) of a class implementing the
+     * FTPFileEntryParser interface.  If that succeeds, a parser
+     * object of this class is instantiated and is returned;
+     * otherwise it attempts to interpret the key as an identirier
+     * commonly used by the FTP SYST command to identify systems.
@@ -71,4 +87,8 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-     * If <code>key</code> is not recognized as a fully qualified classname known to the system, this method will then attempt to see whether it <b>contains</b>
-     * a string identifying one of the known parsers. This comparison is <b>case-insensitive</b>. The intent here is where possible, to select as keys strings
-     * which are returned by the SYST command on the systems which the corresponding parser successfully parses. This enables this factory to be used in the
-     * auto-detection system.
+     * If <code>key</code> is not recognized as a fully qualified
+     * classname known to the system, this method will then attempt
+     * to see whether it <b>contains</b> a string identifying one of
+     * the known parsers.  This comparison is <b>case-insensitive</b>.
+     * The intent here is where possible, to select as keys strings
+     * which are returned by the SYST command on the systems which
+     * the corresponding parser successfully parses.  This enables
+     * this factory to be used in the auto-detection system.
@@ -76,14 +96,16 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-     * @param key should be a fully qualified classname corresponding to a class implementing the FTPFileEntryParser interface<br>
-     *            OR<br>
-     *            a string containing (case-insensitively) one of the following keywords:
-     *            <ul>
-     *            <li>{@link FTPClientConfig#SYST_UNIX UNIX}</li>
-     *            <li>{@link FTPClientConfig#SYST_NT WINDOWS}</li>
-     *            <li>{@link FTPClientConfig#SYST_OS2 OS/2}</li>
-     *            <li>{@link FTPClientConfig#SYST_OS400 OS/400}</li>
-     *            <li>{@link FTPClientConfig#SYST_AS400 AS/400}</li>
-     *            <li>{@link FTPClientConfig#SYST_VMS VMS}</li>
-     *            <li>{@link FTPClientConfig#SYST_MVS MVS}</li>
-     *            <li>{@link FTPClientConfig#SYST_NETWARE NETWARE}</li>
-     *            <li>{@link FTPClientConfig#SYST_L8 TYPE:L8}</li>
-     *            </ul>
+     * @param key    should be a fully qualified classname corresponding to
+     *               a class implementing the FTPFileEntryParser interface<br>
+     *               OR<br>
+     *               a string containing (case-insensitively) one of the
+     *               following keywords:
+     *               <ul>
+     *               <li>{@link FTPClientConfig#SYST_UNIX UNIX}</li>
+     *               <li>{@link FTPClientConfig#SYST_NT WINDOWS}</li>
+     *               <li>{@link FTPClientConfig#SYST_OS2 OS/2}</li>
+     *               <li>{@link FTPClientConfig#SYST_OS400 OS/400}</li>
+     *               <li>{@link FTPClientConfig#SYST_AS400 AS/400}</li>
+     *               <li>{@link FTPClientConfig#SYST_VMS VMS}</li>
+     *               <li>{@link FTPClientConfig#SYST_MVS MVS}</li>
+     *               <li>{@link FTPClientConfig#SYST_NETWARE NETWARE}</li>
+     *               <li>{@link FTPClientConfig#SYST_L8 TYPE:L8}</li>
+     *               </ul>
@@ -91 +113,2 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-     * @throws ParserInitializationException thrown if for any reason the factory cannot resolve the supplied key into an FTPFileEntryParser.
+     * @throws ParserInitializationException thrown if for any reason the factory cannot resolve
+     *                   the supplied key into an FTPFileEntryParser.
@@ -95 +118,2 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-    public FTPFileEntryParser createFileEntryParser(final String key) {
+    public FTPFileEntryParser createFileEntryParser(final String key)
+    {
@@ -108 +132,2 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-            try {
+            try
+            {
@@ -113,2 +138,3 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-                    throw new ParserInitializationException(
-                            parserClass.getName() + " does not implement the interface " + "org.apache.commons.net.ftp.FTPFileEntryParser.", e);
+                    throw new ParserInitializationException(parserClass.getName()
+                        + " does not implement the interface "
+                        + "org.apache.commons.net.ftp.FTPFileEntryParser.", e);
@@ -125 +151,2 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-            if (ukey.contains(FTPClientConfig.SYST_UNIX_TRIM_LEADING)) {
+            if (ukey.contains(FTPClientConfig.SYST_UNIX_TRIM_LEADING))
+            {
@@ -129 +156,2 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-            else if (ukey.contains(FTPClientConfig.SYST_UNIX)) {
+            else if (ukey.contains(FTPClientConfig.SYST_UNIX))
+            {
@@ -131 +159,3 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-            } else if (ukey.contains(FTPClientConfig.SYST_VMS)) {
+            }
+            else if (ukey.contains(FTPClientConfig.SYST_VMS))
+            {
@@ -133 +163,3 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-            } else if (ukey.contains(FTPClientConfig.SYST_NT)) {
+            }
+            else if (ukey.contains(FTPClientConfig.SYST_NT))
+            {
@@ -135 +167,3 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-            } else if (ukey.contains(FTPClientConfig.SYST_OS2)) {
+            }
+            else if (ukey.contains(FTPClientConfig.SYST_OS2))
+            {
@@ -137 +171,4 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-            } else if (ukey.contains(FTPClientConfig.SYST_OS400) || ukey.contains(FTPClientConfig.SYST_AS400)) {
+            }
+            else if (ukey.contains(FTPClientConfig.SYST_OS400) ||
+                    ukey.contains(FTPClientConfig.SYST_AS400))
+            {
@@ -139 +176,3 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-            } else if (ukey.contains(FTPClientConfig.SYST_MVS)) {
+            }
+            else if (ukey.contains(FTPClientConfig.SYST_MVS))
+            {
@@ -141 +180,3 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-            } else if (ukey.contains(FTPClientConfig.SYST_NETWARE)) {
+            }
+            else if (ukey.contains(FTPClientConfig.SYST_NETWARE))
+            {
@@ -143 +184,3 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-            } else if (ukey.contains(FTPClientConfig.SYST_MACOS_PETER)) {
+            }
+            else if (ukey.contains(FTPClientConfig.SYST_MACOS_PETER))
+            {
@@ -145 +188,3 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-            } else if (ukey.contains(FTPClientConfig.SYST_L8)) {
+            }
+            else if (ukey.contains(FTPClientConfig.SYST_L8))
+            {
@@ -149 +194,3 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-            } else {
+            }
+            else
+            {
@@ -155 +202 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-            ((Configurable) parser).configure(config);
+            ((Configurable)parser).configure(config);
@@ -160 +207,3 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-    public FTPFileEntryParser createMVSEntryParser() {
+
+    public FTPFileEntryParser createMVSEntryParser()
+    {
@@ -168 +217,2 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-    public FTPFileEntryParser createNTFTPEntryParser() {
+    public FTPFileEntryParser createNTFTPEntryParser()
+    {
@@ -173 +223,2 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-     * Creates an NT FTP parser: if the config exists, and the system key equals {@link FTPClientConfig#SYST_NT} then a plain {@link NTFTPEntryParser} is used,
+     * Creates an NT FTP parser: if the config exists, and the system key equals
+     * {@link FTPClientConfig#SYST_NT} then a plain {@link NTFTPEntryParser} is used,
@@ -175 +225,0 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-     *
@@ -179,2 +229,5 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-    private FTPFileEntryParser createNTFTPEntryParser(final FTPClientConfig config) {
-        if (config != null && FTPClientConfig.SYST_NT.equals(config.getServerSystemKey())) {
+    private FTPFileEntryParser createNTFTPEntryParser(final FTPClientConfig config)
+    {
+        if (config != null && FTPClientConfig.SYST_NT.equals(
+                config.getServerSystemKey()))
+        {
@@ -184,3 +237,7 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-        final FTPClientConfig config2 = config != null ? new FTPClientConfig(config) : null;
-        return new CompositeFileEntryParser(new FTPFileEntryParser[] { new NTFTPEntryParser(config),
-                new UnixFTPEntryParser(config2, config2 != null && FTPClientConfig.SYST_UNIX_TRIM_LEADING.equals(config2.getServerSystemKey())) });
+        final FTPClientConfig config2 =  config != null ? new FTPClientConfig(config) : null;
+        return new CompositeFileEntryParser(new FTPFileEntryParser[]
+               {
+                   new NTFTPEntryParser(config),
+                   new UnixFTPEntryParser(config2,
+                           config2 != null && FTPClientConfig.SYST_UNIX_TRIM_LEADING.equals(config2.getServerSystemKey()))
+               });
@@ -189 +246,2 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-    public FTPFileEntryParser createOS2FTPEntryParser() {
+    public FTPFileEntryParser createOS2FTPEntryParser()
+    {
@@ -193 +251,2 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-    public FTPFileEntryParser createOS400FTPEntryParser() {
+     public FTPFileEntryParser createOS400FTPEntryParser()
+    {
@@ -198,3 +257,3 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-     * Creates an OS400 FTP parser: if the config exists, and the system key equals {@link FTPClientConfig#SYST_OS400} then a plain {@link OS400FTPEntryParser}
-     * is used, otherwise a composite of {@link OS400FTPEntryParser} and {@link UnixFTPEntryParser} is used.
-     *
+     * Creates an OS400 FTP parser: if the config exists, and the system key equals
+     * {@link FTPClientConfig#SYST_OS400} then a plain {@link OS400FTPEntryParser} is used,
+     * otherwise a composite of {@link OS400FTPEntryParser} and {@link UnixFTPEntryParser} is used.
@@ -204,2 +263,5 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-    private FTPFileEntryParser createOS400FTPEntryParser(final FTPClientConfig config) {
-        if (config != null && FTPClientConfig.SYST_OS400.equals(config.getServerSystemKey())) {
+    private FTPFileEntryParser createOS400FTPEntryParser(final FTPClientConfig config)
+        {
+        if (config != null &&
+                FTPClientConfig.SYST_OS400.equals(config.getServerSystemKey()))
+        {
@@ -209,3 +271,7 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-        final FTPClientConfig config2 = config != null ? new FTPClientConfig(config) : null;
-        return new CompositeFileEntryParser(new FTPFileEntryParser[] { new OS400FTPEntryParser(config),
-                new UnixFTPEntryParser(config2, config2 != null && FTPClientConfig.SYST_UNIX_TRIM_LEADING.equals(config2.getServerSystemKey())) });
+        final FTPClientConfig config2 =  config != null ? new FTPClientConfig(config) : null;
+        return new CompositeFileEntryParser(new FTPFileEntryParser[]
+            {
+                new OS400FTPEntryParser(config),
+                new UnixFTPEntryParser(config2,
+                        config2 != null && FTPClientConfig.SYST_UNIX_TRIM_LEADING.equals(config2.getServerSystemKey()))
+            });
@@ -214 +280,2 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-    public FTPFileEntryParser createUnixFTPEntryParser() {
+    public FTPFileEntryParser createUnixFTPEntryParser()
+    {
@@ -218 +285,2 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
-    public FTPFileEntryParser createVMSVersioningFTPEntryParser() {
+    public FTPFileEntryParser createVMSVersioningFTPEntryParser()
+    {
@@ -222,0 +291 @@ public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFacto
+
diff --git a/src/main/java/org/apache/commons/net/ftp/parser/EnterpriseUnixFTPEntryParser.java b/src/main/java/org/apache/commons/net/ftp/parser/EnterpriseUnixFTPEntryParser.java
index 363b1398c..a8f869b32 100644
--- a/src/main/java/org/apache/commons/net/ftp/parser/EnterpriseUnixFTPEntryParser.java
+++ b/src/main/java/org/apache/commons/net/ftp/parser/EnterpriseUnixFTPEntryParser.java
@@ -19 +18,0 @@ package org.apache.commons.net.ftp.parser;
-
@@ -25,2 +24,2 @@ import org.apache.commons.net.ftp.FTPFile;
- * Parser for the Connect Enterprise Unix FTP Server From Sterling Commerce. Here is a sample of the sort of output line this parser processes:
- *
+ * Parser for the Connect Enterprise Unix FTP Server From Sterling Commerce.
+ * Here is a sample of the sort of output line this parser processes:
@@ -28 +27 @@ import org.apache.commons.net.ftp.FTPFile;
- * "-C--E-----FTP B QUA1I1      18128       41 Aug 12 13:56 QUADTEST"
+ *  "-C--E-----FTP B QUA1I1      18128       41 Aug 12 13:56 QUADTEST"
@@ -31,2 +30,3 @@ import org.apache.commons.net.ftp.FTPFile;
- * Note: EnterpriseUnixFTPEntryParser can only be instantiated through the DefaultFTPParserFactory by classname. It will not be chosen by the autodetection
- * scheme.
+ * Note: EnterpriseUnixFTPEntryParser can only be instantiated through the
+ * DefaultFTPParserFactory by classname.  It will not be chosen
+ * by the autodetection scheme.
@@ -34 +33,0 @@ import org.apache.commons.net.ftp.FTPFile;
- *
@@ -38 +37,2 @@ import org.apache.commons.net.ftp.FTPFile;
-public class EnterpriseUnixFTPEntryParser extends RegexFTPFileEntryParserImpl {
+public class EnterpriseUnixFTPEntryParser extends RegexFTPFileEntryParserImpl
+{
@@ -41 +41,2 @@ public class EnterpriseUnixFTPEntryParser extends RegexFTPFileEntryParserImpl {
-     * months abbreviations looked for by this parser. Also used to determine <b>which</b> month has been matched by the parser.
+     * months abbreviations looked for by this parser.  Also used
+     * to determine <b>which</b> month has been matched by the parser.
@@ -43 +44,2 @@ public class EnterpriseUnixFTPEntryParser extends RegexFTPFileEntryParserImpl {
-    private static final String MONTHS = "(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)";
+    private static final String MONTHS =
+        "(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)";
@@ -48,15 +50,17 @@ public class EnterpriseUnixFTPEntryParser extends RegexFTPFileEntryParserImpl {
-    private static final String REGEX = "(([\\-]|[A-Z])([\\-]|[A-Z])([\\-]|[A-Z])([\\-]|[A-Z])([\\-]|[A-Z])"
-            + "([\\-]|[A-Z])([\\-]|[A-Z])([\\-]|[A-Z])([\\-]|[A-Z])([\\-]|[A-Z]))" + "(\\S*)\\s*" // 12
-            + "(\\S+)\\s*" // 13
-            + "(\\S*)\\s*" // 14 user
-            + "(\\d*)\\s*" // 15 group
-            + "(\\d*)\\s*" // 16 filesize
-            + MONTHS // 17 month
-            + "\\s*" // TODO should the space be optional?
-            // TODO \\d* should be \\d? surely ? Otherwise 01111 is allowed
-            + "((?:[012]\\d*)|(?:3[01]))\\s*" // 18 date [012]\d* or 3[01]
-            + "((\\d\\d\\d\\d)|((?:[01]\\d)|(?:2[0123])):([012345]\\d))\\s"
-            // 20 \d\d\d\d = year OR
-            // 21 [01]\d or 2[0123] hour + ':'
-            // 22 [012345]\d = minute
-            + "(\\S*)(\\s*.*)"; // 23 name
+    private static final String REGEX =
+        "(([\\-]|[A-Z])([\\-]|[A-Z])([\\-]|[A-Z])([\\-]|[A-Z])([\\-]|[A-Z])"
+        + "([\\-]|[A-Z])([\\-]|[A-Z])([\\-]|[A-Z])([\\-]|[A-Z])([\\-]|[A-Z]))"
+        + "(\\S*)\\s*" // 12
+        + "(\\S+)\\s*" // 13
+        + "(\\S*)\\s*" // 14 user
+        + "(\\d*)\\s*" // 15 group
+        + "(\\d*)\\s*" // 16 filesize
+        + MONTHS       // 17 month
+        + "\\s*"       // TODO should the space be optional?
+        // TODO \\d* should be \\d? surely ? Otherwise 01111 is allowed
+        + "((?:[012]\\d*)|(?:3[01]))\\s*" // 18 date [012]\d* or 3[01]
+        + "((\\d\\d\\d\\d)|((?:[01]\\d)|(?:2[0123])):([012345]\\d))\\s"
+        // 20 \d\d\d\d  = year  OR
+        // 21 [01]\d or 2[0123] hour + ':'
+        // 22 [012345]\d = minute
+        + "(\\S*)(\\s*.*)"; // 23 name
@@ -68 +72,2 @@ public class EnterpriseUnixFTPEntryParser extends RegexFTPFileEntryParserImpl {
-    public EnterpriseUnixFTPEntryParser() {
+    public EnterpriseUnixFTPEntryParser()
+    {
@@ -73,3 +78,5 @@ public class EnterpriseUnixFTPEntryParser extends RegexFTPFileEntryParserImpl {
-     * Parses a line of a unix FTP server file listing and converts it into a usable format in the form of an <code> FTPFile </code> instance. If the file
-     * listing line doesn't describe a file, <code> null </code> is returned, otherwise a <code> FTPFile </code> instance representing the files in the
-     * directory is returned.
+     * Parses a line of a unix FTP server file listing and converts  it into a
+     * usable format in the form of an <code> FTPFile </code>  instance.  If
+     * the file listing line doesn't describe a file,  <code> null </code> is
+     * returned, otherwise a <code> FTPFile </code>  instance representing the
+     * files in the directory is returned.
@@ -81 +88,2 @@ public class EnterpriseUnixFTPEntryParser extends RegexFTPFileEntryParserImpl {
-    public FTPFile parseFTPEntry(final String entry) {
+    public FTPFile parseFTPEntry(final String entry)
+    {
@@ -86 +94,2 @@ public class EnterpriseUnixFTPEntryParser extends RegexFTPFileEntryParserImpl {
-        if (matches(entry)) {
+        if (matches(entry))
+        {
@@ -100 +109,2 @@ public class EnterpriseUnixFTPEntryParser extends RegexFTPFileEntryParserImpl {
-            try {
+            try
+            {
@@ -102 +112,3 @@ public class EnterpriseUnixFTPEntryParser extends RegexFTPFileEntryParserImpl {
-            } catch (final NumberFormatException e) {
+            }
+            catch (final NumberFormatException e)
+            {
@@ -115 +127,2 @@ public class EnterpriseUnixFTPEntryParser extends RegexFTPFileEntryParserImpl {
-            try {
+            try
+            {
@@ -117 +130,2 @@ public class EnterpriseUnixFTPEntryParser extends RegexFTPFileEntryParserImpl {
-                if (yr != null) {
+                if (yr != null)
+                {
@@ -121,2 +135,4 @@ public class EnterpriseUnixFTPEntryParser extends RegexFTPFileEntryParserImpl {
-                } else {
-                    // it must be hour/minute or we wouldn't have matched
+                }
+                else
+                {
+                    // it must be  hour/minute or we wouldn't have matched
@@ -128 +144,2 @@ public class EnterpriseUnixFTPEntryParser extends RegexFTPFileEntryParserImpl {
-                    if (cal.get(Calendar.MONTH) < month) {
+                    if (cal.get(Calendar.MONTH) < month)
+                    {
@@ -139 +156,3 @@ public class EnterpriseUnixFTPEntryParser extends RegexFTPFileEntryParserImpl {
-            } catch (final NumberFormatException e) {
+            }
+            catch (final NumberFormatException e)
+            {
diff --git a/src/main/java/org/apache/commons/net/ftp/parser/FTPFileEntryParserFactory.java b/src/main/java/org/apache/commons/net/ftp/parser/FTPFileEntryParserFactory.java
index e287b6c0e..c99386a7f 100644
--- a/src/main/java/org/apache/commons/net/ftp/parser/FTPFileEntryParserFactory.java
+++ b/src/main/java/org/apache/commons/net/ftp/parser/FTPFileEntryParserFactory.java
@@ -19 +18,0 @@ package org.apache.commons.net.ftp.parser;
-
@@ -25 +23,0 @@ import org.apache.commons.net.ftp.FTPFileEntryParser;
- *
@@ -28 +26,2 @@ import org.apache.commons.net.ftp.FTPFileEntryParser;
-public interface FTPFileEntryParserFactory {
+public interface FTPFileEntryParserFactory
+{
@@ -30,7 +29,11 @@ public interface FTPFileEntryParserFactory {
-     * <p>
-     * Implementation should be a method that extracts a key from the supplied {@link FTPClientConfig FTPClientConfig} parameter and creates an object
-     * implementing the interface FTPFileEntryParser and uses the supplied configuration to configure it.
-     * </p>
-     * <p>
-     * Note that this method will generally not be called in scenarios that call for autodetection of parser type but rather, for situations where the user
-     * knows that the server uses a non-default configuration and knows what that configuration is.
+     *<p>
+     * Implementation should be a method that extracts
+     * a key from the supplied {@link  FTPClientConfig FTPClientConfig}
+     * parameter and creates an object implementing the
+     * interface FTPFileEntryParser and uses the supplied configuration
+     * to configure it.
+     * </p><p>
+     * Note that this method will generally not be called in scenarios
+     * that call for autodetection of parser type but rather, for situations
+     * where the user knows that the server uses a non-default configuration
+     * and knows what that configuration is.
@@ -39 +42,2 @@ public interface FTPFileEntryParserFactory {
-     * @param config A {@link FTPClientConfig FTPClientConfig} used to configure the parser created
+     * @param config  A {@link  FTPClientConfig FTPClientConfig}
+     * used to configure the parser created
@@ -41,2 +45,3 @@ public interface FTPFileEntryParserFactory {
-     * @return the @link FTPFileEntryParser FTPFileEntryParser} so created.
-     * @throws ParserInitializationException Thrown on any exception in instantiation
+     * @return the @link  FTPFileEntryParser FTPFileEntryParser} so created.
+     * @throws ParserInitializationException
+     *                   Thrown on any exception in instantiation
@@ -45 +50,2 @@ public interface FTPFileEntryParserFactory {
-    FTPFileEntryParser createFileEntryParser(FTPClientConfig config) throws ParserInitializationException;
+    FTPFileEntryParser createFileEntryParser(FTPClientConfig config)
+        throws ParserInitializationException;
@@ -48 +54,3 @@ public interface FTPFileEntryParserFactory {
-     * Implementation should be a method that decodes the supplied key and creates an object implementing the interface FTPFileEntryParser.
+     * Implementation should be a method that decodes the
+     * supplied key and creates an object implementing the
+     * interface FTPFileEntryParser.
@@ -50 +58,2 @@ public interface FTPFileEntryParserFactory {
-     * @param key A string that somehow identifies an FTPFileEntryParser to be created.
+     * @param key    A string that somehow identifies an
+     *               FTPFileEntryParser to be created.
@@ -53 +62,2 @@ public interface FTPFileEntryParserFactory {
-     * @throws ParserInitializationException Thrown on any exception in instantiation
+     * @throws ParserInitializationException
+     *                   Thrown on any exception in instantiation
@@ -55 +65,2 @@ public interface FTPFileEntryParserFactory {
-    FTPFileEntryParser createFileEntryParser(String key) throws ParserInitializationException;
+    FTPFileEntryParser createFileEntryParser(String key)
+        throws ParserInitializationException;
diff --git a/src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParser.java b/src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParser.java
index 04f561aac..c04cd446c 100644
--- a/src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParser.java
+++ b/src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParser.java
@@ -24,2 +24,2 @@ import java.util.Calendar;
- * This interface specifies the concept of parsing an FTP server's timestamp.
- *
+ * This interface specifies the concept of parsing an FTP server's
+ * timestamp.
@@ -40,5 +40,9 @@ public interface FTPTimestampParser {
-     * Parses the supplied datestamp parameter. This parameter typically would have been pulled from a longer FTP listing via the regular expression mechanism
-     *
-     * @param timestampStr - the timestamp portion of the FTP directory listing to be parsed
-     * @return a <code>java.util.Calendar</code> object initialized to the date parsed by the parser
-     * @throws ParseException if none of the parser mechanisms belonging to the implementor can parse the input.
+     * Parses the supplied datestamp parameter.  This parameter typically would
+     * have been pulled from a longer FTP listing via the regular expression
+     * mechanism
+     * @param timestampStr - the timestamp portion of the FTP directory listing
+     * to be parsed
+     * @return a <code>java.util.Calendar</code> object initialized to the date
+     * parsed by the parser
+     * @throws ParseException if none of the parser mechanisms belonging to
+     * the implementor can parse the input.
diff --git a/src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java b/src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java
index fdc532b8f..f2a394520 100644
--- a/src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java
+++ b/src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java
@@ -32,2 +32,3 @@ import org.apache.commons.net.ftp.FTPClientConfig;
- * Default implementation of the {@link FTPTimestampParser FTPTimestampParser} interface also implements the {@link org.apache.commons.net.ftp.Configurable
- * Configurable} interface to allow the parsing to be configured from the outside.
+ * Default implementation of the {@link  FTPTimestampParser  FTPTimestampParser}
+ * interface also implements the {@link  org.apache.commons.net.ftp.Configurable  Configurable}
+ * interface to allow the parsing to be configured from the outside.
@@ -38 +39,4 @@ import org.apache.commons.net.ftp.FTPClientConfig;
-public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable {
+public class FTPTimestampParserImpl implements
+        FTPTimestampParser, Configurable
+{
+
@@ -41,4 +45,10 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-     * List of units in order of increasing significance. This allows the code to clear all units in the Calendar until it reaches the least significant unit in
-     * the parse string. The date formats are analysed to find the least significant unit (e.g. Minutes or Milliseconds) and the appropriate index to the array
-     * is saved. This is done by searching the array for the unit specifier, and returning the index. When clearing the Calendar units, the code loops through
-     * the array until the previous entry. e.g. for MINUTE it would clear MILLISECOND and SECOND
+     * List of units in order of increasing significance.
+     * This allows the code to clear all units in the Calendar until it
+     * reaches the least significant unit in the parse string.
+     * The date formats are analysed to find the least significant
+     * unit (e.g. Minutes or Milliseconds) and the appropriate index to
+     * the array is saved.
+     * This is done by searching the array for the unit specifier,
+     * and returning the index. When clearing the Calendar units,
+     * the code loops through the array until the previous entry.
+     * e.g. for MINUTE it would clear MILLISECOND and SECOND
@@ -46,3 +56,8 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-    private static final int[] CALENDAR_UNITS = { Calendar.MILLISECOND, Calendar.SECOND, Calendar.MINUTE, Calendar.HOUR_OF_DAY, Calendar.DAY_OF_MONTH,
-            Calendar.MONTH, Calendar.YEAR };
-
+    private static final int[] CALENDAR_UNITS = {
+        Calendar.MILLISECOND,
+        Calendar.SECOND,
+        Calendar.MINUTE,
+        Calendar.HOUR_OF_DAY,
+        Calendar.DAY_OF_MONTH,
+        Calendar.MONTH,
+        Calendar.YEAR};
@@ -50 +65,3 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-     * Return the index to the array representing the least significant unit found in the date format. Default is 0 (to avoid dropping precision)
+     * Return the index to the array representing the least significant
+     * unit found in the date format.
+     * Default is 0 (to avoid dropping precision)
@@ -56 +73 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-        final String FORMAT_CHARS = "SsmHdM";
+        final String FORMAT_CHARS="SsmHdM";
@@ -58,3 +75,3 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-        for (final char ch : FORMAT_CHARS.toCharArray()) {
-            if (pattern.indexOf(ch) != -1) { // found the character
-                switch (ch) {
+        for(final char ch : FORMAT_CHARS.toCharArray()) {
+            if (pattern.indexOf(ch) != -1){ // found the character
+                switch(ch) {
@@ -84 +101 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-        for (i = 0; i < CALENDAR_UNITS.length; i++) {
+        for(i = 0; i <CALENDAR_UNITS.length; i++) {
@@ -91 +107,0 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-
@@ -93,2 +109,3 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-     * Sets the Calendar precision (used by FTPFile#toFormattedDate) by clearing the immediately preceeding unit (if any). Unfortunately the clear(int) method
-     * results in setting all other units.
+     * Sets the Calendar precision (used by FTPFile#toFormattedDate) by clearing
+     * the immediately preceeding unit (if any).
+     * Unfortunately the clear(int) method results in setting all other units.
@@ -100 +117 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-        final int field = CALENDAR_UNITS[index - 1];
+        final int field = CALENDAR_UNITS[index-1];
@@ -134 +151,3 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-     * Implementation of the {@link Configurable Configurable} interface. Configures this <code>FTPTimestampParser</code> according to the following logic:
+     * Implementation of the {@link  Configurable  Configurable}
+     * interface. Configures this <code>FTPTimestampParser</code> according
+     * to the following logic:
@@ -136,2 +155,3 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-     * Set up the {@link FTPClientConfig#setDefaultDateFormatStr(java.lang.String) defaultDateFormat} and optionally the
-     * {@link FTPClientConfig#setRecentDateFormatStr(String) recentDateFormat} to values supplied in the config based on month names configured as follows:
+     * Set up the {@link  FTPClientConfig#setDefaultDateFormatStr(java.lang.String) defaultDateFormat}
+     * and optionally the {@link  FTPClientConfig#setRecentDateFormatStr(String) recentDateFormat}
+     * to values supplied in the config based on month names configured as follows:
@@ -140,4 +160,6 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-     * <li>If a {@link FTPClientConfig#setShortMonthNames(String) shortMonthString} has been supplied in the <code>config</code>, use that to parse parse
-     * timestamps.</li>
-     * <li>Otherwise, if a {@link FTPClientConfig#setServerLanguageCode(String) serverLanguageCode} has been supplied in the <code>config</code>, use the month
-     * names represented by that {@link FTPClientConfig#lookupDateFormatSymbols(String) language} to parse timestamps.</li>
+     * <li>If a {@link  FTPClientConfig#setShortMonthNames(String) shortMonthString}
+     * has been supplied in the <code>config</code>, use that to parse  parse timestamps.</li>
+     * <li>Otherwise, if a {@link  FTPClientConfig#setServerLanguageCode(String) serverLanguageCode}
+     * has been supplied in the <code>config</code>, use the month names represented
+     * by that {@link  FTPClientConfig#lookupDateFormatSymbols(String) language}
+     * to parse timestamps.</li>
@@ -145,4 +167,4 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-     * </ul>
-     * <p>
-     * Finally if a {@link org.apache.commons.net.ftp.FTPClientConfig#setServerTimeZoneId(String) serverTimeZoneId} has been supplied via the config, set that
-     * into all date formats that have been configured.
+     * </ul><p>
+     * Finally if a {@link  org.apache.commons.net.ftp.FTPClientConfig#setServerTimeZoneId(String) serverTimeZoneId}
+     * has been supplied via the config, set that into all date formats that have
+     * been configured.
@@ -164,0 +187 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
+
@@ -192 +214,0 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-
@@ -199 +220,0 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-
@@ -206 +226,0 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-
@@ -213 +232,0 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-
@@ -215 +234,2 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-     * @return returns an array of 12 strings representing the short month names used by this parse.
+     * @return returns an array of 12 strings representing the short
+     * month names used by this parse.
@@ -220 +239,0 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-
@@ -229,2 +248,3 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-     * Implements the one {@link FTPTimestampParser#parseTimestamp(String) method} in the {@link FTPTimestampParser FTPTimestampParser} interface according to
-     * this algorithm:
+     * Implements the one {@link  FTPTimestampParser#parseTimestamp(String)  method}
+     * in the {@link  FTPTimestampParser  FTPTimestampParser} interface
+     * according to this algorithm:
@@ -232,2 +252,4 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-     * If the recentDateFormat member has been defined, try to parse the supplied string with that. If that parse fails, or if the recentDateFormat member has
-     * not been defined, attempt to parse with the defaultDateFormat member. If that fails, throw a ParseException.
+     * If the recentDateFormat member has been defined, try to parse the
+     * supplied string with that.  If that parse fails, or if the recentDateFormat
+     * member has not been defined, attempt to parse with the defaultDateFormat
+     * member.  If that fails, throw a ParseException.
@@ -247,0 +270 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
+
@@ -249,2 +272,4 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-     * If the recentDateFormat member has been defined, try to parse the supplied string with that. If that parse fails, or if the recentDateFormat member has
-     * not been defined, attempt to parse with the defaultDateFormat member. If that fails, throw a ParseException.
+     * If the recentDateFormat member has been defined, try to parse the
+     * supplied string with that.  If that parse fails, or if the recentDateFormat
+     * member has not been defined, attempt to parse with the defaultDateFormat
+     * member.  If that fails, throw a ParseException.
@@ -252 +277,2 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-     * This method allows a {@link Calendar} instance to be passed in which represents the current (system) time.
+     * This method allows a {@link Calendar} instance to be passed in which represents the
+     * current (system) time.
@@ -256 +282 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-     * @param serverTime   The current time for the server
+     * @param serverTime The current time for the server
@@ -272 +298 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-                // slightly in the future to roll back a full year. (Bug 35181 => NET-83)
+                // slightly in the future to roll back a full year.  (Bug 35181 => NET-83)
@@ -286 +312,2 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-            final SimpleDateFormat hackFormatter = new SimpleDateFormat(recentDateFormat.toPattern() + " yyyy", recentDateFormat.getDateFormatSymbols());
+            final SimpleDateFormat hackFormatter = new SimpleDateFormat(recentDateFormat.toPattern() + " yyyy",
+                    recentDateFormat.getDateFormatSymbols());
@@ -306 +333 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-        // full string is matched. They will also accept,
+        // full string is matched.  They will also accept,
@@ -312 +339,3 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-            throw new ParseException("Timestamp '" + timestampStr + "' could not be parsed using a server time of " + serverTime.getTime().toString(),
+            throw new ParseException(
+                    "Timestamp '"+timestampStr+"' could not be parsed using a server time of "
+                        +serverTime.getTime().toString(),
@@ -319 +347,0 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-
@@ -322 +350 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-     * @param dfs    the symbols to use (may be null)
+     * @param dfs the symbols to use (may be null)
@@ -344 +371,0 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-
@@ -347 +374 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-     * @param dfs    the symbols to use (may be null)
+     * @param dfs the symbols to use (may be null)
@@ -362 +388,0 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-
@@ -364,3 +390,4 @@ public class FTPTimestampParserImpl implements FTPTimestampParser, Configurable
-     * sets a TimeZone represented by the supplied ID string into all of the parsers used by this server.
-     *
-     * @param serverTimeZoneId Time Id java.util.TimeZone id used by the ftp server. If null the client's local time zone is assumed.
+     * sets a TimeZone represented by the supplied ID string into all
+     * of the parsers used by this server.
+     * @param serverTimeZoneId Time Id java.util.TimeZone id used by
+     * the ftp server.  If null the client's local time zone is assumed.
diff --git a/src/main/java/org/apache/commons/net/ftp/parser/MLSxEntryParser.java b/src/main/java/org/apache/commons/net/ftp/parser/MLSxEntryParser.java
index 6364780d5..c1cfe4428 100644
--- a/src/main/java/org/apache/commons/net/ftp/parser/MLSxEntryParser.java
+++ b/src/main/java/org/apache/commons/net/ftp/parser/MLSxEntryParser.java
@@ -19 +18,0 @@ package org.apache.commons.net.ftp.parser;
-
@@ -38 +36,0 @@ import org.apache.commons.net.ftp.FTPFileEntryParserImpl;
- *
@@ -55,2 +53,4 @@ import org.apache.commons.net.ftp.FTPFileEntryParserImpl;
- * A single control response entry (MLST) is returned with a leading space; multiple (data) entries are returned without any leading spaces. The parser requires
- * that the leading space from the MLST entry is removed. MLSD entries can begin with a single space if there are no facts.
+ * A single control response entry (MLST) is returned with a leading space;
+ * multiple (data) entries are returned without any leading spaces.
+ * The parser requires that the leading space from the MLST entry is removed.
+ * MLSD entries can begin with a single space if there are no facts.
@@ -61 +61,2 @@ import org.apache.commons.net.ftp.FTPFileEntryParserImpl;
-public class MLSxEntryParser extends FTPFileEntryParserImpl {
+public class MLSxEntryParser extends FTPFileEntryParserImpl
+{
@@ -74 +75,4 @@ public class MLSxEntryParser extends FTPFileEntryParserImpl {
-            FTPFile.USER_ACCESS, FTPFile.GROUP_ACCESS, FTPFile.WORLD_ACCESS, };
+        FTPFile.USER_ACCESS,
+        FTPFile.GROUP_ACCESS,
+        FTPFile.WORLD_ACCESS,
+    };
@@ -77,4 +81,9 @@ public class MLSxEntryParser extends FTPFileEntryParserImpl {
-            /* 0 */ {}, /* 1 */ { FTPFile.EXECUTE_PERMISSION }, /* 2 */ { FTPFile.WRITE_PERMISSION },
-            /* 3 */ { FTPFile.EXECUTE_PERMISSION, FTPFile.WRITE_PERMISSION }, /* 4 */ { FTPFile.READ_PERMISSION },
-            /* 5 */ { FTPFile.READ_PERMISSION, FTPFile.EXECUTE_PERMISSION }, /* 6 */ { FTPFile.READ_PERMISSION, FTPFile.WRITE_PERMISSION },
-            /* 7 */ { FTPFile.READ_PERMISSION, FTPFile.WRITE_PERMISSION, FTPFile.EXECUTE_PERMISSION }, };
+/* 0 */  {},
+/* 1 */  {FTPFile.EXECUTE_PERMISSION},
+/* 2 */  {FTPFile.WRITE_PERMISSION},
+/* 3 */  {FTPFile.EXECUTE_PERMISSION, FTPFile.WRITE_PERMISSION},
+/* 4 */  {FTPFile.READ_PERMISSION},
+/* 5 */  {FTPFile.READ_PERMISSION, FTPFile.EXECUTE_PERMISSION},
+/* 6 */  {FTPFile.READ_PERMISSION, FTPFile.WRITE_PERMISSION},
+/* 7 */  {FTPFile.READ_PERMISSION, FTPFile.WRITE_PERMISSION, FTPFile.EXECUTE_PERMISSION},
+    };
@@ -82 +91 @@ public class MLSxEntryParser extends FTPFileEntryParserImpl {
-    public static MLSxEntryParser getInstance() {
+    public static  MLSxEntryParser getInstance() {
@@ -100 +109 @@ public class MLSxEntryParser extends FTPFileEntryParserImpl {
-        if (timestamp.contains(".")) {
+        if (timestamp.contains(".")){
@@ -114 +123 @@ public class MLSxEntryParser extends FTPFileEntryParserImpl {
-        if (pos.getIndex() != timestamp.length()) {
+        if (pos.getIndex()  != timestamp.length()) {
@@ -136 +145,2 @@ public class MLSxEntryParser extends FTPFileEntryParserImpl {
-     * Create the parser for MSLT and MSLD listing entries This class is immutable, so one can use {@link #getInstance()} instead.
+     * Create the parser for MSLT and MSLD listing entries
+     * This class is immutable, so one can use {@link #getInstance()} instead.
@@ -138 +148,2 @@ public class MLSxEntryParser extends FTPFileEntryParserImpl {
-    public MLSxEntryParser() {
+    public MLSxEntryParser()
+    {
@@ -141,3 +152,3 @@ public class MLSxEntryParser extends FTPFileEntryParserImpl {
-    // perm-fact = "Perm" "=" *pvals
-    // pvals = "a" / "c" / "d" / "e" / "f" /
-    // "l" / "m" / "p" / "r" / "w"
+    //              perm-fact    = "Perm" "=" *pvals
+    //              pvals        = "a" / "c" / "d" / "e" / "f" /
+    //                             "l" / "m" / "p" / "r" / "w"
@@ -145 +156 @@ public class MLSxEntryParser extends FTPFileEntryParserImpl {
-        for (final char c : valueLowerCase.toCharArray()) {
+        for(final char c : valueLowerCase.toCharArray()) {
@@ -148,33 +159,33 @@ public class MLSxEntryParser extends FTPFileEntryParserImpl {
-            case 'a': // (file) may APPEnd
-                file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
-                break;
-            case 'c': // (dir) files may be created in the dir
-                file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
-                break;
-            case 'd': // deletable
-                file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
-                break;
-            case 'e': // (dir) can change to this dir
-                file.setPermission(FTPFile.USER_ACCESS, FTPFile.READ_PERMISSION, true);
-                break;
-            case 'f': // (file) renamable
-                // ?? file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
-                break;
-            case 'l': // (dir) can be listed
-                file.setPermission(FTPFile.USER_ACCESS, FTPFile.EXECUTE_PERMISSION, true);
-                break;
-            case 'm': // (dir) can create directory here
-                file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
-                break;
-            case 'p': // (dir) entries may be deleted
-                file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
-                break;
-            case 'r': // (files) file may be RETRieved
-                file.setPermission(FTPFile.USER_ACCESS, FTPFile.READ_PERMISSION, true);
-                break;
-            case 'w': // (files) file may be STORed
-                file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
-                break;
-            default:
-                break;
-            // ignore unexpected flag for now.
+                case 'a':     // (file) may APPEnd
+                    file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
+                    break;
+                case 'c':     // (dir) files may be created in the dir
+                    file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
+                    break;
+                case 'd':     // deletable
+                    file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
+                    break;
+                case 'e':     // (dir) can change to this dir
+                    file.setPermission(FTPFile.USER_ACCESS, FTPFile.READ_PERMISSION, true);
+                    break;
+                case 'f':     // (file) renamable
+                    // ?? file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
+                    break;
+                case 'l':     // (dir) can be listed
+                    file.setPermission(FTPFile.USER_ACCESS, FTPFile.EXECUTE_PERMISSION, true);
+                    break;
+                case 'm':     // (dir) can create directory here
+                    file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
+                    break;
+                case 'p':     // (dir) entries may be deleted
+                    file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
+                    break;
+                case 'r':     // (files) file may be RETRieved
+                    file.setPermission(FTPFile.USER_ACCESS, FTPFile.READ_PERMISSION, true);
+                    break;
+                case 'w':     // (files) file may be STORed
+                    file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
+                    break;
+                default:
+                    break;
+                    // ignore unexpected flag for now.
@@ -197 +208 @@ public class MLSxEntryParser extends FTPFileEntryParserImpl {
-        final String parts[] = entry.split(" ", 2); // Path may contain space
+        final String parts[] = entry.split(" ",2); // Path may contain space
@@ -210,2 +221,2 @@ public class MLSxEntryParser extends FTPFileEntryParserImpl {
-        for (final String fact : facts) {
-            final String[] factparts = fact.split("=", -1); // Don't drop empty values
+        for(final String fact : facts) {
+            final String []factparts = fact.split("=", -1); // Don't drop empty values
@@ -226 +237,2 @@ public class MLSxEntryParser extends FTPFileEntryParserImpl {
-            } else if ("modify".equals(factname)) {
+            }
+            else if ("modify".equals(factname)) {
@@ -232,8 +244,10 @@ public class MLSxEntryParser extends FTPFileEntryParserImpl {
-            } else if ("type".equals(factname)) {
-                final Integer intType = TYPE_TO_INT.get(valueLowerCase);
-                if (intType == null) {
-                    file.setType(FTPFile.UNKNOWN_TYPE);
-                } else {
-                    file.setType(intType.intValue());
-                }
-            } else if (factname.startsWith("unix.")) {
+            }
+            else if ("type".equals(factname)) {
+                    final Integer intType = TYPE_TO_INT.get(valueLowerCase);
+                    if (intType == null) {
+                        file.setType(FTPFile.UNKNOWN_TYPE);
+                    } else {
+                        file.setType(intType.intValue());
+                    }
+            }
+            else if (factname.startsWith("unix.")) {
@@ -241 +255 @@ public class MLSxEntryParser extends FTPFileEntryParserImpl {
-                if ("group".equals(unixfact)) {
+                if ("group".equals(unixfact)){
@@ -243 +257 @@ public class MLSxEntryParser extends FTPFileEntryParserImpl {
-                } else if ("owner".equals(unixfact)) {
+                } else if ("owner".equals(unixfact)){
@@ -245,4 +259,4 @@ public class MLSxEntryParser extends FTPFileEntryParserImpl {
-                } else if ("mode".equals(unixfact)) { // e.g. 0[1]755
-                    final int off = factvalue.length() - 3; // only parse last 3 digits
-                    for (int i = 0; i < 3; i++) {
-                        final int ch = factvalue.charAt(off + i) - '0';
+                } else if ("mode".equals(unixfact)){ // e.g. 0[1]755
+                    final int off = factvalue.length()-3; // only parse last 3 digits
+                    for(int i=0; i < 3; i++){
+                        final int ch = factvalue.charAt(off+i)-'0';
@@ -250 +264 @@ public class MLSxEntryParser extends FTPFileEntryParserImpl {
-                            for (final int p : UNIX_PERMS[ch]) {
+                            for(final int p : UNIX_PERMS[ch]) {
diff --git a/src/main/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParser.java b/src/main/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParser.java
index d961b77df..6fdc1e95d 100644
--- a/src/main/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParser.java
+++ b/src/main/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParser.java
@@ -27 +27,2 @@ import org.apache.commons.net.ftp.FTPFile;
- * Implementation of FTPFileEntryParser and FTPFileListParser for IBM zOS/MVS Systems.
+ * Implementation of FTPFileEntryParser and FTPFileListParser for IBM zOS/MVS
+ * Systems.
@@ -29 +30,2 @@ import org.apache.commons.net.ftp.FTPFile;
- * @see org.apache.commons.net.ftp.FTPFileEntryParser FTPFileEntryParser (for usage instructions)
+ * @see org.apache.commons.net.ftp.FTPFileEntryParser FTPFileEntryParser (for
+ *      usage instructions)
@@ -41 +43,2 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * Dates are ignored for file lists, but are used for member lists where possible
+     * Dates are ignored for file lists, but are used for member lists where
+     * possible
@@ -44 +47 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-                                                                  // 13:52
+                                                                    // 13:52
@@ -54 +57,3 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * @see <a href= "https://www.ibm.com/support/knowledgecenter/zosbasics/com.ibm.zos.zconcepts/zconcepts_159.htm">Data set record formats</a>
+     * @see <a href=
+     *      "https://www.ibm.com/support/knowledgecenter/zosbasics/com.ibm.zos.zconcepts/zconcepts_159.htm">Data
+     *      set record formats</a>
@@ -57 +62 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-                                                       // ignored
+                                                                // ignored
@@ -72 +76,0 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     *
@@ -90 +93,0 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     *
@@ -97 +100,2 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    static final String JES_LEVEL_1_LIST_REGEX = "(\\S+)\\s+" + // job name ignored
+    static final String JES_LEVEL_1_LIST_REGEX =
+            "(\\S+)\\s+" + // job name ignored
@@ -106,2 +110,2 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * JES INTERFACE LEVEL 2 parser Matches these entries:
-     *
+     * JES INTERFACE LEVEL 2 parser
+     * Matches these entries:
@@ -113 +116,0 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     *
@@ -115 +117,0 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     *
@@ -141 +143,2 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    static final String JES_LEVEL_2_LIST_REGEX = "(\\S+)\\s+" + // job name ignored
+    static final String JES_LEVEL_2_LIST_REGEX =
+            "(\\S+)\\s+" + // job name ignored
@@ -157,2 +160,4 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * --------------------------------------------------------------------- Very brief and incomplete description of the zOS/MVS-file system. (Note: "zOS" is
-     * the operating system on the mainframe, and is the new name for MVS)
+     * ---------------------------------------------------------------------
+     * Very brief and incomplete description of the zOS/MVS-file system. (Note:
+     * "zOS" is the operating system on the mainframe, and is the new name for
+     * MVS)
@@ -160 +165,2 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * The file system on the mainframe does not have hierarchal structure as for example the unix file system. For a more comprehensive description, please
+     * The file system on the mainframe does not have hierarchal structure as for
+     * example the unix file system. For a more comprehensive description, please
@@ -163 +169,2 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * @LINK: http://publibfp.boulder.ibm.com/cgi-bin/bookmgr/BOOKS/dgt2d440/CONTENTS
+     * @LINK:
+     * http://publibfp.boulder.ibm.com/cgi-bin/bookmgr/BOOKS/dgt2d440/CONTENTS
@@ -168,2 +175,3 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * A dataset name consist of a number of qualifiers separated by '.', each qualifier can be at most 8 characters, and the total length of a dataset can be
-     * max 44 characters including the dots.
+     * A dataset name consist of a number of qualifiers separated by '.', each
+     * qualifier can be at most 8 characters, and the total length of a dataset
+     * can be max 44 characters including the dots.
@@ -174,2 +182,4 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * A dataset represents a piece of storage allocated on one or more disks. The structure of the storage is described with the field dataset organinsation
-     * (DSORG). There are a number of dataset organisations, but only two are usable for FTP transfer.
+     * A dataset represents a piece of storage allocated on one or more disks.
+     * The structure of the storage is described with the field dataset
+     * organinsation (DSORG). There are a number of dataset organisations, but
+     * only two are usable for FTP transfer.
@@ -177 +187,2 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * DSORG: PS: sequential, or flat file PO: partitioned dataset PO-E: extended partitioned dataset
+     * DSORG: PS: sequential, or flat file PO: partitioned dataset PO-E:
+     * extended partitioned dataset
@@ -179 +190,2 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * The PS file is just a flat file, as you would find it on the unix file system.
+     * The PS file is just a flat file, as you would find it on the unix file
+     * system.
@@ -181,2 +193,4 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * The PO and PO-E files, can be compared to a single level directory structure. A PO file consist of a number of dataset members, or files if you will. It
-     * is possible to CD into the file, and to retrieve the individual members.
+     * The PO and PO-E files, can be compared to a single level directory
+     * structure. A PO file consist of a number of dataset members, or files if
+     * you will. It is possible to CD into the file, and to retrieve the
+     * individual members.
@@ -187,2 +201,3 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * The physical layout of the dataset is described on the dataset itself. There are a number of record formats (RECFM), but just a few is relavant for the
-     * FTP transfer.
+     * The physical layout of the dataset is described on the dataset itself.
+     * There are a number of record formats (RECFM), but just a few is relavant
+     * for the FTP transfer.
@@ -190,2 +205,4 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * Any one beginning with either F or V can safely used by FTP transfer. All others should only be used with great care. F means a fixed number of records
-     * per allocated storage, and V means a variable number of records.
+     * Any one beginning with either F or V can safely used by FTP transfer. All
+     * others should only be used with great care.
+     * F means a fixed number of records per
+     * allocated storage, and V means a variable number of records.
@@ -196,2 +213,3 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * The file system supports automatically backup and retrieval of datasets. If a file is backed up, the ftp LIST command will return: ARCIVE Not Direct
-     * Access Device KJ.IOP998.ERROR.PL.UNITTEST
+     * The file system supports automatically backup and retrieval of datasets.
+     * If a file is backed up, the ftp LIST command will return: ARCIVE Not
+     * Direct Access Device KJ.IOP998.ERROR.PL.UNITTEST
@@ -202 +220,2 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * Only datasets that have dsorg PS, PO or PO-E and have recfm beginning with F or V or U, is fully parsed.
+     * Only datasets that have dsorg PS, PO or PO-E and have recfm beginning
+     * with F or V or U, is fully parsed.
@@ -204 +223,2 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * The following fields in FTPFile is used: FTPFile.Rawlisting: Always set. FTPFile.Type: DIRECTORY_TYPE or FILE_TYPE or UNKNOWN FTPFile.Name: name
+     * The following fields in FTPFile is used: FTPFile.Rawlisting: Always set.
+     * FTPFile.Type: DIRECTORY_TYPE or FILE_TYPE or UNKNOWN FTPFile.Name: name
@@ -211,3 +231,5 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * The MVS ftp server supports a number of features via the FTP interface. The features are controlled with the FTP command quote site
-     * filetype=<SEQ|JES|DB2> SEQ is the default and used for normal file transfer JES is used to interact with the Job Entry Subsystem (JES) similar to a job
-     * scheduler DB2 is used to interact with a DB2 subsystem
+     * The MVS ftp server supports a number of features via the FTP interface.
+     * The features are controlled with the FTP command quote site filetype=<SEQ|JES|DB2>
+     * SEQ is the default and used for normal file transfer JES is used to
+     * interact with the Job Entry Subsystem (JES) similar to a job scheduler
+     * DB2 is used to interact with a DB2 subsystem
@@ -238 +260,2 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-        return new FTPClientConfig(FTPClientConfig.SYST_MVS, DEFAULT_DATE_FORMAT, null);
+        return new FTPClientConfig(FTPClientConfig.SYST_MVS,
+                DEFAULT_DATE_FORMAT, null);
@@ -242 +265,2 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * Parse entries representing a dataset list. Only datasets with DSORG PS or PO or PO-E and with RECFM F[B], V[B], U will be parsed.
+     * Parse entries representing a dataset list. Only datasets with DSORG PS or
+     * PO or PO-E and with RECFM F[B], V[B], U will be parsed.
@@ -244,3 +268,5 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * Format of ZOS/MVS file list: 1 2 3 4 5 6 7 8 9 10 Volume Unit Referred Ext Used Recfm Lrecl BlkSz Dsorg Dsname B10142 3390 2006/03/20 2 31 F 80 80 PS
-     * MDI.OKL.WORK ARCIVE Not Direct Access Device KJ.IOP998.ERROR.PL.UNITTEST B1N231 3390 2006/03/20 1 15 VB 256 27998 PO PLU B1N231 3390 2006/03/20 1 15 VB
-     * 256 27998 PO-E PLB
+     * Format of ZOS/MVS file list: 1 2 3 4 5 6 7 8 9 10 Volume Unit Referred
+     * Ext Used Recfm Lrecl BlkSz Dsorg Dsname B10142 3390 2006/03/20 2 31 F 80
+     * 80 PS MDI.OKL.WORK ARCIVE Not Direct Access Device
+     * KJ.IOP998.ERROR.PL.UNITTEST B1N231 3390 2006/03/20 1 15 VB 256 27998 PO
+     * PLU B1N231 3390 2006/03/20 1 15 VB 256 27998 PO-E PLB
@@ -248,2 +274,5 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * ----------------------------------- Group within Regex [1] Volume [2] Unit [3] Referred [4] Ext: number of extents [5] Used [6] Recfm: Record format [7]
-     * Lrecl: Logical record length [8] BlkSz: Block size [9] Dsorg: Dataset organisation. Many exists but only support: PS, PO, PO-E [10] Dsname: Dataset name
+     * ----------------------------------- Group within Regex [1] Volume [2]
+     * Unit [3] Referred [4] Ext: number of extents [5] Used [6] Recfm: Record
+     * format [7] Lrecl: Logical record length [8] BlkSz: Block size [9] Dsorg:
+     * Dataset organisation. Many exists but only support: PS, PO, PO-E [10]
+     * Dsname: Dataset name
@@ -251,2 +280,3 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * Note: When volume is ARCIVE, it means the dataset is stored somewhere in a tape archive. These entries is currently not supported by this parser. A null
-     * value is returned.
+     * Note: When volume is ARCIVE, it means the dataset is stored somewhere in
+     * a tape archive. These entries is currently not supported by this parser.
+     * A null value is returned.
@@ -268 +298,2 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            } else if ("PO".equals(dsorg) || "PO-E".equals(dsorg)) {
+            }
+            else if ("PO".equals(dsorg) || "PO-E".equals(dsorg)) {
@@ -271 +302,2 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            } else {
+            }
+            else {
@@ -282,5 +314,8 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * Parses a line of an z/OS - MVS FTP server file listing and converts it into a usable format in the form of an <code> FTPFile </code> instance. If the
-     * file listing line doesn't describe a file, then <code> null </code> is returned. Otherwise a <code> FTPFile </code> instance representing the file is
-     * returned.
-     *
-     * @param entry A line of text from the file listing
+     * Parses a line of an z/OS - MVS FTP server file listing and converts it
+     * into a usable format in the form of an <code> FTPFile </code> instance.
+     * If the file listing line doesn't describe a file, then
+     * <code> null </code> is returned. Otherwise a <code> FTPFile </code>
+     * instance representing the file is returned.
+     *
+     * @param entry
+     *            A line of text from the file listing
@@ -298 +333 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            return unixFTPEntryParser.parseFTPEntry(entry);
+             return unixFTPEntryParser.parseFTPEntry(entry);
@@ -312 +346,0 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     *
@@ -325 +359 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * </pre>
+     *</pre>
@@ -347 +380,0 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     *
@@ -387 +419,0 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     *
@@ -427,2 +459,3 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-         * Assigns the name to the first word of the entry. Only to be used from a safe context, for example from a memberlist, where the regex for some reason
-         * fails. Then just assign the name field of FTPFile.
+         * Assigns the name to the first word of the entry. Only to be used from a
+         * safe context, for example from a memberlist, where the regex for some
+         * reason fails. Then just assign the name field of FTPFile.
@@ -441,3 +474,6 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * preParse is called as part of the interface. Per definition is is called before the parsing takes place. Three kind of lists is recognize: z/OS-MVS File
-     * lists z/OS-MVS Member lists unix file lists
-     *
+     * preParse is called as part of the interface. Per definition is is called
+     * before the parsing takes place.
+     * Three kind of lists is recognize:
+     * z/OS-MVS File lists
+     * z/OS-MVS Member lists
+     * unix file lists
@@ -465 +501,2 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            } else if (header.indexOf("JOBNAME") == 0 && header.indexOf("JOBID") > 8) {// header contains JOBNAME JOBID OWNER // STATUS CLASS
+            } else if (header.indexOf("JOBNAME") == 0
+                    && header.indexOf("JOBID") > 8) {// header contains JOBNAME JOBID OWNER // STATUS CLASS
@@ -482 +518,0 @@ public class MVSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     *
diff --git a/src/main/java/org/apache/commons/net/ftp/parser/MacOsPeterFTPEntryParser.java b/src/main/java/org/apache/commons/net/ftp/parser/MacOsPeterFTPEntryParser.java
index d0db91801..8323b06c7 100644
--- a/src/main/java/org/apache/commons/net/ftp/parser/MacOsPeterFTPEntryParser.java
+++ b/src/main/java/org/apache/commons/net/ftp/parser/MacOsPeterFTPEntryParser.java
@@ -19 +18,0 @@ package org.apache.commons.net.ftp.parser;
-
@@ -31 +30,2 @@ import org.apache.commons.net.ftp.FTPFile;
-public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
+public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
+{
@@ -33 +33,2 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-    static final String DEFAULT_DATE_FORMAT = "MMM d yyyy"; // Nov 9 2001
+    static final String DEFAULT_DATE_FORMAT
+        = "MMM d yyyy"; //Nov 9 2001
@@ -35 +36,2 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-    static final String DEFAULT_RECENT_DATE_FORMAT = "MMM d HH:mm"; // Nov 9 20:06
+    static final String DEFAULT_RECENT_DATE_FORMAT
+        = "MMM d HH:mm"; //Nov 9 20:06
@@ -40,4 +42,16 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-     * Permissions: r the file is readable w the file is writable x the file is executable - the indicated permission is not granted L mandatory locking occurs
-     * during access (the set-group-ID bit is on and the group execution bit is off) s the set-user-ID or set-group-ID bit is on, and the corresponding user or
-     * group execution bit is also on S undefined bit-state (the set-user-ID bit is on and the user execution bit is off) t the 1000 (octal) bit, or sticky bit,
-     * is on [see chmod(1)], and execution is on T the 1000 bit is turned on, and execution is off (undefined bit- state) e z/OS external link bit
+     * Permissions:
+     *    r   the file is readable
+     *    w   the file is writable
+     *    x   the file is executable
+     *    -   the indicated permission is not granted
+     *    L   mandatory locking occurs during access (the set-group-ID bit is
+     *        on and the group execution bit is off)
+     *    s   the set-user-ID or set-group-ID bit is on, and the corresponding
+     *        user or group execution bit is also on
+     *    S   undefined bit-state (the set-user-ID bit is on and the user
+     *        execution bit is off)
+     *    t   the 1000 (octal) bit, or sticky bit, is on [see chmod(1)], and
+     *        execution is on
+     *    T   the 1000 bit is turned on, and execution is off (undefined bit-
+     *        state)
+     *    e   z/OS external link bit
@@ -45,15 +59,26 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-    private static final String REGEX = "([bcdelfmpSs-])" // type (1)
-            + "(((r|-)(w|-)([xsStTL-]))((r|-)(w|-)([xsStTL-]))((r|-)(w|-)([xsStTL-])))\\+?\\s+" // permission
-            + "(" + "(folder\\s+)" + "|" + "((\\d+)\\s+(\\d+)\\s+)" // resource size & data size
-            + ")" + "(\\d+)\\s+" // size
-            /*
-             * numeric or standard format date: yyyy-mm-dd (expecting hh:mm to follow) MMM [d]d [d]d MMM N.B. use non-space for MMM to allow for languages such
-             * as German which use diacritics (e.g. umlaut) in some abbreviations.
-             */
-            + "((?:\\d+[-/]\\d+[-/]\\d+)|(?:\\S{3}\\s+\\d{1,2})|(?:\\d{1,2}\\s+\\S{3}))\\s+"
-            /*
-             * year (for non-recent standard format) - yyyy or time (for numeric or recent standard format) [h]h:mm
-             */
-            + "(\\d+(?::\\d+)?)\\s+"
-
-            + "(\\S*)(\\s*.*)"; // the rest
+    private static final String REGEX =
+        "([bcdelfmpSs-])" // type (1)
+        + "(((r|-)(w|-)([xsStTL-]))((r|-)(w|-)([xsStTL-]))((r|-)(w|-)([xsStTL-])))\\+?\\s+" // permission
+        + "("
+        +   "(folder\\s+)"
+        + "|"
+        +   "((\\d+)\\s+(\\d+)\\s+)" // resource size & data size
+        + ")"
+        + "(\\d+)\\s+"              // size
+        /*
+         * numeric or standard format date:
+         *   yyyy-mm-dd (expecting hh:mm to follow)
+         *   MMM [d]d
+         *   [d]d MMM
+         *   N.B. use non-space for MMM to allow for languages such as German which use
+         *   diacritics (e.g. umlaut) in some abbreviations.
+        */
+        + "((?:\\d+[-/]\\d+[-/]\\d+)|(?:\\S{3}\\s+\\d{1,2})|(?:\\d{1,2}\\s+\\S{3}))\\s+"
+        /*
+           year (for non-recent standard format) - yyyy
+           or time (for numeric or recent standard format) [h]h:mm
+        */
+        + "(\\d+(?::\\d+)?)\\s+"
+
+        + "(\\S*)(\\s*.*)"; // the rest
+
@@ -64,2 +89,4 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-     * @throws IllegalArgumentException Thrown if the regular expression is unparseable. Should not be seen under normal conditions. It it is seen, this is a
-     *                                  sign that <code>REGEX</code> is not a valid regular expression.
+     * @throws IllegalArgumentException
+     * Thrown if the regular expression is unparseable.  Should not be seen
+     * under normal conditions.  It it is seen, this is a sign that
+     * <code>REGEX</code> is  not a valid regular expression.
@@ -67 +94,2 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-    public MacOsPeterFTPEntryParser() {
+    public MacOsPeterFTPEntryParser()
+    {
@@ -72 +100,2 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-     * This constructor allows the creation of a UnixFTPEntryParser object with something other than the default configuration.
+     * This constructor allows the creation of a UnixFTPEntryParser object with
+     * something other than the default configuration.
@@ -74,3 +103,6 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-     * @param config The {@link FTPClientConfig configuration} object used to configure this parser.
-     * @throws IllegalArgumentException Thrown if the regular expression is unparseable. Should not be seen under normal conditions. It it is seen, this is a
-     *                                  sign that <code>REGEX</code> is not a valid regular expression.
+     * @param config The {@link FTPClientConfig configuration} object used to
+     * configure this parser.
+     * @throws IllegalArgumentException
+     * Thrown if the regular expression is unparseable.  Should not be seen
+     * under normal conditions.  It it is seen, this is a sign that
+     * <code>REGEX</code> is  not a valid regular expression.
@@ -79 +111,2 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-    public MacOsPeterFTPEntryParser(final FTPClientConfig config) {
+    public MacOsPeterFTPEntryParser(final FTPClientConfig config)
+    {
@@ -85,2 +118,3 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-     * Defines a default configuration to be used when this class is instantiated without a {@link FTPClientConfig FTPClientConfig} parameter being specified.
-     *
+     * Defines a default configuration to be used when this class is
+     * instantiated without a {@link  FTPClientConfig  FTPClientConfig}
+     * parameter being specified.
@@ -91 +125,4 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-        return new FTPClientConfig(FTPClientConfig.SYST_UNIX, DEFAULT_DATE_FORMAT, DEFAULT_RECENT_DATE_FORMAT);
+        return new FTPClientConfig(
+                FTPClientConfig.SYST_UNIX,
+                DEFAULT_DATE_FORMAT,
+                DEFAULT_RECENT_DATE_FORMAT);
@@ -95,3 +132,5 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-     * Parses a line of a unix (standard) FTP server file listing and converts it into a usable format in the form of an <code> FTPFile </code> instance. If the
-     * file listing line doesn't describe a file, <code> null </code> is returned, otherwise a <code> FTPFile </code> instance representing the files in the
-     * directory is returned.
+     * Parses a line of a unix (standard) FTP server file listing and converts
+     * it into a usable format in the form of an <code> FTPFile </code>
+     * instance.  If the file listing line doesn't describe a file,
+     * <code> null </code> is returned, otherwise a <code> FTPFile </code>
+     * instance representing the files in the directory is returned.
@@ -109 +148,2 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-        if (matches(entry)) {
+        if (matches(entry))
+        {
@@ -119 +159,2 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-            try {
+            try
+            {
@@ -121,2 +162,4 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-            } catch (final ParseException e) {
-                // intentionally do nothing
+            }
+            catch (final ParseException e)
+            {
+                 // intentionally do nothing
@@ -129 +172,2 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-            switch (typeStr.charAt(0)) {
+            switch (typeStr.charAt(0))
+            {
@@ -155 +199,2 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-            for (int access = 0; access < 3; access++, g += 4) {
+            for (int access = 0; access < 3; access++, g += 4)
+            {
@@ -157,2 +202,4 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-                file.setPermission(access, FTPFile.READ_PERMISSION, (!group(g).equals("-")));
-                file.setPermission(access, FTPFile.WRITE_PERMISSION, (!group(g + 1).equals("-")));
+                file.setPermission(access, FTPFile.READ_PERMISSION,
+                                   (!group(g).equals("-")));
+                file.setPermission(access, FTPFile.WRITE_PERMISSION,
+                                   (!group(g + 1).equals("-")));
@@ -161 +208,2 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-                file.setPermission(access, FTPFile.EXECUTE_PERMISSION, !execPerm.equals("-") && !Character.isUpperCase(execPerm.charAt(0)));
+                file.setPermission(access, FTPFile.EXECUTE_PERMISSION, !execPerm.equals("-")
+                        && !Character.isUpperCase(execPerm.charAt(0)));
@@ -164,2 +212,4 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-            if (!isDevice) {
-                try {
+            if (!isDevice)
+            {
+                try
+                {
@@ -167 +217,3 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-                } catch (final NumberFormatException e) {
+                }
+                catch (final NumberFormatException e)
+                {
@@ -175 +227,2 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-            try {
+            try
+            {
@@ -177 +230,3 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-            } catch (final NumberFormatException e) {
+            }
+            catch (final NumberFormatException e)
+            {
@@ -181 +236,2 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-            if (null == endtoken) {
+            if (null == endtoken)
+            {
@@ -183 +239,3 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-            } else {
+            }
+            else
+            {
@@ -187 +245,2 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-                if (type == FTPFile.SYMBOLIC_LINK_TYPE) {
+                if (type == FTPFile.SYMBOLIC_LINK_TYPE)
+                {
@@ -191 +250,2 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-                    if (end == -1) {
+                    if (end == -1)
+                    {
@@ -193 +253,3 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-                    } else {
+                    }
+                    else
+                    {
@@ -198 +260,3 @@ public class MacOsPeterFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-                } else {
+                }
+                else
+                {
diff --git a/src/main/java/org/apache/commons/net/ftp/parser/NTFTPEntryParser.java b/src/main/java/org/apache/commons/net/ftp/parser/NTFTPEntryParser.java
index a7de045cc..3ce5d30b2 100644
--- a/src/main/java/org/apache/commons/net/ftp/parser/NTFTPEntryParser.java
+++ b/src/main/java/org/apache/commons/net/ftp/parser/NTFTPEntryParser.java
@@ -19 +18,0 @@ package org.apache.commons.net.ftp.parser;
-
@@ -32 +31,2 @@ import org.apache.commons.net.ftp.FTPFile;
-public class NTFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
+public class NTFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
+{
@@ -34 +34,2 @@ public class NTFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    private static final String DEFAULT_DATE_FORMAT = "MM-dd-yy hh:mma"; // 11-09-01 12:30PM
+    private static final String DEFAULT_DATE_FORMAT
+        = "MM-dd-yy hh:mma"; //11-09-01 12:30PM
@@ -36 +37,2 @@ public class NTFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    private static final String DEFAULT_DATE_FORMAT2 = "MM-dd-yy kk:mm"; // 11-09-01 18:30
+    private static final String DEFAULT_DATE_FORMAT2
+        = "MM-dd-yy kk:mm"; //11-09-01 18:30
@@ -41,3 +43,4 @@ public class NTFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    private static final String REGEX = "(\\S+)\\s+(\\S+)\\s+" // MM-dd-yy whitespace hh:mma|kk:mm; swallow trailing spaces
-            + "(?:(<DIR>)|([0-9]+))\\s+" // <DIR> or ddddd; swallow trailing spaces
-            + "(\\S.*)"; // First non-space followed by rest of line (name)
+    private static final String REGEX =
+        "(\\S+)\\s+(\\S+)\\s+"          // MM-dd-yy whitespace hh:mma|kk:mm; swallow trailing spaces
+        + "(?:(<DIR>)|([0-9]+))\\s+"    // <DIR> or ddddd; swallow trailing spaces
+        + "(\\S.*)";                    // First non-space followed by rest of line (name)
@@ -50,2 +53,4 @@ public class NTFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * @throws IllegalArgumentException Thrown if the regular expression is unparseable. Should not be seen under normal conditions. It it is seen, this is a
-     *                                  sign that <code>REGEX</code> is not a valid regular expression.
+     * @throws IllegalArgumentException
+     * Thrown if the regular expression is unparseable.  Should not be seen
+     * under normal conditions.  It it is seen, this is a sign that
+     * <code>REGEX</code> is  not a valid regular expression.
@@ -53 +58,2 @@ public class NTFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    public NTFTPEntryParser() {
+    public NTFTPEntryParser()
+    {
@@ -58 +64,2 @@ public class NTFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * This constructor allows the creation of an NTFTPEntryParser object with something other than the default configuration.
+     * This constructor allows the creation of an NTFTPEntryParser object
+     * with something other than the default configuration.
@@ -60,3 +67,6 @@ public class NTFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * @param config The {@link FTPClientConfig configuration} object used to configure this parser.
-     * @throws IllegalArgumentException Thrown if the regular expression is unparseable. Should not be seen under normal conditions. It it is seen, this is a
-     *                                  sign that <code>REGEX</code> is not a valid regular expression.
+     * @param config The {@link FTPClientConfig configuration} object used to
+     * configure this parser.
+     * @throws IllegalArgumentException
+     * Thrown if the regular expression is unparseable.  Should not be seen
+     * under normal conditions.  It it is seen, this is a sign that
+     * <code>REGEX</code> is  not a valid regular expression.
@@ -65 +75,2 @@ public class NTFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    public NTFTPEntryParser(final FTPClientConfig config) {
+     public NTFTPEntryParser(final FTPClientConfig config)
+    {
@@ -68 +79,4 @@ public class NTFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-        final FTPClientConfig config2 = new FTPClientConfig(FTPClientConfig.SYST_NT, DEFAULT_DATE_FORMAT2, null);
+        final FTPClientConfig config2 = new FTPClientConfig(
+                FTPClientConfig.SYST_NT,
+                DEFAULT_DATE_FORMAT2,
+                null);
@@ -71 +85 @@ public class NTFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-        ((Configurable) this.timestampParser).configure(config2);
+        ((Configurable)this.timestampParser).configure(config2);
@@ -75,2 +89,3 @@ public class NTFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * Defines a default configuration to be used when this class is instantiated without a {@link FTPClientConfig FTPClientConfig} parameter being specified.
-     *
+     * Defines a default configuration to be used when this class is
+     * instantiated without a {@link  FTPClientConfig  FTPClientConfig}
+     * parameter being specified.
@@ -81 +96,4 @@ public class NTFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-        return new FTPClientConfig(FTPClientConfig.SYST_NT, DEFAULT_DATE_FORMAT, null);
+        return new FTPClientConfig(
+                FTPClientConfig.SYST_NT,
+                DEFAULT_DATE_FORMAT,
+                null);
@@ -85,3 +103,5 @@ public class NTFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * Parses a line of an NT FTP server file listing and converts it into a usable format in the form of an <code> FTPFile </code> instance. If the file
-     * listing line doesn't describe a file, <code> null </code> is returned, otherwise a <code> FTPFile </code> instance representing the files in the
-     * directory is returned.
+     * Parses a line of an NT FTP server file listing and converts it into a
+     * usable format in the form of an <code> FTPFile </code> instance.  If the
+     * file listing line doesn't describe a file, <code> null </code> is
+     * returned, otherwise a <code> FTPFile </code> instance representing the
+     * files in the directory is returned.
@@ -93 +113,2 @@ public class NTFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    public FTPFile parseFTPEntry(final String entry) {
+    public FTPFile parseFTPEntry(final String entry)
+    {
@@ -97,2 +118,3 @@ public class NTFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-        if (matches(entry)) {
-            final String datestr = group(1) + " " + group(2);
+        if (matches(entry))
+        {
+            final String datestr = group(1)+" "+group(2);
@@ -102 +124,2 @@ public class NTFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            try {
+            try
+            {
@@ -104 +127,3 @@ public class NTFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            } catch (final ParseException e) {
+            }
+            catch (final ParseException e)
+            {
@@ -106 +131,2 @@ public class NTFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-                try {
+                try
+                {
@@ -108 +134,3 @@ public class NTFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-                } catch (final ParseException e2) {
+                }
+                catch (final ParseException e2)
+                {
@@ -113 +141,2 @@ public class NTFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            if (null == name || name.equals(".") || name.equals("..")) {
+            if (null == name || name.equals(".") || name.equals(".."))
+            {
@@ -118 +147,3 @@ public class NTFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            if ("<DIR>".equals(dirString)) {
+
+            if ("<DIR>".equals(dirString))
+            {
@@ -121 +152,3 @@ public class NTFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            } else {
+            }
+            else
+            {
@@ -123,2 +156,3 @@ public class NTFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-                if (null != size) {
-                    f.setSize(Long.parseLong(size));
+                if (null != size)
+                {
+                  f.setSize(Long.parseLong(size));
diff --git a/src/main/java/org/apache/commons/net/ftp/parser/NetwareFTPEntryParser.java b/src/main/java/org/apache/commons/net/ftp/parser/NetwareFTPEntryParser.java
index 9d0c90da8..808ed2b54 100644
--- a/src/main/java/org/apache/commons/net/ftp/parser/NetwareFTPEntryParser.java
+++ b/src/main/java/org/apache/commons/net/ftp/parser/NetwareFTPEntryParser.java
@@ -26,3 +26,5 @@ import org.apache.commons.net.ftp.FTPFile;
- * Implementation of FTPFileEntryParser and FTPFileListParser for Netware Systems. Note that some of the proprietary extensions for Novell-specific operations
- * are not supported. See <a href="http://www.novell.com/documentation/nw65/index.html?page=/documentation/nw65/ftp_enu/data/fbhbgcfa.html">
- * http://www.novell.com/documentation/nw65/index.html?page=/documentation/nw65/ftp_enu/data/fbhbgcfa.html</a> for more details.
+ * Implementation of FTPFileEntryParser and FTPFileListParser for Netware Systems. Note that some of the proprietary
+ * extensions for Novell-specific operations are not supported. See
+ * <a href="http://www.novell.com/documentation/nw65/index.html?page=/documentation/nw65/ftp_enu/data/fbhbgcfa.html">
+ * http://www.novell.com/documentation/nw65/index.html?page=/documentation/nw65/ftp_enu/data/fbhbgcfa.html</a>
+ * for more details.
@@ -46 +48,2 @@ public class NetwareFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * this is the regular expression used by this parser. Example: d [-W---F--] SCION_VOL2 512 Apr 13 23:12 VOL2
+     * this is the regular expression used by this parser.
+     * Example: d [-W---F--] SCION_VOL2                        512 Apr 13 23:12 VOL2
@@ -48,5 +51,5 @@ public class NetwareFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    private static final String REGEX = "(d|-){1}\\s+" // Directory/file flag
-            + "\\[([-A-Z]+)\\]\\s+" // Attributes RWCEAFMS or -
-            + "(\\S+)\\s+" + "(\\d+)\\s+" // Owner and size
-            + "(\\S+\\s+\\S+\\s+((\\d+:\\d+)|(\\d{4})))" // Long/short date format
-            + "\\s+(.*)"; // Filename (incl. spaces)
+    private static final String REGEX = "(d|-){1}\\s+"      // Directory/file flag
+            + "\\[([-A-Z]+)\\]\\s+"                         // Attributes RWCEAFMS or -
+            + "(\\S+)\\s+" + "(\\d+)\\s+"                   // Owner and size
+            + "(\\S+\\s+\\S+\\s+((\\d+:\\d+)|(\\d{4})))"    // Long/short date format
+            + "\\s+(.*)";                                   // Filename (incl. spaces)
@@ -57,2 +60,4 @@ public class NetwareFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * @throws IllegalArgumentException Thrown if the regular expression is unparseable. Should not be seen under normal conditions. It it is seen, this is a
-     *                                  sign that <code>REGEX</code> is not a valid regular expression.
+     * @throws IllegalArgumentException
+     * Thrown if the regular expression is unparseable.  Should not be seen
+     * under normal conditions.  It it is seen, this is a sign that
+     * <code>REGEX</code> is  not a valid regular expression.
@@ -65 +70,2 @@ public class NetwareFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * This constructor allows the creation of an NetwareFTPEntryParser object with something other than the default configuration.
+     * This constructor allows the creation of an NetwareFTPEntryParser object
+     * with something other than the default configuration.
@@ -67,3 +73,6 @@ public class NetwareFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * @param config The {@link FTPClientConfig configuration} object used to configure this parser.
-     * @throws IllegalArgumentException Thrown if the regular expression is unparseable. Should not be seen under normal conditions. It it is seen, this is a
-     *                                  sign that <code>REGEX</code> is not a valid regular expression.
+     * @param config The {@link FTPClientConfig configuration} object used to
+     * configure this parser.
+     * @throws IllegalArgumentException
+     * Thrown if the regular expression is unparseable.  Should not be seen
+     * under normal conditions.  It it is seen, this is a sign that
+     * <code>REGEX</code> is  not a valid regular expression.
@@ -78,2 +87,3 @@ public class NetwareFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * Defines a default configuration to be used when this class is instantiated without a {@link FTPClientConfig FTPClientConfig} parameter being specified.
-     *
+     * Defines a default configuration to be used when this class is
+     * instantiated without a {@link  FTPClientConfig  FTPClientConfig}
+     * parameter being specified.
@@ -84 +94,2 @@ public class NetwareFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-        return new FTPClientConfig(FTPClientConfig.SYST_NETWARE, DEFAULT_DATE_FORMAT, DEFAULT_RECENT_DATE_FORMAT);
+        return new FTPClientConfig(FTPClientConfig.SYST_NETWARE,
+                DEFAULT_DATE_FORMAT, DEFAULT_RECENT_DATE_FORMAT);
@@ -88,3 +99,5 @@ public class NetwareFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * Parses a line of an NetwareFTP server file listing and converts it into a usable format in the form of an <code> FTPFile </code> instance. If the file
-     * listing line doesn't describe a file, <code> null </code> is returned, otherwise a <code> FTPFile </code> instance representing the files in the
-     * directory is returned.
+     * Parses a line of an NetwareFTP server file listing and converts it into a
+     * usable format in the form of an <code> FTPFile </code> instance.  If the
+     * file listing line doesn't describe a file, <code> null </code> is
+     * returned, otherwise a <code> FTPFile </code> instance representing the
+     * files in the directory is returned.
@@ -92 +105 @@ public class NetwareFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * Netware file permissions are in the following format: RWCEAFMS, and are explained as follows:
+     * Netware file permissions are in the following format:  RWCEAFMS, and are explained as follows:
@@ -104 +117,4 @@ public class NetwareFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * See <a href="http://www.novell.com/documentation/nfap10/index.html?page=/documentation/nfap10/nfaubook/data/abxraws.html"> here</a> for more details
+     * See
+     * <a href="http://www.novell.com/documentation/nfap10/index.html?page=/documentation/nfap10/nfaubook/data/abxraws.html">
+     * here</a>
+     * for more details
@@ -124 +140 @@ public class NetwareFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-                // intentionally do nothing
+                 // intentionally do nothing
@@ -127 +143 @@ public class NetwareFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            // is it a DIR or a file
+            //is it a DIR or a file
@@ -137 +153 @@ public class NetwareFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            // set the name
+            //set the name
@@ -140 +156 @@ public class NetwareFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            // set the size
+            //set the size
@@ -146 +162,2 @@ public class NetwareFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-                f.setPermission(FTPFile.USER_ACCESS, FTPFile.READ_PERMISSION, true);
+                f.setPermission(FTPFile.USER_ACCESS, FTPFile.READ_PERMISSION,
+                        true);
@@ -149 +166,2 @@ public class NetwareFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-                f.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
+                f.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION,
+                        true);
diff --git a/src/main/java/org/apache/commons/net/ftp/parser/OS2FTPEntryParser.java b/src/main/java/org/apache/commons/net/ftp/parser/OS2FTPEntryParser.java
index 2b49f0995..1cc633356 100644
--- a/src/main/java/org/apache/commons/net/ftp/parser/OS2FTPEntryParser.java
+++ b/src/main/java/org/apache/commons/net/ftp/parser/OS2FTPEntryParser.java
@@ -19 +18,0 @@ package org.apache.commons.net.ftp.parser;
-
@@ -34 +33,2 @@ public class OS2FTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-    private static final String DEFAULT_DATE_FORMAT = "MM-dd-yy HH:mm"; // 11-09-01 12:30
+    private static final String DEFAULT_DATE_FORMAT
+        = "MM-dd-yy HH:mm"; //11-09-01 12:30
@@ -38,2 +38,6 @@ public class OS2FTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-    private static final String REGEX = "\\s*([0-9]+)\\s*" + "(\\s+|[A-Z]+)\\s*" + "(DIR|\\s+)\\s*" + "(\\S+)\\s+(\\S+)\\s+" /* date stuff */
-            + "(\\S.*)";
+    private static final String REGEX =
+        "\\s*([0-9]+)\\s*"
+        + "(\\s+|[A-Z]+)\\s*"
+        + "(DIR|\\s+)\\s*"
+        + "(\\S+)\\s+(\\S+)\\s+" /* date stuff */
+        + "(\\S.*)";
@@ -44,2 +48,4 @@ public class OS2FTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-     * @throws IllegalArgumentException Thrown if the regular expression is unparseable. Should not be seen under normal conditions. It it is seen, this is a
-     *                                  sign that <code>REGEX</code> is not a valid regular expression.
+     * @throws IllegalArgumentException
+     * Thrown if the regular expression is unparseable.  Should not be seen
+     * under normal conditions.  It it is seen, this is a sign that
+     * <code>REGEX</code> is  not a valid regular expression.
@@ -47 +53,2 @@ public class OS2FTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-    public OS2FTPEntryParser() {
+    public OS2FTPEntryParser()
+    {
@@ -52 +59,2 @@ public class OS2FTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-     * This constructor allows the creation of an OS2FTPEntryParser object with something other than the default configuration.
+     * This constructor allows the creation of an OS2FTPEntryParser object
+     * with something other than the default configuration.
@@ -54,3 +62,6 @@ public class OS2FTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-     * @param config The {@link FTPClientConfig configuration} object used to configure this parser.
-     * @throws IllegalArgumentException Thrown if the regular expression is unparseable. Should not be seen under normal conditions. It it is seen, this is a
-     *                                  sign that <code>REGEX</code> is not a valid regular expression.
+     * @param config The {@link FTPClientConfig configuration} object used to
+     * configure this parser.
+     * @throws IllegalArgumentException
+     * Thrown if the regular expression is unparseable.  Should not be seen
+     * under normal conditions.  It it is seen, this is a sign that
+     * <code>REGEX</code> is  not a valid regular expression.
@@ -59 +70,2 @@ public class OS2FTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-    public OS2FTPEntryParser(final FTPClientConfig config) {
+     public OS2FTPEntryParser(final FTPClientConfig config)
+    {
@@ -65,2 +77,3 @@ public class OS2FTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-     * Defines a default configuration to be used when this class is instantiated without a {@link FTPClientConfig FTPClientConfig} parameter being specified.
-     *
+     * Defines a default configuration to be used when this class is
+     * instantiated without a {@link  FTPClientConfig  FTPClientConfig}
+     * parameter being specified.
@@ -71 +84,4 @@ public class OS2FTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-        return new FTPClientConfig(FTPClientConfig.SYST_OS2, DEFAULT_DATE_FORMAT, null);
+        return new FTPClientConfig(
+                FTPClientConfig.SYST_OS2,
+                DEFAULT_DATE_FORMAT,
+                null);
@@ -75,3 +91,5 @@ public class OS2FTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-     * Parses a line of an OS2 FTP server file listing and converts it into a usable format in the form of an <code> FTPFile </code> instance. If the file
-     * listing line doesn't describe a file, <code> null </code> is returned, otherwise a <code> FTPFile </code> instance representing the files in the
-     * directory is returned.
+     * Parses a line of an OS2 FTP server file listing and converts it into a
+     * usable format in the form of an <code> FTPFile </code> instance.  If the
+     * file listing line doesn't describe a file, <code> null </code> is
+     * returned, otherwise a <code> FTPFile </code> instance representing the
+     * files in the directory is returned.
@@ -83 +101,2 @@ public class OS2FTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-    public FTPFile parseFTPEntry(final String entry) {
+    public FTPFile parseFTPEntry(final String entry)
+    {
@@ -86 +105,2 @@ public class OS2FTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-        if (matches(entry)) {
+        if (matches(entry))
+        {
@@ -90 +110 @@ public class OS2FTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-            final String datestr = group(4) + " " + group(5);
+            final String datestr = group(4)+" "+group(5);
@@ -92 +112,2 @@ public class OS2FTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-            try {
+            try
+            {
@@ -94 +115,3 @@ public class OS2FTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-            } catch (final ParseException e) {
+            }
+            catch (final ParseException e)
+            {
@@ -98,2 +121,4 @@ public class OS2FTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-            // is it a DIR or a file
-            if (dirString.trim().equals("DIR") || attrib.trim().equals("DIR")) {
+
+            //is it a DIR or a file
+            if (dirString.trim().equals("DIR") || attrib.trim().equals("DIR"))
+            {
@@ -101 +126,3 @@ public class OS2FTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-            } else {
+            }
+            else
+            {
@@ -105 +132,2 @@ public class OS2FTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-            // set the name
+
+            //set the name
@@ -108 +136 @@ public class OS2FTPEntryParser extends ConfigurableFTPFileEntryParserImpl
-            // set the size
+            //set the size
diff --git a/src/main/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParser.java b/src/main/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParser.java
index c2e3d639f..2325ad359 100644
--- a/src/main/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParser.java
+++ b/src/main/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParser.java
@@ -234,2 +234,13 @@ import org.apache.commons.net.ftp.FTPFile;
-public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    private static final String DEFAULT_DATE_FORMAT = "yy/MM/dd HH:mm:ss"; // 01/11/09 12:30:24
+public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl
+{
+    private static final String DEFAULT_DATE_FORMAT
+        = "yy/MM/dd HH:mm:ss"; //01/11/09 12:30:24
+
+
+
+    private static final String REGEX =
+        "(\\S+)\\s+"                  // user
+        + "(?:(\\d+)\\s+)?"           // size, empty for members
+        + "(?:(\\S+)\\s+(\\S+)\\s+)?" // date stuff, empty for members
+        + "(\\*STMF|\\*DIR|\\*FILE|\\*MEM)\\s+"  // *STMF/*DIR/*FILE/*MEM
+        + "(?:(\\S+)\\s*)?";          // file name, missing, when CWD is a *FILE
@@ -237,5 +247,0 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    private static final String REGEX = "(\\S+)\\s+" // user
-            + "(?:(\\d+)\\s+)?" // size, empty for members
-            + "(?:(\\S+)\\s+(\\S+)\\s+)?" // date stuff, empty for members
-            + "(\\*STMF|\\*DIR|\\*FILE|\\*MEM)\\s+" // *STMF/*DIR/*FILE/*MEM
-            + "(?:(\\S+)\\s*)?"; // file name, missing, when CWD is a *FILE
@@ -246,2 +252,4 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * @throws IllegalArgumentException Thrown if the regular expression is unparseable. Should not be seen under normal conditions. It it is seen, this is a
-     *                                  sign that <code>REGEX</code> is not a valid regular expression.
+     * @throws IllegalArgumentException
+     * Thrown if the regular expression is unparseable.  Should not be seen
+     * under normal conditions.  It it is seen, this is a sign that
+     * <code>REGEX</code> is  not a valid regular expression.
@@ -249 +257,2 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    public OS400FTPEntryParser() {
+    public OS400FTPEntryParser()
+    {
@@ -254 +263,2 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * This constructor allows the creation of an OS400FTPEntryParser object with something other than the default configuration.
+     * This constructor allows the creation of an OS400FTPEntryParser object
+     * with something other than the default configuration.
@@ -256,3 +266,6 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * @param config The {@link FTPClientConfig configuration} object used to configure this parser.
-     * @throws IllegalArgumentException Thrown if the regular expression is unparseable. Should not be seen under normal conditions. It it is seen, this is a
-     *                                  sign that <code>REGEX</code> is not a valid regular expression.
+     * @param config The {@link FTPClientConfig configuration} object used to
+     * configure this parser.
+     * @throws IllegalArgumentException
+     * Thrown if the regular expression is unparseable.  Should not be seen
+     * under normal conditions.  It it is seen, this is a sign that
+     * <code>REGEX</code> is  not a valid regular expression.
@@ -261 +274,2 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    public OS400FTPEntryParser(final FTPClientConfig config) {
+    public OS400FTPEntryParser(final FTPClientConfig config)
+    {
@@ -265,0 +280 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
+
@@ -267,2 +282,3 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * Defines a default configuration to be used when this class is instantiated without a {@link FTPClientConfig FTPClientConfig} parameter being specified.
-     *
+     * Defines a default configuration to be used when this class is
+     * instantiated without a {@link  FTPClientConfig  FTPClientConfig}
+     * parameter being specified.
@@ -273 +289,4 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-        return new FTPClientConfig(FTPClientConfig.SYST_OS400, DEFAULT_DATE_FORMAT, null);
+        return new FTPClientConfig(
+                FTPClientConfig.SYST_OS400,
+                DEFAULT_DATE_FORMAT,
+                null);
@@ -278,2 +297,4 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * @param string String value that is checked for <code>null</code> or empty.
-     * @return <code>true</code> for <code>null</code> or empty values, else <code>false</code>.
+     * @param string String value that is checked for <code>null</code>
+     * or empty.
+     * @return <code>true</code> for <code>null</code> or empty values,
+     * else <code>false</code>.
@@ -286 +307,2 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    public FTPFile parseFTPEntry(final String entry) {
+    public FTPFile parseFTPEntry(final String entry)
+    {
@@ -292 +314,2 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-        if (matches(entry)) {
+        if (matches(entry))
+        {
@@ -296,2 +319,3 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            if (!isNullOrEmpty(group(3)) || !isNullOrEmpty(group(4))) {
-                datestr = group(3) + " " + group(4);
+            if (!isNullOrEmpty(group(3)) || !isNullOrEmpty(group(4)))
+            {
+                datestr = group(3)+" "+group(4);
@@ -304 +328,2 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            try {
+            try
+            {
@@ -306 +331,3 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            } catch (final ParseException e) {
+            }
+            catch (final ParseException e)
+            {
@@ -310 +337,3 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            if (typeStr.equalsIgnoreCase("*STMF")) {
+
+            if (typeStr.equalsIgnoreCase("*STMF"))
+            {
@@ -312 +341,2 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-                if (isNullOrEmpty(filesize) || isNullOrEmpty(name)) {
+                if (isNullOrEmpty(filesize) || isNullOrEmpty(name))
+                {
@@ -315 +345,3 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            } else if (typeStr.equalsIgnoreCase("*DIR")) {
+            }
+            else if (typeStr.equalsIgnoreCase("*DIR"))
+            {
@@ -317 +349,2 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-                if (isNullOrEmpty(filesize) || isNullOrEmpty(name)) {
+                if (isNullOrEmpty(filesize) || isNullOrEmpty(name))
+                {
@@ -320 +353,3 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            } else if (typeStr.equalsIgnoreCase("*FILE")) {
+            }
+            else if (typeStr.equalsIgnoreCase("*FILE"))
+            {
@@ -333 +368,3 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            } else if (typeStr.equalsIgnoreCase("*MEM")) {
+            }
+            else if (typeStr.equalsIgnoreCase("*MEM"))
+            {
@@ -337 +374,2 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-                if (isNullOrEmpty(name)) {
+                if (isNullOrEmpty(name))
+                {
@@ -340 +378,2 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-                if (!(isNullOrEmpty(filesize) && isNullOrEmpty(datestr))) {
+                if (!(isNullOrEmpty(filesize) && isNullOrEmpty(datestr)))
+                {
@@ -350 +389,3 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            } else {
+            }
+            else
+            {
@@ -358 +399,2 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            try {
+            try
+            {
@@ -360 +402,3 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            } catch (final NumberFormatException e) {
+            }
+            catch (final NumberFormatException e)
+            {
@@ -364 +408,2 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            if (name.endsWith("/")) {
+            if (name.endsWith("/"))
+            {
@@ -367 +412,2 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            if (mustScanForPathSeparator) {
+            if (mustScanForPathSeparator)
+            {
@@ -369 +415,2 @@ public class OS400FTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-                if (pos > -1) {
+                if (pos > -1)
+                {
diff --git a/src/main/java/org/apache/commons/net/ftp/parser/ParserInitializationException.java b/src/main/java/org/apache/commons/net/ftp/parser/ParserInitializationException.java
index 3ae1bdb9f..e4a7ad1fb 100644
--- a/src/main/java/org/apache/commons/net/ftp/parser/ParserInitializationException.java
+++ b/src/main/java/org/apache/commons/net/ftp/parser/ParserInitializationException.java
@@ -21 +21,3 @@ package org.apache.commons.net.ftp.parser;
- * This class encapsulates all errors that may be thrown by the process of an FTPFileEntryParserFactory creating and instantiating an FTPFileEntryParser.
+ * This class encapsulates all errors that may be thrown by
+ * the process of an FTPFileEntryParserFactory creating and
+ * instantiating an FTPFileEntryParser.
@@ -37 +39,2 @@ public class ParserInitializationException extends RuntimeException {
-     * Constucts a ParserInitializationException with a message and a root cause.
+     * Constucts a ParserInitializationException with a message
+     * and a root cause.
@@ -40 +43,2 @@ public class ParserInitializationException extends RuntimeException {
-     * @param rootCause root cause throwable that caused this to be thrown
+     * @param rootCause root cause throwable that caused
+     * this to be thrown
@@ -47 +51,2 @@ public class ParserInitializationException extends RuntimeException {
-     * returns the root cause of this exception or null if no root cause was specified.
+     * returns the root cause of this exception or null
+     * if no root cause was specified.
diff --git a/src/main/java/org/apache/commons/net/ftp/parser/RegexFTPFileEntryParserImpl.java b/src/main/java/org/apache/commons/net/ftp/parser/RegexFTPFileEntryParserImpl.java
index d9705c1b5..eee5cb68f 100644
--- a/src/main/java/org/apache/commons/net/ftp/parser/RegexFTPFileEntryParserImpl.java
+++ b/src/main/java/org/apache/commons/net/ftp/parser/RegexFTPFileEntryParserImpl.java
@@ -17,0 +18 @@
+
@@ -28,2 +29,3 @@ import org.apache.commons.net.ftp.FTPFileEntryParserImpl;
- * This abstract class implements both the older FTPFileListParser and newer FTPFileEntryParser interfaces with default functionality. All the classes in the
- * parser subpackage inherit from this.
+ * This abstract class implements both the older FTPFileListParser and
+ * newer FTPFileEntryParser interfaces with default functionality.
+ * All the classes in the parser subpackage inherit from this.
@@ -33 +35,2 @@ import org.apache.commons.net.ftp.FTPFileEntryParserImpl;
-public abstract class RegexFTPFileEntryParserImpl extends FTPFileEntryParserImpl {
+public abstract class RegexFTPFileEntryParserImpl extends
+        FTPFileEntryParserImpl {
@@ -35 +38,2 @@ public abstract class RegexFTPFileEntryParserImpl extends FTPFileEntryParserImpl
-     * internal pattern the matcher tries to match, representing a file entry
+     * internal pattern the matcher tries to match, representing a file
+     * entry
@@ -45 +49,2 @@ public abstract class RegexFTPFileEntryParserImpl extends FTPFileEntryParserImpl
-     * Internal PatternMatcher object used by the parser. It has protected scope in case subclasses want to make use of it for their own purposes.
+     * Internal PatternMatcher object used by the parser.  It has protected
+     * scope in case subclasses want to make use of it for their own purposes.
@@ -50 +55,2 @@ public abstract class RegexFTPFileEntryParserImpl extends FTPFileEntryParserImpl
-     * The constructor for a RegexFTPFileEntryParserImpl object. The expression is compiled with flags = 0.
+     * The constructor for a RegexFTPFileEntryParserImpl object.
+     * The expression is compiled with flags = 0.
@@ -52 +58,2 @@ public abstract class RegexFTPFileEntryParserImpl extends FTPFileEntryParserImpl
-     * @param regex The regular expression with which this object is initialized.
+     * @param regex  The regular expression with which this object is
+     * initialized.
@@ -54,3 +61,6 @@ public abstract class RegexFTPFileEntryParserImpl extends FTPFileEntryParserImpl
-     * @throws IllegalArgumentException Thrown if the regular expression is unparseable. Should not be seen in normal conditions. It it is seen, this is a sign
-     *                                  that a subclass has been created with a bad regular expression. Since the parser must be created before use, this means
-     *                                  that any bad parser subclasses created from this will bomb very quickly, leading to easy detection.
+     * @throws IllegalArgumentException
+     * Thrown if the regular expression is unparseable.  Should not be seen in
+     * normal conditions.  It it is seen, this is a sign that a subclass has
+     * been created with a bad regular expression.   Since the parser must be
+     * created before use, this means that any bad parser subclasses created
+     * from this will bomb very quickly,  leading to easy detection.
@@ -66 +76,2 @@ public abstract class RegexFTPFileEntryParserImpl extends FTPFileEntryParserImpl
-     * @param regex The regular expression with which this object is initialized.
+     * @param regex  The regular expression with which this object is
+     * initialized.
@@ -69,3 +80,6 @@ public abstract class RegexFTPFileEntryParserImpl extends FTPFileEntryParserImpl
-     * @throws IllegalArgumentException Thrown if the regular expression is unparseable. Should not be seen in normal conditions. It it is seen, this is a sign
-     *                                  that a subclass has been created with a bad regular expression. Since the parser must be created before use, this means
-     *                                  that any bad parser subclasses created from this will bomb very quickly, leading to easy detection.
+     * @throws IllegalArgumentException
+     * Thrown if the regular expression is unparseable.  Should not be seen in
+     * normal conditions.  It it is seen, this is a sign that a subclass has
+     * been created with a bad regular expression.   Since the parser must be
+     * created before use, this means that any bad parser subclasses created
+     * from this will bomb very quickly,  leading to easy detection.
@@ -81 +95,2 @@ public abstract class RegexFTPFileEntryParserImpl extends FTPFileEntryParserImpl
-     * This is an internal method to do the work so the constructor does not have to call an overrideable method.
+     * This is an internal method to do the work so the constructor does not
+     * have to call an overrideable method.
@@ -109 +124,2 @@ public abstract class RegexFTPFileEntryParserImpl extends FTPFileEntryParserImpl
-     * For debugging purposes - returns a string shows each match group by number.
+     * For debugging purposes - returns a string shows each match group by
+     * number.
@@ -117 +133,2 @@ public abstract class RegexFTPFileEntryParserImpl extends FTPFileEntryParserImpl
-            b.append(i).append(") ").append(this.result.group(i)).append(System.getProperty("line.separator"));
+            b.append(i).append(") ").append(this.result.group(i)).append(
+                    System.getProperty("line.separator"));
@@ -123 +140,2 @@ public abstract class RegexFTPFileEntryParserImpl extends FTPFileEntryParserImpl
-     * Convenience method delegates to the internal MatchResult's group() method.
+     * Convenience method delegates to the internal MatchResult's group()
+     * method.
@@ -127 +145,3 @@ public abstract class RegexFTPFileEntryParserImpl extends FTPFileEntryParserImpl
-     * @return the content of the <code>matchnum'th</code> group of the internal match or null if this method is called without a match having been made.
+     * @return the content of the <code>matchnum'th</code> group of the internal
+     *         match or null if this method is called without a match having
+     *         been made.
@@ -137 +157,2 @@ public abstract class RegexFTPFileEntryParserImpl extends FTPFileEntryParserImpl
-     * Convenience method delegates to the internal MatchResult's matches() method.
+     * Convenience method delegates to the internal MatchResult's matches()
+     * method.
@@ -151,0 +173 @@ public abstract class RegexFTPFileEntryParserImpl extends FTPFileEntryParserImpl
+
@@ -153,2 +175,2 @@ public abstract class RegexFTPFileEntryParserImpl extends FTPFileEntryParserImpl
-     * Alter the current regular expression being utilised for entry parsing and create a new {@link Pattern} instance.
-     *
+     * Alter the current regular expression being utilised for entry parsing
+     * and create a new {@link Pattern} instance.
@@ -156 +178 @@ public abstract class RegexFTPFileEntryParserImpl extends FTPFileEntryParserImpl
-     * @return true
+     * @return  true
@@ -166,2 +188,2 @@ public abstract class RegexFTPFileEntryParserImpl extends FTPFileEntryParserImpl
-     * Alter the current regular expression being utilised for entry parsing and create a new {@link Pattern} instance.
-     *
+     * Alter the current regular expression being utilised for entry parsing
+     * and create a new {@link Pattern} instance.
@@ -170 +192 @@ public abstract class RegexFTPFileEntryParserImpl extends FTPFileEntryParserImpl
-     * @return true
+     * @return  true
diff --git a/src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java b/src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java
index 185e1f01f..8d15035b9 100644
--- a/src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java
+++ b/src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java
@@ -19 +18,0 @@ package org.apache.commons.net.ftp.parser;
-
@@ -27,4 +26,2 @@ import org.apache.commons.net.ftp.FTPFile;
- * Implementation FTPFileEntryParser and FTPFileListParser for standard Unix Systems.
- *
- * This class is based on the logic of Daniel Savarese's DefaultFTPListParser, but adapted to use regular expressions and to fit the new FTPFileEntryParser
- * interface.
+ * Implementation FTPFileEntryParser and FTPFileListParser for standard
+ * Unix Systems.
@@ -31,0 +29,3 @@ import org.apache.commons.net.ftp.FTPFile;
+ * This class is based on the logic of Daniel Savarese's
+ * DefaultFTPListParser, but adapted to use regular expressions and to fit the
+ * new FTPFileEntryParser interface.
@@ -34 +34,2 @@ import org.apache.commons.net.ftp.FTPFile;
-public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
+public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
+{
@@ -36 +37,2 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    static final String DEFAULT_DATE_FORMAT = "MMM d yyyy"; // Nov 9 2001
+    static final String DEFAULT_DATE_FORMAT
+        = "MMM d yyyy"; //Nov 9 2001
@@ -38 +40,2 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    static final String DEFAULT_RECENT_DATE_FORMAT = "MMM d HH:mm"; // Nov 9 20:06
+    static final String DEFAULT_RECENT_DATE_FORMAT
+        = "MMM d HH:mm"; //Nov 9 20:06
@@ -40 +43,2 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    static final String NUMERIC_DATE_FORMAT = "yyyy-MM-dd HH:mm"; // 2001-11-09 20:06
+    static final String NUMERIC_DATE_FORMAT
+        = "yyyy-MM-dd HH:mm"; //2001-11-09 20:06
@@ -44,2 +48,2 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    private static final String JA_DAY = "\u65e5";
-    private static final String JA_YEAR = "\u5e74";
+    private static final String JA_DAY   = "\u65e5";
+    private static final String JA_YEAR  = "\u5e74";
@@ -47 +51,2 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    private static final String DEFAULT_DATE_FORMAT_JA = "M'" + JA_MONTH + "' d'" + JA_DAY + "' yyyy'" + JA_YEAR + "'"; // 6月 3日 2003年
+    private static final String DEFAULT_DATE_FORMAT_JA
+        = "M'" + JA_MONTH + "' d'" + JA_DAY + "' yyyy'" + JA_YEAR + "'"; //6月 3日 2003年
@@ -49 +54,2 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    private static final String DEFAULT_RECENT_DATE_FORMAT_JA = "M'" + JA_MONTH + "' d'" + JA_DAY + "' HH:mm"; // 8月 17日 20:10
+    private static final String DEFAULT_RECENT_DATE_FORMAT_JA
+        = "M'" + JA_MONTH + "' d'" + JA_DAY + "' HH:mm"; //8月 17日 20:10
@@ -52,3 +58,6 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * Some Linux distributions are now shipping an FTP server which formats file listing dates in an all-numeric format: <code>"yyyy-MM-dd HH:mm</code>. This
-     * is a very welcome development, and hopefully it will soon become the standard. However, since it is so new, for now, and possibly forever, we merely
-     * accomodate it, but do not make it the default.
+     * Some Linux distributions are now shipping an FTP server which formats
+     * file listing dates in an all-numeric format:
+     * <code>"yyyy-MM-dd HH:mm</code>.
+     * This is a very welcome development,  and hopefully it will soon become
+     * the standard.  However, since it is so new, for now, and possibly
+     * forever, we merely accomodate it, but do not make it the default.
@@ -56 +65,3 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * For now end users may specify this format only via <code>UnixFTPEntryParser(FTPClientConfig)</code>. Steve Cohen - 2005-04-17
+     * For now end users may specify this format only via
+     * <code>UnixFTPEntryParser(FTPClientConfig)</code>.
+     * Steve Cohen - 2005-04-17
@@ -58 +69,5 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    public static final FTPClientConfig NUMERIC_DATE_CONFIG = new FTPClientConfig(FTPClientConfig.SYST_UNIX, NUMERIC_DATE_FORMAT, null);
+    public static final FTPClientConfig NUMERIC_DATE_CONFIG =
+        new FTPClientConfig(
+                FTPClientConfig.SYST_UNIX,
+                NUMERIC_DATE_FORMAT,
+                null);
@@ -63,6 +78,21 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * Permissions: r the file is readable w the file is writable x the file is executable - the indicated permission is not granted L mandatory locking occurs
-     * during access (the set-group-ID bit is on and the group execution bit is off) s the set-user-ID or set-group-ID bit is on, and the corresponding user or
-     * group execution bit is also on S undefined bit-state (the set-user-ID bit is on and the user execution bit is off) t the 1000 (octal) bit, or sticky bit,
-     * is on [see chmod(1)], and execution is on T the 1000 bit is turned on, and execution is off (undefined bit- state) e z/OS external link bit Final letter
-     * may be appended: + file has extended security attributes (e.g. ACL) Note: local listings on MacOSX also use '@'; this is not allowed for here as does not
-     * appear to be shown by FTP servers {@code @} file has extended attributes
+     * Permissions:
+     *    r   the file is readable
+     *    w   the file is writable
+     *    x   the file is executable
+     *    -   the indicated permission is not granted
+     *    L   mandatory locking occurs during access (the set-group-ID bit is
+     *        on and the group execution bit is off)
+     *    s   the set-user-ID or set-group-ID bit is on, and the corresponding
+     *        user or group execution bit is also on
+     *    S   undefined bit-state (the set-user-ID bit is on and the user
+     *        execution bit is off)
+     *    t   the 1000 (octal) bit, or sticky bit, is on [see chmod(1)], and
+     *        execution is on
+     *    T   the 1000 bit is turned on, and execution is off (undefined bit-
+     *        state)
+     *    e   z/OS external link bit
+     *    Final letter may be appended:
+     *    +   file has extended security attributes (e.g. ACL)
+     *    Note: local listings on MacOSX also use '@';
+     *    this is not allowed for here as does not appear to be shown by FTP servers
+     *    {@code @}   file has extended attributes
@@ -70,22 +100,29 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    private static final String REGEX = "([bcdelfmpSs-])" // file type
-            + "(((r|-)(w|-)([xsStTL-]))((r|-)(w|-)([xsStTL-]))((r|-)(w|-)([xsStTL-])))\\+?" // permissions
-
-            + "\\s*" // separator TODO why allow it to be omitted??
-
-            + "(\\d+)" // link count
-
-            + "\\s+" // separator
-
-            + "(?:(\\S+(?:\\s\\S+)*?)\\s+)?" // owner name (optional spaces)
-            + "(?:(\\S+(?:\\s\\S+)*)\\s+)?" // group name (optional spaces)
-            + "(\\d+(?:,\\s*\\d+)?)" // size or n,m
-
-            + "\\s+" // separator
-
-            /*
-             * numeric or standard format date: yyyy-mm-dd (expecting hh:mm to follow) MMM [d]d [d]d MMM N.B. use non-space for MMM to allow for languages such
-             * as German which use diacritics (e.g. umlaut) in some abbreviations. Japanese uses numeric day and month with suffixes to distinguish them [d]dXX
-             * [d]dZZ
-             */
-            + "(" + "(?:\\d+[-/]\\d+[-/]\\d+)" + // yyyy-mm-dd
-            "|(?:\\S{3}\\s+\\d{1,2})" + // MMM [d]d
+    private static final String REGEX =
+        "([bcdelfmpSs-])" // file type
+        +"(((r|-)(w|-)([xsStTL-]))((r|-)(w|-)([xsStTL-]))((r|-)(w|-)([xsStTL-])))\\+?" // permissions
+
+        + "\\s*"                                        // separator TODO why allow it to be omitted??
+
+        + "(\\d+)"                                      // link count
+
+        + "\\s+" // separator
+
+        + "(?:(\\S+(?:\\s\\S+)*?)\\s+)?"                // owner name (optional spaces)
+        + "(?:(\\S+(?:\\s\\S+)*)\\s+)?"                 // group name (optional spaces)
+        + "(\\d+(?:,\\s*\\d+)?)"                        // size or n,m
+
+        + "\\s+" // separator
+
+        /*
+         * numeric or standard format date:
+         *   yyyy-mm-dd (expecting hh:mm to follow)
+         *   MMM [d]d
+         *   [d]d MMM
+         *   N.B. use non-space for MMM to allow for languages such as German which use
+         *   diacritics (e.g. umlaut) in some abbreviations.
+         *   Japanese uses numeric day and month with suffixes to distinguish them
+         *   [d]dXX [d]dZZ
+        */
+        + "("+
+            "(?:\\d+[-/]\\d+[-/]\\d+)" + // yyyy-mm-dd
+            "|(?:\\S{3}\\s+\\d{1,2})" +  // MMM [d]d
@@ -93 +130,4 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            "|(?:\\d{1,2}" + JA_MONTH + "\\s+\\d{1,2}" + JA_DAY + ")" + ")"
+            "|(?:\\d{1,2}" + JA_MONTH + "\\s+\\d{1,2}" + JA_DAY + ")"+
+           ")"
+
+        + "\\s+" // separator
@@ -95 +135,6 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            + "\\s+" // separator
+        /*
+           year (for non-recent standard format) - yyyy
+           or time (for numeric or recent standard format) [h]h:mm
+           or Japanese year - yyyyXX
+        */
+        + "((?:\\d+(?::\\d+)?)|(?:\\d{4}" + JA_YEAR + "))" // (20)
@@ -97,4 +142 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            /*
-             * year (for non-recent standard format) - yyyy or time (for numeric or recent standard format) [h]h:mm or Japanese year - yyyyXX
-             */
-            + "((?:\\d+(?::\\d+)?)|(?:\\d{4}" + JA_YEAR + "))" // (20)
+        + "\\s" // separator
@@ -102 +144 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            + "\\s" // separator
+        + "(.*)"; // the rest (21)
@@ -104 +145,0 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            + "(.*)"; // the rest (21)
@@ -113,2 +154,4 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * @throws IllegalArgumentException Thrown if the regular expression is unparseable. Should not be seen under normal conditions. It it is seen, this is a
-     *                                  sign that <code>REGEX</code> is not a valid regular expression.
+     * @throws IllegalArgumentException
+     * Thrown if the regular expression is unparseable.  Should not be seen
+     * under normal conditions.  It it is seen, this is a sign that
+     * <code>REGEX</code> is  not a valid regular expression.
@@ -116 +159,2 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    public UnixFTPEntryParser() {
+    public UnixFTPEntryParser()
+    {
@@ -121 +165,2 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * This constructor allows the creation of a UnixFTPEntryParser object with something other than the default configuration.
+     * This constructor allows the creation of a UnixFTPEntryParser object with
+     * something other than the default configuration.
@@ -123,3 +168,6 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * @param config The {@link FTPClientConfig configuration} object used to configure this parser.
-     * @throws IllegalArgumentException Thrown if the regular expression is unparseable. Should not be seen under normal conditions. It it is seen, this is a
-     *                                  sign that <code>REGEX</code> is not a valid regular expression.
+     * @param config The {@link FTPClientConfig configuration} object used to
+     * configure this parser.
+     * @throws IllegalArgumentException
+     * Thrown if the regular expression is unparseable.  Should not be seen
+     * under normal conditions.  It it is seen, this is a sign that
+     * <code>REGEX</code> is  not a valid regular expression.
@@ -128 +176,2 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    public UnixFTPEntryParser(final FTPClientConfig config) {
+    public UnixFTPEntryParser(final FTPClientConfig config)
+    {
@@ -133 +182,2 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * This constructor allows the creation of a UnixFTPEntryParser object with something other than the default configuration.
+     * This constructor allows the creation of a UnixFTPEntryParser object with
+     * something other than the default configuration.
@@ -135 +185,2 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * @param config            The {@link FTPClientConfig configuration} object used to configure this parser.
+     * @param config The {@link FTPClientConfig configuration} object used to
+     * configure this parser.
@@ -137,2 +188,4 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * @throws IllegalArgumentException Thrown if the regular expression is unparseable. Should not be seen under normal conditions. It it is seen, this is a
-     *                                  sign that <code>REGEX</code> is not a valid regular expression.
+     * @throws IllegalArgumentException
+     * Thrown if the regular expression is unparseable.  Should not be seen
+     * under normal conditions.  It it is seen, this is a sign that
+     * <code>REGEX</code> is  not a valid regular expression.
@@ -141 +194,2 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    public UnixFTPEntryParser(final FTPClientConfig config, final boolean trimLeadingSpaces) {
+    public UnixFTPEntryParser(final FTPClientConfig config, final boolean trimLeadingSpaces)
+    {
@@ -148,2 +202,3 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * Defines a default configuration to be used when this class is instantiated without a {@link FTPClientConfig FTPClientConfig} parameter being specified.
-     *
+     * Defines a default configuration to be used when this class is
+     * instantiated without a {@link  FTPClientConfig  FTPClientConfig}
+     * parameter being specified.
@@ -154 +209,4 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-        return new FTPClientConfig(FTPClientConfig.SYST_UNIX, DEFAULT_DATE_FORMAT, DEFAULT_RECENT_DATE_FORMAT);
+        return new FTPClientConfig(
+                FTPClientConfig.SYST_UNIX,
+                DEFAULT_DATE_FORMAT,
+                DEFAULT_RECENT_DATE_FORMAT);
@@ -158,3 +216,5 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * Parses a line of a unix (standard) FTP server file listing and converts it into a usable format in the form of an <code> FTPFile </code> instance. If the
-     * file listing line doesn't describe a file, <code> null </code> is returned, otherwise a <code> FTPFile </code> instance representing the files in the
-     * directory is returned.
+     * Parses a line of a unix (standard) FTP server file listing and converts
+     * it into a usable format in the form of an <code> FTPFile </code>
+     * instance.  If the file listing line doesn't describe a file,
+     * <code> null </code> is returned, otherwise a <code> FTPFile </code>
+     * instance representing the files in the directory is returned.
@@ -172 +232,2 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-        if (matches(entry)) {
+        if (matches(entry))
+        {
@@ -184 +245,2 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            try {
+            try
+            {
@@ -187 +249,2 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-                    jaParser.configure(new FTPClientConfig(FTPClientConfig.SYST_UNIX, DEFAULT_DATE_FORMAT_JA, DEFAULT_RECENT_DATE_FORMAT_JA));
+                    jaParser.configure(new FTPClientConfig(
+                            FTPClientConfig.SYST_UNIX, DEFAULT_DATE_FORMAT_JA, DEFAULT_RECENT_DATE_FORMAT_JA));
@@ -192,2 +255,4 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            } catch (final ParseException e) {
-                // intentionally do nothing
+            }
+            catch (final ParseException e)
+            {
+                 // intentionally do nothing
@@ -200 +265,2 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            switch (typeStr.charAt(0)) {
+            switch (typeStr.charAt(0))
+            {
@@ -226 +292,2 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            for (int access = 0; access < 3; access++, g += 4) {
+            for (int access = 0; access < 3; access++, g += 4)
+            {
@@ -228,2 +295,4 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-                file.setPermission(access, FTPFile.READ_PERMISSION, !group(g).equals("-"));
-                file.setPermission(access, FTPFile.WRITE_PERMISSION, !group(g + 1).equals("-"));
+                file.setPermission(access, FTPFile.READ_PERMISSION,
+                                   !group(g).equals("-"));
+                file.setPermission(access, FTPFile.WRITE_PERMISSION,
+                                   !group(g + 1).equals("-"));
@@ -232 +301,2 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-                file.setPermission(access, FTPFile.EXECUTE_PERMISSION, !execPerm.equals("-") && !Character.isUpperCase(execPerm.charAt(0)));
+                file.setPermission(access, FTPFile.EXECUTE_PERMISSION, !execPerm.equals("-")
+                        && !Character.isUpperCase(execPerm.charAt(0)));
@@ -235,2 +305,4 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            if (!isDevice) {
-                try {
+            if (!isDevice)
+            {
+                try
+                {
@@ -238 +310,3 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-                } catch (final NumberFormatException e) {
+                }
+                catch (final NumberFormatException e)
+                {
@@ -246 +320,2 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            try {
+            try
+            {
@@ -248 +323,3 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            } catch (final NumberFormatException e) {
+            }
+            catch (final NumberFormatException e)
+            {
@@ -254 +331,2 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            if (type == FTPFile.SYMBOLIC_LINK_TYPE) {
+            if (type == FTPFile.SYMBOLIC_LINK_TYPE)
+            {
@@ -258 +336,2 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-                if (end == -1) {
+                if (end == -1)
+                {
@@ -260 +339,3 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-                } else {
+                }
+                else
+                {
@@ -265 +346,3 @@ public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            } else {
+            }
+            else
+            {
diff --git a/src/main/java/org/apache/commons/net/ftp/parser/VMSFTPEntryParser.java b/src/main/java/org/apache/commons/net/ftp/parser/VMSFTPEntryParser.java
index 7be9bd229..6b41c1f71 100644
--- a/src/main/java/org/apache/commons/net/ftp/parser/VMSFTPEntryParser.java
+++ b/src/main/java/org/apache/commons/net/ftp/parser/VMSFTPEntryParser.java
@@ -19 +18,0 @@ package org.apache.commons.net.ftp.parser;
-
@@ -29,2 +28,2 @@ import org.apache.commons.net.ftp.FTPFile;
- * Implementation FTPFileEntryParser and FTPFileListParser for VMS Systems. This is a sample of VMS LIST output
- *
+ * Implementation FTPFileEntryParser and FTPFileListParser for VMS Systems.
+ * This is a sample of VMS LIST output
@@ -37 +36,3 @@ import org.apache.commons.net.ftp.FTPFile;
- * Note: VMSFTPEntryParser can only be instantiated through the DefaultFTPParserFactory by classname. It will not be chosen by the autodetection scheme.
+ * Note: VMSFTPEntryParser can only be instantiated through the
+ * DefaultFTPParserFactory by classname.  It will not be chosen
+ * by the autodetection scheme.
@@ -43 +44,2 @@ import org.apache.commons.net.ftp.FTPFile;
-public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
+public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl
+{
@@ -45 +47,2 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    private static final String DEFAULT_DATE_FORMAT = "d-MMM-yyyy HH:mm:ss"; // 9-NOV-2001 12:30:24
+    private static final String DEFAULT_DATE_FORMAT
+        = "d-MMM-yyyy HH:mm:ss"; //9-NOV-2001 12:30:24
@@ -50,5 +53,6 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    private static final String REGEX = "(.*?;[0-9]+)\\s*" // 1 file and version
-            + "(\\d+)(?:/\\d+)?\\s*" // 2 size/allocated
-            + "(\\S+)\\s+(\\S+)\\s+" // 3+4 date and time
-            + "\\[(([0-9$A-Za-z_]+)|([0-9$A-Za-z_]+),([0-9$a-zA-Z_]+))\\]?\\s*" // 5(6,7,8) owner
-            + "\\([a-zA-Z]*,([a-zA-Z]*),([a-zA-Z]*),([a-zA-Z]*)\\)"; // 9,10,11 Permissions (O,G,W)
+    private static final String REGEX =
+        "(.*?;[0-9]+)\\s*"                                                  //1  file and version
+        + "(\\d+)(?:/\\d+)?\\s*"                                                 //2  size/allocated
+        +"(\\S+)\\s+(\\S+)\\s+"                                             //3+4 date and time
+        + "\\[(([0-9$A-Za-z_]+)|([0-9$A-Za-z_]+),([0-9$a-zA-Z_]+))\\]?\\s*" //5(6,7,8) owner
+        + "\\([a-zA-Z]*,([a-zA-Z]*),([a-zA-Z]*),([a-zA-Z]*)\\)";            //9,10,11 Permissions (O,G,W)
@@ -56,0 +61,2 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
+
+
@@ -60,2 +66,4 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * @throws IllegalArgumentException Thrown if the regular expression is unparseable. Should not be seen under normal conditions. It it is seen, this is a
-     *                                  sign that <code>REGEX</code> is not a valid regular expression.
+     * @throws IllegalArgumentException
+     * Thrown if the regular expression is unparseable.  Should not be seen
+     * under normal conditions.  It it is seen, this is a sign that
+     * <code>REGEX</code> is  not a valid regular expression.
@@ -63 +71,2 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    public VMSFTPEntryParser() {
+    public VMSFTPEntryParser()
+    {
@@ -68 +77,2 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * This constructor allows the creation of a VMSFTPEntryParser object with something other than the default configuration.
+     * This constructor allows the creation of a VMSFTPEntryParser object with
+     * something other than the default configuration.
@@ -70,3 +80,6 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * @param config The {@link FTPClientConfig configuration} object used to configure this parser.
-     * @throws IllegalArgumentException Thrown if the regular expression is unparseable. Should not be seen under normal conditions. It it is seen, this is a
-     *                                  sign that <code>REGEX</code> is not a valid regular expression.
+     * @param config The {@link FTPClientConfig configuration} object used to
+     * configure this parser.
+     * @throws IllegalArgumentException
+     * Thrown if the regular expression is unparseable.  Should not be seen
+     * under normal conditions.  It it is seen, this is a sign that
+     * <code>REGEX</code> is  not a valid regular expression.
@@ -75 +88,2 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    public VMSFTPEntryParser(final FTPClientConfig config) {
+    public VMSFTPEntryParser(final FTPClientConfig config)
+    {
@@ -81,2 +95,3 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * Defines a default configuration to be used when this class is instantiated without a {@link FTPClientConfig FTPClientConfig} parameter being specified.
-     *
+     * Defines a default configuration to be used when this class is
+     * instantiated without a {@link  FTPClientConfig  FTPClientConfig}
+     * parameter being specified.
@@ -87 +102,4 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-        return new FTPClientConfig(FTPClientConfig.SYST_VMS, DEFAULT_DATE_FORMAT, null);
+        return new FTPClientConfig(
+                FTPClientConfig.SYST_VMS,
+                DEFAULT_DATE_FORMAT,
+                null);
@@ -89,0 +108 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
+
@@ -96 +114,0 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     *
@@ -110,3 +128,5 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * Parses a line of a VMS FTP server file listing and converts it into a usable format in the form of an <code> FTPFile </code> instance. If the file
-     * listing line doesn't describe a file, <code> null </code> is returned, otherwise a <code> FTPFile </code> instance representing the files in the
-     * directory is returned.
+     * Parses a line of a VMS FTP server file listing and converts it into a
+     * usable format in the form of an <code> FTPFile </code> instance.  If the
+     * file listing line doesn't describe a file, <code> null </code> is
+     * returned, otherwise a <code> FTPFile </code> instance representing the
+     * files in the directory is returned.
@@ -118,2 +138,3 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    public FTPFile parseFTPEntry(final String entry) {
-        // one block in VMS equals 512 bytes
+    public FTPFile parseFTPEntry(final String entry)
+    {
+        //one block in VMS equals 512 bytes
@@ -122 +143,2 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-        if (matches(entry)) {
+        if (matches(entry))
+        {
@@ -127 +149 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            final String datestr = group(3) + " " + group(4);
+            final String datestr = group(3)+" "+group(4);
@@ -130,4 +152,5 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            permissions[0] = group(9);
-            permissions[1] = group(10);
-            permissions[2] = group(11);
-            try {
+            permissions[0]= group(9);
+            permissions[1]= group(10);
+            permissions[2]= group(11);
+            try
+            {
@@ -135,2 +157,0 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            } catch (final ParseException e) {
-                // intentionally do nothing
@@ -137,0 +159,5 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
+            catch (final ParseException e)
+            {
+                 // intentionally do nothing
+            }
+
@@ -143,11 +169,11 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            case 1:
-                grp = null;
-                user = t.nextToken();
-                break;
-            case 2:
-                grp = t.nextToken();
-                user = t.nextToken();
-                break;
-            default:
-                grp = null;
-                user = null;
+                case 1:
+                    grp  = null;
+                    user = t.nextToken();
+                    break;
+                case 2:
+                    grp  = t.nextToken();
+                    user = t.nextToken();
+                    break;
+                default:
+                    grp  = null;
+                    user = null;
@@ -156 +182,2 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            if (name.lastIndexOf(".DIR") != -1) {
+            if (name.lastIndexOf(".DIR") != -1)
+            {
@@ -158 +185,3 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            } else {
+            }
+            else
+            {
@@ -161,3 +190,4 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            // set FTPFile name
-            // Check also for versions to be returned or not
-            if (!isVersioning()) {
+            //set FTPFile name
+            //Check also for versions to be returned or not
+            if (!isVersioning())
+            {
@@ -167,2 +197,2 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            // size is retreived in blocks and needs to be put in bytes
-            // for us humans and added to the FTPFile array
+            //size is retreived in blocks and needs to be put in bytes
+            //for us humans and added to the FTPFile array
@@ -174 +204 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            // set group and owner
+            //set group and owner
@@ -176,3 +206,3 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            // Set file permission.
-            // VMS has (SYSTEM,OWNER,GROUP,WORLD) users that can contain
-            // R (read) W (write) E (execute) D (delete)
+            //Set file permission.
+            //VMS has (SYSTEM,OWNER,GROUP,WORLD) users that can contain
+            //R (read) W (write) E (execute) D (delete)
@@ -180,2 +210,3 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            // iterate for OWNER GROUP WORLD permissions
-            for (int access = 0; access < 3; access++) {
+            //iterate for OWNER GROUP WORLD permissions
+            for (int access = 0; access < 3; access++)
+            {
@@ -184,3 +215,3 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-                f.setPermission(access, FTPFile.READ_PERMISSION, permission.indexOf('R') >= 0);
-                f.setPermission(access, FTPFile.WRITE_PERMISSION, permission.indexOf('W') >= 0);
-                f.setPermission(access, FTPFile.EXECUTE_PERMISSION, permission.indexOf('E') >= 0);
+                f.setPermission(access, FTPFile.READ_PERMISSION, permission.indexOf('R')>=0);
+                f.setPermission(access, FTPFile.WRITE_PERMISSION, permission.indexOf('W')>=0);
+                f.setPermission(access, FTPFile.EXECUTE_PERMISSION, permission.indexOf('E')>=0);
@@ -197,2 +228,4 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * Reads the next entry using the supplied BufferedReader object up to whatever delemits one entry from the next. This parser cannot use the default
-     * implementation of simply calling BufferedReader.readLine(), because one entry may span multiple lines.
+     * Reads the next entry using the supplied BufferedReader object up to
+     * whatever delemits one entry from the next.   This parser cannot use
+     * the default implementation of simply calling BufferedReader.readLine(),
+     * because one entry may span multiple lines.
@@ -200 +233,2 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-     * @param reader The BufferedReader object from which entries are to be read.
+     * @param reader The BufferedReader object from which entries are to be
+     * read.
@@ -206 +240,2 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-    public String readNextEntry(final BufferedReader reader) throws IOException {
+    public String readNextEntry(final BufferedReader reader) throws IOException
+    {
@@ -209 +244,2 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-        while (line != null) {
+        while (line != null)
+        {
@@ -216 +252,2 @@ public class VMSFTPEntryParser extends ConfigurableFTPFileEntryParserImpl {
-            if (line.trim().endsWith(")")) {
+            if (line.trim().endsWith(")"))
+            {
diff --git a/src/main/java/org/apache/commons/net/ftp/parser/VMSVersioningFTPEntryParser.java b/src/main/java/org/apache/commons/net/ftp/parser/VMSVersioningFTPEntryParser.java
index b92f5fdff..0833150ee 100644
--- a/src/main/java/org/apache/commons/net/ftp/parser/VMSVersioningFTPEntryParser.java
+++ b/src/main/java/org/apache/commons/net/ftp/parser/VMSVersioningFTPEntryParser.java
@@ -31,2 +31,3 @@ import org.apache.commons.net.ftp.FTPClientConfig;
- * Special implementation VMSFTPEntryParser with versioning turned on. This parser removes all duplicates and only leaves the version with the highest version
- * number for each file name.
+ * Special implementation VMSFTPEntryParser with versioning turned on.
+ * This parser removes all duplicates and only leaves the version with the highest
+ * version number for each file name.
@@ -36 +36,0 @@ import org.apache.commons.net.ftp.FTPClientConfig;
- *
@@ -45 +45,2 @@ import org.apache.commons.net.ftp.FTPClientConfig;
-public class VMSVersioningFTPEntryParser extends VMSFTPEntryParser {
+public class VMSVersioningFTPEntryParser extends VMSFTPEntryParser
+{
@@ -47 +48,2 @@ public class VMSVersioningFTPEntryParser extends VMSFTPEntryParser {
-    private static final String PRE_PARSE_REGEX = "(.*?);([0-9]+)\\s*.*";
+    private static final String PRE_PARSE_REGEX =
+        "(.*?);([0-9]+)\\s*.*";
@@ -53,2 +55,4 @@ public class VMSVersioningFTPEntryParser extends VMSFTPEntryParser {
-     * @throws IllegalArgumentException Thrown if the regular expression is unparseable. Should not be seen under normal conditions. It it is seen, this is a
-     *                                  sign that <code>REGEX</code> is not a valid regular expression.
+     * @throws IllegalArgumentException
+     * Thrown if the regular expression is unparseable.  Should not be seen
+     * under normal conditions.  It it is seen, this is a sign that
+     * <code>REGEX</code> is  not a valid regular expression.
@@ -56 +60,2 @@ public class VMSVersioningFTPEntryParser extends VMSFTPEntryParser {
-    public VMSVersioningFTPEntryParser() {
+    public VMSVersioningFTPEntryParser()
+    {
@@ -61 +66,2 @@ public class VMSVersioningFTPEntryParser extends VMSFTPEntryParser {
-     * This constructor allows the creation of a VMSVersioningFTPEntryParser object with something other than the default configuration.
+     * This constructor allows the creation of a VMSVersioningFTPEntryParser
+     * object with something other than the default configuration.
@@ -63,3 +69,6 @@ public class VMSVersioningFTPEntryParser extends VMSFTPEntryParser {
-     * @param config The {@link FTPClientConfig configuration} object used to configure this parser.
-     * @throws IllegalArgumentException Thrown if the regular expression is unparseable. Should not be seen under normal conditions. It it is seen, this is a
-     *                                  sign that <code>REGEX</code> is not a valid regular expression.
+     * @param config The {@link FTPClientConfig configuration} object used to
+     * configure this parser.
+     * @throws IllegalArgumentException
+     * Thrown if the regular expression is unparseable.  Should not be seen
+     * under normal conditions.  It it is seen, this is a sign that
+     * <code>REGEX</code> is  not a valid regular expression.
@@ -68 +77,2 @@ public class VMSVersioningFTPEntryParser extends VMSFTPEntryParser {
-    public VMSVersioningFTPEntryParser(final FTPClientConfig config) {
+    public VMSVersioningFTPEntryParser(final FTPClientConfig config)
+    {
@@ -70,2 +80,3 @@ public class VMSVersioningFTPEntryParser extends VMSFTPEntryParser {
-        try {
-            // _preparse_matcher_ = new Perl5Matcher();
+        try
+        {
+            //_preparse_matcher_ = new Perl5Matcher();
@@ -73,2 +84,5 @@ public class VMSVersioningFTPEntryParser extends VMSFTPEntryParser {
-        } catch (final PatternSyntaxException pse) {
-            throw new IllegalArgumentException("Unparseable regex supplied:  " + PRE_PARSE_REGEX);
+        }
+        catch (final PatternSyntaxException pse)
+        {
+            throw new IllegalArgumentException (
+                "Unparseable regex supplied:  " + PRE_PARSE_REGEX);
@@ -77 +91 @@ public class VMSVersioningFTPEntryParser extends VMSFTPEntryParser {
-    }
+   }
@@ -83,0 +98 @@ public class VMSVersioningFTPEntryParser extends VMSFTPEntryParser {
+
@@ -85,2 +100,3 @@ public class VMSVersioningFTPEntryParser extends VMSFTPEntryParser {
-     * Implement hook provided for those implementers (such as VMSVersioningFTPEntryParser, and possibly others) which return multiple files with the same name
-     * to remove the duplicates ..
+     * Implement hook provided for those implementers (such as
+     * VMSVersioningFTPEntryParser, and possibly others) which return
+     * multiple files with the same name to remove the duplicates ..
@@ -107 +123 @@ public class VMSVersioningFTPEntryParser extends VMSFTPEntryParser {
-                    iter.remove(); // removes older version from original list.
+                    iter.remove();  // removes older version from original list.
diff --git a/src/main/java/org/apache/commons/net/imap/AuthenticatingIMAPClient.java b/src/main/java/org/apache/commons/net/imap/AuthenticatingIMAPClient.java
index 20d54208d..42749670c 100644
--- a/src/main/java/org/apache/commons/net/imap/AuthenticatingIMAPClient.java
+++ b/src/main/java/org/apache/commons/net/imap/AuthenticatingIMAPClient.java
@@ -33 +32,0 @@ import org.apache.commons.net.util.Base64;
- *
@@ -36 +35,2 @@ import org.apache.commons.net.util.Base64;
-public class AuthenticatingIMAPClient extends IMAPSClient {
+public class AuthenticatingIMAPClient extends IMAPSClient
+{
@@ -40 +40,2 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-    public enum AUTH_METHOD {
+    public enum AUTH_METHOD
+    {
@@ -54,2 +55,2 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-        AUTH_METHOD(final String name) {
-            this.authName = name;
+        AUTH_METHOD(final String name){
+            this.authName=name;
@@ -57 +57,0 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-
@@ -60 +59,0 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-         *
@@ -63 +62,2 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-        public final String getAuthName() {
+        public final String getAuthName()
+        {
@@ -69 +69,2 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-     * Constructor for AuthenticatingIMAPClient that delegates to IMAPSClient. Sets security mode to explicit (isImplicit = false).
+     * Constructor for AuthenticatingIMAPClient that delegates to IMAPSClient.
+     * Sets security mode to explicit (isImplicit = false).
@@ -71 +72,2 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-    public AuthenticatingIMAPClient() {
+    public AuthenticatingIMAPClient()
+    {
@@ -77 +78,0 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-     *
@@ -80 +81,2 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-    public AuthenticatingIMAPClient(final boolean implicit) {
+    public AuthenticatingIMAPClient(final boolean implicit)
+    {
@@ -86 +87,0 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-     *
@@ -88 +89 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-     * @param ctx      A pre-configured SSL Context.
+     * @param ctx A pre-configured SSL Context.
@@ -90 +91,2 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-    public AuthenticatingIMAPClient(final boolean implicit, final SSLContext ctx) {
+    public AuthenticatingIMAPClient(final boolean implicit, final SSLContext ctx)
+    {
@@ -96 +97,0 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-     *
@@ -99 +100,2 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-    public AuthenticatingIMAPClient(final SSLContext context) {
+    public AuthenticatingIMAPClient(final SSLContext context)
+    {
@@ -105 +106,0 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-     *
@@ -108 +109,2 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-    public AuthenticatingIMAPClient(final String proto) {
+    public AuthenticatingIMAPClient(final String proto)
+    {
@@ -114,2 +116 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-     *
-     * @param proto    the protocol.
+     * @param proto the protocol.
@@ -118 +119,2 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-    public AuthenticatingIMAPClient(final String proto, final boolean implicit) {
+    public AuthenticatingIMAPClient(final String proto, final boolean implicit)
+    {
@@ -124,2 +126 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-     *
-     * @param proto    the protocol.
+     * @param proto the protocol.
@@ -127 +128 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-     * @param ctx      the context
+     * @param ctx the context
@@ -129 +130,2 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-    public AuthenticatingIMAPClient(final String proto, final boolean implicit, final SSLContext ctx) {
+    public AuthenticatingIMAPClient(final String proto, final boolean implicit, final SSLContext ctx)
+    {
@@ -134 +136,2 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-     * Authenticate to the IMAP server by sending the AUTHENTICATE command with the selected mechanism, using the given username and the given password.
+     * Authenticate to the IMAP server by sending the AUTHENTICATE command with the
+     * selected mechanism, using the given username and the given password.
@@ -136 +139 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-     * @param method   the method name
+     * @param method the method name
@@ -140,4 +143,8 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-     * @throws IOException              If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     * @throws NoSuchAlgorithmException If the CRAM hash algorithm cannot be instantiated by the Java runtime system.
-     * @throws InvalidKeyException      If the CRAM hash algorithm failed to use the given password.
-     * @throws InvalidKeySpecException  If the CRAM hash algorithm failed to use the given password.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     * @throws NoSuchAlgorithmException If the CRAM hash algorithm
+     *      cannot be instantiated by the Java runtime system.
+     * @throws InvalidKeyException If the CRAM hash algorithm
+     *      failed to use the given password.
+     * @throws InvalidKeySpecException If the CRAM hash algorithm
+     *      failed to use the given password.
@@ -145,3 +152,7 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-    public boolean auth(final AuthenticatingIMAPClient.AUTH_METHOD method, final String username, final String password)
-            throws IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException {
-        if (!IMAPReply.isContinuation(sendCommand(IMAPCommand.AUTHENTICATE, method.getAuthName()))) {
+    public boolean auth(final AuthenticatingIMAPClient.AUTH_METHOD method,
+                        final String username, final String password)
+                        throws IOException, NoSuchAlgorithmException,
+                        InvalidKeyException, InvalidKeySpecException
+    {
+        if (!IMAPReply.isContinuation(sendCommand(IMAPCommand.AUTHENTICATE, method.getAuthName())))
+        {
@@ -152,26 +163,11 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-        case PLAIN: {
-            // the server sends an empty response ("+ "), so we don't have to read it.
-            final int result = sendData(Base64.encodeBase64StringUnChunked(("\000" + username + "\000" + password).getBytes(getCharset())));
-            if (result == IMAPReply.OK) {
-                setState(IMAP.IMAPState.AUTH_STATE);
-            }
-            return result == IMAPReply.OK;
-        }
-        case CRAM_MD5: {
-            // get the CRAM challenge (after "+ ")
-            final byte[] serverChallenge = Base64.decodeBase64(getReplyString().substring(2).trim());
-            // get the Mac instance
-            final Mac hmac_md5 = Mac.getInstance("HmacMD5");
-            hmac_md5.init(new SecretKeySpec(password.getBytes(getCharset()), "HmacMD5"));
-            // compute the result:
-            final byte[] hmacResult = convertToHexString(hmac_md5.doFinal(serverChallenge)).getBytes(getCharset());
-            // join the byte arrays to form the reply
-            final byte[] usernameBytes = username.getBytes(getCharset());
-            final byte[] toEncode = new byte[usernameBytes.length + 1 /* the space */ + hmacResult.length];
-            System.arraycopy(usernameBytes, 0, toEncode, 0, usernameBytes.length);
-            toEncode[usernameBytes.length] = ' ';
-            System.arraycopy(hmacResult, 0, toEncode, usernameBytes.length + 1, hmacResult.length);
-            // send the reply and read the server code:
-            final int result = sendData(Base64.encodeBase64StringUnChunked(toEncode));
-            if (result == IMAPReply.OK) {
-                setState(IMAP.IMAPState.AUTH_STATE);
+            case PLAIN:
+            {
+                // the server sends an empty response ("+ "), so we don't have to read it.
+                final int result = sendData(
+                    Base64.encodeBase64StringUnChunked(("\000" + username + "\000" + password)
+                            .getBytes(getCharset())));
+                if (result == IMAPReply.OK)
+                {
+                    setState(IMAP.IMAPState.AUTH_STATE);
+                }
+                return result == IMAPReply.OK;
@@ -179,7 +175,22 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-            return result == IMAPReply.OK;
-        }
-        case LOGIN: {
-            // the server sends fixed responses (base64("Username") and
-            // base64("Password")), so we don't have to read them.
-            if (sendData(Base64.encodeBase64StringUnChunked(username.getBytes(getCharset()))) != IMAPReply.CONT) {
-                return false;
+            case CRAM_MD5:
+            {
+                // get the CRAM challenge (after "+ ")
+                final byte[] serverChallenge = Base64.decodeBase64(getReplyString().substring(2).trim());
+                // get the Mac instance
+                final Mac hmac_md5 = Mac.getInstance("HmacMD5");
+                hmac_md5.init(new SecretKeySpec(password.getBytes(getCharset()), "HmacMD5"));
+                // compute the result:
+                final byte[] hmacResult = convertToHexString(hmac_md5.doFinal(serverChallenge)).getBytes(getCharset());
+                // join the byte arrays to form the reply
+                final byte[] usernameBytes = username.getBytes(getCharset());
+                final byte[] toEncode = new byte[usernameBytes.length + 1 /* the space */ + hmacResult.length];
+                System.arraycopy(usernameBytes, 0, toEncode, 0, usernameBytes.length);
+                toEncode[usernameBytes.length] = ' ';
+                System.arraycopy(hmacResult, 0, toEncode, usernameBytes.length + 1, hmacResult.length);
+                // send the reply and read the server code:
+                final int result = sendData(Base64.encodeBase64StringUnChunked(toEncode));
+                if (result == IMAPReply.OK)
+                {
+                    setState(IMAP.IMAPState.AUTH_STATE);
+                }
+                return result == IMAPReply.OK;
@@ -187,3 +198,14 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-            final int result = sendData(Base64.encodeBase64StringUnChunked(password.getBytes(getCharset())));
-            if (result == IMAPReply.OK) {
-                setState(IMAP.IMAPState.AUTH_STATE);
+            case LOGIN:
+            {
+                // the server sends fixed responses (base64("Username") and
+                // base64("Password")), so we don't have to read them.
+                if (sendData(Base64.encodeBase64StringUnChunked(username.getBytes(getCharset()))) != IMAPReply.CONT)
+                {
+                    return false;
+                }
+                final int result = sendData(Base64.encodeBase64StringUnChunked(password.getBytes(getCharset())));
+                if (result == IMAPReply.OK)
+                {
+                    setState(IMAP.IMAPState.AUTH_STATE);
+                }
+                return result == IMAPReply.OK;
@@ -191,7 +213,9 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-            return result == IMAPReply.OK;
-        }
-        case XOAUTH:
-        case XOAUTH2: {
-            final int result = sendData(username);
-            if (result == IMAPReply.OK) {
-                setState(IMAP.IMAPState.AUTH_STATE);
+            case XOAUTH:
+            case XOAUTH2:
+            {
+                final int result = sendData(username);
+                if (result == IMAPReply.OK)
+                {
+                    setState(IMAP.IMAPState.AUTH_STATE);
+                }
+                return result == IMAPReply.OK;
@@ -199,2 +222,0 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-            return result == IMAPReply.OK;
-        }
@@ -206 +228,2 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-     * Authenticate to the IMAP server by sending the AUTHENTICATE command with the selected mechanism, using the given username and the given password.
+     * Authenticate to the IMAP server by sending the AUTHENTICATE command with the
+     * selected mechanism, using the given username and the given password.
@@ -208 +231 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-     * @param method   the method name
+     * @param method the method name
@@ -212,4 +235,8 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-     * @throws IOException              If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     * @throws NoSuchAlgorithmException If the CRAM hash algorithm cannot be instantiated by the Java runtime system.
-     * @throws InvalidKeyException      If the CRAM hash algorithm failed to use the given password.
-     * @throws InvalidKeySpecException  If the CRAM hash algorithm failed to use the given password.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     * @throws NoSuchAlgorithmException If the CRAM hash algorithm
+     *      cannot be instantiated by the Java runtime system.
+     * @throws InvalidKeyException If the CRAM hash algorithm
+     *      failed to use the given password.
+     * @throws InvalidKeySpecException If the CRAM hash algorithm
+     *      failed to use the given password.
@@ -217,2 +244,5 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-    public boolean authenticate(final AuthenticatingIMAPClient.AUTH_METHOD method, final String username, final String password)
-            throws IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException {
+    public boolean authenticate(final AuthenticatingIMAPClient.AUTH_METHOD method,
+                        final String username, final String password)
+                        throws IOException, NoSuchAlgorithmException,
+                        InvalidKeyException, InvalidKeySpecException
+    {
@@ -223,3 +253,3 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-     * Converts the given byte array to a String containing the hex values of the bytes. For example, the byte 'A' will be converted to '41', because this is
-     * the ASCII code (and the byte value) of the capital letter 'A'.
-     *
+     * Converts the given byte array to a String containing the hex values of the bytes.
+     * For example, the byte 'A' will be converted to '41', because this is the ASCII code
+     * (and the byte value) of the capital letter 'A'.
@@ -229,4 +259,6 @@ public class AuthenticatingIMAPClient extends IMAPSClient {
-    private String convertToHexString(final byte[] a) {
-        final StringBuilder result = new StringBuilder(a.length * 2);
-        for (final byte element : a) {
-            if ((element & 0x0FF) <= 15) {
+    private String convertToHexString(final byte[] a)
+    {
+        final StringBuilder result = new StringBuilder(a.length*2);
+        for (final byte element : a)
+        {
+            if ( (element & 0x0FF) <= 15 ) {
diff --git a/src/main/java/org/apache/commons/net/imap/IMAP.java b/src/main/java/org/apache/commons/net/imap/IMAP.java
index 13471b582..d97f1073d 100644
--- a/src/main/java/org/apache/commons/net/imap/IMAP.java
+++ b/src/main/java/org/apache/commons/net/imap/IMAP.java
@@ -32,0 +33 @@ import org.apache.commons.net.util.NetConstants;
+
@@ -34 +35,2 @@ import org.apache.commons.net.util.NetConstants;
- * The IMAP class provides the basic the functionality necessary to implement your own IMAP client.
+ * The IMAP class provides the basic the functionality necessary to implement your
+ * own IMAP client.
@@ -36 +38,2 @@ import org.apache.commons.net.util.NetConstants;
-public class IMAP extends SocketClient {
+public class IMAP extends SocketClient
+{
@@ -38 +41,2 @@ public class IMAP extends SocketClient {
-     * Implement this interface and register it via {@link #setChunkListener(IMAPChunkListener)} in order to get access to multi-line partial command responses.
+     * Implement this interface and register it via {@link #setChunkListener(IMAPChunkListener)}
+     * in order to get access to multi-line partial command responses.
@@ -44,2 +48,2 @@ public class IMAP extends SocketClient {
-         *
-         * @param imap the instance, get the response by calling {@link #getReplyString()} or {@link #getReplyStrings()}
+         * @param imap the instance, get the response
+         * by calling {@link #getReplyString()} or {@link #getReplyStrings()}
@@ -51 +55,2 @@ public class IMAP extends SocketClient {
-    public enum IMAPState {
+    public enum IMAPState
+    {
@@ -54 +59 @@ public class IMAP extends SocketClient {
-        /** A constant representing the "not authenticated" state. */
+        /**  A constant representing the "not authenticated" state. */
@@ -56 +61 @@ public class IMAP extends SocketClient {
-        /** A constant representing the "authenticated" state. */
+        /**  A constant representing the "authenticated" state. */
@@ -58 +63 @@ public class IMAP extends SocketClient {
-        /** A constant representing the "logout" state. */
+        /**  A constant representing the "logout" state. */
@@ -72 +77,2 @@ public class IMAP extends SocketClient {
-     * Implementation of IMAPChunkListener that returns {@code true} but otherwise does nothing.
+     * Implementation of IMAPChunkListener that returns {@code true}
+     * but otherwise does nothing.
@@ -75,3 +81,7 @@ public class IMAP extends SocketClient {
-     * This is intended for use with a suitable ProtocolCommandListener. If the IMAP response contains multiple-line data, the protocol listener will be called
-     * for each multi-line chunk. The accumulated reply data will be cleared after calling the listener. If the response is very long, this can significantly
-     * reduce memory requirements. The listener will also start receiving response data earlier, as it does not have to wait for the entire response to be read.
+     * This is intended for use with a suitable ProtocolCommandListener.
+     * If the IMAP response contains multiple-line data, the protocol listener
+     * will be called for each multi-line chunk.
+     * The accumulated reply data will be cleared after calling the listener.
+     * If the response is very long, this can significantly reduce memory requirements.
+     * The listener will also start receiving response data earlier, as it does not have
+     * to wait for the entire response to be read.
@@ -80 +90,2 @@ public class IMAP extends SocketClient {
-     * The ProtocolCommandListener must be prepared to accept partial responses. This should not be a problem for listeners that just log the input.
+     * The ProtocolCommandListener must be prepared to accept partial responses.
+     * This should not be a problem for listeners that just log the input.
@@ -82 +92,0 @@ public class IMAP extends SocketClient {
-     *
@@ -89,2 +99,7 @@ public class IMAP extends SocketClient {
-     * Quote an input string if necessary. If the string is enclosed in double-quotes it is assumed to be quoted already and is returned unchanged. If it is the
-     * empty string, "" is returned. If it contains a space then it is enclosed in double quotes, escaping the characters backslash and double-quote.
+     * Quote an input string if necessary.
+     * If the string is enclosed in double-quotes it is assumed
+     * to be quoted already and is returned unchanged.
+     * If it is the empty string, "" is returned.
+     * If it contains a space
+     * then it is enclosed in double quotes, escaping the
+     * characters backslash and double-quote.
@@ -113 +127,0 @@ public class IMAP extends SocketClient {
-
@@ -127 +141,2 @@ public class IMAP extends SocketClient {
-     * The default IMAPClient constructor. Initializes the state to <code>DISCONNECTED_STATE</code>.
+     * The default IMAPClient constructor.  Initializes the state
+     * to <code>DISCONNECTED_STATE</code>.
@@ -129 +144,2 @@ public class IMAP extends SocketClient {
-    public IMAP() {
+    public IMAP()
+    {
@@ -139 +155,2 @@ public class IMAP extends SocketClient {
-     * Performs connection initialization and sets state to {@link IMAPState#NOT_AUTH_STATE}.
+     * Performs connection initialization and sets state to
+     * {@link IMAPState#NOT_AUTH_STATE}.
@@ -142 +159,2 @@ public class IMAP extends SocketClient {
-    protected void _connectAction_() throws IOException {
+    protected void _connectAction_() throws IOException
+    {
@@ -144,2 +162,6 @@ public class IMAP extends SocketClient {
-        _reader = new CRLFLineReader(new InputStreamReader(_input_, __DEFAULT_ENCODING));
-        __writer = new BufferedWriter(new OutputStreamWriter(_output_, __DEFAULT_ENCODING));
+        _reader =
+          new CRLFLineReader(new InputStreamReader(_input_,
+                                                   __DEFAULT_ENCODING));
+        __writer =
+          new BufferedWriter(new OutputStreamWriter(_output_,
+                                                    __DEFAULT_ENCODING));
@@ -158,2 +180,4 @@ public class IMAP extends SocketClient {
-     * Disconnects the client from the server, and sets the state to <code> DISCONNECTED_STATE </code>. The reply text information from the last issued command
-     * is voided to allow garbage collection of the memory used to store that information.
+     * Disconnects the client from the server, and sets the state to
+     * <code> DISCONNECTED_STATE </code>.  The reply text information
+     * from the last issued command is voided to allow garbage collection
+     * of the memory used to store that information.
@@ -161 +185 @@ public class IMAP extends SocketClient {
-     * @throws IOException If there is an error in disconnecting.
+     * @throws IOException  If there is an error in disconnecting.
@@ -164 +188,2 @@ public class IMAP extends SocketClient {
-    public void disconnect() throws IOException {
+    public void disconnect() throws IOException
+    {
@@ -175,2 +200,3 @@ public class IMAP extends SocketClient {
-     * @param command The IMAP command to send (one of the IMAPCommand constants).
-     * @return {@code true} if the command was successful
+     * @param command  The IMAP command to send
+     *                  (one of the IMAPCommand constants).
+     * @return  {@code true} if the command was successful
@@ -179 +205,2 @@ public class IMAP extends SocketClient {
-    public boolean doCommand(final IMAPCommand command) throws IOException {
+    public boolean doCommand(final IMAPCommand command) throws IOException
+    {
@@ -186,3 +213,4 @@ public class IMAP extends SocketClient {
-     * @param command The IMAP command to send (one of the IMAPCommand constants).
-     * @param args    The command arguments.
-     * @return {@code true} if the command was successful
+     * @param command  The IMAP command to send
+     *                  (one of the IMAPCommand constants).
+     * @param args     The command arguments.
+     * @return  {@code true} if the command was successful
@@ -191 +219,2 @@ public class IMAP extends SocketClient {
-    public boolean doCommand(final IMAPCommand command, final String args) throws IOException {
+    public boolean doCommand(final IMAPCommand command, final String args) throws IOException
+    {
@@ -194,0 +224 @@ public class IMAP extends SocketClient {
+
@@ -196 +226,2 @@ public class IMAP extends SocketClient {
-     * Overrides {@link SocketClient#fireReplyReceived(int, String)} so as to avoid creating the reply string if there are no listeners to invoke.
+     * Overrides {@link SocketClient#fireReplyReceived(int, String)} so as to
+     * avoid creating the reply string if there are no listeners to invoke.
@@ -199 +230 @@ public class IMAP extends SocketClient {
-     * @param ignored   the string is only created if there are listeners defined.
+     * @param ignored the string is only created if there are listeners defined.
@@ -212 +242,0 @@ public class IMAP extends SocketClient {
-     *
@@ -215,2 +245,3 @@ public class IMAP extends SocketClient {
-    protected String generateCommandID() {
-        final String res = new String(initialID);
+    protected String generateCommandID()
+    {
+        final String res = new String (initialID);
@@ -219,2 +250,4 @@ public class IMAP extends SocketClient {
-        for (int i = initialID.length - 1; carry && i >= 0; i--) {
-            if (initialID[i] == 'Z') {
+        for (int i = initialID.length-1; carry && i>=0; i--)
+        {
+            if (initialID[i] == 'Z')
+            {
@@ -222 +255,3 @@ public class IMAP extends SocketClient {
-            } else {
+            }
+            else
+            {
@@ -229,0 +265 @@ public class IMAP extends SocketClient {
+
@@ -235 +271,2 @@ public class IMAP extends SocketClient {
-    private void getReply() throws IOException {
+    private void getReply() throws IOException
+    {
@@ -240 +277,2 @@ public class IMAP extends SocketClient {
-     * Get the reply for a command, reading the response until the reply is found.
+     * Get the reply for a command, reading the response until the
+     * reply is found.
@@ -245 +283,2 @@ public class IMAP extends SocketClient {
-    private void getReply(final boolean wantTag) throws IOException {
+    private void getReply(final boolean wantTag) throws IOException
+    {
@@ -256 +295 @@ public class IMAP extends SocketClient {
-            while (IMAPReply.isUntagged(line)) {
+            while(IMAPReply.isUntagged(line)) {
@@ -260 +299 @@ public class IMAP extends SocketClient {
-                    line = _reader.readLine();
+                    line=_reader.readLine();
@@ -293 +332,3 @@ public class IMAP extends SocketClient {
-     * Returns the reply to the last command sent to the server. The value is a single string containing all the reply lines including newlines.
+     * Returns the reply to the last command sent to the server.
+     * The value is a single string containing all the reply lines including
+     * newlines.
@@ -297 +338,2 @@ public class IMAP extends SocketClient {
-    public String getReplyString() {
+    public String getReplyString()
+    {
@@ -299 +341,2 @@ public class IMAP extends SocketClient {
-        for (final String s : replyLines) {
+        for (final String s : replyLines)
+        {
@@ -308,2 +351,2 @@ public class IMAP extends SocketClient {
-     * Returns an array of lines received as a reply to the last command sent to the server. The lines have end of lines truncated.
-     *
+     * Returns an array of lines received as a reply to the last command
+     * sent to the server.  The lines have end of lines truncated.
@@ -312 +355,2 @@ public class IMAP extends SocketClient {
-    public String[] getReplyStrings() {
+    public String[] getReplyStrings()
+    {
@@ -321 +365,2 @@ public class IMAP extends SocketClient {
-    public IMAP.IMAPState getState() {
+    public IMAP.IMAPState getState()
+    {
@@ -326 +371,2 @@ public class IMAP extends SocketClient {
-     * Sends a command with no arguments to the server and returns the reply code.
+     * Sends a command with no arguments to the server and returns the
+     * reply code.
@@ -328,2 +374,3 @@ public class IMAP extends SocketClient {
-     * @param command The IMAP command to send (one of the IMAPCommand constants).
-     * @return The server reply code (see IMAPReply).
+     * @param command  The IMAP command to send
+     *                  (one of the IMAPCommand constants).
+     * @return  The server reply code (see IMAPReply).
@@ -331,2 +378,3 @@ public class IMAP extends SocketClient {
-     **/
-    public int sendCommand(final IMAPCommand command) throws IOException {
+    **/
+    public int sendCommand(final IMAPCommand command) throws IOException
+    {
@@ -339,3 +387,4 @@ public class IMAP extends SocketClient {
-     * @param command The IMAP command to send (one of the IMAPCommand constants).
-     * @param args    The command arguments.
-     * @return The server reply code (see IMAPReply).
+     * @param command  The IMAP command to send
+     *                  (one of the IMAPCommand constants).
+     * @param args     The command arguments.
+     * @return  The server reply code (see IMAPReply).
@@ -344 +393,2 @@ public class IMAP extends SocketClient {
-    public int sendCommand(final IMAPCommand command, final String args) throws IOException {
+    public int sendCommand(final IMAPCommand command, final String args) throws IOException
+    {
@@ -349 +399,2 @@ public class IMAP extends SocketClient {
-     * Sends a command with no arguments to the server and returns the reply code.
+     * Sends a command with no arguments to the server and returns the
+     * reply code.
@@ -351,2 +402,2 @@ public class IMAP extends SocketClient {
-     * @param command The IMAP command to send.
-     * @return The server reply code (see IMAPReply).
+     * @param command  The IMAP command to send.
+     * @return  The server reply code (see IMAPReply).
@@ -355 +406,2 @@ public class IMAP extends SocketClient {
-    public int sendCommand(final String command) throws IOException {
+    public int sendCommand(final String command) throws IOException
+    {
@@ -362,3 +414,3 @@ public class IMAP extends SocketClient {
-     * @param command The IMAP command to send.
-     * @param args    The command arguments.
-     * @return The server reply code (see IMAPReply).
+     * @param command  The IMAP command to send.
+     * @param args     The command arguments.
+     * @return  The server reply code (see IMAPReply).
@@ -367 +419,2 @@ public class IMAP extends SocketClient {
-    public int sendCommand(final String command, final String args) throws IOException {
+    public int sendCommand(final String command, final String args) throws IOException
+    {
@@ -375,3 +428,3 @@ public class IMAP extends SocketClient {
-     * @param command   The IMAP command to send.
-     * @param args      The command arguments.
-     * @return The server reply code (either IMAPReply.OK, IMAPReply.NO or IMAPReply.BAD).
+     * @param command  The IMAP command to send.
+     * @param args     The command arguments.
+     * @return  The server reply code (either IMAPReply.OK, IMAPReply.NO or IMAPReply.BAD).
@@ -379 +432,2 @@ public class IMAP extends SocketClient {
-    private int sendCommandWithID(final String commandID, final String command, final String args) throws IOException {
+    private int sendCommandWithID(final String commandID, final String command, final String args) throws IOException
+    {
@@ -381 +435,2 @@ public class IMAP extends SocketClient {
-        if (commandID != null) {
+        if (commandID != null)
+        {
@@ -387 +442,2 @@ public class IMAP extends SocketClient {
-        if (args != null) {
+        if (args != null)
+        {
@@ -406,2 +462,2 @@ public class IMAP extends SocketClient {
-     * @param command The IMAP command to send.
-     * @return The server reply code (see IMAPReply).
+     * @param command  The IMAP command to send.
+     * @return  The server reply code (see IMAPReply).
@@ -410 +466,2 @@ public class IMAP extends SocketClient {
-    public int sendData(final String command) throws IOException {
+    public int sendData(final String command) throws IOException
+    {
@@ -415,2 +472,5 @@ public class IMAP extends SocketClient {
-     * Sets the current chunk listener. If a listener is registered and the implementation returns true, then any registered
-     * {@link org.apache.commons.net.PrintCommandListener PrintCommandListener} instances will be invoked with the partial response and a status of
+     * Sets the current chunk listener.
+     * If a listener is registered and the implementation returns true,
+     * then any registered
+     * {@link org.apache.commons.net.PrintCommandListener PrintCommandListener}
+     * instances will be invoked with the partial response and a status of
@@ -418 +477,0 @@ public class IMAP extends SocketClient {
-     *
@@ -428 +487,2 @@ public class IMAP extends SocketClient {
-     * Sets IMAP client state. This must be one of the <code>_STATE</code> constants.
+     * Sets IMAP client state.  This must be one of the
+     * <code>_STATE</code> constants.
@@ -430 +490 @@ public class IMAP extends SocketClient {
-     * @param state The new state.
+     * @param state  The new state.
@@ -432 +492,2 @@ public class IMAP extends SocketClient {
-    protected void setState(final IMAP.IMAPState state) {
+    protected void setState(final IMAP.IMAPState state)
+    {
diff --git a/src/main/java/org/apache/commons/net/imap/IMAPClient.java b/src/main/java/org/apache/commons/net/imap/IMAPClient.java
index 76cc2d2c5..cf7f41642 100644
--- a/src/main/java/org/apache/commons/net/imap/IMAPClient.java
+++ b/src/main/java/org/apache/commons/net/imap/IMAPClient.java
@@ -23 +23,2 @@ import java.io.IOException;
- * The IMAPClient class provides the basic functionalities found in an IMAP client.
+ * The IMAPClient class provides the basic functionalities found in an
+ * IMAP client.
@@ -25 +26,2 @@ import java.io.IOException;
-public class IMAPClient extends IMAP {
+public class IMAPClient extends IMAP
+{
@@ -30 +32,2 @@ public class IMAPClient extends IMAP {
-    public enum FETCH_ITEM_NAMES {
+    public enum FETCH_ITEM_NAMES
+    {
@@ -52 +54,0 @@ public class IMAPClient extends IMAP {
-
@@ -56 +58,2 @@ public class IMAPClient extends IMAP {
-    public enum SEARCH_CRITERIA {
+    public enum SEARCH_CRITERIA
+    {
@@ -62 +65,2 @@ public class IMAPClient extends IMAP {
-         * Messages that contain the specified string in the envelope structure's BCC field.
+         * Messages that contain the specified string in the envelope
+         * structure's BCC field.
@@ -66 +70,2 @@ public class IMAPClient extends IMAP {
-         * Messages whose internal date (disregarding time and time zone) is earlier than the specified date.
+         * Messages whose internal date (disregarding time and time zone)
+         * is earlier than the specified date.
@@ -70 +75,2 @@ public class IMAPClient extends IMAP {
-         * Messages that contain the specified string in the body of the message.
+         * Messages that contain the specified string in the body of the
+         * message.
@@ -74 +80,2 @@ public class IMAPClient extends IMAP {
-         * Messages that contain the specified string in the envelope structure's CC field.
+         * Messages that contain the specified string in the envelope
+         * structure's CC field.
@@ -84 +91,2 @@ public class IMAPClient extends IMAP {
-         * Messages that contain the specified string in the envelope structure's FROM field.
+         * Messages that contain the specified string in the envelope
+         * structure's FROM field.
@@ -88,3 +96,6 @@ public class IMAPClient extends IMAP {
-         * Messages that have a header with the specified field-name (as defined in [RFC-2822]) and that contains the specified string in the text of the header
-         * (what comes after the colon). If the string to search is zero-length, this matches all messages that have a header line with the specified field-name
-         * regardless of the contents.
+         * Messages that have a header with the specified field-name (as
+         * defined in [RFC-2822]) and that contains the specified string
+         * in the text of the header (what comes after the colon).  If the
+         * string to search is zero-length, this matches all messages that
+         * have a header line with the specified field-name regardless of
+         * the contents.
@@ -96 +107,2 @@ public class IMAPClient extends IMAP {
-         * Messages with an [RFC-2822] size larger than the specified number of octets.
+         * Messages with an [RFC-2822] size larger than the specified
+         * number of octets.
@@ -100 +112,2 @@ public class IMAPClient extends IMAP {
-         * Messages that have the \Recent flag set but not the \Seen flag. This is functionally equivalent to "(RECENT UNSEEN)".
+         * Messages that have the \Recent flag set but not the \Seen flag.
+         * This is functionally equivalent to "(RECENT UNSEEN)".
@@ -106 +119,3 @@ public class IMAPClient extends IMAP {
-         * Messages that do not have the \Recent flag set. This is functionally equivalent to "NOT RECENT" (as opposed to "NOT NEW").
+         * Messages that do not have the \Recent flag set.  This is
+         * functionally equivalent to "NOT RECENT" (as opposed to "NOT
+         * NEW").
@@ -110 +125,2 @@ public class IMAPClient extends IMAP {
-         * Messages whose internal date (disregarding time and time zone) is within the specified date.
+         * Messages whose internal date (disregarding time and time zone)
+         * is within the specified date.
@@ -120 +136,2 @@ public class IMAPClient extends IMAP {
-         * Messages whose [RFC-2822] Date: header (disregarding time and time zone) is earlier than the specified date.
+         * Messages whose [RFC-2822] Date: header (disregarding time and
+         * time zone) is earlier than the specified date.
@@ -124 +141,2 @@ public class IMAPClient extends IMAP {
-         * Messages whose [RFC-2822] Date: header (disregarding time and time zone) is within the specified date.
+         * Messages whose [RFC-2822] Date: header (disregarding time and
+         * time zone) is within the specified date.
@@ -128 +146,2 @@ public class IMAPClient extends IMAP {
-         * Messages whose [RFC-2822] Date: header (disregarding time and time zone) is within or later than the specified date.
+         * Messages whose [RFC-2822] Date: header (disregarding time and
+         * time zone) is within or later than the specified date.
@@ -132 +151,2 @@ public class IMAPClient extends IMAP {
-         * Messages whose internal date (disregarding time and time zone) is within or later than the specified date.
+         * Messages whose internal date (disregarding time and time zone)
+         * is within or later than the specified date.
@@ -136 +156,2 @@ public class IMAPClient extends IMAP {
-         * Messages with an [RFC-2822] size smaller than the specified number of octets.
+         * Messages with an [RFC-2822] size smaller than the specified
+         * number of octets.
@@ -140 +161,2 @@ public class IMAPClient extends IMAP {
-         * Messages that contain the specified string in the envelope structure's SUBJECT field.
+         * Messages that contain the specified string in the envelope
+         * structure's SUBJECT field.
@@ -144 +166,2 @@ public class IMAPClient extends IMAP {
-         * Messages that contain the specified string in the header or body of the message.
+         * Messages that contain the specified string in the header or
+         * body of the message.
@@ -148 +171,2 @@ public class IMAPClient extends IMAP {
-         * Messages that contain the specified string in the envelope structure's TO field.
+         * Messages that contain the specified string in the envelope
+         * structure's TO field.
@@ -152 +176,2 @@ public class IMAPClient extends IMAP {
-         * Messages with unique identifiers corresponding to the specified unique identifier set. Sequence set ranges are permitted.
+         * Messages with unique identifiers corresponding to the specified
+         * unique identifier set.  Sequence set ranges are permitted.
@@ -174 +199,2 @@ public class IMAPClient extends IMAP {
-    public enum STATUS_DATA_ITEMS {
+    public enum STATUS_DATA_ITEMS
+    {
@@ -197 +222,0 @@ public class IMAPClient extends IMAP {
-     *
@@ -201 +226,2 @@ public class IMAPClient extends IMAP {
-     * @deprecated (3.4) Does not work; the message body is not optional. Use {@link #append(String, String, String, String)} instead.
+     * @deprecated (3.4) Does not work; the message body is not optional.
+     * Use {@link #append(String, String, String, String)} instead.
@@ -204 +230,2 @@ public class IMAPClient extends IMAP {
-    public boolean append(final String mailboxName) throws IOException {
+    public boolean append(final String mailboxName) throws IOException
+    {
@@ -212 +238,0 @@ public class IMAPClient extends IMAP {
-     *
@@ -214,2 +240,2 @@ public class IMAPClient extends IMAP {
-     * @param flags       The flag parenthesized list (optional).
-     * @param datetime    The date/time string (optional).
+     * @param flags The flag parenthesized list (optional).
+     * @param datetime The date/time string (optional).
@@ -218 +244,2 @@ public class IMAPClient extends IMAP {
-     * @deprecated (3.4) Does not work; the message body is not optional. Use {@link #append(String, String, String, String)} instead.
+     * @deprecated (3.4) Does not work; the message body is not optional.
+     * Use {@link #append(String, String, String, String)} instead.
@@ -221 +248,2 @@ public class IMAPClient extends IMAP {
-    public boolean append(final String mailboxName, final String flags, final String datetime) throws IOException {
+    public boolean append(final String mailboxName, final String flags, final String datetime) throws IOException
+    {
@@ -233 +261 @@ public class IMAPClient extends IMAP {
-        return doCommand(IMAPCommand.APPEND, args);
+        return doCommand (IMAPCommand.APPEND, args);
@@ -238 +265,0 @@ public class IMAPClient extends IMAP {
-     *
@@ -240,3 +267,3 @@ public class IMAPClient extends IMAP {
-     * @param flags       The flag parenthesized list (optional).
-     * @param datetime    The date/time string (optional).
-     * @param message     The message to append.
+     * @param flags The flag parenthesized list (optional).
+     * @param datetime The date/time string (optional).
+     * @param message The message to append.
@@ -247 +274,2 @@ public class IMAPClient extends IMAP {
-    public boolean append(final String mailboxName, final String flags, final String datetime, final String message) throws IOException {
+    public boolean append(final String mailboxName, final String flags, final String datetime, final String message)
+            throws IOException {
@@ -274 +301,0 @@ public class IMAPClient extends IMAP {
-     *
@@ -278,2 +305,3 @@ public class IMAPClient extends IMAP {
-    public boolean capability() throws IOException {
-        return doCommand(IMAPCommand.CAPABILITY);
+    public boolean capability() throws IOException
+    {
+        return doCommand (IMAPCommand.CAPABILITY);
@@ -284 +311,0 @@ public class IMAPClient extends IMAP {
-     *
@@ -288,2 +315,3 @@ public class IMAPClient extends IMAP {
-    public boolean check() throws IOException {
-        return doCommand(IMAPCommand.CHECK);
+    public boolean check() throws IOException
+    {
+        return doCommand (IMAPCommand.CHECK);
@@ -294 +321,0 @@ public class IMAPClient extends IMAP {
-     *
@@ -298,2 +325,3 @@ public class IMAPClient extends IMAP {
-    public boolean close() throws IOException {
-        return doCommand(IMAPCommand.CLOSE);
+    public boolean close() throws IOException
+    {
+        return doCommand (IMAPCommand.CLOSE);
@@ -304 +331,0 @@ public class IMAPClient extends IMAP {
-     *
@@ -310,2 +337,3 @@ public class IMAPClient extends IMAP {
-    public boolean copy(final String sequenceSet, final String mailboxName) throws IOException {
-        return doCommand(IMAPCommand.COPY, sequenceSet + " " + quoteMailboxName(mailboxName));
+    public boolean copy(final String sequenceSet, final String mailboxName) throws IOException
+    {
+        return doCommand (IMAPCommand.COPY, sequenceSet + " " + quoteMailboxName(mailboxName));
@@ -316 +343,0 @@ public class IMAPClient extends IMAP {
-     *
@@ -321,2 +348,3 @@ public class IMAPClient extends IMAP {
-    public boolean create(final String mailboxName) throws IOException {
-        return doCommand(IMAPCommand.CREATE, quoteMailboxName(mailboxName));
+    public boolean create(final String mailboxName) throws IOException
+    {
+        return doCommand (IMAPCommand.CREATE, quoteMailboxName(mailboxName));
@@ -327 +354,0 @@ public class IMAPClient extends IMAP {
-     *
@@ -332,2 +359,3 @@ public class IMAPClient extends IMAP {
-    public boolean delete(final String mailboxName) throws IOException {
-        return doCommand(IMAPCommand.DELETE, quoteMailboxName(mailboxName));
+    public boolean delete(final String mailboxName) throws IOException
+    {
+        return doCommand (IMAPCommand.DELETE, quoteMailboxName(mailboxName));
@@ -338 +365,0 @@ public class IMAPClient extends IMAP {
-     *
@@ -343,2 +370,3 @@ public class IMAPClient extends IMAP {
-    public boolean examine(final String mailboxName) throws IOException {
-        return doCommand(IMAPCommand.EXAMINE, quoteMailboxName(mailboxName));
+    public boolean examine(final String mailboxName) throws IOException
+    {
+        return doCommand (IMAPCommand.EXAMINE, quoteMailboxName(mailboxName));
@@ -349 +376,0 @@ public class IMAPClient extends IMAP {
-     *
@@ -353,2 +380,3 @@ public class IMAPClient extends IMAP {
-    public boolean expunge() throws IOException {
-        return doCommand(IMAPCommand.EXPUNGE);
+    public boolean expunge() throws IOException
+    {
+        return doCommand (IMAPCommand.EXPUNGE);
@@ -361,2 +389,2 @@ public class IMAPClient extends IMAP {
-     * @param itemNames   The item names for the FETCH command. (e.g. BODY.PEEK[HEADER.FIELDS (SUBJECT)]) If multiple item names are requested, these must be
-     *                    enclosed in parentheses, e.g. "(UID FLAGS BODY.PEEK[])"
+     * @param itemNames The item names for the FETCH command. (e.g. BODY.PEEK[HEADER.FIELDS (SUBJECT)])
+     * If multiple item names are requested, these must be enclosed in parentheses, e.g. "(UID FLAGS BODY.PEEK[])"
@@ -368,2 +396,3 @@ public class IMAPClient extends IMAP {
-    public boolean fetch(final String sequenceSet, final String itemNames) throws IOException {
-        return doCommand(IMAPCommand.FETCH, sequenceSet + " " + itemNames);
+    public boolean fetch(final String sequenceSet, final String itemNames) throws IOException
+    {
+        return doCommand (IMAPCommand.FETCH, sequenceSet + " " + itemNames);
@@ -373,5 +402,8 @@ public class IMAPClient extends IMAP {
-     * Send a LIST command to the server. Quotes the parameters if necessary.
-     *
-     * @param refName     The reference name If empty, indicates that the mailbox name is interpreted as by SELECT.
-     * @param mailboxName The mailbox name. If empty, this is a special request to return the hierarchy delimiter and the root name of the name given in the
-     *                    reference
+     * Send a LIST command to the server.
+     * Quotes the parameters if necessary.
+     * @param refName The reference name
+     *                If empty, indicates that the mailbox name is interpreted as by SELECT.
+     * @param mailboxName The mailbox name.
+     *                     If empty, this is a special request to
+     *                     return the hierarchy delimiter and the root name of the name given
+     *                     in the reference
@@ -381,2 +413,3 @@ public class IMAPClient extends IMAP {
-    public boolean list(final String refName, final String mailboxName) throws IOException {
-        return doCommand(IMAPCommand.LIST, quoteMailboxName(refName) + " " + quoteMailboxName(mailboxName));
+    public boolean list(final String refName, final String mailboxName) throws IOException
+    {
+        return doCommand (IMAPCommand.LIST, quoteMailboxName(refName) + " " + quoteMailboxName(mailboxName));
@@ -386,3 +419,6 @@ public class IMAPClient extends IMAP {
-     * Login to the IMAP server with the given username and password. You must first connect to the server with
-     * {@link org.apache.commons.net.SocketClient#connect connect } before attempting to login. A login attempt is only valid if the client is in the
-     * NOT_AUTH_STATE. After logging in, the client enters the AUTH_STATE.
+     * Login to the IMAP server with the given username and password.  You
+     * must first connect to the server with
+     * {@link org.apache.commons.net.SocketClient#connect  connect }
+     * before attempting to login.  A login attempt is only valid if
+     * the client is in the NOT_AUTH_STATE.
+     * After logging in, the client enters the AUTH_STATE.
@@ -390,2 +426,2 @@ public class IMAPClient extends IMAP {
-     * @param username The account name being logged in to.
-     * @param password The plain text password of the account.
+     * @param username  The account name being logged in to.
+     * @param password  The plain text password of the account.
@@ -393 +429,2 @@ public class IMAPClient extends IMAP {
-     * @throws IOException If a network I/O error occurs in the process of logging in.
+     * @throws IOException If a network I/O error occurs in the process of
+     *            logging in.
@@ -395,2 +432,4 @@ public class IMAPClient extends IMAP {
-    public boolean login(final String username, final String password) throws IOException {
-        if (getState() != IMAP.IMAPState.NOT_AUTH_STATE) {
+    public boolean login(final String username, final String password) throws IOException
+    {
+        if (getState() != IMAP.IMAPState.NOT_AUTH_STATE)
+        {
@@ -400 +439,2 @@ public class IMAPClient extends IMAP {
-        if (!doCommand(IMAPCommand.LOGIN, username + " " + password)) {
+        if (!doCommand(IMAPCommand.LOGIN, username + " " + password))
+        {
@@ -412,3 +452,5 @@ public class IMAPClient extends IMAP {
-     * Send a LOGOUT command to the server. To fully disconnect from the server you must call disconnect(). A logout attempt is valid in any state. If the
-     * client is in the not authenticated or authenticated state, it enters the logout on a successful logout.
-     *
+     * Send a LOGOUT command to the server.  To fully disconnect from the server
+     * you must call disconnect().
+     * A logout attempt is valid in any state.  If
+     * the client is in the not authenticated or authenticated state, it enters the
+     * logout on a successful logout.
@@ -418,2 +460,3 @@ public class IMAPClient extends IMAP {
-    public boolean logout() throws IOException {
-        return doCommand(IMAPCommand.LOGOUT);
+    public boolean logout() throws IOException
+    {
+        return doCommand (IMAPCommand.LOGOUT);
@@ -423,3 +466,3 @@ public class IMAPClient extends IMAP {
-     * Send an LSUB command to the server. Quotes the parameters if necessary.
-     *
-     * @param refName     The reference name.
+     * Send an LSUB command to the server.
+     * Quotes the parameters if necessary.
+     * @param refName The reference name.
@@ -430,2 +473,3 @@ public class IMAPClient extends IMAP {
-    public boolean lsub(final String refName, final String mailboxName) throws IOException {
-        return doCommand(IMAPCommand.LSUB, quoteMailboxName(refName) + " " + quoteMailboxName(mailboxName));
+    public boolean lsub(final String refName, final String mailboxName) throws IOException
+    {
+        return doCommand (IMAPCommand.LSUB, quoteMailboxName(refName) + " " + quoteMailboxName(mailboxName));
@@ -435,2 +479,3 @@ public class IMAPClient extends IMAP {
-     * Send a NOOP command to the server. This is useful for keeping a connection alive since most IMAP servers will timeout after 10 minutes of inactivity.
-     *
+     * Send a NOOP command to the server.  This is useful for keeping
+     * a connection alive since most IMAP servers will timeout after 10
+     * minutes of inactivity.
@@ -440,2 +485,3 @@ public class IMAPClient extends IMAP {
-    public boolean noop() throws IOException {
-        return doCommand(IMAPCommand.NOOP);
+    public boolean noop() throws IOException
+    {
+        return doCommand (IMAPCommand.NOOP);
@@ -446 +491,0 @@ public class IMAPClient extends IMAP {
-     *
@@ -452,2 +497,3 @@ public class IMAPClient extends IMAP {
-    public boolean rename(final String oldMailboxName, final String newMailboxName) throws IOException {
-        return doCommand(IMAPCommand.RENAME, quoteMailboxName(oldMailboxName) + " " + quoteMailboxName(newMailboxName));
+    public boolean rename(final String oldMailboxName, final String newMailboxName) throws IOException
+    {
+        return doCommand (IMAPCommand.RENAME, quoteMailboxName(oldMailboxName) + " " + quoteMailboxName(newMailboxName));
@@ -458 +503,0 @@ public class IMAPClient extends IMAP {
-     *
@@ -463 +508,2 @@ public class IMAPClient extends IMAP {
-    public boolean search(final String criteria) throws IOException {
+    public boolean search(final String criteria) throws IOException
+    {
@@ -469,2 +515 @@ public class IMAPClient extends IMAP {
-     *
-     * @param charset  The charset (optional).
+     * @param charset The charset (optional).
@@ -475 +520,2 @@ public class IMAPClient extends IMAP {
-    public boolean search(final String charset, final String criteria) throws IOException {
+    public boolean search(final String charset, final String criteria) throws IOException
+    {
@@ -481 +527 @@ public class IMAPClient extends IMAP {
-        return doCommand(IMAPCommand.SEARCH, args);
+        return doCommand (IMAPCommand.SEARCH, args);
@@ -486 +531,0 @@ public class IMAPClient extends IMAP {
-     *
@@ -491,2 +536,3 @@ public class IMAPClient extends IMAP {
-    public boolean select(final String mailboxName) throws IOException {
-        return doCommand(IMAPCommand.SELECT, quoteMailboxName(mailboxName));
+    public boolean select(final String mailboxName) throws IOException
+    {
+        return doCommand (IMAPCommand.SELECT, quoteMailboxName(mailboxName));
@@ -497 +542,0 @@ public class IMAPClient extends IMAP {
-     *
@@ -499 +544 @@ public class IMAPClient extends IMAP {
-     * @param itemNames   The status data item names.
+     * @param itemNames The status data item names.
@@ -503 +548,2 @@ public class IMAPClient extends IMAP {
-    public boolean status(final String mailboxName, final String[] itemNames) throws IOException {
+    public boolean status(final String mailboxName, final String[] itemNames) throws IOException
+    {
@@ -512 +558,2 @@ public class IMAPClient extends IMAP {
-        for (int i = 0; i < itemNames.length; i++) {
+        for ( int i = 0; i < itemNames.length; i++ )
+        {
@@ -520 +567 @@ public class IMAPClient extends IMAP {
-        return doCommand(IMAPCommand.STATUS, sb.toString());
+        return doCommand (IMAPCommand.STATUS, sb.toString());
@@ -525 +571,0 @@ public class IMAPClient extends IMAP {
-     *
@@ -527,2 +573,2 @@ public class IMAPClient extends IMAP {
-     * @param itemNames   The item name for the STORE command (i.e. [+|-]FLAGS[.SILENT])
-     * @param itemValues  The item values for the STORE command. (e.g. (\Deleted) )
+     * @param itemNames The item name for the STORE command (i.e. [+|-]FLAGS[.SILENT])
+     * @param itemValues The item values for the STORE command. (e.g. (\Deleted) )
@@ -532,2 +578,4 @@ public class IMAPClient extends IMAP {
-    public boolean store(final String sequenceSet, final String itemNames, final String itemValues) throws IOException {
-        return doCommand(IMAPCommand.STORE, sequenceSet + " " + itemNames + " " + itemValues);
+    public boolean store(final String sequenceSet, final String itemNames, final String itemValues)
+        throws IOException
+    {
+        return doCommand (IMAPCommand.STORE, sequenceSet + " " + itemNames + " " + itemValues);
@@ -538 +585,0 @@ public class IMAPClient extends IMAP {
-     *
@@ -543,2 +590,3 @@ public class IMAPClient extends IMAP {
-    public boolean subscribe(final String mailboxName) throws IOException {
-        return doCommand(IMAPCommand.SUBSCRIBE, quoteMailboxName(mailboxName));
+    public boolean subscribe(final String mailboxName) throws IOException
+    {
+        return doCommand (IMAPCommand.SUBSCRIBE, quoteMailboxName(mailboxName));
@@ -549,2 +597 @@ public class IMAPClient extends IMAP {
-     *
-     * @param command     The command for UID.
+     * @param command The command for UID.
@@ -555,2 +602,3 @@ public class IMAPClient extends IMAP {
-    public boolean uid(final String command, final String commandArgs) throws IOException {
-        return doCommand(IMAPCommand.UID, command + " " + commandArgs);
+    public boolean uid(final String command, final String commandArgs) throws IOException
+    {
+        return doCommand (IMAPCommand.UID, command + " " + commandArgs);
@@ -561 +608,0 @@ public class IMAPClient extends IMAP {
-     *
@@ -566,2 +613,3 @@ public class IMAPClient extends IMAP {
-    public boolean unsubscribe(final String mailboxName) throws IOException {
-        return doCommand(IMAPCommand.UNSUBSCRIBE, quoteMailboxName(mailboxName));
+    public boolean unsubscribe(final String mailboxName) throws IOException
+    {
+        return doCommand (IMAPCommand.UNSUBSCRIBE, quoteMailboxName(mailboxName));
diff --git a/src/main/java/org/apache/commons/net/imap/IMAPCommand.java b/src/main/java/org/apache/commons/net/imap/IMAPCommand.java
index 750ce6193..273ef6f68 100644
--- a/src/main/java/org/apache/commons/net/imap/IMAPCommand.java
+++ b/src/main/java/org/apache/commons/net/imap/IMAPCommand.java
@@ -23 +23,2 @@ package org.apache.commons.net.imap;
-public enum IMAPCommand {
+public enum IMAPCommand
+{
@@ -29 +30,3 @@ public enum IMAPCommand {
-    CAPABILITY(0), NOOP(0), LOGOUT(0),
+    CAPABILITY(0),
+    NOOP(0),
+    LOGOUT(0),
@@ -32 +35,3 @@ public enum IMAPCommand {
-    STARTTLS(0), AUTHENTICATE(1), LOGIN(2),
+    STARTTLS(0),
+    AUTHENTICATE(1),
+    LOGIN(2),
@@ -37,2 +42,11 @@ public enum IMAPCommand {
-    SELECT(1), EXAMINE(1), CREATE(1), DELETE(1), RENAME(2), SUBSCRIBE(1), UNSUBSCRIBE(1), LIST(2), LSUB(2), STATUS(2), // P2 = list in ()
-    APPEND(2, 4), // mbox [(flags)] [date-time] literal
+    SELECT(1),
+    EXAMINE(1),
+    CREATE(1),
+    DELETE(1),
+    RENAME(2),
+    SUBSCRIBE(1),
+    UNSUBSCRIBE(1),
+    LIST(2),
+    LSUB(2),
+    STATUS(2), // P2 = list in ()
+    APPEND(2,4), // mbox [(flags)] [date-time] literal
@@ -41 +55,9 @@ public enum IMAPCommand {
-    CHECK(0), CLOSE(0), EXPUNGE(0), SEARCH(1, Integer.MAX_VALUE), FETCH(2), STORE(3), COPY(2), UID(2, Integer.MAX_VALUE),;
+    CHECK(0),
+    CLOSE(0),
+    EXPUNGE(0),
+    SEARCH(1, Integer.MAX_VALUE),
+    FETCH(2),
+    STORE(3),
+    COPY(2),
+    UID(2, Integer.MAX_VALUE),
+    ;
@@ -60 +82 @@ public enum IMAPCommand {
-    IMAPCommand() {
+    IMAPCommand(){
@@ -64 +86 @@ public enum IMAPCommand {
-    IMAPCommand(final int paramCount) {
+    IMAPCommand(final int paramCount){
@@ -66 +88 @@ public enum IMAPCommand {
-    }
+   }
@@ -68 +90 @@ public enum IMAPCommand {
-    IMAPCommand(final int minCount, final int maxCount) {
+    IMAPCommand(final int minCount, final int maxCount){
@@ -70 +92 @@ public enum IMAPCommand {
-    }
+   }
@@ -72 +94 @@ public enum IMAPCommand {
-    IMAPCommand(final String name) {
+    IMAPCommand(final String name){
@@ -76 +98 @@ public enum IMAPCommand {
-    IMAPCommand(final String name, final int paramCount) {
+    IMAPCommand(final String name, final int paramCount){
@@ -80 +102 @@ public enum IMAPCommand {
-    IMAPCommand(final String name, final int minCount, final int maxCount) {
+    IMAPCommand(final String name, final int minCount, final int maxCount){
diff --git a/src/main/java/org/apache/commons/net/imap/IMAPReply.java b/src/main/java/org/apache/commons/net/imap/IMAPReply.java
index 9ef791dc3..2f2c6220c 100644
--- a/src/main/java/org/apache/commons/net/imap/IMAPReply.java
+++ b/src/main/java/org/apache/commons/net/imap/IMAPReply.java
@@ -30 +30,2 @@ import org.apache.commons.net.MalformedServerReplyException;
-public final class IMAPReply {
+public final class IMAPReply
+{
@@ -44,3 +45,3 @@ public final class IMAPReply {
-     * The reply code indicating a partial response. This is used when a chunk listener is registered and the listener requests that the reply lines are cleared
-     * on return.
-     *
+     * The reply code indicating a partial response.
+     * This is used when a chunk listener is registered and the listener
+     * requests that the reply lines are cleared on return.
@@ -88 +89 @@ public final class IMAPReply {
-    private static int getReplyCode(final String line, final Pattern pattern) throws IOException {
+    private static int getReplyCode(final String line, final Pattern pattern) throws IOException{
@@ -105 +106,2 @@ public final class IMAPReply {
-        throw new MalformedServerReplyException("Received unexpected IMAP protocol response from server: '" + line + "'.");
+        throw new MalformedServerReplyException(
+            "Received unexpected IMAP protocol response from server: '" + line + "'.");
@@ -107 +108,0 @@ public final class IMAPReply {
-
@@ -121 +121,0 @@ public final class IMAPReply {
-     *
@@ -131 +130,0 @@ public final class IMAPReply {
-     *
@@ -151 +149,0 @@ public final class IMAPReply {
-     *
@@ -161 +158,0 @@ public final class IMAPReply {
-     *
@@ -173 +169,0 @@ public final class IMAPReply {
-
@@ -175,2 +171,2 @@ public final class IMAPReply {
-    private IMAPReply() {
-    }
+    private IMAPReply()
+    {}
diff --git a/src/main/java/org/apache/commons/net/imap/IMAPSClient.java b/src/main/java/org/apache/commons/net/imap/IMAPSClient.java
index 01dae4189..0173edb53 100644
--- a/src/main/java/org/apache/commons/net/imap/IMAPSClient.java
+++ b/src/main/java/org/apache/commons/net/imap/IMAPSClient.java
@@ -39,4 +39,7 @@ import org.apache.commons.net.util.SSLSocketUtils;
- * The IMAPSClient class provides SSL/TLS connection encryption to IMAPClient. Copied from
- * <a href="http://commons.apache.org/proper/commons-net/apidocs/index.html?org/apache/commons/net/ftp/FTPSClient.html"> FTPSClient</a> and modified to suit
- * IMAP. If implicit mode is selected (NOT the default), SSL/TLS negotiation starts right after the connection has been established. In explicit mode (the
- * default), SSL/TLS negotiation starts when the user calls execTLS() and the server accepts the command.
+ * The IMAPSClient class provides SSL/TLS connection encryption to IMAPClient.
+ * Copied from
+ * <a href="http://commons.apache.org/proper/commons-net/apidocs/index.html?org/apache/commons/net/ftp/FTPSClient.html">
+ * FTPSClient</a> and modified to suit IMAP.
+ * If implicit mode is selected (NOT the default), SSL/TLS negotiation starts right
+ * after the connection has been established. In explicit mode (the default), SSL/TLS
+ * negotiation starts when the user calls execTLS() and the server accepts the command.
@@ -58,3 +61,3 @@ import org.apache.commons.net.util.SSLSocketUtils;
- *
- * <b>Warning</b>: the hostname is not verified against the certificate by default, use {@link #setHostnameVerifier(HostnameVerifier)} or
- * {@link #setEndpointCheckingEnabled(boolean)} (on Java 1.7+) to enable verification.
+ * <b>Warning</b>: the hostname is not verified against the certificate by default, use
+ * {@link #setHostnameVerifier(HostnameVerifier)} or {@link #setEndpointCheckingEnabled(boolean)}
+ * (on Java 1.7+) to enable verification.
@@ -62 +65,2 @@ import org.apache.commons.net.util.SSLSocketUtils;
-public class IMAPSClient extends IMAPClient {
+public class IMAPSClient extends IMAPClient
+{
@@ -75,3 +79,2 @@ public class IMAPSClient extends IMAPClient {
-    /**
-     * The cipher suites. SSLSockets have a default set of these anyway, so no initialization required.
-     */
+    /** The cipher suites. SSLSockets have a default set of these anyway,
+        so no initialization required. */
@@ -80,2 +83,2 @@ public class IMAPSClient extends IMAPClient {
-    private String[] protocols // null;
-    ;// {"SSLv2", "SSLv3", "TLSv1", "TLSv1.1", "SSLv2Hello"};
+    private String[] protocols  //null;
+            ;//{"SSLv2", "SSLv3", "TLSv1", "TLSv1.1", "SSLv2Hello"};
@@ -96 +99,2 @@ public class IMAPSClient extends IMAPClient {
-     * Constructor for IMAPSClient. Sets security mode to explicit (isImplicit = false).
+     * Constructor for IMAPSClient.
+     * Sets security mode to explicit (isImplicit = false).
@@ -98 +102,2 @@ public class IMAPSClient extends IMAPClient {
-    public IMAPSClient() {
+    public IMAPSClient()
+    {
@@ -104 +108,0 @@ public class IMAPSClient extends IMAPClient {
-     *
@@ -107 +111,2 @@ public class IMAPSClient extends IMAPClient {
-    public IMAPSClient(final boolean implicit) {
+    public IMAPSClient(final boolean implicit)
+    {
@@ -113 +117,0 @@ public class IMAPSClient extends IMAPClient {
-     *
@@ -115 +119 @@ public class IMAPSClient extends IMAPClient {
-     * @param ctx      A pre-configured SSL Context.
+     * @param ctx A pre-configured SSL Context.
@@ -117 +121,2 @@ public class IMAPSClient extends IMAPClient {
-    public IMAPSClient(final boolean implicit, final SSLContext ctx) {
+    public IMAPSClient(final boolean implicit, final SSLContext ctx)
+    {
@@ -123 +127,0 @@ public class IMAPSClient extends IMAPClient {
-     *
@@ -126 +130,2 @@ public class IMAPSClient extends IMAPClient {
-    public IMAPSClient(final SSLContext context) {
+    public IMAPSClient(final SSLContext context)
+    {
@@ -132 +136,0 @@ public class IMAPSClient extends IMAPClient {
-     *
@@ -135 +139,2 @@ public class IMAPSClient extends IMAPClient {
-    public IMAPSClient(final String proto) {
+    public IMAPSClient(final String proto)
+    {
@@ -141,2 +146 @@ public class IMAPSClient extends IMAPClient {
-     *
-     * @param proto    the protocol.
+     * @param proto the protocol.
@@ -145 +149,2 @@ public class IMAPSClient extends IMAPClient {
-    public IMAPSClient(final String proto, final boolean implicit) {
+    public IMAPSClient(final String proto, final boolean implicit)
+    {
@@ -151,2 +156 @@ public class IMAPSClient extends IMAPClient {
-     *
-     * @param proto    the protocol.
+     * @param proto the protocol.
@@ -154 +158 @@ public class IMAPSClient extends IMAPClient {
-     * @param ctx      the SSL context
+     * @param ctx the SSL context
@@ -156 +160,2 @@ public class IMAPSClient extends IMAPClient {
-    public IMAPSClient(final String proto, final boolean implicit, final SSLContext ctx) {
+    public IMAPSClient(final String proto, final boolean implicit, final SSLContext ctx)
+    {
@@ -164,3 +169,4 @@ public class IMAPSClient extends IMAPClient {
-     * Because there are so many connect() methods, the _connectAction_() method is provided as a means of performing some action immediately after establishing
-     * a connection, rather than reimplementing all of the connect() methods.
-     *
+     * Because there are so many connect() methods,
+     * the _connectAction_() method is provided as a means of performing
+     * some action immediately after establishing a connection,
+     * rather than reimplementing all of the connect() methods.
@@ -171 +177,2 @@ public class IMAPSClient extends IMAPClient {
-    protected void _connectAction_() throws IOException {
+    protected void _connectAction_() throws IOException
+    {
@@ -182 +188,0 @@ public class IMAPSClient extends IMAPClient {
-     *
@@ -184 +190,2 @@ public class IMAPSClient extends IMAPClient {
-     * @throws IOException  If an I/O error occurs while sending the command or performing the negotiation.
+     * @throws IOException If an I/O error occurs while sending
+     * the command or performing the negotiation.
@@ -187,2 +194,4 @@ public class IMAPSClient extends IMAPClient {
-    public boolean execTLS() throws SSLException, IOException {
-        if (sendCommand(IMAPCommand.getCommand(IMAPCommand.STARTTLS)) != IMAPReply.OK) {
+    public boolean execTLS() throws SSLException, IOException
+    {
+        if (sendCommand(IMAPCommand.getCommand(IMAPCommand.STARTTLS)) != IMAPReply.OK)
+        {
@@ -190 +199 @@ public class IMAPSClient extends IMAPClient {
-            // throw new SSLException(getReplyString());
+            //throw new SSLException(getReplyString());
@@ -197,3 +206,3 @@ public class IMAPSClient extends IMAPClient {
-     * Returns the names of the cipher suites which could be enabled for use on this connection. When the underlying {@link java.net.Socket Socket} is not an
-     * {@link SSLSocket} instance, returns null.
-     *
+     * Returns the names of the cipher suites which could be enabled
+     * for use on this connection.
+     * When the underlying {@link java.net.Socket Socket} is not an {@link SSLSocket} instance, returns null.
@@ -202,3 +211,5 @@ public class IMAPSClient extends IMAPClient {
-    public String[] getEnabledCipherSuites() {
-        if (_socket_ instanceof SSLSocket) {
-            return ((SSLSocket) _socket_).getEnabledCipherSuites();
+    public String[] getEnabledCipherSuites()
+    {
+        if (_socket_ instanceof SSLSocket)
+        {
+            return ((SSLSocket)_socket_).getEnabledCipherSuites();
@@ -210,3 +221,3 @@ public class IMAPSClient extends IMAPClient {
-     * Returns the names of the protocol versions which are currently enabled for use on this connection. When the underlying {@link java.net.Socket Socket} is
-     * not an {@link SSLSocket} instance, returns null.
-     *
+     * Returns the names of the protocol versions which are currently
+     * enabled for use on this connection.
+     * When the underlying {@link java.net.Socket Socket} is not an {@link SSLSocket} instance, returns null.
@@ -215,3 +226,5 @@ public class IMAPSClient extends IMAPClient {
-    public String[] getEnabledProtocols() {
-        if (_socket_ instanceof SSLSocket) {
-            return ((SSLSocket) _socket_).getEnabledProtocols();
+    public String[] getEnabledProtocols()
+    {
+        if (_socket_ instanceof SSLSocket)
+        {
+            return ((SSLSocket)_socket_).getEnabledProtocols();
@@ -224 +236,0 @@ public class IMAPSClient extends IMAPClient {
-     *
@@ -228 +240,2 @@ public class IMAPSClient extends IMAPClient {
-    public HostnameVerifier getHostnameVerifier() {
+    public HostnameVerifier getHostnameVerifier()
+    {
@@ -234 +246,0 @@ public class IMAPSClient extends IMAPClient {
-     *
@@ -237 +249,2 @@ public class IMAPSClient extends IMAPClient {
-    private KeyManager getKeyManager() {
+    private KeyManager getKeyManager()
+    {
@@ -243 +255,0 @@ public class IMAPSClient extends IMAPClient {
-     *
@@ -246 +258,2 @@ public class IMAPSClient extends IMAPClient {
-    public TrustManager getTrustManager() {
+    public TrustManager getTrustManager()
+    {
@@ -252 +264,0 @@ public class IMAPSClient extends IMAPClient {
-     *
@@ -255,2 +267,4 @@ public class IMAPSClient extends IMAPClient {
-    private void initSSLContext() throws IOException {
-        if (context == null) {
+    private void initSSLContext() throws IOException
+    {
+        if (context == null)
+        {
@@ -262 +276,2 @@ public class IMAPSClient extends IMAPClient {
-     * Return whether or not endpoint identification using the HTTPS algorithm on Java 1.7+ is enabled. The default behavior is for this to be disabled.
+     * Return whether or not endpoint identification using the HTTPS algorithm
+     * on Java 1.7+ is enabled. The default behavior is for this to be disabled.
@@ -267 +282,2 @@ public class IMAPSClient extends IMAPClient {
-    public boolean isEndpointCheckingEnabled() {
+    public boolean isEndpointCheckingEnabled()
+    {
@@ -272,2 +288,2 @@ public class IMAPSClient extends IMAPClient {
-     * SSL/TLS negotiation. Acquires an SSL socket of a connection and carries out handshake processing.
-     *
+     * SSL/TLS negotiation. Acquires an SSL socket of a
+     * connection and carries out handshake processing.
@@ -276 +292,2 @@ public class IMAPSClient extends IMAPClient {
-    private void performSSLNegotiation() throws IOException {
+    private void performSSLNegotiation() throws IOException
+    {
@@ -282 +299,2 @@ public class IMAPSClient extends IMAPClient {
-        final SSLSocket socket = (SSLSocket) ssf.createSocket(_socket_, host, port, true);
+        final SSLSocket socket =
+            (SSLSocket) ssf.createSocket(_socket_, host, port, true);
@@ -302,2 +320,6 @@ public class IMAPSClient extends IMAPClient {
-        _reader = new CRLFLineReader(new InputStreamReader(_input_, __DEFAULT_ENCODING));
-        __writer = new BufferedWriter(new OutputStreamWriter(_output_, __DEFAULT_ENCODING));
+        _reader =
+          new CRLFLineReader(new InputStreamReader(_input_,
+                                                   __DEFAULT_ENCODING));
+        __writer =
+          new BufferedWriter(new OutputStreamWriter(_output_,
+                                                    __DEFAULT_ENCODING));
@@ -311,2 +333,2 @@ public class IMAPSClient extends IMAPClient {
-     * Controls which particular cipher suites are enabled for use on this connection. Called before server negotiation.
-     *
+     * Controls which particular cipher suites are enabled for use on this
+     * connection. Called before server negotiation.
@@ -315 +337,2 @@ public class IMAPSClient extends IMAPClient {
-    public void setEnabledCipherSuites(final String[] cipherSuites) {
+    public void setEnabledCipherSuites(final String[] cipherSuites)
+    {
@@ -320,2 +343,2 @@ public class IMAPSClient extends IMAPClient {
-     * Controls which particular protocol versions are enabled for use on this connection. I perform setting before a server negotiation.
-     *
+     * Controls which particular protocol versions are enabled for use on this
+     * connection. I perform setting before a server negotiation.
@@ -324 +347,2 @@ public class IMAPSClient extends IMAPClient {
-    public void setEnabledProtocols(final String[] protocolVersions) {
+    public void setEnabledProtocols(final String[] protocolVersions)
+    {
@@ -329 +353,2 @@ public class IMAPSClient extends IMAPClient {
-     * Automatic endpoint identification checking using the HTTPS algorithm is supported on Java 1.7+. The default behavior is for this to be disabled.
+     * Automatic endpoint identification checking using the HTTPS algorithm
+     * is supported on Java 1.7+. The default behavior is for this to be disabled.
@@ -334 +359,2 @@ public class IMAPSClient extends IMAPClient {
-    public void setEndpointCheckingEnabled(final boolean enable) {
+    public void setEndpointCheckingEnabled(final boolean enable)
+    {
@@ -340 +365,0 @@ public class IMAPSClient extends IMAPClient {
-     *
@@ -344 +369,2 @@ public class IMAPSClient extends IMAPClient {
-    public void setHostnameVerifier(final HostnameVerifier newHostnameVerifier) {
+    public void setHostnameVerifier(final HostnameVerifier newHostnameVerifier)
+    {
@@ -350 +375,0 @@ public class IMAPSClient extends IMAPClient {
-     *
@@ -354 +379,2 @@ public class IMAPSClient extends IMAPClient {
-    public void setKeyManager(final KeyManager newKeyManager) {
+    public void setKeyManager(final KeyManager newKeyManager)
+    {
@@ -360 +385,0 @@ public class IMAPSClient extends IMAPClient {
-     *
@@ -364 +389,2 @@ public class IMAPSClient extends IMAPClient {
-    public void setTrustManager(final TrustManager newTrustManager) {
+    public void setTrustManager(final TrustManager newTrustManager)
+    {
diff --git a/src/main/java/org/apache/commons/net/io/CRLFLineReader.java b/src/main/java/org/apache/commons/net/io/CRLFLineReader.java
index 368d88aba..5f0e347fb 100644
--- a/src/main/java/org/apache/commons/net/io/CRLFLineReader.java
+++ b/src/main/java/org/apache/commons/net/io/CRLFLineReader.java
@@ -27 +27,3 @@ import org.apache.commons.net.util.NetConstants;
- * CRLFLineReader implements a readLine() method that requires exactly CRLF to terminate an input line. This is required for IMAP, which allows bare CR and LF.
+ * CRLFLineReader implements a readLine() method that requires
+ * exactly CRLF to terminate an input line.
+ * This is required for IMAP, which allows bare CR and LF.
@@ -31 +33,2 @@ import org.apache.commons.net.util.NetConstants;
-public final class CRLFLineReader extends BufferedReader {
+public final class CRLFLineReader extends BufferedReader
+{
@@ -36,3 +39,3 @@ public final class CRLFLineReader extends BufferedReader {
-     * Creates a CRLFLineReader that wraps an existing Reader input source.
-     *
-     * @param reader The Reader input source.
+     * Creates a CRLFLineReader that wraps an existing Reader
+     * input source.
+     * @param reader  The Reader input source.
@@ -40 +43,2 @@ public final class CRLFLineReader extends BufferedReader {
-    public CRLFLineReader(final Reader reader) {
+    public CRLFLineReader(final Reader reader)
+    {
@@ -45,3 +49,3 @@ public final class CRLFLineReader extends BufferedReader {
-     * Read a line of text. A line is considered to be terminated by carriage return followed immediately by a linefeed. This contrasts with BufferedReader
-     * which also allows other combinations.
-     *
+     * Read a line of text.
+     * A line is considered to be terminated by carriage return followed immediately by a linefeed.
+     * This contrasts with BufferedReader which also allows other combinations.
@@ -55,2 +59,3 @@ public final class CRLFLineReader extends BufferedReader {
-        synchronized (lock) { // make thread-safe (hopefully!)
-            while ((intch = read()) != NetConstants.EOS) {
+        synchronized(lock) { // make thread-safe (hopefully!)
+            while((intch = read()) != NetConstants.EOS)
+            {
@@ -58 +63 @@ public final class CRLFLineReader extends BufferedReader {
-                    return sb.substring(0, sb.length() - 1);
+                    return sb.substring(0, sb.length()-1);
diff --git a/src/main/java/org/apache/commons/net/io/CopyStreamAdapter.java b/src/main/java/org/apache/commons/net/io/CopyStreamAdapter.java
index 2f50007c6..dca190aef 100644
--- a/src/main/java/org/apache/commons/net/io/CopyStreamAdapter.java
+++ b/src/main/java/org/apache/commons/net/io/CopyStreamAdapter.java
@@ -25,4 +25,9 @@ import org.apache.commons.net.util.ListenerList;
- * The CopyStreamAdapter will relay CopyStreamEvents to a list of listeners when either of its bytesTransferred() methods are called. Its purpose is to
- * facilitate the notification of the progress of a copy operation performed by one of the static copyStream() methods in org.apache.commons.io.Util to multiple
- * listeners. The static copyStream() methods invoke the bytesTransfered(long, int) of a CopyStreamListener for performance reasons and also because multiple
- * listeners cannot be registered given that the methods are static.
+ * The CopyStreamAdapter will relay CopyStreamEvents to a list of listeners
+ * when either of its bytesTransferred() methods are called.  Its purpose
+ * is to facilitate the notification of the progress of a copy operation
+ * performed by one of the static copyStream() methods in
+ * org.apache.commons.io.Util to multiple listeners.  The static
+ * copyStream() methods invoke the
+ * bytesTransfered(long, int) of a CopyStreamListener for performance
+ * reasons and also because multiple listeners cannot be registered given
+ * that the methods are static.
@@ -35 +40,2 @@ import org.apache.commons.net.util.ListenerList;
-public class CopyStreamAdapter implements CopyStreamListener {
+public class CopyStreamAdapter implements CopyStreamListener
+{
@@ -41 +47,2 @@ public class CopyStreamAdapter implements CopyStreamListener {
-    public CopyStreamAdapter() {
+    public CopyStreamAdapter()
+    {
@@ -46,4 +53,4 @@ public class CopyStreamAdapter implements CopyStreamListener {
-     * Registers a CopyStreamListener to receive CopyStreamEvents. Although this method is not declared to be synchronized, it is implemented in a thread safe
-     * manner.
-     *
-     * @param listener The CopyStreamlistener to register.
+     * Registers a CopyStreamListener to receive CopyStreamEvents.
+     * Although this method is not declared to be synchronized, it is
+     * implemented in a thread safe manner.
+     * @param listener  The CopyStreamlistener to register.
@@ -51 +58,2 @@ public class CopyStreamAdapter implements CopyStreamListener {
-    public void addCopyStreamListener(final CopyStreamListener listener) {
+    public void addCopyStreamListener(final CopyStreamListener listener)
+    {
@@ -56,5 +64,8 @@ public class CopyStreamAdapter implements CopyStreamListener {
-     * This method is invoked by a CopyStreamEvent source after copying a block of bytes from a stream. The CopyStreamEvent will contain the total number of
-     * bytes transferred so far and the number of bytes transferred in the last write. The CopyStreamAdapater will relay the event to all of its registered
-     * listeners, listing itself as the source of the event.
-     *
-     * @param event The CopyStreamEvent fired by the copying of a block of bytes.
+     * This method is invoked by a CopyStreamEvent source after copying
+     * a block of bytes from a stream.  The CopyStreamEvent will contain
+     * the total number of bytes transferred so far and the number of bytes
+     * transferred in the last write.  The CopyStreamAdapater will relay
+     * the event to all of its registered listeners, listing itself as the
+     * source of the event.
+     * @param event The CopyStreamEvent fired by the copying of a block of
+     *              bytes.
@@ -63,2 +74,4 @@ public class CopyStreamAdapter implements CopyStreamListener {
-    public void bytesTransferred(final CopyStreamEvent event) {
-        for (final EventListener listener : internalListeners) {
+    public void bytesTransferred(final CopyStreamEvent event)
+    {
+        for (final EventListener listener : internalListeners)
+        {
@@ -70,8 +83,13 @@ public class CopyStreamAdapter implements CopyStreamListener {
-     * This method is not part of the JavaBeans model and is used by the static methods in the org.apache.commons.io.Util class for efficiency. It is invoked
-     * after a block of bytes to inform the listener of the transfer. The CopyStreamAdapater will create a CopyStreamEvent from the arguments and relay the
-     * event to all of its registered listeners, listing itself as the source of the event.
-     *
-     * @param totalBytesTransferred The total number of bytes transferred so far by the copy operation.
-     * @param bytesTransferred      The number of bytes copied by the most recent write.
-     * @param streamSize            The number of bytes in the stream being copied. This may be equal to CopyStreamEvent.UNKNOWN_STREAM_SIZE if the size is
-     *                              unknown.
+     * This method is not part of the JavaBeans model and is used by the
+     * static methods in the org.apache.commons.io.Util class for efficiency.
+     * It is invoked after a block of bytes to inform the listener of the
+     * transfer.  The CopyStreamAdapater will create a CopyStreamEvent
+     * from the arguments and relay the event to all of its registered
+     * listeners, listing itself as the source of the event.
+     * @param totalBytesTransferred  The total number of bytes transferred
+     *         so far by the copy operation.
+     * @param bytesTransferred  The number of bytes copied by the most recent
+     *          write.
+     * @param streamSize The number of bytes in the stream being copied.
+     *        This may be equal to CopyStreamEvent.UNKNOWN_STREAM_SIZE if
+     *        the size is unknown.
@@ -80,3 +98,7 @@ public class CopyStreamAdapter implements CopyStreamListener {
-    public void bytesTransferred(final long totalBytesTransferred, final int bytesTransferred, final long streamSize) {
-        for (final EventListener listener : internalListeners) {
-            ((CopyStreamListener) listener).bytesTransferred(totalBytesTransferred, bytesTransferred, streamSize);
+    public void bytesTransferred(final long totalBytesTransferred,
+                                 final int bytesTransferred, final long streamSize)
+    {
+        for (final EventListener listener : internalListeners)
+        {
+            ((CopyStreamListener) listener).bytesTransferred(
+                    totalBytesTransferred, bytesTransferred, streamSize);
@@ -87,3 +109,3 @@ public class CopyStreamAdapter implements CopyStreamListener {
-     * Unregisters a CopyStreamListener. Although this method is not synchronized, it is implemented in a thread safe manner.
-     *
-     * @param listener The CopyStreamlistener to unregister.
+     * Unregisters a CopyStreamListener.  Although this method is not
+     * synchronized, it is implemented in a thread safe manner.
+     * @param listener  The CopyStreamlistener to unregister.
@@ -91 +113,2 @@ public class CopyStreamAdapter implements CopyStreamListener {
-    public void removeCopyStreamListener(final CopyStreamListener listener) {
+    public void removeCopyStreamListener(final CopyStreamListener listener)
+    {
diff --git a/src/main/java/org/apache/commons/net/io/CopyStreamEvent.java b/src/main/java/org/apache/commons/net/io/CopyStreamEvent.java
index 39fb2b5fb..52221c71d 100644
--- a/src/main/java/org/apache/commons/net/io/CopyStreamEvent.java
+++ b/src/main/java/org/apache/commons/net/io/CopyStreamEvent.java
@@ -23,2 +23,4 @@ import java.util.EventObject;
- * A CopyStreamEvent is triggered after every write performed by a stream copying operation. The event stores the number of bytes transferred by the write
- * triggering the event as well as the total number of bytes transferred so far by the copy operation.
+ * A CopyStreamEvent is triggered after every write performed by a
+ * stream copying operation.  The event stores the number of bytes
+ * transferred by the write triggering the event as well as the total
+ * number of bytes transferred so far by the copy operation.
@@ -31 +33,2 @@ import java.util.EventObject;
-public class CopyStreamEvent extends EventObject {
+public class CopyStreamEvent extends EventObject
+{
@@ -45,5 +48,8 @@ public class CopyStreamEvent extends EventObject {
-     *
-     * @param source                The source of the event.
-     * @param totalBytesTransferred The total number of bytes transferred so far during a copy operation.
-     * @param bytesTransferred      The number of bytes transferred during the write that triggered the CopyStreamEvent.
-     * @param streamSize            The number of bytes in the stream being copied. This may be set to <code>UNKNOWN_STREAM_SIZE</code> if the size is unknown.
+     * @param source  The source of the event.
+     * @param totalBytesTransferred The total number of bytes transferred so
+     *   far during a copy operation.
+     * @param bytesTransferred  The number of bytes transferred during the
+     *        write that triggered the CopyStreamEvent.
+     * @param streamSize  The number of bytes in the stream being copied.
+     *          This may be set to <code>UNKNOWN_STREAM_SIZE</code> if the
+     *          size is unknown.
@@ -51 +57,3 @@ public class CopyStreamEvent extends EventObject {
-    public CopyStreamEvent(final Object source, final long totalBytesTransferred, final int bytesTransferred, final long streamSize) {
+    public CopyStreamEvent(final Object source, final long totalBytesTransferred,
+                           final int bytesTransferred, final long streamSize)
+    {
@@ -59,3 +67,4 @@ public class CopyStreamEvent extends EventObject {
-     * Returns the number of bytes transferred by the write that triggered the event.
-     *
-     * @return The number of bytes transferred by the write that triggered the vent.
+     * Returns the number of bytes transferred by the write that triggered
+     * the event.
+     * @return The number of bytes transferred by the write that triggered
+     * the vent.
@@ -63 +72,2 @@ public class CopyStreamEvent extends EventObject {
-    public int getBytesTransferred() {
+    public int getBytesTransferred()
+    {
@@ -68,2 +78,3 @@ public class CopyStreamEvent extends EventObject {
-     * Returns the size of the stream being copied. This may be set to <code>UNKNOWN_STREAM_SIZE</code> if the size is unknown.
-     *
+     * Returns the size of the stream being copied.
+     * This may be set to <code>UNKNOWN_STREAM_SIZE</code> if the
+     * size is unknown.
@@ -72 +83,2 @@ public class CopyStreamEvent extends EventObject {
-    public long getStreamSize() {
+    public long getStreamSize()
+    {
@@ -77,3 +89,4 @@ public class CopyStreamEvent extends EventObject {
-     * Returns the total number of bytes transferred so far by the copy operation.
-     *
-     * @return The total number of bytes transferred so far by the copy operation.
+     * Returns the total number of bytes transferred so far by the copy
+     * operation.
+     * @return The total number of bytes transferred so far by the copy
+     * operation.
@@ -81 +94,2 @@ public class CopyStreamEvent extends EventObject {
-    public long getTotalBytesTransferred() {
+    public long getTotalBytesTransferred()
+    {
@@ -86 +100 @@ public class CopyStreamEvent extends EventObject {
-     * @since 3.0
+      * @since 3.0
@@ -89,2 +103,6 @@ public class CopyStreamEvent extends EventObject {
-    public String toString() {
-        return getClass().getName() + "[source=" + source + ", total=" + totalBytesTransferred + ", bytes=" + bytesTransferred + ", size=" + streamSize + "]";
+    public String toString(){
+        return getClass().getName() + "[source=" + source
+        + ", total=" + totalBytesTransferred
+        + ", bytes=" + bytesTransferred
+        + ", size=" + streamSize
+        + "]";
diff --git a/src/main/java/org/apache/commons/net/io/CopyStreamException.java b/src/main/java/org/apache/commons/net/io/CopyStreamException.java
index 4ac84a3ca..39a9d1703 100644
--- a/src/main/java/org/apache/commons/net/io/CopyStreamException.java
+++ b/src/main/java/org/apache/commons/net/io/CopyStreamException.java
@@ -23,3 +23,4 @@ import java.io.IOException;
- * The CopyStreamException class is thrown by the org.apache.commons.io.Util copyStream() methods. It stores the number of bytes confirmed to have been
- * transferred before an I/O error as well as the IOException responsible for the failure of a copy operation.
- *
+ * The CopyStreamException class is thrown by the org.apache.commons.io.Util
+ * copyStream() methods.  It stores the number of bytes confirmed to
+ * have been transferred before an I/O error as well as the IOException
+ * responsible for the failure of a copy operation.
@@ -28 +29,2 @@ import java.io.IOException;
-public class CopyStreamException extends IOException {
+public class CopyStreamException extends IOException
+{
@@ -35,4 +37,4 @@ public class CopyStreamException extends IOException {
-     *
-     * @param message          A message describing the error.
-     * @param bytesTransferred The total number of bytes transferred before an exception was thrown in a copy operation.
-     * @param exception        The IOException thrown during a copy operation.
+     * @param message  A message describing the error.
+     * @param bytesTransferred  The total number of bytes transferred before
+     *        an exception was thrown in a copy operation.
+     * @param exception  The IOException thrown during a copy operation.
@@ -40 +42,4 @@ public class CopyStreamException extends IOException {
-    public CopyStreamException(final String message, final long bytesTransferred, final IOException exception) {
+    public CopyStreamException(final String message,
+                               final long bytesTransferred,
+                               final IOException exception)
+    {
@@ -48 +52,0 @@ public class CopyStreamException extends IOException {
-     *
@@ -51 +55,2 @@ public class CopyStreamException extends IOException {
-    public IOException getIOException() {
+    public IOException getIOException()
+    {
@@ -56,3 +61,4 @@ public class CopyStreamException extends IOException {
-     * Returns the total number of bytes confirmed to have been transferred by a failed copy operation.
-     *
-     * @return The total number of bytes confirmed to have been transferred by a failed copy operation.
+     * Returns the total number of bytes confirmed to have
+     * been transferred by a failed copy operation.
+     * @return The total number of bytes confirmed to have
+     * been transferred by a failed copy operation.
@@ -60 +66,2 @@ public class CopyStreamException extends IOException {
-    public long getTotalBytesTransferred() {
+    public long getTotalBytesTransferred()
+    {
diff --git a/src/main/java/org/apache/commons/net/io/CopyStreamListener.java b/src/main/java/org/apache/commons/net/io/CopyStreamListener.java
index b139a5010..bbf27cdeb 100644
--- a/src/main/java/org/apache/commons/net/io/CopyStreamListener.java
+++ b/src/main/java/org/apache/commons/net/io/CopyStreamListener.java
@@ -23,5 +23,12 @@ import java.util.EventListener;
- * The CopyStreamListener class can accept CopyStreamEvents to keep track of the progress of a stream copying operation. However, it is currently not used that
- * way within NetComponents for performance reasons. Rather the bytesTransferred(long, int) method is called directly rather than passing an event to
- * bytesTransferred(CopyStreamEvent), saving the creation of a CopyStreamEvent instance. Also, the only place where CopyStreamListener is currently used within
- * NetComponents is in the static methods of the uninstantiable org.apache.commons.io.Util class, which would preclude the use of addCopyStreamListener and
- * removeCopyStreamListener methods. However, future additions may use the JavaBean event model, which is why the hooks have been included from the beginning.
+ * The CopyStreamListener class can accept CopyStreamEvents to keep track
+ * of the progress of a stream copying operation.  However, it is currently
+ * not used that way within NetComponents for performance reasons.  Rather
+ * the bytesTransferred(long, int) method is called directly rather than
+ * passing an event to bytesTransferred(CopyStreamEvent), saving the creation
+ * of a CopyStreamEvent instance.  Also, the only place where
+ * CopyStreamListener is currently used within NetComponents is in the
+ * static methods of the uninstantiable org.apache.commons.io.Util class, which
+ * would preclude the use of addCopyStreamListener and
+ * removeCopyStreamListener methods.  However, future additions may use the
+ * JavaBean event model, which is why the hooks have been included from the
+ * beginning.
@@ -34 +41,2 @@ import java.util.EventListener;
-public interface CopyStreamListener extends EventListener {
+public interface CopyStreamListener extends EventListener
+{
@@ -36,4 +44,6 @@ public interface CopyStreamListener extends EventListener {
-     * This method is invoked by a CopyStreamEvent source after copying a block of bytes from a stream. The CopyStreamEvent will contain the total number of
-     * bytes transferred so far and the number of bytes transferred in the last write.
-     *
-     * @param event The CopyStreamEvent fired by the copying of a block of bytes.
+     * This method is invoked by a CopyStreamEvent source after copying
+     * a block of bytes from a stream.  The CopyStreamEvent will contain
+     * the total number of bytes transferred so far and the number of bytes
+     * transferred in the last write.
+     * @param event The CopyStreamEvent fired by the copying of a block of
+     *              bytes.
@@ -42,0 +53 @@ public interface CopyStreamListener extends EventListener {
+
@@ -44,7 +55,11 @@ public interface CopyStreamListener extends EventListener {
-     * This method is not part of the JavaBeans model and is used by the static methods in the org.apache.commons.io.Util class for efficiency. It is invoked
-     * after a block of bytes to inform the listener of the transfer.
-     *
-     * @param totalBytesTransferred The total number of bytes transferred so far by the copy operation.
-     * @param bytesTransferred      The number of bytes copied by the most recent write.
-     * @param streamSize            The number of bytes in the stream being copied. This may be equal to CopyStreamEvent.UNKNOWN_STREAM_SIZE if the size is
-     *                              unknown.
+     * This method is not part of the JavaBeans model and is used by the
+     * static methods in the org.apache.commons.io.Util class for efficiency.
+     * It is invoked after a block of bytes to inform the listener of the
+     * transfer.
+     * @param totalBytesTransferred  The total number of bytes transferred
+     *         so far by the copy operation.
+     * @param bytesTransferred  The number of bytes copied by the most recent
+     *          write.
+     * @param streamSize The number of bytes in the stream being copied.
+     *        This may be equal to CopyStreamEvent.UNKNOWN_STREAM_SIZE if
+     *        the size is unknown.
@@ -52 +67,3 @@ public interface CopyStreamListener extends EventListener {
-    void bytesTransferred(long totalBytesTransferred, int bytesTransferred, long streamSize);
+    void bytesTransferred(long totalBytesTransferred,
+                                 int bytesTransferred,
+                                 long streamSize);
diff --git a/src/main/java/org/apache/commons/net/io/DotTerminatedMessageReader.java b/src/main/java/org/apache/commons/net/io/DotTerminatedMessageReader.java
index e56c52faa..01350b2d1 100644
--- a/src/main/java/org/apache/commons/net/io/DotTerminatedMessageReader.java
+++ b/src/main/java/org/apache/commons/net/io/DotTerminatedMessageReader.java
@@ -27,3 +27,6 @@ import org.apache.commons.net.util.NetConstants;
- * DotTerminatedMessageReader is a class used to read messages from a server that are terminated by a single dot followed by a &lt;CR&gt;&lt;LF&gt; sequence and
- * with double dots appearing at the begining of lines which do not signal end of message yet start with a dot. Various Internet protocols such as NNTP and POP3
- * produce messages of this type.
+ * DotTerminatedMessageReader is a class used to read messages from a
+ * server that are terminated by a single dot followed by a
+ * &lt;CR&gt;&lt;LF&gt;
+ * sequence and with double dots appearing at the begining of lines which
+ * do not signal end of message yet start with a dot.  Various Internet
+ * protocols such as NNTP and POP3 produce messages of this type.
@@ -31,2 +34,2 @@ import org.apache.commons.net.util.NetConstants;
- * This class handles stripping of the duplicate period at the beginning of lines starting with a period, and ensures you cannot read past the end of the
- * message.
+ * This class handles stripping of the duplicate period at the beginning
+ * of lines starting with a period, and ensures you cannot read past the end of the message.
@@ -34 +37,3 @@ import org.apache.commons.net.util.NetConstants;
- * Note: versions since 3.0 extend BufferedReader rather than Reader, and no longer change the CRLF into the local EOL. Also only DOT CR LF acts as EOF.
+ * Note: versions since 3.0 extend BufferedReader rather than Reader,
+ * and no longer change the CRLF into the local EOL. Also only DOT CR LF
+ * acts as EOF.
@@ -36 +41,2 @@ import org.apache.commons.net.util.NetConstants;
-public final class DotTerminatedMessageReader extends BufferedReader {
+public final class DotTerminatedMessageReader extends BufferedReader
+{
@@ -46,3 +52,3 @@ public final class DotTerminatedMessageReader extends BufferedReader {
-     * Creates a DotTerminatedMessageReader that wraps an existing Reader input source.
-     *
-     * @param reader The Reader input source containing the message.
+     * Creates a DotTerminatedMessageReader that wraps an existing Reader
+     * input source.
+     * @param reader  The Reader input source containing the message.
@@ -50 +56,2 @@ public final class DotTerminatedMessageReader extends BufferedReader {
-    public DotTerminatedMessageReader(final Reader reader) {
+    public DotTerminatedMessageReader(final Reader reader)
+    {
@@ -58,2 +65,3 @@ public final class DotTerminatedMessageReader extends BufferedReader {
-     * Closes the message for reading. This doesn't actually close the underlying stream. The underlying stream may still be used for communicating with the
-     * server and therefore is not closed.
+     * Closes the message for reading.  This doesn't actually close the
+     * underlying stream.  The underlying stream may still be used for
+     * communicating with the server and therefore is not closed.
@@ -61,5 +69,8 @@ public final class DotTerminatedMessageReader extends BufferedReader {
-     * If the end of the message has not yet been reached, this method will read the remainder of the message until it reaches the end, so that the underlying
-     * stream may continue to be used properly for communicating with the server. If you do not fully read a message, you MUST close it, otherwise your program
-     * will likely hang or behave improperly.
-     *
-     * @throws IOException If an error occurs while reading the underlying stream.
+     * If the end of the message has not yet been reached, this method
+     * will read the remainder of the message until it reaches the end,
+     * so that the underlying stream may continue to be used properly
+     * for communicating with the server.  If you do not fully read
+     * a message, you MUST close it, otherwise your program will likely
+     * hang or behave improperly.
+     * @throws IOException  If an error occurs while reading the
+     *            underlying stream.
@@ -68,4 +79,8 @@ public final class DotTerminatedMessageReader extends BufferedReader {
-    public void close() throws IOException {
-        synchronized (lock) {
-            if (!eof) {
-                while (read() != -1) {
+    public void close() throws IOException
+    {
+        synchronized (lock)
+        {
+            if (!eof)
+            {
+                while (read() != -1)
+                {
@@ -79,0 +95 @@ public final class DotTerminatedMessageReader extends BufferedReader {
+
@@ -81,6 +97,10 @@ public final class DotTerminatedMessageReader extends BufferedReader {
-     * Reads and returns the next character in the message. If the end of the message has been reached, returns -1. Note that a call to this method may result
-     * in multiple reads from the underlying input stream to decode the message properly (removing doubled dots and so on). All of this is transparent to the
-     * programmer and is only mentioned for completeness.
-     *
-     * @return The next character in the message. Returns -1 if the end of the message has been reached.
-     * @throws IOException If an error occurs while reading the underlying stream.
+     * Reads and returns the next character in the message.  If the end of the
+     * message has been reached, returns -1.  Note that a call to this method
+     * may result in multiple reads from the underlying input stream to decode
+     * the message properly (removing doubled dots and so on).  All of
+     * this is transparent to the programmer and is only mentioned for
+     * completeness.
+     * @return The next character in the message. Returns -1 if the end of the
+     *          message has been reached.
+     * @throws IOException If an error occurs while reading the underlying
+     *            stream.
@@ -116 +136 @@ public final class DotTerminatedMessageReader extends BufferedReader {
-                            // new Throwable("Trailing DOT CR").printStackTrace();
+                            //new Throwable("Trailing DOT CR").printStackTrace();
@@ -128 +148 @@ public final class DotTerminatedMessageReader extends BufferedReader {
-                    // new Throwable("Lone DOT followed by "+(char)chint).printStackTrace();
+                    //new Throwable("Lone DOT followed by "+(char)chint).printStackTrace();
@@ -149,6 +169,8 @@ public final class DotTerminatedMessageReader extends BufferedReader {
-     * Reads the next characters from the message into an array and returns the number of characters read. Returns -1 if the end of the message has been
-     * reached.
-     *
-     * @param buffer The character array in which to store the characters.
-     * @return The number of characters read. Returns -1 if the end of the message has been reached.
-     * @throws IOException If an error occurs in reading the underlying stream.
+     * Reads the next characters from the message into an array and
+     * returns the number of characters read.  Returns -1 if the end of the
+     * message has been reached.
+     * @param buffer  The character array in which to store the characters.
+     * @return The number of characters read. Returns -1 if the
+     *          end of the message has been reached.
+     * @throws IOException If an error occurs in reading the underlying
+     *            stream.
@@ -157 +179,2 @@ public final class DotTerminatedMessageReader extends BufferedReader {
-    public int read(final char[] buffer) throws IOException {
+    public int read(final char[] buffer) throws IOException
+    {
@@ -162,8 +185,12 @@ public final class DotTerminatedMessageReader extends BufferedReader {
-     * Reads the next characters from the message into an array and returns the number of characters read. Returns -1 if the end of the message has been
-     * reached. The characters are stored in the array starting from the given offset and up to the length specified.
-     *
-     * @param buffer The character array in which to store the characters.
-     * @param offset The offset into the array at which to start storing characters.
-     * @param length The number of characters to read.
-     * @return The number of characters read. Returns -1 if the end of the message has been reached.
-     * @throws IOException If an error occurs in reading the underlying stream.
+     * Reads the next characters from the message into an array and
+     * returns the number of characters read.  Returns -1 if the end of the
+     * message has been reached.  The characters are stored in the array
+     * starting from the given offset and up to the length specified.
+     * @param buffer  The character array in which to store the characters.
+     * @param offset   The offset into the array at which to start storing
+     *              characters.
+     * @param length   The number of characters to read.
+     * @return The number of characters read. Returns -1 if the
+     *          end of the message has been reached.
+     * @throws IOException If an error occurs in reading the underlying
+     *            stream.
@@ -172,2 +199,4 @@ public final class DotTerminatedMessageReader extends BufferedReader {
-    public int read(final char[] buffer, int offset, int length) throws IOException {
-        if (length < 1) {
+    public int read(final char[] buffer, int offset, int length) throws IOException
+    {
+        if (length < 1)
+        {
@@ -177,2 +206,4 @@ public final class DotTerminatedMessageReader extends BufferedReader {
-        synchronized (lock) {
-            if ((ch = read()) == -1) {
+        synchronized (lock)
+        {
+            if ((ch = read()) == -1)
+            {
@@ -184 +215,2 @@ public final class DotTerminatedMessageReader extends BufferedReader {
-            do {
+            do
+            {
@@ -186 +218,2 @@ public final class DotTerminatedMessageReader extends BufferedReader {
-            } while (--length > 0 && (ch = read()) != -1);
+            }
+            while (--length > 0 && (ch = read()) != -1);
@@ -193,3 +226,3 @@ public final class DotTerminatedMessageReader extends BufferedReader {
-     * Read a line of text. A line is considered to be terminated by carriage return followed immediately by a linefeed. This contrasts with BufferedReader
-     * which also allows other combinations.
-     *
+     * Read a line of text.
+     * A line is considered to be terminated by carriage return followed immediately by a linefeed.
+     * This contrasts with BufferedReader which also allows other combinations.
@@ -202,2 +235,3 @@ public final class DotTerminatedMessageReader extends BufferedReader {
-        synchronized (lock) { // make thread-safe (hopefully!)
-            while ((intch = read()) != NetConstants.EOS) {
+        synchronized(lock) { // make thread-safe (hopefully!)
+            while((intch = read()) != NetConstants.EOS)
+            {
@@ -205 +239 @@ public final class DotTerminatedMessageReader extends BufferedReader {
-                    return sb.substring(0, sb.length() - 1);
+                    return sb.substring(0, sb.length()-1);
@@ -215 +249 @@ public final class DotTerminatedMessageReader extends BufferedReader {
-        // new Throwable(string).printStackTrace();
+        //new Throwable(string).printStackTrace();
diff --git a/src/main/java/org/apache/commons/net/io/DotTerminatedMessageWriter.java b/src/main/java/org/apache/commons/net/io/DotTerminatedMessageWriter.java
index af8c38274..8f4145472 100644
--- a/src/main/java/org/apache/commons/net/io/DotTerminatedMessageWriter.java
+++ b/src/main/java/org/apache/commons/net/io/DotTerminatedMessageWriter.java
@@ -24,3 +24,6 @@ import java.io.Writer;
- * DotTerminatedMessageWriter is a class used to write messages to a server that are terminated by a single dot followed by a &lt;CR&gt;&lt;LF&gt; sequence and
- * with double dots appearing at the begining of lines which do not signal end of message yet start with a dot. Various Internet protocols such as NNTP and POP3
- * produce messages of this type.
+ * DotTerminatedMessageWriter is a class used to write messages to a
+ * server that are terminated by a single dot followed by a
+ * &lt;CR&gt;&lt;LF&gt;
+ * sequence and with double dots appearing at the begining of lines which
+ * do not signal end of message yet start with a dot.  Various Internet
+ * protocols such as NNTP and POP3 produce messages of this type.
@@ -28,2 +31,4 @@ import java.io.Writer;
- * This class handles the doubling of line-starting periods, converts single linefeeds to NETASCII newlines, and on closing will send the final message
- * terminator dot and NETASCII newline sequence.
+ * This class handles the doubling of line-starting periods,
+ * converts single linefeeds to NETASCII newlines, and on closing
+ * will send the final message terminator dot and NETASCII newline
+ * sequence.
@@ -34 +39,2 @@ import java.io.Writer;
-public final class DotTerminatedMessageWriter extends Writer {
+public final class DotTerminatedMessageWriter extends Writer
+{
@@ -41,0 +48 @@ public final class DotTerminatedMessageWriter extends Writer {
+
@@ -43 +50,2 @@ public final class DotTerminatedMessageWriter extends Writer {
-     * Creates a DotTerminatedMessageWriter that wraps an existing Writer output destination.
+     * Creates a DotTerminatedMessageWriter that wraps an existing Writer
+     * output destination.
@@ -45 +53 @@ public final class DotTerminatedMessageWriter extends Writer {
-     * @param output The Writer output destination to write the message.
+     * @param output  The Writer output destination to write the message.
@@ -47 +55,2 @@ public final class DotTerminatedMessageWriter extends Writer {
-    public DotTerminatedMessageWriter(final Writer output) {
+    public DotTerminatedMessageWriter(final Writer output)
+    {
@@ -52,0 +62 @@ public final class DotTerminatedMessageWriter extends Writer {
+
@@ -54,2 +64,3 @@ public final class DotTerminatedMessageWriter extends Writer {
-     * Flushes the underlying output, writing all buffered output, but doesn't actually close the underlying stream. The underlying stream may still be used for
-     * communicating with the server and therefore is not closed.
+     * Flushes the underlying output, writing all buffered output, but doesn't
+     * actually close the underlying stream.  The underlying stream may still
+     * be used for communicating with the server and therefore is not closed.
@@ -57 +68,2 @@ public final class DotTerminatedMessageWriter extends Writer {
-     * @throws IOException If an error occurs while writing to the underlying output or closing the Writer.
+     * @throws IOException If an error occurs while writing to the underlying
+     *            output or closing the Writer.
@@ -60,2 +72,4 @@ public final class DotTerminatedMessageWriter extends Writer {
-    public void close() throws IOException {
-        synchronized (lock) {
+    public void close() throws IOException
+    {
+        synchronized (lock)
+        {
@@ -63 +77 @@ public final class DotTerminatedMessageWriter extends Writer {
-                return;
+                return ;
@@ -78,0 +93 @@ public final class DotTerminatedMessageWriter extends Writer {
+
@@ -82 +97,2 @@ public final class DotTerminatedMessageWriter extends Writer {
-     * @throws IOException If an error occurs while writing to the underlying output.
+     * @throws IOException If an error occurs while writing to the underlying
+     *            output.
@@ -85,2 +101,4 @@ public final class DotTerminatedMessageWriter extends Writer {
-    public void flush() throws IOException {
-        synchronized (lock) {
+    public void flush() throws IOException
+    {
+        synchronized (lock)
+        {
@@ -90,0 +109 @@ public final class DotTerminatedMessageWriter extends Writer {
+
@@ -94,2 +113,3 @@ public final class DotTerminatedMessageWriter extends Writer {
-     * @param buffer The character array to write.
-     * @throws IOException If an error occurs while writing to the underlying output.
+     * @param buffer  The character array to write.
+     * @throws IOException If an error occurs while writing to the underlying
+     *            output.
@@ -98 +118,2 @@ public final class DotTerminatedMessageWriter extends Writer {
-    public void write(final char[] buffer) throws IOException {
+    public void write(final char[] buffer) throws IOException
+    {
@@ -101,0 +123 @@ public final class DotTerminatedMessageWriter extends Writer {
+
@@ -103 +125,2 @@ public final class DotTerminatedMessageWriter extends Writer {
-     * Writes a number of characters from a character array to the output starting from a given offset.
+     * Writes a number of characters from a character array to the output
+     * starting from a given offset.
@@ -105,4 +128,5 @@ public final class DotTerminatedMessageWriter extends Writer {
-     * @param buffer The character array to write.
-     * @param offset The offset into the array at which to start copying data.
-     * @param length The number of characters to write.
-     * @throws IOException If an error occurs while writing to the underlying output.
+     * @param buffer  The character array to write.
+     * @param offset  The offset into the array at which to start copying data.
+     * @param length  The number of characters to write.
+     * @throws IOException If an error occurs while writing to the underlying
+     *            output.
@@ -111,2 +135,4 @@ public final class DotTerminatedMessageWriter extends Writer {
-    public void write(final char[] buffer, int offset, int length) throws IOException {
-        synchronized (lock) {
+    public void write(final char[] buffer, int offset, int length) throws IOException
+    {
+        synchronized (lock)
+        {
@@ -118,0 +145 @@ public final class DotTerminatedMessageWriter extends Writer {
+
@@ -120,2 +147,5 @@ public final class DotTerminatedMessageWriter extends Writer {
-     * Writes a character to the output. Note that a call to this method may result in multiple writes to the underling Writer in order to convert naked
-     * linefeeds to NETASCII line separators and to double line-leading periods. This is transparent to the programmer and is only mentioned for completeness.
+     * Writes a character to the output.  Note that a call to this method
+     * may result in multiple writes to the underling Writer in order to
+     * convert naked linefeeds to NETASCII line separators and to double
+     * line-leading periods.  This is transparent to the programmer and
+     * is only mentioned for completeness.
@@ -123,2 +153,3 @@ public final class DotTerminatedMessageWriter extends Writer {
-     * @param ch The character to write.
-     * @throws IOException If an error occurs while writing to the underlying output.
+     * @param ch  The character to write.
+     * @throws IOException  If an error occurs while writing to the
+     *            underlying output.
@@ -127,3 +158,6 @@ public final class DotTerminatedMessageWriter extends Writer {
-    public void write(final int ch) throws IOException {
-        synchronized (lock) {
-            switch (ch) {
+    public void write(final int ch) throws IOException
+    {
+        synchronized (lock)
+        {
+            switch (ch)
+            {
@@ -133 +167 @@ public final class DotTerminatedMessageWriter extends Writer {
-                return;
+                return ;
@@ -140 +174 @@ public final class DotTerminatedMessageWriter extends Writer {
-                return;
+                return ;
@@ -153,0 +188 @@ public final class DotTerminatedMessageWriter extends Writer {
+
@@ -157,2 +192,3 @@ public final class DotTerminatedMessageWriter extends Writer {
-     * @param string The String to write.
-     * @throws IOException If an error occurs while writing to the underlying output.
+     * @param string  The String to write.
+     * @throws IOException If an error occurs while writing to the underlying
+     *            output.
@@ -161 +197,2 @@ public final class DotTerminatedMessageWriter extends Writer {
-    public void write(final String string) throws IOException {
+    public void write(final String string) throws IOException
+    {
@@ -164,0 +202 @@ public final class DotTerminatedMessageWriter extends Writer {
+
@@ -168,4 +206,5 @@ public final class DotTerminatedMessageWriter extends Writer {
-     * @param string The String to write.
-     * @param offset The offset into the String at which to start copying data.
-     * @param length The number of characters to write.
-     * @throws IOException If an error occurs while writing to the underlying output.
+     * @param string  The String to write.
+     * @param offset  The offset into the String at which to start copying data.
+     * @param length  The number of characters to write.
+     * @throws IOException If an error occurs while writing to the underlying
+     *            output.
@@ -174 +213,2 @@ public final class DotTerminatedMessageWriter extends Writer {
-    public void write(final String string, final int offset, final int length) throws IOException {
+    public void write(final String string, final int offset, final int length) throws IOException
+    {
diff --git a/src/main/java/org/apache/commons/net/io/FromNetASCIIInputStream.java b/src/main/java/org/apache/commons/net/io/FromNetASCIIInputStream.java
index 8da6e78f8..654d778e6 100644
--- a/src/main/java/org/apache/commons/net/io/FromNetASCIIInputStream.java
+++ b/src/main/java/org/apache/commons/net/io/FromNetASCIIInputStream.java
@@ -28,3 +28,5 @@ import org.apache.commons.net.util.NetConstants;
- * This class wraps an input stream, replacing all occurrences of &lt;CR&gt;&lt;LF&gt; (carriage return followed by a linefeed), which is the NETASCII standard
- * for representing a newline, with the local line separator representation. You would use this class to implement ASCII file transfers requiring conversion
- * from NETASCII.
+ * This class wraps an input stream, replacing all occurrences
+ * of &lt;CR&gt;&lt;LF&gt; (carriage return followed by a linefeed),
+ * which is the NETASCII standard for representing a newline, with the
+ * local line separator representation.  You would use this class to
+ * implement ASCII file transfers requiring conversion from NETASCII.
@@ -35 +37,2 @@ import org.apache.commons.net.util.NetConstants;
-public final class FromNetASCIIInputStream extends PushbackInputStream {
+public final class FromNetASCIIInputStream extends PushbackInputStream
+{
@@ -47,2 +50,4 @@ public final class FromNetASCIIInputStream extends PushbackInputStream {
-     * Returns true if the NetASCII line separator differs from the system line separator, false if they are the same. This method is useful to determine
-     * whether or not you need to instantiate a FromNetASCIIInputStream object.
+     * Returns true if the NetASCII line separator differs from the system
+     * line separator, false if they are the same.  This method is useful
+     * to determine whether or not you need to instantiate a
+     * FromNetASCIIInputStream object.
@@ -50 +55,2 @@ public final class FromNetASCIIInputStream extends PushbackInputStream {
-     * @return True if the NETASCII line separator differs from the local system line separator, false if they are the same.
+     * @return True if the NETASCII line separator differs from the local
+     *   system line separator, false if they are the same.
@@ -52 +58,2 @@ public final class FromNetASCIIInputStream extends PushbackInputStream {
-    public static boolean isConversionRequired() {
+    public static boolean isConversionRequired()
+    {
@@ -59,2 +66,2 @@ public final class FromNetASCIIInputStream extends PushbackInputStream {
-     * Creates a FromNetASCIIInputStream instance that wraps an existing InputStream.
-     *
+     * Creates a FromNetASCIIInputStream instance that wraps an existing
+     * InputStream.
@@ -63 +70,2 @@ public final class FromNetASCIIInputStream extends PushbackInputStream {
-    public FromNetASCIIInputStream(final InputStream input) {
+    public FromNetASCIIInputStream(final InputStream input)
+    {
@@ -66,0 +75 @@ public final class FromNetASCIIInputStream extends PushbackInputStream {
+
@@ -70,2 +79,5 @@ public final class FromNetASCIIInputStream extends PushbackInputStream {
-     * Returns the number of bytes that can be read without blocking EXCEPT when newline conversions have to be made somewhere within the available block of
-     * bytes. In other words, you really should not rely on the value returned by this method if you are trying to avoid blocking.
+     * Returns the number of bytes that can be read without blocking EXCEPT
+     * when newline conversions have to be made somewhere within the
+     * available block of bytes.  In other words, you really should not
+     * rely on the value returned by this method if you are trying to avoid
+     * blocking.
@@ -74 +86,2 @@ public final class FromNetASCIIInputStream extends PushbackInputStream {
-    public int available() throws IOException {
+    public int available() throws IOException
+    {
@@ -80,0 +94 @@ public final class FromNetASCIIInputStream extends PushbackInputStream {
+
@@ -82,3 +96,6 @@ public final class FromNetASCIIInputStream extends PushbackInputStream {
-     * Reads and returns the next byte in the stream. If the end of the message has been reached, returns -1. Note that a call to this method may result in
-     * multiple reads from the underlying input stream in order to convert NETASCII line separators to the local line separator format. This is transparent to
-     * the programmer and is only mentioned for completeness.
+     * Reads and returns the next byte in the stream.  If the end of the
+     * message has been reached, returns -1.  Note that a call to this method
+     * may result in multiple reads from the underlying input stream in order
+     * to convert NETASCII line separators to the local line separator format.
+     * This is transparent to the programmer and is only mentioned for
+     * completeness.
@@ -86,2 +103,4 @@ public final class FromNetASCIIInputStream extends PushbackInputStream {
-     * @return The next character in the stream. Returns -1 if the end of the stream has been reached.
-     * @throws IOException If an error occurs while reading the underlying stream.
+     * @return The next character in the stream. Returns -1 if the end of the
+     *          stream has been reached.
+     * @throws IOException If an error occurs while reading the underlying
+     *            stream.
@@ -90 +109,2 @@ public final class FromNetASCIIInputStream extends PushbackInputStream {
-    public int read() throws IOException {
+    public int read() throws IOException
+    {
@@ -97,0 +118 @@ public final class FromNetASCIIInputStream extends PushbackInputStream {
+
@@ -99 +120,3 @@ public final class FromNetASCIIInputStream extends PushbackInputStream {
-     * Reads the next number of bytes from the stream into an array and returns the number of bytes read. Returns -1 if the end of the stream has been reached.
+     * Reads the next number of bytes from the stream into an array and
+     * returns the number of bytes read.  Returns -1 if the end of the
+     * stream has been reached.
@@ -101,3 +124,5 @@ public final class FromNetASCIIInputStream extends PushbackInputStream {
-     * @param buffer The byte array in which to store the data.
-     * @return The number of bytes read. Returns -1 if the end of the message has been reached.
-     * @throws IOException If an error occurs in reading the underlying stream.
+     * @param buffer  The byte array in which to store the data.
+     * @return The number of bytes read. Returns -1 if the
+     *          end of the message has been reached.
+     * @throws IOException If an error occurs in reading the underlying
+     *            stream.
@@ -106 +131,2 @@ public final class FromNetASCIIInputStream extends PushbackInputStream {
-    public int read(final byte buffer[]) throws IOException {
+    public int read(final byte buffer[]) throws IOException
+    {
@@ -109,0 +136 @@ public final class FromNetASCIIInputStream extends PushbackInputStream {
+
@@ -111,2 +138,4 @@ public final class FromNetASCIIInputStream extends PushbackInputStream {
-     * Reads the next number of bytes from the stream into an array and returns the number of bytes read. Returns -1 if the end of the message has been reached.
-     * The characters are stored in the array starting from the given offset and up to the length specified.
+     * Reads the next number of bytes from the stream into an array and returns
+     * the number of bytes read.  Returns -1 if the end of the
+     * message has been reached.  The characters are stored in the array
+     * starting from the given offset and up to the length specified.
@@ -115,4 +144,6 @@ public final class FromNetASCIIInputStream extends PushbackInputStream {
-     * @param offset The offset into the array at which to start storing data.
-     * @param length The number of bytes to read.
-     * @return The number of bytes read. Returns -1 if the end of the stream has been reached.
-     * @throws IOException If an error occurs while reading the underlying stream.
+     * @param offset  The offset into the array at which to start storing data.
+     * @param length   The number of bytes to read.
+     * @return The number of bytes read. Returns -1 if the
+     *          end of the stream has been reached.
+     * @throws IOException If an error occurs while reading the underlying
+     *            stream.
@@ -121 +152,2 @@ public final class FromNetASCIIInputStream extends PushbackInputStream {
-    public int read(final byte buffer[], int offset, final int length) throws IOException {
+    public int read(final byte buffer[], int offset, final int length) throws IOException
+    {
@@ -141,0 +174 @@ public final class FromNetASCIIInputStream extends PushbackInputStream {
+
@@ -148,3 +181,6 @@ public final class FromNetASCIIInputStream extends PushbackInputStream {
-        do {
-            buffer[offset++] = (byte) ch;
-        } while (--this.length > 0 && (ch = readInt()) != -1);
+        do
+        {
+            buffer[offset++] = (byte)ch;
+        }
+        while (--this.length > 0 && (ch = readInt()) != -1);
+
@@ -155 +191,3 @@ public final class FromNetASCIIInputStream extends PushbackInputStream {
-    private int readInt() throws IOException {
+
+    private int readInt() throws IOException
+    {
@@ -160 +198,2 @@ public final class FromNetASCIIInputStream extends PushbackInputStream {
-        if (ch == '\r') {
+        if (ch == '\r')
+        {
diff --git a/src/main/java/org/apache/commons/net/io/FromNetASCIIOutputStream.java b/src/main/java/org/apache/commons/net/io/FromNetASCIIOutputStream.java
index d1868b9ee..cab6e7492 100644
--- a/src/main/java/org/apache/commons/net/io/FromNetASCIIOutputStream.java
+++ b/src/main/java/org/apache/commons/net/io/FromNetASCIIOutputStream.java
@@ -25,3 +25,5 @@ import java.io.OutputStream;
- * This class wraps an output stream, replacing all occurrences of &lt;CR&gt;&lt;LF&gt; (carriage return followed by a linefeed), which is the NETASCII standard
- * for representing a newline, with the local line separator representation. You would use this class to implement ASCII file transfers requiring conversion
- * from NETASCII.
+ * This class wraps an output stream, replacing all occurrences
+ * of &lt;CR&gt;&lt;LF&gt; (carriage return followed by a linefeed),
+ * which is the NETASCII standard for representing a newline, with the
+ * local line separator representation.  You would use this class to
+ * implement ASCII file transfers requiring conversion from NETASCII.
@@ -29,2 +31,4 @@ import java.io.OutputStream;
- * Because of the translation process, a call to <code>flush()</code> will not flush the last byte written if that byte was a carriage return. A call to
- * {@link #close close() }, however, will flush the carriage return.
+ * Because of the translation process, a call to <code>flush()</code> will
+ * not flush the last byte written if that byte was a carriage
+ * return.  A call to {@link #close  close() }, however, will
+ * flush the carriage return.
@@ -35 +39,2 @@ import java.io.OutputStream;
-public final class FromNetASCIIOutputStream extends FilterOutputStream {
+public final class FromNetASCIIOutputStream extends FilterOutputStream
+{
@@ -39 +44,2 @@ public final class FromNetASCIIOutputStream extends FilterOutputStream {
-     * Creates a FromNetASCIIOutputStream instance that wraps an existing OutputStream.
+     * Creates a FromNetASCIIOutputStream instance that wraps an existing
+     * OutputStream.
@@ -41 +47 @@ public final class FromNetASCIIOutputStream extends FilterOutputStream {
-     * @param output The OutputStream to wrap.
+     * @param output  The OutputStream to wrap.
@@ -43 +49,2 @@ public final class FromNetASCIIOutputStream extends FilterOutputStream {
-    public FromNetASCIIOutputStream(final OutputStream output) {
+    public FromNetASCIIOutputStream(final OutputStream output)
+    {
@@ -47,0 +55 @@ public final class FromNetASCIIOutputStream extends FilterOutputStream {
+
@@ -51 +59 @@ public final class FromNetASCIIOutputStream extends FilterOutputStream {
-     * @throws IOException If an error occurs while closing the stream.
+     * @throws IOException  If an error occurs while closing the stream.
@@ -54,2 +62,5 @@ public final class FromNetASCIIOutputStream extends FilterOutputStream {
-    public synchronized void close() throws IOException {
-        if (FromNetASCIIInputStream._noConversionRequired) {
+    public synchronized void close()
+    throws IOException
+    {
+        if (FromNetASCIIInputStream._noConversionRequired)
+        {
@@ -57 +68 @@ public final class FromNetASCIIOutputStream extends FilterOutputStream {
-            return;
+            return ;
@@ -65,0 +77 @@ public final class FromNetASCIIOutputStream extends FilterOutputStream {
+
@@ -69,2 +81,3 @@ public final class FromNetASCIIOutputStream extends FilterOutputStream {
-     * @param buffer The byte array to write.
-     * @throws IOException If an error occurs while writing to the underlying stream.
+     * @param buffer  The byte array to write.
+     * @throws IOException If an error occurs while writing to the underlying
+     *            stream.
@@ -73 +86,3 @@ public final class FromNetASCIIOutputStream extends FilterOutputStream {
-    public synchronized void write(final byte buffer[]) throws IOException {
+    public synchronized void write(final byte buffer[])
+    throws IOException
+    {
@@ -76,0 +92 @@ public final class FromNetASCIIOutputStream extends FilterOutputStream {
+
@@ -78 +94,2 @@ public final class FromNetASCIIOutputStream extends FilterOutputStream {
-     * Writes a number of bytes from a byte array to the stream starting from a given offset.
+     * Writes a number of bytes from a byte array to the stream starting from
+     * a given offset.
@@ -80,4 +97,5 @@ public final class FromNetASCIIOutputStream extends FilterOutputStream {
-     * @param buffer The byte array to write.
-     * @param offset The offset into the array at which to start copying data.
-     * @param length The number of bytes to write.
-     * @throws IOException If an error occurs while writing to the underlying stream.
+     * @param buffer  The byte array to write.
+     * @param offset  The offset into the array at which to start copying data.
+     * @param length  The number of bytes to write.
+     * @throws IOException If an error occurs while writing to the underlying
+     *            stream.
@@ -86,2 +104,5 @@ public final class FromNetASCIIOutputStream extends FilterOutputStream {
-    public synchronized void write(final byte buffer[], int offset, int length) throws IOException {
-        if (FromNetASCIIInputStream._noConversionRequired) {
+    public synchronized void write(final byte buffer[], int offset, int length)
+    throws IOException
+    {
+        if (FromNetASCIIInputStream._noConversionRequired)
+        {
@@ -89 +110 @@ public final class FromNetASCIIOutputStream extends FilterOutputStream {
-            // super.write(buffer, offset, length);
+            //super.write(buffer, offset, length);
@@ -91 +112 @@ public final class FromNetASCIIOutputStream extends FilterOutputStream {
-            return;
+            return ;
@@ -98,0 +120 @@ public final class FromNetASCIIOutputStream extends FilterOutputStream {
+
@@ -100,2 +122,5 @@ public final class FromNetASCIIOutputStream extends FilterOutputStream {
-     * Writes a byte to the stream. Note that a call to this method might not actually write a byte to the underlying stream until a subsequent character is
-     * written, from which it can be determined if a NETASCII line separator was encountered. This is transparent to the programmer and is only mentioned for
+     * Writes a byte to the stream.    Note that a call to this method
+     * might not actually write a byte to the underlying stream until a
+     * subsequent character is written, from which it can be determined if
+     * a NETASCII line separator was encountered.
+     * This is transparent to the programmer and is only mentioned for
@@ -105 +130,2 @@ public final class FromNetASCIIOutputStream extends FilterOutputStream {
-     * @throws IOException If an error occurs while writing to the underlying stream.
+     * @throws IOException If an error occurs while writing to the underlying
+     *            stream.
@@ -108,2 +134,5 @@ public final class FromNetASCIIOutputStream extends FilterOutputStream {
-    public synchronized void write(final int ch) throws IOException {
-        if (FromNetASCIIInputStream._noConversionRequired) {
+    public synchronized void write(final int ch)
+    throws IOException
+    {
+        if (FromNetASCIIInputStream._noConversionRequired)
+        {
@@ -111 +140 @@ public final class FromNetASCIIOutputStream extends FilterOutputStream {
-            return;
+            return ;
@@ -117,2 +146,5 @@ public final class FromNetASCIIOutputStream extends FilterOutputStream {
-    private void writeInt(final int ch) throws IOException {
-        switch (ch) {
+
+    private void writeInt(final int ch) throws IOException
+    {
+        switch (ch)
+        {
@@ -121 +153 @@ public final class FromNetASCIIOutputStream extends FilterOutputStream {
-            // Don't write anything. We need to see if next one is linefeed
+            // Don't write anything.  We need to see if next one is linefeed
@@ -124 +156,2 @@ public final class FromNetASCIIOutputStream extends FilterOutputStream {
-            if (lastWasCR) {
+            if (lastWasCR)
+            {
@@ -132 +165,2 @@ public final class FromNetASCIIOutputStream extends FilterOutputStream {
-            if (lastWasCR) {
+            if (lastWasCR)
+            {
diff --git a/src/main/java/org/apache/commons/net/io/SocketInputStream.java b/src/main/java/org/apache/commons/net/io/SocketInputStream.java
index f21eb40d8..14a39c0a1 100644
--- a/src/main/java/org/apache/commons/net/io/SocketInputStream.java
+++ b/src/main/java/org/apache/commons/net/io/SocketInputStream.java
@@ -26,3 +26,6 @@ import java.net.Socket;
- * This class wraps an input stream, storing a reference to its originating socket. When the stream is closed, it will also close the socket immediately
- * afterward. This class is useful for situations where you are dealing with a stream originating from a socket, but do not have a reference to the socket, and
- * want to make sure it closes when the stream closes.
+ * This class wraps an input stream, storing a reference to its originating
+ * socket.  When the stream is closed, it will also close the socket
+ * immediately afterward.  This class is useful for situations where you
+ * are dealing with a stream originating from a socket, but do not have
+ * a reference to the socket, and want to make sure it closes when the
+ * stream closes.
@@ -34 +37,2 @@ import java.net.Socket;
-public class SocketInputStream extends FilterInputStream {
+public class SocketInputStream extends FilterInputStream
+{
@@ -38 +42,3 @@ public class SocketInputStream extends FilterInputStream {
-     * Creates a SocketInputStream instance wrapping an input stream and storing a reference to a socket that should be closed on closing the stream.
+     * Creates a SocketInputStream instance wrapping an input stream and
+     * storing a reference to a socket that should be closed on closing
+     * the stream.
@@ -40,2 +46,2 @@ public class SocketInputStream extends FilterInputStream {
-     * @param socket The socket to close on closing the stream.
-     * @param stream The input stream to wrap.
+     * @param socket  The socket to close on closing the stream.
+     * @param stream  The input stream to wrap.
@@ -43 +49,2 @@ public class SocketInputStream extends FilterInputStream {
-    public SocketInputStream(final Socket socket, final InputStream stream) {
+    public SocketInputStream(final Socket socket, final InputStream stream)
+    {
@@ -49 +56,2 @@ public class SocketInputStream extends FilterInputStream {
-     * Closes the stream and immediately afterward closes the referenced socket.
+     * Closes the stream and immediately afterward closes the referenced
+     * socket.
@@ -51 +59,2 @@ public class SocketInputStream extends FilterInputStream {
-     * @throws IOException If there is an error in closing the stream or socket.
+     * @throws IOException  If there is an error in closing the stream
+     *                         or socket.
@@ -54 +63,2 @@ public class SocketInputStream extends FilterInputStream {
-    public void close() throws IOException {
+    public void close() throws IOException
+    {
diff --git a/src/main/java/org/apache/commons/net/io/SocketOutputStream.java b/src/main/java/org/apache/commons/net/io/SocketOutputStream.java
index 8d4eb5213..9d8475a1c 100644
--- a/src/main/java/org/apache/commons/net/io/SocketOutputStream.java
+++ b/src/main/java/org/apache/commons/net/io/SocketOutputStream.java
@@ -26,3 +26,6 @@ import java.net.Socket;
- * This class wraps an output stream, storing a reference to its originating socket. When the stream is closed, it will also close the socket immediately
- * afterward. This class is useful for situations where you are dealing with a stream originating from a socket, but do not have a reference to the socket, and
- * want to make sure it closes when the stream closes.
+ * This class wraps an output stream, storing a reference to its originating
+ * socket.  When the stream is closed, it will also close the socket
+ * immediately afterward.  This class is useful for situations where you
+ * are dealing with a stream originating from a socket, but do not have
+ * a reference to the socket, and want to make sure it closes when the
+ * stream closes.
@@ -34 +37,2 @@ import java.net.Socket;
-public class SocketOutputStream extends FilterOutputStream {
+public class SocketOutputStream extends FilterOutputStream
+{
@@ -38 +42,3 @@ public class SocketOutputStream extends FilterOutputStream {
-     * Creates a SocketOutputStream instance wrapping an output stream and storing a reference to a socket that should be closed on closing the stream.
+     * Creates a SocketOutputStream instance wrapping an output stream and
+     * storing a reference to a socket that should be closed on closing
+     * the stream.
@@ -40,2 +46,2 @@ public class SocketOutputStream extends FilterOutputStream {
-     * @param socket The socket to close on closing the stream.
-     * @param stream The input stream to wrap.
+     * @param socket  The socket to close on closing the stream.
+     * @param stream  The input stream to wrap.
@@ -43 +49,2 @@ public class SocketOutputStream extends FilterOutputStream {
-    public SocketOutputStream(final Socket socket, final OutputStream stream) {
+    public SocketOutputStream(final Socket socket, final OutputStream stream)
+    {
@@ -47,0 +55 @@ public class SocketOutputStream extends FilterOutputStream {
+
@@ -49 +57,2 @@ public class SocketOutputStream extends FilterOutputStream {
-     * Closes the stream and immediately afterward closes the referenced socket.
+     * Closes the stream and immediately afterward closes the referenced
+     * socket.
@@ -51 +60,2 @@ public class SocketOutputStream extends FilterOutputStream {
-     * @throws IOException If there is an error in closing the stream or socket.
+     * @throws IOException  If there is an error in closing the stream
+     *                         or socket.
@@ -54 +64,2 @@ public class SocketOutputStream extends FilterOutputStream {
-    public void close() throws IOException {
+    public void close() throws IOException
+    {
@@ -58,0 +70 @@ public class SocketOutputStream extends FilterOutputStream {
+
@@ -60,2 +72,4 @@ public class SocketOutputStream extends FilterOutputStream {
-     * Writes a number of bytes from a byte array to the stream starting from a given offset. This method bypasses the equivalent method in FilterOutputStream
-     * because the FilterOutputStream implementation is very inefficient.
+     * Writes a number of bytes from a byte array to the stream starting from
+     * a given offset.  This method bypasses the equivalent method in
+     * FilterOutputStream because the FilterOutputStream implementation is
+     * very inefficient.
@@ -63,4 +77,5 @@ public class SocketOutputStream extends FilterOutputStream {
-     * @param buffer The byte array to write.
-     * @param offset The offset into the array at which to start copying data.
-     * @param length The number of bytes to write.
-     * @throws IOException If an error occurs while writing to the underlying stream.
+     * @param buffer  The byte array to write.
+     * @param offset  The offset into the array at which to start copying data.
+     * @param length  The number of bytes to write.
+     * @throws IOException If an error occurs while writing to the underlying
+     *            stream.
@@ -69 +84,2 @@ public class SocketOutputStream extends FilterOutputStream {
-    public void write(final byte buffer[], final int offset, final int length) throws IOException {
+    public void write(final byte buffer[], final int offset, final int length) throws IOException
+    {
diff --git a/src/main/java/org/apache/commons/net/io/ToNetASCIIInputStream.java b/src/main/java/org/apache/commons/net/io/ToNetASCIIInputStream.java
index 3af2bc5ee..0b02d339f 100644
--- a/src/main/java/org/apache/commons/net/io/ToNetASCIIInputStream.java
+++ b/src/main/java/org/apache/commons/net/io/ToNetASCIIInputStream.java
@@ -27,3 +27,6 @@ import org.apache.commons.net.util.NetConstants;
- * This class wraps an input stream, replacing all singly occurring &lt;LF&gt; (linefeed) characters with &lt;CR&gt;&lt;LF&gt; (carriage return followed by
- * linefeed), which is the NETASCII standard for representing a newline. You would use this class to implement ASCII file transfers requiring conversion to
- * NETASCII.
+ * This class wraps an input stream, replacing all singly occurring
+ * &lt;LF&gt; (linefeed) characters with &lt;CR&gt;&lt;LF&gt; (carriage return
+ * followed by linefeed), which is the NETASCII standard for representing
+ * a newline.
+ * You would use this class to implement ASCII file transfers requiring
+ * conversion to NETASCII.
@@ -34 +37,2 @@ import org.apache.commons.net.util.NetConstants;
-public final class ToNetASCIIInputStream extends FilterInputStream {
+public final class ToNetASCIIInputStream extends FilterInputStream
+{
@@ -41 +45,2 @@ public final class ToNetASCIIInputStream extends FilterInputStream {
-     * Creates a ToNetASCIIInputStream instance that wraps an existing InputStream.
+     * Creates a ToNetASCIIInputStream instance that wraps an existing
+     * InputStream.
@@ -43 +48 @@ public final class ToNetASCIIInputStream extends FilterInputStream {
-     * @param input The InputStream to wrap.
+     * @param input  The InputStream to wrap.
@@ -45 +50,2 @@ public final class ToNetASCIIInputStream extends FilterInputStream {
-    public ToNetASCIIInputStream(final InputStream input) {
+    public ToNetASCIIInputStream(final InputStream input)
+    {
@@ -49,0 +56 @@ public final class ToNetASCIIInputStream extends FilterInputStream {
+
@@ -51 +58,2 @@ public final class ToNetASCIIInputStream extends FilterInputStream {
-    public int available() throws IOException {
+    public int available() throws IOException
+    {
@@ -63 +71,2 @@ public final class ToNetASCIIInputStream extends FilterInputStream {
-    /** Returns false. Mark is not supported. */
+
+    /** Returns false.  Mark is not supported. */
@@ -65 +74,2 @@ public final class ToNetASCIIInputStream extends FilterInputStream {
-    public boolean markSupported() {
+    public boolean markSupported()
+    {
@@ -68,0 +79 @@ public final class ToNetASCIIInputStream extends FilterInputStream {
+
@@ -70 +81,2 @@ public final class ToNetASCIIInputStream extends FilterInputStream {
-     * Reads and returns the next byte in the stream. If the end of the message has been reached, returns -1.
+     * Reads and returns the next byte in the stream.  If the end of the
+     * message has been reached, returns -1.
@@ -72,2 +84,4 @@ public final class ToNetASCIIInputStream extends FilterInputStream {
-     * @return The next character in the stream. Returns -1 if the end of the stream has been reached.
-     * @throws IOException If an error occurs while reading the underlying stream.
+     * @return The next character in the stream. Returns -1 if the end of the
+     *          stream has been reached.
+     * @throws IOException If an error occurs while reading the underlying
+     *            stream.
@@ -76 +90,2 @@ public final class ToNetASCIIInputStream extends FilterInputStream {
-    public int read() throws IOException {
+    public int read() throws IOException
+    {
@@ -79 +94,2 @@ public final class ToNetASCIIInputStream extends FilterInputStream {
-        if (status == LAST_WAS_NL) {
+        if (status == LAST_WAS_NL)
+        {
@@ -86 +102,2 @@ public final class ToNetASCIIInputStream extends FilterInputStream {
-        switch (ch) {
+        switch (ch)
+        {
@@ -91 +108,2 @@ public final class ToNetASCIIInputStream extends FilterInputStream {
-            if (status != LAST_WAS_CR) {
+            if (status != LAST_WAS_CR)
+            {
@@ -101 +119 @@ public final class ToNetASCIIInputStream extends FilterInputStream {
-        // return ch;
+        //return ch;
@@ -105 +123,3 @@ public final class ToNetASCIIInputStream extends FilterInputStream {
-     * Reads the next number of bytes from the stream into an array and returns the number of bytes read. Returns -1 if the end of the stream has been reached.
+     * Reads the next number of bytes from the stream into an array and
+     * returns the number of bytes read.  Returns -1 if the end of the
+     * stream has been reached.
@@ -107,3 +127,5 @@ public final class ToNetASCIIInputStream extends FilterInputStream {
-     * @param buffer The byte array in which to store the data.
-     * @return The number of bytes read. Returns -1 if the end of the message has been reached.
-     * @throws IOException If an error occurs in reading the underlying stream.
+     * @param buffer  The byte array in which to store the data.
+     * @return The number of bytes read. Returns -1 if the
+     *          end of the message has been reached.
+     * @throws IOException If an error occurs in reading the underlying
+     *            stream.
@@ -112 +134,2 @@ public final class ToNetASCIIInputStream extends FilterInputStream {
-    public int read(final byte[] buffer) throws IOException {
+    public int read(final byte[] buffer) throws IOException
+    {
@@ -117,2 +140,4 @@ public final class ToNetASCIIInputStream extends FilterInputStream {
-     * Reads the next number of bytes from the stream into an array and returns the number of bytes read. Returns -1 if the end of the message has been reached.
-     * The characters are stored in the array starting from the given offset and up to the length specified.
+     * Reads the next number of bytes from the stream into an array and returns
+     * the number of bytes read.  Returns -1 if the end of the
+     * message has been reached.  The characters are stored in the array
+     * starting from the given offset and up to the length specified.
@@ -121,4 +146,6 @@ public final class ToNetASCIIInputStream extends FilterInputStream {
-     * @param offset The offset into the array at which to start storing data.
-     * @param length The number of bytes to read.
-     * @return The number of bytes read. Returns -1 if the end of the stream has been reached.
-     * @throws IOException If an error occurs while reading the underlying stream.
+     * @param offset  The offset into the array at which to start storing data.
+     * @param length   The number of bytes to read.
+     * @return The number of bytes read. Returns -1 if the
+     *          end of the stream has been reached.
+     * @throws IOException If an error occurs while reading the underlying
+     *            stream.
@@ -127 +154,2 @@ public final class ToNetASCIIInputStream extends FilterInputStream {
-    public int read(final byte[] buffer, int offset, int length) throws IOException {
+    public int read(final byte[] buffer, int offset, int length) throws IOException
+    {
@@ -152,3 +180,5 @@ public final class ToNetASCIIInputStream extends FilterInputStream {
-        do {
-            buffer[offset++] = (byte) ch;
-        } while (--length > 0 && (ch = read()) != NetConstants.EOS);
+        do
+        {
+            buffer[offset++] = (byte)ch;
+        }
+        while (--length > 0 && (ch = read()) != NetConstants.EOS);
diff --git a/src/main/java/org/apache/commons/net/io/ToNetASCIIOutputStream.java b/src/main/java/org/apache/commons/net/io/ToNetASCIIOutputStream.java
index 5a94e3609..1292ff13a 100644
--- a/src/main/java/org/apache/commons/net/io/ToNetASCIIOutputStream.java
+++ b/src/main/java/org/apache/commons/net/io/ToNetASCIIOutputStream.java
@@ -25,3 +25,6 @@ import java.io.OutputStream;
- * This class wraps an output stream, replacing all singly occurring &lt;LF&gt; (linefeed) characters with &lt;CR&gt;&lt;LF&gt; (carriage return followed by
- * linefeed), which is the NETASCII standard for representing a newline. You would use this class to implement ASCII file transfers requiring conversion to
- * NETASCII.
+ * This class wraps an output stream, replacing all singly occurring
+ * &lt;LF&gt; (linefeed) characters with &lt;CR&gt;&lt;LF&gt; (carriage return
+ * followed by linefeed), which is the NETASCII standard for representing
+ * a newline.
+ * You would use this class to implement ASCII file transfers requiring
+ * conversion to NETASCII.
@@ -32 +35,2 @@ import java.io.OutputStream;
-public final class ToNetASCIIOutputStream extends FilterOutputStream {
+public final class ToNetASCIIOutputStream extends FilterOutputStream
+{
@@ -36 +40,2 @@ public final class ToNetASCIIOutputStream extends FilterOutputStream {
-     * Creates a ToNetASCIIOutputStream instance that wraps an existing OutputStream.
+     * Creates a ToNetASCIIOutputStream instance that wraps an existing
+     * OutputStream.
@@ -38 +43 @@ public final class ToNetASCIIOutputStream extends FilterOutputStream {
-     * @param output The OutputStream to wrap.
+     * @param output  The OutputStream to wrap.
@@ -40 +45,2 @@ public final class ToNetASCIIOutputStream extends FilterOutputStream {
-    public ToNetASCIIOutputStream(final OutputStream output) {
+    public ToNetASCIIOutputStream(final OutputStream output)
+    {
@@ -44,0 +51 @@ public final class ToNetASCIIOutputStream extends FilterOutputStream {
+
@@ -48,2 +55,3 @@ public final class ToNetASCIIOutputStream extends FilterOutputStream {
-     * @param buffer The byte array to write.
-     * @throws IOException If an error occurs while writing to the underlying stream.
+     * @param buffer  The byte array to write.
+     * @throws IOException If an error occurs while writing to the underlying
+     *            stream.
@@ -52 +60,3 @@ public final class ToNetASCIIOutputStream extends FilterOutputStream {
-    public synchronized void write(final byte buffer[]) throws IOException {
+    public synchronized void write(final byte buffer[])
+    throws IOException
+    {
@@ -55,0 +66 @@ public final class ToNetASCIIOutputStream extends FilterOutputStream {
+
@@ -57 +68,2 @@ public final class ToNetASCIIOutputStream extends FilterOutputStream {
-     * Writes a number of bytes from a byte array to the stream starting from a given offset.
+     * Writes a number of bytes from a byte array to the stream starting from
+     * a given offset.
@@ -59,4 +71,5 @@ public final class ToNetASCIIOutputStream extends FilterOutputStream {
-     * @param buffer The byte array to write.
-     * @param offset The offset into the array at which to start copying data.
-     * @param length The number of bytes to write.
-     * @throws IOException If an error occurs while writing to the underlying stream.
+     * @param buffer  The byte array to write.
+     * @param offset  The offset into the array at which to start copying data.
+     * @param length  The number of bytes to write.
+     * @throws IOException If an error occurs while writing to the underlying
+     *            stream.
@@ -65 +78,3 @@ public final class ToNetASCIIOutputStream extends FilterOutputStream {
-    public synchronized void write(final byte buffer[], int offset, int length) throws IOException {
+    public synchronized void write(final byte buffer[], int offset, int length)
+    throws IOException
+    {
@@ -70,0 +86 @@ public final class ToNetASCIIOutputStream extends FilterOutputStream {
+
@@ -72,2 +88,5 @@ public final class ToNetASCIIOutputStream extends FilterOutputStream {
-     * Writes a byte to the stream. Note that a call to this method may result in multiple writes to the underlying input stream in order to convert naked
-     * newlines to NETASCII line separators. This is transparent to the programmer and is only mentioned for completeness.
+     * Writes a byte to the stream.    Note that a call to this method
+     * may result in multiple writes to the underlying input stream in order
+     * to convert naked newlines to NETASCII line separators.
+     * This is transparent to the programmer and is only mentioned for
+     * completeness.
@@ -76 +95,2 @@ public final class ToNetASCIIOutputStream extends FilterOutputStream {
-     * @throws IOException If an error occurs while writing to the underlying stream.
+     * @throws IOException If an error occurs while writing to the underlying
+     *            stream.
@@ -79,2 +99,5 @@ public final class ToNetASCIIOutputStream extends FilterOutputStream {
-    public synchronized void write(final int ch) throws IOException {
-        switch (ch) {
+    public synchronized void write(final int ch)
+    throws IOException
+    {
+        switch (ch)
+        {
@@ -84 +107 @@ public final class ToNetASCIIOutputStream extends FilterOutputStream {
-            return;
+            return ;
diff --git a/src/main/java/org/apache/commons/net/io/Util.java b/src/main/java/org/apache/commons/net/io/Util.java
index ef8f2b8f5..c452a08d7 100644
--- a/src/main/java/org/apache/commons/net/io/Util.java
+++ b/src/main/java/org/apache/commons/net/io/Util.java
@@ -31 +31,2 @@ import org.apache.commons.net.util.NetConstants;
- * The Util class cannot be instantiated and stores short static convenience methods that are often quite useful.
+ * The Util class cannot be instantiated and stores short static convenience
+ * methods that are often quite useful.
@@ -39 +40,2 @@ import org.apache.commons.net.util.NetConstants;
-public final class Util {
+public final class Util
+{
@@ -41,2 +43,3 @@ public final class Util {
-     * The default buffer size ({@value}) used by {@link #copyStream copyStream } and {@link #copyReader copyReader} and by the copyReader/copyStream methods if
-     * a zero or negative buffer size is supplied.
+     * The default buffer size ({@value}) used by
+     * {@link #copyStream  copyStream } and {@link #copyReader  copyReader}
+     * and by the copyReader/copyStream methods if a zero or negative buffer size is supplied.
@@ -47 +50,2 @@ public final class Util {
-     * Closes the object quietly, catching rather than throwing IOException. Intended for use from finally blocks.
+     * Closes the object quietly, catching rather than throwing IOException.
+     * Intended for use from finally blocks.
@@ -61,0 +66 @@ public final class Util {
+
@@ -63 +68,2 @@ public final class Util {
-     * Closes the socket quietly, catching rather than throwing IOException. Intended for use from finally blocks.
+     * Closes the socket quietly, catching rather than throwing IOException.
+     * Intended for use from finally blocks.
@@ -77,0 +84 @@ public final class Util {
+
@@ -80 +86,0 @@ public final class Util {
-     *
@@ -82 +88 @@ public final class Util {
-     * @param dest   where to copy to
+     * @param dest  where to copy to
@@ -86 +92,3 @@ public final class Util {
-    public static long copyReader(final Reader source, final Writer dest) throws CopyStreamException {
+    public static long copyReader(final Reader source, final Writer dest)
+    throws CopyStreamException
+    {
@@ -89,0 +98 @@ public final class Util {
+
@@ -91,3 +100,5 @@ public final class Util {
-     * Copies the contents of a Reader to a Writer using a copy buffer of a given size. The contents of the Reader are read until its end is reached, but
-     * neither the source nor the destination are closed. You must do this yourself outside of the method call. The number of characters read/written is
-     * returned.
+     * Copies the contents of a Reader to a Writer using a
+     * copy buffer of a given size.  The contents of the Reader are
+     * read until its end is reached, but neither the source nor the
+     * destination are closed.  You must do this yourself outside of the
+     * method call.  The number of characters read/written is returned.
@@ -95,8 +106,13 @@ public final class Util {
-     * @param source     The source Reader.
-     * @param dest       The destination writer.
-     * @param bufferSize The number of characters to buffer during the copy. A zero or negative value means to use {@link #DEFAULT_COPY_BUFFER_SIZE}.
-     * @return The number of characters read/written in the copy operation.
-     * @throws CopyStreamException If an error occurs while reading from the source or writing to the destination. The CopyStreamException will contain the
-     *                             number of bytes confirmed to have been transferred before an IOException occurred, and it will also contain the IOException
-     *                             that caused the error. These values can be retrieved with the CopyStreamException getTotalBytesTransferred() and
-     *                             getIOException() methods.
+     * @param source  The source Reader.
+     * @param dest    The destination writer.
+     * @param bufferSize  The number of characters to buffer during the copy.
+     *            A zero or negative value means to use {@link #DEFAULT_COPY_BUFFER_SIZE}.
+     * @return  The number of characters read/written in the copy operation.
+     * @throws CopyStreamException  If an error occurs while reading from the
+     *            source or writing to the destination.  The CopyStreamException
+     *            will contain the number of bytes confirmed to have been
+     *            transferred before an
+     *            IOException occurred, and it will also contain the IOException
+     *            that caused the error.  These values can be retrieved with
+     *            the CopyStreamException getTotalBytesTransferred() and
+     *            getIOException() methods.
@@ -104,2 +120,6 @@ public final class Util {
-    public static long copyReader(final Reader source, final Writer dest, final int bufferSize) throws CopyStreamException {
-        return copyReader(source, dest, bufferSize, CopyStreamEvent.UNKNOWN_STREAM_SIZE, null);
+    public static long copyReader(final Reader source, final Writer dest,
+                                        final int bufferSize)
+    throws CopyStreamException
+    {
+        return copyReader(source, dest, bufferSize,
+                          CopyStreamEvent.UNKNOWN_STREAM_SIZE, null);
@@ -107,0 +128 @@ public final class Util {
+
@@ -109,3 +130,7 @@ public final class Util {
-     * Copies the contents of a Reader to a Writer using a copy buffer of a given size and notifies the provided CopyStreamListener of the progress of the copy
-     * operation by calling its bytesTransferred(long, int) method after each write to the destination. If you wish to notify more than one listener you should
-     * use a CopyStreamAdapter as the listener and register the additional listeners with the CopyStreamAdapter.
+     * Copies the contents of a Reader to a Writer using a
+     * copy buffer of a given size and notifies the provided
+     * CopyStreamListener of the progress of the copy operation by calling
+     * its bytesTransferred(long, int) method after each write to the
+     * destination.  If you wish to notify more than one listener you should
+     * use a CopyStreamAdapter as the listener and register the additional
+     * listeners with the CopyStreamAdapter.
@@ -113,2 +138,4 @@ public final class Util {
-     * The contents of the Reader are read until its end is reached, but neither the source nor the destination are closed. You must do this yourself outside of
-     * the method call. The number of characters read/written is returned.
+     * The contents of the Reader are
+     * read until its end is reached, but neither the source nor the
+     * destination are closed.  You must do this yourself outside of the
+     * method call.  The number of characters read/written is returned.
@@ -116,11 +143,18 @@ public final class Util {
-     * @param source     The source Reader.
-     * @param dest       The destination writer.
-     * @param bufferSize The number of characters to buffer during the copy. A zero or negative value means to use {@link #DEFAULT_COPY_BUFFER_SIZE}.
-     * @param streamSize The number of characters in the stream being copied. Should be set to CopyStreamEvent.UNKNOWN_STREAM_SIZE if unknown. Not currently
-     *                   used (though it is passed to {@link CopyStreamListener#bytesTransferred(long, int, long)}
-     * @param listener   The CopyStreamListener to notify of progress. If this parameter is null, notification is not attempted.
-     * @return The number of characters read/written in the copy operation.
-     * @throws CopyStreamException If an error occurs while reading from the source or writing to the destination. The CopyStreamException will contain the
-     *                             number of bytes confirmed to have been transferred before an IOException occurred, and it will also contain the IOException
-     *                             that caused the error. These values can be retrieved with the CopyStreamException getTotalBytesTransferred() and
-     *                             getIOException() methods.
+     * @param source  The source Reader.
+     * @param dest    The destination writer.
+     * @param bufferSize  The number of characters to buffer during the copy.
+     *            A zero or negative value means to use {@link #DEFAULT_COPY_BUFFER_SIZE}.
+     * @param streamSize  The number of characters in the stream being copied.
+     *          Should be set to CopyStreamEvent.UNKNOWN_STREAM_SIZE if unknown.
+     * Not currently used (though it is passed to {@link CopyStreamListener#bytesTransferred(long, int, long)}
+     * @param listener  The CopyStreamListener to notify of progress.  If
+     *      this parameter is null, notification is not attempted.
+     * @return  The number of characters read/written in the copy operation.
+     * @throws CopyStreamException  If an error occurs while reading from the
+     *            source or writing to the destination.  The CopyStreamException
+     *            will contain the number of bytes confirmed to have been
+     *            transferred before an
+     *            IOException occurred, and it will also contain the IOException
+     *            that caused the error.  These values can be retrieved with
+     *            the CopyStreamException getTotalBytesTransferred() and
+     *            getIOException() methods.
@@ -128,2 +162,5 @@ public final class Util {
-    public static long copyReader(final Reader source, final Writer dest, final int bufferSize, final long streamSize, final CopyStreamListener listener)
-            throws CopyStreamException {
+    public static long copyReader(final Reader source, final Writer dest,
+                                        final int bufferSize, final long streamSize,
+                                        final CopyStreamListener listener)
+    throws CopyStreamException
+    {
@@ -134,2 +171,4 @@ public final class Util {
-        try {
-            while ((numChars = source.read(buffer)) != NetConstants.EOS) {
+        try
+        {
+            while ((numChars = source.read(buffer)) != NetConstants.EOS)
+            {
@@ -138 +177,2 @@ public final class Util {
-                if (numChars == 0) {
+                if (numChars == 0)
+                {
@@ -159,2 +199,5 @@ public final class Util {
-        } catch (final IOException e) {
-            throw new CopyStreamException("IOException caught while copying.", total, e);
+        }
+        catch (final IOException e)
+        {
+            throw new CopyStreamException("IOException caught while copying.",
+                                          total, e);
@@ -165,0 +209 @@ public final class Util {
+
@@ -168 +211,0 @@ public final class Util {
-     *
@@ -170 +213 @@ public final class Util {
-     * @param dest   where to copy to
+     * @param dest  where to copy to
@@ -174 +217,3 @@ public final class Util {
-    public static long copyStream(final InputStream source, final OutputStream dest) throws CopyStreamException {
+    public static long copyStream(final InputStream source, final OutputStream dest)
+    throws CopyStreamException
+    {
@@ -177,0 +223 @@ public final class Util {
+
@@ -179,3 +225,6 @@ public final class Util {
-     * Copies the contents of an InputStream to an OutputStream using a copy buffer of a given size. The contents of the InputStream are read until the end of
-     * the stream is reached, but neither the source nor the destination are closed. You must do this yourself outside of the method call. The number of bytes
-     * read/written is returned.
+     * Copies the contents of an InputStream to an OutputStream using a
+     * copy buffer of a given size.  The contents of the InputStream are
+     * read until the end of the stream is reached, but neither the
+     * source nor the destination are closed.  You must do this yourself
+     * outside of the method call.  The number of bytes read/written is
+     * returned.
@@ -183,8 +232,13 @@ public final class Util {
-     * @param source     The source InputStream.
-     * @param dest       The destination OutputStream.
-     * @param bufferSize The number of bytes to buffer during the copy. A zero or negative value means to use {@link #DEFAULT_COPY_BUFFER_SIZE}.
-     * @return The number of bytes read/written in the copy operation.
-     * @throws CopyStreamException If an error occurs while reading from the source or writing to the destination. The CopyStreamException will contain the
-     *                             number of bytes confirmed to have been transferred before an IOException occurred, and it will also contain the IOException
-     *                             that caused the error. These values can be retrieved with the CopyStreamException getTotalBytesTransferred() and
-     *                             getIOException() methods.
+     * @param source  The source InputStream.
+     * @param dest    The destination OutputStream.
+     * @param bufferSize  The number of bytes to buffer during the copy.
+     *            A zero or negative value means to use {@link #DEFAULT_COPY_BUFFER_SIZE}.
+     * @return  The number of bytes read/written in the copy operation.
+     * @throws CopyStreamException  If an error occurs while reading from the
+     *            source or writing to the destination.  The CopyStreamException
+     *            will contain the number of bytes confirmed to have been
+     *            transferred before an
+     *            IOException occurred, and it will also contain the IOException
+     *            that caused the error.  These values can be retrieved with
+     *            the CopyStreamException getTotalBytesTransferred() and
+     *            getIOException() methods.
@@ -192,2 +246,6 @@ public final class Util {
-    public static long copyStream(final InputStream source, final OutputStream dest, final int bufferSize) throws CopyStreamException {
-        return copyStream(source, dest, bufferSize, CopyStreamEvent.UNKNOWN_STREAM_SIZE, null);
+    public static long copyStream(final InputStream source, final OutputStream dest,
+                                        final int bufferSize)
+    throws CopyStreamException
+    {
+        return copyStream(source, dest, bufferSize,
+                          CopyStreamEvent.UNKNOWN_STREAM_SIZE, null);
@@ -195,0 +254 @@ public final class Util {
+
@@ -197,3 +256,7 @@ public final class Util {
-     * Copies the contents of an InputStream to an OutputStream using a copy buffer of a given size and notifies the provided CopyStreamListener of the progress
-     * of the copy operation by calling its bytesTransferred(long, int) method after each write to the destination. If you wish to notify more than one listener
-     * you should use a CopyStreamAdapter as the listener and register the additional listeners with the CopyStreamAdapter.
+     * Copies the contents of an InputStream to an OutputStream using a
+     * copy buffer of a given size and notifies the provided
+     * CopyStreamListener of the progress of the copy operation by calling
+     * its bytesTransferred(long, int) method after each write to the
+     * destination.  If you wish to notify more than one listener you should
+     * use a CopyStreamAdapter as the listener and register the additional
+     * listeners with the CopyStreamAdapter.
@@ -201,2 +264,5 @@ public final class Util {
-     * The contents of the InputStream are read until the end of the stream is reached, but neither the source nor the destination are closed. You must do this
-     * yourself outside of the method call. The number of bytes read/written is returned.
+     * The contents of the InputStream are
+     * read until the end of the stream is reached, but neither the
+     * source nor the destination are closed.  You must do this yourself
+     * outside of the method call.  The number of bytes read/written is
+     * returned.
@@ -204,6 +270,9 @@ public final class Util {
-     * @param source     The source InputStream.
-     * @param dest       The destination OutputStream.
-     * @param bufferSize The number of bytes to buffer during the copy. A zero or negative value means to use {@link #DEFAULT_COPY_BUFFER_SIZE}.
-     * @param streamSize The number of bytes in the stream being copied. Should be set to CopyStreamEvent.UNKNOWN_STREAM_SIZE if unknown. Not currently used
-     *                   (though it is passed to {@link CopyStreamListener#bytesTransferred(long, int, long)}
-     * @param listener   The CopyStreamListener to notify of progress. If this parameter is null, notification is not attempted.
+     * @param source  The source InputStream.
+     * @param dest    The destination OutputStream.
+     * @param bufferSize  The number of bytes to buffer during the copy.
+     *            A zero or negative value means to use {@link #DEFAULT_COPY_BUFFER_SIZE}.
+     * @param streamSize  The number of bytes in the stream being copied.
+     *          Should be set to CopyStreamEvent.UNKNOWN_STREAM_SIZE if unknown.
+     * Not currently used (though it is passed to {@link CopyStreamListener#bytesTransferred(long, int, long)}
+     * @param listener  The CopyStreamListener to notify of progress.  If
+     *      this parameter is null, notification is not attempted.
@@ -211,4 +280,8 @@ public final class Util {
-     * @throws CopyStreamException If an error occurs while reading from the source or writing to the destination. The CopyStreamException will contain the
-     *                             number of bytes confirmed to have been transferred before an IOException occurred, and it will also contain the IOException
-     *                             that caused the error. These values can be retrieved with the CopyStreamException getTotalBytesTransferred() and
-     *                             getIOException() methods.
+     * @throws CopyStreamException  If an error occurs while reading from the
+     *            source or writing to the destination.  The CopyStreamException
+     *            will contain the number of bytes confirmed to have been
+     *            transferred before an
+     *            IOException occurred, and it will also contain the IOException
+     *            that caused the error.  These values can be retrieved with
+     *            the CopyStreamException getTotalBytesTransferred() and
+     *            getIOException() methods.
@@ -216,3 +289,7 @@ public final class Util {
-    public static long copyStream(final InputStream source, final OutputStream dest, final int bufferSize, final long streamSize,
-            final CopyStreamListener listener) throws CopyStreamException {
-        return copyStream(source, dest, bufferSize, streamSize, listener, true);
+    public static long copyStream(final InputStream source, final OutputStream dest,
+                                        final int bufferSize, final long streamSize,
+                                        final CopyStreamListener listener)
+    throws CopyStreamException
+    {
+      return copyStream(source, dest, bufferSize, streamSize, listener,
+                        true);
@@ -222,3 +299,7 @@ public final class Util {
-     * Copies the contents of an InputStream to an OutputStream using a copy buffer of a given size and notifies the provided CopyStreamListener of the progress
-     * of the copy operation by calling its bytesTransferred(long, int) method after each write to the destination. If you wish to notify more than one listener
-     * you should use a CopyStreamAdapter as the listener and register the additional listeners with the CopyStreamAdapter.
+     * Copies the contents of an InputStream to an OutputStream using a
+     * copy buffer of a given size and notifies the provided
+     * CopyStreamListener of the progress of the copy operation by calling
+     * its bytesTransferred(long, int) method after each write to the
+     * destination.  If you wish to notify more than one listener you should
+     * use a CopyStreamAdapter as the listener and register the additional
+     * listeners with the CopyStreamAdapter.
@@ -226,2 +307,5 @@ public final class Util {
-     * The contents of the InputStream are read until the end of the stream is reached, but neither the source nor the destination are closed. You must do this
-     * yourself outside of the method call. The number of bytes read/written is returned.
+     * The contents of the InputStream are
+     * read until the end of the stream is reached, but neither the
+     * source nor the destination are closed.  You must do this yourself
+     * outside of the method call.  The number of bytes read/written is
+     * returned.
@@ -229,8 +313,13 @@ public final class Util {
-     * @param source     The source InputStream.
-     * @param dest       The destination OutputStream.
-     * @param bufferSize The number of bytes to buffer during the copy. A zero or negative value means to use {@link #DEFAULT_COPY_BUFFER_SIZE}.
-     * @param streamSize The number of bytes in the stream being copied. Should be set to CopyStreamEvent.UNKNOWN_STREAM_SIZE if unknown. Not currently used
-     *                   (though it is passed to {@link CopyStreamListener#bytesTransferred(long, int, long)}
-     * @param listener   The CopyStreamListener to notify of progress. If this parameter is null, notification is not attempted.
-     * @param flush      Whether to flush the output stream after every write. This is necessary for interactive sessions that rely on buffered streams. If you
-     *                   don't flush, the data will stay in the stream buffer.
+     * @param source  The source InputStream.
+     * @param dest    The destination OutputStream.
+     * @param bufferSize  The number of bytes to buffer during the copy.
+     *            A zero or negative value means to use {@link #DEFAULT_COPY_BUFFER_SIZE}.
+     * @param streamSize  The number of bytes in the stream being copied.
+     *          Should be set to CopyStreamEvent.UNKNOWN_STREAM_SIZE if unknown.
+     * Not currently used (though it is passed to {@link CopyStreamListener#bytesTransferred(long, int, long)}
+     * @param listener  The CopyStreamListener to notify of progress.  If
+     *      this parameter is null, notification is not attempted.
+     * @param flush Whether to flush the output stream after every
+     *        write.  This is necessary for interactive sessions that rely on
+     *        buffered streams.  If you don't flush, the data will stay in
+     *        the stream buffer.
@@ -238,4 +327,8 @@ public final class Util {
-     * @throws CopyStreamException If an error occurs while reading from the source or writing to the destination. The CopyStreamException will contain the
-     *                             number of bytes confirmed to have been transferred before an IOException occurred, and it will also contain the IOException
-     *                             that caused the error. These values can be retrieved with the CopyStreamException getTotalBytesTransferred() and
-     *                             getIOException() methods.
+     * @throws CopyStreamException  If an error occurs while reading from the
+     *            source or writing to the destination.  The CopyStreamException
+     *            will contain the number of bytes confirmed to have been
+     *            transferred before an
+     *            IOException occurred, and it will also contain the IOException
+     *            that caused the error.  These values can be retrieved with
+     *            the CopyStreamException getTotalBytesTransferred() and
+     *            getIOException() methods.
@@ -243,2 +336,6 @@ public final class Util {
-    public static long copyStream(final InputStream source, final OutputStream dest, final int bufferSize, final long streamSize,
-            final CopyStreamListener listener, final boolean flush) throws CopyStreamException {
+    public static long copyStream(final InputStream source, final OutputStream dest,
+                                        final int bufferSize, final long streamSize,
+                                        final CopyStreamListener listener,
+                                        final boolean flush)
+    throws CopyStreamException
+    {
@@ -249,2 +346,4 @@ public final class Util {
-        try {
-            while ((numBytes = source.read(buffer)) != NetConstants.EOS) {
+        try
+        {
+            while ((numBytes = source.read(buffer)) != NetConstants.EOS)
+            {
@@ -254 +353,2 @@ public final class Util {
-                if (numBytes == 0) {
+                if (numBytes == 0)
+                {
@@ -260 +360 @@ public final class Util {
-                    if (flush) {
+                    if(flush) {
@@ -271 +371 @@ public final class Util {
-                if (flush) {
+                if(flush) {
@@ -279,2 +379,5 @@ public final class Util {
-        } catch (final IOException e) {
-            throw new CopyStreamException("IOException caught while copying.", total, e);
+        }
+        catch (final IOException e)
+        {
+            throw new CopyStreamException("IOException caught while copying.",
+                                          total, e);
@@ -287,2 +390,2 @@ public final class Util {
-    private Util() {
-    }
+    private Util()
+    { }
diff --git a/src/main/java/org/apache/commons/net/nntp/Article.java b/src/main/java/org/apache/commons/net/nntp/Article.java
index 8418af76b..b13f23257 100644
--- a/src/main/java/org/apache/commons/net/nntp/Article.java
+++ b/src/main/java/org/apache/commons/net/nntp/Article.java
@@ -27 +27,2 @@ import org.apache.commons.net.util.NetConstants;
- * This is a class that contains the basic state needed for message retrieval and threading. With thanks to Jamie Zawinski (jwz@jwz.org)
+ * This is a class that contains the basic state needed for message retrieval and threading.
+ * With thanks to Jamie  Zawinski (jwz@jwz.org)
@@ -31,2 +32,2 @@ public class Article implements Threadable {
-     * Recursive method that traverses a pre-threaded graph (or tree) of connected Article objects and prints them out.
-     *
+     * Recursive method that traverses a pre-threaded graph (or tree)
+     * of connected Article objects and prints them out.
@@ -39 +39,0 @@ public class Article implements Threadable {
-
@@ -41,2 +41,2 @@ public class Article implements Threadable {
-     * Recursive method that traverses a pre-threaded graph (or tree) of connected Article objects and prints them out.
-     *
+     * Recursive method that traverses a pre-threaded graph (or tree)
+     * of connected Article objects and prints them out.
@@ -44 +44 @@ public class Article implements Threadable {
-     * @param depth   the current tree depth
+     * @param depth the current tree depth
@@ -49 +48,0 @@ public class Article implements Threadable {
-
@@ -51,2 +50,2 @@ public class Article implements Threadable {
-     * Recursive method that traverses a pre-threaded graph (or tree) of connected Article objects and prints them out.
-     *
+     * Recursive method that traverses a pre-threaded graph (or tree)
+     * of connected Article objects and prints them out.
@@ -54,2 +53,2 @@ public class Article implements Threadable {
-     * @param depth   the current tree depth
-     * @param ps      the PrintStream to use
+     * @param depth the current tree depth
+     * @param ps the PrintStream to use
@@ -59,10 +58,10 @@ public class Article implements Threadable {
-        for (int i = 0; i < depth; ++i) {
-            ps.print("==>");
-        }
-        ps.println(article.getSubject() + "\t" + article.getFrom() + "\t" + article.getArticleId());
-        if (article.kid != null) {
-            printThread(article.kid, depth + 1);
-        }
-        if (article.next != null) {
-            printThread(article.next, depth);
-        }
+            for (int i = 0; i < depth; ++i) {
+                ps.print("==>");
+            }
+            ps.println(article.getSubject() + "\t" + article.getFrom()+"\t"+article.getArticleId());
+            if (article.kid != null) {
+                printThread(article.kid, depth + 1);
+            }
+            if (article.next != null) {
+                printThread(article.next, depth);
+            }
@@ -70 +68,0 @@ public class Article implements Threadable {
-
@@ -72,2 +70,2 @@ public class Article implements Threadable {
-     * Recursive method that traverses a pre-threaded graph (or tree) of connected Article objects and prints them out.
-     *
+     * Recursive method that traverses a pre-threaded graph (or tree)
+     * of connected Article objects and prints them out.
@@ -75 +73 @@ public class Article implements Threadable {
-     * @param ps      the PrintStream to use
+     * @param ps the PrintStream to use
@@ -81 +78,0 @@ public class Article implements Threadable {
-
@@ -107 +103,0 @@ public class Article implements Threadable {
-     *
@@ -148 +143,0 @@ public class Article implements Threadable {
-     *
@@ -176,0 +172 @@ public class Article implements Threadable {
+
@@ -194,0 +191 @@ public class Article implements Threadable {
+
@@ -200,0 +198 @@ public class Article implements Threadable {
+
@@ -208,0 +207 @@ public class Article implements Threadable {
+
@@ -211 +210 @@ public class Article implements Threadable {
-        this.next = (Article) next;
+        this.next = (Article)next;
@@ -214,0 +214 @@ public class Article implements Threadable {
+
@@ -221 +221 @@ public class Article implements Threadable {
-        if (simplifiedSubject == null) {
+        if(simplifiedSubject == null) {
@@ -234,3 +234,3 @@ public class Article implements Threadable {
-        int start = 0;
-        final String subject = getSubject();
-        final int len = subject.length();
+            int start = 0;
+            final String subject = getSubject();
+            final int len = subject.length();
@@ -238 +238 @@ public class Article implements Threadable {
-        boolean done = false;
+            boolean done = false;
@@ -240,2 +240,2 @@ public class Article implements Threadable {
-        while (!done) {
-            done = true;
+            while (!done) {
+                done = true;
@@ -243,5 +243,5 @@ public class Article implements Threadable {
-            // skip whitespace
-            // "Re: " breaks this
-            while (start < len && subject.charAt(start) == ' ') {
-                start++;
-            }
+                // skip whitespace
+                // "Re: " breaks this
+                while (start < len && subject.charAt(start) == ' ') {
+                    start++;
+                }
@@ -249 +249,2 @@ public class Article implements Threadable {
-            if (start < (len - 2) && (subject.charAt(start) == 'r' || subject.charAt(start) == 'R')
+                if (start < (len - 2)
+                    && (subject.charAt(start) == 'r' || subject.charAt(start) == 'R')
@@ -252,13 +253,2 @@ public class Article implements Threadable {
-                if (subject.charAt(start + 2) == ':') {
-                    start += 3; // Skip "Re:"
-                    done = false;
-                } else if (start < (len - 2) && (subject.charAt(start + 2) == '[' || subject.charAt(start + 2) == '(')) {
-
-                    int i = start + 3;
-
-                    while (i < len && subject.charAt(i) >= '0' && subject.charAt(i) <= '9') {
-                        i++;
-                    }
-
-                    if (i < (len - 1) && (subject.charAt(i) == ']' || subject.charAt(i) == ')') && subject.charAt(i + 1) == ':') {
-                        start = i + 2;
+                    if (subject.charAt(start + 2) == ':') {
+                        start += 3; // Skip "Re:"
@@ -265,0 +256,18 @@ public class Article implements Threadable {
+                    } else if (
+                        start < (len - 2)
+                        &&
+                        (subject.charAt(start + 2) == '[' || subject.charAt(start + 2) == '(')) {
+
+                        int i = start + 3;
+
+                        while (i < len && subject.charAt(i) >= '0' && subject.charAt(i) <= '9') {
+                            i++;
+                        }
+
+                        if (i < (len - 1)
+                            && (subject.charAt(i) == ']' || subject.charAt(i) == ')')
+                            && subject.charAt(i + 1) == ':')
+                        {
+                            start = i + 2;
+                            done = false;
+                        }
@@ -268 +275,0 @@ public class Article implements Threadable {
-            }
@@ -270,3 +277,3 @@ public class Article implements Threadable {
-            if ("(no subject)".equals(simplifiedSubject)) {
-                simplifiedSubject = "";
-            }
+                if ("(no subject)".equals(simplifiedSubject)) {
+                    simplifiedSubject = "";
+                }
@@ -274 +281 @@ public class Article implements Threadable {
-            int end = len;
+                int end = len;
@@ -276,3 +283,3 @@ public class Article implements Threadable {
-            while (end > start && subject.charAt(end - 1) < ' ') {
-                end--;
-            }
+                while (end > start && subject.charAt(end - 1) < ' ') {
+                    end--;
+                }
@@ -280,4 +287,5 @@ public class Article implements Threadable {
-            if (start == 0 && end == len) {
-                simplifiedSubject = subject;
-            } else {
-                simplifiedSubject = subject.substring(start, end);
+                if (start == 0 && end == len) {
+                    simplifiedSubject = subject;
+                } else {
+                    simplifiedSubject = subject.substring(start, end);
+                }
@@ -286 +293,0 @@ public class Article implements Threadable {
-    }
@@ -292 +298,0 @@ public class Article implements Threadable {
-
@@ -294,2 +300,2 @@ public class Article implements Threadable {
-    public String toString() { // Useful for Eclipse debugging
-        return articleNumber + " " + articleId + " " + subject;
+    public String toString(){ // Useful for Eclipse debugging
+        return articleNumber + " " +articleId + " " + subject;
diff --git a/src/main/java/org/apache/commons/net/nntp/ArticleInfo.java b/src/main/java/org/apache/commons/net/nntp/ArticleInfo.java
index 76c97d037..c431acc9b 100644
--- a/src/main/java/org/apache/commons/net/nntp/ArticleInfo.java
+++ b/src/main/java/org/apache/commons/net/nntp/ArticleInfo.java
@@ -20 +19,0 @@ package org.apache.commons.net.nntp;
-
@@ -22 +21,3 @@ package org.apache.commons.net.nntp;
- * Class contains details about an article. Create an instance of the class and pass it to the appropriate NNTP method. The values will be populated on return.
+ * Class contains details about an article.
+ * Create an instance of the class and pass it to the appropriate NNTP method.
+ * The values will be populated on return.
diff --git a/src/main/java/org/apache/commons/net/nntp/ArticleIterator.java b/src/main/java/org/apache/commons/net/nntp/ArticleIterator.java
index 61fa11833..a4e03ef8d 100644
--- a/src/main/java/org/apache/commons/net/nntp/ArticleIterator.java
+++ b/src/main/java/org/apache/commons/net/nntp/ArticleIterator.java
@@ -22 +21,0 @@ import java.util.Iterator;
-
@@ -24,2 +23,2 @@ import java.util.Iterator;
- * Class which wraps an {@code Iterable<String>} of raw article information to generate an {@code Iterable<Article>} of the parsed information.
- *
+ * Class which wraps an {@code Iterable<String>} of raw article information
+ * to generate an {@code Iterable<Article>} of the parsed information.
@@ -30 +29 @@ class ArticleIterator implements Iterator<Article>, Iterable<Article> {
-    private final Iterator<String> stringIterator;
+    private  final Iterator<String> stringIterator;
@@ -48,2 +47,2 @@ class ArticleIterator implements Iterator<Article>, Iterable<Article> {
-     *
-     * @return the next {@link Article}, never {@code null}, if unparseable then isDummy() will be true, and the subject will contain the raw info.
+     * @return the next {@link Article}, never {@code null}, if unparseable then isDummy()
+     * will be true, and the subject will contain the raw info.
diff --git a/src/main/java/org/apache/commons/net/nntp/ArticlePointer.java b/src/main/java/org/apache/commons/net/nntp/ArticlePointer.java
index 130a0e06e..9b43ad20f 100644
--- a/src/main/java/org/apache/commons/net/nntp/ArticlePointer.java
+++ b/src/main/java/org/apache/commons/net/nntp/ArticlePointer.java
@@ -21,3 +21,4 @@ package org.apache.commons.net.nntp;
- * This class is a structure used to return article number and unique id information extracted from an NNTP server reply. You will normally want this
- * information when issuing a STAT command, implemented by {@link NNTPClient#selectArticle selectArticle}.
- *
+ * This class is a structure used to return article number and unique
+ * id information extracted from an NNTP server reply.  You will normally
+ * want this information when issuing a STAT command, implemented by
+ * {@link NNTPClient#selectArticle selectArticle}.
@@ -29 +30,2 @@ package org.apache.commons.net.nntp;
-public final class ArticlePointer {
+public final class ArticlePointer
+{
@@ -33,2 +35,4 @@ public final class ArticlePointer {
-     * The unique id of the referenced article, including the enclosing &lt; and &gt; symbols which are technically not part of the identifier, but are required
-     * by all NNTP commands taking an article id as an argument.
+     * The unique id of the referenced article, including the enclosing
+     * &lt; and &gt; symbols which are technically not part of the
+     * identifier, but are required by all NNTP commands taking an
+     * article id as an argument.
diff --git a/src/main/java/org/apache/commons/net/nntp/NNTP.java b/src/main/java/org/apache/commons/net/nntp/NNTP.java
index 837e9148f..09534dca3 100644
--- a/src/main/java/org/apache/commons/net/nntp/NNTP.java
+++ b/src/main/java/org/apache/commons/net/nntp/NNTP.java
@@ -34,4 +34,9 @@ import org.apache.commons.net.io.CRLFLineReader;
- * The NNTP class is not meant to be used by itself and is provided only so that you may easily implement your own NNTP client if you so desire. If you have no
- * need to perform your own implementation, you should use {@link org.apache.commons.net.nntp.NNTPClient}. The NNTP class is made public to provide access to
- * various NNTP constants and to make it easier for adventurous programmers (or those with special needs) to interact with the NNTP protocol and implement their
- * own clients. A set of methods with names corresponding to the NNTP command names are provided to facilitate this interaction.
+ * The NNTP class is not meant to be used by itself and is provided
+ * only so that you may easily implement your own NNTP client if
+ * you so desire.  If you have no need to perform your own implementation,
+ * you should use {@link org.apache.commons.net.nntp.NNTPClient}.
+ * The NNTP class is made public to provide access to various NNTP constants
+ * and to make it easier for adventurous programmers (or those with special
+ * needs) to interact with the NNTP protocol and implement their own clients.
+ * A set of methods with names corresponding to the NNTP command names are
+ * provided to facilitate this interaction.
@@ -39,9 +44,22 @@ import org.apache.commons.net.io.CRLFLineReader;
- * You should keep in mind that the NNTP server may choose to prematurely close a connection if the client has been idle for longer than a given time period or
- * if the server is being shutdown by the operator or some other reason. The NNTP class will detect a premature NNTP server connection closing when it receives
- * a {@link org.apache.commons.net.nntp.NNTPReply#SERVICE_DISCONTINUED NNTPReply.SERVICE_DISCONTINUED } response to a command. When that occurs, the NNTP class
- * method encountering that reply will throw an {@link org.apache.commons.net.nntp.NNTPConnectionClosedException} . <code>NNTPConectionClosedException</code> is
- * a subclass of <code> IOException </code> and therefore need not be caught separately, but if you are going to catch it separately, its catch block must
- * appear before the more general <code> IOException </code> catch block. When you encounter an
- * {@link org.apache.commons.net.nntp.NNTPConnectionClosedException} , you must disconnect the connection with {@link #disconnect disconnect() } to properly
- * clean up the system resources used by NNTP. Before disconnecting, you may check the last reply code and text with {@link #getReplyCode getReplyCode } and
- * {@link #getReplyString getReplyString }.
+ * You should keep in mind that the NNTP server may choose to prematurely
+ * close a connection if the client has been idle for longer than a
+ * given time period or if the server is being shutdown by the operator or
+ * some other reason.  The NNTP class will detect a
+ * premature NNTP server connection closing when it receives a
+ * {@link org.apache.commons.net.nntp.NNTPReply#SERVICE_DISCONTINUED NNTPReply.SERVICE_DISCONTINUED }
+ *  response to a command.
+ * When that occurs, the NNTP class method encountering that reply will throw
+ * an {@link org.apache.commons.net.nntp.NNTPConnectionClosedException}
+ * .
+ * <code>NNTPConectionClosedException</code>
+ * is a subclass of <code> IOException </code> and therefore need not be
+ * caught separately, but if you are going to catch it separately, its
+ * catch block must appear before the more general <code> IOException </code>
+ * catch block.  When you encounter an
+ * {@link org.apache.commons.net.nntp.NNTPConnectionClosedException}
+ * , you must disconnect the connection with
+ * {@link #disconnect  disconnect() } to properly clean up the
+ * system resources used by NNTP.  Before disconnecting, you may check the
+ * last reply code and text with
+ * {@link #getReplyCode  getReplyCode } and
+ * {@link #getReplyString  getReplyString }.
@@ -49,4 +67,9 @@ import org.apache.commons.net.io.CRLFLineReader;
- * Rather than list it separately for each method, we mention here that every method communicating with the server and throwing an IOException can also throw a
- * {@link org.apache.commons.net.MalformedServerReplyException} , which is a subclass of IOException. A MalformedServerReplyException will be thrown when the
- * reply received from the server deviates enough from the protocol specification that it cannot be interpreted in a useful manner despite attempts to be as
- * lenient as possible.
+ * Rather than list it separately for each method, we mention here that
+ * every method communicating with the server and throwing an IOException
+ * can also throw a
+ * {@link org.apache.commons.net.MalformedServerReplyException}
+ * , which is a subclass
+ * of IOException.  A MalformedServerReplyException will be thrown when
+ * the reply received from the server deviates enough from the protocol
+ * specification that it cannot be interpreted in a useful manner despite
+ * attempts to be as lenient as possible.
@@ -59,2 +82,3 @@ import org.apache.commons.net.io.CRLFLineReader;
-public class NNTP extends SocketClient {
-    /** The default NNTP port. Its value is 119 according to RFC 977. */
+public class NNTP extends SocketClient
+{
+    /** The default NNTP port.  Its value is 119 according to RFC 977. */
@@ -73,2 +97,3 @@ public class NNTP extends SocketClient {
-     * Wraps {@link SocketClient#_input_} to communicate with server. Initialized by {@link #_connectAction_}. All server reads should be done through this
-     * variable.
+     * Wraps {@link SocketClient#_input_}
+     * to communicate with server.  Initialized by {@link #_connectAction_}.
+     * All server reads should be done through this variable.
@@ -79,2 +104,3 @@ public class NNTP extends SocketClient {
-     * Wraps {@link SocketClient#_output_} to communicate with server. Initialized by {@link #_connectAction_}. All server reads should be done through this
-     * variable.
+     * Wraps {@link SocketClient#_output_}
+     * to communicate with server.  Initialized by {@link #_connectAction_}.
+     * All server reads should be done through this variable.
@@ -85 +111,2 @@ public class NNTP extends SocketClient {
-     * A ProtocolCommandSupport object used to manage the registering of ProtocolCommandListeners and te firing of ProtocolCommandEvents.
+     * A ProtocolCommandSupport object used to manage the registering of
+     * ProtocolCommandListeners and te firing of ProtocolCommandEvents.
@@ -90,2 +117,3 @@ public class NNTP extends SocketClient {
-     * The default NNTP constructor. Sets the default port to <code>DEFAULT_PORT</code> and initializes internal data structures for saving NNTP reply
-     * information.
+     * The default NNTP constructor.  Sets the default port to
+     * <code>DEFAULT_PORT</code> and initializes internal data structures
+     * for saving NNTP reply information.
@@ -93 +121,2 @@ public class NNTP extends SocketClient {
-    public NNTP() {
+    public NNTP()
+    {
@@ -103,2 +132,4 @@ public class NNTP extends SocketClient {
-     * Initiates control connections and gets initial reply, determining if the client is allowed to post to the server. Initializes {@link #_reader_} and
-     * {@link #_writer_} to wrap {@link SocketClient#_input_} and {@link SocketClient#_output_}.
+     * Initiates control connections and gets initial reply, determining
+     * if the client is allowed to post to the server.  Initializes
+     * {@link #_reader_} and {@link #_writer_} to wrap
+     * {@link SocketClient#_input_} and {@link SocketClient#_output_}.
@@ -107 +138,2 @@ public class NNTP extends SocketClient {
-    protected void _connectAction_() throws IOException {
+    protected void _connectAction_() throws IOException
+    {
@@ -109,2 +141,6 @@ public class NNTP extends SocketClient {
-        _reader_ = new CRLFLineReader(new InputStreamReader(_input_, DEFAULT_ENCODING));
-        _writer_ = new BufferedWriter(new OutputStreamWriter(_output_, DEFAULT_ENCODING));
+        _reader_ =
+            new CRLFLineReader(new InputStreamReader(_input_,
+                                                     DEFAULT_ENCODING));
+        _writer_ =
+            new BufferedWriter(new OutputStreamWriter(_output_,
+                                                      DEFAULT_ENCODING));
@@ -117 +153,2 @@ public class NNTP extends SocketClient {
-     * A convenience method to send the NNTP ARTICLE command to the server, receive the initial reply, and return the reply code.
+     * A convenience method to send the NNTP ARTICLE command to the server,
+     * receive the initial reply, and return the reply code.
@@ -119 +155,0 @@ public class NNTP extends SocketClient {
-     *
@@ -121,4 +157,7 @@ public class NNTP extends SocketClient {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -126 +165,2 @@ public class NNTP extends SocketClient {
-    public int article() throws IOException {
+    public int article() throws IOException
+    {
@@ -129,0 +170 @@ public class NNTP extends SocketClient {
+
@@ -137 +178,2 @@ public class NNTP extends SocketClient {
-    public int article(final int a) throws IOException {
+    public int article(final int a) throws IOException
+    {
@@ -140,0 +183 @@ public class NNTP extends SocketClient {
+
@@ -142 +185,2 @@ public class NNTP extends SocketClient {
-     * A convenience method to send the NNTP ARTICLE command to the server, receive the initial reply, and return the reply code.
+     * A convenience method to send the NNTP ARTICLE command to the server,
+     * receive the initial reply, and return the reply code.
@@ -144,2 +188,2 @@ public class NNTP extends SocketClient {
-     *
-     * @param articleNumber The number of the article to request from the currently selected newsgroup.
+     * @param articleNumber The number of the article to request from the
+     *                      currently selected newsgroup.
@@ -147,4 +191,7 @@ public class NNTP extends SocketClient {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -152 +199,2 @@ public class NNTP extends SocketClient {
-    public int article(final long articleNumber) throws IOException {
+    public int article(final long articleNumber) throws IOException
+    {
@@ -155,0 +204 @@ public class NNTP extends SocketClient {
+
@@ -157 +206,2 @@ public class NNTP extends SocketClient {
-     * A convenience method to send the NNTP ARTICLE command to the server, receive the initial reply, and return the reply code.
+     * A convenience method to send the NNTP ARTICLE command to the server,
+     * receive the initial reply, and return the reply code.
@@ -159,2 +209,2 @@ public class NNTP extends SocketClient {
-     *
-     * @param messageId The message identifier of the requested article, including the encapsulating &lt; and &gt; characters.
+     * @param messageId  The message identifier of the requested article,
+     *                   including the encapsulating &lt; and &gt; characters.
@@ -162,4 +212,7 @@ public class NNTP extends SocketClient {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -167 +220,2 @@ public class NNTP extends SocketClient {
-    public int article(final String messageId) throws IOException {
+    public int article(final String messageId) throws IOException
+    {
@@ -170,0 +225 @@ public class NNTP extends SocketClient {
+
@@ -172,2 +227,4 @@ public class NNTP extends SocketClient {
-     * A convenience method to send the AUTHINFO PASS command to the server, receive the reply, and return the reply code. If this step is required, it should
-     * immediately follow the AUTHINFO USER command (See RFC 2980)
+     * A convenience method to send the AUTHINFO PASS command to the server,
+     * receive the reply, and return the reply code.  If this step is
+     * required, it should immediately follow the AUTHINFO USER command
+     * (See RFC 2980)
@@ -175 +231,0 @@ public class NNTP extends SocketClient {
-     *
@@ -177,5 +233,9 @@ public class NNTP extends SocketClient {
-     * @return The reply code received from the server. The server should return a 281 or 502 for this command.
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @return The reply code received from the server. The server should
+     *         return a 281 or 502 for this command.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -187,0 +248 @@ public class NNTP extends SocketClient {
+
@@ -189 +250,2 @@ public class NNTP extends SocketClient {
-     * A convenience method to send the AUTHINFO USER command to the server, receive the reply, and return the reply code. (See RFC 2980)
+     * A convenience method to send the AUTHINFO USER command to the server,
+     *  receive the reply, and return the reply code. (See RFC 2980)
@@ -191 +252,0 @@ public class NNTP extends SocketClient {
-     *
@@ -193,5 +254,9 @@ public class NNTP extends SocketClient {
-     * @return The reply code received from the server. The server should return a 381 or 281 for this command.
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @return The reply code received from the server. The server should
+     *          return a 381 or 281 for this command.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -203,0 +269 @@ public class NNTP extends SocketClient {
+
@@ -205 +271,2 @@ public class NNTP extends SocketClient {
-     * A convenience method to send the NNTP BODY command to the server, receive the initial reply, and return the reply code.
+     * A convenience method to send the NNTP BODY command to the server,
+     * receive the initial reply, and return the reply code.
@@ -207 +273,0 @@ public class NNTP extends SocketClient {
-     *
@@ -209,4 +275,7 @@ public class NNTP extends SocketClient {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -214 +283,2 @@ public class NNTP extends SocketClient {
-    public int body() throws IOException {
+    public int body() throws IOException
+    {
@@ -225 +295,2 @@ public class NNTP extends SocketClient {
-    public int body(final int a) throws IOException {
+    public int body(final int a) throws IOException
+    {
@@ -228,0 +300 @@ public class NNTP extends SocketClient {
+
@@ -230 +302,2 @@ public class NNTP extends SocketClient {
-     * A convenience method to send the NNTP BODY command to the server, receive the initial reply, and return the reply code.
+     * A convenience method to send the NNTP BODY command to the server,
+     * receive the initial reply, and return the reply code.
@@ -232,2 +305,2 @@ public class NNTP extends SocketClient {
-     *
-     * @param articleNumber The number of the article to request from the currently selected newsgroup.
+     * @param articleNumber The number of the article to request from the
+     *                      currently selected newsgroup.
@@ -235,4 +308,7 @@ public class NNTP extends SocketClient {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -240 +316,2 @@ public class NNTP extends SocketClient {
-    public int body(final long articleNumber) throws IOException {
+    public int body(final long articleNumber) throws IOException
+    {
@@ -243,0 +321 @@ public class NNTP extends SocketClient {
+
@@ -245 +323,2 @@ public class NNTP extends SocketClient {
-     * A convenience method to send the NNTP BODY command to the server, receive the initial reply, and return the reply code.
+     * A convenience method to send the NNTP BODY command to the server,
+     * receive the initial reply, and return the reply code.
@@ -247,2 +326,2 @@ public class NNTP extends SocketClient {
-     *
-     * @param messageId The message identifier of the requested article, including the encapsulating &lt; and &gt; characters.
+     * @param messageId  The message identifier of the requested article,
+     *                   including the encapsulating &lt; and &gt; characters.
@@ -250,4 +329,7 @@ public class NNTP extends SocketClient {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -255 +337,2 @@ public class NNTP extends SocketClient {
-    public int body(final String messageId) throws IOException {
+    public int body(final String messageId) throws IOException
+    {
@@ -260,2 +343,4 @@ public class NNTP extends SocketClient {
-     * Closes the connection to the NNTP server and sets to null some internal data so that the memory may be reclaimed by the garbage collector. The reply text
-     * and code information from the last command is voided so that the memory it used may be reclaimed.
+     * Closes the connection to the NNTP server and sets to null
+     * some internal data so that the memory may be reclaimed by the
+     * garbage collector.  The reply text and code information from the
+     * last command is voided so that the memory it used may be reclaimed.
@@ -263 +347,0 @@ public class NNTP extends SocketClient {
-     *
@@ -267 +351,2 @@ public class NNTP extends SocketClient {
-    public void disconnect() throws IOException {
+    public void disconnect() throws IOException
+    {
@@ -282,0 +368,2 @@ public class NNTP extends SocketClient {
+
+
@@ -284,3 +371,5 @@ public class NNTP extends SocketClient {
-     * Fetches a reply from the NNTP server and returns the integer reply code. After calling this method, the actual reply text can be accessed from
-     * {@link #getReplyString getReplyString }. Only use this method if you are implementing your own NNTP client or if you need to fetch a secondary response
-     * from the NNTP server.
+     * Fetches a reply from the NNTP server and returns the integer reply
+     * code.  After calling this method, the actual reply text can be accessed
+     * from {@link #getReplyString  getReplyString }.  Only use this
+     * method if you are implementing your own NNTP client or if you need to
+     * fetch a secondary response from the NNTP server.
@@ -288,6 +377,9 @@ public class NNTP extends SocketClient {
-     *
-     * @return The integer value of the reply code of the fetched NNTP reply. in response to the command.
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while receiving the server reply.
+     * @return The integer value of the reply code of the fetched NNTP reply.
+     *         in response to the command.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while
+     *      receiving the server reply.
@@ -295 +387,2 @@ public class NNTP extends SocketClient {
-    public int getReply() throws IOException {
+    public int getReply() throws IOException
+    {
@@ -299 +392,2 @@ public class NNTP extends SocketClient {
-            throw new NNTPConnectionClosedException("Connection closed without indication.");
+            throw new NNTPConnectionClosedException(
+                    "Connection closed without indication.");
@@ -305 +399,2 @@ public class NNTP extends SocketClient {
-            throw new MalformedServerReplyException("Truncated server reply: " + replyString);
+            throw new MalformedServerReplyException(
+                "Truncated server reply: " + replyString);
@@ -308 +403,2 @@ public class NNTP extends SocketClient {
-        try {
+        try
+        {
@@ -310,2 +406,5 @@ public class NNTP extends SocketClient {
-        } catch (final NumberFormatException e) {
-            throw new MalformedServerReplyException("Could not parse response code.\nServer Reply: " + replyString);
+        }
+        catch (final NumberFormatException e)
+        {
+            throw new MalformedServerReplyException(
+                "Could not parse response code.\nServer Reply: " + replyString);
@@ -317 +416,2 @@ public class NNTP extends SocketClient {
-            throw new NNTPConnectionClosedException("NNTP response 400 received.  Server closed connection.");
+            throw new NNTPConnectionClosedException(
+                "NNTP response 400 received.  Server closed connection.");
@@ -323,2 +423,4 @@ public class NNTP extends SocketClient {
-     * Returns the integer value of the reply code of the last NNTP reply. You will usually only use this method after you connect to the NNTP server to check
-     * that the connection was successful since <code> connect </code> is of type void.
+     * Returns the integer value of the reply code of the last NNTP reply.
+     * You will usually only use this method after you connect to the
+     * NNTP server to check that the connection was successful since
+     * <code> connect </code> is of type void.
@@ -326 +427,0 @@ public class NNTP extends SocketClient {
-     *
@@ -329 +430,2 @@ public class NNTP extends SocketClient {
-    public int getReplyCode() {
+    public int getReplyCode()
+    {
@@ -334 +436,2 @@ public class NNTP extends SocketClient {
-     * Returns the entire text of the last NNTP server response exactly as it was received, not including the end of line marker.
+     * Returns the entire text of the last NNTP server response exactly
+     * as it was received, not including the end of line marker.
@@ -336 +438,0 @@ public class NNTP extends SocketClient {
-     *
@@ -339 +441,2 @@ public class NNTP extends SocketClient {
-    public String getReplyString() {
+    public String getReplyString()
+    {
@@ -342,0 +446,2 @@ public class NNTP extends SocketClient {
+
+
@@ -344 +449,2 @@ public class NNTP extends SocketClient {
-     * A convenience method to send the NNTP GROUP command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the NNTP GROUP command to the server,
+     * receive the reply, and return the reply code.
@@ -346,2 +452 @@ public class NNTP extends SocketClient {
-     *
-     * @param newsgroup The name of the newsgroup to select.
+     * @param newsgroup  The name of the newsgroup to select.
@@ -349,4 +454,7 @@ public class NNTP extends SocketClient {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -354 +462,2 @@ public class NNTP extends SocketClient {
-    public int group(final String newsgroup) throws IOException {
+    public int group(final String newsgroup) throws IOException
+    {
@@ -359 +468,2 @@ public class NNTP extends SocketClient {
-     * A convenience method to send the NNTP HEAD command to the server, receive the initial reply, and return the reply code.
+     * A convenience method to send the NNTP HEAD command to the server,
+     * receive the initial reply, and return the reply code.
@@ -361 +470,0 @@ public class NNTP extends SocketClient {
-     *
@@ -363,4 +472,7 @@ public class NNTP extends SocketClient {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -368 +480,2 @@ public class NNTP extends SocketClient {
-    public int head() throws IOException {
+    public int head() throws IOException
+    {
@@ -379 +492,2 @@ public class NNTP extends SocketClient {
-    public int head(final int a) throws IOException {
+    public int head(final int a) throws IOException
+    {
@@ -382,0 +497,2 @@ public class NNTP extends SocketClient {
+
+
@@ -384 +500,2 @@ public class NNTP extends SocketClient {
-     * A convenience method to send the NNTP HEAD command to the server, receive the initial reply, and return the reply code.
+     * A convenience method to send the NNTP HEAD command to the server,
+     * receive the initial reply, and return the reply code.
@@ -386,2 +503,2 @@ public class NNTP extends SocketClient {
-     *
-     * @param articleNumber The number of the article to request from the currently selected newsgroup.
+     * @param articleNumber The number of the article to request from the
+     *                      currently selected newsgroup.
@@ -389,4 +506,7 @@ public class NNTP extends SocketClient {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -394 +514,2 @@ public class NNTP extends SocketClient {
-    public int head(final long articleNumber) throws IOException {
+    public int head(final long articleNumber) throws IOException
+    {
@@ -399 +520,2 @@ public class NNTP extends SocketClient {
-     * A convenience method to send the NNTP HEAD command to the server, receive the initial reply, and return the reply code.
+     * A convenience method to send the NNTP HEAD command to the server,
+     * receive the initial reply, and return the reply code.
@@ -401,2 +523,2 @@ public class NNTP extends SocketClient {
-     *
-     * @param messageId The message identifier of the requested article, including the encapsulating &lt; and &gt; characters.
+     * @param messageId  The message identifier of the requested article,
+     *                   including the encapsulating &lt; and &gt; characters.
@@ -404,4 +526,7 @@ public class NNTP extends SocketClient {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -409 +534,2 @@ public class NNTP extends SocketClient {
-    public int head(final String messageId) throws IOException {
+    public int head(final String messageId) throws IOException
+    {
@@ -414 +540,2 @@ public class NNTP extends SocketClient {
-     * A convenience method to send the NNTP HELP command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the NNTP HELP command to the server,
+     * receive the reply, and return the reply code.
@@ -416 +542,0 @@ public class NNTP extends SocketClient {
-     *
@@ -418,4 +544,7 @@ public class NNTP extends SocketClient {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -423 +552,2 @@ public class NNTP extends SocketClient {
-    public int help() throws IOException {
+    public int help() throws IOException
+    {
@@ -426,0 +557 @@ public class NNTP extends SocketClient {
+
@@ -428 +559,2 @@ public class NNTP extends SocketClient {
-     * A convenience method to send the NNTP IHAVE command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the NNTP IHAVE command to the server,
+     * receive the reply, and return the reply code.
@@ -430,2 +562,2 @@ public class NNTP extends SocketClient {
-     *
-     * @param messageId The article identifier, including the encapsulating &lt; and &gt; characters.
+     * @param messageId  The article identifier,
+     *                   including the encapsulating &lt; and &gt; characters.
@@ -433,4 +565,7 @@ public class NNTP extends SocketClient {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -438 +573,2 @@ public class NNTP extends SocketClient {
-    public int ihave(final String messageId) throws IOException {
+    public int ihave(final String messageId) throws IOException
+    {
@@ -441,0 +578 @@ public class NNTP extends SocketClient {
+
@@ -443 +580,2 @@ public class NNTP extends SocketClient {
-     * Indicates whether or not the client is allowed to post articles to the server it is currently connected to.
+     * Indicates whether or not the client is allowed to post articles to
+     * the server it is currently connected to.
@@ -445,2 +583,2 @@ public class NNTP extends SocketClient {
-     *
-     * @return True if the client can post articles to the server, false otherwise.
+     * @return True if the client can post articles to the server, false
+     *         otherwise.
@@ -448 +586,2 @@ public class NNTP extends SocketClient {
-    public boolean isAllowedToPost() {
+    public boolean isAllowedToPost()
+    {
@@ -451,0 +591 @@ public class NNTP extends SocketClient {
+
@@ -453 +593,2 @@ public class NNTP extends SocketClient {
-     * A convenience method to send the NNTP LAST command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the NNTP LAST command to the server,
+     * receive the reply, and return the reply code.
@@ -455 +595,0 @@ public class NNTP extends SocketClient {
-     *
@@ -457,4 +597,7 @@ public class NNTP extends SocketClient {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -462 +605,2 @@ public class NNTP extends SocketClient {
-    public int last() throws IOException {
+    public int last() throws IOException
+    {
@@ -465,0 +610 @@ public class NNTP extends SocketClient {
+
@@ -467 +612,2 @@ public class NNTP extends SocketClient {
-     * A convenience method to send the NNTP LIST command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the NNTP LIST command to the server,
+     * receive the reply, and return the reply code.
@@ -469 +614,0 @@ public class NNTP extends SocketClient {
-     *
@@ -471,4 +616,7 @@ public class NNTP extends SocketClient {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -476 +624,2 @@ public class NNTP extends SocketClient {
-    public int list() throws IOException {
+    public int list() throws IOException
+    {
@@ -479,0 +629,2 @@ public class NNTP extends SocketClient {
+
+
@@ -481 +632,2 @@ public class NNTP extends SocketClient {
-     * A convenience wrapper for the extended LIST command that takes an argument, allowing us to selectively list multiple groups.
+     * A convenience wrapper for the extended LIST command that takes
+     * an argument, allowing us to selectively list multiple groups.
@@ -483,2 +635,2 @@ public class NNTP extends SocketClient {
-     *
-     * @param wildmat A wildmat (pseudo-regex) pattern. See RFC 2980 for details.
+     * @param wildmat A wildmat (pseudo-regex) pattern. See RFC 2980 for
+     *                details.
@@ -493,0 +646,2 @@ public class NNTP extends SocketClient {
+
+
@@ -495 +649,2 @@ public class NNTP extends SocketClient {
-     * A convenience method to send the "NEWGROUPS" command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the "NEWGROUPS" command to the server,
+     * receive the reply, and return the reply code.
@@ -497,5 +652,7 @@ public class NNTP extends SocketClient {
-     *
-     * @param date          The date after which to check for new groups. Date format is YYMMDD
-     * @param time          The time after which to check for new groups. Time format is HHMMSS using a 24-hour clock.
-     * @param GMT           True if the time is in GMT, false if local server time.
-     * @param distributions Comma-separated distribution list to check for new groups. Set to null if no distributions.
+     * @param date The date after which to check for new groups.
+     *             Date format is YYMMDD
+     * @param time The time after which to check for new groups.
+     *             Time format is HHMMSS using a 24-hour clock.
+     * @param GMT  True if the time is in GMT, false if local server time.
+     * @param distributions  Comma-separated distribution list to check for
+     *            new groups. Set to null if no distributions.
@@ -503,4 +660,7 @@ public class NNTP extends SocketClient {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -508 +668,3 @@ public class NNTP extends SocketClient {
-    public int newgroups(final String date, final String time, final boolean GMT, final String distributions) throws IOException {
+    public int newgroups(final String date, final String time, final boolean GMT,
+                         final String distributions) throws IOException
+    {
@@ -515 +677,2 @@ public class NNTP extends SocketClient {
-        if (GMT) {
+        if (GMT)
+        {
@@ -520 +683,2 @@ public class NNTP extends SocketClient {
-        if (distributions != null) {
+        if (distributions != null)
+        {
@@ -528,0 +693 @@ public class NNTP extends SocketClient {
+
@@ -530 +695,2 @@ public class NNTP extends SocketClient {
-     * A convenience method to send the "NEWNEWS" command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the "NEWNEWS" command to the server,
+     * receive the reply, and return the reply code.
@@ -532,6 +698,9 @@ public class NNTP extends SocketClient {
-     *
-     * @param newsgroups    A comma-separated list of newsgroups to check for new news.
-     * @param date          The date after which to check for new news. Date format is YYMMDD
-     * @param time          The time after which to check for new news. Time format is HHMMSS using a 24-hour clock.
-     * @param GMT           True if the time is in GMT, false if local server time.
-     * @param distributions Comma-separated distribution list to check for new news. Set to null if no distributions.
+     * @param newsgroups A comma-separated list of newsgroups to check for new
+     *             news.
+     * @param date The date after which to check for new news.
+     *             Date format is YYMMDD
+     * @param time The time after which to check for new news.
+     *             Time format is HHMMSS using a 24-hour clock.
+     * @param GMT  True if the time is in GMT, false if local server time.
+     * @param distributions  Comma-separated distribution list to check for
+     *            new news. Set to null if no distributions.
@@ -539,4 +708,7 @@ public class NNTP extends SocketClient {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -544 +716,3 @@ public class NNTP extends SocketClient {
-    public int newnews(final String newsgroups, final String date, final String time, final boolean GMT, final String distributions) throws IOException {
+    public int newnews(final String newsgroups, final String date, final String time, final boolean GMT,
+                       final String distributions) throws IOException
+    {
@@ -553 +727,2 @@ public class NNTP extends SocketClient {
-        if (GMT) {
+        if (GMT)
+        {
@@ -558 +733,2 @@ public class NNTP extends SocketClient {
-        if (distributions != null) {
+        if (distributions != null)
+        {
@@ -566,0 +743 @@ public class NNTP extends SocketClient {
+
@@ -568 +745,2 @@ public class NNTP extends SocketClient {
-     * A convenience method to send the NNTP NEXT command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the NNTP NEXT command to the server,
+     * receive the reply, and return the reply code.
@@ -570 +747,0 @@ public class NNTP extends SocketClient {
-     *
@@ -572,4 +749,7 @@ public class NNTP extends SocketClient {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -577 +757,2 @@ public class NNTP extends SocketClient {
-    public int next() throws IOException {
+    public int next() throws IOException
+    {
@@ -580,0 +762,2 @@ public class NNTP extends SocketClient {
+
+
@@ -582 +765,2 @@ public class NNTP extends SocketClient {
-     * A convenience method to send the NNTP POST command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the NNTP POST command to the server,
+     * receive the reply, and return the reply code.
@@ -584 +767,0 @@ public class NNTP extends SocketClient {
-     *
@@ -586,4 +769,7 @@ public class NNTP extends SocketClient {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -591 +777,2 @@ public class NNTP extends SocketClient {
-    public int post() throws IOException {
+    public int post() throws IOException
+    {
@@ -594,0 +782,2 @@ public class NNTP extends SocketClient {
+
+
@@ -596 +785,2 @@ public class NNTP extends SocketClient {
-     * A convenience method to send the NNTP QUIT command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the NNTP QUIT command to the server,
+     * receive the reply, and return the reply code.
@@ -598 +787,0 @@ public class NNTP extends SocketClient {
-     *
@@ -600,4 +789,7 @@ public class NNTP extends SocketClient {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -605 +797,2 @@ public class NNTP extends SocketClient {
-    public int quit() throws IOException {
+    public int quit() throws IOException
+    {
@@ -610,2 +803,4 @@ public class NNTP extends SocketClient {
-     * Sends an NNTP command with no arguments to the server, waits for a reply and returns the numerical response code. After invocation, for more detailed
-     * information, the actual reply text can be accessed by calling {@link #getReplyString getReplyString }.
+     * Sends an NNTP command with no arguments to the server, waits for a
+     * reply and returns the numerical response code.  After invocation, for
+     * more detailed information, the actual reply text can be accessed by
+     * calling {@link #getReplyString  getReplyString }.
@@ -613,7 +808,12 @@ public class NNTP extends SocketClient {
-     *
-     * @param command The NNTPCommand constant corresponding to the NNTP command to send.
-     * @return The integer value of the NNTP reply code returned by the server in response to the command. in response to the command.
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @param command  The NNTPCommand constant corresponding to the NNTP command
+     *                 to send.
+     * @return The integer value of the NNTP reply code returned by the server
+     *         in response to the command.
+     *         in response to the command.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -621 +821,2 @@ public class NNTP extends SocketClient {
-    public int sendCommand(final int command) throws IOException {
+    public int sendCommand(final int command) throws IOException
+    {
@@ -626,2 +827,4 @@ public class NNTP extends SocketClient {
-     * Sends an NNTP command to the server, waits for a reply and returns the numerical response code. After invocation, for more detailed information, the
-     * actual reply text can be accessed by calling {@link #getReplyString getReplyString }.
+     * Sends an NNTP command to the server, waits for a reply and returns the
+     * numerical response code.  After invocation, for more detailed
+     * information, the actual reply text can be accessed by calling
+     * {@link #getReplyString  getReplyString }.
@@ -629,8 +832,14 @@ public class NNTP extends SocketClient {
-     *
-     * @param command The NNTPCommand constant corresponding to the NNTP command to send.
-     * @param args    The arguments to the NNTP command. If this parameter is set to null, then the command is sent with no argument.
-     * @return The integer value of the NNTP reply code returned by the server in response to the command. in response to the command.
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @param command  The NNTPCommand constant corresponding to the NNTP command
+     *                 to send.
+     * @param args The arguments to the NNTP command.  If this parameter is
+     *             set to null, then the command is sent with no argument.
+     * @return The integer value of the NNTP reply code returned by the server
+     *         in response to the command.
+     *         in response to the command.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -638 +847,2 @@ public class NNTP extends SocketClient {
-    public int sendCommand(final int command, final String args) throws IOException {
+    public int sendCommand(final int command, final String args) throws IOException
+    {
@@ -643,2 +853,4 @@ public class NNTP extends SocketClient {
-     * Sends an NNTP command with no arguments to the server, waits for a reply and returns the numerical response code. After invocation, for more detailed
-     * information, the actual reply text can be accessed by calling {@link #getReplyString getReplyString }.
+     * Sends an NNTP command with no arguments to the server, waits for a
+     * reply and returns the numerical response code.  After invocation, for
+     * more detailed information, the actual reply text can be accessed by
+     * calling {@link #getReplyString  getReplyString }.
@@ -646,7 +858,11 @@ public class NNTP extends SocketClient {
-     *
-     * @param command The text representation of the NNTP command to send.
-     * @return The integer value of the NNTP reply code returned by the server in response to the command. in response to the command.
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @param command  The text representation of the  NNTP command to send.
+     * @return The integer value of the NNTP reply code returned by the server
+     *         in response to the command.
+     *         in response to the command.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -654 +870,2 @@ public class NNTP extends SocketClient {
-    public int sendCommand(final String command) throws IOException {
+    public int sendCommand(final String command) throws IOException
+    {
@@ -659,2 +876,4 @@ public class NNTP extends SocketClient {
-     * Sends an NNTP command to the server, waits for a reply and returns the numerical response code. After invocation, for more detailed information, the
-     * actual reply text can be accessed by calling {@link #getReplyString getReplyString }.
+     * Sends an NNTP command to the server, waits for a reply and returns the
+     * numerical response code.  After invocation, for more detailed
+     * information, the actual reply text can be accessed by calling
+     * {@link #getReplyString  getReplyString }.
@@ -662,8 +881,12 @@ public class NNTP extends SocketClient {
-     *
-     * @param command The text representation of the NNTP command to send.
-     * @param args    The arguments to the NNTP command. If this parameter is set to null, then the command is sent with no argument.
-     * @return The integer value of the NNTP reply code returned by the server in response to the command.
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @param command  The text representation of the  NNTP command to send.
+     * @param args The arguments to the NNTP command.  If this parameter is
+     *             set to null, then the command is sent with no argument.
+     * @return The integer value of the NNTP reply code returned by the server
+     *         in response to the command.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -671 +894,2 @@ public class NNTP extends SocketClient {
-    public int sendCommand(final String command, final String args) throws IOException {
+    public int sendCommand(final String command, final String args) throws IOException
+    {
@@ -675 +899,2 @@ public class NNTP extends SocketClient {
-        if (args != null) {
+        if (args != null)
+        {
@@ -691 +916,2 @@ public class NNTP extends SocketClient {
-     * A convenience method to send the NNTP STAT command to the server, receive the initial reply, and return the reply code.
+     * A convenience method to send the NNTP STAT command to the server,
+     * receive the initial reply, and return the reply code.
@@ -693 +918,0 @@ public class NNTP extends SocketClient {
-     *
@@ -695,4 +920,7 @@ public class NNTP extends SocketClient {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -700 +928,2 @@ public class NNTP extends SocketClient {
-    public int stat() throws IOException {
+    public int stat() throws IOException
+    {
@@ -713 +942,2 @@ public class NNTP extends SocketClient {
-    public int stat(final int a) throws IOException {
+    public int stat(final int a) throws IOException
+    {
@@ -718 +948,2 @@ public class NNTP extends SocketClient {
-     * A convenience method to send the NNTP STAT command to the server, receive the initial reply, and return the reply code.
+     * A convenience method to send the NNTP STAT command to the server,
+     * receive the initial reply, and return the reply code.
@@ -720,2 +951,2 @@ public class NNTP extends SocketClient {
-     *
-     * @param articleNumber The number of the article to request from the currently selected newsgroup.
+     * @param articleNumber The number of the article to request from the
+     *                      currently selected newsgroup.
@@ -723,4 +954,7 @@ public class NNTP extends SocketClient {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -728 +962,2 @@ public class NNTP extends SocketClient {
-    public int stat(final long articleNumber) throws IOException {
+    public int stat(final long articleNumber) throws IOException
+    {
@@ -733 +968,2 @@ public class NNTP extends SocketClient {
-     * A convenience method to send the NNTP STAT command to the server, receive the initial reply, and return the reply code.
+     * A convenience method to send the NNTP STAT command to the server,
+     * receive the initial reply, and return the reply code.
@@ -735,2 +971,2 @@ public class NNTP extends SocketClient {
-     *
-     * @param messageId The message identifier of the requested article, including the encapsulating &lt; and &gt; characters.
+     * @param messageId  The message identifier of the requested article,
+     *                   including the encapsulating &lt; and &gt; characters.
@@ -738,4 +974,7 @@ public class NNTP extends SocketClient {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -743 +982,2 @@ public class NNTP extends SocketClient {
-    public int stat(final String messageId) throws IOException {
+    public int stat(final String messageId) throws IOException
+    {
@@ -748 +988,2 @@ public class NNTP extends SocketClient {
-     * A convenience method to send the NNTP XHDR command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the NNTP XHDR command to the server,
+     * receive the reply, and return the reply code.
@@ -750,5 +991,9 @@ public class NNTP extends SocketClient {
-     *
-     * @param header           a String naming a header line (e.g., "subject"). See RFC-1036 for a list of valid header lines.
-     * @param selectedArticles a String representation of the range of article headers required. This may be an article number, or a range of article numbers in
-     *                         the form "XXXX-YYYY", where XXXX and YYYY are valid article numbers in the current group. It also may be of the form "XXX-",
-     *                         meaning "return XXX and all following articles" In this revision, the last format is not possible (yet).
+     * @param header a String naming a header line (e.g., "subject").  See
+     * RFC-1036 for a list of valid header lines.
+     * @param selectedArticles a String representation of the range of
+     * article headers required. This may be an article number, or a
+     * range of article numbers in the form "XXXX-YYYY", where XXXX
+     * and YYYY are valid article numbers in the current group.  It
+     * also may be of the form "XXX-", meaning "return XXX and all
+     * following articles" In this revision, the last format is not
+     * possible (yet).
@@ -756,4 +1001,7 @@ public class NNTP extends SocketClient {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -769 +1017,2 @@ public class NNTP extends SocketClient {
-     * A convenience method to send the NNTP XOVER command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the NNTP XOVER command to the server,
+     * receive the reply, and return the reply code.
@@ -771,4 +1020,7 @@ public class NNTP extends SocketClient {
-     *
-     * @param selectedArticles a String representation of the range of article headers required. This may be an article number, or a range of article numbers in
-     *                         the form "XXXX-YYYY", where XXXX and YYYY are valid article numbers in the current group. It also may be of the form "XXX-",
-     *                         meaning "return XXX and all following articles" In this revision, the last format is not possible (yet).
+     * @param selectedArticles a String representation of the range of
+     * article headers required. This may be an article number, or a
+     * range of article numbers in the form "XXXX-YYYY", where XXXX
+     * and YYYY are valid article numbers in the current group.  It
+     * also may be of the form "XXX-", meaning "return XXX and all
+     * following articles" In this revision, the last format is not
+     * possible (yet).
@@ -776,4 +1028,7 @@ public class NNTP extends SocketClient {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
diff --git a/src/main/java/org/apache/commons/net/nntp/NNTPClient.java b/src/main/java/org/apache/commons/net/nntp/NNTPClient.java
index 47b145ad7..806fcc79b 100644
--- a/src/main/java/org/apache/commons/net/nntp/NNTPClient.java
+++ b/src/main/java/org/apache/commons/net/nntp/NNTPClient.java
@@ -35,4 +35,12 @@ import org.apache.commons.net.util.NetConstants;
- * NNTPClient encapsulates all the functionality necessary to post and retrieve articles from an NNTP server. As with all classes derived from
- * {@link org.apache.commons.net.SocketClient}, you must first connect to the server with {@link org.apache.commons.net.SocketClient#connect connect } before
- * doing anything, and finally {@link org.apache.commons.net.nntp.NNTP#disconnect disconnect() } after you're completely finished interacting with the server.
- * Remember that the {@link org.apache.commons.net.nntp.NNTP#isAllowedToPost isAllowedToPost()} method is defined in {@link org.apache.commons.net.nntp.NNTP}.
+ * NNTPClient encapsulates all the functionality necessary to post and
+ * retrieve articles from an NNTP server.  As with all classes derived
+ * from {@link org.apache.commons.net.SocketClient},
+ * you must first connect to the server with
+ * {@link org.apache.commons.net.SocketClient#connect  connect }
+ * before doing anything, and finally
+ * {@link org.apache.commons.net.nntp.NNTP#disconnect  disconnect() }
+ * after you're completely finished interacting with the server.
+ * Remember that the
+ * {@link org.apache.commons.net.nntp.NNTP#isAllowedToPost isAllowedToPost()}
+ *  method is defined in
+ * {@link org.apache.commons.net.nntp.NNTP}.
@@ -40,10 +48,23 @@ import org.apache.commons.net.util.NetConstants;
- * You should keep in mind that the NNTP server may choose to prematurely close a connection if the client has been idle for longer than a given time period or
- * if the server is being shutdown by the operator or some other reason. The NNTP class will detect a premature NNTP server connection closing when it receives
- * a {@link org.apache.commons.net.nntp.NNTPReply#SERVICE_DISCONTINUED NNTPReply.SERVICE_DISCONTINUED } response to a command. When that occurs, the NNTP class
- * method encountering that reply will throw an {@link org.apache.commons.net.nntp.NNTPConnectionClosedException} . <code>NNTPConectionClosedException</code> is
- * a subclass of <code> IOException </code> and therefore need not be caught separately, but if you are going to catch it separately, its catch block must
- * appear before the more general <code> IOException </code> catch block. When you encounter an
- * {@link org.apache.commons.net.nntp.NNTPConnectionClosedException} , you must disconnect the connection with
- * {@link org.apache.commons.net.nntp.NNTP#disconnect disconnect() } to properly clean up the system resources used by NNTP. Before disconnecting, you may check
- * the last reply code and text with {@link org.apache.commons.net.nntp.NNTP#getReplyCode getReplyCode } and
- * {@link org.apache.commons.net.nntp.NNTP#getReplyString getReplyString }.
+ * You should keep in mind that the NNTP server may choose to prematurely
+ * close a connection if the client has been idle for longer than a
+ * given time period or if the server is being shutdown by the operator or
+ * some other reason.  The NNTP class will detect a
+ * premature NNTP server connection closing when it receives a
+ * {@link org.apache.commons.net.nntp.NNTPReply#SERVICE_DISCONTINUED NNTPReply.SERVICE_DISCONTINUED }
+ *  response to a command.
+ * When that occurs, the NNTP class method encountering that reply will throw
+ * an {@link org.apache.commons.net.nntp.NNTPConnectionClosedException}
+ * .
+ * <code>NNTPConectionClosedException</code>
+ * is a subclass of <code> IOException </code> and therefore need not be
+ * caught separately, but if you are going to catch it separately, its
+ * catch block must appear before the more general <code> IOException </code>
+ * catch block.  When you encounter an
+ * {@link org.apache.commons.net.nntp.NNTPConnectionClosedException}
+ * , you must disconnect the connection with
+ * {@link org.apache.commons.net.nntp.NNTP#disconnect  disconnect() }
+ *  to properly clean up the
+ * system resources used by NNTP.  Before disconnecting, you may check the
+ * last reply code and text with
+ * {@link org.apache.commons.net.nntp.NNTP#getReplyCode  getReplyCode } and
+ * {@link org.apache.commons.net.nntp.NNTP#getReplyString  getReplyString }.
@@ -51,4 +72,9 @@ import org.apache.commons.net.util.NetConstants;
- * Rather than list it separately for each method, we mention here that every method communicating with the server and throwing an IOException can also throw a
- * {@link org.apache.commons.net.MalformedServerReplyException} , which is a subclass of IOException. A MalformedServerReplyException will be thrown when the
- * reply received from the server deviates enough from the protocol specification that it cannot be interpreted in a useful manner despite attempts to be as
- * lenient as possible.
+ * Rather than list it separately for each method, we mention here that
+ * every method communicating with the server and throwing an IOException
+ * can also throw a
+ * {@link org.apache.commons.net.MalformedServerReplyException}
+ * , which is a subclass
+ * of IOException.  A MalformedServerReplyException will be thrown when
+ * the reply received from the server deviates enough from the protocol
+ * specification that it cannot be interpreted in a useful manner despite
+ * attempts to be as lenient as possible.
@@ -61 +87,2 @@ import org.apache.commons.net.util.NetConstants;
-public class NNTPClient extends NNTP {
+public class NNTPClient extends NNTP
+{
@@ -69 +96,2 @@ public class NNTPClient extends NNTP {
-     * @return the parsed {@link Article}, if unparseable then isDummy() will be true, and the subject will contain the raw info.
+     * @return the parsed {@link Article}, if unparseable then isDummy()
+     * will be true, and the subject will contain the raw info.
@@ -97,2 +125,5 @@ public class NNTPClient extends NNTP {
-     * 211 n f l s group selected (n = estimated number of articles in group, f = first article number in the group, l = last article number in the group, s =
-     * name of the group.)
+     * 211 n f l s group selected
+     *     (n = estimated number of articles in group,
+     *     f = first article number in the group,
+     *     l = last article number in the group,
+     *     s = name of the group.)
@@ -101 +132,3 @@ public class NNTPClient extends NNTP {
-    private static void parseGroupReply(final String reply, final NewsgroupInfo info) throws MalformedServerReplyException {
+    private static void parseGroupReply(final String reply, final NewsgroupInfo info)
+    throws MalformedServerReplyException
+    {
@@ -104,2 +137,3 @@ public class NNTPClient extends NNTP {
-            int i = 1; // Skip numeric response value
-            try {
+            int i = 1;  // Skip numeric response value
+            try
+            {
@@ -116,3 +150,4 @@ public class NNTPClient extends NNTP {
-                return;
-            } catch (final NumberFormatException e) {
-                // drop through to report error
+                return ;
+            } catch (final NumberFormatException e)
+            {
+               // drop through to report error
@@ -122 +157,2 @@ public class NNTPClient extends NNTP {
-        throw new MalformedServerReplyException("Could not parse newsgroup info.\nServer reply: " + reply);
+        throw new MalformedServerReplyException(
+            "Could not parse newsgroup info.\nServer reply: " + reply);
@@ -124,0 +161 @@ public class NNTPClient extends NNTP {
+
@@ -126 +163,2 @@ public class NNTPClient extends NNTP {
-    static NewsgroupInfo parseNewsgroupListEntry(final String entry) {
+    static NewsgroupInfo parseNewsgroupListEntry(final String entry)
+    {
@@ -137 +175,2 @@ public class NNTPClient extends NNTP {
-        try {
+        try
+        {
@@ -151 +190,2 @@ public class NNTPClient extends NNTP {
-        switch (tokens[i++].charAt(0)) {
+        switch (tokens[i++].charAt(0))
+        {
@@ -154 +194,2 @@ public class NNTPClient extends NNTP {
-            result.setPostingPermission(NewsgroupInfo.PERMITTED_POSTING_PERMISSION);
+            result.setPostingPermission(
+                NewsgroupInfo.PERMITTED_POSTING_PERMISSION);
@@ -158 +199,2 @@ public class NNTPClient extends NNTP {
-            result.setPostingPermission(NewsgroupInfo.PROHIBITED_POSTING_PERMISSION);
+            result.setPostingPermission(
+                NewsgroupInfo.PROHIBITED_POSTING_PERMISSION);
@@ -162 +204,2 @@ public class NNTPClient extends NNTP {
-            result.setPostingPermission(NewsgroupInfo.MODERATED_POSTING_PERMISSION);
+            result.setPostingPermission(
+                NewsgroupInfo.MODERATED_POSTING_PERMISSION);
@@ -165 +208,2 @@ public class NNTPClient extends NNTP {
-            result.setPostingPermission(NewsgroupInfo.UNKNOWN_POSTING_PERMISSION);
+            result.setPostingPermission(
+                NewsgroupInfo.UNKNOWN_POSTING_PERMISSION);
@@ -173 +217 @@ public class NNTPClient extends NNTP {
-    private void ai2ap(final ArticleInfo ai, final ArticlePointer ap) {
+    private void ai2ap(final ArticleInfo ai, final ArticlePointer ap){
@@ -187,0 +232 @@ public class NNTPClient extends NNTP {
+
@@ -189,2 +234,3 @@ public class NNTPClient extends NNTP {
-     * Log into a news server by sending the AUTHINFO USER/AUTHINFO PASS command sequence. This is usually sent in response to a 480 reply code from the NNTP
-     * server.
+     * Log into a news server by sending the AUTHINFO USER/AUTHINFO
+     * PASS command sequence. This is usually sent in response to a
+     * 480 reply code from the NNTP server.
@@ -192 +237,0 @@ public class NNTPClient extends NNTP {
-     *
@@ -198 +243,3 @@ public class NNTPClient extends NNTP {
-    public boolean authenticate(final String username, final String password) throws IOException {
+    public boolean authenticate(final String username, final String password)
+        throws IOException
+    {
@@ -201,2 +248,3 @@ public class NNTPClient extends NNTP {
-        if (replyCode == NNTPReply.MORE_AUTH_INFO_REQUIRED) {
-            replyCode = authinfoPass(password);
+        if (replyCode == NNTPReply.MORE_AUTH_INFO_REQUIRED)
+            {
+                replyCode = authinfoPass(password);
@@ -204,3 +252,5 @@ public class NNTPClient extends NNTP {
-            if (replyCode == NNTPReply.AUTHENTICATION_ACCEPTED) {
-                this._isAllowedToPost = true;
-                return true;
+                if (replyCode == NNTPReply.AUTHENTICATION_ACCEPTED)
+                    {
+                        this._isAllowedToPost = true;
+                        return true;
+                    }
@@ -208 +257,0 @@ public class NNTPClient extends NNTP {
-        }
@@ -211,0 +261 @@ public class NNTPClient extends NNTP {
+
@@ -213,3 +263,7 @@ public class NNTPClient extends NNTP {
-     * There are a few NNTPClient methods that do not complete the entire sequence of NNTP commands to complete a transaction. These commands require some
-     * action by the programmer after the reception of a positive preliminary command. After the programmer's code completes its actions, it must call this
-     * method to receive the completion reply from the server and verify the success of the entire transaction.
+     * There are a few NNTPClient methods that do not complete the
+     * entire sequence of NNTP commands to complete a transaction.  These
+     * commands require some action by the programmer after the reception
+     * of a positive preliminary command.  After the programmer's code
+     * completes its actions, it must call this method to receive
+     * the completion reply from the server and verify the success of the
+     * entire transaction.
@@ -218 +271,0 @@ public class NNTPClient extends NNTP {
-     *
@@ -221,2 +274,2 @@ public class NNTPClient extends NNTP {
-     * if (writer == null) // failure
-     *     return false;
+     * if(writer == null) // failure
+     *   return false;
@@ -228,2 +281,2 @@ public class NNTPClient extends NNTP {
-     * if (!client.completePendingCommand()) // failure
-     *     return false;
+     * if(!client.completePendingCommand()) // failure
+     *   return false;
@@ -232 +284,0 @@ public class NNTPClient extends NNTP {
-     *
@@ -234,6 +286,10 @@ public class NNTPClient extends NNTP {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean completePendingCommand() throws IOException {
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean completePendingCommand() throws IOException
+    {
@@ -243 +299,4 @@ public class NNTPClient extends NNTP {
-    public Writer forwardArticle(final String articleId) throws IOException {
+
+
+    public Writer forwardArticle(final String articleId) throws IOException
+    {
@@ -252 +311,2 @@ public class NNTPClient extends NNTP {
-     * Return article headers for all articles between lowArticleNumber and highArticleNumber, inclusively, using the XOVER command.
+     * Return article headers for all articles between lowArticleNumber
+     * and highArticleNumber, inclusively, using the XOVER command.
@@ -254,2 +314 @@ public class NNTPClient extends NNTP {
-     *
-     * @param lowArticleNumber  low
+     * @param lowArticleNumber low
@@ -261,2 +320,4 @@ public class NNTPClient extends NNTP {
-    public Iterable<Article> iterateArticleInfo(final long lowArticleNumber, final long highArticleNumber) throws IOException {
-        final BufferedReader info = retrieveArticleInfo(lowArticleNumber, highArticleNumber);
+    public Iterable<Article> iterateArticleInfo(final long lowArticleNumber, final long highArticleNumber)
+        throws IOException
+    {
+        final BufferedReader info = retrieveArticleInfo(lowArticleNumber,highArticleNumber);
@@ -264 +325 @@ public class NNTPClient extends NNTP {
-            throw new IOException("XOVER command failed: " + getReplyString());
+            throw new IOException("XOVER command failed: "+getReplyString());
@@ -271,3 +332,7 @@ public class NNTPClient extends NNTP {
-     * List all new articles added to the NNTP server since a particular date subject to the conditions of the specified query. If no new new news is found, no
-     * entries will be returned. This uses the "NEWNEWS" command. You must add at least one newsgroup to the query, else the command will fail. Each String
-     * which is returned is a unique message identifier including the enclosing &lt; and &gt;.
+     * List all new articles added to the NNTP server since a particular
+     * date subject to the conditions of the specified query.  If no new
+     * new news is found, no entries will be returned.
+     * This uses the "NEWNEWS" command.
+     * You must add at least one newsgroup to the query, else the command will fail.
+     * Each String which is returned is a unique message identifier including the
+     * enclosing &lt; and &gt;.
@@ -275,8 +340,12 @@ public class NNTPClient extends NNTP {
-     *
-     * @param query The query restricting how to search for new news. You must add at least one newsgroup to the query.
-     * @return An iterator of String instances containing the unique message identifiers for each new article added to the NNTP server. If no new news is found,
-     *         no strings will be returned.
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @param query  The query restricting how to search for new news.  You
+     *    must add at least one newsgroup to the query.
+     * @return An iterator of String instances containing the unique message
+     *    identifiers for each new article added to the NNTP server.  If no
+     *    new news is found, no strings will be returned.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -286 +355,3 @@ public class NNTPClient extends NNTP {
-        if (NNTPReply.isPositiveCompletion(newnews(query.getNewsgroups(), query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {
+        if (NNTPReply.isPositiveCompletion(newnews(
+                query.getNewsgroups(), query.getDate(), query.getTime(),
+                query.isGMT(), query.getDistributions()))) {
@@ -289 +360 @@ public class NNTPClient extends NNTP {
-        throw new IOException("NEWNEWS command failed: " + getReplyString());
+        throw new IOException("NEWNEWS command failed: "+getReplyString());
@@ -291,0 +363 @@ public class NNTPClient extends NNTP {
+
@@ -293,2 +365,4 @@ public class NNTPClient extends NNTP {
-     * List all new newsgroups added to the NNTP server since a particular date subject to the conditions of the specified query. If no new newsgroups were
-     * added, no entries will be returned. This uses the "NEWGROUPS" command.
+     * List all new newsgroups added to the NNTP server since a particular
+     * date subject to the conditions of the specified query.  If no new
+     * newsgroups were added, no entries will be returned.
+     * This uses the "NEWGROUPS" command.
@@ -296,8 +370,11 @@ public class NNTPClient extends NNTP {
-     *
-     * @param query The query restricting how to search for new newsgroups.
-     * @return An iterable of Strings containing the raw information for each new newsgroup added to the NNTP server. If no newsgroups were added, no entries
-     *         will be returned.
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @param query  The query restricting how to search for new newsgroups.
+     * @return An iterable of Strings containing the raw information
+     *    for each new newsgroup added to the NNTP server.   If no newsgroups
+     *    were added, no entries will be returned.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -307 +384,3 @@ public class NNTPClient extends NNTP {
-        if (NNTPReply.isPositiveCompletion(newgroups(query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {
+        if (NNTPReply.isPositiveCompletion(newgroups(
+                query.getDate(), query.getTime(),
+                query.isGMT(), query.getDistributions()))) {
@@ -310 +389 @@ public class NNTPClient extends NNTP {
-        throw new IOException("NEWGROUPS command failed: " + getReplyString());
+        throw new IOException("NEWGROUPS command failed: "+getReplyString());
@@ -314,2 +393,4 @@ public class NNTPClient extends NNTP {
-     * List all new newsgroups added to the NNTP server since a particular date subject to the conditions of the specified query. If no new newsgroups were
-     * added, no entries will be returned. This uses the "NEWGROUPS" command.
+     * List all new newsgroups added to the NNTP server since a particular
+     * date subject to the conditions of the specified query.  If no new
+     * newsgroups were added, no entries will be returned.
+     * This uses the "NEWGROUPS" command.
@@ -317,8 +398,11 @@ public class NNTPClient extends NNTP {
-     *
-     * @param query The query restricting how to search for new newsgroups.
-     * @return An iterable of NewsgroupInfo instances containing the information for each new newsgroup added to the NNTP server. If no newsgroups were added,
-     *         no entries will be returned.
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @param query  The query restricting how to search for new newsgroups.
+     * @return An iterable of NewsgroupInfo instances containing the information
+     *    for each new newsgroup added to the NNTP server.   If no newsgroups
+     *    were added, no entries will be returned.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -330,0 +415,2 @@ public class NNTPClient extends NNTP {
+
+
@@ -332 +418,3 @@ public class NNTPClient extends NNTP {
-     * List all newsgroups served by the NNTP server. If no newsgroups are served, no entries will be returned. The method uses the "LIST" command.
+     * List all newsgroups served by the NNTP server.  If no newsgroups
+     * are served, no entries will be returned.
+     * The method uses the "LIST" command.
@@ -334,7 +422,10 @@ public class NNTPClient extends NNTP {
-     *
-     * @return An iterable of NewsgroupInfo instances containing the information for each newsgroup served by the NNTP server. If no newsgroups are served, no
-     *         entries will be returned.
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @return An iterable of NewsgroupInfo instances containing the information
+     *    for each newsgroup served by the NNTP server.   If no newsgroups
+     *    are served, no entries will be returned.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -347 +438 @@ public class NNTPClient extends NNTP {
-        throw new IOException("LIST command failed: " + getReplyString());
+        throw new IOException("LIST command failed: "+getReplyString());
@@ -351 +442,2 @@ public class NNTPClient extends NNTP {
-     * List the newsgroups that match a given pattern. Uses the "LIST ACTIVE" command.
+     * List the newsgroups that match a given pattern.
+     * Uses the "LIST ACTIVE" command.
@@ -353 +444,0 @@ public class NNTPClient extends NNTP {
-     *
@@ -355,2 +446,4 @@ public class NNTPClient extends NNTP {
-     * @return An iterable of Strings containing the raw information for each newsgroup served by the NNTP server corresponding to the supplied pattern. If no
-     *         such newsgroups are served, no entries will be returned.
+     * @return An iterable of Strings containing the raw information
+     *    for each newsgroup served by the NNTP server corresponding to the
+     *    supplied pattern.   If no such newsgroups are served, no entries
+     *    will be returned.
@@ -361 +454 @@ public class NNTPClient extends NNTP {
-        if (NNTPReply.isPositiveCompletion(listActive(wildmat))) {
+        if(NNTPReply.isPositiveCompletion(listActive(wildmat))) {
@@ -364 +457 @@ public class NNTPClient extends NNTP {
-        throw new IOException("LIST ACTIVE " + wildmat + " command failed: " + getReplyString());
+        throw new IOException("LIST ACTIVE "+wildmat+" command failed: "+getReplyString());
@@ -368 +461,3 @@ public class NNTPClient extends NNTP {
-     * List all newsgroups served by the NNTP server. If no newsgroups are served, no entries will be returned. The method uses the "LIST" command.
+     * List all newsgroups served by the NNTP server.  If no newsgroups
+     * are served, no entries will be returned.
+     * The method uses the "LIST" command.
@@ -370,7 +465,10 @@ public class NNTPClient extends NNTP {
-     *
-     * @return An iterable of Strings containing the raw information for each newsgroup served by the NNTP server. If no newsgroups are served, no entries will
-     *         be returned.
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @return An iterable of Strings containing the raw information
+     *    for each newsgroup served by the NNTP server.   If no newsgroups
+     *    are served, no entries will be returned.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -382,0 +481 @@ public class NNTPClient extends NNTP {
+
@@ -384 +483,2 @@ public class NNTPClient extends NNTP {
-     * List the newsgroups that match a given pattern. Uses the "LIST ACTIVE" command.
+     * List the newsgroups that match a given pattern.
+     * Uses the "LIST ACTIVE" command.
@@ -386 +485,0 @@ public class NNTPClient extends NNTP {
-     *
@@ -388,2 +487,4 @@ public class NNTPClient extends NNTP {
-     * @return An iterable NewsgroupInfo instances containing the information for each newsgroup served by the NNTP server corresponding to the supplied
-     *         pattern. If no such newsgroups are served, no entries will be returned.
+     * @return An iterable NewsgroupInfo instances containing the information
+     *    for each newsgroup served by the NNTP server corresponding to the
+     *    supplied pattern.   If no such newsgroups are served, no entries
+     *    will be returned.
@@ -396,0 +498 @@ public class NNTPClient extends NNTP {
+
@@ -400 +501,0 @@ public class NNTPClient extends NNTP {
-     *
@@ -402,6 +503,10 @@ public class NNTPClient extends NNTP {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public String listHelp() throws IOException {
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public String listHelp() throws IOException
+    {
@@ -412 +517,2 @@ public class NNTPClient extends NNTP {
-        try (final StringWriter help = new StringWriter(); final BufferedReader reader = new DotTerminatedMessageReader(_reader_)) {
+        try (final StringWriter help = new StringWriter();
+                final BufferedReader reader = new DotTerminatedMessageReader(_reader_)) {
@@ -417,0 +524,2 @@ public class NNTPClient extends NNTP {
+
+
@@ -419,3 +527,8 @@ public class NNTPClient extends NNTP {
-     * List all new articles added to the NNTP server since a particular date subject to the conditions of the specified query. If no new new news is found, a
-     * zero length array will be returned. If the command fails, null will be returned. You must add at least one newsgroup to the query, else the command will
-     * fail. Each String in the returned array is a unique message identifier including the enclosing &lt; and &gt;. This uses the "NEWNEWS" command.
+     * List all new articles added to the NNTP server since a particular
+     * date subject to the conditions of the specified query.  If no new
+     * new news is found, a zero length array will be returned.  If the
+     * command fails, null will be returned.  You must add at least one
+     * newsgroup to the query, else the command will fail.  Each String
+     * in the returned array is a unique message identifier including the
+     * enclosing &lt; and &gt;.
+     * This uses the "NEWNEWS" command.
@@ -423,8 +536,13 @@ public class NNTPClient extends NNTP {
-     *
-     * @param query The query restricting how to search for new news. You must add at least one newsgroup to the query.
-     * @return An array of String instances containing the unique message identifiers for each new article added to the NNTP server. If no new news is found, a
-     *         zero length array will be returned. If the command fails, null will be returned.
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @param query  The query restricting how to search for new news.  You
+     *    must add at least one newsgroup to the query.
+     * @return An array of String instances containing the unique message
+     *    identifiers for each new article added to the NNTP server.  If no
+     *    new news is found, a zero length array will be returned.  If the
+     *    command fails, null will be returned.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -434,2 +552,5 @@ public class NNTPClient extends NNTP {
-    public String[] listNewNews(final NewGroupsOrNewsQuery query) throws IOException {
-        if (!NNTPReply.isPositiveCompletion(newnews(query.getNewsgroups(), query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {
+    public String[] listNewNews(final NewGroupsOrNewsQuery query)
+    throws IOException
+    {
+        if (!NNTPReply.isPositiveCompletion(newnews(query.getNewsgroups(), query.getDate(), query.getTime(),
+                query.isGMT(), query.getDistributions()))) {
@@ -460,2 +581,5 @@ public class NNTPClient extends NNTP {
-     * List all new newsgroups added to the NNTP server since a particular date subject to the conditions of the specified query. If no new newsgroups were
-     * added, a zero length array will be returned. If the command fails, null will be returned. This uses the "NEWGROUPS" command.
+     * List all new newsgroups added to the NNTP server since a particular
+     * date subject to the conditions of the specified query.  If no new
+     * newsgroups were added, a zero length array will be returned.  If the
+     * command fails, null will be returned.
+     * This uses the "NEWGROUPS" command.
@@ -463,8 +587,12 @@ public class NNTPClient extends NNTP {
-     *
-     * @param query The query restricting how to search for new newsgroups.
-     * @return An array of NewsgroupInfo instances containing the information for each new newsgroup added to the NNTP server. If no newsgroups were added, a
-     *         zero length array will be returned. If the command fails, null will be returned.
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @param query  The query restricting how to search for new newsgroups.
+     * @return An array of NewsgroupInfo instances containing the information
+     *    for each new newsgroup added to the NNTP server.   If no newsgroups
+     *    were added, a zero length array will be returned.  If the command
+     *    fails, null will be returned.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -474,2 +602,7 @@ public class NNTPClient extends NNTP {
-    public NewsgroupInfo[] listNewNewsgroups(final NewGroupsOrNewsQuery query) throws IOException {
-        if (!NNTPReply.isPositiveCompletion(newgroups(query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {
+    public NewsgroupInfo[] listNewNewsgroups(final NewGroupsOrNewsQuery query)
+    throws IOException
+    {
+        if (!NNTPReply.isPositiveCompletion(newgroups(
+                                                query.getDate(), query.getTime(),
+                                                query.isGMT(), query.getDistributions())))
+        {
@@ -483,2 +616,4 @@ public class NNTPClient extends NNTP {
-     * List all newsgroups served by the NNTP server. If no newsgroups are served, a zero length array will be returned. If the command fails, null will be
-     * returned. The method uses the "LIST" command.
+     * List all newsgroups served by the NNTP server.  If no newsgroups
+     * are served, a zero length array will be returned.  If the command
+     * fails, null will be returned.
+     * The method uses the "LIST" command.
@@ -486,7 +621,11 @@ public class NNTPClient extends NNTP {
-     *
-     * @return An array of NewsgroupInfo instances containing the information for each newsgroup served by the NNTP server. If no newsgroups are served, a zero
-     *         length array will be returned. If the command fails, null will be returned.
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @return An array of NewsgroupInfo instances containing the information
+     *    for each newsgroup served by the NNTP server.   If no newsgroups
+     *    are served, a zero length array will be returned.  If the command
+     *    fails, null will be returned.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -496 +635,2 @@ public class NNTPClient extends NNTP {
-    public NewsgroupInfo[] listNewsgroups() throws IOException {
+    public NewsgroupInfo[] listNewsgroups() throws IOException
+    {
@@ -503,0 +644 @@ public class NNTPClient extends NNTP {
+
@@ -505 +646,2 @@ public class NNTPClient extends NNTP {
-     * List the newsgroups that match a given pattern. Uses the "LIST ACTIVE" command.
+     * List the newsgroups that match a given pattern.
+     * Uses the "LIST ACTIVE" command.
@@ -507 +648,0 @@ public class NNTPClient extends NNTP {
-     *
@@ -509,2 +650,4 @@ public class NNTPClient extends NNTP {
-     * @return An array of NewsgroupInfo instances containing the information for each newsgroup served by the NNTP server corresponding to the supplied
-     *         pattern. If no such newsgroups are served, a zero length array will be returned. If the command fails, null will be returned.
+     * @return An array of NewsgroupInfo instances containing the information
+     *    for each newsgroup served by the NNTP server corresponding to the
+     *    supplied pattern.   If no such newsgroups are served, a zero length
+     *    array will be returned.  If the command fails, null will be returned.
@@ -515,2 +658,3 @@ public class NNTPClient extends NNTP {
-    public NewsgroupInfo[] listNewsgroups(final String wildmat) throws IOException {
-        if (!NNTPReply.isPositiveCompletion(listActive(wildmat))) {
+    public NewsgroupInfo[] listNewsgroups(final String wildmat) throws IOException
+    {
+        if(!NNTPReply.isPositiveCompletion(listActive(wildmat))) {
@@ -521,0 +666 @@ public class NNTPClient extends NNTP {
+
@@ -528 +673,2 @@ public class NNTPClient extends NNTP {
-    public String[] listOverviewFmt() throws IOException {
+    public String[] listOverviewFmt() throws IOException
+    {
@@ -542,0 +689 @@ public class NNTPClient extends NNTP {
+
@@ -544,2 +691,3 @@ public class NNTPClient extends NNTP {
-     * Logs out of the news server gracefully by sending the QUIT command. However, you must still disconnect from the server before you can open a new
-     * connection.
+     * Logs out of the news server gracefully by sending the QUIT command.
+     * However, you must still disconnect from the server before you can open
+     * a new connection.
@@ -547 +694,0 @@ public class NNTPClient extends NNTP {
-     *
@@ -549 +696,2 @@ public class NNTPClient extends NNTP {
-     * @throws IOException If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -551 +699,2 @@ public class NNTPClient extends NNTP {
-    public boolean logout() throws IOException {
+    public boolean logout() throws IOException
+    {
@@ -558 +707 @@ public class NNTPClient extends NNTP {
-     * @param reply   the reply to parse "22n nnn <aaa>"
+     * @param reply the reply to parse "22n nnn <aaa>"
@@ -563 +712,3 @@ public class NNTPClient extends NNTP {
-    private void parseArticlePointer(final String reply, final ArticleInfo pointer) throws MalformedServerReplyException {
+    private void parseArticlePointer(final String reply, final ArticleInfo pointer)
+    throws MalformedServerReplyException
+    {
@@ -567 +718,2 @@ public class NNTPClient extends NNTP {
-            try {
+            try
+            {
@@ -573 +725,3 @@ public class NNTPClient extends NNTP {
-            } catch (final NumberFormatException e) {
+            }
+            catch (final NumberFormatException e)
+            {
@@ -577 +731,2 @@ public class NNTPClient extends NNTP {
-        throw new MalformedServerReplyException("Could not parse article pointer.\nServer reply: " + reply);
+        throw new MalformedServerReplyException(
+            "Could not parse article pointer.\nServer reply: " + reply);
@@ -581,3 +736,6 @@ public class NNTPClient extends NNTP {
-     * Post an article to the NNTP server. This method returns a DotTerminatedMessageWriter instance to which the article can be written. Null is returned if
-     * the posting attempt fails. You should check {@link NNTP#isAllowedToPost isAllowedToPost() } before trying to post. However, a posting attempt can fail
-     * due to malformed headers.
+     * Post an article to the NNTP server.  This method returns a
+     * DotTerminatedMessageWriter instance to which the article can be
+     * written.  Null is returned if the posting attempt fails.  You
+     * should check {@link NNTP#isAllowedToPost isAllowedToPost() }
+     *  before trying to post.  However, a posting
+     * attempt can fail due to malformed headers.
@@ -585,4 +743,7 @@ public class NNTPClient extends NNTP {
-     * You must not issue any commands to the NNTP server (i.e., call any (other methods) until you finish writing to the returned Writer instance and close it.
-     * The NNTP protocol uses the same stream for issuing commands as it does for returning results. Therefore the returned Writer actually writes directly to
-     * the NNTP connection. After you close the writer, you can execute new commands. If you do not follow these requirements your program will not work
-     * properly.
+     * You must not issue any commands to the NNTP server (i.e., call any
+     * (other methods) until you finish writing to the returned Writer
+     * instance and close it.  The NNTP protocol uses the same stream for
+     * issuing commands as it does for returning results.  Therefore the
+     * returned Writer actually writes directly to the NNTP connection.
+     * After you close the writer, you can execute new commands.  If you
+     * do not follow these requirements your program will not work properly.
@@ -590,4 +751,10 @@ public class NNTPClient extends NNTP {
-     * Different NNTP servers will require different header formats, but you can use the provided {@link org.apache.commons.net.nntp.SimpleNNTPHeader} class to
-     * construct the bare minimum acceptable header for most news readers. To construct more complicated headers you should refer to RFC 822. When the Java Mail
-     * API is finalized, you will be able to use it to compose fully compliant Internet text messages. The DotTerminatedMessageWriter takes care of doubling
-     * line-leading dots and ending the message with a single dot upon closing, so all you have to worry about is writing the header and the message.
+     * Different NNTP servers will require different header formats, but
+     * you can use the provided
+     * {@link org.apache.commons.net.nntp.SimpleNNTPHeader}
+     * class to construct the bare minimum acceptable header for most
+     * news readers.  To construct more complicated headers you should
+     * refer to RFC 822.  When the Java Mail API is finalized, you will be
+     * able to use it to compose fully compliant Internet text messages.
+     * The DotTerminatedMessageWriter takes care of doubling line-leading
+     * dots and ending the message with a single dot upon closing, so all
+     * you have to worry about is writing the header and the message.
@@ -595,2 +762,4 @@ public class NNTPClient extends NNTP {
-     * Upon closing the returned Writer, you need to call {@link #completePendingCommand completePendingCommand() } to finalize the posting and verify its
-     * success or failure from the server reply.
+     * Upon closing the returned Writer, you need to call
+     * {@link #completePendingCommand  completePendingCommand() }
+     * to finalize the posting and verify its success or failure from
+     * the server reply.
@@ -598,3 +767,4 @@ public class NNTPClient extends NNTP {
-     *
-     * @return A DotTerminatedMessageWriter to which the article (including header) can be written. Returns null if the command fails.
-     * @throws IOException If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @return A DotTerminatedMessageWriter to which the article (including
+     *      header) can be written.  Returns null if the command fails.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -603 +773,2 @@ public class NNTPClient extends NNTP {
-    public Writer postArticle() throws IOException {
+    public Writer postArticle() throws IOException
+    {
@@ -611 +782,2 @@ public class NNTPClient extends NNTP {
-    private NewsgroupInfo[] readNewsgroupListing() throws IOException {
+    private NewsgroupInfo[] readNewsgroupListing() throws IOException
+    {
@@ -638,2 +810,5 @@ public class NNTPClient extends NNTP {
-    private BufferedReader retrieve(final int command, final long articleNumber, final ArticleInfo pointer) throws IOException {
-        if (!NNTPReply.isPositiveCompletion(sendCommand(command, Long.toString(articleNumber)))) {
+    private BufferedReader retrieve(final int command, final long articleNumber, final ArticleInfo pointer)
+    throws IOException
+    {
+        if (!NNTPReply.isPositiveCompletion(sendCommand(command,
+                                            Long.toString(articleNumber)))) {
@@ -650,2 +825,5 @@ public class NNTPClient extends NNTP {
-    private BufferedReader retrieve(final int command, final String articleId, final ArticleInfo pointer) throws IOException {
-        if (articleId != null) {
+    private BufferedReader retrieve(final int command, final String articleId, final ArticleInfo pointer)
+    throws IOException
+    {
+        if (articleId != null)
+        {
@@ -658,0 +837 @@ public class NNTPClient extends NNTP {
+
@@ -667,3 +846,4 @@ public class NNTPClient extends NNTP {
-     * Same as <code> retrieveArticle((String) null) </code> Note: the return can be cast to a {@link BufferedReader}
-     *
-     * @return A DotTerminatedMessageReader instance from which the article can be read. null if the article does not exist.
+     * Same as <code> retrieveArticle((String) null) </code>
+     * Note: the return can be cast to a {@link BufferedReader}
+     * @return A DotTerminatedMessageReader instance from which the article can be read.
+     * null if the article does not exist.
@@ -672 +852,2 @@ public class NNTPClient extends NNTP {
-    public Reader retrieveArticle() throws IOException {
+    public Reader retrieveArticle() throws IOException
+    {
@@ -675,0 +857 @@ public class NNTPClient extends NNTP {
+
@@ -678 +860,2 @@ public class NNTPClient extends NNTP {
-     * @return A DotTerminatedMessageReader instance from which the article can be read. null if the article does not exist.
+     * @return A DotTerminatedMessageReader instance from which the article
+     *         can be read.  null if the article does not exist.
@@ -686,0 +870 @@ public class NNTPClient extends NNTP {
+
@@ -688,3 +872,4 @@ public class NNTPClient extends NNTP {
-     * @param articleNumber The number of the the article to retrieve.
-     * @param pointer       A parameter through which to return the article's number and unique id
-     * @return A DotTerminatedMessageReader instance from which the article can be read. null if the article does not exist.
+     * @param articleNumber  The number of the the article to retrieve.
+     * @param pointer A parameter through which to return the article's number and unique id
+     * @return A DotTerminatedMessageReader instance from which the article
+     *         can be read.  null if the article does not exist.
@@ -696 +881 @@ public class NNTPClient extends NNTP {
-        final ArticleInfo ai = ap2ai(pointer);
+        final ArticleInfo ai =  ap2ai(pointer);
@@ -701,0 +887 @@ public class NNTPClient extends NNTP {
+
@@ -704 +889,0 @@ public class NNTPClient extends NNTP {
-     *
@@ -706 +891,2 @@ public class NNTPClient extends NNTP {
-     * @return A DotTerminatedMessageReader instance from which the article can be read. null if the article does not exist.
+     * @return A DotTerminatedMessageReader instance from which the article
+     *         can be read.  null if the article does not exist.
@@ -709 +895,2 @@ public class NNTPClient extends NNTP {
-    public BufferedReader retrieveArticle(final long articleNumber) throws IOException {
+    public BufferedReader retrieveArticle(final long articleNumber) throws IOException
+    {
@@ -714,3 +901,6 @@ public class NNTPClient extends NNTP {
-     * Retrieves an article from the currently selected newsgroup. The article is referenced by its article number. The article number and identifier contained
-     * in the server reply are returned through an ArticleInfo. The <code> articleId </code> field of the ArticleInfo cannot always be trusted because some NNTP
-     * servers do not correctly follow the RFC 977 reply format.
+     * Retrieves an article from the currently selected newsgroup.  The
+     * article is referenced by its article number.
+     * The article number and identifier contained in the server reply
+     * are returned through an ArticleInfo.  The <code> articleId </code>
+     * field of the ArticleInfo cannot always be trusted because some
+     * NNTP servers do not correctly follow the RFC 977 reply format.
@@ -718 +908,2 @@ public class NNTPClient extends NNTP {
-     * A DotTerminatedMessageReader is returned from which the article can be read. If the article does not exist, null is returned.
+     * A DotTerminatedMessageReader is returned from which the article can
+     * be read.  If the article does not exist, null is returned.
@@ -720,4 +911,9 @@ public class NNTPClient extends NNTP {
-     * You must not issue any commands to the NNTP server (i.e., call any other methods) until you finish reading the message from the returned BufferedReader
-     * instance. The NNTP protocol uses the same stream for issuing commands as it does for returning results. Therefore the returned BufferedReader actually
-     * reads directly from the NNTP connection. After the end of message has been reached, new commands can be executed and their replies read. If you do not
-     * follow these requirements, your program will not work properly.
+     * You must not issue any commands to the NNTP server (i.e., call any
+     * other methods) until you finish reading the message from the returned
+     * BufferedReader instance.
+     * The NNTP protocol uses the same stream for issuing commands as it does
+     * for returning results.  Therefore the returned BufferedReader actually reads
+     * directly from the NNTP connection.  After the end of message has been
+     * reached, new commands can be executed and their replies read.  If
+     * you do not follow these requirements, your program will not work
+     * properly.
@@ -725,12 +921,20 @@ public class NNTPClient extends NNTP {
-     *
-     * @param articleNumber The number of the the article to retrieve.
-     * @param pointer       A parameter through which to return the article's number and unique id. The articleId field cannot always be trusted because of
-     *                      server deviations from RFC 977 reply formats. You may set this parameter to null if you do not desire to retrieve the returned
-     *                      article information.
-     * @return A DotTerminatedMessageReader instance from which the article can be read. null if the article does not exist.
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public BufferedReader retrieveArticle(final long articleNumber, final ArticleInfo pointer) throws IOException {
+     * @param articleNumber  The number of the the article to
+     *     retrieve.
+     * @param pointer    A parameter through which to return the article's
+     *   number and unique id.  The articleId field cannot always be trusted
+     *   because of server deviations from RFC 977 reply formats.  You may
+     *   set this parameter to null if you do not desire to retrieve the
+     *   returned article information.
+     * @return A DotTerminatedMessageReader instance from which the article
+     *         can be read.  null if the article does not exist.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public BufferedReader retrieveArticle(final long articleNumber, final ArticleInfo pointer)
+    throws IOException
+    {
@@ -739,0 +944 @@ public class NNTPClient extends NNTP {
+
@@ -741,2 +946,2 @@ public class NNTPClient extends NNTP {
-     * Same as <code> retrieveArticle(articleId, (ArticleInfo) null) </code> Note: the return can be cast to a {@link BufferedReader}
-     *
+     * Same as <code> retrieveArticle(articleId, (ArticleInfo) null) </code>
+     * Note: the return can be cast to a {@link BufferedReader}
@@ -744 +949,2 @@ public class NNTPClient extends NNTP {
-     * @return A DotTerminatedMessageReader instance from which the article can be read. null if the article does not exist.
+     * @return A DotTerminatedMessageReader instance from which the article can be read.
+     * null if the article does not exist.
@@ -747 +953,2 @@ public class NNTPClient extends NNTP {
-    public Reader retrieveArticle(final String articleId) throws IOException {
+    public Reader retrieveArticle(final String articleId) throws IOException
+    {
@@ -750,0 +958 @@ public class NNTPClient extends NNTP {
+
@@ -752,3 +960,6 @@ public class NNTPClient extends NNTP {
-     * Retrieves an article from the NNTP server. The article is referenced by its unique article identifier (including the enclosing &lt; and &gt;). The
-     * article number and identifier contained in the server reply are returned through an ArticleInfo. The <code> articleId </code> field of the ArticleInfo
-     * cannot always be trusted because some NNTP servers do not correctly follow the RFC 977 reply format.
+     * Retrieves an article from the NNTP server.  The article is referenced
+     * by its unique article identifier (including the enclosing &lt; and &gt;).
+     * The article number and identifier contained in the server reply
+     * are returned through an ArticleInfo.  The <code> articleId </code>
+     * field of the ArticleInfo cannot always be trusted because some
+     * NNTP servers do not correctly follow the RFC 977 reply format.
@@ -756 +967,2 @@ public class NNTPClient extends NNTP {
-     * A DotTerminatedMessageReader is returned from which the article can be read. If the article does not exist, null is returned.
+     * A DotTerminatedMessageReader is returned from which the article can
+     * be read.  If the article does not exist, null is returned.
@@ -758,4 +970,9 @@ public class NNTPClient extends NNTP {
-     * You must not issue any commands to the NNTP server (i.e., call any other methods) until you finish reading the message from the returned BufferedReader
-     * instance. The NNTP protocol uses the same stream for issuing commands as it does for returning results. Therefore the returned BufferedReader actually
-     * reads directly from the NNTP connection. After the end of message has been reached, new commands can be executed and their replies read. If you do not
-     * follow these requirements, your program will not work properly.
+     * You must not issue any commands to the NNTP server (i.e., call any
+     * other methods) until you finish reading the message from the returned
+     * BufferedReader instance.
+     * The NNTP protocol uses the same stream for issuing commands as it does
+     * for returning results.  Therefore the returned BufferedReader actually reads
+     * directly from the NNTP connection.  After the end of message has been
+     * reached, new commands can be executed and their replies read.  If
+     * you do not follow these requirements, your program will not work
+     * properly.
@@ -763,12 +980,21 @@ public class NNTPClient extends NNTP {
-     *
-     * @param articleId The unique article identifier of the article to retrieve. If this parameter is null, the currently selected article is retrieved.
-     * @param pointer   A parameter through which to return the article's number and unique id. The articleId field cannot always be trusted because of server
-     *                  deviations from RFC 977 reply formats. You may set this parameter to null if you do not desire to retrieve the returned article
-     *                  information.
-     * @return A DotTerminatedMessageReader instance from which the article can be read. null if the article does not exist.
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public BufferedReader retrieveArticle(final String articleId, final ArticleInfo pointer) throws IOException {
+     * @param articleId  The unique article identifier of the article to
+     *     retrieve.  If this parameter is null, the currently selected
+     *     article is retrieved.
+     * @param pointer    A parameter through which to return the article's
+     *   number and unique id.  The articleId field cannot always be trusted
+     *   because of server deviations from RFC 977 reply formats.  You may
+     *   set this parameter to null if you do not desire to retrieve the
+     *   returned article information.
+     * @return A DotTerminatedMessageReader instance from which the article
+     *         can be read.  null if the article does not exist.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public BufferedReader retrieveArticle(final String articleId, final ArticleInfo pointer)
+    throws IOException
+    {
@@ -778,0 +1005 @@ public class NNTPClient extends NNTP {
+
@@ -781 +1008 @@ public class NNTPClient extends NNTP {
-     * @param pointer   A parameter through which to return the article's number and unique id
+     * @param pointer A parameter through which to return the article's number and unique id
@@ -783 +1010,2 @@ public class NNTPClient extends NNTP {
-     * @return A DotTerminatedMessageReader instance from which the article can be read. null if the article does not exist.
+     * @return A DotTerminatedMessageReader instance from which the article can be read.
+     * null if the article does not exist.
@@ -788 +1016 @@ public class NNTPClient extends NNTP {
-        final ArticleInfo ai = ap2ai(pointer);
+        final ArticleInfo ai =  ap2ai(pointer);
@@ -795,3 +1023,4 @@ public class NNTPClient extends NNTP {
-     * Same as <code> retrieveArticleBody(null) </code> Note: the return can be cast to a {@link BufferedReader}
-     *
-     * @return A DotTerminatedMessageReader instance from which the article body can be read. null if the article does not exist.
+     * Same as <code> retrieveArticleBody(null) </code>
+     *  Note: the return can be cast to a {@link BufferedReader}
+     * @return A DotTerminatedMessageReader instance from which the article
+     *         body can be read.  null if the article does not exist.
@@ -800 +1029,2 @@ public class NNTPClient extends NNTP {
-    public Reader retrieveArticleBody() throws IOException {
+    public Reader retrieveArticleBody() throws IOException
+    {
@@ -805,3 +1035,3 @@ public class NNTPClient extends NNTP {
-     * @param a tba
-     * @return tba
-     * @throws IOException tba
+     * @param a  tba
+     * @return  tba
+     * @throws IOException  tba
@@ -817,3 +1047,3 @@ public class NNTPClient extends NNTP {
-     * @param ap tba
-     * @return tba
-     * @throws IOException tba
+     * @param ap  tba
+     * @return  tba
+     * @throws IOException  tba
@@ -824 +1054 @@ public class NNTPClient extends NNTP {
-        final ArticleInfo ai = ap2ai(ap);
+        final ArticleInfo ai =  ap2ai(ap);
@@ -829,0 +1060 @@ public class NNTPClient extends NNTP {
+
@@ -832 +1062,0 @@ public class NNTPClient extends NNTP {
-     *
@@ -837 +1067,2 @@ public class NNTPClient extends NNTP {
-    public BufferedReader retrieveArticleBody(final long articleNumber) throws IOException {
+    public BufferedReader retrieveArticleBody(final long articleNumber) throws IOException
+    {
@@ -842,3 +1073,6 @@ public class NNTPClient extends NNTP {
-     * Retrieves an article body from the currently selected newsgroup. The article is referenced by its article number. The article number and identifier
-     * contained in the server reply are returned through an ArticleInfo. The <code> articleId </code> field of the ArticleInfo cannot always be trusted because
-     * some NNTP servers do not correctly follow the RFC 977 reply format.
+     * Retrieves an article body from the currently selected newsgroup.  The
+     * article is referenced by its article number.
+     * The article number and identifier contained in the server reply
+     * are returned through an ArticleInfo.  The <code> articleId </code>
+     * field of the ArticleInfo cannot always be trusted because some
+     * NNTP servers do not correctly follow the RFC 977 reply format.
@@ -846 +1080,2 @@ public class NNTPClient extends NNTP {
-     * A DotTerminatedMessageReader is returned from which the article can be read. If the article does not exist, null is returned.
+     * A DotTerminatedMessageReader is returned from which the article can
+     * be read.  If the article does not exist, null is returned.
@@ -848,4 +1083,9 @@ public class NNTPClient extends NNTP {
-     * You must not issue any commands to the NNTP server (i.e., call any other methods) until you finish reading the message from the returned BufferedReader
-     * instance. The NNTP protocol uses the same stream for issuing commands as it does for returning results. Therefore the returned BufferedReader actually
-     * reads directly from the NNTP connection. After the end of message has been reached, new commands can be executed and their replies read. If you do not
-     * follow these requirements, your program will not work properly.
+     * You must not issue any commands to the NNTP server (i.e., call any
+     * other methods) until you finish reading the message from the returned
+     * BufferedReader instance.
+     * The NNTP protocol uses the same stream for issuing commands as it does
+     * for returning results.  Therefore the returned BufferedReader actually reads
+     * directly from the NNTP connection.  After the end of message has been
+     * reached, new commands can be executed and their replies read.  If
+     * you do not follow these requirements, your program will not work
+     * properly.
@@ -853,12 +1093,21 @@ public class NNTPClient extends NNTP {
-     *
-     * @param articleNumber The number of the the article whose body is being retrieved.
-     * @param pointer       A parameter through which to return the article's number and unique id. The articleId field cannot always be trusted because of
-     *                      server deviations from RFC 977 reply formats. You may set this parameter to null if you do not desire to retrieve the returned
-     *                      article information.
-     * @return A DotTerminatedMessageReader instance from which the article body can be read. null if the article does not exist.
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public BufferedReader retrieveArticleBody(final long articleNumber, final ArticleInfo pointer) throws IOException {
+     * @param articleNumber  The number of the the article whose body is
+     *     being retrieved.
+     * @param pointer    A parameter through which to return the article's
+     *   number and unique id.  The articleId field cannot always be trusted
+     *   because of server deviations from RFC 977 reply formats.  You may
+     *   set this parameter to null if you do not desire to retrieve the
+     *   returned article information.
+     * @return A DotTerminatedMessageReader instance from which the article
+     *         body can be read.  null if the article does not exist.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public BufferedReader retrieveArticleBody(final long articleNumber,
+                                      final ArticleInfo pointer)
+    throws IOException
+    {
@@ -869,2 +1118,2 @@ public class NNTPClient extends NNTP {
-     * Same as <code> retrieveArticleBody(articleId, (ArticleInfo) null) </code> Note: the return can be cast to a {@link BufferedReader}
-     *
+     * Same as <code> retrieveArticleBody(articleId, (ArticleInfo) null) </code>
+     *  Note: the return can be cast to a {@link BufferedReader}
@@ -872 +1121,2 @@ public class NNTPClient extends NNTP {
-     * @return A DotTerminatedMessageReader instance from which the article body can be read. null if the article does not exist.
+     * @return A DotTerminatedMessageReader instance from which the article
+     *         body can be read.  null if the article does not exist.
@@ -875 +1125,2 @@ public class NNTPClient extends NNTP {
-    public Reader retrieveArticleBody(final String articleId) throws IOException {
+    public Reader retrieveArticleBody(final String articleId) throws IOException
+    {
@@ -880,3 +1131,7 @@ public class NNTPClient extends NNTP {
-     * Retrieves an article body from the NNTP server. The article is referenced by its unique article identifier (including the enclosing &lt; and &gt;). The
-     * article number and identifier contained in the server reply are returned through an ArticleInfo. The <code> articleId </code> field of the ArticleInfo
-     * cannot always be trusted because some NNTP servers do not correctly follow the RFC 977 reply format.
+     * Retrieves an article body from the NNTP server.  The article is
+     * referenced
+     * by its unique article identifier (including the enclosing &lt; and &gt;).
+     * The article number and identifier contained in the server reply
+     * are returned through an ArticleInfo.  The <code> articleId </code>
+     * field of the ArticleInfo cannot always be trusted because some
+     * NNTP servers do not correctly follow the RFC 977 reply format.
@@ -884 +1139,2 @@ public class NNTPClient extends NNTP {
-     * A DotTerminatedMessageReader is returned from which the article can be read. If the article does not exist, null is returned.
+     * A DotTerminatedMessageReader is returned from which the article can
+     * be read.  If the article does not exist, null is returned.
@@ -886,4 +1142,9 @@ public class NNTPClient extends NNTP {
-     * You must not issue any commands to the NNTP server (i.e., call any other methods) until you finish reading the message from the returned BufferedReader
-     * instance. The NNTP protocol uses the same stream for issuing commands as it does for returning results. Therefore the returned BufferedReader actually
-     * reads directly from the NNTP connection. After the end of message has been reached, new commands can be executed and their replies read. If you do not
-     * follow these requirements, your program will not work properly.
+     * You must not issue any commands to the NNTP server (i.e., call any
+     * other methods) until you finish reading the message from the returned
+     * BufferedReader instance.
+     * The NNTP protocol uses the same stream for issuing commands as it does
+     * for returning results.  Therefore the returned BufferedReader actually reads
+     * directly from the NNTP connection.  After the end of message has been
+     * reached, new commands can be executed and their replies read.  If
+     * you do not follow these requirements, your program will not work
+     * properly.
@@ -891,13 +1152,21 @@ public class NNTPClient extends NNTP {
-     *
-     * @param articleId The unique article identifier of the article whose body is being retrieved. If this parameter is null, the body of the currently
-     *                  selected article is retrieved.
-     * @param pointer   A parameter through which to return the article's number and unique id. The articleId field cannot always be trusted because of server
-     *                  deviations from RFC 977 reply formats. You may set this parameter to null if you do not desire to retrieve the returned article
-     *                  information.
-     * @return A DotTerminatedMessageReader instance from which the article body can be read. null if the article does not exist.
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public BufferedReader retrieveArticleBody(final String articleId, final ArticleInfo pointer) throws IOException {
+     * @param articleId  The unique article identifier of the article whose
+     *    body is being retrieved.  If this parameter is null, the
+     *    body of the currently selected article is retrieved.
+     * @param pointer    A parameter through which to return the article's
+     *   number and unique id.  The articleId field cannot always be trusted
+     *   because of server deviations from RFC 977 reply formats.  You may
+     *   set this parameter to null if you do not desire to retrieve the
+     *   returned article information.
+     * @return A DotTerminatedMessageReader instance from which the article
+     *         body can be read.  null if the article does not exist.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public BufferedReader retrieveArticleBody(final String articleId, final ArticleInfo pointer)
+    throws IOException
+    {
@@ -910,2 +1179,3 @@ public class NNTPClient extends NNTP {
-     * @param pointer   A parameter through which to return the article's number and unique id
-     * @return A DotTerminatedMessageReader instance from which the article body can be read. null if the article does not exist.
+     * @param pointer A parameter through which to return the article's number and unique id
+     * @return A DotTerminatedMessageReader instance from which the article
+     *         body can be read.  null if the article does not exist.
@@ -917 +1187 @@ public class NNTPClient extends NNTP {
-        final ArticleInfo ai = ap2ai(pointer);
+        final ArticleInfo ai =  ap2ai(pointer);
@@ -924,2 +1194,2 @@ public class NNTPClient extends NNTP {
-     * Same as <code> retrieveArticleHeader((String) null) </code> Note: the return can be cast to a {@link BufferedReader}
-     *
+     * Same as <code> retrieveArticleHeader((String) null) </code>
+     *  Note: the return can be cast to a {@link BufferedReader}
@@ -929 +1199,2 @@ public class NNTPClient extends NNTP {
-    public Reader retrieveArticleHeader() throws IOException {
+    public Reader retrieveArticleHeader() throws IOException
+    {
@@ -934,3 +1205,3 @@ public class NNTPClient extends NNTP {
-     * @param a tba
-     * @return tba
-     * @throws IOException tba
+     * @param a  tba
+     * @return  tba
+     * @throws IOException  tba
@@ -946,3 +1217,3 @@ public class NNTPClient extends NNTP {
-     * @param ap tba
-     * @return tba
-     * @throws IOException tba
+     * @param ap  tba
+     * @return  tba
+     * @throws IOException  tba
@@ -953 +1224 @@ public class NNTPClient extends NNTP {
-        final ArticleInfo ai = ap2ai(ap);
+        final ArticleInfo ai =  ap2ai(ap);
@@ -966 +1237,2 @@ public class NNTPClient extends NNTP {
-    public BufferedReader retrieveArticleHeader(final long articleNumber) throws IOException {
+    public BufferedReader retrieveArticleHeader(final long articleNumber) throws IOException
+    {
@@ -969,0 +1242 @@ public class NNTPClient extends NNTP {
+
@@ -971,3 +1244,6 @@ public class NNTPClient extends NNTP {
-     * Retrieves an article header from the currently selected newsgroup. The article is referenced by its article number. The article number and identifier
-     * contained in the server reply are returned through an ArticleInfo. The <code> articleId </code> field of the ArticleInfo cannot always be trusted because
-     * some NNTP servers do not correctly follow the RFC 977 reply format.
+     * Retrieves an article header from the currently selected newsgroup.  The
+     * article is referenced by its article number.
+     * The article number and identifier contained in the server reply
+     * are returned through an ArticleInfo.  The <code> articleId </code>
+     * field of the ArticleInfo cannot always be trusted because some
+     * NNTP servers do not correctly follow the RFC 977 reply format.
@@ -975 +1251,2 @@ public class NNTPClient extends NNTP {
-     * A DotTerminatedMessageReader is returned from which the article can be read. If the article does not exist, null is returned.
+     * A DotTerminatedMessageReader is returned from which the article can
+     * be read.  If the article does not exist, null is returned.
@@ -977,4 +1254,9 @@ public class NNTPClient extends NNTP {
-     * You must not issue any commands to the NNTP server (i.e., call any other methods) until you finish reading the message from the returned BufferedReader
-     * instance. The NNTP protocol uses the same stream for issuing commands as it does for returning results. Therefore the returned BufferedReader actually
-     * reads directly from the NNTP connection. After the end of message has been reached, new commands can be executed and their replies read. If you do not
-     * follow these requirements, your program will not work properly.
+     * You must not issue any commands to the NNTP server (i.e., call any
+     * other methods) until you finish reading the message from the returned
+     * BufferedReader instance.
+     * The NNTP protocol uses the same stream for issuing commands as it does
+     * for returning results.  Therefore the returned BufferedReader actually reads
+     * directly from the NNTP connection.  After the end of message has been
+     * reached, new commands can be executed and their replies read.  If
+     * you do not follow these requirements, your program will not work
+     * properly.
@@ -982,12 +1264,21 @@ public class NNTPClient extends NNTP {
-     *
-     * @param articleNumber The number of the the article whose header is being retrieved.
-     * @param pointer       A parameter through which to return the article's number and unique id. The articleId field cannot always be trusted because of
-     *                      server deviations from RFC 977 reply formats. You may set this parameter to null if you do not desire to retrieve the returned
-     *                      article information.
-     * @return A DotTerminatedMessageReader instance from which the article header can be read. null if the article does not exist.
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public BufferedReader retrieveArticleHeader(final long articleNumber, final ArticleInfo pointer) throws IOException {
+     * @param articleNumber  The number of the the article whose header is
+     *     being retrieved.
+     * @param pointer    A parameter through which to return the article's
+     *   number and unique id.  The articleId field cannot always be trusted
+     *   because of server deviations from RFC 977 reply formats.  You may
+     *   set this parameter to null if you do not desire to retrieve the
+     *   returned article information.
+     * @return A DotTerminatedMessageReader instance from which the article
+     *         header can be read.  null if the article does not exist.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public BufferedReader retrieveArticleHeader(final long articleNumber,
+                                        final ArticleInfo pointer)
+    throws IOException
+    {
@@ -996,0 +1288 @@ public class NNTPClient extends NNTP {
+
@@ -998,3 +1290,3 @@ public class NNTPClient extends NNTP {
-     * Same as <code> retrieveArticleHeader(articleId, (ArticleInfo) null) </code> Note: the return can be cast to a {@link BufferedReader}
-     *
-     * @param articleId the article id to fetch
+     * Same as <code> retrieveArticleHeader(articleId, (ArticleInfo) null) </code>
+     *  Note: the return can be cast to a {@link BufferedReader}
+     * @param articleId the article id  to fetch
@@ -1004 +1296,2 @@ public class NNTPClient extends NNTP {
-    public Reader retrieveArticleHeader(final String articleId) throws IOException {
+    public Reader retrieveArticleHeader(final String articleId) throws IOException
+    {
@@ -1007,0 +1301 @@ public class NNTPClient extends NNTP {
+
@@ -1009,3 +1303,7 @@ public class NNTPClient extends NNTP {
-     * Retrieves an article header from the NNTP server. The article is referenced by its unique article identifier (including the enclosing &lt; and &gt;). The
-     * article number and identifier contained in the server reply are returned through an ArticleInfo. The <code> articleId </code> field of the ArticleInfo
-     * cannot always be trusted because some NNTP servers do not correctly follow the RFC 977 reply format.
+     * Retrieves an article header from the NNTP server.  The article is
+     * referenced
+     * by its unique article identifier (including the enclosing &lt; and &gt;).
+     * The article number and identifier contained in the server reply
+     * are returned through an ArticleInfo.  The <code> articleId </code>
+     * field of the ArticleInfo cannot always be trusted because some
+     * NNTP servers do not correctly follow the RFC 977 reply format.
@@ -1013 +1311,2 @@ public class NNTPClient extends NNTP {
-     * A DotTerminatedMessageReader is returned from which the article can be read. If the article does not exist, null is returned.
+     * A DotTerminatedMessageReader is returned from which the article can
+     * be read.  If the article does not exist, null is returned.
@@ -1015,4 +1314,9 @@ public class NNTPClient extends NNTP {
-     * You must not issue any commands to the NNTP server (i.e., call any other methods) until you finish reading the message from the returned BufferedReader
-     * instance. The NNTP protocol uses the same stream for issuing commands as it does for returning results. Therefore the returned BufferedReader actually
-     * reads directly from the NNTP connection. After the end of message has been reached, new commands can be executed and their replies read. If you do not
-     * follow these requirements, your program will not work properly.
+     * You must not issue any commands to the NNTP server (i.e., call any
+     * other methods) until you finish reading the message from the returned
+     * BufferedReader instance.
+     * The NNTP protocol uses the same stream for issuing commands as it does
+     * for returning results.  Therefore the returned BufferedReader actually reads
+     * directly from the NNTP connection.  After the end of message has been
+     * reached, new commands can be executed and their replies read.  If
+     * you do not follow these requirements, your program will not work
+     * properly.
@@ -1020,13 +1324,21 @@ public class NNTPClient extends NNTP {
-     *
-     * @param articleId The unique article identifier of the article whose header is being retrieved. If this parameter is null, the header of the currently
-     *                  selected article is retrieved.
-     * @param pointer   A parameter through which to return the article's number and unique id. The articleId field cannot always be trusted because of server
-     *                  deviations from RFC 977 reply formats. You may set this parameter to null if you do not desire to retrieve the returned article
-     *                  information.
-     * @return A DotTerminatedMessageReader instance from which the article header can be read. null if the article does not exist.
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public BufferedReader retrieveArticleHeader(final String articleId, final ArticleInfo pointer) throws IOException {
+     * @param articleId  The unique article identifier of the article whose
+     *    header is being retrieved.  If this parameter is null, the
+     *    header of the currently selected article is retrieved.
+     * @param pointer    A parameter through which to return the article's
+     *   number and unique id.  The articleId field cannot always be trusted
+     *   because of server deviations from RFC 977 reply formats.  You may
+     *   set this parameter to null if you do not desire to retrieve the
+     *   returned article information.
+     * @return A DotTerminatedMessageReader instance from which the article
+     *         header can be read.  null if the article does not exist.
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public BufferedReader retrieveArticleHeader(final String articleId, final ArticleInfo pointer)
+    throws IOException
+    {
@@ -1039,2 +1351,3 @@ public class NNTPClient extends NNTP {
-     * @param pointer   A parameter through which to return the article's number and unique id
-     * @return A DotTerminatedMessageReader instance from which the article body can be read. null if the article does not exist.
+     * @param pointer A parameter through which to return the article's number and unique id
+     * @return A DotTerminatedMessageReader instance from which the article
+     *         body can be read.  null if the article does not exist.
@@ -1046 +1359 @@ public class NNTPClient extends NNTP {
-        final ArticleInfo ai = ap2ai(pointer);
+        final ArticleInfo ai =  ap2ai(pointer);
@@ -1055 +1368 @@ public class NNTPClient extends NNTP {
-     * @throws IOException tba
+     * @throws IOException  tba
@@ -1064 +1377 @@ public class NNTPClient extends NNTP {
-     * @param lowArticleNumber  to fetch
+     * @param lowArticleNumber to fetch
@@ -1078 +1390,0 @@ public class NNTPClient extends NNTP {
-     *
@@ -1083 +1395,2 @@ public class NNTPClient extends NNTP {
-    public BufferedReader retrieveArticleInfo(final long articleNumber) throws IOException {
+    public BufferedReader retrieveArticleInfo(final long articleNumber) throws IOException
+    {
@@ -1088 +1401,2 @@ public class NNTPClient extends NNTP {
-     * Return article headers for all articles between lowArticleNumber and highArticleNumber, inclusively. Uses the XOVER command.
+     * Return article headers for all articles between lowArticleNumber
+     * and highArticleNumber, inclusively. Uses the XOVER command.
@@ -1090,2 +1404 @@ public class NNTPClient extends NNTP {
-     *
-     * @param lowArticleNumber  low number
+     * @param lowArticleNumber low number
@@ -1096,2 +1409,7 @@ public class NNTPClient extends NNTP {
-    public BufferedReader retrieveArticleInfo(final long lowArticleNumber, final long highArticleNumber) throws IOException {
-        return retrieveArticleInfo(lowArticleNumber + "-" + highArticleNumber);
+    public BufferedReader retrieveArticleInfo(final long lowArticleNumber,
+            final long highArticleNumber)
+        throws IOException
+    {
+        return
+            retrieveArticleInfo(lowArticleNumber + "-" +
+                                             highArticleNumber);
@@ -1103 +1421,2 @@ public class NNTPClient extends NNTP {
-     * See {@link NNTP#xover} for legal agument formats. Alternatively, read RFC 2980 :-)
+     * See {@link NNTP#xover}
+     * for legal agument formats. Alternatively, read RFC 2980 :-)
@@ -1105 +1423,0 @@ public class NNTPClient extends NNTP {
-     *
@@ -1107 +1425,2 @@ public class NNTPClient extends NNTP {
-     * @return Returns a DotTerminatedMessageReader if successful, null otherwise
+     * @return Returns a DotTerminatedMessageReader if successful, null
+     *         otherwise
@@ -1110 +1429,3 @@ public class NNTPClient extends NNTP {
-    private BufferedReader retrieveArticleInfo(final String articleRange) throws IOException {
+    private BufferedReader retrieveArticleInfo(final String articleRange)
+        throws IOException
+    {
@@ -1120,2 +1441,2 @@ public class NNTPClient extends NNTP {
-     * @param b tba
-     * @return tba
+     * @param b  tba
+     * @return  tba
@@ -1129,0 +1451,4 @@ public class NNTPClient extends NNTP {
+
+
+
+
@@ -1132,0 +1458,2 @@ public class NNTPClient extends NNTP {
+
+
@@ -1134,2 +1461,2 @@ public class NNTPClient extends NNTP {
-     * @param header            the header
-     * @param lowArticleNumber  to fetch
+     * @param header the header
+     * @param lowArticleNumber to fetch
@@ -1142 +1469,3 @@ public class NNTPClient extends NNTP {
-    public Reader retrieveHeader(final String header, final int lowArticleNumber, final int highArticleNumber) throws IOException {
+    public Reader retrieveHeader(final String header, final int lowArticleNumber, final int highArticleNumber)
+        throws IOException
+    {
@@ -1149,2 +1478 @@ public class NNTPClient extends NNTP {
-     *
-     * @param header        the header to retrieve
+     * @param header the header to retrieve
@@ -1155 +1483,3 @@ public class NNTPClient extends NNTP {
-    public BufferedReader retrieveHeader(final String header, final long articleNumber) throws IOException {
+    public BufferedReader retrieveHeader(final String header, final long articleNumber)
+        throws IOException
+    {
@@ -1160 +1490,2 @@ public class NNTPClient extends NNTP {
-     * Return an article header for all articles between lowArticleNumber and highArticleNumber, inclusively.
+     * Return an article header for all articles between lowArticleNumber
+     * and highArticleNumber, inclusively.
@@ -1162,3 +1493,2 @@ public class NNTPClient extends NNTP {
-     *
-     * @param header            the header
-     * @param lowArticleNumber  to fetch
+     * @param header the header
+     * @param lowArticleNumber to fetch
@@ -1169,2 +1499,6 @@ public class NNTPClient extends NNTP {
-    public BufferedReader retrieveHeader(final String header, final long lowArticleNumber, final long highArticleNumber) throws IOException {
-        return retrieveHeader(header, lowArticleNumber + "-" + highArticleNumber);
+    public BufferedReader retrieveHeader(final String header, final long lowArticleNumber,
+                                 final long highArticleNumber)
+        throws IOException
+    {
+        return
+            retrieveHeader(header,lowArticleNumber + "-" + highArticleNumber);
@@ -1176 +1510,2 @@ public class NNTPClient extends NNTP {
-     * See {@link NNTP#xhdr} for legal agument formats. Alternatively, read RFC 1036.
+     * See {@link NNTP#xhdr}
+     * for legal agument formats. Alternatively, read RFC 1036.
@@ -1178 +1512,0 @@ public class NNTPClient extends NNTP {
-     *
@@ -1181 +1515,2 @@ public class NNTPClient extends NNTP {
-     * @return Returns a DotTerminatedMessageReader if successful, null otherwise
+     * @return Returns a DotTerminatedMessageReader if successful, null
+     *         otherwise
@@ -1184 +1519,3 @@ public class NNTPClient extends NNTP {
-    private BufferedReader retrieveHeader(final String header, final String articleRange) throws IOException {
+    private BufferedReader retrieveHeader(final String header, final String articleRange)
+        throws IOException
+    {
@@ -1193,2 +1530,2 @@ public class NNTPClient extends NNTP {
-     * Same as <code> selectArticle((String) null, articleId) </code>. Useful for retrieving the current article number.
-     *
+     * Same as <code> selectArticle((String) null, articleId) </code>.  Useful
+     * for retrieving the current article number.
@@ -1199 +1536,2 @@ public class NNTPClient extends NNTP {
-    public boolean selectArticle(final ArticleInfo pointer) throws IOException {
+    public boolean selectArticle(final ArticleInfo pointer) throws IOException
+    {
@@ -1211 +1549 @@ public class NNTPClient extends NNTP {
-        final ArticleInfo ai = ap2ai(pointer);
+        final ArticleInfo ai =  ap2ai(pointer);
@@ -1219,3 +1557,3 @@ public class NNTPClient extends NNTP {
-     * @param a tba
-     * @return tba
-     * @throws IOException tba
+     * @param a  tba
+     * @return  tba
+     * @throws IOException  tba
@@ -1231,2 +1569,2 @@ public class NNTPClient extends NNTP {
-     * @param ap tba
-     * @return tba
+     * @param ap  tba
+     * @return  tba
@@ -1238 +1576 @@ public class NNTPClient extends NNTP {
-        final ArticleInfo ai = ap2ai(ap);
+        final ArticleInfo ai =  ap2ai(ap);
@@ -1244,3 +1582 @@ public class NNTPClient extends NNTP {
-    /**
-     * Same as <code> selectArticle(articleNumber, null) </code>
-     *
+    /** Same as <code> selectArticle(articleNumber, null) </code>
@@ -1249,3 +1585,3 @@ public class NNTPClient extends NNTP {
-     * @throws IOException on error
-     */
-    public boolean selectArticle(final long articleNumber) throws IOException {
+     * @throws IOException on error */
+    public boolean selectArticle(final long articleNumber) throws IOException
+    {
@@ -1256,3 +1592,6 @@ public class NNTPClient extends NNTP {
-     * Select an article in the currently selected newsgroup by its number. and return its article number and id through the pointer parameter. This is achieved
-     * through the STAT command. According to RFC 977, this WILL set the current article pointer on the server. Use this command to select an article before
-     * retrieving it, or to obtain an article's unique identifier given its number.
+     * Select an article in the currently selected newsgroup by its number.
+     * and return its article number and id through the
+     * pointer parameter.  This is achieved through the STAT command.
+     * According to RFC 977, this WILL set the current article pointer
+     * on the server.  Use this command to select an article before retrieving
+     * it, or to obtain an article's unique identifier given its number.
@@ -1260,5 +1599,8 @@ public class NNTPClient extends NNTP {
-     *
-     * @param articleNumber The number of the article to select from the currently selected newsgroup.
-     * @param pointer       A parameter through which to return the article's number and unique id. Although the articleId field cannot always be trusted
-     *                      because of server deviations from RFC 977 reply formats, we haven't found a server that misformats this information in response to
-     *                      this particular command. You may set this parameter to null if you do not desire to retrieve the returned article information.
+     * @param articleNumber The number of the article to select from the
+     *       currently selected newsgroup.
+     * @param pointer    A parameter through which to return the article's
+     *   number and unique id.  Although the articleId field cannot always
+     *   be trusted because of server deviations from RFC 977 reply formats,
+     *   we haven't found a server that misformats this information in response
+     *   to this particular command.  You may set this parameter to null if
+     *   you do not desire to retrieve the returned article information.
@@ -1266,6 +1608,11 @@ public class NNTPClient extends NNTP {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean selectArticle(final long articleNumber, final ArticleInfo pointer) throws IOException {
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean selectArticle(final long articleNumber, final ArticleInfo pointer)
+    throws IOException
+    {
@@ -1285 +1631,0 @@ public class NNTPClient extends NNTP {
-     *
@@ -1290 +1636,2 @@ public class NNTPClient extends NNTP {
-    public boolean selectArticle(final String articleId) throws IOException {
+    public boolean selectArticle(final String articleId) throws IOException
+    {
@@ -1295,3 +1642,6 @@ public class NNTPClient extends NNTP {
-     * Select an article by its unique identifier (including enclosing &lt; and &gt;) and return its article number and id through the pointer parameter. This
-     * is achieved through the STAT command. According to RFC 977, this will NOT set the current article pointer on the server. To do that, you must reference
-     * the article by its number.
+     * Select an article by its unique identifier (including enclosing
+     * &lt; and &gt;) and return its article number and id through the
+     * pointer parameter.  This is achieved through the STAT command.
+     * According to RFC 977, this will NOT set the current article pointer
+     * on the server.  To do that, you must reference the article by its
+     * number.
@@ -1299,6 +1649,8 @@ public class NNTPClient extends NNTP {
-     *
-     * @param articleId The unique article identifier of the article that is being selectedd. If this parameter is null, the body of the current article is
-     *                  selected
-     * @param pointer   A parameter through which to return the article's number and unique id. The articleId field cannot always be trusted because of server
-     *                  deviations from RFC 977 reply formats. You may set this parameter to null if you do not desire to retrieve the returned article
-     *                  information.
+     * @param articleId  The unique article identifier of the article that
+     *    is being selectedd.  If this parameter is null, the
+     *    body of the current article is selected
+     * @param pointer    A parameter through which to return the article's
+     *   number and unique id.  The articleId field cannot always be trusted
+     *   because of server deviations from RFC 977 reply formats.  You may
+     *   set this parameter to null if you do not desire to retrieve the
+     *   returned article information.
@@ -1306,6 +1658,11 @@ public class NNTPClient extends NNTP {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean selectArticle(final String articleId, final ArticleInfo pointer) throws IOException {
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean selectArticle(final String articleId, final ArticleInfo pointer)
+    throws IOException
+    {
@@ -1329,2 +1686,3 @@ public class NNTPClient extends NNTP {
-     * @param pointer   A parameter through which to return the article's number and unique id
-     * @return A DotTerminatedMessageReader instance from which the article body can be read. null if the article does not exist.
+     * @param pointer A parameter through which to return the article's number and unique id
+     * @return A DotTerminatedMessageReader instance from which the article
+     *         body can be read.  null if the article does not exist.
@@ -1336 +1694 @@ public class NNTPClient extends NNTP {
-        final ArticleInfo ai = ap2ai(pointer);
+        final ArticleInfo ai =  ap2ai(pointer);
@@ -1345 +1702,0 @@ public class NNTPClient extends NNTP {
-     *
@@ -1350 +1707,2 @@ public class NNTPClient extends NNTP {
-    public boolean selectNewsgroup(final String newsgroup) throws IOException {
+    public boolean selectNewsgroup(final String newsgroup) throws IOException
+    {
@@ -1355,2 +1713,3 @@ public class NNTPClient extends NNTP {
-     * Select the specified newsgroup to be the target of for future article retrieval and posting operations. Also return the newsgroup information contained
-     * in the server reply through the info parameter.
+     * Select the specified newsgroup to be the target of for future article
+     * retrieval and posting operations.  Also return the newsgroup
+     * information contained in the server reply through the info parameter.
@@ -1358,4 +1717,4 @@ public class NNTPClient extends NNTP {
-     *
-     * @param newsgroup The newsgroup to select.
-     * @param info      A parameter through which the newsgroup information of the selected newsgroup contained in the server reply is returned. Set this to
-     *                  null if you do not desire this information.
+     * @param newsgroup  The newsgroup to select.
+     * @param info  A parameter through which the newsgroup information of
+     *      the selected newsgroup contained in the server reply is returned.
+     *      Set this to null if you do not desire this information.
@@ -1363,6 +1722,11 @@ public class NNTPClient extends NNTP {
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean selectNewsgroup(final String newsgroup, final NewsgroupInfo info) throws IOException {
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean selectNewsgroup(final String newsgroup, final NewsgroupInfo info)
+    throws IOException
+    {
@@ -1380,3 +1744 @@ public class NNTPClient extends NNTP {
-    /**
-     * Same as <code> selectNextArticle((ArticleInfo) null) </code>
-     *
+    /** Same as <code> selectNextArticle((ArticleInfo) null) </code>
@@ -1384,3 +1746,3 @@ public class NNTPClient extends NNTP {
-     * @throws IOException on error
-     */
-    public boolean selectNextArticle() throws IOException {
+     * @throws IOException on error */
+    public boolean selectNextArticle() throws IOException
+    {
@@ -1391,3 +1753,7 @@ public class NNTPClient extends NNTP {
-     * Select the article following the currently selected article in the currently selected newsgroup and return its number and unique id through the pointer
-     * parameter. Because of deviating server implementations, the articleId information cannot be trusted. To obtain the article identifier, issue a
-     * <code> selectArticle(pointer.articleNumber, pointer) </code> immediately afterward.
+     * Select the article following the currently selected article in the
+     * currently selected newsgroup and return its number and unique id
+     * through the pointer parameter.  Because of deviating server
+     * implementations, the articleId information cannot be trusted.  To
+     * obtain the article identifier, issue a
+     * <code> selectArticle(pointer.articleNumber, pointer) </code> immediately
+     * afterward.
@@ -1395,11 +1761,17 @@ public class NNTPClient extends NNTP {
-     *
-     * @param pointer A parameter through which to return the article's number and unique id. The articleId field cannot always be trusted because of server
-     *                deviations from RFC 977 reply formats. You may set this parameter to null if you do not desire to retrieve the returned article
-     *                information.
-     * @return True if successful, false if not (e.g., there is no following article).
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean selectNextArticle(final ArticleInfo pointer) throws IOException {
+     * @param pointer    A parameter through which to return the article's
+     *   number and unique id.  The articleId field cannot always be trusted
+     *   because of server deviations from RFC 977 reply formats.  You may
+     *   set this parameter to null if you do not desire to retrieve the
+     *   returned article information.
+     * @return True if successful, false if not (e.g., there is no following
+     *         article).
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean selectNextArticle(final ArticleInfo pointer) throws IOException
+    {
@@ -1425 +1797 @@ public class NNTPClient extends NNTP {
-        final ArticleInfo ai = ap2ai(pointer);
+        final ArticleInfo ai =  ap2ai(pointer);
@@ -1432,3 +1804 @@ public class NNTPClient extends NNTP {
-    /**
-     * Same as <code> selectPreviousArticle((ArticleInfo) null) </code>
-     *
+    /** Same as <code> selectPreviousArticle((ArticleInfo) null) </code>
@@ -1436,3 +1806,3 @@ public class NNTPClient extends NNTP {
-     * @throws IOException on error
-     */
-    public boolean selectPreviousArticle() throws IOException {
+     * @throws IOException on error */
+    public boolean selectPreviousArticle() throws IOException
+    {
@@ -1442 +1812 @@ public class NNTPClient extends NNTP {
-    // Helper methods
+   // Helper methods
@@ -1445,3 +1815,7 @@ public class NNTPClient extends NNTP {
-     * Select the article preceeding the currently selected article in the currently selected newsgroup and return its number and unique id through the pointer
-     * parameter. Because of deviating server implementations, the articleId information cannot be trusted. To obtain the article identifier, issue a
-     * <code> selectArticle(pointer.articleNumber, pointer) </code> immediately afterward.
+     * Select the article preceeding the currently selected article in the
+     * currently selected newsgroup and return its number and unique id
+     * through the pointer parameter.  Because of deviating server
+     * implementations, the articleId information cannot be trusted.  To
+     * obtain the article identifier, issue a
+     * <code> selectArticle(pointer.articleNumber, pointer) </code> immediately
+     * afterward.
@@ -1449,11 +1823,18 @@ public class NNTPClient extends NNTP {
-     *
-     * @param pointer A parameter through which to return the article's number and unique id. The articleId field cannot always be trusted because of server
-     *                deviations from RFC 977 reply formats. You may set this parameter to null if you do not desire to retrieve the returned article
-     *                information.
-     * @return True if successful, false if not (e.g., there is no previous article).
-     * @throws NNTPConnectionClosedException If the NNTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send NNTP reply code 400. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     */
-    public boolean selectPreviousArticle(final ArticleInfo pointer) throws IOException {
+     * @param pointer    A parameter through which to return the article's
+     *   number and unique id.  The articleId field cannot always be trusted
+     *   because of server deviations from RFC 977 reply formats.  You may
+     *   set this parameter to null if you do not desire to retrieve the
+     *   returned article information.
+     * @return True if successful, false if not (e.g., there is no previous
+     *     article).
+     * @throws NNTPConnectionClosedException
+     *      If the NNTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send NNTP reply code 400.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     */
+    public boolean selectPreviousArticle(final ArticleInfo pointer)
+    throws IOException
+    {
@@ -1479 +1860 @@ public class NNTPClient extends NNTP {
-        final ArticleInfo ai = ap2ai(pointer);
+        final ArticleInfo ai =  ap2ai(pointer);
diff --git a/src/main/java/org/apache/commons/net/nntp/NNTPCommand.java b/src/main/java/org/apache/commons/net/nntp/NNTPCommand.java
index c22484bdf..ffa5834dc 100644
--- a/src/main/java/org/apache/commons/net/nntp/NNTPCommand.java
+++ b/src/main/java/org/apache/commons/net/nntp/NNTPCommand.java
@@ -21 +21,2 @@ package org.apache.commons.net.nntp;
- * NNTPCommand stores a set of constants for NNTP command codes. To interpret the meaning of the codes, familiarity with RFC 977 is assumed.
+ * NNTPCommand stores a set of constants for NNTP command codes.  To interpret
+ * the meaning of the codes, familiarity with RFC 977 is assumed.
@@ -24 +25,2 @@ package org.apache.commons.net.nntp;
-public final class NNTPCommand {
+public final class NNTPCommand
+{
@@ -26,8 +28,8 @@ public final class NNTPCommand {
-    public static final int ARTICLE = 0;
-    public static final int BODY = 1;
-    public static final int GROUP = 2;
-    public static final int HEAD = 3;
-    public static final int HELP = 4;
-    public static final int IHAVE = 5;
-    public static final int LAST = 6;
-    public static final int LIST = 7;
+    public static final int ARTICLE   = 0;
+    public static final int BODY      = 1;
+    public static final int GROUP     = 2;
+    public static final int HEAD      = 3;
+    public static final int HELP      = 4;
+    public static final int IHAVE     = 5;
+    public static final int LAST      = 6;
+    public static final int LIST      = 7;
@@ -35,12 +37,15 @@ public final class NNTPCommand {
-    public static final int NEWNEWS = 9;
-    public static final int NEXT = 10;
-    public static final int POST = 11;
-    public static final int QUIT = 12;
-    public static final int SLAVE = 13;
-    public static final int STAT = 14;
-    public static final int AUTHINFO = 15;
-    public static final int XOVER = 16;
-    public static final int XHDR = 17;
-
-    private static final String[] commands = { "ARTICLE", "BODY", "GROUP", "HEAD", "HELP", "IHAVE", "LAST", "LIST", "NEWGROUPS", "NEWNEWS", "NEXT", "POST",
-            "QUIT", "SLAVE", "STAT", "AUTHINFO", "XOVER", "XHDR" };
+    public static final int NEWNEWS   = 9;
+    public static final int NEXT      = 10;
+    public static final int POST      = 11;
+    public static final int QUIT      = 12;
+    public static final int SLAVE     = 13;
+    public static final int STAT      = 14;
+    public static final int AUTHINFO  = 15;
+    public static final int XOVER     = 16;
+    public static final int XHDR      = 17;
+
+    private static final String[] commands = {
+        "ARTICLE", "BODY", "GROUP", "HEAD", "HELP", "IHAVE", "LAST", "LIST",
+        "NEWGROUPS", "NEWNEWS", "NEXT", "POST", "QUIT", "SLAVE", "STAT",
+        "AUTHINFO", "XOVER", "XHDR"
+    };
@@ -49 +54,2 @@ public final class NNTPCommand {
-     * Retrieve the NNTP protocol command string corresponding to a specified command code.
+     * Retrieve the NNTP protocol command string corresponding to a specified
+     * command code.
@@ -51 +56,0 @@ public final class NNTPCommand {
-     *
@@ -53 +58,2 @@ public final class NNTPCommand {
-     * @return The NNTP protcol command string corresponding to a specified command code.
+     * @return The NNTP protcol command string corresponding to a specified
+     *         command code.
@@ -55 +61,2 @@ public final class NNTPCommand {
-    public static String getCommand(final int command) {
+    public static String getCommand(final int command)
+    {
@@ -58,0 +66 @@ public final class NNTPCommand {
+
@@ -60,2 +68,2 @@ public final class NNTPCommand {
-    private NNTPCommand() {
-    }
+    private NNTPCommand()
+    {}
diff --git a/src/main/java/org/apache/commons/net/nntp/NNTPConnectionClosedException.java b/src/main/java/org/apache/commons/net/nntp/NNTPConnectionClosedException.java
index b5e04e275..e654f7b7b 100644
--- a/src/main/java/org/apache/commons/net/nntp/NNTPConnectionClosedException.java
+++ b/src/main/java/org/apache/commons/net/nntp/NNTPConnectionClosedException.java
@@ -23,3 +23,7 @@ import java.io.IOException;
- * NNTPConnectionClosedException is used to indicate the premature or unexpected closing of an NNTP connection resulting from a
- * {@link org.apache.commons.net.nntp.NNTPReply#SERVICE_DISCONTINUED NNTPReply.SERVICE_DISCONTINUED } response (NNTP reply code 400) to a failed NNTP command.
- * This exception is derived from IOException and therefore may be caught either as an IOException or specifically as an NNTPConnectionClosedException.
+ * NNTPConnectionClosedException is used to indicate the premature or
+ * unexpected closing of an NNTP connection resulting from a
+ * {@link org.apache.commons.net.nntp.NNTPReply#SERVICE_DISCONTINUED NNTPReply.SERVICE_DISCONTINUED }
+ *  response (NNTP reply code 400) to a
+ * failed NNTP command.  This exception is derived from IOException and
+ * therefore may be caught either as an IOException or specifically as an
+ * NNTPConnectionClosedException.
@@ -31 +35,2 @@ import java.io.IOException;
-public final class NNTPConnectionClosedException extends IOException {
+public final class NNTPConnectionClosedException extends IOException
+{
@@ -36 +41,2 @@ public final class NNTPConnectionClosedException extends IOException {
-    public NNTPConnectionClosedException() {
+    public NNTPConnectionClosedException()
+    {
@@ -42,2 +48 @@ public final class NNTPConnectionClosedException extends IOException {
-     *
-     * @param message The message explaining the reason for the exception.
+     * @param message  The message explaining the reason for the exception.
@@ -45 +50,2 @@ public final class NNTPConnectionClosedException extends IOException {
-    public NNTPConnectionClosedException(final String message) {
+    public NNTPConnectionClosedException(final String message)
+    {
diff --git a/src/main/java/org/apache/commons/net/nntp/NNTPReply.java b/src/main/java/org/apache/commons/net/nntp/NNTPReply.java
index e6d5e718c..f03ba63a9 100644
--- a/src/main/java/org/apache/commons/net/nntp/NNTPReply.java
+++ b/src/main/java/org/apache/commons/net/nntp/NNTPReply.java
@@ -21,2 +21,4 @@ package org.apache.commons.net.nntp;
- * NNTPReply stores a set of constants for NNTP reply codes. To interpret the meaning of the codes, familiarity with RFC 977 is assumed. The mnemonic constant
- * names are transcriptions from the code descriptions of RFC 977.
+ * NNTPReply stores a set of constants for NNTP reply codes.  To interpret
+ * the meaning of the codes, familiarity with RFC 977 is assumed.
+ * The mnemonic constant names are transcriptions from the code descriptions
+ * of RFC 977.
@@ -25 +27,2 @@ package org.apache.commons.net.nntp;
-public final class NNTPReply {
+public final class NNTPReply
+{
@@ -27,3 +30,3 @@ public final class NNTPReply {
-    public static final int HELP_TEXT_FOLLOWS = 100;
-    public static final int DEBUG_OUTPUT = 199;
-    public static final int SERVER_READY_POSTING_ALLOWED = 200;
+    public static final int HELP_TEXT_FOLLOWS                = 100;
+    public static final int DEBUG_OUTPUT                     = 199;
+    public static final int SERVER_READY_POSTING_ALLOWED     = 200;
@@ -31,3 +34,3 @@ public final class NNTPReply {
-    public static final int SLAVE_STATUS_NOTED = 202;
-    public static final int CLOSING_CONNECTION = 205;
-    public static final int GROUP_SELECTED = 211;
+    public static final int SLAVE_STATUS_NOTED               = 202;
+    public static final int CLOSING_CONNECTION               = 205;
+    public static final int GROUP_SELECTED                   = 211;
@@ -39,20 +42,20 @@ public final class NNTPReply {
-    public static final int NEW_NEWSGROUP_LIST_FOLLOWS = 231;
-    public static final int ARTICLE_TRANSFERRED_OK = 235;
-    public static final int ARTICLE_POSTED_OK = 240;
-    public static final int AUTHENTICATION_ACCEPTED = 281;
-    public static final int SEND_ARTICLE_TO_TRANSFER = 335;
-    public static final int SEND_ARTICLE_TO_POST = 340;
-    public static final int MORE_AUTH_INFO_REQUIRED = 381;
-    public static final int SERVICE_DISCONTINUED = 400;
-    public static final int NO_SUCH_NEWSGROUP = 411;
-    public static final int NO_NEWSGROUP_SELECTED = 412;
-    public static final int NO_CURRENT_ARTICLE_SELECTED = 420;
-    public static final int NO_NEXT_ARTICLE = 421;
-    public static final int NO_PREVIOUS_ARTICLE = 422;
-    public static final int NO_SUCH_ARTICLE_NUMBER = 423;
-    public static final int NO_SUCH_ARTICLE_FOUND = 430;
-    public static final int ARTICLE_NOT_WANTED = 435;
-    public static final int TRANSFER_FAILED = 436;
-    public static final int ARTICLE_REJECTED = 437;
-    public static final int POSTING_NOT_ALLOWED = 440;
-    public static final int POSTING_FAILED = 441;
+    public static final int NEW_NEWSGROUP_LIST_FOLLOWS         = 231;
+    public static final int ARTICLE_TRANSFERRED_OK             = 235;
+    public static final int ARTICLE_POSTED_OK                  = 240;
+    public static final int AUTHENTICATION_ACCEPTED            = 281;
+    public static final int SEND_ARTICLE_TO_TRANSFER           = 335;
+    public static final int SEND_ARTICLE_TO_POST               = 340;
+    public static final int MORE_AUTH_INFO_REQUIRED            = 381;
+    public static final int SERVICE_DISCONTINUED               = 400;
+    public static final int NO_SUCH_NEWSGROUP                  = 411;
+    public static final int NO_NEWSGROUP_SELECTED              = 412;
+    public static final int NO_CURRENT_ARTICLE_SELECTED        = 420;
+    public static final int NO_NEXT_ARTICLE                    = 421;
+    public static final int NO_PREVIOUS_ARTICLE                = 422;
+    public static final int NO_SUCH_ARTICLE_NUMBER             = 423;
+    public static final int NO_SUCH_ARTICLE_FOUND              = 430;
+    public static final int ARTICLE_NOT_WANTED                 = 435;
+    public static final int TRANSFER_FAILED                    = 436;
+    public static final int ARTICLE_REJECTED                   = 437;
+    public static final int POSTING_NOT_ALLOWED                = 440;
+    public static final int POSTING_FAILED                     = 441;
@@ -60,6 +63,6 @@ public final class NNTPReply {
-    public static final int AUTHENTICATION_REQUIRED = 480;
-    public static final int AUTHENTICATION_REJECTED = 482;
-    public static final int COMMAND_NOT_RECOGNIZED = 500;
-    public static final int COMMAND_SYNTAX_ERROR = 501;
-    public static final int PERMISSION_DENIED = 502;
-    public static final int PROGRAM_FAULT = 503;
+    public static final int AUTHENTICATION_REQUIRED            = 480;
+    public static final int AUTHENTICATION_REJECTED            = 482;
+    public static final int COMMAND_NOT_RECOGNIZED             = 500;
+    public static final int COMMAND_SYNTAX_ERROR               = 501;
+    public static final int PERMISSION_DENIED                  = 502;
+    public static final int PROGRAM_FAULT                      = 503;
@@ -70,2 +73,4 @@ public final class NNTPReply {
-     * Determine if a reply code is an informational response. All codes beginning with a 1 are positive informational responses. Informational responses are
-     * used to provide human readable information such as help text.
+     * Determine if a reply code is an informational response.  All
+     * codes beginning with a 1 are positive informational responses.
+     * Informational responses are used to provide human readable
+     * information such as help text.
@@ -73,3 +78,3 @@ public final class NNTPReply {
-     *
-     * @param reply The reply code to test.
-     * @return True if a reply code is an informational response, false if not.
+     * @param reply  The reply code to test.
+     * @return True if a reply code is an informational response, false
+     *         if not.
@@ -77 +82,2 @@ public final class NNTPReply {
-    public static boolean isInformational(final int reply) {
+    public static boolean isInformational(final int reply)
+    {
@@ -82,2 +88,5 @@ public final class NNTPReply {
-     * Determine if a reply code is a negative permanent response. All codes beginning with a 5 are negative permanent responses. The NNTP server will send a
-     * negative permanent response when it does not implement a command, a command is incorrectly formatted, or a serious program error occurs.
+     * Determine if a reply code is a negative permanent response.  All
+     * codes beginning with a 5 are negative permanent responses.
+     * The NNTP server will send a negative permanent response when
+     * it does not implement a command, a command is incorrectly formatted,
+     * or a serious program error occurs.
@@ -85,3 +94,3 @@ public final class NNTPReply {
-     *
-     * @param reply The reply code to test.
-     * @return True if a reply code is a negative permanent response, false if not.
+     * @param reply  The reply code to test.
+     * @return True if a reply code is a negative permanent response, false
+     *         if not.
@@ -89 +98,2 @@ public final class NNTPReply {
-    public static boolean isNegativePermanent(final int reply) {
+    public static boolean isNegativePermanent(final int reply)
+    {
@@ -94,3 +104,6 @@ public final class NNTPReply {
-     * Determine if a reply code is a negative transient response. All codes beginning with a 4 are negative transient responses. The NNTP server will send a
-     * negative transient response on the failure of a correctly formatted command that could not be performed for some reason. For example, retrieving an
-     * article that does not exist will result in a negative transient response.
+     * Determine if a reply code is a negative transient response.  All
+     * codes beginning with a 4 are negative transient responses.
+     * The NNTP server will send a negative transient response on the
+     * failure of a correctly formatted command that could not be performed
+     * for some reason.  For example, retrieving an article that does not
+     * exist will result in a negative transient response.
@@ -98,3 +111,3 @@ public final class NNTPReply {
-     *
-     * @param reply The reply code to test.
-     * @return True if a reply code is a negative transient response, false if not.
+     * @param reply  The reply code to test.
+     * @return True if a reply code is a negative transient response, false
+     *         if not.
@@ -102 +115,2 @@ public final class NNTPReply {
-    public static boolean isNegativeTransient(final int reply) {
+    public static boolean isNegativeTransient(final int reply)
+    {
@@ -107,2 +121,4 @@ public final class NNTPReply {
-     * Determine if a reply code is a positive completion response. All codes beginning with a 2 are positive completion responses. The NNTP server will send a
-     * positive completion response on the final successful completion of a command.
+     * Determine if a reply code is a positive completion response.  All
+     * codes beginning with a 2 are positive completion responses.
+     * The NNTP server will send a positive completion response on the final
+     * successful completion of a command.
@@ -110,3 +126,3 @@ public final class NNTPReply {
-     *
-     * @param reply The reply code to test.
-     * @return True if a reply code is a positive completion response, false if not.
+     * @param reply  The reply code to test.
+     * @return True if a reply code is a positive completion response, false
+     *         if not.
@@ -114 +130,2 @@ public final class NNTPReply {
-    public static boolean isPositiveCompletion(final int reply) {
+    public static boolean isPositiveCompletion(final int reply)
+    {
@@ -119,3 +136,7 @@ public final class NNTPReply {
-     * Determine if a reply code is a positive intermediate response. All codes beginning with a 3 are positive intermediate responses. The NNTP server will
-     * send a positive intermediate response on the successful completion of one part of a multi-part command or sequence of commands. For example, after a
-     * successful POST command, a positive intermediate response will be sent to indicate that the server is ready to receive the article to be posted.
+     * Determine if a reply code is a positive intermediate response.  All
+     * codes beginning with a 3 are positive intermediate responses.
+     * The NNTP server will send a positive intermediate response on the
+     * successful completion of one part of a multi-part command or
+     * sequence of commands.  For example, after a successful POST command,
+     * a positive intermediate response will be sent to indicate that the
+     * server is ready to receive the article to be posted.
@@ -123,3 +144,3 @@ public final class NNTPReply {
-     *
-     * @param reply The reply code to test.
-     * @return True if a reply code is a positive intermediate response, false if not.
+     * @param reply  The reply code to test.
+     * @return True if a reply code is a positive intermediate response, false
+     *         if not.
@@ -127 +148,2 @@ public final class NNTPReply {
-    public static boolean isPositiveIntermediate(final int reply) {
+    public static boolean isPositiveIntermediate(final int reply)
+    {
@@ -131,2 +153,2 @@ public final class NNTPReply {
-    private NNTPReply() {
-    }
+    private NNTPReply()
+    {}
diff --git a/src/main/java/org/apache/commons/net/nntp/NewGroupsOrNewsQuery.java b/src/main/java/org/apache/commons/net/nntp/NewGroupsOrNewsQuery.java
index a3fd81043..03daa20e0 100644
--- a/src/main/java/org/apache/commons/net/nntp/NewGroupsOrNewsQuery.java
+++ b/src/main/java/org/apache/commons/net/nntp/NewGroupsOrNewsQuery.java
@@ -23,3 +23,7 @@ import java.util.Calendar;
- * The NewGroupsOrNewsQuery class. This is used to issue NNTP NEWGROUPS and NEWNEWS queries, implemented by
- * {@link org.apache.commons.net.nntp.NNTPClient#listNewNewsgroups listNewNewsGroups } and {@link org.apache.commons.net.nntp.NNTPClient#listNewNews listNewNews
- * } respectively. It prevents you from having to format date, time, distribution, and newgroup arguments.
+ * The NewGroupsOrNewsQuery class.  This is used to issue NNTP NEWGROUPS and
+ * NEWNEWS queries, implemented by
+ * {@link org.apache.commons.net.nntp.NNTPClient#listNewNewsgroups listNewNewsGroups }
+ *  and
+ * {@link org.apache.commons.net.nntp.NNTPClient#listNewNews listNewNews }
+ *  respectively.  It prevents you from having to format
+ * date, time, distribution, and newgroup arguments.
@@ -28 +31,0 @@ import java.util.Calendar;
- *
@@ -34,2 +37,2 @@ import java.util.Calendar;
- *
- * This will retrieve the list of newsgroups starting with the comp. distribution prefix created since midnight 11/15/97.
+ * This will retrieve the list of newsgroups starting with the comp.
+ * distribution prefix created since midnight 11/15/97.
@@ -40 +43,2 @@ import java.util.Calendar;
-public final class NewGroupsOrNewsQuery {
+public final class NewGroupsOrNewsQuery
+{
@@ -45,0 +50 @@ public final class NewGroupsOrNewsQuery {
+
@@ -49,3 +54,2 @@ public final class NewGroupsOrNewsQuery {
-     *
-     * @param date The date since which new groups or news have arrived.
-     * @param gmt  True if the date should be considered as GMT, false if not.
+     * @param date  The date since which new groups or news have arrived.
+     * @param gmt   True if the date should be considered as GMT, false if not.
@@ -53 +57,2 @@ public final class NewGroupsOrNewsQuery {
-    public NewGroupsOrNewsQuery(final Calendar date, final boolean gmt) {
+    public NewGroupsOrNewsQuery(final Calendar date, final boolean gmt)
+    {
@@ -134,0 +140 @@ public final class NewGroupsOrNewsQuery {
+
@@ -151,0 +158 @@ public final class NewGroupsOrNewsQuery {
+
@@ -153,3 +160,6 @@ public final class NewGroupsOrNewsQuery {
-     * Add a distribution group to the query. The distribution part of a newsgroup is the segment of the name preceding the first dot (e.g., comp, alt, rec).
-     * Only those newsgroups matching one of the distributions or, in the case of NEWNEWS, an article in a newsgroup matching one of the distributions, will be
-     * reported as a query result. Adding distributions is purely optional.
+     * Add a distribution group to the query.  The distribution part of a
+     * newsgroup is the segment of the name preceding the first dot (e.g.,
+     * comp, alt, rec).  Only those newsgroups matching one of the
+     * distributions or, in the case of NEWNEWS, an article in a newsgroup
+     * matching one of the distributions, will be reported as a query result.
+     * Adding distributions is purely optional.
@@ -157 +166,0 @@ public final class NewGroupsOrNewsQuery {
-     *
@@ -160 +169,2 @@ public final class NewGroupsOrNewsQuery {
-    public void addDistribution(final String distribution) {
+    public void addDistribution(final String distribution)
+    {
@@ -168,0 +179 @@ public final class NewGroupsOrNewsQuery {
+
@@ -170,3 +181,5 @@ public final class NewGroupsOrNewsQuery {
-     * Add a newsgroup to the list of newsgroups being queried. Newsgroups added this way are only meaningful to the NEWNEWS command. Newsgroup names may
-     * include the <code> * </code> wildcard, as in <code>comp.lang.* </code> or <code> comp.lang.java.* </code>. Adding at least one newsgroup is mandatory for
-     * the NEWNEWS command.
+     * Add a newsgroup to the list of newsgroups being queried.  Newsgroups
+     * added this way are only meaningful to the NEWNEWS command.  Newsgroup
+     * names may include the <code> * </code> wildcard, as in
+     * <code>comp.lang.* </code> or <code> comp.lang.java.* </code>.  Adding
+     * at least one newsgroup is mandatory for the NEWNEWS command.
@@ -174,2 +187,2 @@ public final class NewGroupsOrNewsQuery {
-     *
-     * @param newsgroup The newsgroup to add to the list of groups to be checked for new news.
+     * @param newsgroup  The newsgroup to add to the list of groups to be
+     *                   checked for new news.
@@ -177 +190,2 @@ public final class NewGroupsOrNewsQuery {
-    public void addNewsgroup(final String newsgroup) {
+    public void addNewsgroup(final String newsgroup)
+    {
@@ -185,0 +200 @@ public final class NewGroupsOrNewsQuery {
+
@@ -187 +202,2 @@ public final class NewGroupsOrNewsQuery {
-     * Return the NNTP query formatted date (year, month, day in the form YYMMDD.
+     * Return the NNTP query formatted date (year, month, day in the form
+     * YYMMDD.
@@ -189 +204,0 @@ public final class NewGroupsOrNewsQuery {
-     *
@@ -192 +207,2 @@ public final class NewGroupsOrNewsQuery {
-    public String getDate() {
+    public String getDate()
+    {
@@ -197 +213,2 @@ public final class NewGroupsOrNewsQuery {
-     * Return the comma separated list of distributions. This may be null if there are no distributions.
+     * Return the comma separated list of distributions.  This may be null
+     * if there are no distributions.
@@ -199,2 +216,2 @@ public final class NewGroupsOrNewsQuery {
-     *
-     * @return The list of distributions, which may be null if no distributions have been specified.
+     * @return The list of distributions, which may be null if no distributions
+     *         have been specified.
@@ -202 +219,2 @@ public final class NewGroupsOrNewsQuery {
-    public String getDistributions() {
+    public String getDistributions()
+    {
@@ -207 +225,2 @@ public final class NewGroupsOrNewsQuery {
-     * Return the comma separated list of newsgroups. This may be null if there are no newsgroups
+     * Return the comma separated list of newsgroups.  This may be null
+     * if there are no newsgroups
@@ -209,2 +228,2 @@ public final class NewGroupsOrNewsQuery {
-     *
-     * @return The list of newsgroups, which may be null if no newsgroups have been specified.
+     * @return The list of newsgroups, which may be null if no newsgroups
+     *         have been specified.
@@ -212 +231,2 @@ public final class NewGroupsOrNewsQuery {
-    public String getNewsgroups() {
+    public String getNewsgroups()
+    {
@@ -217 +237,2 @@ public final class NewGroupsOrNewsQuery {
-     * Return the NNTP query formatted time (hour, minutes, seconds in the form HHMMSS.
+     * Return the NNTP query formatted time (hour, minutes, seconds in the form
+     * HHMMSS.
@@ -219 +239,0 @@ public final class NewGroupsOrNewsQuery {
-     *
@@ -222 +242,2 @@ public final class NewGroupsOrNewsQuery {
-    public String getTime() {
+    public String getTime()
+    {
@@ -229 +249,0 @@ public final class NewGroupsOrNewsQuery {
-     *
@@ -232 +252,2 @@ public final class NewGroupsOrNewsQuery {
-    public boolean isGMT() {
+    public boolean isGMT()
+    {
@@ -237,3 +258,5 @@ public final class NewGroupsOrNewsQuery {
-     * Add a newsgroup to the list of newsgroups being queried, but indicate that group should not be checked for new news. Newsgroups added this way are only
-     * meaningful to the NEWNEWS command. Newsgroup names may include the <code> * </code> wildcard, as in <code>comp.lang.* </code> or
-     * <code> comp.lang.java.* </code>.
+     * Add a newsgroup to the list of newsgroups being queried, but indicate
+     * that group should not be checked for new news.  Newsgroups
+     * added this way are only meaningful to the NEWNEWS command.
+     * Newsgroup names may include the <code> * </code> wildcard, as in
+     * <code>comp.lang.* </code> or <code> comp.lang.java.* </code>.
@@ -241,2 +264,2 @@ public final class NewGroupsOrNewsQuery {
-     * The following would create a query that searched for new news in all comp.lang.java newsgroups except for comp.lang.java.advocacy.
-     *
+     * The following would create a query that searched for new news in
+     * all comp.lang.java newsgroups except for comp.lang.java.advocacy.
@@ -248,2 +271,3 @@ public final class NewGroupsOrNewsQuery {
-     *
-     * @param newsgroup The newsgroup to add to the list of groups to be checked for new news, but which should be omitted from the search for new news..
+     * @param newsgroup  The newsgroup to add to the list of groups to be
+     *                   checked for new news, but which should be omitted from
+     *                   the search for new news..
@@ -251 +275,2 @@ public final class NewGroupsOrNewsQuery {
-    public void omitNewsgroup(final String newsgroup) {
+    public void omitNewsgroup(final String newsgroup)
+    {
diff --git a/src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java b/src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java
index fab1c3f4b..9095f1c9e 100644
--- a/src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java
+++ b/src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java
@@ -21,3 +21,8 @@ package org.apache.commons.net.nntp;
- * NewsgroupInfo stores information pertaining to a newsgroup returned by the NNTP GROUP, LIST, and NEWGROUPS commands, implemented by
- * {@link org.apache.commons.net.nntp.NNTPClient#selectNewsgroup selectNewsgroup } , {@link org.apache.commons.net.nntp.NNTPClient#listNewsgroups listNewsgroups
- * } , and {@link org.apache.commons.net.nntp.NNTPClient#listNewNewsgroups listNewNewsgroups } respectively.
+ * NewsgroupInfo stores information pertaining to a newsgroup returned by
+ * the NNTP GROUP, LIST, and NEWGROUPS commands, implemented by
+ * {@link org.apache.commons.net.nntp.NNTPClient#selectNewsgroup selectNewsgroup }
+ * ,
+ * {@link org.apache.commons.net.nntp.NNTPClient#listNewsgroups listNewsgroups }
+ * , and
+ * {@link org.apache.commons.net.nntp.NNTPClient#listNewNewsgroups listNewNewsgroups }
+ *  respectively.
@@ -28 +33,2 @@ package org.apache.commons.net.nntp;
-public final class NewsgroupInfo {
+public final class NewsgroupInfo
+{
@@ -30,2 +36,4 @@ public final class NewsgroupInfo {
-     * A constant indicating that the posting permission of a newsgroup is unknown. For example, the NNTP GROUP command does not return posting information, so
-     * NewsgroupInfo instances obtained from that command willhave an UNKNOWN_POSTING_PERMISSION.
+     * A constant indicating that the posting permission of a newsgroup is
+     * unknown.  For example, the NNTP GROUP command does not return posting
+     * information, so NewsgroupInfo instances obtained from that command
+     * willhave an UNKNOWN_POSTING_PERMISSION.
@@ -58 +66,2 @@ public final class NewsgroupInfo {
-     * Get the estimated number of articles in the newsgroup. The accuracy of this value will depend on the server implementation.
+     * Get the estimated number of articles in the newsgroup.  The
+     * accuracy of this value will depend on the server implementation.
@@ -60 +68,0 @@ public final class NewsgroupInfo {
-     *
@@ -63 +71,2 @@ public final class NewsgroupInfo {
-    public long getArticleCountLong() {
+    public long getArticleCountLong()
+    {
@@ -75 +83,0 @@ public final class NewsgroupInfo {
-     *
@@ -78 +86,2 @@ public final class NewsgroupInfo {
-    public long getFirstArticleLong() {
+    public long getFirstArticleLong()
+    {
@@ -90 +98,0 @@ public final class NewsgroupInfo {
-     *
@@ -93 +101,2 @@ public final class NewsgroupInfo {
-    public long getLastArticleLong() {
+    public long getLastArticleLong()
+    {
@@ -100 +108,0 @@ public final class NewsgroupInfo {
-     *
@@ -103 +111,2 @@ public final class NewsgroupInfo {
-    public String getNewsgroup() {
+    public String getNewsgroup()
+    {
@@ -108 +117,2 @@ public final class NewsgroupInfo {
-     * Get the posting permission of the newsgroup. This will be one of the <code> POSTING_PERMISSION </code> constants.
+     * Get the posting permission of the newsgroup.  This will be one of
+     * the <code> POSTING_PERMISSION </code> constants.
@@ -110 +119,0 @@ public final class NewsgroupInfo {
-     *
@@ -113 +122,2 @@ public final class NewsgroupInfo {
-    public int getPostingPermission() {
+    public int getPostingPermission()
+    {
@@ -117 +127,2 @@ public final class NewsgroupInfo {
-    void setArticleCount(final long count) {
+    void setArticleCount(final long count)
+    {
@@ -121 +132,2 @@ public final class NewsgroupInfo {
-    void setFirstArticle(final long first) {
+    void setFirstArticle(final long first)
+    {
@@ -126,4 +138,16 @@ public final class NewsgroupInfo {
-     * public String toString() { StringBuilder buffer = new StringBuilder(); buffer.append(__newsgroup); buffer.append(' '); buffer.append(__lastArticle);
-     * buffer.append(' '); buffer.append(__firstArticle); buffer.append(' '); switch(__postingPermission) { case 1: buffer.append('m'); break; case 2:
-     * buffer.append('y'); break; case 3: buffer.append('n'); break; } return buffer.toString(); }
-     */
+    public String toString() {
+      StringBuilder buffer = new StringBuilder();
+      buffer.append(__newsgroup);
+      buffer.append(' ');
+      buffer.append(__lastArticle);
+      buffer.append(' ');
+      buffer.append(__firstArticle);
+      buffer.append(' ');
+      switch(__postingPermission) {
+        case 1: buffer.append('m'); break;
+        case 2: buffer.append('y'); break;
+        case 3: buffer.append('n'); break;
+      }
+      return buffer.toString();
+}
+    */
@@ -133 +157,2 @@ public final class NewsgroupInfo {
-    void setLastArticle(final long last) {
+    void setLastArticle(final long last)
+    {
@@ -137 +162,2 @@ public final class NewsgroupInfo {
-    void setNewsgroup(final String newsgroup) {
+    void setNewsgroup(final String newsgroup)
+    {
@@ -141 +167,2 @@ public final class NewsgroupInfo {
-    void setPostingPermission(final int permission) {
+    void setPostingPermission(final int permission)
+    {
diff --git a/src/main/java/org/apache/commons/net/nntp/NewsgroupIterator.java b/src/main/java/org/apache/commons/net/nntp/NewsgroupIterator.java
index c6f85be37..61d7347ea 100644
--- a/src/main/java/org/apache/commons/net/nntp/NewsgroupIterator.java
+++ b/src/main/java/org/apache/commons/net/nntp/NewsgroupIterator.java
@@ -22 +21,0 @@ import java.util.Iterator;
-
@@ -24,2 +23,2 @@ import java.util.Iterator;
- * Class which wraps an {@code Iterable<String>} of raw newgroup information to generate an {@code Iterable<NewsgroupInfo>} of the parsed information.
- *
+ * Class which wraps an {@code Iterable<String>} of raw newgroup information
+ * to generate an {@code Iterable<NewsgroupInfo>} of the parsed information.
@@ -30 +29 @@ class NewsgroupIterator implements Iterator<NewsgroupInfo>, Iterable<NewsgroupIn
-    private final Iterator<String> stringIterator;
+    private  final Iterator<String> stringIterator;
diff --git a/src/main/java/org/apache/commons/net/nntp/ReplyIterator.java b/src/main/java/org/apache/commons/net/nntp/ReplyIterator.java
index 5c9fcda0d..5a059dcb0 100644
--- a/src/main/java/org/apache/commons/net/nntp/ReplyIterator.java
+++ b/src/main/java/org/apache/commons/net/nntp/ReplyIterator.java
@@ -30,2 +30,2 @@ import org.apache.commons.net.io.Util;
- * Wraps a {@link BufferedReader} and returns an {@code Iterable<String>} which returns the individual lines from the reader.
- *
+ * Wraps a {@link BufferedReader} and returns an {@code Iterable<String>}
+ * which returns the individual lines from the reader.
@@ -48 +48 @@ class ReplyIterator implements Iterator<String>, Iterable<String> {
-     * @param _reader      the reader to wrap
+     * @param _reader the reader to wrap
@@ -62 +62 @@ class ReplyIterator implements Iterator<String>, Iterable<String> {
-        if (savedException != null) {
+        if (savedException != null){
@@ -75 +75 @@ class ReplyIterator implements Iterator<String>, Iterable<String> {
-        if (savedException != null) {
+        if (savedException != null){
diff --git a/src/main/java/org/apache/commons/net/nntp/SimpleNNTPHeader.java b/src/main/java/org/apache/commons/net/nntp/SimpleNNTPHeader.java
index 07cf99fe9..61d56ce57 100644
--- a/src/main/java/org/apache/commons/net/nntp/SimpleNNTPHeader.java
+++ b/src/main/java/org/apache/commons/net/nntp/SimpleNNTPHeader.java
@@ -21,2 +21,5 @@ package org.apache.commons.net.nntp;
- * This class is used to construct the bare minimum acceptable header for most news readers. To construct more complicated headers you should refer to RFC 822.
- * When the Java Mail API is finalized, you will be able to use it to compose fully compliant Internet text messages.
+ * This class is used to construct the bare minimum
+ * acceptable header for most news readers.  To construct more
+ * complicated headers you should refer to RFC 822.  When the
+ * Java Mail API is finalized, you will be
+ * able to use it to compose fully compliant Internet text messages.
@@ -24,3 +27,3 @@ package org.apache.commons.net.nntp;
- * The main purpose of the class is to faciliatate the article posting process, by relieving the programmer from having to explicitly format an article header.
- * For example:
- *
+ * The main purpose of the class is to faciliatate the article posting
+ * process, by relieving the programmer from having to explicitly format
+ * an article header.  For example:
@@ -29,2 +32,2 @@ package org.apache.commons.net.nntp;
- * if (writer == null) // failure
- *     return false;
+ * if(writer == null) // failure
+ *   return false;
@@ -37,2 +40,2 @@ package org.apache.commons.net.nntp;
- * if (!client.completePendingCommand()) // failure
- *     return false;
+ * if(!client.completePendingCommand()) // failure
+ *   return false;
@@ -44 +47,2 @@ package org.apache.commons.net.nntp;
-public class SimpleNNTPHeader {
+public class SimpleNNTPHeader
+{
@@ -51 +55,2 @@ public class SimpleNNTPHeader {
-     * Creates a new SimpleNNTPHeader instance initialized with the given from and subject header field values.
+     * Creates a new SimpleNNTPHeader instance initialized with the given
+     * from and subject header field values.
@@ -53,3 +58,4 @@ public class SimpleNNTPHeader {
-     *
-     * @param from    The value of the <code>From:</code> header field. This should be the article poster's email address.
-     * @param subject The value of the <code>Subject:</code> header field. This should be the subject of the article.
+     * @param from  The value of the <code>From:</code> header field.  This
+     *              should be the article poster's email address.
+     * @param subject  The value of the <code>Subject:</code> header field.
+     *              This should be the subject of the article.
@@ -57 +63,2 @@ public class SimpleNNTPHeader {
-    public SimpleNNTPHeader(final String from, final String subject) {
+    public SimpleNNTPHeader(final String from, final String subject)
+    {
@@ -66,3 +73,4 @@ public class SimpleNNTPHeader {
-     * Adds an arbitrary header field with the given value to the article header. These headers will be written after the From, Newsgroups, and Subject fields
-     * when the SimpleNNTPHeader is convertered to a string. An example use would be:
-     *
+     * Adds an arbitrary header field with the given value to the article
+     * header.  These headers will be written after the From, Newsgroups,
+     * and Subject fields when the SimpleNNTPHeader is convertered to a string.
+     * An example use would be:
@@ -73,3 +81,2 @@ public class SimpleNNTPHeader {
-     *
-     * @param headerField The header field to add, not including the colon.
-     * @param value       The value of the added header field.
+     * @param headerField  The header field to add, not including the colon.
+     * @param value  The value of the added header field.
@@ -77 +84,2 @@ public class SimpleNNTPHeader {
-    public void addHeaderField(final String headerField, final String value) {
+    public void addHeaderField(final String headerField, final String value)
+    {
@@ -87,2 +95,2 @@ public class SimpleNNTPHeader {
-     *
-     * @param newsgroup The newsgroup to add to the article's newsgroup distribution list.
+     * @param newsgroup  The newsgroup to add to the article's newsgroup
+     *                   distribution list.
@@ -90 +98,2 @@ public class SimpleNNTPHeader {
-    public void addNewsgroup(final String newsgroup) {
+    public void addNewsgroup(final String newsgroup)
+    {
@@ -96,0 +106 @@ public class SimpleNNTPHeader {
+
@@ -100 +109,0 @@ public class SimpleNNTPHeader {
-     *
@@ -103 +112,2 @@ public class SimpleNNTPHeader {
-    public String getFromAddress() {
+    public String getFromAddress()
+    {
@@ -110,2 +120,2 @@ public class SimpleNNTPHeader {
-     *
-     * @return The comma-separated list of newsgroups to which the article is being posted.
+     * @return The comma-separated list of newsgroups to which the article
+     *         is being posted.
@@ -113 +123,2 @@ public class SimpleNNTPHeader {
-    public String getNewsgroups() {
+    public String getNewsgroups()
+    {
@@ -120 +130,0 @@ public class SimpleNNTPHeader {
-     *
@@ -123 +133,2 @@ public class SimpleNNTPHeader {
-    public String getSubject() {
+    public String getSubject()
+    {
@@ -128,2 +139,3 @@ public class SimpleNNTPHeader {
-     * Converts the SimpleNNTPHeader to a properly formatted header in the form of a String, including the blank line used to separate the header from the
-     * article body.
+     * Converts the SimpleNNTPHeader to a properly formatted header in
+     * the form of a String, including the blank line used to separate
+     * the header from the article body.
@@ -131 +142,0 @@ public class SimpleNNTPHeader {
-     *
@@ -135 +146,2 @@ public class SimpleNNTPHeader {
-    public String toString() {
+    public String toString()
+    {
diff --git a/src/main/java/org/apache/commons/net/nntp/ThreadContainer.java b/src/main/java/org/apache/commons/net/nntp/ThreadContainer.java
index cb4619899..97e7ba11d 100644
--- a/src/main/java/org/apache/commons/net/nntp/ThreadContainer.java
+++ b/src/main/java/org/apache/commons/net/nntp/ThreadContainer.java
@@ -21,2 +21,5 @@ package org.apache.commons.net.nntp;
- * A placeholder utility class, used for constructing a tree of Threadables Original implementation by Jamie Zawinski. See the Grendel source for more details
- * <a href="http://lxr.mozilla.org/mozilla/source/grendel/sources/grendel/view/Threader.java#511">here</a> Threadable objects
+ * A placeholder utility class, used for constructing a tree of Threadables
+ * Original implementation by Jamie Zawinski.
+ * See the Grendel source for more details
+ * <a href="http://lxr.mozilla.org/mozilla/source/grendel/sources/grendel/view/Threader.java#511">here</a>
+ * Threadable objects
@@ -85 +88,6 @@ class ThreadContainer {
-            for (prev = null, kid = child, rest = kid.next; kid != null; prev = kid, kid = rest, rest = rest == null ? null : rest.next) {
+            for (prev = null, kid = child, rest = kid.next;
+                kid != null;
+                prev = kid,
+                    kid = rest,
+                    rest = rest == null ? null : rest.next)
+            {
diff --git a/src/main/java/org/apache/commons/net/nntp/Threadable.java b/src/main/java/org/apache/commons/net/nntp/Threadable.java
index 83d31b492..b0a3789b2 100644
--- a/src/main/java/org/apache/commons/net/nntp/Threadable.java
+++ b/src/main/java/org/apache/commons/net/nntp/Threadable.java
@@ -21 +21,2 @@ package org.apache.commons.net.nntp;
- * A placeholder interface for threadable message objects Author: Rory Winston (rwinston@checkfree.com)
+ * A placeholder interface for threadable message objects
+ * Author: Rory Winston (rwinston@checkfree.com)
@@ -26 +26,0 @@ public interface Threadable {
-
@@ -28 +27,0 @@ public interface Threadable {
-
@@ -30 +28,0 @@ public interface Threadable {
-
@@ -32 +29,0 @@ public interface Threadable {
-
@@ -34 +30,0 @@ public interface Threadable {
-
@@ -36 +31,0 @@ public interface Threadable {
-
@@ -38 +32,0 @@ public interface Threadable {
-
diff --git a/src/main/java/org/apache/commons/net/nntp/Threader.java b/src/main/java/org/apache/commons/net/nntp/Threader.java
index dea3f7995..bc52b6f60 100644
--- a/src/main/java/org/apache/commons/net/nntp/Threader.java
+++ b/src/main/java/org/apache/commons/net/nntp/Threader.java
@@ -17,0 +18 @@
+
@@ -40 +41 @@ public class Threader {
-    private void buildContainer(final Threadable threadable, final HashMap<String, ThreadContainer> idTable) {
+    private void buildContainer(final Threadable threadable, final HashMap<String,ThreadContainer> idTable) {
@@ -49 +50 @@ public class Threader {
-                bogusIdCount++; // Avoid dead local store warning
+                bogusIdCount++ ; // Avoid dead local store warning
@@ -71 +72,2 @@ public class Threader {
-            for (final String refString : references) {
+            for (final String refString : references)
+            {
@@ -83 +85,4 @@ public class Threader {
-                if ((parentRef != null) && (ref.parent == null) && (parentRef != ref) && !(ref.findChild(parentRef))) {
+                if ((parentRef != null)
+                    && (ref.parent == null)
+                    && (parentRef != ref)
+                    && !(ref.findChild(parentRef))) {
@@ -95 +100,3 @@ public class Threader {
-        if (parentRef != null && (parentRef == container || container.findChild(parentRef))) {
+        if (parentRef != null
+            && (parentRef == container || container.findChild(parentRef)))
+        {
@@ -105 +112,3 @@ public class Threader {
-            for (prev = null, rest = container.parent.child; rest != null; prev = rest, rest = rest.next) {
+            for (prev = null, rest = container.parent.child;
+                rest != null;
+                prev = rest, rest = rest.next) {
@@ -112 +121,5 @@ public class Threader {
-                throw new RuntimeException("Didnt find " + container + " in parent" + container.parent);
+                throw new RuntimeException(
+                    "Didnt find "
+                        + container
+                        + " in parent"
+                        + container.parent);
@@ -136 +148,0 @@ public class Threader {
-     *
@@ -156,2 +168,2 @@ public class Threader {
-     * If any two members of the root set have the same subject, merge them. This is to attempt to accomodate messages without References: headers.
-     *
+     *  If any two members of the root set have the same subject, merge them.
+     *  This is to attempt to accomodate messages without References: headers.
@@ -197,2 +209,6 @@ public class Threader {
-            if (old == null || (c.threadable == null && old.threadable != null)
-                    || (old.threadable != null && old.threadable.subjectIsReply() && c.threadable != null && !c.threadable.subjectIsReply())) {
+            if (old == null
+                || (c.threadable == null && old.threadable != null)
+                || (old.threadable != null
+                    && old.threadable.subjectIsReply()
+                    && c.threadable != null
+                    && !c.threadable.subjectIsReply())) {
@@ -212 +228,3 @@ public class Threader {
-        for (prev = null, c = root.child, rest = c.next; c != null; prev = c, c = rest, rest = (rest == null ? null : rest.next)) {
+        for (prev = null, c = root.child, rest = c.next;
+            c != null;
+            prev = c, c = rest, rest = (rest == null ? null : rest.next)) {
@@ -245 +263,3 @@ public class Threader {
-                for (tail = old.child; tail != null && tail.next != null; tail = tail.next) {
+                for (tail = old.child;
+                    tail != null && tail.next != null;
+                    tail = tail.next) {
@@ -258,2 +278,6 @@ public class Threader {
-            } else if (old.threadable == null || (c.threadable != null && c.threadable.subjectIsReply() && !old.threadable.subjectIsReply())) {
-                // Else if old is empty, or c has "Re:" and old does not ==> make this message a child of old
+            } else if (
+                old.threadable == null
+                    || (c.threadable != null
+                        && c.threadable.subjectIsReply()
+                        && !old.threadable.subjectIsReply())) {
+                // Else if old is empty, or c has "Re:" and old does not  ==> make this message a child of old
@@ -270 +294,4 @@ public class Threader {
-                for (ThreadContainer tail = newc.child; tail != null; tail = tail.next) {
+                for (ThreadContainer tail = newc.child;
+                    tail != null;
+                    tail = tail.next)
+                {
@@ -295 +321,0 @@ public class Threader {
-     *
@@ -300,3 +326,5 @@ public class Threader {
-        for (prev = null, container = parent.child, next = container.next; container != null; prev = container, container = next, next = (container == null
-                ? null
-                : container.next)) {
+        for (prev = null, container = parent.child, next = container.next;
+            container != null;
+            prev = container,
+                container = next,
+                next = (container == null ? null : container.next)) {
@@ -317 +345,2 @@ public class Threader {
-            else if (container.threadable == null && (container.parent != null || container.child.next == null)) {
+            else if (
+                    container.threadable == null && (container.parent != null || container.child.next == null)) {
@@ -354,2 +383,2 @@ public class Threader {
-     * The client passes in a list of Iterable objects, and the Threader constructs a connected 'graph' of messages
-     *
+     * The client passes in a list of Iterable objects, and
+     * the Threader constructs a connected 'graph' of messages
@@ -365 +394 @@ public class Threader {
-        HashMap<String, ThreadContainer> idTable = new HashMap<>();
+        HashMap<String,ThreadContainer> idTable = new HashMap<>();
@@ -404,2 +433,2 @@ public class Threader {
-     * The client passes in a list of Threadable objects, and the Threader constructs a connected 'graph' of messages
-     *
+     * The client passes in a list of Threadable objects, and
+     * the Threader constructs a connected 'graph' of messages
@@ -411 +440 @@ public class Threader {
-        return thread((Iterable<? extends Threadable>) messages);
+        return thread((Iterable<? extends Threadable>)messages);
@@ -413,0 +443 @@ public class Threader {
+
@@ -417,2 +447,2 @@ public class Threader {
-     * The client passes in an array of Threadable objects, and the Threader constructs a connected 'graph' of messages
-     *
+     * The client passes in an array of Threadable objects, and
+     * the Threader constructs a connected 'graph' of messages
diff --git a/src/main/java/org/apache/commons/net/ntp/NTPUDPClient.java b/src/main/java/org/apache/commons/net/ntp/NTPUDPClient.java
index 162b0e5af..3bce8f7da 100644
--- a/src/main/java/org/apache/commons/net/ntp/NTPUDPClient.java
+++ b/src/main/java/org/apache/commons/net/ntp/NTPUDPClient.java
@@ -27,5 +27,10 @@ import org.apache.commons.net.DatagramSocketClient;
- * The NTPUDPClient class is a UDP implementation of a client for the Network Time Protocol (NTP) described in RFC 1305 as well as the Simple Network Time
- * Protocol (SNTP) in RFC-2030. To use the class, merely open a local datagram socket with <a href="#open"> open </a> and call <a href="#getTime"> getTime </a>
- * to retrieve the time. Then call <a href="org.apache.commons.net.DatagramSocketClient.html#close"> close </a> to close the connection properly. Successive
- * calls to <a href="#getTime"> getTime </a> are permitted without re-establishing a connection. That is because UDP is a connectionless protocol and the
- * Network Time Protocol is stateless.
+ * The NTPUDPClient class is a UDP implementation of a client for the
+ * Network Time Protocol (NTP) described in RFC 1305 as well as the
+ * Simple Network Time Protocol (SNTP) in RFC-2030. To use the class,
+ * merely open a local datagram socket with <a href="#open"> open </a>
+ * and call <a href="#getTime"> getTime </a> to retrieve the time. Then call
+ * <a href="org.apache.commons.net.DatagramSocketClient.html#close"> close </a>
+ * to close the connection properly.
+ * Successive calls to <a href="#getTime"> getTime </a> are permitted
+ * without re-establishing a connection.  That is because UDP is a
+ * connectionless protocol and the Network Time Protocol is stateless.
@@ -35,2 +40,3 @@ import org.apache.commons.net.DatagramSocketClient;
-public final class NTPUDPClient extends DatagramSocketClient {
-    /** The default NTP port. It is set to 123 according to RFC 1305. */
+public final class NTPUDPClient extends DatagramSocketClient
+{
+    /** The default NTP port.  It is set to 123 according to RFC 1305. */
@@ -42,3 +48,5 @@ public final class NTPUDPClient extends DatagramSocketClient {
-     * Retrieves the time information from the specified server on the default NTP port and returns it. The time is the number of miliiseconds since 00:00
-     * (midnight) 1 January 1900 UTC, as specified by RFC 1305. This method reads the raw NTP packet and constructs a <i>TimeInfo</i> object that allows access
-     * to all the fields of the NTP message header.
+     * Retrieves the time information from the specified server on the
+     * default NTP port and returns it. The time is the number of miliiseconds
+     * since 00:00 (midnight) 1 January 1900 UTC, as specified by RFC 1305.
+     * This method reads the raw NTP packet and constructs a <i>TimeInfo</i>
+     * object that allows access to all the fields of the NTP message header.
@@ -46 +53,0 @@ public final class NTPUDPClient extends DatagramSocketClient {
-     *
@@ -51 +58,2 @@ public final class NTPUDPClient extends DatagramSocketClient {
-    public TimeInfo getTime(final InetAddress host) throws IOException {
+    public TimeInfo getTime(final InetAddress host) throws IOException
+    {
@@ -56,3 +64,5 @@ public final class NTPUDPClient extends DatagramSocketClient {
-     * Retrieves the time information from the specified server and port and returns it. The time is the number of miliiseconds since 00:00 (midnight) 1 January
-     * 1900 UTC, as specified by RFC 1305. This method reads the raw NTP packet and constructs a <i>TimeInfo</i> object that allows access to all the fields of
-     * the NTP message header.
+     * Retrieves the time information from the specified server and port and
+     * returns it. The time is the number of miliiseconds since
+     * 00:00 (midnight) 1 January 1900 UTC, as specified by RFC 1305.
+     * This method reads the raw NTP packet and constructs a <i>TimeInfo</i>
+     * object that allows access to all the fields of the NTP message header.
@@ -60 +69,0 @@ public final class NTPUDPClient extends DatagramSocketClient {
-     *
@@ -64 +73,2 @@ public final class NTPUDPClient extends DatagramSocketClient {
-     * @throws IOException If an error occurs while retrieving the time or if received packet does not match the request.
+     * @throws IOException If an error occurs while retrieving the time or if
+     *                     received packet does not match the request.
@@ -66 +76,2 @@ public final class NTPUDPClient extends DatagramSocketClient {
-    public TimeInfo getTime(final InetAddress host, final int port) throws IOException {
+    public TimeInfo getTime(final InetAddress host, final int port) throws IOException
+    {
@@ -68 +79,2 @@ public final class NTPUDPClient extends DatagramSocketClient {
-        if (!isOpen()) {
+        if (!isOpen())
+        {
@@ -83,2 +95,4 @@ public final class NTPUDPClient extends DatagramSocketClient {
-         * Must minimize the time between getting the current time, timestamping the packet, and sending it out which introduces an error in the delay time. No
-         * extraneous logging and initializations here !!!
+         * Must minimize the time between getting the current time,
+         * timestamping the packet, and sending it out which
+         * introduces an error in the delay time.
+         * No extraneous logging and initializations here !!!
@@ -98 +112,2 @@ public final class NTPUDPClient extends DatagramSocketClient {
-        if (!now.equals(recMessage.getOriginateTimeStamp())) {
+        if (!now.equals(recMessage.getOriginateTimeStamp()))
+        {
@@ -107 +122,2 @@ public final class NTPUDPClient extends DatagramSocketClient {
-     * Returns the NTP protocol version number that client sets on request packet that is sent to remote host (e.g. 3=NTP v3, 4=NTP v4, etc.)
+     * Returns the NTP protocol version number that client sets on request packet
+     * that is sent to remote host (e.g. 3=NTP v3, 4=NTP v4, etc.)
@@ -109 +125 @@ public final class NTPUDPClient extends DatagramSocketClient {
-     * @return the NTP protocol version number that client sets on request packet.
+     * @return  the NTP protocol version number that client sets on request packet.
@@ -112 +128,2 @@ public final class NTPUDPClient extends DatagramSocketClient {
-    public int getVersion() {
+    public int getVersion()
+    {
@@ -117 +134,2 @@ public final class NTPUDPClient extends DatagramSocketClient {
-     * Sets the NTP protocol version number that client sets on request packet communicate with remote host.
+     * Sets the NTP protocol version number that client sets on request packet
+     * communicate with remote host.
@@ -121 +139,2 @@ public final class NTPUDPClient extends DatagramSocketClient {
-    public void setVersion(final int version) {
+    public void setVersion(final int version)
+    {
diff --git a/src/main/java/org/apache/commons/net/ntp/NtpUtils.java b/src/main/java/org/apache/commons/net/ntp/NtpUtils.java
index 6c5ad4775..2e406c662 100644
--- a/src/main/java/org/apache/commons/net/ntp/NtpUtils.java
+++ b/src/main/java/org/apache/commons/net/ntp/NtpUtils.java
@@ -27,8 +27,12 @@ public final class NtpUtils {
-     * Returns 32-bit integer address to IPv4 address string "%d.%d.%d.%d" format.
-     *
-     * @param address the 32-bit address
-     * @return the raw IP address in a string format.
-     */
-    public static String getHostAddress(final int address) {
-        return ((address >>> 24) & 0xFF) + "." + ((address >>> 16) & 0xFF) + "." + ((address >>> 8) & 0xFF) + "." + ((address >>> 0) & 0xFF);
-    }
+      * Returns 32-bit integer address to IPv4 address string "%d.%d.%d.%d" format.
+      *
+      * @param address  the 32-bit address
+      * @return  the raw IP address in a string format.
+      */
+     public static String getHostAddress(final int address)
+     {
+          return ((address >>> 24) & 0xFF) + "." +
+                 ((address >>> 16) & 0xFF) + "." +
+                 ((address >>>  8) & 0xFF) + "." +
+                 ((address >>>  0) & 0xFF);
+     }
@@ -42 +46,2 @@ public final class NtpUtils {
-    public static String getModeName(final int mode) {
+    public static String getModeName(final int mode)
+    {
@@ -44,18 +49,18 @@ public final class NtpUtils {
-        case NtpV3Packet.MODE_RESERVED:
-            return "Reserved";
-        case NtpV3Packet.MODE_SYMMETRIC_ACTIVE:
-            return "Symmetric Active";
-        case NtpV3Packet.MODE_SYMMETRIC_PASSIVE:
-            return "Symmetric Passive";
-        case NtpV3Packet.MODE_CLIENT:
-            return "Client";
-        case NtpV3Packet.MODE_SERVER:
-            return "Server";
-        case NtpV3Packet.MODE_BROADCAST:
-            return "Broadcast";
-        case NtpV3Packet.MODE_CONTROL_MESSAGE:
-            return "Control";
-        case NtpV3Packet.MODE_PRIVATE:
-            return "Private";
-        default:
-            return "Unknown";
+            case NtpV3Packet.MODE_RESERVED:
+                return "Reserved";
+            case NtpV3Packet.MODE_SYMMETRIC_ACTIVE:
+                return "Symmetric Active";
+            case NtpV3Packet.MODE_SYMMETRIC_PASSIVE:
+                return "Symmetric Passive";
+            case NtpV3Packet.MODE_CLIENT:
+                return "Client";
+            case NtpV3Packet.MODE_SERVER:
+                return "Server";
+            case NtpV3Packet.MODE_BROADCAST:
+                return "Broadcast";
+            case NtpV3Packet.MODE_CONTROL_MESSAGE:
+                return "Control";
+            case NtpV3Packet.MODE_PRIVATE:
+                return "Private";
+            default:
+                return "Unknown";
@@ -68,2 +73,2 @@ public final class NtpUtils {
-     * @param packet NTP packet
-     * @return the packet reference id (as IP address) in "%d.%d.%d.%d" format.
+     * @param packet  NTP packet
+     * @return  the packet reference id (as IP address) in "%d.%d.%d.%d" format.
@@ -71,4 +76,5 @@ public final class NtpUtils {
-    public static String getRefAddress(final NtpV3Packet packet) {
-        final int address = (packet == null) ? 0 : packet.getReferenceId();
-        return getHostAddress(address);
-    }
+     public static String getRefAddress(final NtpV3Packet packet)
+     {
+         final int address = (packet == null) ? 0 : packet.getReferenceId();
+         return getHostAddress(address);
+     }
@@ -77,2 +83,4 @@ public final class NtpUtils {
-     * Get refId as reference clock string (e.g. GPS, WWV, LCL). If string is invalid (non-ASCII character) then returns empty string "". For details refer to
-     * the <A HREF="http://www.eecis.udel.edu/~mills/ntp/html/refclock.html#list">Comprehensive List of Clock Drivers</A>.
+     * Get refId as reference clock string (e.g. GPS, WWV, LCL). If string is
+     * invalid (non-ASCII character) then returns empty string "".
+     * For details refer to the <A HREF="http://www.eecis.udel.edu/~mills/ntp/html/refclock.html#list">Comprehensive
+     * List of Clock Drivers</A>.
@@ -93 +101,2 @@ public final class NtpUtils {
-        for (int shiftBits = 24; shiftBits >= 0; shiftBits -= 8) {
+        for (int shiftBits = 24; shiftBits >= 0; shiftBits -= 8)
+        {
diff --git a/src/main/java/org/apache/commons/net/ntp/NtpV3Impl.java b/src/main/java/org/apache/commons/net/ntp/NtpV3Impl.java
index 04f6e2028..02fb0031a 100644
--- a/src/main/java/org/apache/commons/net/ntp/NtpV3Impl.java
+++ b/src/main/java/org/apache/commons/net/ntp/NtpV3Impl.java
@@ -23 +23,2 @@ import java.net.DatagramPacket;
- * Implementation of NtpV3Packet with methods converting Java objects to/from the Network Time Protocol (NTP) data message header format described in RFC-1305.
+ * Implementation of NtpV3Packet with methods converting Java objects to/from
+ * the Network Time Protocol (NTP) data message header format described in RFC-1305.
@@ -26 +27,2 @@ import java.net.DatagramPacket;
-public class NtpV3Impl implements NtpV3Packet {
+public class NtpV3Impl implements NtpV3Packet
+{
@@ -54 +56,3 @@ public class NtpV3Impl implements NtpV3Packet {
-     * Convert byte to unsigned integer. Java only has signed types so we have to do more work to get unsigned ops.
+     * Convert byte to unsigned integer.
+     * Java only has signed types so we have to do
+     * more work to get unsigned ops.
@@ -59 +63,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    protected static final int ui(final byte b) {
+    protected static final int ui(final byte b)
+    {
@@ -65 +70,3 @@ public class NtpV3Impl implements NtpV3Packet {
-     * Convert byte to unsigned long. Java only has signed types so we have to do more work to get unsigned ops
+     * Convert byte to unsigned long.
+     * Java only has signed types so we have to do
+     * more work to get unsigned ops
@@ -70 +77,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    protected static final long ul(final byte b) {
+    protected static final long ul(final byte b)
+    {
@@ -80 +88,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public NtpV3Impl() {
+    public NtpV3Impl()
+    {
@@ -84,2 +93,4 @@ public class NtpV3Impl implements NtpV3Packet {
-     * Compares this object against the specified object. The result is <code>true</code> if and only if the argument is not <code>null</code> and is a
-     * <code>NtpV3Impl</code> object that contains the same values as this object.
+     * Compares this object against the specified object.
+     * The result is <code>true</code> if and only if the argument is
+     * not <code>null</code> and is a <code>NtpV3Impl</code> object that
+     * contains the same values as this object.
@@ -87,2 +98,3 @@ public class NtpV3Impl implements NtpV3Packet {
-     * @param obj the object to compare with.
-     * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.
+     * @param   obj   the object to compare with.
+     * @return  <code>true</code> if the objects are the same;
+     *          <code>false</code> otherwise.
@@ -92 +104,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public boolean equals(final Object obj) {
+    public boolean equals(final Object obj)
+    {
@@ -109 +122,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public synchronized DatagramPacket getDatagramPacket() {
+    public synchronized DatagramPacket getDatagramPacket()
+    {
@@ -120,2 +134,6 @@ public class NtpV3Impl implements NtpV3Packet {
-    private int getInt(final int index) {
-        final int i = ui(buf[index]) << 24 | ui(buf[index + 1]) << 16 | ui(buf[index + 2]) << 8 | ui(buf[index + 3]);
+    private int getInt(final int index)
+    {
+        final int i = ui(buf[index]) << 24 |
+                ui(buf[index + 1]) << 16 |
+                ui(buf[index + 2]) << 8 |
+                ui(buf[index + 3]);
@@ -127,2 +145,5 @@ public class NtpV3Impl implements NtpV3Packet {
-     * Returns leap indicator as defined in RFC-1305 which is a two-bit code: 0=no warning 1=last minute has 61 seconds 2=last minute has 59 seconds 3=alarm
-     * condition (clock not synchronized)
+     * Returns leap indicator as defined in RFC-1305 which is a two-bit code:
+     *  0=no warning
+     *  1=last minute has 61 seconds
+     *  2=last minute has 59 seconds
+     *  3=alarm condition (clock not synchronized)
@@ -133 +154,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public int getLeapIndicator() {
+    public int getLeapIndicator()
+    {
@@ -142,3 +164,10 @@ public class NtpV3Impl implements NtpV3Packet {
-    private long getLong(final int index) {
-        final long i = ul(buf[index]) << 56 | ul(buf[index + 1]) << 48 | ul(buf[index + 2]) << 40 | ul(buf[index + 3]) << 32 | ul(buf[index + 4]) << 24
-                | ul(buf[index + 5]) << 16 | ul(buf[index + 6]) << 8 | ul(buf[index + 7]);
+    private long getLong(final int index)
+    {
+        final long i = ul(buf[index]) << 56 |
+                ul(buf[index + 1]) << 48 |
+                ul(buf[index + 2]) << 40 |
+                ul(buf[index + 3]) << 32 |
+                ul(buf[index + 4]) << 24 |
+                ul(buf[index + 5]) << 16 |
+                ul(buf[index + 6]) << 8 |
+                ul(buf[index + 7]);
@@ -149 +178,2 @@ public class NtpV3Impl implements NtpV3Packet {
-     * Returns mode as defined in RFC-1305 which is a 3-bit integer whose value is indicated by the MODE_xxx parameters.
+     * Returns mode as defined in RFC-1305 which is a 3-bit integer
+     * whose value is indicated by the MODE_xxx parameters.
@@ -154 +184,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public int getMode() {
+    public int getMode()
+    {
@@ -159,2 +190,2 @@ public class NtpV3Impl implements NtpV3Packet {
-     * Return human-readable name of message mode type as described in RFC 1305.
-     *
+     * Return human-readable name of message mode type as described in
+     * RFC 1305.
@@ -164 +195,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public String getModeName() {
+    public String getModeName()
+    {
@@ -171 +203,2 @@ public class NtpV3Impl implements NtpV3Packet {
-     * @return the originate time. Never returns null.
+     * @return the originate time.
+     * Never returns null.
@@ -174 +207,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public TimeStamp getOriginateTimeStamp() {
+    public TimeStamp getOriginateTimeStamp()
+    {
@@ -179,3 +213,5 @@ public class NtpV3Impl implements NtpV3Packet {
-     * Returns poll interval as defined in RFC-1305, which is an eight-bit signed integer indicating the maximum interval between successive messages, in
-     * seconds to the nearest power of two (e.g. value of six indicates an interval of 64 seconds. The values that can appear in this field range from
-     * NTP_MINPOLL to NTP_MAXPOLL inclusive.
+     * Returns poll interval as defined in RFC-1305, which is an eight-bit
+     * signed integer indicating the maximum interval between successive
+     * messages, in seconds to the nearest power of two (e.g. value of six
+     * indicates an interval of 64 seconds. The values that can appear in
+     * this field range from NTP_MINPOLL to NTP_MAXPOLL inclusive.
@@ -186 +222,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public int getPoll() {
+    public int getPoll()
+    {
@@ -191 +228,3 @@ public class NtpV3Impl implements NtpV3Packet {
-     * Returns precision as defined in RFC-1305 encoded as an 8-bit signed integer (seconds to nearest power of two). Values normally range from -6 to -20.
+     * Returns precision as defined in RFC-1305 encoded as an 8-bit signed
+     * integer (seconds to nearest power of two).
+     * Values normally range from -6 to -20.
@@ -196 +235,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public int getPrecision() {
+    public int getPrecision()
+    {
@@ -203 +243,2 @@ public class NtpV3Impl implements NtpV3Packet {
-     * @return the receive time. Never returns null.
+     * @return the receive time.
+     * Never returns null.
@@ -206 +247,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public TimeStamp getReceiveTimeStamp() {
+    public TimeStamp getReceiveTimeStamp()
+    {
@@ -211 +253,2 @@ public class NtpV3Impl implements NtpV3Packet {
-     * Returns the reference id as defined in RFC-1305, which is a 32-bit integer whose value is dependent on several criteria.
+     * Returns the reference id as defined in RFC-1305, which is
+     * a 32-bit integer whose value is dependent on several criteria.
@@ -216 +259,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public int getReferenceId() {
+    public int getReferenceId()
+    {
@@ -221,2 +265,4 @@ public class NtpV3Impl implements NtpV3Packet {
-     * Returns the reference id string. String cannot be null but value is dependent on the version of the NTP spec supported and stratum level. Value can be an
-     * empty string, clock type string, IP address, or a hex string.
+     * Returns the reference id string. String cannot be null but
+     * value is dependent on the version of the NTP spec supported
+     * and stratum level. Value can be an empty string, clock type string,
+     * IP address, or a hex string.
@@ -227 +273,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public String getReferenceIdString() {
+    public String getReferenceIdString()
+    {
@@ -251 +298,2 @@ public class NtpV3Impl implements NtpV3Packet {
-     * @return the reference time as <code>TimeStamp</code> object. Never returns null.
+     * @return the reference time as <code>TimeStamp</code> object.
+     * Never returns null.
@@ -254 +302,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public TimeStamp getReferenceTimeStamp() {
+    public TimeStamp getReferenceTimeStamp()
+    {
@@ -259 +308,2 @@ public class NtpV3Impl implements NtpV3Packet {
-     * Return root delay as defined in RFC-1305, which is the total roundtrip delay to the primary reference source, in seconds. Values can take positive and
+     * Return root delay as defined in RFC-1305, which is the total roundtrip delay
+     * to the primary reference source, in seconds. Values can take positive and
@@ -265 +315,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public int getRootDelay() {
+    public int getRootDelay()
+    {
@@ -270,2 +321,4 @@ public class NtpV3Impl implements NtpV3Packet {
-     * Return root delay as defined in RFC-1305 in milliseconds, which is the total roundtrip delay to the primary reference source, in seconds. Values can take
-     * positive and negative values, depending on clock precision and skew.
+     * Return root delay as defined in RFC-1305 in milliseconds, which is
+     * the total roundtrip delay to the primary reference source, in
+     * seconds. Values can take positive and negative values, depending
+     * on clock precision and skew.
@@ -276 +329,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public double getRootDelayInMillisDouble() {
+    public double getRootDelayInMillisDouble()
+    {
@@ -283 +336,0 @@ public class NtpV3Impl implements NtpV3Packet {
-     *
@@ -287 +340,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public int getRootDispersion() {
+    public int getRootDispersion()
+    {
@@ -297 +351,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public long getRootDispersionInMillis() {
+    public long getRootDispersionInMillis()
+    {
@@ -303 +358,2 @@ public class NtpV3Impl implements NtpV3Packet {
-     * Returns root dispersion (as defined in RFC-1305) in milliseconds as double precision value.
+     * Returns root dispersion (as defined in RFC-1305) in milliseconds
+     * as double precision value.
@@ -308 +364,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public double getRootDispersionInMillisDouble() {
+    public double getRootDispersionInMillisDouble()
+    {
@@ -314,2 +371,3 @@ public class NtpV3Impl implements NtpV3Packet {
-     * Returns Stratum as defined in RFC-1305, which indicates the stratum level of the local clock, with values defined as follows: 0=unspecified, 1=primary
-     * ref clock, and all others a secondary reference (via NTP).
+     * Returns Stratum as defined in RFC-1305, which indicates the stratum level
+     * of the local clock, with values defined as follows: 0=unspecified,
+     * 1=primary ref clock, and all others a secondary reference (via NTP).
@@ -320 +378,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public int getStratum() {
+    public int getStratum()
+    {
@@ -330 +389,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    private TimeStamp getTimestamp(final int index) {
+    private TimeStamp getTimestamp(final int index)
+    {
@@ -337 +397,2 @@ public class NtpV3Impl implements NtpV3Packet {
-     * @return the transmit timestamp as defined in RFC-1305. Never returns a null object.
+     * @return the transmit timestamp as defined in RFC-1305.
+     * Never returns a null object.
@@ -340 +401,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public TimeStamp getTransmitTimeStamp() {
+    public TimeStamp getTransmitTimeStamp()
+    {
@@ -345 +407,2 @@ public class NtpV3Impl implements NtpV3Packet {
-     * Return type of time packet. The values (e.g. NTP, TIME, ICMP, ...) correspond to the protocol used to obtain the timing information.
+     * Return type of time packet. The values (e.g. NTP, TIME, ICMP, ...)
+     * correspond to the protocol used to obtain the timing information.
@@ -350 +413,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public String getType() {
+    public String getType()
+    {
@@ -360 +424,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public int getVersion() {
+    public int getVersion()
+    {
@@ -365 +430,2 @@ public class NtpV3Impl implements NtpV3Packet {
-     * Computes a hashcode for this object. The result is the exclusive OR of the values of this object stored as a byte array.
+     * Computes a hashcode for this object. The result is the exclusive
+     * OR of the values of this object stored as a byte array.
@@ -367 +433 @@ public class NtpV3Impl implements NtpV3Packet {
-     * @return a hash code value for this object.
+     * @return  a hash code value for this object.
@@ -371 +437,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public int hashCode() {
+    public int hashCode()
+    {
@@ -375 +442,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    private String idAsHex() {
+    private String idAsHex()
+    {
@@ -381 +448,0 @@ public class NtpV3Impl implements NtpV3Packet {
-     *
@@ -384,3 +451,6 @@ public class NtpV3Impl implements NtpV3Packet {
-    private String idAsIPAddress() {
-        return ui(buf[REFERENCE_ID_INDEX]) + "." + ui(buf[REFERENCE_ID_INDEX + 1]) + "." + ui(buf[REFERENCE_ID_INDEX + 2]) + "."
-                + ui(buf[REFERENCE_ID_INDEX + 3]);
+    private String idAsIPAddress()
+    {
+        return ui(buf[REFERENCE_ID_INDEX]) + "." +
+                ui(buf[REFERENCE_ID_INDEX + 1]) + "." +
+                ui(buf[REFERENCE_ID_INDEX + 2]) + "." +
+                ui(buf[REFERENCE_ID_INDEX + 3]);
@@ -389 +459,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    private String idAsString() {
+    private String idAsString()
+    {
@@ -393 +464 @@ public class NtpV3Impl implements NtpV3Packet {
-            if (c == 0) { // 0-terminated string
+            if (c == 0) {  // 0-terminated string
@@ -408 +479,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public void setDatagramPacket(final DatagramPacket srcDp) {
+    public void setDatagramPacket(final DatagramPacket srcDp)
+    {
@@ -428 +500 @@ public class NtpV3Impl implements NtpV3Packet {
-     * @param idx   index position
+     * @param idx index position
@@ -431,2 +503,3 @@ public class NtpV3Impl implements NtpV3Packet {
-    private void setInt(final int idx, int value) {
-        for (int i = 3; i >= 0; i--) {
+    private void setInt(final int idx, int value)
+    {
+        for (int i=3; i >= 0; i--) {
@@ -444 +517,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public void setLeapIndicator(final int li) {
+    public void setLeapIndicator(final int li)
+    {
@@ -454 +528,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public void setMode(final int mode) {
+    public void setMode(final int mode)
+    {
@@ -459 +534,2 @@ public class NtpV3Impl implements NtpV3Packet {
-     * Set originate timestamp given NTP TimeStamp object. If <code>ts</code> is null then zero time is used.
+     * Set originate timestamp given NTP TimeStamp object.
+     * If <code>ts</code> is null then zero time is used.
@@ -464 +540,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public void setOriginateTimeStamp(final TimeStamp ts) {
+    public void setOriginateTimeStamp(final TimeStamp ts)
+    {
@@ -474 +551,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public void setPoll(final int poll) {
+    public void setPoll(final int poll)
+    {
@@ -480 +557,0 @@ public class NtpV3Impl implements NtpV3Packet {
-     *
@@ -485 +562,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public void setPrecision(final int precision) {
+    public void setPrecision(final int precision)
+    {
@@ -490 +568,2 @@ public class NtpV3Impl implements NtpV3Packet {
-     * Set receive timestamp given NTP TimeStamp object. If <code>ts</code> is null then zero time is used.
+     * Set receive timestamp given NTP TimeStamp object.
+     * If <code>ts</code> is null then zero time is used.
@@ -495 +574,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public void setReceiveTimeStamp(final TimeStamp ts) {
+    public void setReceiveTimeStamp(final TimeStamp ts)
+    {
@@ -500 +580,2 @@ public class NtpV3Impl implements NtpV3Packet {
-     * Set reference clock identifier field with 32-bit unsigned integer value. See RFC-1305 for description.
+     * Set reference clock identifier field with 32-bit unsigned integer value.
+     * See RFC-1305 for description.
@@ -505 +586,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public void setReferenceId(final int refId) {
+    public void setReferenceId(final int refId)
+    {
@@ -510 +592,2 @@ public class NtpV3Impl implements NtpV3Packet {
-     * Set Reference time with NTP timestamp. If <code>ts</code> is null then zero time is used.
+     * Set Reference time with NTP timestamp. If <code>ts</code> is null
+     * then zero time is used.
@@ -515 +598,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public void setReferenceTime(final TimeStamp ts) {
+    public void setReferenceTime(final TimeStamp ts)
+    {
@@ -526 +610,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public void setRootDelay(final int delay) {
+    public void setRootDelay(final int delay)
+    {
@@ -537 +622,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public void setRootDispersion(final int dispersion) {
+    public void setRootDispersion(final int dispersion)
+    {
@@ -547 +633,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public void setStratum(final int stratum) {
+    public void setStratum(final int stratum)
+    {
@@ -555 +642 @@ public class NtpV3Impl implements NtpV3Packet {
-     * @param t     TimeStamp.
+     * @param t TimeStamp.
@@ -557 +644,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    private void setTimestamp(final int index, final TimeStamp t) {
+    private void setTimestamp(final int index, final TimeStamp t)
+    {
@@ -565 +653 @@ public class NtpV3Impl implements NtpV3Packet {
-        // buf[index] |= 0x80; // only set if 1900 baseline....
+        // buf[index] |= 0x80;  // only set if 1900 baseline....
@@ -569 +657,2 @@ public class NtpV3Impl implements NtpV3Packet {
-     * Set transmit time with NTP timestamp. If <code>ts</code> is null then zero time is used.
+     * Set transmit time with NTP timestamp.
+     * If <code>ts</code> is null then zero time is used.
@@ -574 +663,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public void setTransmitTime(final TimeStamp ts) {
+    public void setTransmitTime(final TimeStamp ts)
+    {
@@ -584 +674,2 @@ public class NtpV3Impl implements NtpV3Packet {
-    public void setVersion(final int version) {
+    public void setVersion(final int version)
+    {
@@ -594,4 +685,12 @@ public class NtpV3Impl implements NtpV3Packet {
-    public String toString() {
-        return "[" + "version:" + getVersion() + ", mode:" + getMode() + ", poll:" + getPoll() + ", precision:" + getPrecision() + ", delay:" + getRootDelay()
-                + ", dispersion(ms):" + getRootDispersionInMillisDouble() + ", id:" + getReferenceIdString() + ", xmitTime:"
-                + getTransmitTimeStamp().toDateString() + " ]";
+    public String toString()
+    {
+        return "[" +
+                "version:" + getVersion() +
+                ", mode:" + getMode() +
+                ", poll:" + getPoll() +
+                ", precision:" + getPrecision() +
+                ", delay:" + getRootDelay() +
+                ", dispersion(ms):" + getRootDispersionInMillisDouble() +
+                ", id:" + getReferenceIdString() +
+                ", xmitTime:" + getTransmitTimeStamp().toDateString() +
+                " ]";
diff --git a/src/main/java/org/apache/commons/net/ntp/NtpV3Packet.java b/src/main/java/org/apache/commons/net/ntp/NtpV3Packet.java
index 71f785aa7..a1446ed15 100644
--- a/src/main/java/org/apache/commons/net/ntp/NtpV3Packet.java
+++ b/src/main/java/org/apache/commons/net/ntp/NtpV3Packet.java
@@ -23 +23,2 @@ import java.net.DatagramPacket;
- * Interface for a NtpV3Packet with get/set methods corresponding to the fields in the NTP Data Message Header described in RFC 1305.
+ * Interface for a NtpV3Packet with get/set methods corresponding to the fields
+ * in the NTP Data Message Header described in RFC 1305.
@@ -26 +27,2 @@ import java.net.DatagramPacket;
-public interface NtpV3Packet {
+public interface NtpV3Packet
+{
@@ -48 +50 @@ public interface NtpV3Packet {
-    int NTP_MINPOLL = 4; // 16 seconds
+    int NTP_MINPOLL = 4;  // 16 seconds
@@ -57,2 +59,2 @@ public interface NtpV3Packet {
-    /*
-     * possible getType values such that other time-related protocols can have its information represented as NTP packets
+    /* possible getType values such that other time-related protocols can
+     * have its information represented as NTP packets
@@ -60,3 +62,3 @@ public interface NtpV3Packet {
-    String TYPE_NTP = "NTP"; // RFC-1305/2030
-    String TYPE_ICMP = "ICMP"; // RFC-792
-    String TYPE_TIME = "TIME"; // RFC-868
+    String TYPE_NTP = "NTP";         // RFC-1305/2030
+    String TYPE_ICMP = "ICMP";       // RFC-792
+    String TYPE_TIME = "TIME";       // RFC-868
@@ -91 +93,2 @@ public interface NtpV3Packet {
-     * @return poll interval as defined in RFC-1305. Field range between NTP_MINPOLL and NTP_MAXPOLL.
+     * @return poll interval as defined in RFC-1305.
+     * Field range between NTP_MINPOLL and NTP_MAXPOLL.
@@ -156 +159,2 @@ public interface NtpV3Packet {
-     * Return type of time packet. The values (e.g. NTP, TIME, ICMP, ...) correspond to the protocol used to obtain the timing information.
+     * Return type of time packet. The values (e.g. NTP, TIME, ICMP, ...)
+     * correspond to the protocol used to obtain the timing information.
@@ -169 +172,0 @@ public interface NtpV3Packet {
-     *
@@ -176 +178,0 @@ public interface NtpV3Packet {
-     *
@@ -183 +184,0 @@ public interface NtpV3Packet {
-     *
@@ -190 +190,0 @@ public interface NtpV3Packet {
-     *
@@ -196,2 +196,2 @@ public interface NtpV3Packet {
-     * Set poll interval as defined in RFC-1305. Field range between NTP_MINPOLL and NTP_MAXPOLL.
-     *
+     * Set poll interval as defined in RFC-1305.
+     * Field range between NTP_MINPOLL and NTP_MAXPOLL.
@@ -204 +203,0 @@ public interface NtpV3Packet {
-     *
@@ -212 +210,0 @@ public interface NtpV3Packet {
-     *
@@ -219 +216,0 @@ public interface NtpV3Packet {
-     *
@@ -226 +222,0 @@ public interface NtpV3Packet {
-     *
@@ -233 +228,0 @@ public interface NtpV3Packet {
-     *
@@ -236 +231 @@ public interface NtpV3Packet {
-     */
+    */
@@ -248 +242,0 @@ public interface NtpV3Packet {
-     *
@@ -255 +248,0 @@ public interface NtpV3Packet {
-     *
@@ -262 +254,0 @@ public interface NtpV3Packet {
-     *
diff --git a/src/main/java/org/apache/commons/net/ntp/TimeInfo.java b/src/main/java/org/apache/commons/net/ntp/TimeInfo.java
index 57bfdef77..e0a1d42f1 100644
--- a/src/main/java/org/apache/commons/net/ntp/TimeInfo.java
+++ b/src/main/java/org/apache/commons/net/ntp/TimeInfo.java
@@ -26 +26,2 @@ import java.util.List;
- * Wrapper class to network time packet messages (NTP, etc) that computes related timing info and stats.
+ * Wrapper class to network time packet messages (NTP, etc) that computes
+ * related timing info and stats.
@@ -48,2 +49,2 @@ public class TimeInfo {
-     * @param message          NTP message packet
-     * @param returnTimeMillis destination receive time
+     * @param message NTP message packet
+     * @param returnTimeMillis  destination receive time
@@ -57,2 +58,4 @@ public class TimeInfo {
-     * Create TimeInfo object with raw packet message and destination time received. Auto-computes details if computeDetails flag set otherwise this is delayed
-     * until computeDetails() is called. Delayed computation is for fast intialization when sub-millisecond timing is needed.
+     * Create TimeInfo object with raw packet message and destination time received.
+     * Auto-computes details if computeDetails flag set otherwise this is delayed
+     * until computeDetails() is called. Delayed computation is for fast
+     * intialization when sub-millisecond timing is needed.
@@ -60,3 +63,3 @@ public class TimeInfo {
-     * @param msgPacket        NTP message packet
-     * @param returnTimeMillis destination receive time
-     * @param doComputeDetails flag to pre-compute delay/offset values
+     * @param msgPacket NTP message packet
+     * @param returnTimeMillis  destination receive time
+     * @param doComputeDetails  flag to pre-compute delay/offset values
@@ -65,2 +68,3 @@ public class TimeInfo {
-    public TimeInfo(final NtpV3Packet msgPacket, final long returnTimeMillis, final boolean doComputeDetails) {
-        this(msgPacket, returnTimeMillis, null, doComputeDetails);
+    public TimeInfo(final NtpV3Packet msgPacket, final long returnTimeMillis, final boolean doComputeDetails)
+    {
+            this(msgPacket, returnTimeMillis, null, doComputeDetails);
@@ -72,3 +76,3 @@ public class TimeInfo {
-     * @param message          NTP message packet
-     * @param returnTimeMillis destination receive time
-     * @param comments         List of errors/warnings identified during processing
+     * @param message NTP message packet
+     * @param returnTimeMillis  destination receive time
+     * @param comments List of errors/warnings identified during processing
@@ -77,2 +81,3 @@ public class TimeInfo {
-    public TimeInfo(final NtpV3Packet message, final long returnTimeMillis, final List<String> comments) {
-        this(message, returnTimeMillis, comments, true);
+    public TimeInfo(final NtpV3Packet message, final long returnTimeMillis, final List<String> comments)
+    {
+            this(message, returnTimeMillis, comments, true);
@@ -82,2 +87,4 @@ public class TimeInfo {
-     * Create TimeInfo object with raw packet message and destination time received. Auto-computes details if computeDetails flag set otherwise this is delayed
-     * until computeDetails() is called. Delayed computation is for fast intialization when sub-millisecond timing is needed.
+     * Create TimeInfo object with raw packet message and destination time received.
+     * Auto-computes details if computeDetails flag set otherwise this is delayed
+     * until computeDetails() is called. Delayed computation is for fast
+     * intialization when sub-millisecond timing is needed.
@@ -85,4 +92,4 @@ public class TimeInfo {
-     * @param message          NTP message packet
-     * @param returnTimeMillis destination receive time
-     * @param comments         list of comments used to store errors/warnings with message
-     * @param doComputeDetails flag to pre-compute delay/offset values
+     * @param message NTP message packet
+     * @param returnTimeMillis  destination receive time
+     * @param comments  list of comments used to store errors/warnings with message
+     * @param doComputeDetails  flag to pre-compute delay/offset values
@@ -91 +98,3 @@ public class TimeInfo {
-    public TimeInfo(final NtpV3Packet message, final long returnTimeMillis, final List<String> comments, final boolean doComputeDetails) {
+    public TimeInfo(final NtpV3Packet message, final long returnTimeMillis, final List<String> comments,
+                   final boolean doComputeDetails)
+    {
@@ -104 +113,3 @@ public class TimeInfo {
-     * Add comment (error/warning) to list of comments associated with processing of NTP parameters. If comment list not create then one will be created.
+     * Add comment (error/warning) to list of comments associated
+     * with processing of NTP parameters. If comment list not create
+     * then one will be created.
@@ -108 +119,2 @@ public class TimeInfo {
-    public void addComment(final String comment) {
+    public void addComment(final String comment)
+    {
@@ -116 +128,2 @@ public class TimeInfo {
-     * Compute and validate details of the NTP message packet. Computed fields include the offset and delay.
+     * Compute and validate details of the NTP message packet. Computed
+     * fields include the offset and delay.
@@ -118 +131,2 @@ public class TimeInfo {
-    public void computeDetails() {
+    public void computeDetails()
+    {
@@ -139 +153,2 @@ public class TimeInfo {
-         * Round-trip network delay and local clock offset (or time drift) is calculated according to this standard NTP equation:
+         * Round-trip network delay and local clock offset (or time drift) is calculated
+         * according to this standard NTP equation:
@@ -141 +156,2 @@ public class TimeInfo {
-         * LocalClockOffset = ((ReceiveTimestamp - OriginateTimestamp) + (TransmitTimestamp - DestinationTimestamp)) / 2
+         * LocalClockOffset = ((ReceiveTimestamp - OriginateTimestamp) +
+         *                     (TransmitTimestamp - DestinationTimestamp)) / 2
@@ -143 +159,3 @@ public class TimeInfo {
-         * equations from RFC-1305 (NTPv3) roundtrip delay = (t4 - t1) - (t3 - t2) local clock offset = ((t2 - t1) + (t3 - t4)) / 2
+         * equations from RFC-1305 (NTPv3)
+         *      roundtrip delay = (t4 - t1) - (t3 - t2)
+         *      local clock offset = ((t2 - t1) + (t3 - t4)) / 2
@@ -147 +165,2 @@ public class TimeInfo {
-         * Note the typo in SNTP RFCs 1769/2030 which state that the delay is (T4 - T1) - (T2 - T3) with the "T2" and "T3" switched.
+         * Note the typo in SNTP RFCs 1769/2030 which state that the delay
+         * is (T4 - T1) - (T2 - T3) with the "T2" and "T3" switched.
@@ -149 +168,2 @@ public class TimeInfo {
-        if (origNtpTime.ntpValue() == 0) {
+        if (origNtpTime.ntpValue() == 0)
+        {
@@ -152 +172,2 @@ public class TimeInfo {
-            if (xmitNtpTime.ntpValue() != 0) {
+            if (xmitNtpTime.ntpValue() != 0)
+            {
@@ -172 +193,2 @@ public class TimeInfo {
-            if (rcvNtpTime.ntpValue() != 0) {
+            if (rcvNtpTime.ntpValue() != 0)
+            {
@@ -175 +197,2 @@ public class TimeInfo {
-            } else if (xmitNtpTime.ntpValue() != 0) {
+            } else if (xmitNtpTime.ntpValue() != 0)
+            {
@@ -179,22 +202,28 @@ public class TimeInfo {
-        } else {
-            long delayValueMillis = returnTimeMillis - origTimeMillis;
-            // assert xmitTime >= rcvTime: difference typically < 1ms
-            if (xmitTimeMillis < rcvTimeMillis) {
-                // server cannot send out a packet before receiving it...
-                comments.add("Error: xmitTime < rcvTime"); // time-travel not allowed
-            } else {
-                // subtract processing time from round-trip network delay
-                final long deltaMillis = xmitTimeMillis - rcvTimeMillis;
-                // in normal cases the processing delta is less than
-                // the total roundtrip network travel time.
-                if (deltaMillis <= delayValueMillis) {
-                    delayValueMillis -= deltaMillis; // delay = (t4 - t1) - (t3 - t2)
-                } else // if delta - delayValue == 1 ms then it's a round-off error
-                // e.g. delay=3ms, processing=4ms
-                if (deltaMillis - delayValueMillis == 1) {
-                    // delayValue == 0 -> local clock saw no tick change but destination clock did
-                    if (delayValueMillis != 0) {
-                        comments.add("Info: processing time > total network time by 1 ms -> assume zero delay");
-                        delayValueMillis = 0;
-                    }
-                } else {
+        } else
+        {
+             long delayValueMillis = returnTimeMillis - origTimeMillis;
+             // assert xmitTime >= rcvTime: difference typically < 1ms
+             if (xmitTimeMillis < rcvTimeMillis)
+             {
+                 // server cannot send out a packet before receiving it...
+                 comments.add("Error: xmitTime < rcvTime"); // time-travel not allowed
+             } else
+             {
+                 // subtract processing time from round-trip network delay
+                 final long deltaMillis = xmitTimeMillis - rcvTimeMillis;
+                 // in normal cases the processing delta is less than
+                 // the total roundtrip network travel time.
+                 if (deltaMillis <= delayValueMillis)
+                 {
+                     delayValueMillis -= deltaMillis; // delay = (t4 - t1) - (t3 - t2)
+                 } else // if delta - delayValue == 1 ms then it's a round-off error
+                 // e.g. delay=3ms, processing=4ms
+                 if (deltaMillis - delayValueMillis == 1)
+                 {
+                     // delayValue == 0 -> local clock saw no tick change but destination clock did
+                     if (delayValueMillis != 0)
+                     {
+                         comments.add("Info: processing time > total network time by 1 ms -> assume zero delay");
+                         delayValueMillis = 0;
+                     }
+                 } else {
@@ -203,2 +232,2 @@ public class TimeInfo {
-            }
-            delayMillis = Long.valueOf(delayValueMillis);
+             }
+             delayMillis = Long.valueOf(delayValueMillis);
@@ -214,2 +243,4 @@ public class TimeInfo {
-     * Compares this object against the specified object. The result is <code>true</code> if and only if the argument is not <code>null</code> and is a
-     * <code>TimeStamp</code> object that contains the same values as this object.
+     * Compares this object against the specified object.
+     * The result is <code>true</code> if and only if the argument is
+     * not <code>null</code> and is a <code>TimeStamp</code> object that
+     * contains the same values as this object.
@@ -217,2 +248,3 @@ public class TimeInfo {
-     * @param obj the object to compare with.
-     * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.
+     * @param   obj   the object to compare with.
+     * @return  <code>true</code> if the objects are the same;
+     *          <code>false</code> otherwise.
@@ -222 +254,2 @@ public class TimeInfo {
-    public boolean equals(final Object obj) {
+    public boolean equals(final Object obj)
+    {
@@ -235 +267,0 @@ public class TimeInfo {
-     *
@@ -249 +281,2 @@ public class TimeInfo {
-    public List<String> getComments() {
+    public List<String> getComments()
+    {
@@ -258 +291,2 @@ public class TimeInfo {
-    public Long getDelay() {
+    public Long getDelay()
+    {
@@ -267 +301,2 @@ public class TimeInfo {
-    public NtpV3Packet getMessage() {
+    public NtpV3Packet getMessage()
+    {
@@ -272 +307,2 @@ public class TimeInfo {
-     * Get clock offset needed to adjust local clock to match remote clock. If null then could not compute the offset.
+     * Get clock offset needed to adjust local clock to match remote clock. If null then could not
+     * compute the offset.
@@ -276 +312,2 @@ public class TimeInfo {
-    public Long getOffset() {
+    public Long getOffset()
+    {
@@ -285 +322,2 @@ public class TimeInfo {
-    public long getReturnTime() {
+    public long getReturnTime()
+    {
@@ -290 +328,2 @@ public class TimeInfo {
-     * Computes a hashcode for this object. The result is the exclusive OR of the return time and the message hash code.
+     * Computes a hashcode for this object. The result is the exclusive
+     * OR of the return time and the message hash code.
@@ -292 +331 @@ public class TimeInfo {
-     * @return a hash code value for this object.
+     * @return  a hash code value for this object.
@@ -296 +335,2 @@ public class TimeInfo {
-    public int hashCode() {
+    public int hashCode()
+    {
@@ -298 +338 @@ public class TimeInfo {
-        int result = (int) returnTimeMillis;
+        int result = (int)returnTimeMillis;
diff --git a/src/main/java/org/apache/commons/net/ntp/TimeStamp.java b/src/main/java/org/apache/commons/net/ntp/TimeStamp.java
index 506b1b440..9b888b762 100644
--- a/src/main/java/org/apache/commons/net/ntp/TimeStamp.java
+++ b/src/main/java/org/apache/commons/net/ntp/TimeStamp.java
@@ -29,4 +29,7 @@ import java.util.TimeZone;
- * TimeStamp class represents the Network Time Protocol (NTP) timestamp as defined in RFC-1305 and SNTP (RFC-2030). It is represented as a 64-bit unsigned
- * fixed-point number in seconds relative to 0-hour on 1-January-1900. The 32-bit low-order bits are the fractional seconds whose precision is about 200
- * picoseconds. Assumes overflow date when date passes MAX_LONG and reverts back to 0 is 2036 and not 1900. Test for most significant bit: if MSB=0 then 2036
- * basis is used otherwise 1900 if MSB=1.
+ * TimeStamp class represents the Network Time Protocol (NTP) timestamp
+ * as defined in RFC-1305 and SNTP (RFC-2030). It is represented as a
+ * 64-bit unsigned fixed-point number in seconds relative to 0-hour on 1-January-1900.
+ * The 32-bit low-order bits are the fractional seconds whose precision is
+ * about 200 picoseconds. Assumes overflow date when date passes MAX_LONG
+ * and reverts back to 0 is 2036 and not 1900. Test for most significant
+ * bit: if MSB=0 then 2036 basis is used otherwise 1900 if MSB=1.
@@ -34,2 +37,3 @@ import java.util.TimeZone;
- * Methods exist to convert NTP timestamps to and from the equivalent Java date representation, which is the number of milliseconds since the standard base time
- * known as "the epoch", namely January 1, 1970, 00:00:00 GMT.
+ * Methods exist to convert NTP timestamps to and from the equivalent Java date
+ * representation, which is the number of milliseconds since the standard base
+ * time known as "the epoch", namely January 1, 1970, 00:00:00 GMT.
@@ -40 +44,2 @@ import java.util.TimeZone;
-public class TimeStamp implements Serializable, Comparable<TimeStamp> {
+public class TimeStamp implements Serializable, Comparable<TimeStamp>
+{
@@ -54 +59,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * Default NTP date string format. E.g. Fri, Sep 12 2003 21:06:23.860. See <code>java.text.SimpleDateFormat</code> for code descriptions.
+     * Default NTP date string format. E.g. Fri, Sep 12 2003 21:06:23.860.
+     * See <code>java.text.SimpleDateFormat</code> for code descriptions.
@@ -62 +68 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * @param l   - a long.
+     * @param l - a long.
@@ -64 +70,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-    private static void appendHexString(final StringBuilder buf, final long l) {
+    private static void appendHexString(final StringBuilder buf, final long l)
+    {
@@ -73,2 +80,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * Convert NTP timestamp hexstring (e.g. "c1a089bd.fc904f6d") to the NTP 64-bit unsigned fixed-point number.
-     *
+     * Convert NTP timestamp hexstring (e.g. "c1a089bd.fc904f6d") to the NTP
+     * 64-bit unsigned fixed-point number.
@@ -80 +87,3 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-    protected static long decodeNtpHexString(final String hexString) throws NumberFormatException {
+    protected static long decodeNtpHexString(final String hexString)
+            throws NumberFormatException
+    {
@@ -92 +101,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-        return Long.parseLong(hexString.substring(0, ind), 16) << 32 | Long.parseLong(hexString.substring(ind + 1), 16);
+        return Long.parseLong(hexString.substring(0, ind), 16) << 32 |
+                Long.parseLong(hexString.substring(ind + 1), 16);
@@ -94 +103,0 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-
@@ -96,2 +105,3 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * Constructs a NTP timestamp object and initializes it so that it represents the time at which it was allocated, measured to the nearest millisecond.
-     *
+     * Constructs a NTP timestamp object and initializes it so that
+     * it represents the time at which it was allocated, measured to the
+     * nearest millisecond.
@@ -99 +109 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * @see System#currentTimeMillis()
+     * @see     System#currentTimeMillis()
@@ -101 +111,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-    public static TimeStamp getCurrentTime() {
+    public static TimeStamp getCurrentTime()
+    {
@@ -107,4 +118,11 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * static { TimeZone utcZone = TimeZone.getTimeZone("UTC"); Calendar calendar = Calendar.getInstance(utcZone); calendar.set(1900, Calendar.JANUARY, 1, 0, 0,
-     * 0); calendar.set(Calendar.MILLISECOND, 0); msb1baseTime = calendar.getTime().getTime(); calendar.set(2036, Calendar.FEBRUARY, 7, 6, 28, 16);
-     * calendar.set(Calendar.MILLISECOND, 0); msb0baseTime = calendar.getTime().getTime(); }
-     */
+    static {
+        TimeZone utcZone = TimeZone.getTimeZone("UTC");
+        Calendar calendar = Calendar.getInstance(utcZone);
+        calendar.set(1900, Calendar.JANUARY, 1, 0, 0, 0);
+        calendar.set(Calendar.MILLISECOND, 0);
+        msb1baseTime = calendar.getTime().getTime();
+        calendar.set(2036, Calendar.FEBRUARY, 7, 6, 28, 16);
+        calendar.set(Calendar.MILLISECOND, 0);
+        msb0baseTime = calendar.getTime().getTime();
+    }
+    */
@@ -113,5 +131,7 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * Helper method to convert Java time to NTP timestamp object. Note that Java time (milliseconds) by definition has less precision then NTP time
-     * (picoseconds) so converting Ntptime to Javatime and back to Ntptime loses precision. For example, Tue, Dec 17 2002 09:07:24.810 is represented by a
-     * single Java-based time value of f22cd1fc8a, but its NTP equivalent are all values from c1a9ae1c.cf5c28f5 to c1a9ae1c.cf9db22c.
-     *
-     * @param dateMillis the milliseconds since January 1, 1970, 00:00:00 GMT.
+     * Helper method to convert Java time to NTP timestamp object.
+     * Note that Java time (milliseconds) by definition has less precision
+     * then NTP time (picoseconds) so converting Ntptime to Javatime and back
+     * to Ntptime loses precision. For example, Tue, Dec 17 2002 09:07:24.810
+     * is represented by a single Java-based time value of f22cd1fc8a, but its
+     * NTP equivalent are all values from c1a9ae1c.cf5c28f5 to c1a9ae1c.cf9db22c.
+     * @param   dateMillis   the milliseconds since January 1, 1970, 00:00:00 GMT.
@@ -120 +140,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-    public static TimeStamp getNtpTime(final long dateMillis) {
+    public static TimeStamp getNtpTime(final long dateMillis)
+    {
@@ -127,3 +148,5 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * Note that java time (milliseconds) by definition has less precision then NTP time (picoseconds) so converting NTP timestamp to java time and back to NTP
-     * timestamp loses precision. For example, Tue, Dec 17 2002 09:07:24.810 EST is represented by a single Java-based time value of f22cd1fc8a, but its NTP
-     * equivalent are all values ranging from c1a9ae1c.cf5c28f5 to c1a9ae1c.cf9db22c.
+     * Note that java time (milliseconds) by definition has less precision
+     * then NTP time (picoseconds) so converting NTP timestamp to java time and back
+     * to NTP timestamp loses precision. For example, Tue, Dec 17 2002 09:07:24.810 EST
+     * is represented by a single Java-based time value of f22cd1fc8a, but its
+     * NTP equivalent are all values ranging from c1a9ae1c.cf5c28f5 to c1a9ae1c.cf9db22c.
@@ -132 +155,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * @return the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this NTP timestamp value.
+     * @return the number of milliseconds since January 1, 1970, 00:00:00 GMT
+     * represented by this NTP timestamp value.
@@ -134,3 +158,4 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-    public static long getTime(final long ntpTimeValue) {
-        final long seconds = (ntpTimeValue >>> 32) & 0xffffffffL; // high-order 32-bits
-        long fraction = ntpTimeValue & 0xffffffffL; // low-order 32-bits
+    public static long getTime(final long ntpTimeValue)
+    {
+        final long seconds = (ntpTimeValue >>> 32) & 0xffffffffL;     // high-order 32-bits
+        long fraction = ntpTimeValue & 0xffffffffL;             // low-order 32-bits
@@ -142 +167,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-         * If the most significant bit (MSB) on the seconds field is set we use a different time base. The following text is a quote from RFC-2030 (SNTP v4):
+         * If the most significant bit (MSB) on the seconds field is set we use
+         * a different time base. The following text is a quote from RFC-2030 (SNTP v4):
@@ -144,2 +170,4 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-         * If bit 0 is set, the UTC time is in the range 1968-2036 and UTC time is reckoned from 0h 0m 0s UTC on 1 January 1900. If bit 0 is not set, the time
-         * is in the range 2036-2104 and UTC time is reckoned from 6h 28m 16s UTC on 7 February 2036.
+         *  If bit 0 is set, the UTC time is in the range 1968-2036 and UTC time
+         *  is reckoned from 0h 0m 0s UTC on 1 January 1900. If bit 0 is not set,
+         *  the time is in the range 2036-2104 and UTC time is reckoned from
+         *  6h 28m 16s UTC on 7 February 2036.
@@ -157 +185,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * Parses the string argument as a NTP hexidecimal timestamp representation string (e.g. "c1a089bd.fc904f6d").
+     * Parses the string argument as a NTP hexidecimal timestamp representation string
+     * (e.g. "c1a089bd.fc904f6d").
@@ -163 +192,3 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-    public static TimeStamp parseNtpString(final String s) throws NumberFormatException {
+    public static TimeStamp parseNtpString(final String s)
+            throws NumberFormatException
+    {
@@ -173,2 +204,3 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-    protected static long toNtpTime(final long millis) {
-        final boolean useBase1 = millis < msb0baseTime; // time < Feb-2036
+    protected static long toNtpTime(final long millis)
+    {
+        final boolean useBase1 = millis < msb0baseTime;    // time < Feb-2036
@@ -194,3 +226,4 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * Converts 64-bit NTP timestamp value to a <code>String</code>. The NTP timestamp value is represented as hex string with seconds separated by fractional
-     * seconds by a decimal point; e.g. c1a089bd.fc904f6d == Tue, Dec 10 2002 10:41:49.986
-     *
+     * Converts 64-bit NTP timestamp value to a <code>String</code>.
+     * The NTP timestamp value is represented as hex string with
+     * seconds separated by fractional seconds by a decimal point;
+     * e.g. c1a089bd.fc904f6d == Tue, Dec 10 2002 10:41:49.986
@@ -199 +232,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * @return NTP timestamp 64-bit long value as hex string with seconds separated by fractional seconds.
+     * @return NTP timestamp 64-bit long value as hex string with seconds
+     * separated by fractional seconds.
@@ -201 +235,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-    public static String toString(final long ntpTime) {
+    public static String toString(final long ntpTime)
+    {
@@ -214 +249,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * NTP timestamp value: 64-bit unsigned fixed-point number as defined in RFC-1305 with high-order 32 bits the seconds field and the low-order 32-bits the
+     * NTP timestamp value: 64-bit unsigned fixed-point number as defined in RFC-1305
+     * with high-order 32 bits the seconds field and the low-order 32-bits the
@@ -224 +260,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * Constructs a newly allocated NTP timestamp object that represents the Java Date argument.
+     * Constructs a newly allocated NTP timestamp object
+     * that represents the Java Date argument.
@@ -228 +265,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-    public TimeStamp(final Date d) {
+    public TimeStamp(final Date d)
+    {
@@ -233,2 +271,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * Constructs a newly allocated NTP timestamp object that represents the native 64-bit long argument.
-     *
+     * Constructs a newly allocated NTP timestamp object
+     * that represents the native 64-bit long argument.
@@ -237 +275,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-    public TimeStamp(final long ntpTime) {
+    public TimeStamp(final long ntpTime)
+    {
@@ -242,2 +281,3 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * Constructs a newly allocated NTP timestamp object that represents the value represented by the string in hexdecimal form (e.g. "c1a089bd.fc904f6d").
-     *
+     * Constructs a newly allocated NTP timestamp object
+     * that represents the value represented by the string
+     * in hexdecimal form (e.g. "c1a089bd.fc904f6d").
@@ -248 +288,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-    public TimeStamp(final String hexStamp) throws NumberFormatException {
+    public TimeStamp(final String hexStamp) throws NumberFormatException
+    {
@@ -255,4 +296,7 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * @param anotherTimeStamp - the <code>TimeStamp</code> to be compared.
-     * @return the value <code>0</code> if the argument TimeStamp is equal to this TimeStamp; a value less than <code>0</code> if this TimeStamp is numerically
-     *         less than the TimeStamp argument; and a value greater than <code>0</code> if this TimeStamp is numerically greater than the TimeStamp argument
-     *         (signed comparison).
+     * @param   anotherTimeStamp - the <code>TimeStamp</code> to be compared.
+     * @return  the value <code>0</code> if the argument TimeStamp is equal to
+     *          this TimeStamp; a value less than <code>0</code> if this TimeStamp
+     *          is numerically less than the TimeStamp argument; and a
+     *          value greater than <code>0</code> if this TimeStamp is
+     *          numerically greater than the TimeStamp argument
+     *          (signed comparison).
@@ -261 +305,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-    public int compareTo(final TimeStamp anotherTimeStamp) {
+    public int compareTo(final TimeStamp anotherTimeStamp)
+    {
@@ -268,5 +313,8 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * Compares this object against the specified object. The result is <code>true</code> if and only if the argument is not <code>null</code> and is a
-     * <code>Long</code> object that contains the same <code>long</code> value as this object.
-     *
-     * @param obj the object to compare with.
-     * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.
+     * Compares this object against the specified object.
+     * The result is <code>true</code> if and only if the argument is
+     * not <code>null</code> and is a <code>Long</code> object that
+     * contains the same <code>long</code> value as this object.
+     *
+     * @param   obj   the object to compare with.
+     * @return  <code>true</code> if the objects are the same;
+     *          <code>false</code> otherwise.
@@ -275 +323,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-    public boolean equals(final Object obj) {
+    public boolean equals(final Object obj)
+    {
@@ -287 +336,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-    public Date getDate() {
+    public Date getDate()
+    {
@@ -296 +346,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-    public long getFraction() {
+    public long getFraction()
+    {
@@ -305 +356,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-    public long getSeconds() {
+    public long getSeconds()
+    {
@@ -312 +364,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * @return the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this NTP timestamp value.
+     * @return the number of milliseconds since January 1, 1970, 00:00:00 GMT
+     * represented by this NTP timestamp value.
@@ -314 +367,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-    public long getTime() {
+    public long getTime()
+    {
@@ -319,12 +373,9 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * Computes a hashcode for this Timestamp. The result is the exclusive OR of the two halves of the primitive <code>long</code> value represented by this
-     * <code>TimeStamp</code> object. That is, the hashcode is the value of the expression: <blockquote>
-     *
-     * <pre>
-     * {@code
-     * (int) (this.ntpValue() ^ (this.ntpValue() >>> 32))
-     * }
-     * </pre>
-     *
-     * </blockquote>
-     *
-     * @return a hash code value for this object.
+     * Computes a hashcode for this Timestamp. The result is the exclusive
+     * OR of the two halves of the primitive <code>long</code> value
+     * represented by this <code>TimeStamp</code> object. That is, the hashcode
+     * is the value of the expression:
+     * <blockquote><pre>
+     * {@code (int)(this.ntpValue()^(this.ntpValue() >>> 32))}
+     * </pre></blockquote>
+     *
+     * @return  a hash code value for this object.
@@ -333 +384,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-    public int hashCode() {
+    public int hashCode()
+    {
@@ -342 +394,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-    public long ntpValue() {
+    public long ntpValue()
+    {
@@ -347 +400,5 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * Converts this <code>TimeStamp</code> object to a <code>String</code> of the form: <blockquote>
+     * Converts this <code>TimeStamp</code> object to a <code>String</code>
+     * of the form:
+     * <blockquote><pre>
+     * EEE, MMM dd yyyy HH:mm:ss.SSS</pre></blockquote>
+     * See java.text.SimpleDataFormat for code descriptions.
@@ -349,7 +406 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * <pre>
-     * EEE, MMM dd yyyy HH:mm:ss.SSS
-     * </pre>
-     *
-     * </blockquote> See java.text.SimpleDataFormat for code descriptions.
-     *
-     * @return a string representation of this date.
+     * @return  a string representation of this date.
@@ -357 +408,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-    public String toDateString() {
+    public String toDateString()
+    {
@@ -367,2 +419,4 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * Converts this <code>TimeStamp</code> object to a <code>String</code>. The NTP timestamp 64-bit long value is represented as hex string with seconds
-     * separated by fractional seconds by a decimal point; e.g. c1a089bd.fc904f6d == Tue, Dec 10 2002 10:41:49.986
+     * Converts this <code>TimeStamp</code> object to a <code>String</code>.
+     * The NTP timestamp 64-bit long value is represented as hex string with
+     * seconds separated by fractional seconds by a decimal point;
+     * e.g. c1a089bd.fc904f6d == Tue, Dec 10 2002 10:41:49.986
@@ -370 +424,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * @return NTP timestamp 64-bit long value as hex string with seconds separated by fractional seconds.
+     * @return NTP timestamp 64-bit long value as hex string with seconds
+     * separated by fractional seconds.
@@ -373 +428,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-    public String toString() {
+    public String toString()
+    {
@@ -378,7 +434,5 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * Converts this <code>TimeStamp</code> object to a <code>String</code> of the form: <blockquote>
-     *
-     * <pre>
-     * EEE, MMM dd yyyy HH:mm:ss.SSS UTC
-     * </pre>
-     *
-     * </blockquote> See java.text.SimpleDataFormat for code descriptions.
+     * Converts this <code>TimeStamp</code> object to a <code>String</code>
+     * of the form:
+     * <blockquote><pre>
+     * EEE, MMM dd yyyy HH:mm:ss.SSS UTC</pre></blockquote>
+     * See java.text.SimpleDataFormat for code descriptions.
@@ -386 +440 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * @return a string representation of this date in UTC.
+     * @return  a string representation of this date in UTC.
@@ -388 +442,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-    public String toUTCString() {
+    public String toUTCString()
+    {
@@ -390 +445,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-            utcFormatter = new SimpleDateFormat(NTP_DATE_FORMAT + " 'UTC'", Locale.US);
+            utcFormatter = new SimpleDateFormat(NTP_DATE_FORMAT + " 'UTC'",
+                    Locale.US);
@@ -398 +454,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-     * Serialization is unnecessary for this class. Reject attempts to do so until such time as the Serializable attribute can be dropped.
+        Serialization is unnecessary for this class.
+        Reject attempts to do so until such time as the Serializable attribute can be dropped.
@@ -401 +458,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-    private void writeObject(final java.io.ObjectOutputStream out) throws IOException {
+    private void writeObject(final java.io.ObjectOutputStream out) throws IOException
+    {
@@ -405 +463,2 @@ public class TimeStamp implements Serializable, Comparable<TimeStamp> {
-    private void readObject(final java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {
+    private void readObject(final java.io.ObjectInputStream in) throws IOException, ClassNotFoundException
+    {
diff --git a/src/main/java/org/apache/commons/net/pop3/ExtendedPOP3Client.java b/src/main/java/org/apache/commons/net/pop3/ExtendedPOP3Client.java
index 33817f286..7e7e1f7fa 100644
--- a/src/main/java/org/apache/commons/net/pop3/ExtendedPOP3Client.java
+++ b/src/main/java/org/apache/commons/net/pop3/ExtendedPOP3Client.java
@@ -29,0 +30 @@ import org.apache.commons.net.util.Base64;
+
@@ -31,2 +32,2 @@ import org.apache.commons.net.util.Base64;
- * A POP3 Cilent class with protocol and authentication extensions support (RFC2449 and RFC2195).
- *
+ * A POP3 Cilent class with protocol and authentication extensions support
+ * (RFC2449 and RFC2195).
@@ -36 +37,2 @@ import org.apache.commons.net.util.Base64;
-public class ExtendedPOP3Client extends POP3SClient {
+public class ExtendedPOP3Client extends POP3SClient
+{
@@ -40 +42,2 @@ public class ExtendedPOP3Client extends POP3SClient {
-    public enum AUTH_METHOD {
+    public enum AUTH_METHOD
+    {
@@ -49 +52 @@ public class ExtendedPOP3Client extends POP3SClient {
-        AUTH_METHOD(final String methodName) {
+        AUTH_METHOD(final String methodName){
@@ -52 +54,0 @@ public class ExtendedPOP3Client extends POP3SClient {
-
@@ -55 +56,0 @@ public class ExtendedPOP3Client extends POP3SClient {
-         *
@@ -58 +59,2 @@ public class ExtendedPOP3Client extends POP3SClient {
-        public final String getAuthName() {
+        public final String getAuthName()
+        {
@@ -64,2 +66,2 @@ public class ExtendedPOP3Client extends POP3SClient {
-     * The default ExtendedPOP3Client constructor. Creates a new Extended POP3 Client.
-     *
+     * The default ExtendedPOP3Client constructor.
+     * Creates a new Extended POP3 Client.
@@ -68 +70,2 @@ public class ExtendedPOP3Client extends POP3SClient {
-    public ExtendedPOP3Client() throws NoSuchAlgorithmException {
+    public ExtendedPOP3Client() throws NoSuchAlgorithmException
+    {
@@ -72 +75,2 @@ public class ExtendedPOP3Client extends POP3SClient {
-     * Authenticate to the POP3 server by sending the AUTH command with the selected mechanism, using the given username and the given password.
+     * Authenticate to the POP3 server by sending the AUTH command with the
+     * selected mechanism, using the given username and the given password.
@@ -74,2 +78 @@ public class ExtendedPOP3Client extends POP3SClient {
-     *
-     * @param method   the {@link AUTH_METHOD} to use
+     * @param method the {@link AUTH_METHOD} to use
@@ -79,4 +82,8 @@ public class ExtendedPOP3Client extends POP3SClient {
-     * @throws IOException              If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     * @throws NoSuchAlgorithmException If the CRAM hash algorithm cannot be instantiated by the Java runtime system.
-     * @throws InvalidKeyException      If the CRAM hash algorithm failed to use the given password.
-     * @throws InvalidKeySpecException  If the CRAM hash algorithm failed to use the given password.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     * @throws NoSuchAlgorithmException If the CRAM hash algorithm
+     *      cannot be instantiated by the Java runtime system.
+     * @throws InvalidKeyException If the CRAM hash algorithm
+     *      failed to use the given password.
+     * @throws InvalidKeySpecException If the CRAM hash algorithm
+     *      failed to use the given password.
@@ -84,3 +91,7 @@ public class ExtendedPOP3Client extends POP3SClient {
-    public boolean auth(final AUTH_METHOD method, final String username, final String password)
-            throws IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException {
-        if (sendCommand(POP3Command.AUTH, method.getAuthName()) != POP3Reply.OK_INT) {
+    public boolean auth(final AUTH_METHOD method,
+                        final String username, final String password)
+                        throws IOException, NoSuchAlgorithmException,
+                        InvalidKeyException, InvalidKeySpecException
+    {
+        if (sendCommand(POP3Command.AUTH, method.getAuthName())
+        != POP3Reply.OK_INT) {
@@ -90,22 +101,26 @@ public class ExtendedPOP3Client extends POP3SClient {
-        switch (method) {
-        case PLAIN:
-            // the server sends an empty response ("+ "), so we don't have to read it.
-            return sendCommand(new String(Base64.encodeBase64(("\000" + username + "\000" + password).getBytes(getCharset())), getCharset())) == POP3Reply.OK;
-        case CRAM_MD5:
-            // get the CRAM challenge
-            final byte[] serverChallenge = Base64.decodeBase64(getReplyString().substring(2).trim());
-            // get the Mac instance
-            final Mac hmac_md5 = Mac.getInstance("HmacMD5");
-            hmac_md5.init(new SecretKeySpec(password.getBytes(getCharset()), "HmacMD5"));
-            // compute the result:
-            final byte[] hmacResult = convertToHexString(hmac_md5.doFinal(serverChallenge)).getBytes(getCharset());
-            // join the byte arrays to form the reply
-            final byte[] usernameBytes = username.getBytes(getCharset());
-            final byte[] toEncode = new byte[usernameBytes.length + 1 /* the space */ + hmacResult.length];
-            System.arraycopy(usernameBytes, 0, toEncode, 0, usernameBytes.length);
-            toEncode[usernameBytes.length] = ' ';
-            System.arraycopy(hmacResult, 0, toEncode, usernameBytes.length + 1, hmacResult.length);
-            // send the reply and read the server code:
-            return sendCommand(Base64.encodeBase64StringUnChunked(toEncode)) == POP3Reply.OK;
-        default:
-            return false;
+        switch(method) {
+            case PLAIN:
+                // the server sends an empty response ("+ "), so we don't have to read it.
+                return sendCommand(
+                    new String(
+                        Base64.encodeBase64(("\000" + username + "\000" + password).getBytes(getCharset())),
+                        getCharset())
+                    ) == POP3Reply.OK;
+            case CRAM_MD5:
+                // get the CRAM challenge
+                final byte[] serverChallenge = Base64.decodeBase64(getReplyString().substring(2).trim());
+                // get the Mac instance
+                final Mac hmac_md5 = Mac.getInstance("HmacMD5");
+                hmac_md5.init(new SecretKeySpec(password.getBytes(getCharset()), "HmacMD5"));
+                // compute the result:
+                final byte[] hmacResult = convertToHexString(hmac_md5.doFinal(serverChallenge)).getBytes(getCharset());
+                // join the byte arrays to form the reply
+                final byte[] usernameBytes = username.getBytes(getCharset());
+                final byte[] toEncode = new byte[usernameBytes.length + 1 /* the space */ + hmacResult.length];
+                System.arraycopy(usernameBytes, 0, toEncode, 0, usernameBytes.length);
+                toEncode[usernameBytes.length] = ' ';
+                System.arraycopy(hmacResult, 0, toEncode, usernameBytes.length + 1, hmacResult.length);
+                // send the reply and read the server code:
+                return sendCommand(Base64.encodeBase64StringUnChunked(toEncode)) == POP3Reply.OK;
+            default:
+                return false;
@@ -116,3 +131,3 @@ public class ExtendedPOP3Client extends POP3SClient {
-     * Converts the given byte array to a String containing the hex values of the bytes. For example, the byte 'A' will be converted to '41', because this is
-     * the ASCII code (and the byte value) of the capital letter 'A'.
-     *
+     * Converts the given byte array to a String containing the hex values of the bytes.
+     * For example, the byte 'A' will be converted to '41', because this is the ASCII code
+     * (and the byte value) of the capital letter 'A'.
@@ -122,4 +137,6 @@ public class ExtendedPOP3Client extends POP3SClient {
-    private String convertToHexString(final byte[] a) {
-        final StringBuilder result = new StringBuilder(a.length * 2);
-        for (final byte element : a) {
-            if ((element & 0x0FF) <= 15) {
+    private String convertToHexString(final byte[] a)
+    {
+        final StringBuilder result = new StringBuilder(a.length*2);
+        for (final byte element : a)
+        {
+            if ( (element & 0x0FF) <= 15 ) {
diff --git a/src/main/java/org/apache/commons/net/pop3/POP3.java b/src/main/java/org/apache/commons/net/pop3/POP3.java
index e43f549cd..6087d2bd9 100644
--- a/src/main/java/org/apache/commons/net/pop3/POP3.java
+++ b/src/main/java/org/apache/commons/net/pop3/POP3.java
@@ -38,2 +38,4 @@ import org.apache.commons.net.util.NetConstants;
- * The POP3 class is not meant to be used by itself and is provided only so that you may easily implement your own POP3 client if you so desire. If you have no
- * need to perform your own implementation, you should use {@link org.apache.commons.net.pop3.POP3Client}.
+ * The POP3 class is not meant to be used by itself and is provided
+ * only so that you may easily implement your own POP3 client if
+ * you so desire.  If you have no need to perform your own implementation,
+ * you should use {@link org.apache.commons.net.pop3.POP3Client}.
@@ -41,4 +43,9 @@ import org.apache.commons.net.util.NetConstants;
- * Rather than list it separately for each method, we mention here that every method communicating with the server and throwing an IOException can also throw a
- * {@link org.apache.commons.net.MalformedServerReplyException} , which is a subclass of IOException. A MalformedServerReplyException will be thrown when the
- * reply received from the server deviates enough from the protocol specification that it cannot be interpreted in a useful manner despite attempts to be as
- * lenient as possible.
+ * Rather than list it separately for each method, we mention here that
+ * every method communicating with the server and throwing an IOException
+ * can also throw a
+ * {@link org.apache.commons.net.MalformedServerReplyException}
+ * , which is a subclass
+ * of IOException.  A MalformedServerReplyException will be thrown when
+ * the reply received from the server deviates enough from the protocol
+ * specification that it cannot be interpreted in a useful manner despite
+ * attempts to be as lenient as possible.
@@ -51,2 +58,3 @@ import org.apache.commons.net.util.NetConstants;
-public class POP3 extends SocketClient {
-    /** The default POP3 port. Set to 110 according to RFC 1288. */
+public class POP3 extends SocketClient
+{
+    /** The default POP3 port.  Set to 110 according to RFC 1288. */
@@ -55 +63,2 @@ public class POP3 extends SocketClient {
-     * A constant representing the state where the client is not yet connected to a POP3 server.
+     * A constant representing the state where the client is not yet connected
+     * to a POP3 server.
@@ -58 +67 @@ public class POP3 extends SocketClient {
-    /** A constant representing the POP3 authorization state. */
+    /**  A constant representing the POP3 authorization state. */
@@ -60 +69 @@ public class POP3 extends SocketClient {
-    /** A constant representing the POP3 transaction state. */
+    /**  A constant representing the POP3 transaction state. */
@@ -62 +71 @@ public class POP3 extends SocketClient {
-    /** A constant representing the POP3 update state. */
+    /**  A constant representing the POP3 update state. */
@@ -84 +93,2 @@ public class POP3 extends SocketClient {
-     * A ProtocolCommandSupport object used to manage the registering of ProtocolCommandListeners and the firing of ProtocolCommandEvents.
+     * A ProtocolCommandSupport object used to manage the registering of
+     * ProtocolCommandListeners and the firing of ProtocolCommandEvents.
@@ -89 +99,2 @@ public class POP3 extends SocketClient {
-     * The default POP3Client constructor. Initializes the state to <code>DISCONNECTED_STATE</code>.
+     * The default POP3Client constructor.  Initializes the state
+     * to <code>DISCONNECTED_STATE</code>.
@@ -91 +102,2 @@ public class POP3 extends SocketClient {
-    public POP3() {
+    public POP3()
+    {
@@ -101 +113,2 @@ public class POP3 extends SocketClient {
-     * Performs connection initialization and sets state to <code> AUTHORIZATION_STATE </code>.
+     * Performs connection initialization and sets state to
+     * <code> AUTHORIZATION_STATE </code>.
@@ -104 +117,2 @@ public class POP3 extends SocketClient {
-    protected void _connectAction_() throws IOException {
+    protected void _connectAction_() throws IOException
+    {
@@ -106,2 +120,6 @@ public class POP3 extends SocketClient {
-        reader = new CRLFLineReader(new InputStreamReader(_input_, DEFAULT_ENCODING));
-        writer = new BufferedWriter(new OutputStreamWriter(_output_, DEFAULT_ENCODING));
+        reader =
+          new CRLFLineReader(new InputStreamReader(_input_,
+                                                   DEFAULT_ENCODING));
+        writer =
+          new BufferedWriter(new OutputStreamWriter(_output_,
+                                                    DEFAULT_ENCODING));
@@ -111,0 +130 @@ public class POP3 extends SocketClient {
+
@@ -113,2 +132,4 @@ public class POP3 extends SocketClient {
-     * Disconnects the client from the server, and sets the state to <code> DISCONNECTED_STATE </code>. The reply text information from the last issued command
-     * is voided to allow garbage collection of the memory used to store that information.
+     * Disconnects the client from the server, and sets the state to
+     * <code> DISCONNECTED_STATE </code>.  The reply text information
+     * from the last issued command is voided to allow garbage collection
+     * of the memory used to store that information.
@@ -116 +137 @@ public class POP3 extends SocketClient {
-     * @throws IOException If there is an error in disconnecting.
+     * @throws IOException  If there is an error in disconnecting.
@@ -119 +140,2 @@ public class POP3 extends SocketClient {
-    public void disconnect() throws IOException {
+    public void disconnect() throws IOException
+    {
@@ -127,0 +150 @@ public class POP3 extends SocketClient {
+
@@ -130 +152,0 @@ public class POP3 extends SocketClient {
-     *
@@ -133 +155,2 @@ public class POP3 extends SocketClient {
-    public void getAdditionalReply() throws IOException {
+    public void getAdditionalReply() throws IOException
+    {
@@ -137 +160,2 @@ public class POP3 extends SocketClient {
-        while (line != null) {
+        while (line != null)
+        {
@@ -145,0 +170 @@ public class POP3 extends SocketClient {
+
@@ -154 +179,3 @@ public class POP3 extends SocketClient {
-    private void getReply() throws IOException {
+
+    private void getReply() throws IOException
+    {
@@ -171 +198,3 @@ public class POP3 extends SocketClient {
-            throw new MalformedServerReplyException("Received invalid POP3 protocol response from server." + line);
+            throw new
+            MalformedServerReplyException(
+                "Received invalid POP3 protocol response from server." + line);
@@ -179,0 +209 @@ public class POP3 extends SocketClient {
+
@@ -181,4 +211,8 @@ public class POP3 extends SocketClient {
-     * Returns the reply to the last command sent to the server. The value is a single string containing all the reply lines including newlines. If the reply is
-     * a single line, but its format ndicates it should be a multiline reply, then you must call {@link #getAdditionalReply getAdditionalReply() } to fetch the
-     * rest of the reply, and then call <code>getReplyString</code> again. You only have to worry about this if you are implementing your own client using the
-     * {@link #sendCommand sendCommand } methods.
+     * Returns the reply to the last command sent to the server.
+     * The value is a single string containing all the reply lines including
+     * newlines.  If the reply is a single line, but its format ndicates it
+     * should be a multiline reply, then you must call
+     * {@link #getAdditionalReply  getAdditionalReply() } to
+     * fetch the rest of the reply, and then call <code>getReplyString</code>
+     * again.  You only have to worry about this if you are implementing
+     * your own client using the {@link #sendCommand  sendCommand } methods.
@@ -188 +222,2 @@ public class POP3 extends SocketClient {
-    public String getReplyString() {
+    public String getReplyString()
+    {
@@ -191 +226,2 @@ public class POP3 extends SocketClient {
-        for (final String entry : replyLines) {
+        for (final String entry : replyLines)
+        {
@@ -198,0 +235 @@ public class POP3 extends SocketClient {
+
@@ -200,4 +237,8 @@ public class POP3 extends SocketClient {
-     * Returns an array of lines received as a reply to the last command sent to the server. The lines have end of lines truncated. If the reply is a single
-     * line, but its format ndicates it should be a multiline reply, then you must call {@link #getAdditionalReply getAdditionalReply() } to fetch the rest of
-     * the reply, and then call <code>getReplyStrings</code> again. You only have to worry about this if you are implementing your own client using the
-     * {@link #sendCommand sendCommand } methods.
+     * Returns an array of lines received as a reply to the last command
+     * sent to the server.  The lines have end of lines truncated.  If
+     * the reply is a single line, but its format ndicates it should be
+     * a multiline reply, then you must call
+     * {@link #getAdditionalReply  getAdditionalReply() } to
+     * fetch the rest of the reply, and then call <code>getReplyStrings</code>
+     * again.  You only have to worry about this if you are implementing
+     * your own client using the {@link #sendCommand  sendCommand } methods.
@@ -207 +248,2 @@ public class POP3 extends SocketClient {
-    public String[] getReplyStrings() {
+    public String[] getReplyStrings()
+    {
@@ -216 +258,2 @@ public class POP3 extends SocketClient {
-    public int getState() {
+    public int getState()
+    {
@@ -223,3 +266,2 @@ public class POP3 extends SocketClient {
-     * Delegates this incorrectly named method - removeProtocolCommandistener (note the missing "L")- to the correct method
-     * {@link SocketClient#removeProtocolCommandListener}
-     *
+     * Delegates this incorrectly named method - removeProtocolCommandistener (note the missing "L")- to
+     * the correct method {@link SocketClient#removeProtocolCommandListener}
@@ -228 +270 @@ public class POP3 extends SocketClient {
-    public void removeProtocolCommandistener(final org.apache.commons.net.ProtocolCommandListener listener) {
+    public void removeProtocolCommandistener(final org.apache.commons.net.ProtocolCommandListener listener){
@@ -233 +275,2 @@ public class POP3 extends SocketClient {
-     * Sends a command with no arguments to the server and returns the reply code.
+     * Sends a command with no arguments to the server and returns the
+     * reply code.
@@ -235,2 +278,3 @@ public class POP3 extends SocketClient {
-     * @param command The POP3 command to send (one of the POP3Command constants).
-     * @return The server reply code (either POP3Reply.OK, POP3Reply.ERROR or POP3Reply.OK_INT).
+     * @param command  The POP3 command to send
+     *                  (one of the POP3Command constants).
+     * @return  The server reply code (either POP3Reply.OK, POP3Reply.ERROR or POP3Reply.OK_INT).
@@ -239 +283,2 @@ public class POP3 extends SocketClient {
-    public int sendCommand(final int command) throws IOException {
+    public int sendCommand(final int command) throws IOException
+    {
@@ -242,0 +288 @@ public class POP3 extends SocketClient {
+
@@ -246,3 +292,4 @@ public class POP3 extends SocketClient {
-     * @param command The POP3 command to send (one of the POP3Command constants).
-     * @param args    The command arguments.
-     * @return The server reply code (either POP3Reply.OK, POP3Reply.ERROR or POP3Reply.OK_INT).
+     * @param command  The POP3 command to send
+     *                  (one of the POP3Command constants).
+     * @param args     The command arguments.
+     * @return  The server reply code (either POP3Reply.OK, POP3Reply.ERROR or POP3Reply.OK_INT).
@@ -251 +298,2 @@ public class POP3 extends SocketClient {
-    public int sendCommand(final int command, final String args) throws IOException {
+    public int sendCommand(final int command, final String args) throws IOException
+    {
@@ -256 +304,2 @@ public class POP3 extends SocketClient {
-     * Sends a command with no arguments to the server and returns the reply code.
+     * Sends a command with no arguments to the server and returns the
+     * reply code.
@@ -258,2 +307,2 @@ public class POP3 extends SocketClient {
-     * @param command The POP3 command to send.
-     * @return The server reply code (either POP3Reply.OK, POP3Reply.ERROR or POP3Reply.OK_INT).
+     * @param command  The POP3 command to send.
+     * @return  The server reply code (either POP3Reply.OK, POP3Reply.ERROR or POP3Reply.OK_INT).
@@ -262 +311,2 @@ public class POP3 extends SocketClient {
-    public int sendCommand(final String command) throws IOException {
+    public int sendCommand(final String command) throws IOException
+    {
@@ -269,3 +319,3 @@ public class POP3 extends SocketClient {
-     * @param command The POP3 command to send.
-     * @param args    The command arguments.
-     * @return The server reply code (either POP3Reply.OK, POP3Reply.ERROR or POP3Reply.OK_INT).
+     * @param command  The POP3 command to send.
+     * @param args     The command arguments.
+     * @return  The server reply code (either POP3Reply.OK, POP3Reply.ERROR or POP3Reply.OK_INT).
@@ -274 +324,2 @@ public class POP3 extends SocketClient {
-    public int sendCommand(final String command, final String args) throws IOException {
+    public int sendCommand(final String command, final String args) throws IOException
+    {
@@ -281 +332,2 @@ public class POP3 extends SocketClient {
-        if (args != null) {
+        if (args != null)
+        {
@@ -299 +350,0 @@ public class POP3 extends SocketClient {
-     *
@@ -302 +353,2 @@ public class POP3 extends SocketClient {
-    public void setState(final int state) {
+    public void setState(final int state)
+    {
@@ -305,0 +358 @@ public class POP3 extends SocketClient {
+
diff --git a/src/main/java/org/apache/commons/net/pop3/POP3Client.java b/src/main/java/org/apache/commons/net/pop3/POP3Client.java
index ee887baf5..112d76a8d 100644
--- a/src/main/java/org/apache/commons/net/pop3/POP3Client.java
+++ b/src/main/java/org/apache/commons/net/pop3/POP3Client.java
@@ -31,2 +31,4 @@ import org.apache.commons.net.io.DotTerminatedMessageReader;
- * The POP3Client class implements the client side of the Internet POP3 Protocol defined in RFC 1939. All commands are supported, including the APOP command
- * which requires MD5 encryption. See RFC 1939 for more details on the POP3 protocol.
+ * The POP3Client class implements the client side of the Internet POP3
+ * Protocol defined in RFC 1939.  All commands are supported, including
+ * the APOP command which requires MD5 encryption.  See RFC 1939 for
+ * more details on the POP3 protocol.
@@ -34,4 +36,9 @@ import org.apache.commons.net.io.DotTerminatedMessageReader;
- * Rather than list it separately for each method, we mention here that every method communicating with the server and throwing an IOException can also throw a
- * {@link org.apache.commons.net.MalformedServerReplyException} , which is a subclass of IOException. A MalformedServerReplyException will be thrown when the
- * reply received from the server deviates enough from the protocol specification that it cannot be interpreted in a useful manner despite attempts to be as
- * lenient as possible.
+ * Rather than list it separately for each method, we mention here that
+ * every method communicating with the server and throwing an IOException
+ * can also throw a
+ * {@link org.apache.commons.net.MalformedServerReplyException}
+ * , which is a subclass
+ * of IOException.  A MalformedServerReplyException will be thrown when
+ * the reply received from the server deviates enough from the protocol
+ * specification that it cannot be interpreted in a useful manner despite
+ * attempts to be as lenient as possible.
@@ -45 +52,2 @@ import org.apache.commons.net.io.DotTerminatedMessageReader;
-public class POP3Client extends POP3 {
+public class POP3Client extends POP3
+{
@@ -47 +55,2 @@ public class POP3Client extends POP3 {
-    private static POP3MessageInfo parseStatus(final String line) {
+    private static POP3MessageInfo parseStatus(final String line)
+    {
@@ -59 +68,2 @@ public class POP3Client extends POP3 {
-        try {
+        try
+        {
@@ -67 +77,3 @@ public class POP3Client extends POP3 {
-        } catch (final NumberFormatException e) {
+        }
+        catch (final NumberFormatException e)
+        {
@@ -74 +86,2 @@ public class POP3Client extends POP3 {
-    private static POP3MessageInfo parseUID(String line) {
+    private static POP3MessageInfo parseUID(String line)
+    {
@@ -86 +99,2 @@ public class POP3Client extends POP3 {
-        try {
+        try
+        {
@@ -94 +108,3 @@ public class POP3Client extends POP3 {
-        } catch (final NumberFormatException e) {
+        }
+        catch (final NumberFormatException e)
+        {
@@ -103 +118,0 @@ public class POP3Client extends POP3 {
-     *
@@ -105 +120,2 @@ public class POP3Client extends POP3 {
-     * @throws IOException If a network I/O error occurs in the process of sending the CAPA command.
+     * @throws IOException If a network I/O error occurs in the process of
+     *        sending the CAPA command.
@@ -108 +124,2 @@ public class POP3Client extends POP3 {
-    public boolean capa() throws IOException {
+    public boolean capa() throws IOException
+    {
@@ -118,3 +135,8 @@ public class POP3Client extends POP3 {
-     * Delete a message from the POP3 server. The message is only marked for deletion by the server. If you decide to unmark the message, you must issuse a
-     * {@link #reset reset } command. Messages marked for deletion are only deleted by the server on {@link #logout logout }. A delete attempt can only succeed
-     * if the client is in the {@link org.apache.commons.net.pop3.POP3#TRANSACTION_STATE TRANSACTION_STATE } .
+     * Delete a message from the POP3 server.  The message is only marked
+     * for deletion by the server.  If you decide to unmark the message, you
+     * must issuse a {@link #reset  reset } command.  Messages marked
+     * for deletion are only deleted by the server on
+     * {@link #logout  logout }.
+     * A delete attempt can only succeed if the client is in the
+     * {@link org.apache.commons.net.pop3.POP3#TRANSACTION_STATE TRANSACTION_STATE }
+     * .
@@ -122 +144 @@ public class POP3Client extends POP3 {
-     * @param messageId The message number to delete.
+     * @param messageId  The message number to delete.
@@ -124 +146,2 @@ public class POP3Client extends POP3 {
-     * @throws IOException If a network I/O error occurs in the process of sending the delete command.
+     * @throws IOException If a network I/O error occurs in the process of
+     *           sending the delete command.
@@ -126 +149,2 @@ public class POP3Client extends POP3 {
-    public boolean deleteMessage(final int messageId) throws IOException {
+    public boolean deleteMessage(final int messageId) throws IOException
+    {
@@ -128 +152,2 @@ public class POP3Client extends POP3 {
-            return sendCommand(POP3Command.DELE, Integer.toString(messageId)) == POP3Reply.OK;
+            return sendCommand(POP3Command.DELE, Integer.toString(messageId))
+                    == POP3Reply.OK;
@@ -132,0 +158 @@ public class POP3Client extends POP3 {
+
@@ -134,3 +160,8 @@ public class POP3Client extends POP3 {
-     * List an individual message. A list attempt can only succeed if the client is in the {@link org.apache.commons.net.pop3.POP3#TRANSACTION_STATE
-     * TRANSACTION_STATE } . Returns a POP3MessageInfo instance containing the number of the listed message and the size of the message in bytes. Returns null
-     * if the list attempt fails (e.g., if the specified message number does not exist).
+     * List an individual message.  A list attempt can only
+     * succeed if the client is in the
+     * {@link org.apache.commons.net.pop3.POP3#TRANSACTION_STATE TRANSACTION_STATE }
+     * .  Returns a POP3MessageInfo instance
+     * containing the number of the listed message and the
+     * size of the message in bytes.  Returns null if the list
+     * attempt fails (e.g., if the specified message number does
+     * not exist).
@@ -138,4 +169,6 @@ public class POP3Client extends POP3 {
-     * @param messageId The number of the message list.
-     * @return A POP3MessageInfo instance containing the number of the listed message and the size of the message in bytes. Returns null if the list attempt
-     *         fails.
-     * @throws IOException If a network I/O error occurs in the process of sending the list command.
+     * @param messageId  The number of the message list.
+     * @return A POP3MessageInfo instance containing the number of the
+     *         listed message and the size of the message in bytes.  Returns
+     *         null if the list attempt fails.
+     * @throws IOException If a network I/O error occurs in the process of
+     *         sending the list command.
@@ -143 +176,2 @@ public class POP3Client extends POP3 {
-    public POP3MessageInfo listMessage(final int messageId) throws IOException {
+    public POP3MessageInfo listMessage(final int messageId) throws IOException
+    {
@@ -147 +181,2 @@ public class POP3Client extends POP3 {
-        if (sendCommand(POP3Command.LIST, Integer.toString(messageId)) != POP3Reply.OK) {
+        if (sendCommand(POP3Command.LIST, Integer.toString(messageId))
+                != POP3Reply.OK) {
@@ -152,0 +188 @@ public class POP3Client extends POP3 {
+
@@ -154,3 +190,7 @@ public class POP3Client extends POP3 {
-     * List all messages. A list attempt can only succeed if the client is in the {@link org.apache.commons.net.pop3.POP3#TRANSACTION_STATE TRANSACTION_STATE }
-     * . Returns an array of POP3MessageInfo instances, each containing the number of a message and its size in bytes. If there are no messages, this method
-     * returns a zero length array. If the list attempt fails, it returns null.
+     * List all messages.  A list attempt can only
+     * succeed if the client is in the
+     * {@link org.apache.commons.net.pop3.POP3#TRANSACTION_STATE TRANSACTION_STATE }
+     * .  Returns an array of POP3MessageInfo instances,
+     * each containing the number of a message and its size in bytes.
+     * If there are no messages, this method returns a zero length array.
+     * If the list attempt fails, it returns null.
@@ -158,3 +198,7 @@ public class POP3Client extends POP3 {
-     * @return An array of POP3MessageInfo instances representing all messages in the order they appear in the mailbox, each containing the number of a message
-     *         and its size in bytes. If there are no messages, this method returns a zero length array. If the list attempt fails, it returns null.
-     * @throws IOException If a network I/O error occurs in the process of sending the list command.
+     * @return An array of POP3MessageInfo instances representing all messages
+     * in the order they appear in the mailbox,
+     * each containing the number of a message and its size in bytes.
+     * If there are no messages, this method returns a zero length array.
+     * If the list attempt fails, it returns null.
+     * @throws IOException If a network I/O error occurs in the process of
+     *     sending the list command.
@@ -162 +206,2 @@ public class POP3Client extends POP3 {
-    public POP3MessageInfo[] listMessages() throws IOException {
+    public POP3MessageInfo[] listMessages() throws IOException
+    {
@@ -181,0 +227 @@ public class POP3Client extends POP3 {
+
@@ -183,3 +229,8 @@ public class POP3Client extends POP3 {
-     * List the unique identifier for a message. A list attempt can only succeed if the client is in the
-     * {@link org.apache.commons.net.pop3.POP3#TRANSACTION_STATE TRANSACTION_STATE } . Returns a POP3MessageInfo instance containing the number of the listed
-     * message and the unique identifier for that message. Returns null if the list attempt fails (e.g., if the specified message number does not exist).
+     * List the unique identifier for a message.  A list attempt can only
+     * succeed if the client is in the
+     * {@link org.apache.commons.net.pop3.POP3#TRANSACTION_STATE TRANSACTION_STATE }
+     * .  Returns a POP3MessageInfo instance
+     * containing the number of the listed message and the
+     * unique identifier for that message.  Returns null if the list
+     * attempt fails  (e.g., if the specified message number does
+     * not exist).
@@ -187,4 +238,6 @@ public class POP3Client extends POP3 {
-     * @param messageId The number of the message list.
-     * @return A POP3MessageInfo instance containing the number of the listed message and the unique identifier for that message. Returns null if the list
-     *         attempt fails.
-     * @throws IOException If a network I/O error occurs in the process of sending the list unique identifier command.
+     * @param messageId  The number of the message list.
+     * @return A POP3MessageInfo instance containing the number of the
+     *         listed message and the unique identifier for that message.
+     *         Returns null if the list attempt fails.
+     * @throws IOException If a network I/O error occurs in the process of
+     *        sending the list unique identifier command.
@@ -192 +245,3 @@ public class POP3Client extends POP3 {
-    public POP3MessageInfo listUniqueIdentifier(final int messageId) throws IOException {
+    public POP3MessageInfo listUniqueIdentifier(final int messageId)
+    throws IOException
+    {
@@ -196 +251,2 @@ public class POP3Client extends POP3 {
-        if (sendCommand(POP3Command.UIDL, Integer.toString(messageId)) != POP3Reply.OK) {
+        if (sendCommand(POP3Command.UIDL, Integer.toString(messageId))
+                != POP3Reply.OK) {
@@ -201,0 +258 @@ public class POP3Client extends POP3 {
+
@@ -203,3 +260,7 @@ public class POP3Client extends POP3 {
-     * List the unique identifiers for all messages. A list attempt can only succeed if the client is in the
-     * {@link org.apache.commons.net.pop3.POP3#TRANSACTION_STATE TRANSACTION_STATE } . Returns an array of POP3MessageInfo instances, each containing the number
-     * of a message and its unique identifier. If there are no messages, this method returns a zero length array. If the list attempt fails, it returns null.
+     * List the unique identifiers for all messages.  A list attempt can only
+     * succeed if the client is in the
+     * {@link org.apache.commons.net.pop3.POP3#TRANSACTION_STATE TRANSACTION_STATE }
+     * .  Returns an array of POP3MessageInfo instances,
+     * each containing the number of a message and its unique identifier.
+     * If there are no messages, this method returns a zero length array.
+     * If the list attempt fails, it returns null.
@@ -207,3 +268,7 @@ public class POP3Client extends POP3 {
-     * @return An array of POP3MessageInfo instances representing all messages in the order they appear in the mailbox, each containing the number of a message
-     *         and its unique identifier If there are no messages, this method returns a zero length array. If the list attempt fails, it returns null.
-     * @throws IOException If a network I/O error occurs in the process of sending the list unique identifier command.
+     * @return An array of POP3MessageInfo instances representing all messages
+     * in the order they appear in the mailbox,
+     * each containing the number of a message and its unique identifier
+     * If there are no messages, this method returns a zero length array.
+     * If the list attempt fails, it returns null.
+     * @throws IOException If a network I/O error occurs in the process of
+     *     sending the list unique identifier command.
@@ -211 +276,2 @@ public class POP3Client extends POP3 {
-    public POP3MessageInfo[] listUniqueIdentifiers() throws IOException {
+    public POP3MessageInfo[] listUniqueIdentifiers() throws IOException
+    {
@@ -230,0 +297 @@ public class POP3Client extends POP3 {
+
@@ -232,4 +299,9 @@ public class POP3Client extends POP3 {
-     * Login to the POP3 server with the given username and password. You must first connect to the server with
-     * {@link org.apache.commons.net.SocketClient#connect connect } before attempting to login. A login attempt is only valid if the client is in the
-     * {@link org.apache.commons.net.pop3.POP3#AUTHORIZATION_STATE AUTHORIZATION_STATE } . After logging in, the client enters the
-     * {@link org.apache.commons.net.pop3.POP3#TRANSACTION_STATE TRANSACTION_STATE } .
+     * Login to the POP3 server with the given username and password.  You
+     * must first connect to the server with
+     * {@link org.apache.commons.net.SocketClient#connect  connect }
+     * before attempting to login.  A login attempt is only valid if
+     * the client is in the
+     * {@link org.apache.commons.net.pop3.POP3#AUTHORIZATION_STATE AUTHORIZATION_STATE }
+     * .  After logging in, the client enters the
+     * {@link org.apache.commons.net.pop3.POP3#TRANSACTION_STATE TRANSACTION_STATE }
+     * .
@@ -237,2 +309,2 @@ public class POP3Client extends POP3 {
-     * @param username The account name being logged in to.
-     * @param password The plain text password of the account.
+     * @param username  The account name being logged in to.
+     * @param password  The plain text password of the account.
@@ -240 +312,2 @@ public class POP3Client extends POP3 {
-     * @throws IOException If a network I/O error occurs in the process of logging in.
+     * @throws IOException If a network I/O error occurs in the process of
+     *            logging in.
@@ -242 +315,2 @@ public class POP3Client extends POP3 {
-    public boolean login(final String username, final String password) throws IOException {
+    public boolean login(final String username, final String password) throws IOException
+    {
@@ -261,4 +335,8 @@ public class POP3Client extends POP3 {
-     * Login to the POP3 server with the given username and authentication information. Use this method when connecting to a server requiring authentication
-     * using the APOP command. Because the timestamp produced in the greeting banner varies from server to server, it is not possible to consistently extract
-     * the information. Therefore, after connecting to the server, you must call {@link org.apache.commons.net.pop3.POP3#getReplyString getReplyString } and
-     * parse out the timestamp information yourself.
+     * Login to the POP3 server with the given username and authentication
+     * information.  Use this method when connecting to a server requiring
+     * authentication using the APOP command.  Because the timestamp
+     * produced in the greeting banner varies from server to server, it is
+     * not possible to consistently extract the information.  Therefore,
+     * after connecting to the server, you must call
+     * {@link org.apache.commons.net.pop3.POP3#getReplyString getReplyString }
+     *  and parse out the timestamp information yourself.
@@ -266,5 +344,12 @@ public class POP3Client extends POP3 {
-     * You must first connect to the server with {@link org.apache.commons.net.SocketClient#connect connect } before attempting to login. A login attempt is
-     * only valid if the client is in the {@link org.apache.commons.net.pop3.POP3#AUTHORIZATION_STATE AUTHORIZATION_STATE } . After logging in, the client
-     * enters the {@link org.apache.commons.net.pop3.POP3#TRANSACTION_STATE TRANSACTION_STATE } . After connecting, you must parse out the server specific
-     * information to use as a timestamp, and pass that information to this method. The secret is a shared secret known to you and the server. See RFC 1939 for
-     * more details regarding the APOP command.
+     * You must first connect to the server with
+     * {@link org.apache.commons.net.SocketClient#connect  connect }
+     * before attempting to login.  A login attempt is only valid if
+     * the client is in the
+     * {@link org.apache.commons.net.pop3.POP3#AUTHORIZATION_STATE AUTHORIZATION_STATE }
+     * .  After logging in, the client enters the
+     * {@link org.apache.commons.net.pop3.POP3#TRANSACTION_STATE TRANSACTION_STATE }
+     * .  After connecting, you must parse out the
+     * server specific information to use as a timestamp, and pass that
+     * information to this method.  The secret is a shared secret known
+     * to you and the server.  See RFC 1939 for more details regarding
+     * the APOP command.
@@ -273,2 +358,3 @@ public class POP3Client extends POP3 {
-     * @param timestamp The timestamp string to combine with the secret.
-     * @param secret    The shared secret which produces the MD5 digest when combined with the timestamp.
+     * @param timestamp  The timestamp string to combine with the secret.
+     * @param secret  The shared secret which produces the MD5 digest when
+     *        combined with the timestamp.
@@ -276,2 +362,4 @@ public class POP3Client extends POP3 {
-     * @throws IOException              If a network I/O error occurs in the process of logging in.
-     * @throws NoSuchAlgorithmException If the MD5 encryption algorithm cannot be instantiated by the Java runtime system.
+     * @throws IOException If a network I/O error occurs in the process of
+     *            logging in.
+     * @throws NoSuchAlgorithmException If the MD5 encryption algorithm
+     *      cannot be instantiated by the Java runtime system.
@@ -279 +367,3 @@ public class POP3Client extends POP3 {
-    public boolean login(final String username, String timestamp, final String secret) throws IOException, NoSuchAlgorithmException {
+    public boolean login(final String username, String timestamp, final String secret)
+    throws IOException, NoSuchAlgorithmException
+    {
@@ -316,0 +407 @@ public class POP3Client extends POP3 {
+
@@ -318,3 +409,9 @@ public class POP3Client extends POP3 {
-     * Logout of the POP3 server. To fully disconnect from the server you must call {@link org.apache.commons.net.pop3.POP3#disconnect disconnect }. A logout
-     * attempt is valid in any state. If the client is in the {@link org.apache.commons.net.pop3.POP3#TRANSACTION_STATE TRANSACTION_STATE } , it enters the
-     * {@link org.apache.commons.net.pop3.POP3#UPDATE_STATE UPDATE_STATE } on a successful logout.
+     * Logout of the POP3 server.  To fully disconnect from the server
+     * you must call
+     * {@link org.apache.commons.net.pop3.POP3#disconnect  disconnect }.
+     * A logout attempt is valid in any state.  If
+     * the client is in the
+     * {@link org.apache.commons.net.pop3.POP3#TRANSACTION_STATE TRANSACTION_STATE }
+     * , it enters the
+     * {@link org.apache.commons.net.pop3.POP3#UPDATE_STATE UPDATE_STATE }
+     *  on a successful logout.
@@ -323 +420,2 @@ public class POP3Client extends POP3 {
-     * @throws IOException If a network I/O error occurs in the process of logging out.
+     * @throws IOException If a network I/O error occurs in the process
+     *           of logging out.
@@ -325 +423,2 @@ public class POP3Client extends POP3 {
-    public boolean logout() throws IOException {
+    public boolean logout() throws IOException
+    {
@@ -332,0 +432 @@ public class POP3Client extends POP3 {
+
@@ -334,2 +434,6 @@ public class POP3Client extends POP3 {
-     * Send a NOOP command to the POP3 server. This is useful for keeping a connection alive since most POP3 servers will timeout after 10 minutes of
-     * inactivity. A noop attempt will only succeed if the client is in the {@link org.apache.commons.net.pop3.POP3#TRANSACTION_STATE TRANSACTION_STATE } .
+     * Send a NOOP command to the POP3 server.  This is useful for keeping
+     * a connection alive since most POP3 servers will timeout after 10
+     * minutes of inactivity.  A noop attempt will only succeed if
+     * the client is in the
+     * {@link org.apache.commons.net.pop3.POP3#TRANSACTION_STATE TRANSACTION_STATE }
+     * .
@@ -338 +442,2 @@ public class POP3Client extends POP3 {
-     * @throws IOException If a network I/O error occurs in the process of sending the NOOP command.
+     * @throws IOException If a network I/O error occurs in the process of
+     *        sending the NOOP command.
@@ -340 +445,2 @@ public class POP3Client extends POP3 {
-    public boolean noop() throws IOException {
+    public boolean noop() throws IOException
+    {
@@ -348,2 +454,5 @@ public class POP3Client extends POP3 {
-     * Reset the POP3 session. This is useful for undoing any message deletions that may have been performed. A reset attempt can only succeed if the client is
-     * in the {@link org.apache.commons.net.pop3.POP3#TRANSACTION_STATE TRANSACTION_STATE } .
+     * Reset the POP3 session.  This is useful for undoing any message
+     * deletions that may have been performed.  A reset attempt can only
+     * succeed if the client is in the
+     * {@link org.apache.commons.net.pop3.POP3#TRANSACTION_STATE TRANSACTION_STATE }
+     * .
@@ -352 +461,2 @@ public class POP3Client extends POP3 {
-     * @throws IOException If a network I/O error occurs in the process of sending the reset command.
+     * @throws IOException If a network I/O error occurs in the process of
+     *      sending the reset command.
@@ -354 +464,2 @@ public class POP3Client extends POP3 {
-    public boolean reset() throws IOException {
+    public boolean reset() throws IOException
+    {
@@ -360,0 +472 @@ public class POP3Client extends POP3 {
+
@@ -362 +474,2 @@ public class POP3Client extends POP3 {
-     * Retrieve a message from the POP3 server. A retrieve message attempt can only succeed if the client is in the
+     * Retrieve a message from the POP3 server.  A retrieve message attempt
+     * can only succeed if the client is in the
@@ -365,4 +478,9 @@ public class POP3Client extends POP3 {
-     * You must not issue any commands to the POP3 server (i.e., call any other methods) until you finish reading the message from the returned BufferedReader
-     * instance. The POP3 protocol uses the same stream for issuing commands as it does for returning results. Therefore the returned BufferedReader actually
-     * reads directly from the POP3 connection. After the end of message has been reached, new commands can be executed and their replies read. If you do not
-     * follow these requirements, your program will not work properly.
+     * You must not issue any commands to the POP3 server (i.e., call any
+     * other methods) until you finish reading the message from the
+     * returned BufferedReader instance.
+     * The POP3 protocol uses the same stream for issuing commands as it does
+     * for returning results.  Therefore the returned BufferedReader actually reads
+     * directly from the POP3 connection.  After the end of message has been
+     * reached, new commands can be executed and their replies read.  If
+     * you do not follow these requirements, your program will not work
+     * properly.
@@ -370,5 +488,9 @@ public class POP3Client extends POP3 {
-     * @param messageId The number of the message to fetch.
-     * @return A DotTerminatedMessageReader instance from which the entire message can be read. This can safely be cast to a {@link java.io.BufferedReader
-     *         BufferedReader} in order to use the {@link java.io.BufferedReader#readLine() BufferedReader#readLine()} method. Returns null if the retrieval
-     *         attempt fails (e.g., if the specified message number does not exist).
-     * @throws IOException If a network I/O error occurs in the process of sending the retrieve message command.
+     * @param messageId  The number of the message to fetch.
+     * @return A DotTerminatedMessageReader instance
+     * from which the entire message can be read.
+     * This can safely be cast to a {@link java.io.BufferedReader BufferedReader} in order to
+     * use the {@link java.io.BufferedReader#readLine() BufferedReader#readLine()} method.
+     * Returns null if the retrieval attempt fails  (e.g., if the specified
+     * message number does not exist).
+     * @throws IOException If a network I/O error occurs in the process of
+     *        sending the retrieve message command.
@@ -376 +498,2 @@ public class POP3Client extends POP3 {
-    public Reader retrieveMessage(final int messageId) throws IOException {
+    public Reader retrieveMessage(final int messageId) throws IOException
+    {
@@ -386,0 +510 @@ public class POP3Client extends POP3 {
+
@@ -388 +512,3 @@ public class POP3Client extends POP3 {
-     * Retrieve only the specified top number of lines of a message from the POP3 server. A retrieve top lines attempt can only succeed if the client is in the
+     * Retrieve only the specified top number of lines of a message from the
+     * POP3 server.  A retrieve top lines attempt
+     * can only succeed if the client is in the
@@ -391,4 +517,9 @@ public class POP3Client extends POP3 {
-     * You must not issue any commands to the POP3 server (i.e., call any other methods) until you finish reading the message from the returned BufferedReader
-     * instance. The POP3 protocol uses the same stream for issuing commands as it does for returning results. Therefore the returned BufferedReader actually
-     * reads directly from the POP3 connection. After the end of message has been reached, new commands can be executed and their replies read. If you do not
-     * follow these requirements, your program will not work properly.
+     * You must not issue any commands to the POP3 server (i.e., call any
+     * other methods) until you finish reading the message from the returned
+     * BufferedReader instance.
+     * The POP3 protocol uses the same stream for issuing commands as it does
+     * for returning results.  Therefore the returned BufferedReader actually reads
+     * directly from the POP3 connection.  After the end of message has been
+     * reached, new commands can be executed and their replies read.  If
+     * you do not follow these requirements, your program will not work
+     * properly.
@@ -396 +527 @@ public class POP3Client extends POP3 {
-     * @param messageId The number of the message to fetch.
+     * @param messageId  The number of the message to fetch.
@@ -398,4 +529,9 @@ public class POP3Client extends POP3 {
-     * @return A DotTerminatedMessageReader instance from which the specified top number of lines of the message can be read. This can safely be cast to a
-     *         {@link java.io.BufferedReader BufferedReader} in order to use the {@link java.io.BufferedReader#readLine() BufferedReader#readLine()} method.
-     *         Returns null if the retrieval attempt fails (e.g., if the specified message number does not exist).
-     * @throws IOException If a network I/O error occurs in the process of sending the top command.
+     * @return  A DotTerminatedMessageReader instance
+     * from which the specified top number of lines of the message can be
+     * read.
+     * This can safely be cast to a {@link java.io.BufferedReader BufferedReader} in order to
+     * use the {@link java.io.BufferedReader#readLine() BufferedReader#readLine()} method.
+     * Returns null if the retrieval attempt fails  (e.g., if the specified
+     * message number does not exist).
+     * @throws IOException If a network I/O error occurs in the process of
+     *       sending the top command.
@@ -403 +539,3 @@ public class POP3Client extends POP3 {
-    public Reader retrieveMessageTop(final int messageId, final int numLines) throws IOException {
+    public Reader retrieveMessageTop(final int messageId, final int numLines)
+    throws IOException
+    {
@@ -407 +545,2 @@ public class POP3Client extends POP3 {
-        if (sendCommand(POP3Command.TOP, Integer.toString(messageId) + " " + Integer.toString(numLines)) != POP3Reply.OK) {
+        if (sendCommand(POP3Command.TOP, Integer.toString(messageId) + " " +
+                        Integer.toString(numLines)) != POP3Reply.OK) {
@@ -413,0 +553 @@ public class POP3Client extends POP3 {
+
@@ -415,3 +555,7 @@ public class POP3Client extends POP3 {
-     * Get the mailbox status. A status attempt can only succeed if the client is in the {@link org.apache.commons.net.pop3.POP3#TRANSACTION_STATE
-     * TRANSACTION_STATE } . Returns a POP3MessageInfo instance containing the number of messages in the mailbox and the total size of the messages in bytes.
-     * Returns null if the status the attempt fails.
+     * Get the mailbox status.  A status attempt can only
+     * succeed if the client is in the
+     * {@link org.apache.commons.net.pop3.POP3#TRANSACTION_STATE TRANSACTION_STATE }
+     * .  Returns a POP3MessageInfo instance
+     * containing the number of messages in the mailbox and the total
+     * size of the messages in bytes.  Returns null if the status the
+     * attempt fails.
@@ -419,3 +563,5 @@ public class POP3Client extends POP3 {
-     * @return A POP3MessageInfo instance containing the number of messages in the mailbox and the total size of the messages in bytes. Returns null if the
-     *         status the attempt fails.
-     * @throws IOException If a network I/O error occurs in the process of sending the status command.
+     * @return A POP3MessageInfo instance containing the number of
+     *         messages in the mailbox and the total size of the messages
+     *         in bytes.  Returns null if the status the attempt fails.
+     * @throws IOException If a network I/O error occurs in the process of
+     *       sending the status command.
@@ -423 +569,2 @@ public class POP3Client extends POP3 {
-    public POP3MessageInfo status() throws IOException {
+    public POP3MessageInfo status() throws IOException
+    {
@@ -432,0 +580 @@ public class POP3Client extends POP3 {
+
@@ -433,0 +582 @@ public class POP3Client extends POP3 {
+
diff --git a/src/main/java/org/apache/commons/net/pop3/POP3Command.java b/src/main/java/org/apache/commons/net/pop3/POP3Command.java
index 6de394420..100c2af2c 100644
--- a/src/main/java/org/apache/commons/net/pop3/POP3Command.java
+++ b/src/main/java/org/apache/commons/net/pop3/POP3Command.java
@@ -26 +26,2 @@ package org.apache.commons.net.pop3;
-public final class POP3Command {
+public final class POP3Command
+{
@@ -41 +42 @@ public final class POP3Command {
-    /** No operation. Used as a session keepalive. */
+    /** No operation.  Used as a session keepalive. */
@@ -53 +53,0 @@ public final class POP3Command {
-     *
@@ -59 +58,0 @@ public final class POP3Command {
-     *
@@ -66 +65,4 @@ public final class POP3Command {
-    static final String[] commands = { "USER", "PASS", "QUIT", "STAT", "LIST", "RETR", "DELE", "NOOP", "RSET", "APOP", "TOP", "UIDL", "CAPA", "AUTH", };
+    static final String[] commands = {
+                                          "USER", "PASS", "QUIT", "STAT", "LIST", "RETR", "DELE", "NOOP", "RSET",
+                                          "APOP", "TOP", "UIDL", "CAPA", "AUTH",
+                                      };
@@ -76 +77,0 @@ public final class POP3Command {
-     *
@@ -81 +82,2 @@ public final class POP3Command {
-    public static String getCommand(final int command) {
+    public static String getCommand(final int command)
+    {
@@ -86,2 +88,2 @@ public final class POP3Command {
-    private POP3Command() {
-    }
+    private POP3Command()
+    {}
diff --git a/src/main/java/org/apache/commons/net/pop3/POP3MessageInfo.java b/src/main/java/org/apache/commons/net/pop3/POP3MessageInfo.java
index 8f5f42013..657620766 100644
--- a/src/main/java/org/apache/commons/net/pop3/POP3MessageInfo.java
+++ b/src/main/java/org/apache/commons/net/pop3/POP3MessageInfo.java
@@ -21,2 +21,3 @@ package org.apache.commons.net.pop3;
- * POP3MessageInfo is used to return information about messages stored on a POP3 server. Its fields are used to mean slightly different things depending on the
- * information being returned.
+ * POP3MessageInfo is used to return information about messages stored on
+ * a POP3 server.  Its fields are used to mean slightly different things
+ * depending on the information being returned.
@@ -24,2 +25,4 @@ package org.apache.commons.net.pop3;
- * In response to a status command, <code> number </code> contains the number of messages in the mailbox, <code> size </code> contains the size of the mailbox
- * in bytes, and <code> identifier </code> is null.
+ * In response to a status command, <code> number </code>
+ * contains the number of messages in the mailbox, <code> size </code>
+ * contains the size of the mailbox in bytes, and <code> identifier </code>
+ * is null.
@@ -27,2 +30,3 @@ package org.apache.commons.net.pop3;
- * In response to a message listings, <code> number </code> contains the message number, <code> size </code> contains the size of the message in bytes, and
- * <code> identifier </code> is null.
+ * In response to a message listings, <code> number </code>
+ * contains the message number, <code> size </code> contains the
+ * size of the message in bytes, and <code> identifier </code> is null.
@@ -30,2 +34,3 @@ package org.apache.commons.net.pop3;
- * In response to unique identifier listings, <code> number </code> contains the message number, <code> size </code> is undefined, and <code> identifier </code>
- * contains the message's unique identifier.
+ * In response to unique identifier listings, <code> number </code> contains
+ * the message number, <code> size </code> is undefined, and
+ * <code> identifier </code> contains the message's unique identifier.
@@ -36 +41,2 @@ package org.apache.commons.net.pop3;
-public final class POP3MessageInfo {
+public final class POP3MessageInfo
+{
@@ -42 +48,3 @@ public final class POP3MessageInfo {
-     * Creates a POP3MessageInfo instance with <code>number</code> and <code> size </code> set to 0, and <code>identifier</code> set to null.
+     * Creates a POP3MessageInfo instance with <code>number</code> and
+     * <code> size </code> set to 0, and <code>identifier</code> set to
+     * null.
@@ -44 +52,2 @@ public final class POP3MessageInfo {
-    public POP3MessageInfo() {
+    public POP3MessageInfo()
+    {
@@ -49,4 +58,4 @@ public final class POP3MessageInfo {
-     * Creates a POP3MessageInfo instance with <code>number</code> set to <code> num </code>, <code> size </code> set to <code> octets </code>, and
-     * <code>identifier</code> set to null.
-     *
-     * @param num    the number
+     * Creates a POP3MessageInfo instance with <code>number</code> set
+     * to <code> num </code>, <code> size </code> set to <code> octets </code>,
+     * and <code>identifier</code> set to null.
+     * @param num the number
@@ -55 +64,2 @@ public final class POP3MessageInfo {
-    public POP3MessageInfo(final int num, final int octets) {
+    public POP3MessageInfo(final int num, final int octets)
+    {
@@ -60,3 +70,3 @@ public final class POP3MessageInfo {
-     * Creates a POP3MessageInfo instance with <code>number</code> set to <code> num </code>, <code> size </code> undefined, and <code>identifier</code> set to
-     * <code>uid</code>.
-     *
+     * Creates a POP3MessageInfo instance with <code>number</code> set
+     * to <code> num </code>, <code> size </code> undefined,
+     * and <code>identifier</code> set to <code>uid</code>.
@@ -66 +76,2 @@ public final class POP3MessageInfo {
-    public POP3MessageInfo(final int num, final String uid) {
+    public POP3MessageInfo(final int num, final String uid)
+    {
diff --git a/src/main/java/org/apache/commons/net/pop3/POP3Reply.java b/src/main/java/org/apache/commons/net/pop3/POP3Reply.java
index 757ccaa73..893a6b15d 100644
--- a/src/main/java/org/apache/commons/net/pop3/POP3Reply.java
+++ b/src/main/java/org/apache/commons/net/pop3/POP3Reply.java
@@ -24 +24,2 @@ package org.apache.commons.net.pop3;
-public final class POP3Reply {
+public final class POP3Reply
+{
@@ -33 +33,0 @@ public final class POP3Reply {
-     *
@@ -39,2 +39,2 @@ public final class POP3Reply {
-    private POP3Reply() {
-    }
+    private POP3Reply()
+    {}
diff --git a/src/main/java/org/apache/commons/net/pop3/POP3SClient.java b/src/main/java/org/apache/commons/net/pop3/POP3SClient.java
index 841aee37c..1b161d039 100644
--- a/src/main/java/org/apache/commons/net/pop3/POP3SClient.java
+++ b/src/main/java/org/apache/commons/net/pop3/POP3SClient.java
@@ -39,7 +39,11 @@ import org.apache.commons.net.util.SSLSocketUtils;
- * POP3 over SSL processing. Copied from FTPSClient.java and modified to suit POP3. If implicit mode is selected (NOT the default), SSL/TLS negotiation starts
- * right after the connection has been established. In explicit mode (the default), SSL/TLS negotiation starts when the user calls execTLS() and the server
- * accepts the command. Implicit usage: POP3SClient c = new POP3SClient(true); c.connect("127.0.0.1", 995); Explicit usage: POP3SClient c = new POP3SClient();
- * c.connect("127.0.0.1", 110); if (c.execTLS()) { /rest of the commands here/ }
- *
- * Warning: the hostname is not verified against the certificate by default, use {@link #setHostnameVerifier(HostnameVerifier)} or
- * {@link #setEndpointCheckingEnabled(boolean)} (on Java 1.7+) to enable verification.
+ * POP3 over SSL processing. Copied from FTPSClient.java and modified to suit POP3.
+ * If implicit mode is selected (NOT the default), SSL/TLS negotiation starts right
+ * after the connection has been established. In explicit mode (the default), SSL/TLS
+ * negotiation starts when the user calls execTLS() and the server accepts the command.
+ * Implicit usage:
+ *               POP3SClient c = new POP3SClient(true);
+ *               c.connect("127.0.0.1", 995);
+ * Explicit usage:
+ *               POP3SClient c = new POP3SClient();
+ *               c.connect("127.0.0.1", 110);
+ *               if (c.execTLS()) { /rest of the commands here/ }
@@ -46,0 +51,3 @@ import org.apache.commons.net.util.SSLSocketUtils;
+ * Warning: the hostname is not verified against the certificate by default, use
+ * {@link #setHostnameVerifier(HostnameVerifier)} or {@link #setEndpointCheckingEnabled(boolean)}
+ * (on Java 1.7+) to enable verification.
@@ -49 +56,2 @@ import org.apache.commons.net.util.SSLSocketUtils;
-public class POP3SClient extends POP3Client {
+public class POP3SClient extends POP3Client
+{
@@ -52,2 +60,2 @@ public class POP3SClient extends POP3Client {
-    // pop3s 995/tcp pop3 protocol over TLS/SSL (was spop3)
-    // pop3s 995/udp pop3 protocol over TLS/SSL (was spop3)
+    //    pop3s           995/tcp    pop3 protocol over TLS/SSL (was spop3)
+    //    pop3s           995/udp    pop3 protocol over TLS/SSL (was spop3)
@@ -66,3 +74,2 @@ public class POP3SClient extends POP3Client {
-    /**
-     * The cipher suites. SSLSockets have a default set of these anyway, so no initialization required.
-     */
+    /** The cipher suites. SSLSockets have a default set of these anyway,
+        so no initialization required. */
@@ -71,2 +78,2 @@ public class POP3SClient extends POP3Client {
-    private String[] protocols // null;
-    ;// {"SSLv2", "SSLv3", "TLSv1", "TLSv1.1", "SSLv2Hello"};
+    private String[] protocols  //null;
+            ;//{"SSLv2", "SSLv3", "TLSv1", "TLSv1.1", "SSLv2Hello"};
@@ -87 +94,2 @@ public class POP3SClient extends POP3Client {
-     * Constructor for POP3SClient, using {@link #DEFAULT_PROTOCOL} i.e. TLS Sets security mode to explicit.
+     * Constructor for POP3SClient, using {@link #DEFAULT_PROTOCOL} i.e. TLS
+     * Sets security mode to explicit.
@@ -89 +97,2 @@ public class POP3SClient extends POP3Client {
-    public POP3SClient() {
+    public POP3SClient()
+    {
@@ -95 +103,0 @@ public class POP3SClient extends POP3Client {
-     *
@@ -98 +106,2 @@ public class POP3SClient extends POP3Client {
-    public POP3SClient(final boolean implicit) {
+    public POP3SClient(final boolean implicit)
+    {
@@ -104 +112,0 @@ public class POP3SClient extends POP3Client {
-     *
@@ -106 +114 @@ public class POP3SClient extends POP3Client {
-     * @param ctx      A pre-configured SSL Context.
+     * @param ctx A pre-configured SSL Context.
@@ -108 +116,2 @@ public class POP3SClient extends POP3Client {
-    public POP3SClient(final boolean implicit, final SSLContext ctx) {
+    public POP3SClient(final boolean implicit, final SSLContext ctx)
+    {
@@ -114 +122,0 @@ public class POP3SClient extends POP3Client {
-     *
@@ -118 +126,2 @@ public class POP3SClient extends POP3Client {
-    public POP3SClient(final SSLContext context) {
+    public POP3SClient(final SSLContext context)
+    {
@@ -123,2 +132,2 @@ public class POP3SClient extends POP3Client {
-     * Constructor for POP3SClient. Sets security mode to explicit.
-     *
+     * Constructor for POP3SClient.
+     * Sets security mode to explicit.
@@ -127 +136,2 @@ public class POP3SClient extends POP3Client {
-    public POP3SClient(final String proto) {
+    public POP3SClient(final String proto)
+    {
@@ -133,2 +143 @@ public class POP3SClient extends POP3Client {
-     *
-     * @param proto    the protocol.
+     * @param proto the protocol.
@@ -137 +146,2 @@ public class POP3SClient extends POP3Client {
-    public POP3SClient(final String proto, final boolean implicit) {
+    public POP3SClient(final String proto, final boolean implicit)
+    {
@@ -142,3 +152,3 @@ public class POP3SClient extends POP3Client {
-     * Constructor for POP3SClient. Sets the default port to {@link #DEFAULT_POP3S_PORT} - 995 - if using implicit mode
-     *
-     * @param proto    the protocol.
+     * Constructor for POP3SClient.
+     * Sets the default port to {@link #DEFAULT_POP3S_PORT} - 995 - if using implicit mode
+     * @param proto the protocol.
@@ -146 +156 @@ public class POP3SClient extends POP3Client {
-     * @param ctx      the context to be used
+     * @param ctx the context to be used
@@ -148 +158,2 @@ public class POP3SClient extends POP3Client {
-    public POP3SClient(final String proto, final boolean implicit, final SSLContext ctx) {
+    public POP3SClient(final String proto, final boolean implicit, final SSLContext ctx)
+    {
@@ -158,3 +169,4 @@ public class POP3SClient extends POP3Client {
-     * Because there are so many connect() methods, the _connectAction_() method is provided as a means of performing some action immediately after establishing
-     * a connection, rather than reimplementing all of the connect() methods.
-     *
+     * Because there are so many connect() methods,
+     * the _connectAction_() method is provided as a means of performing
+     * some action immediately after establishing a connection,
+     * rather than reimplementing all of the connect() methods.
@@ -165 +177,2 @@ public class POP3SClient extends POP3Client {
-    protected void _connectAction_() throws IOException {
+    protected void _connectAction_() throws IOException
+    {
@@ -177 +189,0 @@ public class POP3SClient extends POP3Client {
-     *
@@ -179 +191,2 @@ public class POP3SClient extends POP3Client {
-     * @throws IOException  If an I/O error occurs while sending the command or performing the negotiation.
+     * @throws IOException If an I/O error occurs while sending
+     * the command or performing the negotiation.
@@ -182,2 +195,4 @@ public class POP3SClient extends POP3Client {
-    public boolean execTLS() throws SSLException, IOException {
-        if (sendCommand("STLS") != POP3Reply.OK) {
+    public boolean execTLS() throws SSLException, IOException
+    {
+        if (sendCommand("STLS") != POP3Reply.OK)
+        {
@@ -185 +200 @@ public class POP3SClient extends POP3Client {
-            // throw new SSLException(getReplyString());
+            //throw new SSLException(getReplyString());
@@ -192,3 +207,3 @@ public class POP3SClient extends POP3Client {
-     * Returns the names of the cipher suites which could be enabled for use on this connection. When the underlying {@link java.net.Socket Socket} is not an
-     * {@link SSLSocket} instance, returns null.
-     *
+     * Returns the names of the cipher suites which could be enabled
+     * for use on this connection.
+     * When the underlying {@link java.net.Socket Socket} is not an {@link SSLSocket} instance, returns null.
@@ -197,3 +212,5 @@ public class POP3SClient extends POP3Client {
-    public String[] getEnabledCipherSuites() {
-        if (_socket_ instanceof SSLSocket) {
-            return ((SSLSocket) _socket_).getEnabledCipherSuites();
+    public String[] getEnabledCipherSuites()
+    {
+        if (_socket_ instanceof SSLSocket)
+        {
+            return ((SSLSocket)_socket_).getEnabledCipherSuites();
@@ -205,3 +222,3 @@ public class POP3SClient extends POP3Client {
-     * Returns the names of the protocol versions which are currently enabled for use on this connection. When the underlying {@link java.net.Socket Socket} is
-     * not an {@link SSLSocket} instance, returns null.
-     *
+     * Returns the names of the protocol versions which are currently
+     * enabled for use on this connection.
+     * When the underlying {@link java.net.Socket Socket} is not an {@link SSLSocket} instance, returns null.
@@ -210,3 +227,5 @@ public class POP3SClient extends POP3Client {
-    public String[] getEnabledProtocols() {
-        if (_socket_ instanceof SSLSocket) {
-            return ((SSLSocket) _socket_).getEnabledProtocols();
+    public String[] getEnabledProtocols()
+    {
+        if (_socket_ instanceof SSLSocket)
+        {
+            return ((SSLSocket)_socket_).getEnabledProtocols();
@@ -219 +237,0 @@ public class POP3SClient extends POP3Client {
-     *
@@ -223 +241,2 @@ public class POP3SClient extends POP3Client {
-    public HostnameVerifier getHostnameVerifier() {
+    public HostnameVerifier getHostnameVerifier()
+    {
@@ -229 +247,0 @@ public class POP3SClient extends POP3Client {
-     *
@@ -232 +250,2 @@ public class POP3SClient extends POP3Client {
-    private KeyManager getKeyManager() {
+    private KeyManager getKeyManager()
+    {
@@ -238 +256,0 @@ public class POP3SClient extends POP3Client {
-     *
@@ -241 +259,2 @@ public class POP3SClient extends POP3Client {
-    public TrustManager getTrustManager() {
+    public TrustManager getTrustManager()
+    {
@@ -247 +265,0 @@ public class POP3SClient extends POP3Client {
-     *
@@ -250,2 +268,4 @@ public class POP3SClient extends POP3Client {
-    private void initSSLContext() throws IOException {
-        if (context == null) {
+    private void initSSLContext() throws IOException
+    {
+        if (context == null)
+        {
@@ -257 +277,2 @@ public class POP3SClient extends POP3Client {
-     * Return whether or not endpoint identification using the HTTPS algorithm on Java 1.7+ is enabled. The default behavior is for this to be disabled.
+     * Return whether or not endpoint identification using the HTTPS algorithm
+     * on Java 1.7+ is enabled. The default behavior is for this to be disabled.
@@ -262 +283,2 @@ public class POP3SClient extends POP3Client {
-    public boolean isEndpointCheckingEnabled() {
+    public boolean isEndpointCheckingEnabled()
+    {
@@ -267,2 +289,2 @@ public class POP3SClient extends POP3Client {
-     * SSL/TLS negotiation. Acquires an SSL socket of a connection and carries out handshake processing.
-     *
+     * SSL/TLS negotiation. Acquires an SSL socket of a
+     * connection and carries out handshake processing.
@@ -271 +293,2 @@ public class POP3SClient extends POP3Client {
-    private void performSSLNegotiation() throws IOException {
+    private void performSSLNegotiation() throws IOException
+    {
@@ -277 +300,2 @@ public class POP3SClient extends POP3Client {
-        final SSLSocket socket = (SSLSocket) ssf.createSocket(_socket_, host, port, true);
+        final SSLSocket socket =
+            (SSLSocket) ssf.createSocket(_socket_, host, port, true);
@@ -306,2 +330,2 @@ public class POP3SClient extends POP3Client {
-     * Controls which particular cipher suites are enabled for use on this connection. Called before server negotiation.
-     *
+     * Controls which particular cipher suites are enabled for use on this
+     * connection. Called before server negotiation.
@@ -310 +334,2 @@ public class POP3SClient extends POP3Client {
-    public void setEnabledCipherSuites(final String[] cipherSuites) {
+    public void setEnabledCipherSuites(final String[] cipherSuites)
+    {
@@ -315,2 +340,2 @@ public class POP3SClient extends POP3Client {
-     * Controls which particular protocol versions are enabled for use on this connection. I perform setting before a server negotiation.
-     *
+     * Controls which particular protocol versions are enabled for use on this
+     * connection. I perform setting before a server negotiation.
@@ -319 +344,2 @@ public class POP3SClient extends POP3Client {
-    public void setEnabledProtocols(final String[] protocolVersions) {
+    public void setEnabledProtocols(final String[] protocolVersions)
+    {
@@ -324 +350,2 @@ public class POP3SClient extends POP3Client {
-     * Automatic endpoint identification checking using the HTTPS algorithm is supported on Java 1.7+. The default behavior is for this to be disabled.
+     * Automatic endpoint identification checking using the HTTPS algorithm
+     * is supported on Java 1.7+. The default behavior is for this to be disabled.
@@ -329 +356,2 @@ public class POP3SClient extends POP3Client {
-    public void setEndpointCheckingEnabled(final boolean enable) {
+    public void setEndpointCheckingEnabled(final boolean enable)
+    {
@@ -335 +362,0 @@ public class POP3SClient extends POP3Client {
-     *
@@ -339 +366,2 @@ public class POP3SClient extends POP3Client {
-    public void setHostnameVerifier(final HostnameVerifier newHostnameVerifier) {
+    public void setHostnameVerifier(final HostnameVerifier newHostnameVerifier)
+    {
@@ -345 +372,0 @@ public class POP3SClient extends POP3Client {
-     *
@@ -349 +376,2 @@ public class POP3SClient extends POP3Client {
-    public void setKeyManager(final KeyManager newKeyManager) {
+    public void setKeyManager(final KeyManager newKeyManager)
+    {
@@ -355 +382,0 @@ public class POP3SClient extends POP3Client {
-     *
@@ -359 +386,2 @@ public class POP3SClient extends POP3Client {
-    public void setTrustManager(final TrustManager newTrustManager) {
+    public void setTrustManager(final TrustManager newTrustManager)
+    {
diff --git a/src/main/java/org/apache/commons/net/smtp/AuthenticatingSMTPClient.java b/src/main/java/org/apache/commons/net/smtp/AuthenticatingSMTPClient.java
index 73c34d3c4..7c6409b8c 100644
--- a/src/main/java/org/apache/commons/net/smtp/AuthenticatingSMTPClient.java
+++ b/src/main/java/org/apache/commons/net/smtp/AuthenticatingSMTPClient.java
@@ -32,0 +33 @@ import org.apache.commons.net.util.Base64;
+
@@ -39 +40,2 @@ import org.apache.commons.net.util.Base64;
-public class AuthenticatingSMTPClient extends SMTPSClient {
+public class AuthenticatingSMTPClient extends SMTPSClient
+{
@@ -43 +45,2 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-    public enum AUTH_METHOD {
+    public enum AUTH_METHOD
+    {
@@ -57 +59,0 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-         *
@@ -61 +63,2 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-        public static final String getAuthName(final AUTH_METHOD method) {
+        public static final String getAuthName(final AUTH_METHOD method)
+        {
@@ -82 +85,2 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-     * The default AuthenticatingSMTPClient constructor. Creates a new Authenticating SMTP Client.
+     * The default AuthenticatingSMTPClient constructor.
+     * Creates a new Authenticating SMTP Client.
@@ -84 +88,2 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-    public AuthenticatingSMTPClient() {
+    public AuthenticatingSMTPClient()
+    {
@@ -89 +93,0 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-     *
@@ -91 +95 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-     * @param ctx      A pre-configured SSL Context.
+     * @param ctx A pre-configured SSL Context.
@@ -94,2 +98,3 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-    public AuthenticatingSMTPClient(final boolean implicit, final SSLContext ctx) {
-        super(implicit, ctx);
+    public AuthenticatingSMTPClient(final boolean implicit, final SSLContext ctx)
+    {
+      super(implicit, ctx);
@@ -100 +104,0 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-     *
@@ -109,2 +113 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-     *
-     * @param proto    the protocol.
+     * @param proto the protocol.
@@ -114,2 +117,3 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-    public AuthenticatingSMTPClient(final String proto, final boolean implicit) {
-        super(proto, implicit);
+    public AuthenticatingSMTPClient(final String proto, final boolean implicit)
+    {
+      super(proto, implicit);
@@ -120,2 +124 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-     *
-     * @param proto    the protocol.
+     * @param proto the protocol.
@@ -126,2 +129,3 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-    public AuthenticatingSMTPClient(final String proto, final boolean implicit, final String encoding) {
-        super(proto, implicit, encoding);
+    public AuthenticatingSMTPClient(final String proto, final boolean implicit, final String encoding)
+    {
+      super(proto, implicit, encoding);
@@ -132 +135,0 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-     *
@@ -142 +145,2 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-     * Authenticate to the SMTP server by sending the AUTH command with the selected mechanism, using the given username and the given password.
+     * Authenticate to the SMTP server by sending the AUTH command with the
+     * selected mechanism, using the given username and the given password.
@@ -144,4 +148,6 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-     * @param method   the method to use, one of the {@link AuthenticatingSMTPClient.AUTH_METHOD} enum values
-     * @param username the user name. If the method is XOAUTH/XOAUTH2, then this is used as the plain text oauth protocol parameter string which is
-     *                 Base64-encoded for transmission.
-     * @param password the password for the username. Ignored for XOAUTH/XOAUTH2.
+     * @param method the method to use, one of the {@link AuthenticatingSMTPClient.AUTH_METHOD} enum values
+     * @param username the user name.
+     *        If the method is XOAUTH/XOAUTH2, then this is used as the plain text oauth protocol parameter string
+     *        which is Base64-encoded for transmission.
+     * @param password the password for the username.
+     *        Ignored for XOAUTH/XOAUTH2.
@@ -150,7 +156,13 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
-     * @throws NoSuchAlgorithmException      If the CRAM hash algorithm cannot be instantiated by the Java runtime system.
-     * @throws InvalidKeyException           If the CRAM hash algorithm failed to use the given password.
-     * @throws InvalidKeySpecException       If the CRAM hash algorithm failed to use the given password.
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
+     * @throws NoSuchAlgorithmException If the CRAM hash algorithm
+     *      cannot be instantiated by the Java runtime system.
+     * @throws InvalidKeyException If the CRAM hash algorithm
+     *      failed to use the given password.
+     * @throws InvalidKeySpecException If the CRAM hash algorithm
+     *      failed to use the given password.
@@ -158,3 +170,7 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-    public boolean auth(final AuthenticatingSMTPClient.AUTH_METHOD method, final String username, final String password)
-            throws IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException {
-        if (!SMTPReply.isPositiveIntermediate(sendCommand(SMTPCommand.AUTH, AUTH_METHOD.getAuthName(method)))) {
+    public boolean auth(final AuthenticatingSMTPClient.AUTH_METHOD method,
+                        final String username, final String password)
+                        throws IOException, NoSuchAlgorithmException,
+                        InvalidKeyException, InvalidKeySpecException
+    {
+        if (!SMTPReply.isPositiveIntermediate(sendCommand(SMTPCommand.AUTH,
+                AUTH_METHOD.getAuthName(method)))) {
@@ -164 +180,2 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-        if (method.equals(AUTH_METHOD.PLAIN)) {
+        if (method.equals(AUTH_METHOD.PLAIN))
+        {
@@ -166,2 +183,3 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-            return SMTPReply
-                    .isPositiveCompletion(sendCommand(Base64.encodeBase64StringUnChunked(("\000" + username + "\000" + password).getBytes(getCharset()))));
+            return SMTPReply.isPositiveCompletion(sendCommand(
+                    Base64.encodeBase64StringUnChunked(("\000" + username + "\000" + password).getBytes(getCharset()))
+                ));
@@ -169 +187,2 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-        if (method.equals(AUTH_METHOD.CRAM_MD5)) {
+        if (method.equals(AUTH_METHOD.CRAM_MD5))
+        {
@@ -184 +203,2 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-            return SMTPReply.isPositiveCompletion(sendCommand(Base64.encodeBase64StringUnChunked(toEncode)));
+            return SMTPReply.isPositiveCompletion(sendCommand(
+                Base64.encodeBase64StringUnChunked(toEncode)));
@@ -186 +206,2 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-        if (method.equals(AUTH_METHOD.LOGIN)) {
+        if (method.equals(AUTH_METHOD.LOGIN))
+        {
@@ -189 +210,2 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-            if (!SMTPReply.isPositiveIntermediate(sendCommand(Base64.encodeBase64StringUnChunked(username.getBytes(getCharset()))))) {
+            if (!SMTPReply.isPositiveIntermediate(sendCommand(
+                Base64.encodeBase64StringUnChunked(username.getBytes(getCharset()))))) {
@@ -192 +214,2 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-            return SMTPReply.isPositiveCompletion(sendCommand(Base64.encodeBase64StringUnChunked(password.getBytes(getCharset()))));
+            return SMTPReply.isPositiveCompletion(sendCommand(
+                Base64.encodeBase64StringUnChunked(password.getBytes(getCharset()))));
@@ -194,2 +217,5 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-        if (method.equals(AUTH_METHOD.XOAUTH) || method.equals(AUTH_METHOD.XOAUTH2)) {
-            return SMTPReply.isPositiveIntermediate(sendCommand(Base64.encodeBase64StringUnChunked(username.getBytes(getCharset()))));
+        if (method.equals(AUTH_METHOD.XOAUTH) || method.equals(AUTH_METHOD.XOAUTH2))
+        {
+            return SMTPReply.isPositiveIntermediate(sendCommand(
+                    Base64.encodeBase64StringUnChunked(username.getBytes(getCharset()))
+            ));
@@ -199,0 +226 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
+
@@ -201,3 +228,3 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-     * Converts the given byte array to a String containing the hex values of the bytes. For example, the byte 'A' will be converted to '41', because this is
-     * the ASCII code (and the byte value) of the capital letter 'A'.
-     *
+     * Converts the given byte array to a String containing the hex values of the bytes.
+     * For example, the byte 'A' will be converted to '41', because this is the ASCII code
+     * (and the byte value) of the capital letter 'A'.
@@ -207,4 +234,6 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-    private String convertToHexString(final byte[] a) {
-        final StringBuilder result = new StringBuilder(a.length * 2);
-        for (final byte element : a) {
-            if ((element & 0x0FF) <= 15) {
+    private String convertToHexString(final byte[] a)
+    {
+        final StringBuilder result = new StringBuilder(a.length*2);
+        for (final byte element : a)
+        {
+            if ( (element & 0x0FF) <= 15 ) {
@@ -219 +248,2 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-     * A convenience method to send the ESMTP EHLO command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the ESMTP EHLO command to the server,
+     * receive the reply, and return the reply code.
@@ -221 +250,0 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-     *
@@ -224,4 +253,7 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
@@ -229 +261,2 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-    public int ehlo(final String hostname) throws IOException {
+    public int ehlo(final String hostname) throws IOException
+    {
@@ -234 +267,3 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-     * Login to the ESMTP server by sending the EHLO command with the client hostname as an argument. Before performing any mail commands, you must first login.
+     * Login to the ESMTP server by sending the EHLO command with the
+     * client hostname as an argument.  Before performing any mail commands,
+     * you must first login.
@@ -236 +270,0 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-     *
@@ -238,4 +272,7 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -243 +280,2 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-    public boolean elogin() throws IOException {
+    public boolean elogin() throws IOException
+    {
@@ -258 +296,3 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-     * Login to the ESMTP server by sending the EHLO command with the given hostname as an argument. Before performing any mail commands, you must first login.
+     * Login to the ESMTP server by sending the EHLO command with the
+     * given hostname as an argument.  Before performing any mail commands,
+     * you must first login.
@@ -260,2 +300 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-     *
-     * @param hostname The hostname with which to greet the SMTP server.
+     * @param hostname  The hostname with which to greet the SMTP server.
@@ -263,4 +302,7 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -268 +310,2 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-    public boolean elogin(final String hostname) throws IOException {
+    public boolean elogin(final String hostname) throws IOException
+    {
@@ -274,2 +317,2 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-     *
-     * @return The integer values of the enhanced reply code of the last SMTP reply. First digit is in the first array element.
+     * @return The integer values of the enhanced reply code of the last SMTP reply.
+     *  First digit is in the first array element.
@@ -277 +320,2 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-    public int[] getEnhancedReplyCode() {
+    public int[] getEnhancedReplyCode()
+    {
@@ -279 +323 @@ public class AuthenticatingSMTPClient extends SMTPSClient {
-        final String[] parts = reply.substring(0, reply.indexOf(' ')).split("\\.");
+        final String[] parts = reply.substring(0, reply.indexOf(' ')).split ("\\.");
diff --git a/src/main/java/org/apache/commons/net/smtp/RelayPath.java b/src/main/java/org/apache/commons/net/smtp/RelayPath.java
index b8d3ed714..a58542e4e 100644
--- a/src/main/java/org/apache/commons/net/smtp/RelayPath.java
+++ b/src/main/java/org/apache/commons/net/smtp/RelayPath.java
@@ -24,2 +24,4 @@ import java.util.Vector;
- * A class used to represent forward and reverse relay paths. The SMTP MAIL command requires a reverse relay path while the SMTP RCPT command requires a forward
- * relay path. See RFC 821 for more details. In general, you will not have to deal with relay paths.
+ * A class used to represent forward and reverse relay paths.  The
+ * SMTP MAIL command requires a reverse relay path while the SMTP RCPT
+ * command requires a forward relay path.  See RFC 821 for more details.
+ * In general, you will not have to deal with relay paths.
@@ -30 +32,2 @@ import java.util.Vector;
-public final class RelayPath {
+public final class RelayPath
+{
@@ -35 +38,2 @@ public final class RelayPath {
-     * Create a relay path with the specified email address as the ultimate destination.
+     * Create a relay path with the specified email address as the ultimate
+     * destination.
@@ -37 +40,0 @@ public final class RelayPath {
-     *
@@ -40 +43,2 @@ public final class RelayPath {
-    public RelayPath(final String emailAddress) {
+    public RelayPath(final String emailAddress)
+    {
@@ -46 +50,2 @@ public final class RelayPath {
-     * Add a mail relay host to the relay path. Hosts are added left to right. For example, the following will create the path
+     * Add a mail relay host to the relay path.  Hosts are added left to
+     * right.  For example, the following will create the path
@@ -48 +52,0 @@ public final class RelayPath {
-     *
@@ -55 +58,0 @@ public final class RelayPath {
-     *
@@ -58 +61,2 @@ public final class RelayPath {
-    public void addRelay(final String hostname) {
+    public void addRelay(final String hostname)
+    {
@@ -65 +68,0 @@ public final class RelayPath {
-     *
@@ -69 +72,2 @@ public final class RelayPath {
-    public String toString() {
+    public String toString()
+    {
@@ -77 +81,2 @@ public final class RelayPath {
-        if (hosts.hasMoreElements()) {
+        if (hosts.hasMoreElements())
+        {
@@ -81 +86,2 @@ public final class RelayPath {
-            while (hosts.hasMoreElements()) {
+            while (hosts.hasMoreElements())
+            {
diff --git a/src/main/java/org/apache/commons/net/smtp/SMTP.java b/src/main/java/org/apache/commons/net/smtp/SMTP.java
index 93728b28b..a6d0ce3b5 100644
--- a/src/main/java/org/apache/commons/net/smtp/SMTP.java
+++ b/src/main/java/org/apache/commons/net/smtp/SMTP.java
@@ -34,5 +34,12 @@ import org.apache.commons.net.util.NetConstants;
- * SMTP provides the basic the functionality necessary to implement your own SMTP client. To derive the full benefits of the SMTP class requires some knowledge
- * of the FTP protocol defined in RFC 821. However, there is no reason why you should have to use the SMTP class. The
- * {@link org.apache.commons.net.smtp.SMTPClient} class, derived from SMTP, implements all the functionality required of an SMTP client. The SMTP class is made
- * public to provide access to various SMTP constants and to make it easier for adventurous programmers (or those with special needs) to interact with the SMTP
- * protocol and implement their own clients. A set of methods with names corresponding to the SMTP command names are provided to facilitate this interaction.
+ * SMTP provides the basic the functionality necessary to implement your
+ * own SMTP client.  To derive the full benefits of the SMTP class requires
+ * some knowledge of the FTP protocol defined in RFC 821.  However, there
+ * is no reason why you should have to use the SMTP class.  The
+ * {@link org.apache.commons.net.smtp.SMTPClient} class,
+ * derived from SMTP,
+ * implements all the functionality required of an SMTP client.  The
+ * SMTP class is made public to provide access to various SMTP constants
+ * and to make it easier for adventurous programmers (or those with
+ * special needs) to interact with the SMTP protocol and implement their
+ * own clients.  A set of methods with names corresponding to the SMTP
+ * command names are provided to facilitate this interaction.
@@ -40,9 +47,22 @@ import org.apache.commons.net.util.NetConstants;
- * You should keep in mind that the SMTP server may choose to prematurely close a connection for various reasons. The SMTP class will detect a premature SMTP
- * server connection closing when it receives a {@link org.apache.commons.net.smtp.SMTPReply#SERVICE_NOT_AVAILABLE SMTPReply.SERVICE_NOT_AVAILABLE } response to
- * a command. When that occurs, the SMTP class method encountering that reply will throw an {@link org.apache.commons.net.smtp.SMTPConnectionClosedException} .
- * <code>SMTPConectionClosedException</code> is a subclass of <code> IOException </code> and therefore need not be caught separately, but if you are going to
- * catch it separately, its catch block must appear before the more general <code> IOException </code> catch block. When you encounter an
- * {@link org.apache.commons.net.smtp.SMTPConnectionClosedException} , you must disconnect the connection with
- * {@link org.apache.commons.net.SocketClient#disconnect disconnect() } to properly clean up the system resources used by SMTP. Before disconnecting, you may
- * check the last reply code and text with {@link #getReplyCode getReplyCode }, {@link #getReplyString getReplyString }, and {@link #getReplyStrings
- * getReplyStrings}.
+ * You should keep in mind that the SMTP server may choose to prematurely
+ * close a connection for various reasons.  The SMTP class will detect a
+ * premature SMTP server connection closing when it receives a
+ * {@link org.apache.commons.net.smtp.SMTPReply#SERVICE_NOT_AVAILABLE SMTPReply.SERVICE_NOT_AVAILABLE }
+ *  response to a command.
+ * When that occurs, the SMTP class method encountering that reply will throw
+ * an {@link org.apache.commons.net.smtp.SMTPConnectionClosedException}
+ * .
+ * <code>SMTPConectionClosedException</code>
+ * is a subclass of <code> IOException </code> and therefore need not be
+ * caught separately, but if you are going to catch it separately, its
+ * catch block must appear before the more general <code> IOException </code>
+ * catch block.  When you encounter an
+ * {@link org.apache.commons.net.smtp.SMTPConnectionClosedException}
+ * , you must disconnect the connection with
+ * {@link org.apache.commons.net.SocketClient#disconnect  disconnect() }
+ * to properly clean up the system resources used by SMTP.  Before
+ * disconnecting, you may check the
+ * last reply code and text with
+ * {@link #getReplyCode  getReplyCode },
+ * {@link #getReplyString  getReplyString },
+ * and {@link #getReplyStrings  getReplyStrings}.
@@ -50,4 +70,9 @@ import org.apache.commons.net.util.NetConstants;
- * Rather than list it separately for each method, we mention here that every method communicating with the server and throwing an IOException can also throw a
- * {@link org.apache.commons.net.MalformedServerReplyException} , which is a subclass of IOException. A MalformedServerReplyException will be thrown when the
- * reply received from the server deviates enough from the protocol specification that it cannot be interpreted in a useful manner despite attempts to be as
- * lenient as possible.
+ * Rather than list it separately for each method, we mention here that
+ * every method communicating with the server and throwing an IOException
+ * can also throw a
+ * {@link org.apache.commons.net.MalformedServerReplyException}
+ * , which is a subclass
+ * of IOException.  A MalformedServerReplyException will be thrown when
+ * the reply received from the server deviates enough from the protocol
+ * specification that it cannot be interpreted in a useful manner despite
+ * attempts to be as lenient as possible.
@@ -60 +85,2 @@ import org.apache.commons.net.util.NetConstants;
-public class SMTP extends SocketClient {
+public class SMTP extends SocketClient
+{
@@ -77 +103,2 @@ public class SMTP extends SocketClient {
-     * A ProtocolCommandSupport object used to manage the registering of ProtocolCommandListeners and te firing of ProtocolCommandEvents.
+     * A ProtocolCommandSupport object used to manage the registering of
+     * ProtocolCommandListeners and te firing of ProtocolCommandEvents.
@@ -90,2 +117,3 @@ public class SMTP extends SocketClient {
-     * The default SMTP constructor. Sets the default port to <code>DEFAULT_PORT</code> and initializes internal data structures for saving SMTP reply
-     * information.
+     * The default SMTP constructor.  Sets the default port to
+     * <code>DEFAULT_PORT</code> and initializes internal data structures
+     * for saving SMTP reply information.
@@ -93 +121,2 @@ public class SMTP extends SocketClient {
-    public SMTP() {
+    public SMTP()
+    {
@@ -99 +127,0 @@ public class SMTP extends SocketClient {
-     *
@@ -114 +142,2 @@ public class SMTP extends SocketClient {
-    protected void _connectAction_() throws IOException {
+    protected void _connectAction_() throws IOException
+    {
@@ -116,2 +145,6 @@ public class SMTP extends SocketClient {
-        reader = new CRLFLineReader(new InputStreamReader(_input_, encoding));
-        writer = new BufferedWriter(new OutputStreamWriter(_output_, encoding));
+        reader =
+            new CRLFLineReader(new InputStreamReader(_input_,
+                                                    encoding));
+        writer =
+            new BufferedWriter(new OutputStreamWriter(_output_,
+                                                      encoding));
@@ -122 +155,2 @@ public class SMTP extends SocketClient {
-     * A convenience method to send the SMTP DATA command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the SMTP DATA command to the server,
+     * receive the reply, and return the reply code.
@@ -124 +157,0 @@ public class SMTP extends SocketClient {
-     *
@@ -126,6 +159,10 @@ public class SMTP extends SocketClient {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int data() throws IOException {
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int data() throws IOException
+    {
@@ -136,2 +173,4 @@ public class SMTP extends SocketClient {
-     * Closes the connection to the SMTP server and sets to null some internal data so that the memory may be reclaimed by the garbage collector. The reply text
-     * and code information from the last command is voided so that the memory it used may be reclaimed.
+     * Closes the connection to the SMTP server and sets to null
+     * some internal data so that the memory may be reclaimed by the
+     * garbage collector.  The reply text and code information from the
+     * last command is voided so that the memory it used may be reclaimed.
@@ -139 +177,0 @@ public class SMTP extends SocketClient {
-     *
@@ -143 +181,2 @@ public class SMTP extends SocketClient {
-    public void disconnect() throws IOException {
+    public void disconnect() throws IOException
+    {
@@ -151,0 +191 @@ public class SMTP extends SocketClient {
+
@@ -153 +193,2 @@ public class SMTP extends SocketClient {
-     * A convenience method to send the SMTP VRFY command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the SMTP VRFY command to the server,
+     * receive the reply, and return the reply code.
@@ -155 +195,0 @@ public class SMTP extends SocketClient {
-     *
@@ -158,6 +198,10 @@ public class SMTP extends SocketClient {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int expn(final String name) throws IOException {
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int expn(final String name) throws IOException
+    {
@@ -166,0 +211 @@ public class SMTP extends SocketClient {
+
@@ -174,0 +220 @@ public class SMTP extends SocketClient {
+
@@ -176,3 +222,6 @@ public class SMTP extends SocketClient {
-     * Fetches a reply from the SMTP server and returns the integer reply code. After calling this method, the actual reply text can be accessed from either
-     * calling {@link #getReplyString getReplyString } or {@link #getReplyStrings getReplyStrings }. Only use this method if you are implementing your own SMTP
-     * client or if you need to fetch a secondary response from the SMTP server.
+     * Fetches a reply from the SMTP server and returns the integer reply
+     * code.  After calling this method, the actual reply text can be accessed
+     * from either  calling {@link #getReplyString  getReplyString } or
+     * {@link #getReplyStrings  getReplyStrings }.  Only use this
+     * method if you are implementing your own SMTP client or if you need to
+     * fetch a secondary response from the SMTP server.
@@ -180 +228,0 @@ public class SMTP extends SocketClient {
-     *
@@ -182,6 +230,10 @@ public class SMTP extends SocketClient {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while receiving the server reply.
-     */
-    public int getReply() throws IOException {
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while receiving the
+     *                         server reply.
+     */
+    public int getReply() throws IOException
+    {
@@ -196 +248,2 @@ public class SMTP extends SocketClient {
-            throw new SMTPConnectionClosedException("Connection closed without indication.");
+            throw new SMTPConnectionClosedException(
+                "Connection closed without indication.");
@@ -203 +256,2 @@ public class SMTP extends SocketClient {
-            throw new MalformedServerReplyException("Truncated server reply: " + line);
+            throw new MalformedServerReplyException(
+                "Truncated server reply: " + line);
@@ -206 +260,2 @@ public class SMTP extends SocketClient {
-        try {
+        try
+        {
@@ -209,2 +264,5 @@ public class SMTP extends SocketClient {
-        } catch (final NumberFormatException e) {
-            throw new MalformedServerReplyException("Could not parse response code.\nServer Reply: " + line);
+        }
+        catch (final NumberFormatException e)
+        {
+            throw new MalformedServerReplyException(
+                "Could not parse response code.\nServer Reply: " + line);
@@ -216,2 +274,4 @@ public class SMTP extends SocketClient {
-        if (length > 3 && line.charAt(3) == '-') {
-            do {
+        if (length > 3 && line.charAt(3) == '-')
+        {
+            do
+            {
@@ -221 +281,2 @@ public class SMTP extends SocketClient {
-                    throw new SMTPConnectionClosedException("Connection closed without indication.");
+                    throw new SMTPConnectionClosedException(
+                        "Connection closed without indication.");
@@ -229 +290,3 @@ public class SMTP extends SocketClient {
-            } while (!(line.length() >= 4 && line.charAt(3) != '-' && Character.isDigit(line.charAt(0))));
+            }
+            while (!(line.length() >= 4 && line.charAt(3) != '-' &&
+                     Character.isDigit(line.charAt(0))));
@@ -238 +301,2 @@ public class SMTP extends SocketClient {
-            throw new SMTPConnectionClosedException("SMTP response 421 received.  Server closed connection.");
+            throw new SMTPConnectionClosedException(
+                "SMTP response 421 received.  Server closed connection.");
@@ -242,0 +307 @@ public class SMTP extends SocketClient {
+
@@ -244,2 +309,4 @@ public class SMTP extends SocketClient {
-     * Returns the integer value of the reply code of the last SMTP reply. You will usually only use this method after you connect to the SMTP server to check
-     * that the connection was successful since <code> connect </code> is of type void.
+     * Returns the integer value of the reply code of the last SMTP reply.
+     * You will usually only use this method after you connect to the
+     * SMTP server to check that the connection was successful since
+     * <code> connect </code> is of type void.
@@ -247 +313,0 @@ public class SMTP extends SocketClient {
-     *
@@ -250 +316,2 @@ public class SMTP extends SocketClient {
-    public int getReplyCode() {
+    public int getReplyCode()
+    {
@@ -253,0 +321 @@ public class SMTP extends SocketClient {
+
@@ -255 +323,3 @@ public class SMTP extends SocketClient {
-     * Returns the entire text of the last SMTP server response exactly as it was received, including all end of line markers in NETASCII format.
+     * Returns the entire text of the last SMTP server response exactly
+     * as it was received, including all end of line markers in NETASCII
+     * format.
@@ -257 +326,0 @@ public class SMTP extends SocketClient {
-     *
@@ -260 +329,2 @@ public class SMTP extends SocketClient {
-    public String getReplyString() {
+    public String getReplyString()
+    {
@@ -269 +339,2 @@ public class SMTP extends SocketClient {
-        for (final String line : replyLines) {
+        for (final String line : replyLines)
+        {
@@ -279,0 +351 @@ public class SMTP extends SocketClient {
+
@@ -281,2 +353,3 @@ public class SMTP extends SocketClient {
-     * Returns the lines of text from the last SMTP server response as an array of strings, one entry per line. The end of line markers of each are stripped
-     * from each line.
+     * Returns the lines of text from the last SMTP server response as an array
+     * of strings, one entry per line.  The end of line markers of each are
+     * stripped from each line.
@@ -284 +356,0 @@ public class SMTP extends SocketClient {
-     *
@@ -287 +359,2 @@ public class SMTP extends SocketClient {
-    public String[] getReplyStrings() {
+    public String[] getReplyStrings()
+    {
@@ -292 +365,2 @@ public class SMTP extends SocketClient {
-     * A convenience method to send the SMTP HELO command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the SMTP HELO command to the server,
+     * receive the reply, and return the reply code.
@@ -294 +367,0 @@ public class SMTP extends SocketClient {
-     *
@@ -297,6 +370,10 @@ public class SMTP extends SocketClient {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int helo(final String hostname) throws IOException {
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int helo(final String hostname) throws IOException
+    {
@@ -305,0 +383 @@ public class SMTP extends SocketClient {
+
@@ -307 +385,2 @@ public class SMTP extends SocketClient {
-     * A convenience method to send the SMTP HELP command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the SMTP HELP command to the server,
+     * receive the reply, and return the reply code.
@@ -309 +387,0 @@ public class SMTP extends SocketClient {
-     *
@@ -311,6 +389,10 @@ public class SMTP extends SocketClient {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int help() throws IOException {
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int help() throws IOException
+    {
@@ -321 +403,2 @@ public class SMTP extends SocketClient {
-     * A convenience method to send the SMTP HELP command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the SMTP HELP command to the server,
+     * receive the reply, and return the reply code.
@@ -323,2 +406 @@ public class SMTP extends SocketClient {
-     *
-     * @param command The command name on which to request help.
+     * @param command  The command name on which to request help.
@@ -326,6 +408,10 @@ public class SMTP extends SocketClient {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int help(final String command) throws IOException {
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int help(final String command) throws IOException
+    {
@@ -334,0 +421 @@ public class SMTP extends SocketClient {
+
@@ -336 +423,2 @@ public class SMTP extends SocketClient {
-     * A convenience method to send the SMTP MAIL command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the SMTP MAIL command to the server,
+     * receive the reply, and return the reply code.
@@ -338 +425,0 @@ public class SMTP extends SocketClient {
-     *
@@ -341,6 +428,10 @@ public class SMTP extends SocketClient {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int mail(final String reversePath) throws IOException {
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int mail(final String reversePath) throws IOException
+    {
@@ -349,0 +441 @@ public class SMTP extends SocketClient {
+
@@ -351 +443,2 @@ public class SMTP extends SocketClient {
-     * A convenience method to send the SMTP NOOP command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the SMTP NOOP command to the server,
+     * receive the reply, and return the reply code.
@@ -353 +445,0 @@ public class SMTP extends SocketClient {
-     *
@@ -355,6 +447,10 @@ public class SMTP extends SocketClient {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int noop() throws IOException {
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int noop() throws IOException
+    {
@@ -363,0 +460 @@ public class SMTP extends SocketClient {
+
@@ -365 +462,2 @@ public class SMTP extends SocketClient {
-     * A convenience method to send the SMTP QUIT command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the SMTP QUIT command to the server,
+     * receive the reply, and return the reply code.
@@ -367 +464,0 @@ public class SMTP extends SocketClient {
-     *
@@ -369,6 +466,10 @@ public class SMTP extends SocketClient {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int quit() throws IOException {
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int quit() throws IOException
+    {
@@ -377,0 +479 @@ public class SMTP extends SocketClient {
+
@@ -379 +481,2 @@ public class SMTP extends SocketClient {
-     * A convenience method to send the SMTP RCPT command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the SMTP RCPT command to the server,
+     * receive the reply, and return the reply code.
@@ -381 +483,0 @@ public class SMTP extends SocketClient {
-     *
@@ -384,6 +486,10 @@ public class SMTP extends SocketClient {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int rcpt(final String forwardPath) throws IOException {
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int rcpt(final String forwardPath) throws IOException
+    {
@@ -392,0 +499 @@ public class SMTP extends SocketClient {
+
@@ -396,3 +503,2 @@ public class SMTP extends SocketClient {
-     * Delegates this incorrectly named method - removeProtocolCommandistener (note the missing "L")- to the correct method
-     * {@link SocketClient#removeProtocolCommandListener}
-     *
+     * Delegates this incorrectly named method - removeProtocolCommandistener (note the missing "L")- to
+     * the correct method {@link SocketClient#removeProtocolCommandListener}
@@ -401 +507 @@ public class SMTP extends SocketClient {
-    public void removeProtocolCommandistener(final org.apache.commons.net.ProtocolCommandListener listener) {
+    public void removeProtocolCommandistener(final org.apache.commons.net.ProtocolCommandListener listener){
@@ -404,0 +511 @@ public class SMTP extends SocketClient {
+
@@ -406 +513,2 @@ public class SMTP extends SocketClient {
-     * A convenience method to send the SMTP RSET command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the SMTP RSET command to the server,
+     * receive the reply, and return the reply code.
@@ -408 +515,0 @@ public class SMTP extends SocketClient {
-     *
@@ -410,6 +517,10 @@ public class SMTP extends SocketClient {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int rset() throws IOException {
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int rset() throws IOException
+    {
@@ -418,0 +530 @@ public class SMTP extends SocketClient {
+
@@ -420 +532,2 @@ public class SMTP extends SocketClient {
-     * A convenience method to send the SMTP SAML command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the SMTP SAML command to the server,
+     * receive the reply, and return the reply code.
@@ -422 +534,0 @@ public class SMTP extends SocketClient {
-     *
@@ -425,6 +537,10 @@ public class SMTP extends SocketClient {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int saml(final String reversePath) throws IOException {
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int saml(final String reversePath) throws IOException
+    {
@@ -433,0 +550 @@ public class SMTP extends SocketClient {
+
@@ -435 +552,2 @@ public class SMTP extends SocketClient {
-     * A convenience method to send the SMTP SEND command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the SMTP SEND command to the server,
+     * receive the reply, and return the reply code.
@@ -437 +554,0 @@ public class SMTP extends SocketClient {
-     *
@@ -440,6 +557,10 @@ public class SMTP extends SocketClient {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int send(final String reversePath) throws IOException {
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int send(final String reversePath) throws IOException
+    {
@@ -448,0 +570 @@ public class SMTP extends SocketClient {
+
@@ -450,2 +572,5 @@ public class SMTP extends SocketClient {
-     * Sends an SMTP command with no arguments to the server, waits for a reply and returns the numerical response code. After invocation, for more detailed
-     * information, the actual reply text can be accessed by calling {@link #getReplyString getReplyString } or {@link #getReplyStrings getReplyStrings }.
+     * Sends an SMTP command with no arguments to the server, waits for a
+     * reply and returns the numerical response code.  After invocation, for
+     * more detailed information, the actual reply text can be accessed by
+     * calling {@link #getReplyString  getReplyString } or
+     * {@link #getReplyStrings  getReplyStrings }.
@@ -453,9 +578,14 @@ public class SMTP extends SocketClient {
-     *
-     * @param command The SMTPCommand constant corresponding to the SMTP command to send.
-     * @return The integer value of the SMTP reply code returned by the server in response to the command.
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int sendCommand(final int command) throws IOException {
+     * @param command  The SMTPCommand constant corresponding to the SMTP command
+     *                 to send.
+     * @return The integer value of the SMTP reply code returned by the server
+     *         in response to the command.
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int sendCommand(final int command) throws IOException
+    {
@@ -464,0 +595 @@ public class SMTP extends SocketClient {
+
@@ -466,2 +597,5 @@ public class SMTP extends SocketClient {
-     * Sends an SMTP command to the server, waits for a reply and returns the numerical response code. After invocation, for more detailed information, the
-     * actual reply text can be accessed by calling {@link #getReplyString getReplyString } or {@link #getReplyStrings getReplyStrings }.
+     * Sends an SMTP command to the server, waits for a reply and returns the
+     * numerical response code.  After invocation, for more detailed
+     * information, the actual reply text can be accessed by calling
+     * {@link #getReplyString  getReplyString } or
+     * {@link #getReplyStrings  getReplyStrings }.
@@ -469,10 +603,16 @@ public class SMTP extends SocketClient {
-     *
-     * @param command The SMTPCommand constant corresponding to the SMTP command to send.
-     * @param args    The arguments to the SMTP command. If this parameter is set to null, then the command is sent with no argument.
-     * @return The integer value of the SMTP reply code returned by the server in response to the command.
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int sendCommand(final int command, final String args) throws IOException {
+     * @param command  The SMTPCommand constant corresponding to the SMTP command
+     *                 to send.
+     * @param args The arguments to the SMTP command.  If this parameter is
+     *             set to null, then the command is sent with no argument.
+     * @return The integer value of the SMTP reply code returned by the server
+     *         in response to the command.
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int sendCommand(final int command, final String args) throws IOException
+    {
@@ -484,2 +624,2 @@ public class SMTP extends SocketClient {
-     * @param command      the command to send (as an int defined in {@link SMPTCommand})
-     * @param args         the command arguments, may be {@code null}
+     * @param command the command to send (as an int defined in {@link SMPTCommand})
+     * @param args the command arguments, may be {@code null}
@@ -490 +630,3 @@ public class SMTP extends SocketClient {
-    private int sendCommand(final int command, final String args, final boolean includeSpace) throws IOException {
+    private int sendCommand(final int command, final String args, final boolean includeSpace)
+    throws IOException
+    {
@@ -495,2 +637,5 @@ public class SMTP extends SocketClient {
-     * Sends an SMTP command with no arguments to the server, waits for a reply and returns the numerical response code. After invocation, for more detailed
-     * information, the actual reply text can be accessed by calling {@link #getReplyString getReplyString } or {@link #getReplyStrings getReplyStrings }.
+     * Sends an SMTP command with no arguments to the server, waits for a
+     * reply and returns the numerical response code.  After invocation, for
+     * more detailed information, the actual reply text can be accessed by
+     * calling {@link #getReplyString  getReplyString } or
+     * {@link #getReplyStrings  getReplyStrings }.
@@ -498,9 +643,13 @@ public class SMTP extends SocketClient {
-     *
-     * @param command The text representation of the SMTP command to send.
-     * @return The integer value of the SMTP reply code returned by the server in response to the command.
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int sendCommand(final String command) throws IOException {
+     * @param command  The text representation of the  SMTP command to send.
+     * @return The integer value of the SMTP reply code returned by the server
+     *         in response to the command.
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int sendCommand(final String command) throws IOException
+    {
@@ -511,2 +660,5 @@ public class SMTP extends SocketClient {
-     * Sends an SMTP command to the server, waits for a reply and returns the numerical response code. After invocation, for more detailed information, the
-     * actual reply text can be accessed by calling {@link #getReplyString getReplyString } or {@link #getReplyStrings getReplyStrings }.
+     * Sends an SMTP command to the server, waits for a reply and returns the
+     * numerical response code.  After invocation, for more detailed
+     * information, the actual reply text can be accessed by calling
+     * {@link #getReplyString  getReplyString } or
+     * {@link #getReplyStrings  getReplyStrings }.
@@ -514,10 +666,15 @@ public class SMTP extends SocketClient {
-     *
-     * @param command The text representation of the SMTP command to send.
-     * @param args    The arguments to the SMTP command. If this parameter is set to null, then the command is sent with no argument.
-     * @return The integer value of the SMTP reply code returned by the server in response to the command.
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int sendCommand(final String command, final String args) throws IOException {
+     * @param command  The text representation of the  SMTP command to send.
+     * @param args The arguments to the SMTP command.  If this parameter is
+     *             set to null, then the command is sent with no argument.
+     * @return The integer value of the SMTP reply code returned by the server
+     *         in response to the command.
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int sendCommand(final String command, final String args) throws IOException
+    {
@@ -526,0 +684 @@ public class SMTP extends SocketClient {
+
@@ -530,2 +688,2 @@ public class SMTP extends SocketClient {
-     * @param command      the command to send (as a plain String)
-     * @param args         the command arguments, may be {@code null}
+     * @param command the command to send (as a plain String)
+     * @param args the command arguments, may be {@code null}
@@ -536 +694,3 @@ public class SMTP extends SocketClient {
-    private int sendCommand(final String command, final String args, final boolean includeSpace) throws IOException {
+    private int sendCommand(final String command, final String args, final boolean includeSpace)
+    throws IOException
+    {
@@ -540 +700,2 @@ public class SMTP extends SocketClient {
-        if (args != null) {
+        if (args != null)
+        {
@@ -557,0 +719 @@ public class SMTP extends SocketClient {
+
@@ -559 +721,2 @@ public class SMTP extends SocketClient {
-     * A convenience method to send the SMTP SOML command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the SMTP SOML command to the server,
+     * receive the reply, and return the reply code.
@@ -561 +723,0 @@ public class SMTP extends SocketClient {
-     *
@@ -564,6 +726,10 @@ public class SMTP extends SocketClient {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int soml(final String reversePath) throws IOException {
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int soml(final String reversePath) throws IOException
+    {
@@ -574 +740,2 @@ public class SMTP extends SocketClient {
-     * A convenience method to send the SMTP TURN command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the SMTP TURN command to the server,
+     * receive the reply, and return the reply code.
@@ -576 +742,0 @@ public class SMTP extends SocketClient {
-     *
@@ -578,6 +744,10 @@ public class SMTP extends SocketClient {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int turn() throws IOException {
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int turn() throws IOException
+    {
@@ -588 +758,2 @@ public class SMTP extends SocketClient {
-     * A convenience method to send the SMTP VRFY command to the server, receive the reply, and return the reply code.
+     * A convenience method to send the SMTP VRFY command to the server,
+     * receive the reply, and return the reply code.
@@ -590 +760,0 @@ public class SMTP extends SocketClient {
-     *
@@ -593,6 +763,10 @@ public class SMTP extends SocketClient {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending the command or receiving the server reply.
-     */
-    public int vrfy(final String user) throws IOException {
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending the
+     *      command or receiving the server reply.
+     */
+    public int vrfy(final String user) throws IOException
+    {
diff --git a/src/main/java/org/apache/commons/net/smtp/SMTPClient.java b/src/main/java/org/apache/commons/net/smtp/SMTPClient.java
index e213d74eb..3bd6d8c7e 100644
--- a/src/main/java/org/apache/commons/net/smtp/SMTPClient.java
+++ b/src/main/java/org/apache/commons/net/smtp/SMTPClient.java
@@ -27,6 +27,12 @@ import org.apache.commons.net.io.DotTerminatedMessageWriter;
- * SMTPClient encapsulates all the functionality necessary to send files through an SMTP server. This class takes care of all low level details of interacting
- * with an SMTP server and provides a convenient higher level interface. As with all classes derived from {@link org.apache.commons.net.SocketClient}, you must
- * first connect to the server with {@link org.apache.commons.net.SocketClient#connect connect } before doing anything, and finally
- * {@link org.apache.commons.net.SocketClient#disconnect disconnect } after you're completely finished interacting with the server. Then you need to check the
- * SMTP reply code to see if the connection was successful. For example:
- *
+ * SMTPClient encapsulates all the functionality necessary to send files
+ * through an SMTP server.  This class takes care of all
+ * low level details of interacting with an SMTP server and provides
+ * a convenient higher level interface.  As with all classes derived
+ * from {@link org.apache.commons.net.SocketClient},
+ * you must first connect to the server with
+ * {@link org.apache.commons.net.SocketClient#connect  connect }
+ * before doing anything, and finally
+ * {@link org.apache.commons.net.SocketClient#disconnect  disconnect }
+ * after you're completely finished interacting with the server.
+ * Then you need to check the SMTP reply code to see if the connection
+ * was successful.  For example:
@@ -65,5 +71,12 @@ import org.apache.commons.net.io.DotTerminatedMessageWriter;
- * Immediately after connecting is the only real time you need to check the reply code (because connect is of type void). The convention for all the SMTP
- * command methods in SMTPClient is such that they either return a boolean value or some other value. The boolean methods return true on a successful completion
- * reply from the SMTP server and false on a reply resulting in an error condition or failure. The methods returning a value other than boolean return a value
- * containing the higher level data produced by the SMTP command, or null if a reply resulted in an error condition or failure. If you want to access the exact
- * SMTP reply code causing a success or failure, you must call {@link org.apache.commons.net.smtp.SMTP#getReplyCode getReplyCode } after a success or failure.
+ * Immediately after connecting is the only real time you need to check the
+ * reply code (because connect is of type void).  The convention for all the
+ * SMTP command methods in SMTPClient is such that they either return a
+ * boolean value or some other value.
+ * The boolean methods return true on a successful completion reply from
+ * the SMTP server and false on a reply resulting in an error condition or
+ * failure.  The methods returning a value other than boolean return a value
+ * containing the higher level data produced by the SMTP command, or null if a
+ * reply resulted in an error condition or failure.  If you want to access
+ * the exact SMTP reply code causing a success or failure, you must call
+ * {@link org.apache.commons.net.smtp.SMTP#getReplyCode  getReplyCode } after
+ * a success or failure.
@@ -71,8 +84,21 @@ import org.apache.commons.net.io.DotTerminatedMessageWriter;
- * You should keep in mind that the SMTP server may choose to prematurely close a connection for various reasons. The SMTPClient class will detect a premature
- * SMTP server connection closing when it receives a {@link org.apache.commons.net.smtp.SMTPReply#SERVICE_NOT_AVAILABLE SMTPReply.SERVICE_NOT_AVAILABLE }
- * response to a command. When that occurs, the method encountering that reply will throw an {@link org.apache.commons.net.smtp.SMTPConnectionClosedException} .
- * <code>SMTPConectionClosedException</code> is a subclass of <code> IOException </code> and therefore need not be caught separately, but if you are going to
- * catch it separately, its catch block must appear before the more general <code> IOException </code> catch block. When you encounter an
- * {@link org.apache.commons.net.smtp.SMTPConnectionClosedException} , you must disconnect the connection with {@link #disconnect disconnect() } to properly
- * clean up the system resources used by SMTPClient. Before disconnecting, you may check the last reply code and text with
- * {@link org.apache.commons.net.smtp.SMTP#getReplyCode getReplyCode }, {@link org.apache.commons.net.smtp.SMTP#getReplyString getReplyString }, and
+ * You should keep in mind that the SMTP server may choose to prematurely
+ * close a connection for various reasons.  The SMTPClient class will detect a
+ * premature SMTP server connection closing when it receives a
+ * {@link org.apache.commons.net.smtp.SMTPReply#SERVICE_NOT_AVAILABLE SMTPReply.SERVICE_NOT_AVAILABLE }
+ *  response to a command.
+ * When that occurs, the method encountering that reply will throw
+ * an {@link org.apache.commons.net.smtp.SMTPConnectionClosedException}
+ * .
+ * <code>SMTPConectionClosedException</code>
+ * is a subclass of <code> IOException </code> and therefore need not be
+ * caught separately, but if you are going to catch it separately, its
+ * catch block must appear before the more general <code> IOException </code>
+ * catch block.  When you encounter an
+ * {@link org.apache.commons.net.smtp.SMTPConnectionClosedException}
+ * , you must disconnect the connection with
+ * {@link #disconnect  disconnect() } to properly clean up the
+ * system resources used by SMTPClient.  Before disconnecting, you may check
+ * the last reply code and text with
+ * {@link org.apache.commons.net.smtp.SMTP#getReplyCode  getReplyCode },
+ * {@link org.apache.commons.net.smtp.SMTP#getReplyString  getReplyString },
+ * and
@@ -81,4 +107,9 @@ import org.apache.commons.net.io.DotTerminatedMessageWriter;
- * Rather than list it separately for each method, we mention here that every method communicating with the server and throwing an IOException can also throw a
- * {@link org.apache.commons.net.MalformedServerReplyException} , which is a subclass of IOException. A MalformedServerReplyException will be thrown when the
- * reply received from the server deviates enough from the protocol specification that it cannot be interpreted in a useful manner despite attempts to be as
- * lenient as possible.
+ * Rather than list it separately for each method, we mention here that
+ * every method communicating with the server and throwing an IOException
+ * can also throw a
+ * {@link org.apache.commons.net.MalformedServerReplyException}
+ * , which is a subclass
+ * of IOException.  A MalformedServerReplyException will be thrown when
+ * the reply received from the server deviates enough from the protocol
+ * specification that it cannot be interpreted in a useful manner despite
+ * attempts to be as lenient as possible.
@@ -93 +124,2 @@ import org.apache.commons.net.io.DotTerminatedMessageWriter;
-public class SMTPClient extends SMTP {
+public class SMTPClient extends SMTP
+{
@@ -96 +128 @@ public class SMTPClient extends SMTP {
-     * Default SMTPClient constructor. Creates a new SMTPClient instance.
+     * Default SMTPClient constructor.  Creates a new SMTPClient instance.
@@ -98,2 +130 @@ public class SMTPClient extends SMTP {
-    public SMTPClient() {
-    }
+    public SMTPClient() {  }
@@ -103 +133,0 @@ public class SMTPClient extends SMTP {
-     *
@@ -110,0 +141 @@ public class SMTPClient extends SMTP {
+
@@ -112,2 +143,4 @@ public class SMTPClient extends SMTP {
-     * Add a recipient for a message using the SMTP RCPT command, specifying a forward relay path. The sender must be set first before any recipients may be
-     * specified, otherwise the mail server will reject your commands.
+     * Add a recipient for a message using the SMTP RCPT command, specifying
+     * a forward relay path.  The sender must be set first before any
+     * recipients may be specified, otherwise the mail server will reject
+     * your commands.
@@ -115,2 +148 @@ public class SMTPClient extends SMTP {
-     *
-     * @param path The forward relay path pointing to the recipient.
+     * @param path  The forward relay path pointing to the recipient.
@@ -118,4 +150,7 @@ public class SMTPClient extends SMTP {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -123 +158,2 @@ public class SMTPClient extends SMTP {
-    public boolean addRecipient(final RelayPath path) throws IOException {
+    public boolean addRecipient(final RelayPath path) throws IOException
+    {
@@ -126,0 +163 @@ public class SMTPClient extends SMTP {
+
@@ -128,2 +165,4 @@ public class SMTPClient extends SMTP {
-     * Add a recipient for a message using the SMTP RCPT command, the recipient's email address. The sender must be set first before any recipients may be
-     * specified, otherwise the mail server will reject your commands.
+     * Add a recipient for a message using the SMTP RCPT command, the
+     * recipient's email address.  The sender must be set first before any
+     * recipients may be specified, otherwise the mail server will reject
+     * your commands.
@@ -131,2 +170 @@ public class SMTPClient extends SMTP {
-     *
-     * @param address The recipient's email address.
+     * @param address  The recipient's email address.
@@ -134,4 +172,7 @@ public class SMTPClient extends SMTP {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -139 +180,2 @@ public class SMTPClient extends SMTP {
-    public boolean addRecipient(final String address) throws IOException {
+    public boolean addRecipient(final String address) throws IOException
+    {
@@ -142,0 +185 @@ public class SMTPClient extends SMTP {
+
@@ -144,3 +187,7 @@ public class SMTPClient extends SMTP {
-     * At least one SMTPClient method ({@link #sendMessageData sendMessageData }) does not complete the entire sequence of SMTP commands to complete a
-     * transaction. These types of commands require some action by the programmer after the reception of a positive intermediate command. After the programmer's
-     * code completes its actions, it must call this method to receive the completion reply from the server and verify the success of the entire transaction.
+     * At least one SMTPClient method ({@link #sendMessageData  sendMessageData })
+     * does not complete the entire sequence of SMTP commands to complete a
+     * transaction.  These types of commands require some action by the
+     * programmer after the reception of a positive intermediate command.
+     * After the programmer's code completes its actions, it must call this
+     * method to receive the completion reply from the server and verify the
+     * success of the entire transaction.
@@ -149 +195,0 @@ public class SMTPClient extends SMTP {
-     *
@@ -152,3 +198,4 @@ public class SMTPClient extends SMTP {
-     * if (writer == null) // failure
-     *     return false;
-     * header = new SimpleSMTPHeader("foobar@foo.com", "foo@foobar.com", "Re: Foo");
+     * if(writer == null) // failure
+     *   return false;
+     * header =
+     *  new SimpleSMTPHeader("foobar@foo.com", "foo@foobar.com", "Re: Foo");
@@ -158,2 +205,2 @@ public class SMTPClient extends SMTP {
-     * if (!client.completePendingCommand()) // failure
-     *     return false;
+     * if(!client.completePendingCommand()) // failure
+     *   return false;
@@ -162 +208,0 @@ public class SMTPClient extends SMTP {
-     *
@@ -164,4 +210,7 @@ public class SMTPClient extends SMTP {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -169 +218,2 @@ public class SMTPClient extends SMTP {
-    public boolean completePendingCommand() throws IOException {
+    public boolean completePendingCommand() throws IOException
+    {
@@ -172,0 +223 @@ public class SMTPClient extends SMTP {
+
@@ -174 +225,2 @@ public class SMTPClient extends SMTP {
-     * Fetches the system help information from the server and returns the full string.
+     * Fetches the system help information from the server and returns the
+     * full string.
@@ -176,6 +228,9 @@ public class SMTPClient extends SMTP {
-     *
-     * @return The system help string obtained from the server. null if the information could not be obtained.
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @return The system help string obtained from the server.  null if the
+     *       information could not be obtained.
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *  command to the server or receiving a reply from the server.
@@ -183 +238,2 @@ public class SMTPClient extends SMTP {
-    public String listHelp() throws IOException {
+    public String listHelp() throws IOException
+    {
@@ -189,0 +246 @@ public class SMTPClient extends SMTP {
+
@@ -191 +248,2 @@ public class SMTPClient extends SMTP {
-     * Fetches the help information for a given command from the server and returns the full string.
+     * Fetches the help information for a given command from the server and
+     * returns the full string.
@@ -193 +250,0 @@ public class SMTPClient extends SMTP {
-     *
@@ -195,5 +252,9 @@ public class SMTPClient extends SMTP {
-     * @return The command help string obtained from the server. null if the information could not be obtained.
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @return The command help string obtained from the server.  null if the
+     *       information could not be obtained.
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *  command to the server or receiving a reply from the server.
@@ -201 +262,2 @@ public class SMTPClient extends SMTP {
-    public String listHelp(final String command) throws IOException {
+    public String listHelp(final String command) throws IOException
+    {
@@ -207,0 +270 @@ public class SMTPClient extends SMTP {
+
@@ -209 +272,3 @@ public class SMTPClient extends SMTP {
-     * Login to the SMTP server by sending the HELO command with the client hostname as an argument. Before performing any mail commands, you must first login.
+     * Login to the SMTP server by sending the HELO command with the
+     * client hostname as an argument.  Before performing any mail commands,
+     * you must first login.
@@ -211 +275,0 @@ public class SMTPClient extends SMTP {
-     *
@@ -213,4 +277,7 @@ public class SMTPClient extends SMTP {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -218 +285,2 @@ public class SMTPClient extends SMTP {
-    public boolean login() throws IOException {
+    public boolean login() throws IOException
+    {
@@ -231,0 +300 @@ public class SMTPClient extends SMTP {
+
@@ -233 +302,3 @@ public class SMTPClient extends SMTP {
-     * Login to the SMTP server by sending the HELO command with the given hostname as an argument. Before performing any mail commands, you must first login.
+     * Login to the SMTP server by sending the HELO command with the
+     * given hostname as an argument.  Before performing any mail commands,
+     * you must first login.
@@ -235,2 +306 @@ public class SMTPClient extends SMTP {
-     *
-     * @param hostname The hostname with which to greet the SMTP server.
+     * @param hostname  The hostname with which to greet the SMTP server.
@@ -238,4 +308,7 @@ public class SMTPClient extends SMTP {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -243 +316,2 @@ public class SMTPClient extends SMTP {
-    public boolean login(final String hostname) throws IOException {
+    public boolean login(final String hostname) throws IOException
+    {
@@ -246,0 +321,2 @@ public class SMTPClient extends SMTP {
+
+
@@ -250 +325,0 @@ public class SMTPClient extends SMTP {
-     *
@@ -252,4 +327,7 @@ public class SMTPClient extends SMTP {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -257 +335,2 @@ public class SMTPClient extends SMTP {
-    public boolean logout() throws IOException {
+    public boolean logout() throws IOException
+    {
@@ -260,0 +340 @@ public class SMTPClient extends SMTP {
+
@@ -262 +342,2 @@ public class SMTPClient extends SMTP {
-     * Aborts the current mail transaction, resetting all server stored sender, recipient, and mail data, cleaing all buffers and tables.
+     * Aborts the current mail transaction, resetting all server stored
+     * sender, recipient, and mail data, cleaing all buffers and tables.
@@ -264 +344,0 @@ public class SMTPClient extends SMTP {
-     *
@@ -266,4 +346,7 @@ public class SMTPClient extends SMTP {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -271 +354,2 @@ public class SMTPClient extends SMTP {
-    public boolean reset() throws IOException {
+    public boolean reset() throws IOException
+    {
@@ -274,0 +359 @@ public class SMTPClient extends SMTP {
+
@@ -276,2 +361,4 @@ public class SMTPClient extends SMTP {
-     * Send the SMTP DATA command in preparation to send an email message. This method returns a DotTerminatedMessageWriter instance to which the message can be
-     * written. Null is returned if the DATA command fails.
+     * Send the SMTP DATA command in preparation to send an email message.
+     * This method returns a DotTerminatedMessageWriter instance to which
+     * the message can be written.  Null is returned if the DATA command
+     * fails.
@@ -279,4 +366,7 @@ public class SMTPClient extends SMTP {
-     * You must not issue any commands to the SMTP server (i.e., call any (other methods) until you finish writing to the returned Writer instance and close it.
-     * The SMTP protocol uses the same stream for issuing commands as it does for returning results. Therefore the returned Writer actually writes directly to
-     * the SMTP connection. After you close the writer, you can execute new commands. If you do not follow these requirements your program will not work
-     * properly.
+     * You must not issue any commands to the SMTP server (i.e., call any
+     * (other methods) until you finish writing to the returned Writer
+     * instance and close it.  The SMTP protocol uses the same stream for
+     * issuing commands as it does for returning results.  Therefore the
+     * returned Writer actually writes directly to the SMTP connection.
+     * After you close the writer, you can execute new commands.  If you
+     * do not follow these requirements your program will not work properly.
@@ -284,4 +374,9 @@ public class SMTPClient extends SMTP {
-     * You can use the provided {@link org.apache.commons.net.smtp.SimpleSMTPHeader} class to construct a bare minimum header. To construct more complicated
-     * headers you should refer to RFC 5322. When the Java Mail API is finalized, you will be able to use it to compose fully compliant Internet text messages.
-     * The DotTerminatedMessageWriter takes care of doubling line-leading dots and ending the message with a single dot upon closing, so all you have to worry
-     * about is writing the header and the message.
+     * You can use the provided
+     * {@link org.apache.commons.net.smtp.SimpleSMTPHeader}
+     * class to construct a bare minimum header.
+     * To construct more complicated headers you should
+     * refer to RFC 5322.  When the Java Mail API is finalized, you will be
+     * able to use it to compose fully compliant Internet text messages.
+     * The DotTerminatedMessageWriter takes care of doubling line-leading
+     * dots and ending the message with a single dot upon closing, so all
+     * you have to worry about is writing the header and the message.
@@ -289,2 +384,4 @@ public class SMTPClient extends SMTP {
-     * Upon closing the returned Writer, you need to call {@link #completePendingCommand completePendingCommand() } to finalize the transaction and verify its
-     * success or failure from the server reply.
+     * Upon closing the returned Writer, you need to call
+     * {@link #completePendingCommand  completePendingCommand() }
+     * to finalize the transaction and verify its success or failure from
+     * the server reply.
@@ -292,6 +389,9 @@ public class SMTPClient extends SMTP {
-     *
-     * @return A DotTerminatedMessageWriter to which the message (including header) can be written. Returns null if the command fails.
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @return A DotTerminatedMessageWriter to which the message (including
+     *      header) can be written.  Returns null if the command fails.
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -300 +400,2 @@ public class SMTPClient extends SMTP {
-    public Writer sendMessageData() throws IOException {
+    public Writer sendMessageData() throws IOException
+    {
@@ -307,0 +409,2 @@ public class SMTPClient extends SMTP {
+
+
@@ -309 +412,2 @@ public class SMTPClient extends SMTP {
-     * Sends a NOOP command to the SMTP server. This is useful for preventing server timeouts.
+     * Sends a NOOP command to the SMTP server.  This is useful for preventing
+     * server timeouts.
@@ -311 +414,0 @@ public class SMTPClient extends SMTP {
-     *
@@ -313,4 +416,7 @@ public class SMTPClient extends SMTP {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -318 +424,2 @@ public class SMTPClient extends SMTP {
-    public boolean sendNoOp() throws IOException {
+    public boolean sendNoOp() throws IOException
+    {
@@ -321,0 +429 @@ public class SMTPClient extends SMTP {
+
@@ -323,3 +431,6 @@ public class SMTPClient extends SMTP {
-     * A convenience method for sending short messages. This method fetches the Writer returned by {@link #sendMessageData sendMessageData() } and writes the
-     * specified String to it. After writing the message, this method calls {@link #completePendingCommand completePendingCommand() } to finalize the
-     * transaction and returns its success or failure.
+     * A convenience method for sending short messages.  This method fetches
+     * the Writer returned by {@link #sendMessageData  sendMessageData() }
+     * and writes the specified String to it.  After writing the message,
+     * this method calls {@link #completePendingCommand completePendingCommand() }
+     *  to finalize the transaction and returns
+     * its success or failure.
@@ -327,2 +438,2 @@ public class SMTPClient extends SMTP {
-     *
-     * @param message The short email message to send. This must include the headers and the body, but not the trailing "."
+     * @param message  The short email message to send.
+     * This must include the headers and the body, but not the trailing "."
@@ -330,4 +441,7 @@ public class SMTPClient extends SMTP {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -335 +449,2 @@ public class SMTPClient extends SMTP {
-    public boolean sendShortMessageData(final String message) throws IOException {
+    public boolean sendShortMessageData(final String message) throws IOException
+    {
@@ -347,0 +463,2 @@ public class SMTPClient extends SMTP {
+
+
@@ -349,3 +466,6 @@ public class SMTPClient extends SMTP {
-     * A convenience method for a sending short email without having to explicitly set the sender and recipient(s). This method sets the sender and recipient
-     * using {@link #setSender setSender } and {@link #addRecipient addRecipient }, and then sends the message using {@link #sendShortMessageData
-     * sendShortMessageData }.
+     * A convenience method for a sending short email without having to
+     * explicitly set the sender and recipient(s).  This method
+     * sets the sender and recipient using
+     * {@link #setSender  setSender } and
+     * {@link #addRecipient  addRecipient }, and then sends the
+     * message using {@link #sendShortMessageData  sendShortMessageData }.
@@ -353,4 +473,4 @@ public class SMTPClient extends SMTP {
-     *
-     * @param sender    The email address of the sender.
-     * @param recipient The email address of the recipient.
-     * @param message   The short email message to send. This must include the headers and the body, but not the trailing "."
+     * @param sender  The email address of the sender.
+     * @param recipient  The email address of the recipient.
+     * @param message  The short email message to send.
+     * This must include the headers and the body, but not the trailing "."
@@ -358,4 +478,7 @@ public class SMTPClient extends SMTP {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -363 +486,4 @@ public class SMTPClient extends SMTP {
-    public boolean sendSimpleMessage(final String sender, final String recipient, final String message) throws IOException {
+    public boolean sendSimpleMessage(final String sender, final String recipient,
+                                     final String message)
+    throws IOException
+    {
@@ -374,0 +501 @@ public class SMTPClient extends SMTP {
+
@@ -376,3 +503,6 @@ public class SMTPClient extends SMTP {
-     * A convenience method for a sending short email without having to explicitly set the sender and recipient(s). This method sets the sender and recipients
-     * using {@link #setSender(String) setSender} and {@link #addRecipient(String) addRecipient}, and then sends the message using
-     * {@link #sendShortMessageData(String) sendShortMessageData}.
+     * A convenience method for a sending short email without having to
+     * explicitly set the sender and recipient(s).  This method
+     * sets the sender and recipients using
+     * {@link #setSender(String)  setSender} and
+     * {@link #addRecipient(String)  addRecipient}, and then sends the
+     * message using {@link #sendShortMessageData(String)  sendShortMessageData}.
@@ -380,2 +510,5 @@ public class SMTPClient extends SMTP {
-     * Note that the method ignores failures when calling {@link #addRecipient(String) addRecipient} so long as at least one call succeeds. If no recipients can
-     * be successfully added then the method will fail (and does not attempt to send the message)
+     * Note that the method ignores failures when calling
+     * {@link #addRecipient(String)  addRecipient} so long as
+     * at least one call succeeds. If no recipients can be successfully
+     * added then the method will fail (and does not attempt to
+     * send the message)
@@ -383,4 +516,4 @@ public class SMTPClient extends SMTP {
-     *
-     * @param sender     The email address of the sender.
-     * @param recipients An array of recipient email addresses.
-     * @param message    The short email message to send. This must include the headers and the body, but not the trailing "."
+     * @param sender  The email address of the sender.
+     * @param recipients  An array of recipient email addresses.
+     * @param message  The short email message to send.
+     * This must include the headers and the body, but not the trailing "."
@@ -388,4 +521,7 @@ public class SMTPClient extends SMTP {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -393 +529,4 @@ public class SMTPClient extends SMTP {
-    public boolean sendSimpleMessage(final String sender, final String[] recipients, final String message) throws IOException {
+    public boolean sendSimpleMessage(final String sender, final String[] recipients,
+                                     final String message)
+    throws IOException
+    {
@@ -401 +540,2 @@ public class SMTPClient extends SMTP {
-        for (count = 0; count < recipients.length; count++) {
+        for (count = 0; count < recipients.length; count++)
+        {
@@ -413,0 +554 @@ public class SMTPClient extends SMTP {
+
@@ -415,2 +556,4 @@ public class SMTPClient extends SMTP {
-     * Set the sender of a message using the SMTP MAIL command, specifying a reverse relay path. The sender must be set first before any recipients may be
-     * specified, otherwise the mail server will reject your commands.
+     * Set the sender of a message using the SMTP MAIL command, specifying
+     * a reverse relay path.  The sender must be set first before any
+     * recipients may be specified, otherwise the mail server will reject
+     * your commands.
@@ -418,2 +561 @@ public class SMTPClient extends SMTP {
-     *
-     * @param path The reverse relay path pointing back to the sender.
+     * @param path  The reverse relay path pointing back to the sender.
@@ -421,4 +563,7 @@ public class SMTPClient extends SMTP {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -426 +571,2 @@ public class SMTPClient extends SMTP {
-    public boolean setSender(final RelayPath path) throws IOException {
+    public boolean setSender(final RelayPath path) throws IOException
+    {
@@ -429,0 +576 @@ public class SMTPClient extends SMTP {
+
@@ -431,2 +578,4 @@ public class SMTPClient extends SMTP {
-     * Set the sender of a message using the SMTP MAIL command, specifying the sender's email address. The sender must be set first before any recipients may be
-     * specified, otherwise the mail server will reject your commands.
+     * Set the sender of a message using the SMTP MAIL command, specifying
+     * the sender's email address. The sender must be set first before any
+     * recipients may be specified, otherwise the mail server will reject
+     * your commands.
@@ -434,2 +583 @@ public class SMTPClient extends SMTP {
-     *
-     * @param address The sender's email address.
+     * @param address  The sender's email address.
@@ -437,4 +585,7 @@ public class SMTPClient extends SMTP {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -442 +593,2 @@ public class SMTPClient extends SMTP {
-    public boolean setSender(final String address) throws IOException {
+    public boolean setSender(final String address) throws IOException
+    {
@@ -445,0 +598 @@ public class SMTPClient extends SMTP {
+
@@ -447 +600,2 @@ public class SMTPClient extends SMTP {
-     * Verify that a username or email address is valid, i.e., that mail can be delivered to that mailbox on the server.
+     * Verify that a username or email address is valid, i.e., that mail
+     * can be delivered to that mailbox on the server.
@@ -449,2 +603 @@ public class SMTPClient extends SMTP {
-     *
-     * @param username The username or email address to validate.
+     * @param username  The username or email address to validate.
@@ -452,4 +605,7 @@ public class SMTPClient extends SMTP {
-     * @throws SMTPConnectionClosedException If the SMTP server prematurely closes the connection as a result of the client being idle or some other reason
-     *                                       causing the server to send SMTP reply code 421. This exception may be caught either as an IOException or
-     *                                       independently as itself.
-     * @throws IOException                   If an I/O error occurs while either sending a command to the server or receiving a reply from the server.
+     * @throws SMTPConnectionClosedException
+     *      If the SMTP server prematurely closes the connection as a result
+     *      of the client being idle or some other reason causing the server
+     *      to send SMTP reply code 421.  This exception may be caught either
+     *      as an IOException or independently as itself.
+     * @throws IOException  If an I/O error occurs while either sending a
+     *      command to the server or receiving a reply from the server.
@@ -457 +613,2 @@ public class SMTPClient extends SMTP {
-    public boolean verify(final String username) throws IOException {
+    public boolean verify(final String username) throws IOException
+    {
@@ -462 +619,2 @@ public class SMTPClient extends SMTP {
-        return result == SMTPReply.ACTION_OK || result == SMTPReply.USER_NOT_LOCAL_WILL_FORWARD;
+        return result == SMTPReply.ACTION_OK ||
+                result == SMTPReply.USER_NOT_LOCAL_WILL_FORWARD;
diff --git a/src/main/java/org/apache/commons/net/smtp/SMTPCommand.java b/src/main/java/org/apache/commons/net/smtp/SMTPCommand.java
index 2addbb4bd..d555c3b50 100644
--- a/src/main/java/org/apache/commons/net/smtp/SMTPCommand.java
+++ b/src/main/java/org/apache/commons/net/smtp/SMTPCommand.java
@@ -21,3 +21,6 @@ package org.apache.commons.net.smtp;
- * SMTPCommand stores a set of constants for SMTP command codes. To interpret the meaning of the codes, familiarity with RFC 821 is assumed. The mnemonic
- * constant names are transcriptions from the code descriptions of RFC 821. For those who think in terms of the actual SMTP commands, a set of constants such as
- * {@link #HELO HELO } are provided where the constant name is the same as the SMTP command.
+ * SMTPCommand stores a set of constants for SMTP command codes.  To interpret
+ * the meaning of the codes, familiarity with RFC 821 is assumed.
+ * The mnemonic constant names are transcriptions from the code descriptions
+ * of RFC 821.  For those who think in terms of the actual SMTP commands,
+ * a set of constants such as {@link #HELO  HELO } are provided
+ * where the constant name is the same as the SMTP command.
@@ -26 +29,3 @@ package org.apache.commons.net.smtp;
-public final class SMTPCommand {
+public final class SMTPCommand
+{
+
@@ -45 +49,0 @@ public final class SMTPCommand {
-     *
@@ -48 +52 @@ public final class SMTPCommand {
-    public static final int AUTH = 14;
+    public static final int AUTH = 14 ;
@@ -52 +55,0 @@ public final class SMTPCommand {
-     *
@@ -55 +58 @@ public final class SMTPCommand {
-    public static final int EHLO = 15;
+    public static final int EHLO = 15 ;
@@ -76,2 +79,5 @@ public final class SMTPCommand {
-    private static final String[] commands = { "HELO", "MAIL FROM:", "RCPT TO:", "DATA", "SEND FROM:", "SOML FROM:", "SAML FROM:", "RSET", "VRFY", "EXPN",
-            "HELP", "NOOP", "TURN", "QUIT", "AUTH", "EHLO" };
+    private static final String[] commands = {
+                                          "HELO", "MAIL FROM:", "RCPT TO:", "DATA", "SEND FROM:", "SOML FROM:",
+                                          "SAML FROM:", "RSET", "VRFY", "EXPN", "HELP", "NOOP", "TURN", "QUIT",
+                                          "AUTH", "EHLO"
+                                      };
@@ -84,0 +91 @@ public final class SMTPCommand {
+
@@ -86 +93,2 @@ public final class SMTPCommand {
-     * Retrieve the SMTP protocol command string corresponding to a specified command code.
+     * Retrieve the SMTP protocol command string corresponding to a specified
+     * command code.
@@ -88 +95,0 @@ public final class SMTPCommand {
-     *
@@ -90 +97,2 @@ public final class SMTPCommand {
-     * @return The SMTP protcol command string corresponding to a specified command code.
+     * @return The SMTP protcol command string corresponding to a specified
+     *         command code.
@@ -92 +100,2 @@ public final class SMTPCommand {
-    public static String getCommand(final int command) {
+    public static String getCommand(final int command)
+    {
@@ -97,2 +106,2 @@ public final class SMTPCommand {
-    private SMTPCommand() {
-    }
+    private SMTPCommand()
+    {}
diff --git a/src/main/java/org/apache/commons/net/smtp/SMTPConnectionClosedException.java b/src/main/java/org/apache/commons/net/smtp/SMTPConnectionClosedException.java
index 04745ca17..be4dfd0c0 100644
--- a/src/main/java/org/apache/commons/net/smtp/SMTPConnectionClosedException.java
+++ b/src/main/java/org/apache/commons/net/smtp/SMTPConnectionClosedException.java
@@ -23,3 +23,7 @@ import java.io.IOException;
- * SMTPConnectionClosedException is used to indicate the premature or unexpected closing of an SMTP connection resulting from a
- * {@link org.apache.commons.net.smtp.SMTPReply#SERVICE_NOT_AVAILABLE SMTPReply.SERVICE_NOT_AVAILABLE } response (SMTP reply code 421) to a failed SMTP command.
- * This exception is derived from IOException and therefore may be caught either as an IOException or specifically as an SMTPConnectionClosedException.
+ * SMTPConnectionClosedException is used to indicate the premature or
+ * unexpected closing of an SMTP connection resulting from a
+ * {@link org.apache.commons.net.smtp.SMTPReply#SERVICE_NOT_AVAILABLE SMTPReply.SERVICE_NOT_AVAILABLE }
+ *  response (SMTP reply code 421) to a
+ * failed SMTP command.  This exception is derived from IOException and
+ * therefore may be caught either as an IOException or specifically as an
+ * SMTPConnectionClosedException.
@@ -32 +36,2 @@ import java.io.IOException;
-public final class SMTPConnectionClosedException extends IOException {
+public final class SMTPConnectionClosedException extends IOException
+{
@@ -37 +42,2 @@ public final class SMTPConnectionClosedException extends IOException {
-    public SMTPConnectionClosedException() {
+    public SMTPConnectionClosedException()
+    {
@@ -43 +49 @@ public final class SMTPConnectionClosedException extends IOException {
-     * @param message The message explaining the reason for the exception.
+     * @param message  The message explaining the reason for the exception.
@@ -45 +51,2 @@ public final class SMTPConnectionClosedException extends IOException {
-    public SMTPConnectionClosedException(final String message) {
+    public SMTPConnectionClosedException(final String message)
+    {
diff --git a/src/main/java/org/apache/commons/net/smtp/SMTPReply.java b/src/main/java/org/apache/commons/net/smtp/SMTPReply.java
index cfd8eba83..d7093941b 100644
--- a/src/main/java/org/apache/commons/net/smtp/SMTPReply.java
+++ b/src/main/java/org/apache/commons/net/smtp/SMTPReply.java
@@ -21,2 +21,4 @@ package org.apache.commons.net.smtp;
- * SMTPReply stores a set of constants for SMTP reply codes. To interpret the meaning of the codes, familiarity with RFC 821 is assumed. The mnemonic constant
- * names are transcriptions from the code descriptions of RFC 821.
+ * SMTPReply stores a set of constants for SMTP reply codes.  To interpret
+ * the meaning of the codes, familiarity with RFC 821 is assumed.
+ * The mnemonic constant names are transcriptions from the code descriptions
+ * of RFC 821.
@@ -25 +27,2 @@ package org.apache.commons.net.smtp;
-public final class SMTPReply {
+public final class SMTPReply
+{
@@ -50,2 +53,4 @@ public final class SMTPReply {
-     * Determine if a reply code is a negative permanent response. All codes beginning with a 5 are negative permanent responses. The SMTP server will send a
-     * negative permanent response on the failure of a command that cannot be reattempted with success.
+     * Determine if a reply code is a negative permanent response.  All
+     * codes beginning with a 5 are negative permanent responses.
+     * The SMTP server will send a negative permanent response on the
+     * failure of a command that cannot be reattempted with success.
@@ -53,3 +58,3 @@ public final class SMTPReply {
-     *
-     * @param reply The reply code to test.
-     * @return True if a reply code is a negative permanent response, false if not.
+     * @param reply  The reply code to test.
+     * @return True if a reply code is a negative permanent response, false
+     *         if not.
@@ -57 +62,2 @@ public final class SMTPReply {
-    public static boolean isNegativePermanent(final int reply) {
+    public static boolean isNegativePermanent(final int reply)
+    {
@@ -62,2 +68,4 @@ public final class SMTPReply {
-     * Determine if a reply code is a negative transient response. All codes beginning with a 4 are negative transient responses. The SMTP server will send a
-     * negative transient response on the failure of a command that can be reattempted with success.
+     * Determine if a reply code is a negative transient response.  All
+     * codes beginning with a 4 are negative transient responses.
+     * The SMTP server will send a negative transient response on the
+     * failure of a command that can be reattempted with success.
@@ -65,3 +73,3 @@ public final class SMTPReply {
-     *
-     * @param reply The reply code to test.
-     * @return True if a reply code is a negative transient response, false if not.
+     * @param reply  The reply code to test.
+     * @return True if a reply code is a negative transient response, false
+     *         if not.
@@ -69 +77,2 @@ public final class SMTPReply {
-    public static boolean isNegativeTransient(final int reply) {
+    public static boolean isNegativeTransient(final int reply)
+    {
@@ -74,2 +83,4 @@ public final class SMTPReply {
-     * Determine if a reply code is a positive completion response. All codes beginning with a 2 are positive completion responses. The SMTP server will send a
-     * positive completion response on the final successful completion of a command.
+     * Determine if a reply code is a positive completion response.  All
+     * codes beginning with a 2 are positive completion responses.
+     * The SMTP server will send a positive completion response on the final
+     * successful completion of a command.
@@ -77,3 +88,3 @@ public final class SMTPReply {
-     *
-     * @param reply The reply code to test.
-     * @return True if a reply code is a positive completion response, false if not.
+     * @param reply  The reply code to test.
+     * @return True if a reply code is a positive completion response, false
+     *         if not.
@@ -81 +92,2 @@ public final class SMTPReply {
-    public static boolean isPositiveCompletion(final int reply) {
+    public static boolean isPositiveCompletion(final int reply)
+    {
@@ -86,3 +98,7 @@ public final class SMTPReply {
-     * Determine if a reply code is a positive intermediate response. All codes beginning with a 3 are positive intermediate responses. The SMTP server will
-     * send a positive intermediate response on the successful completion of one part of a multi-part sequence of commands. For example, after a successful DATA
-     * command, a positive intermediate response will be sent to indicate that the server is ready to receive the message data.
+     * Determine if a reply code is a positive intermediate response.  All
+     * codes beginning with a 3 are positive intermediate responses.
+     * The SMTP server will send a positive intermediate response on the
+     * successful completion of one part of a multi-part sequence of
+     * commands.  For example, after a successful DATA command, a positive
+     * intermediate response will be sent to indicate that the server is
+     * ready to receive the message data.
@@ -90,3 +106,3 @@ public final class SMTPReply {
-     *
-     * @param reply The reply code to test.
-     * @return True if a reply code is a positive intermediate response, false if not.
+     * @param reply  The reply code to test.
+     * @return True if a reply code is a positive intermediate response, false
+     *         if not.
@@ -94 +110,2 @@ public final class SMTPReply {
-    public static boolean isPositiveIntermediate(final int reply) {
+    public static boolean isPositiveIntermediate(final int reply)
+    {
@@ -99,3 +116,6 @@ public final class SMTPReply {
-     * Determine if a reply code is a positive preliminary response. All codes beginning with a 1 are positive preliminary responses. Postitive preliminary
-     * responses are used to indicate tentative success. No further commands can be issued to the SMTP server after a positive preliminary response until a
-     * follow up response is received from the server.
+     * Determine if a reply code is a positive preliminary response.  All
+     * codes beginning with a 1 are positive preliminary responses.
+     * Postitive preliminary responses are used to indicate tentative success.
+     * No further commands can be issued to the SMTP server after a positive
+     * preliminary response until a follow up response is received from the
+     * server.
@@ -103 +123,2 @@ public final class SMTPReply {
-     * <b> Note: </b> <em> No SMTP commands defined in RFC 822 provide this type of reply. </em>
+     * <b> Note: </b> <em> No SMTP commands defined in RFC 822 provide this
+     * type of reply. </em>
@@ -105,3 +126,3 @@ public final class SMTPReply {
-     *
-     * @param reply The reply code to test.
-     * @return True if a reply code is a positive preliminary response, false if not.
+     * @param reply  The reply code to test.
+     * @return True if a reply code is a positive preliminary response, false
+     *         if not.
@@ -109 +130,2 @@ public final class SMTPReply {
-    public static boolean isPositivePreliminary(final int reply) {
+    public static boolean isPositivePreliminary(final int reply)
+    {
@@ -114,2 +136,2 @@ public final class SMTPReply {
-    private SMTPReply() {
-    }
+    private SMTPReply()
+    {}
diff --git a/src/main/java/org/apache/commons/net/smtp/SMTPSClient.java b/src/main/java/org/apache/commons/net/smtp/SMTPSClient.java
index 83127b2d9..7199659ac 100644
--- a/src/main/java/org/apache/commons/net/smtp/SMTPSClient.java
+++ b/src/main/java/org/apache/commons/net/smtp/SMTPSClient.java
@@ -38,4 +38,5 @@ import org.apache.commons.net.util.SSLSocketUtils;
- * SMTP over SSL processing. Copied from FTPSClient.java and modified to suit SMTP. If implicit mode is selected (NOT the default), SSL/TLS negotiation starts
- * right after the connection has been established. In explicit mode (the default), SSL/TLS negotiation starts when the user calls execTLS() and the server
- * accepts the command. Implicit usage:
- *
+ * SMTP over SSL processing. Copied from FTPSClient.java and modified to suit SMTP.
+ * If implicit mode is selected (NOT the default), SSL/TLS negotiation starts right
+ * after the connection has been established. In explicit mode (the default), SSL/TLS
+ * negotiation starts when the user calls execTLS() and the server accepts the command.
+ * Implicit usage:
@@ -43,2 +44,2 @@ import org.apache.commons.net.util.SSLSocketUtils;
- * SMTPSClient c = new SMTPSClient(true);
- * c.connect("127.0.0.1", 465);
+ *               SMTPSClient c = new SMTPSClient(true);
+ *               c.connect("127.0.0.1", 465);
@@ -46 +46,0 @@ import org.apache.commons.net.util.SSLSocketUtils;
- *
@@ -48 +47,0 @@ import org.apache.commons.net.util.SSLSocketUtils;
- *
@@ -50,5 +49,5 @@ import org.apache.commons.net.util.SSLSocketUtils;
- * SMTPSClient c = new SMTPSClient();
- * c.connect("127.0.0.1", 25);
- * if (c.execTLS()) {
- *     // Rest of the commands here
- * }
+ *               SMTPSClient c = new SMTPSClient();
+ *               c.connect("127.0.0.1", 25);
+ *               if (c.execTLS()) {
+ *                 // Rest of the commands here
+ *               }
@@ -56,4 +55,3 @@ import org.apache.commons.net.util.SSLSocketUtils;
- *
- * <em>Warning</em>: the hostname is not verified against the certificate by default, use {@link #setHostnameVerifier(HostnameVerifier)} or
- * {@link #setEndpointCheckingEnabled(boolean)} (on Java 1.7+) to enable verification.
- *
+ * <em>Warning</em>: the hostname is not verified against the certificate by default, use
+ * {@link #setHostnameVerifier(HostnameVerifier)} or {@link #setEndpointCheckingEnabled(boolean)}
+ * (on Java 1.7+) to enable verification.
@@ -62 +60,2 @@ import org.apache.commons.net.util.SSLSocketUtils;
-public class SMTPSClient extends SMTPClient {
+public class SMTPSClient extends SMTPClient
+{
@@ -75,3 +74,2 @@ public class SMTPSClient extends SMTPClient {
-    /**
-     * The cipher suites. SSLSockets have a default set of these anyway, so no initialization required.
-     */
+    /** The cipher suites. SSLSockets have a default set of these anyway,
+        so no initialization required. */
@@ -97 +95,2 @@ public class SMTPSClient extends SMTPClient {
-     * Constructor for SMTPSClient, using {@link #DEFAULT_PROTOCOL} i.e. TLS Sets security mode to explicit (isImplicit = false).
+     * Constructor for SMTPSClient, using {@link #DEFAULT_PROTOCOL} i.e. TLS
+     * Sets security mode to explicit (isImplicit = false).
@@ -99 +98,2 @@ public class SMTPSClient extends SMTPClient {
-    public SMTPSClient() {
+    public SMTPSClient()
+    {
@@ -105 +104,0 @@ public class SMTPSClient extends SMTPClient {
-     *
@@ -108 +107,2 @@ public class SMTPSClient extends SMTPClient {
-    public SMTPSClient(final boolean implicit) {
+    public SMTPSClient(final boolean implicit)
+    {
@@ -114 +113,0 @@ public class SMTPSClient extends SMTPClient {
-     *
@@ -116 +115 @@ public class SMTPSClient extends SMTPClient {
-     * @param ctx      A pre-configured SSL Context.
+     * @param ctx A pre-configured SSL Context.
@@ -118 +117,2 @@ public class SMTPSClient extends SMTPClient {
-    public SMTPSClient(final boolean implicit, final SSLContext ctx) {
+    public SMTPSClient(final boolean implicit, final SSLContext ctx)
+    {
@@ -126 +125,0 @@ public class SMTPSClient extends SMTPClient {
-     *
@@ -130 +129,2 @@ public class SMTPSClient extends SMTPClient {
-    public SMTPSClient(final SSLContext context) {
+    public SMTPSClient(final SSLContext context)
+    {
@@ -136 +135,0 @@ public class SMTPSClient extends SMTPClient {
-     *
@@ -139 +138,2 @@ public class SMTPSClient extends SMTPClient {
-    public SMTPSClient(final String proto) {
+    public SMTPSClient(final String proto)
+    {
@@ -145,2 +145 @@ public class SMTPSClient extends SMTPClient {
-     *
-     * @param proto    the protocol.
+     * @param proto the protocol.
@@ -149 +148,2 @@ public class SMTPSClient extends SMTPClient {
-    public SMTPSClient(final String proto, final boolean implicit) {
+    public SMTPSClient(final String proto, final boolean implicit)
+    {
@@ -156,2 +156 @@ public class SMTPSClient extends SMTPClient {
-     *
-     * @param proto    the protocol.
+     * @param proto the protocol.
@@ -162 +161,2 @@ public class SMTPSClient extends SMTPClient {
-    public SMTPSClient(final String proto, final boolean implicit, final String encoding) {
+    public SMTPSClient(final String proto, final boolean implicit, final String encoding)
+    {
@@ -169,3 +169,4 @@ public class SMTPSClient extends SMTPClient {
-     * Because there are so many connect() methods, the _connectAction_() method is provided as a means of performing some action immediately after establishing
-     * a connection, rather than reimplementing all of the connect() methods.
-     *
+     * Because there are so many connect() methods,
+     * the _connectAction_() method is provided as a means of performing
+     * some action immediately after establishing a connection,
+     * rather than reimplementing all of the connect() methods.
@@ -176 +177,2 @@ public class SMTPSClient extends SMTPClient {
-    protected void _connectAction_() throws IOException {
+    protected void _connectAction_() throws IOException
+    {
@@ -188,2 +190,2 @@ public class SMTPSClient extends SMTPClient {
-     *
-     * @throws IOException If an I/O error occurs while sending the command or performing the negotiation.
+     * @throws IOException If an I/O error occurs while sending
+     * the command or performing the negotiation.
@@ -192,2 +194,4 @@ public class SMTPSClient extends SMTPClient {
-    public boolean execTLS() throws IOException {
-        if (!SMTPReply.isPositiveCompletion(sendCommand("STARTTLS"))) {
+    public boolean execTLS() throws IOException
+    {
+        if (!SMTPReply.isPositiveCompletion(sendCommand("STARTTLS")))
+        {
@@ -195 +199 @@ public class SMTPSClient extends SMTPClient {
-            // throw new SSLException(getReplyString());
+            //throw new SSLException(getReplyString());
@@ -202,3 +206,3 @@ public class SMTPSClient extends SMTPClient {
-     * Returns the names of the cipher suites which could be enabled for use on this connection. When the underlying {@link java.net.Socket Socket} is not an
-     * {@link SSLSocket} instance, returns null.
-     *
+     * Returns the names of the cipher suites which could be enabled
+     * for use on this connection.
+     * When the underlying {@link java.net.Socket Socket} is not an {@link SSLSocket} instance, returns null.
@@ -207,3 +211,5 @@ public class SMTPSClient extends SMTPClient {
-    public String[] getEnabledCipherSuites() {
-        if (_socket_ instanceof SSLSocket) {
-            return ((SSLSocket) _socket_).getEnabledCipherSuites();
+    public String[] getEnabledCipherSuites()
+    {
+        if (_socket_ instanceof SSLSocket)
+        {
+            return ((SSLSocket)_socket_).getEnabledCipherSuites();
@@ -215,3 +221,3 @@ public class SMTPSClient extends SMTPClient {
-     * Returns the names of the protocol versions which are currently enabled for use on this connection. When the underlying {@link java.net.Socket Socket} is
-     * not an {@link SSLSocket} instance, returns null.
-     *
+     * Returns the names of the protocol versions which are currently
+     * enabled for use on this connection.
+     * When the underlying {@link java.net.Socket Socket} is not an {@link SSLSocket} instance, returns null.
@@ -220,3 +226,5 @@ public class SMTPSClient extends SMTPClient {
-    public String[] getEnabledProtocols() {
-        if (_socket_ instanceof SSLSocket) {
-            return ((SSLSocket) _socket_).getEnabledProtocols();
+    public String[] getEnabledProtocols()
+    {
+        if (_socket_ instanceof SSLSocket)
+        {
+            return ((SSLSocket)_socket_).getEnabledProtocols();
@@ -229 +236,0 @@ public class SMTPSClient extends SMTPClient {
-     *
@@ -233 +240,2 @@ public class SMTPSClient extends SMTPClient {
-    public HostnameVerifier getHostnameVerifier() {
+    public HostnameVerifier getHostnameVerifier()
+    {
@@ -239 +246,0 @@ public class SMTPSClient extends SMTPClient {
-     *
@@ -242 +249,2 @@ public class SMTPSClient extends SMTPClient {
-    public KeyManager getKeyManager() {
+    public KeyManager getKeyManager()
+    {
@@ -248 +255,0 @@ public class SMTPSClient extends SMTPClient {
-     *
@@ -251 +258,2 @@ public class SMTPSClient extends SMTPClient {
-    public TrustManager getTrustManager() {
+    public TrustManager getTrustManager()
+    {
@@ -257 +264,0 @@ public class SMTPSClient extends SMTPClient {
-     *
@@ -260,2 +267,4 @@ public class SMTPSClient extends SMTPClient {
-    private void initSSLContext() throws IOException {
-        if (context == null) {
+    private void initSSLContext() throws IOException
+    {
+        if (context == null)
+        {
@@ -267 +276,2 @@ public class SMTPSClient extends SMTPClient {
-     * Return whether or not endpoint identification using the HTTPS algorithm on Java 1.7+ is enabled. The default behavior is for this to be disabled.
+     * Return whether or not endpoint identification using the HTTPS algorithm
+     * on Java 1.7+ is enabled. The default behavior is for this to be disabled.
@@ -272 +282,2 @@ public class SMTPSClient extends SMTPClient {
-    public boolean isEndpointCheckingEnabled() {
+    public boolean isEndpointCheckingEnabled()
+    {
@@ -277,2 +288,2 @@ public class SMTPSClient extends SMTPClient {
-     * SSL/TLS negotiation. Acquires an SSL socket of a connection and carries out handshake processing.
-     *
+     * SSL/TLS negotiation. Acquires an SSL socket of a
+     * connection and carries out handshake processing.
@@ -281 +292,2 @@ public class SMTPSClient extends SMTPClient {
-    private void performSSLNegotiation() throws IOException {
+    private void performSSLNegotiation() throws IOException
+    {
@@ -287 +299,2 @@ public class SMTPSClient extends SMTPClient {
-        final SSLSocket socket = (SSLSocket) ssf.createSocket(_socket_, host, port, true);
+        final SSLSocket socket =
+            (SSLSocket) ssf.createSocket(_socket_, host, port, true);
@@ -306,2 +319,4 @@ public class SMTPSClient extends SMTPClient {
-        reader = new CRLFLineReader(new InputStreamReader(_input_, encoding));
-        writer = new BufferedWriter(new OutputStreamWriter(_output_, encoding));
+        reader = new CRLFLineReader(
+                        new InputStreamReader(_input_, encoding));
+        writer = new BufferedWriter(
+                        new OutputStreamWriter(_output_, encoding));
@@ -315,2 +330,2 @@ public class SMTPSClient extends SMTPClient {
-     * Controls which particular cipher suites are enabled for use on this connection. Called before server negotiation.
-     *
+     * Controls which particular cipher suites are enabled for use on this
+     * connection. Called before server negotiation.
@@ -319 +334,2 @@ public class SMTPSClient extends SMTPClient {
-    public void setEnabledCipherSuites(final String[] cipherSuites) {
+    public void setEnabledCipherSuites(final String[] cipherSuites)
+    {
@@ -324,2 +340,2 @@ public class SMTPSClient extends SMTPClient {
-     * Controls which particular protocol versions are enabled for use on this connection. I perform setting before a server negotiation.
-     *
+     * Controls which particular protocol versions are enabled for use on this
+     * connection. I perform setting before a server negotiation.
@@ -328 +344,2 @@ public class SMTPSClient extends SMTPClient {
-    public void setEnabledProtocols(final String[] protocolVersions) {
+    public void setEnabledProtocols(final String[] protocolVersions)
+    {
@@ -333 +350,2 @@ public class SMTPSClient extends SMTPClient {
-     * Automatic endpoint identification checking using the HTTPS algorithm is supported on Java 1.7+. The default behavior is for this to be disabled.
+     * Automatic endpoint identification checking using the HTTPS algorithm
+     * is supported on Java 1.7+. The default behavior is for this to be disabled.
@@ -338 +356,2 @@ public class SMTPSClient extends SMTPClient {
-    public void setEndpointCheckingEnabled(final boolean enable) {
+    public void setEndpointCheckingEnabled(final boolean enable)
+    {
@@ -344 +362,0 @@ public class SMTPSClient extends SMTPClient {
-     *
@@ -348 +366,2 @@ public class SMTPSClient extends SMTPClient {
-    public void setHostnameVerifier(final HostnameVerifier newHostnameVerifier) {
+    public void setHostnameVerifier(final HostnameVerifier newHostnameVerifier)
+    {
@@ -354 +372,0 @@ public class SMTPSClient extends SMTPClient {
-     *
@@ -358 +376,2 @@ public class SMTPSClient extends SMTPClient {
-    public void setKeyManager(final KeyManager newKeyManager) {
+    public void setKeyManager(final KeyManager newKeyManager)
+    {
@@ -364 +382,0 @@ public class SMTPSClient extends SMTPClient {
-     *
@@ -368 +386,2 @@ public class SMTPSClient extends SMTPClient {
-    public void setTrustManager(final TrustManager newTrustManager) {
+    public void setTrustManager(final TrustManager newTrustManager)
+    {
diff --git a/src/main/java/org/apache/commons/net/smtp/SimpleSMTPHeader.java b/src/main/java/org/apache/commons/net/smtp/SimpleSMTPHeader.java
index 34be7e767..753b4de43 100644
--- a/src/main/java/org/apache/commons/net/smtp/SimpleSMTPHeader.java
+++ b/src/main/java/org/apache/commons/net/smtp/SimpleSMTPHeader.java
@@ -25,2 +25,5 @@ import java.util.Locale;
- * This class is used to construct a bare minimum acceptable header for an email message. To construct more complicated headers you should refer to RFC 5322.
- * When the Java Mail API is finalized, you will be able to use it to compose fully compliant Internet text messages.
+ * This class is used to construct a bare minimum
+ * acceptable header for an email message.  To construct more
+ * complicated headers you should refer to RFC 5322.  When the
+ * Java Mail API is finalized, you will be
+ * able to use it to compose fully compliant Internet text messages.
@@ -28,3 +31,3 @@ import java.util.Locale;
- * The main purpose of the class is to faciliatate the mail sending process, by relieving the programmer from having to explicitly format a simple message
- * header. For example:
- *
+ * The main purpose of the class is to faciliatate the mail sending
+ * process, by relieving the programmer from having to explicitly format
+ * a simple message header.  For example:
@@ -49 +52,2 @@ import java.util.Locale;
-public class SimpleSMTPHeader {
+public class SimpleSMTPHeader
+{
@@ -58 +62,2 @@ public class SimpleSMTPHeader {
-     * Creates a new SimpleSMTPHeader instance initialized with the given from, to, and subject header field values.
+     * Creates a new SimpleSMTPHeader instance initialized with the given
+     * from, to, and subject header field values.
@@ -60,4 +65,9 @@ public class SimpleSMTPHeader {
-     *
-     * @param from    The value of the <code>From:</code> header field. This should be the sender's email address. Must not be null.
-     * @param to      The value of the <code>To:</code> header field. This should be the recipient's email address. May be null
-     * @param subject The value of the <code>Subject:</code> header field. This should be the subject of the message. May be null
+     * @param from  The value of the <code>From:</code> header field.  This
+     *              should be the sender's email address.
+     *              Must not be null.
+     * @param to    The value of the <code>To:</code> header field.  This
+     *              should be the recipient's email address.
+     *              May be null
+     * @param subject  The value of the <code>Subject:</code> header field.
+     *              This should be the subject of the message.
+     *              May be null
@@ -65 +75,2 @@ public class SimpleSMTPHeader {
-    public SimpleSMTPHeader(final String from, final String to, final String subject) {
+    public SimpleSMTPHeader(final String from, final String to, final String subject)
+    {
@@ -79 +89,0 @@ public class SimpleSMTPHeader {
-     *
@@ -82 +92,2 @@ public class SimpleSMTPHeader {
-    public void addCC(final String address) {
+    public void addCC(final String address)
+    {
@@ -91,0 +103 @@ public class SimpleSMTPHeader {
+
@@ -93,3 +105,4 @@ public class SimpleSMTPHeader {
-     * Adds an arbitrary header field with the given value to the article header. These headers will be written before the From, To, Subject, and Cc fields when
-     * the SimpleSMTPHeader is convertered to a string. An example use would be:
-     *
+     * Adds an arbitrary header field with the given value to the article
+     * header.  These headers will be written before the From, To, Subject, and
+     * Cc fields when the SimpleSMTPHeader is convertered to a string.
+     * An example use would be:
@@ -100,3 +113,2 @@ public class SimpleSMTPHeader {
-     *
-     * @param headerField The header field to add, not including the colon.
-     * @param value       The value of the added header field.
+     * @param headerField  The header field to add, not including the colon.
+     * @param value  The value of the added header field.
@@ -104 +116,2 @@ public class SimpleSMTPHeader {
-    public void addHeaderField(final String headerField, final String value) {
+    public void addHeaderField(final String headerField, final String value)
+    {
@@ -113,0 +127 @@ public class SimpleSMTPHeader {
+
@@ -115,2 +129,4 @@ public class SimpleSMTPHeader {
-     * Converts the SimpleSMTPHeader to a properly formatted header in the form of a String, including the blank line used to separate the header from the
-     * article body. The header fields CC and Subject are only included when they are non-null.
+     * Converts the SimpleSMTPHeader to a properly formatted header in
+     * the form of a String, including the blank line used to separate
+     * the header from the article body.  The header fields CC and Subject
+     * are only included when they are non-null.
@@ -118 +133,0 @@ public class SimpleSMTPHeader {
-     *
@@ -122 +137,2 @@ public class SimpleSMTPHeader {
-    public String toString() {
+    public String toString()
+    {
@@ -141 +157,2 @@ public class SimpleSMTPHeader {
-        if (cc != null) {
+        if (cc != null)
+        {
@@ -145 +162,2 @@ public class SimpleSMTPHeader {
-        if (subject != null) {
+        if (subject != null)
+        {
@@ -153,0 +172,3 @@ public class SimpleSMTPHeader {
+
+
+
diff --git a/src/main/java/org/apache/commons/net/telnet/EchoOptionHandler.java b/src/main/java/org/apache/commons/net/telnet/EchoOptionHandler.java
index 7bd197fce..b3765b4ea 100644
--- a/src/main/java/org/apache/commons/net/telnet/EchoOptionHandler.java
+++ b/src/main/java/org/apache/commons/net/telnet/EchoOptionHandler.java
@@ -23 +23,2 @@ package org.apache.commons.net.telnet;
-public class EchoOptionHandler extends TelnetOptionHandler {
+public class EchoOptionHandler extends TelnetOptionHandler
+{
@@ -25 +26,2 @@ public class EchoOptionHandler extends TelnetOptionHandler {
-     * Constructor for the EchoOptionHandler. Initial and accept behavior flags are set to false
+     * Constructor for the EchoOptionHandler. Initial and accept
+     * behavior flags are set to false
@@ -27 +29,2 @@ public class EchoOptionHandler extends TelnetOptionHandler {
-    public EchoOptionHandler() {
+    public EchoOptionHandler()
+    {
@@ -32,2 +35,4 @@ public class EchoOptionHandler extends TelnetOptionHandler {
-     * Constructor for the EchoOptionHandler. Allows defining desired initial setting for local/remote activation of this option and behavior in case a
-     * local/remote activation request for this option is received.
+     * Constructor for the EchoOptionHandler. Allows defining desired
+     * initial setting for local/remote activation of this option and
+     * behavior in case a local/remote activation request for this
+     * option is received.
@@ -35,4 +40,3 @@ public class EchoOptionHandler extends TelnetOptionHandler {
-     *
-     * @param initlocal    - if set to true, a WILL is sent upon connection.
-     * @param initremote   - if set to true, a DO is sent upon connection.
-     * @param acceptlocal  - if set to true, any DO request is accepted.
+     * @param initlocal - if set to true, a WILL is sent upon connection.
+     * @param initremote - if set to true, a DO is sent upon connection.
+     * @param acceptlocal - if set to true, any DO request is accepted.
@@ -41,2 +45,5 @@ public class EchoOptionHandler extends TelnetOptionHandler {
-    public EchoOptionHandler(final boolean initlocal, final boolean initremote, final boolean acceptlocal, final boolean acceptremote) {
-        super(TelnetOption.ECHO, initlocal, initremote, acceptlocal, acceptremote);
+    public EchoOptionHandler(final boolean initlocal, final boolean initremote,
+                                final boolean acceptlocal, final boolean acceptremote)
+    {
+        super(TelnetOption.ECHO, initlocal, initremote,
+                                      acceptlocal, acceptremote);
diff --git a/src/main/java/org/apache/commons/net/telnet/InvalidTelnetOptionException.java b/src/main/java/org/apache/commons/net/telnet/InvalidTelnetOptionException.java
index c3b3a6391..c499011cc 100644
--- a/src/main/java/org/apache/commons/net/telnet/InvalidTelnetOptionException.java
+++ b/src/main/java/org/apache/commons/net/telnet/InvalidTelnetOptionException.java
@@ -21,2 +21,3 @@ package org.apache.commons.net.telnet;
- * The InvalidTelnetOptionException is the exception that is thrown whenever a TelnetOptionHandler with an invlaid option code is registered in TelnetClient
- * with addOptionHandler.
+ * The InvalidTelnetOptionException is the exception that is
+ * thrown whenever a TelnetOptionHandler with an invlaid
+ * option code is registered in TelnetClient with addOptionHandler.
@@ -24 +25,2 @@ package org.apache.commons.net.telnet;
-public class InvalidTelnetOptionException extends Exception {
+public class InvalidTelnetOptionException extends Exception
+{
@@ -41 +42,0 @@ public class InvalidTelnetOptionException extends Exception {
-     *
@@ -45 +46,2 @@ public class InvalidTelnetOptionException extends Exception {
-    public InvalidTelnetOptionException(final String message, final int optcode) {
+    public InvalidTelnetOptionException(final String message, final int optcode)
+    {
@@ -53 +54,0 @@ public class InvalidTelnetOptionException extends Exception {
-     *
@@ -57 +58,2 @@ public class InvalidTelnetOptionException extends Exception {
-    public String getMessage() {
+    public String getMessage()
+    {
diff --git a/src/main/java/org/apache/commons/net/telnet/SimpleOptionHandler.java b/src/main/java/org/apache/commons/net/telnet/SimpleOptionHandler.java
index 6929b5b25..b41366dfa 100644
--- a/src/main/java/org/apache/commons/net/telnet/SimpleOptionHandler.java
+++ b/src/main/java/org/apache/commons/net/telnet/SimpleOptionHandler.java
@@ -21 +21,2 @@ package org.apache.commons.net.telnet;
- * Simple option handler that can be used for options that don't require subnegotiation.
+ * Simple option handler that can be used for options
+ * that don't require subnegotiation.
@@ -23 +24,2 @@ package org.apache.commons.net.telnet;
-public class SimpleOptionHandler extends TelnetOptionHandler {
+public class SimpleOptionHandler extends TelnetOptionHandler
+{
@@ -25 +27,2 @@ public class SimpleOptionHandler extends TelnetOptionHandler {
-     * Constructor for the SimpleOptionHandler. Initial and accept behavior flags are set to false
+     * Constructor for the SimpleOptionHandler. Initial and accept
+     * behavior flags are set to false
@@ -27 +29,0 @@ public class SimpleOptionHandler extends TelnetOptionHandler {
-     *
@@ -30 +32,2 @@ public class SimpleOptionHandler extends TelnetOptionHandler {
-    public SimpleOptionHandler(final int optcode) {
+    public SimpleOptionHandler(final int optcode)
+    {
@@ -35,2 +38,4 @@ public class SimpleOptionHandler extends TelnetOptionHandler {
-     * Constructor for the SimpleOptionHandler. Allows defining desired initial setting for local/remote activation of this option and behavior in case a
-     * local/remote activation request for this option is received.
+     * Constructor for the SimpleOptionHandler. Allows defining desired
+     * initial setting for local/remote activation of this option and
+     * behavior in case a local/remote activation request for this
+     * option is received.
@@ -38,5 +43,4 @@ public class SimpleOptionHandler extends TelnetOptionHandler {
-     *
-     * @param optcode      - option code.
-     * @param initlocal    - if set to true, a WILL is sent upon connection.
-     * @param initremote   - if set to true, a DO is sent upon connection.
-     * @param acceptlocal  - if set to true, any DO request is accepted.
+     * @param optcode - option code.
+     * @param initlocal - if set to true, a WILL is sent upon connection.
+     * @param initremote - if set to true, a DO is sent upon connection.
+     * @param acceptlocal - if set to true, any DO request is accepted.
@@ -45,2 +49,8 @@ public class SimpleOptionHandler extends TelnetOptionHandler {
-    public SimpleOptionHandler(final int optcode, final boolean initlocal, final boolean initremote, final boolean acceptlocal, final boolean acceptremote) {
-        super(optcode, initlocal, initremote, acceptlocal, acceptremote);
+    public SimpleOptionHandler(final int optcode,
+                                final boolean initlocal,
+                                final boolean initremote,
+                                final boolean acceptlocal,
+                                final boolean acceptremote)
+    {
+        super(optcode, initlocal, initremote,
+                                      acceptlocal, acceptremote);
diff --git a/src/main/java/org/apache/commons/net/telnet/SuppressGAOptionHandler.java b/src/main/java/org/apache/commons/net/telnet/SuppressGAOptionHandler.java
index 17fb5413c..a4ed63678 100644
--- a/src/main/java/org/apache/commons/net/telnet/SuppressGAOptionHandler.java
+++ b/src/main/java/org/apache/commons/net/telnet/SuppressGAOptionHandler.java
@@ -23 +23,2 @@ package org.apache.commons.net.telnet;
-public class SuppressGAOptionHandler extends TelnetOptionHandler {
+public class SuppressGAOptionHandler extends TelnetOptionHandler
+{
@@ -25 +26,2 @@ public class SuppressGAOptionHandler extends TelnetOptionHandler {
-     * Constructor for the SuppressGAOptionHandler. Initial and accept behavior flags are set to false
+     * Constructor for the SuppressGAOptionHandler. Initial and accept
+     * behavior flags are set to false
@@ -27 +29,2 @@ public class SuppressGAOptionHandler extends TelnetOptionHandler {
-    public SuppressGAOptionHandler() {
+    public SuppressGAOptionHandler()
+    {
@@ -32,2 +35,4 @@ public class SuppressGAOptionHandler extends TelnetOptionHandler {
-     * Constructor for the SuppressGAOptionHandler. Allows defining desired initial setting for local/remote activation of this option and behavior in case a
-     * local/remote activation request for this option is received.
+     * Constructor for the SuppressGAOptionHandler. Allows defining desired
+     * initial setting for local/remote activation of this option and
+     * behavior in case a local/remote activation request for this
+     * option is received.
@@ -35,4 +40,3 @@ public class SuppressGAOptionHandler extends TelnetOptionHandler {
-     *
-     * @param initlocal    - if set to true, a WILL is sent upon connection.
-     * @param initremote   - if set to true, a DO is sent upon connection.
-     * @param acceptlocal  - if set to true, any DO request is accepted.
+     * @param initlocal - if set to true, a WILL is sent upon connection.
+     * @param initremote - if set to true, a DO is sent upon connection.
+     * @param acceptlocal - if set to true, any DO request is accepted.
@@ -41,2 +45,5 @@ public class SuppressGAOptionHandler extends TelnetOptionHandler {
-    public SuppressGAOptionHandler(final boolean initlocal, final boolean initremote, final boolean acceptlocal, final boolean acceptremote) {
-        super(TelnetOption.SUPPRESS_GO_AHEAD, initlocal, initremote, acceptlocal, acceptremote);
+    public SuppressGAOptionHandler(final boolean initlocal, final boolean initremote,
+                                final boolean acceptlocal, final boolean acceptremote)
+    {
+        super(TelnetOption.SUPPRESS_GO_AHEAD, initlocal, initremote,
+                                      acceptlocal, acceptremote);
diff --git a/src/main/java/org/apache/commons/net/telnet/Telnet.java b/src/main/java/org/apache/commons/net/telnet/Telnet.java
index 2c10ddbde..31952735a 100644
--- a/src/main/java/org/apache/commons/net/telnet/Telnet.java
+++ b/src/main/java/org/apache/commons/net/telnet/Telnet.java
@@ -28,2 +28,3 @@ import org.apache.commons.net.SocketClient;
-class Telnet extends SocketClient {
-    static final boolean debug = /* true; */ false;
+class Telnet extends SocketClient
+{
+    static final boolean debug =  /*true;*/ false;
@@ -31 +32 @@ class Telnet extends SocketClient {
-    static final boolean debugoptions = /* true; */ false;
+    static final boolean debugoptions =  /*true;*/ false;
@@ -33 +34,3 @@ class Telnet extends SocketClient {
-    static final byte[] COMMAND_DO = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO };
+    static final byte[] COMMAND_DO = {
+                                          (byte)TelnetCommand.IAC, (byte)TelnetCommand.DO
+                                      };
@@ -35 +38,3 @@ class Telnet extends SocketClient {
-    static final byte[] COMMAND_DONT = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.DONT };
+    static final byte[] COMMAND_DONT = {
+                                            (byte)TelnetCommand.IAC, (byte)TelnetCommand.DONT
+                                        };
@@ -37 +42,3 @@ class Telnet extends SocketClient {
-    static final byte[] COMMAND_WILL = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.WILL };
+    static final byte[] COMMAND_WILL = {
+                                            (byte)TelnetCommand.IAC, (byte)TelnetCommand.WILL
+                                        };
@@ -39 +46,3 @@ class Telnet extends SocketClient {
-    static final byte[] COMMAND_WONT = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT };
+    static final byte[] COMMAND_WONT = {
+                                            (byte)TelnetCommand.IAC, (byte)TelnetCommand.WONT
+                                        };
@@ -41 +50,3 @@ class Telnet extends SocketClient {
-    static final byte[] COMMAND_SB = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.SB };
+    static final byte[] COMMAND_SB = {
+                                          (byte)TelnetCommand.IAC, (byte)TelnetCommand.SB
+                                      };
@@ -43 +54,3 @@ class Telnet extends SocketClient {
-    static final byte[] COMMAND_SE = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.SE };
+    static final byte[] COMMAND_SE = {
+                                          (byte)TelnetCommand.IAC, (byte)TelnetCommand.SE
+                                      };
@@ -51 +64 @@ class Telnet extends SocketClient {
-    static final int DEFAULT_PORT = 23;
+    static final int DEFAULT_PORT =  23;
@@ -53 +66 @@ class Telnet extends SocketClient {
-    /* TERMINAL-TYPE option (start) */
+    /* TERMINAL-TYPE option (start)*/
@@ -61 +74 @@ class Telnet extends SocketClient {
-    protected static final int TERMINAL_TYPE_SEND = 1;
+    protected static final int TERMINAL_TYPE_SEND =  1;
@@ -65 +78 @@ class Telnet extends SocketClient {
-    protected static final int TERMINAL_TYPE_IS = 0;
+    protected static final int TERMINAL_TYPE_IS =  0;
@@ -70 +83,3 @@ class Telnet extends SocketClient {
-    static final byte[] COMMAND_IS = { (byte) TERMINAL_TYPE, (byte) TERMINAL_TYPE_IS };
+    static final byte[] COMMAND_IS = {
+                                          (byte) TERMINAL_TYPE, (byte) TERMINAL_TYPE_IS
+                                      };
@@ -72 +87 @@ class Telnet extends SocketClient {
-    /* Code Section added for supporting AYT (start) */
+    /* Code Section added for supporting AYT (start)*/
@@ -76 +91,3 @@ class Telnet extends SocketClient {
-    static final byte[] COMMAND_AYT = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.AYT };
+    static final byte[] COMMAND_AYT = {
+                                          (byte) TelnetCommand.IAC, (byte) TelnetCommand.AYT
+                                       };
@@ -88 +105 @@ class Telnet extends SocketClient {
-    /* TERMINAL-TYPE option (end) */
+    /* TERMINAL-TYPE option (end)*/
@@ -90 +107 @@ class Telnet extends SocketClient {
-    /* open TelnetOptionHandler functionality (end) */
+    /* open TelnetOptionHandler functionality (end)*/
@@ -92 +109 @@ class Telnet extends SocketClient {
-    /* open TelnetOptionHandler functionality (start) */
+    /* open TelnetOptionHandler functionality (start)*/
@@ -107 +124 @@ class Telnet extends SocketClient {
-    /* Code Section added for supporting AYT (end) */
+    /* Code Section added for supporting AYT (end)*/
@@ -118 +134,0 @@ class Telnet extends SocketClient {
-
@@ -122 +138,2 @@ class Telnet extends SocketClient {
-    Telnet() {
+    Telnet()
+    {
@@ -127 +144,2 @@ class Telnet extends SocketClient {
-        optionHandlers = new TelnetOptionHandler[TelnetOption.MAX_OPTION_VALUE + 1];
+        optionHandlers =
+            new TelnetOptionHandler[TelnetOption.MAX_OPTION_VALUE + 1];
@@ -130 +148 @@ class Telnet extends SocketClient {
-    /* TERMINAL-TYPE option (start) */
+    /* TERMINAL-TYPE option (start)*/
@@ -136 +154,2 @@ class Telnet extends SocketClient {
-    Telnet(final String termtype) {
+    Telnet(final String termtype)
+    {
@@ -142 +161,2 @@ class Telnet extends SocketClient {
-        optionHandlers = new TelnetOptionHandler[TelnetOption.MAX_OPTION_VALUE + 1];
+        optionHandlers =
+            new TelnetOptionHandler[TelnetOption.MAX_OPTION_VALUE + 1];
@@ -144 +164 @@ class Telnet extends SocketClient {
-    /* TERMINAL-TYPE option (end) */
+    /* TERMINAL-TYPE option (end)*/
@@ -152,3 +172,5 @@ class Telnet extends SocketClient {
-    protected void _connectAction_() throws IOException {
-        /* (start). BUGFIX: clean the option info for each connection */
-        for (int ii = 0; ii < TelnetOption.MAX_OPTION_VALUE + 1; ii++) {
+    protected void _connectAction_() throws IOException
+    {
+        /* (start). BUGFIX: clean the option info for each connection*/
+        for (int ii = 0; ii < TelnetOption.MAX_OPTION_VALUE + 1; ii++)
+        {
@@ -158 +180,2 @@ class Telnet extends SocketClient {
-            if (optionHandlers[ii] != null) {
+            if (optionHandlers[ii] != null)
+            {
@@ -163 +186 @@ class Telnet extends SocketClient {
-        /* (end). BUGFIX: clean the option info for each connection */
+        /* (end). BUGFIX: clean the option info for each connection*/
@@ -169,4 +192,7 @@ class Telnet extends SocketClient {
-        /* open TelnetOptionHandler functionality (start) */
-        for (int ii = 0; ii < TelnetOption.MAX_OPTION_VALUE + 1; ii++) {
-            if (optionHandlers[ii] != null) {
-                if (optionHandlers[ii].getInitLocal()) {
+        /* open TelnetOptionHandler functionality (start)*/
+        for (int ii = 0; ii < TelnetOption.MAX_OPTION_VALUE + 1; ii++)
+        {
+            if (optionHandlers[ii] != null)
+            {
+                if (optionHandlers[ii].getInitLocal())
+                {
@@ -176 +202,2 @@ class Telnet extends SocketClient {
-                if (optionHandlers[ii].getInitRemote()) {
+                if (optionHandlers[ii].getInitRemote())
+                {
@@ -181 +208 @@ class Telnet extends SocketClient {
-        /* open TelnetOptionHandler functionality (end) */
+        /* open TelnetOptionHandler functionality (end)*/
@@ -184 +211 @@ class Telnet extends SocketClient {
-    /* Code Section added for supporting spystreams (start) */
+    /* Code Section added for supporting spystreams (start)*/
@@ -186 +213,2 @@ class Telnet extends SocketClient {
-     * Registers an OutputStream for spying what's going on in the Telnet session.
+     * Registers an OutputStream for spying what's going on in
+     * the Telnet session.
@@ -188 +216,2 @@ class Telnet extends SocketClient {
-     * @param spystream - OutputStream on which session activity will be echoed.
+     * @param spystream - OutputStream on which session activity
+     * will be echoed.
@@ -190 +219,2 @@ class Telnet extends SocketClient {
-    void _registerSpyStream(final OutputStream spystream) {
+    void _registerSpyStream(final OutputStream  spystream)
+    {
@@ -194 +224 @@ class Telnet extends SocketClient {
-    /* Code Section added for supporting AYT (start) */
+    /* Code Section added for supporting AYT (start)*/
@@ -199 +229 @@ class Telnet extends SocketClient {
-     * @throws IOException              - Exception in I/O.
+     * @throws IOException - Exception in I/O.
@@ -201 +231 @@ class Telnet extends SocketClient {
-     * @throws InterruptedException     - Interrupted during wait.
+     * @throws InterruptedException - Interrupted during wait.
@@ -204 +234,3 @@ class Telnet extends SocketClient {
-    final boolean _sendAYT(final long timeout) throws IOException, IllegalArgumentException, InterruptedException {
+    final boolean _sendAYT(final long timeout)
+    throws IOException, IllegalArgumentException, InterruptedException
+    {
@@ -206,2 +238,4 @@ class Telnet extends SocketClient {
-        synchronized (aytMonitor) {
-            synchronized (this) {
+        synchronized (aytMonitor)
+        {
+            synchronized (this)
+            {
@@ -213 +247,2 @@ class Telnet extends SocketClient {
-            if (!aytFlag) {
+            if (!aytFlag)
+            {
@@ -215 +250,3 @@ class Telnet extends SocketClient {
-            } else {
+            }
+            else
+            {
@@ -222 +259 @@ class Telnet extends SocketClient {
-    /* Code Section added for supporting AYT (end) */
+    /* Code Section added for supporting AYT (end)*/
@@ -231,4 +268,5 @@ class Telnet extends SocketClient {
-    final synchronized void _sendCommand(final byte cmd) throws IOException {
-        _output_.write(TelnetCommand.IAC);
-        _output_.write(cmd);
-        _output_.flush();
+    final synchronized void _sendCommand(final byte cmd) throws IOException
+    {
+            _output_.write(TelnetCommand.IAC);
+            _output_.write(cmd);
+            _output_.flush();
@@ -237 +275 @@ class Telnet extends SocketClient {
-    /* open TelnetOptionHandler functionality (start) */
+    /* open TelnetOptionHandler functionality (start)*/
@@ -244,2 +282,5 @@ class Telnet extends SocketClient {
-    final synchronized void _sendSubnegotiation(final int[] subn) throws IOException {
-        if (debug) {
+    final synchronized void _sendSubnegotiation(final int[] subn)
+    throws IOException
+    {
+        if (debug)
+        {
@@ -247 +288,2 @@ class Telnet extends SocketClient {
-            if (subn != null) {
+            if (subn != null)
+            {
@@ -251 +293,2 @@ class Telnet extends SocketClient {
-        if (subn != null) {
+        if (subn != null)
+        {
@@ -254 +297,2 @@ class Telnet extends SocketClient {
-            for (final int element : subn) {
+            for (final int element : subn)
+            {
@@ -263 +307 @@ class Telnet extends SocketClient {
-            /* Code Section added for sending the negotiation ASAP (start) */
+            /* Code Section added for sending the negotiation ASAP (start)*/
@@ -265 +309 @@ class Telnet extends SocketClient {
-            /* Code Section added for sending the negotiation ASAP (end) */
+            /* Code Section added for sending the negotiation ASAP (end)*/
@@ -268 +312 @@ class Telnet extends SocketClient {
-    /* open TelnetOptionHandler functionality (end) */
+    /* open TelnetOptionHandler functionality (end)*/
@@ -274 +318,2 @@ class Telnet extends SocketClient {
-    void _stopSpyStream() {
+    void _stopSpyStream()
+    {
@@ -279 +324 @@ class Telnet extends SocketClient {
-     * Registers a new TelnetOptionHandler for this telnet to use.
+     * Registers a new TelnetOptionHandler for this telnet  to use.
@@ -283 +328 @@ class Telnet extends SocketClient {
-     * @throws IOException                  on error
+     * @throws IOException on error
@@ -285 +330,3 @@ class Telnet extends SocketClient {
-    void addOptionHandler(final TelnetOptionHandler opthand) throws InvalidTelnetOptionException, IOException {
+    void addOptionHandler(final TelnetOptionHandler opthand)
+    throws InvalidTelnetOptionException, IOException
+    {
@@ -288 +335,2 @@ class Telnet extends SocketClient {
-            throw new InvalidTelnetOptionException("Invalid Option Code", optcode);
+            throw new InvalidTelnetOptionException(
+                "Invalid Option Code", optcode);
@@ -291 +339,2 @@ class Telnet extends SocketClient {
-            throw new InvalidTelnetOptionException("Already registered option", optcode);
+            throw new InvalidTelnetOptionException(
+                "Already registered option", optcode);
@@ -294,2 +343,4 @@ class Telnet extends SocketClient {
-        if (isConnected()) {
-            if (opthand.getInitLocal()) {
+        if (isConnected())
+        {
+            if (opthand.getInitLocal())
+            {
@@ -299 +350,2 @@ class Telnet extends SocketClient {
-            if (opthand.getInitRemote()) {
+            if (opthand.getInitRemote())
+            {
@@ -306 +358 @@ class Telnet extends SocketClient {
-     * Unregisters a TelnetOptionHandler.
+     * Unregisters a  TelnetOptionHandler.
@@ -310 +362 @@ class Telnet extends SocketClient {
-     * @throws IOException                  on error
+     * @throws IOException on error
@@ -312 +364,3 @@ class Telnet extends SocketClient {
-    void deleteOptionHandler(final int optcode) throws InvalidTelnetOptionException, IOException {
+    void deleteOptionHandler(final int optcode)
+    throws InvalidTelnetOptionException, IOException
+    {
@@ -314 +368,2 @@ class Telnet extends SocketClient {
-            throw new InvalidTelnetOptionException("Invalid Option Code", optcode);
+            throw new InvalidTelnetOptionException(
+                "Invalid Option Code", optcode);
@@ -316,2 +371,4 @@ class Telnet extends SocketClient {
-        if (optionHandlers[optcode] == null) {
-            throw new InvalidTelnetOptionException("Unregistered option", optcode);
+        if (optionHandlers[optcode] == null)
+        {
+            throw new InvalidTelnetOptionException(
+                "Unregistered option", optcode);
@@ -322 +379,2 @@ class Telnet extends SocketClient {
-        if (opthand.getWill()) {
+        if (opthand.getWill())
+        {
@@ -326 +384,2 @@ class Telnet extends SocketClient {
-        if (opthand.getDo()) {
+        if (opthand.getDo())
+        {
@@ -330 +389 @@ class Telnet extends SocketClient {
-    /* open TelnetOptionHandler functionality (end) */
+    /* open TelnetOptionHandler functionality (end)*/
@@ -332 +391 @@ class Telnet extends SocketClient {
-    /* Code Section added for supporting AYT (start) */
+    /* Code Section added for supporting AYT (start)*/
@@ -336,3 +395,6 @@ class Telnet extends SocketClient {
-    final synchronized void processAYTResponse() {
-        if (!aytFlag) {
-            synchronized (aytMonitor) {
+    final synchronized void processAYTResponse()
+    {
+        if (!aytFlag)
+        {
+            synchronized (aytMonitor)
+            {
@@ -344 +406 @@ class Telnet extends SocketClient {
-    /* Code Section added for supporting AYT (end) */
+    /* Code Section added for supporting AYT (end)*/
@@ -351,2 +413,4 @@ class Telnet extends SocketClient {
-    void processCommand(final int command) {
-        if (debugoptions) {
+    void processCommand(final int command)
+    {
+        if (debugoptions)
+        {
@@ -356,2 +420,4 @@ class Telnet extends SocketClient {
-        if (notifhand != null) {
-            notifhand.receivedNegotiation(TelnetNotificationHandler.RECEIVED_COMMAND, command);
+        if (notifhand != null)
+        {
+            notifhand.receivedNegotiation(
+                TelnetNotificationHandler.RECEIVED_COMMAND, command);
@@ -367,3 +433,6 @@ class Telnet extends SocketClient {
-    void processDo(final int option) throws IOException {
-        if (debugoptions) {
-            System.err.println("RECEIVED DO: " + TelnetOption.getOption(option));
+    void processDo(final int option) throws IOException
+    {
+        if (debugoptions)
+        {
+            System.err.println("RECEIVED DO: "
+                + TelnetOption.getOption(option));
@@ -372,2 +441,5 @@ class Telnet extends SocketClient {
-        if (notifhand != null) {
-            notifhand.receivedNegotiation(TelnetNotificationHandler.RECEIVED_DO, option);
+        if (notifhand != null)
+        {
+            notifhand.receivedNegotiation(
+                TelnetNotificationHandler.RECEIVED_DO,
+                option);
@@ -378,2 +450,4 @@ class Telnet extends SocketClient {
-        /* open TelnetOptionHandler functionality (start) */
-        if (optionHandlers[option] != null) {
+
+        /* open TelnetOptionHandler functionality (start)*/
+        if (optionHandlers[option] != null)
+        {
@@ -381 +455,2 @@ class Telnet extends SocketClient {
-        } else if (option == TERMINAL_TYPE && terminalType != null && !terminalType.isEmpty()) {
+        } else if (option == TERMINAL_TYPE && terminalType != null && !terminalType.isEmpty())
+        {
@@ -384,2 +459,2 @@ class Telnet extends SocketClient {
-        /* TERMINAL-TYPE option (end) */
-        /* open TelnetOptionHandler functionality (start) */
+        /* TERMINAL-TYPE option (end)*/
+      /* open TelnetOptionHandler functionality (start)*/
@@ -387 +462,2 @@ class Telnet extends SocketClient {
-        if (willResponse[option] > 0) {
+        if (willResponse[option] > 0)
+        {
@@ -389 +465,2 @@ class Telnet extends SocketClient {
-            if (willResponse[option] > 0 && stateIsWill(option)) {
+            if (willResponse[option] > 0 && stateIsWill(option))
+            {
@@ -394,2 +471,4 @@ class Telnet extends SocketClient {
-        if (willResponse[option] == 0) {
-            if (requestedWont(option)) {
+        if (willResponse[option] == 0)
+        {
+            if (requestedWont(option))
+            {
@@ -397 +476,2 @@ class Telnet extends SocketClient {
-                switch (option) {
+                switch (option)
+                {
@@ -404 +484,3 @@ class Telnet extends SocketClient {
-                if (acceptNewState) {
+
+                if (acceptNewState)
+                {
@@ -407 +489,3 @@ class Telnet extends SocketClient {
-                } else {
+                }
+                else
+                {
@@ -411 +495,3 @@ class Telnet extends SocketClient {
-            } else {
+            }
+            else
+            {
@@ -414 +500,2 @@ class Telnet extends SocketClient {
-                switch (option) {
+                switch (option)
+                {
@@ -433,3 +520,6 @@ class Telnet extends SocketClient {
-    void processDont(final int option) throws IOException {
-        if (debugoptions) {
-            System.err.println("RECEIVED DONT: " + TelnetOption.getOption(option));
+    void processDont(final int option) throws IOException
+    {
+        if (debugoptions)
+        {
+            System.err.println("RECEIVED DONT: "
+                + TelnetOption.getOption(option));
@@ -437,2 +527,5 @@ class Telnet extends SocketClient {
-        if (notifhand != null) {
-            notifhand.receivedNegotiation(TelnetNotificationHandler.RECEIVED_DONT, option);
+        if (notifhand != null)
+        {
+            notifhand.receivedNegotiation(
+                TelnetNotificationHandler.RECEIVED_DONT,
+                option);
@@ -440 +533,2 @@ class Telnet extends SocketClient {
-        if (willResponse[option] > 0) {
+        if (willResponse[option] > 0)
+        {
@@ -442 +536,2 @@ class Telnet extends SocketClient {
-            if (willResponse[option] > 0 && stateIsWont(option)) {
+            if (willResponse[option] > 0 && stateIsWont(option))
+            {
@@ -447 +542,2 @@ class Telnet extends SocketClient {
-        if (willResponse[option] == 0 && requestedWill(option)) {
+        if (willResponse[option] == 0 && requestedWill(option))
+        {
@@ -449 +545,2 @@ class Telnet extends SocketClient {
-            switch (option) {
+            switch (option)
+            {
@@ -456,2 +553,3 @@ class Telnet extends SocketClient {
-            /* FIX for a BUG in the negotiation (start) */
-            if (stateIsWill(option) || requestedWill(option)) {
+            /* FIX for a BUG in the negotiation (start)*/
+            if (stateIsWill(option) || requestedWill(option))
+            {
@@ -462 +560 @@ class Telnet extends SocketClient {
-            /* FIX for a BUG in the negotiation (end) */
+            /* FIX for a BUG in the negotiation (end)*/
@@ -468 +566 @@ class Telnet extends SocketClient {
-    /* TERMINAL-TYPE option (start) */
+    /* TERMINAL-TYPE option (start)*/
@@ -472 +570 @@ class Telnet extends SocketClient {
-     * @param suboption       - subnegotiation data received
+     * @param suboption - subnegotiation data received
@@ -476,2 +574,5 @@ class Telnet extends SocketClient {
-    void processSuboption(final int[] suboption, final int suboptionLength) throws IOException {
-        if (debug) {
+    void processSuboption(final int[] suboption, final int suboptionLength)
+    throws IOException
+    {
+        if (debug)
+        {
@@ -481,4 +582,8 @@ class Telnet extends SocketClient {
-        /* open TelnetOptionHandler functionality (start) */
-        if (suboptionLength > 0) {
-            if (optionHandlers[suboption[0]] != null) {
-                final int[] responseSuboption = optionHandlers[suboption[0]].answerSubnegotiation(suboption, suboptionLength);
+        /* open TelnetOptionHandler functionality (start)*/
+        if (suboptionLength > 0)
+        {
+            if (optionHandlers[suboption[0]] != null)
+            {
+                final int[] responseSuboption =
+                  optionHandlers[suboption[0]].answerSubnegotiation(suboption,
+                  suboptionLength);
@@ -486,4 +591,8 @@ class Telnet extends SocketClient {
-            } else if (suboptionLength > 1) {
-                if (debug) {
-                    for (int ii = 0; ii < suboptionLength; ii++) {
-                        System.err.println("SUB[" + ii + "]: " + suboption[ii]);
+            } else if (suboptionLength > 1)
+            {
+                if (debug)
+                {
+                    for (int ii = 0; ii < suboptionLength; ii++)
+                    {
+                        System.err.println("SUB[" + ii + "]: "
+                            + suboption[ii]);
@@ -492 +601,3 @@ class Telnet extends SocketClient {
-                if (suboption[0] == TERMINAL_TYPE && suboption[1] == TERMINAL_TYPE_SEND) {
+                if (suboption[0] == TERMINAL_TYPE
+                    && suboption[1] == TERMINAL_TYPE_SEND)
+                {
@@ -497 +608 @@ class Telnet extends SocketClient {
-        /* open TelnetOptionHandler functionality (end) */
+        /* open TelnetOptionHandler functionality (end)*/
@@ -506,3 +617,6 @@ class Telnet extends SocketClient {
-    void processWill(final int option) throws IOException {
-        if (debugoptions) {
-            System.err.println("RECEIVED WILL: " + TelnetOption.getOption(option));
+    void processWill(final int option) throws IOException
+    {
+        if (debugoptions)
+        {
+            System.err.println("RECEIVED WILL: "
+                + TelnetOption.getOption(option));
@@ -511,2 +625,5 @@ class Telnet extends SocketClient {
-        if (notifhand != null) {
-            notifhand.receivedNegotiation(TelnetNotificationHandler.RECEIVED_WILL, option);
+        if (notifhand != null)
+        {
+            notifhand.receivedNegotiation(
+                TelnetNotificationHandler.RECEIVED_WILL,
+                option);
@@ -517,2 +634,3 @@ class Telnet extends SocketClient {
-        /* open TelnetOptionHandler functionality (start) */
-        if (optionHandlers[option] != null) {
+        /* open TelnetOptionHandler functionality (start)*/
+        if (optionHandlers[option] != null)
+        {
@@ -521 +639 @@ class Telnet extends SocketClient {
-        /* open TelnetOptionHandler functionality (end) */
+        /* open TelnetOptionHandler functionality (end)*/
@@ -523 +641,2 @@ class Telnet extends SocketClient {
-        if (doResponse[option] > 0) {
+        if (doResponse[option] > 0)
+        {
@@ -525 +644,2 @@ class Telnet extends SocketClient {
-            if (doResponse[option] > 0 && stateIsDo(option)) {
+            if (doResponse[option] > 0 && stateIsDo(option))
+            {
@@ -530 +650,2 @@ class Telnet extends SocketClient {
-        if (doResponse[option] == 0 && requestedDont(option)) {
+        if (doResponse[option] == 0 && requestedDont(option))
+        {
@@ -532 +653,2 @@ class Telnet extends SocketClient {
-            switch (option) {
+            switch (option)
+            {
@@ -539 +661,3 @@ class Telnet extends SocketClient {
-            if (acceptNewState) {
+
+            if (acceptNewState)
+            {
@@ -542 +666,3 @@ class Telnet extends SocketClient {
-            } else {
+            }
+            else
+            {
@@ -557,3 +683,6 @@ class Telnet extends SocketClient {
-    void processWont(final int option) throws IOException {
-        if (debugoptions) {
-            System.err.println("RECEIVED WONT: " + TelnetOption.getOption(option));
+    void processWont(final int option) throws IOException
+    {
+        if (debugoptions)
+        {
+            System.err.println("RECEIVED WONT: "
+                + TelnetOption.getOption(option));
@@ -562,2 +691,5 @@ class Telnet extends SocketClient {
-        if (notifhand != null) {
-            notifhand.receivedNegotiation(TelnetNotificationHandler.RECEIVED_WONT, option);
+        if (notifhand != null)
+        {
+            notifhand.receivedNegotiation(
+                TelnetNotificationHandler.RECEIVED_WONT,
+                option);
@@ -566 +698,2 @@ class Telnet extends SocketClient {
-        if (doResponse[option] > 0) {
+        if (doResponse[option] > 0)
+        {
@@ -568 +701,2 @@ class Telnet extends SocketClient {
-            if (doResponse[option] > 0 && stateIsDont(option)) {
+            if (doResponse[option] > 0 && stateIsDont(option))
+            {
@@ -573 +707,2 @@ class Telnet extends SocketClient {
-        if (doResponse[option] == 0 && requestedDo(option)) {
+        if (doResponse[option] == 0 && requestedDo(option))
+        {
@@ -575 +710,2 @@ class Telnet extends SocketClient {
-            switch (option) {
+            switch (option)
+            {
@@ -582,2 +718,3 @@ class Telnet extends SocketClient {
-            /* FIX for a BUG in the negotiation (start) */
-            if (stateIsDo(option) || requestedDo(option)) {
+            /* FIX for a BUG in the negotiation (start)*/
+            if (stateIsDo(option) || requestedDo(option))
+            {
@@ -588 +725 @@ class Telnet extends SocketClient {
-            /* FIX for a BUG in the negotiation (end) */
+            /* FIX for a BUG in the negotiation (end)*/
@@ -595 +732,2 @@ class Telnet extends SocketClient {
-     * Registers a notification handler to which will be sent notifications of received telnet option negotiation commands.
+     * Registers a notification handler to which will be sent
+     * notifications of received telnet option negotiation commands.
@@ -599 +737,2 @@ class Telnet extends SocketClient {
-    public void registerNotifHandler(final TelnetNotificationHandler notifhand) {
+    public void registerNotifHandler(final TelnetNotificationHandler  notifhand)
+    {
@@ -609,3 +748,7 @@ class Telnet extends SocketClient {
-    final synchronized void requestDo(final int option) throws IOException {
-        if (doResponse[option] == 0 && stateIsDo(option) || requestedDo(option)) {
-            return;
+    final synchronized void requestDo(final int option)
+    throws IOException
+    {
+        if (doResponse[option] == 0 && stateIsDo(option)
+            || requestedDo(option))
+        {
+            return ;
@@ -624,3 +767,7 @@ class Telnet extends SocketClient {
-    final synchronized void requestDont(final int option) throws IOException {
-        if (doResponse[option] == 0 && stateIsDont(option) || requestedDont(option)) {
-            return;
+    final synchronized void requestDont(final int option)
+    throws IOException
+    {
+        if (doResponse[option] == 0 && stateIsDont(option)
+            || requestedDont(option))
+        {
+            return ;
@@ -640 +787,2 @@ class Telnet extends SocketClient {
-    boolean requestedDo(final int option) {
+    boolean requestedDo(final int option)
+    {
@@ -643,0 +792 @@ class Telnet extends SocketClient {
+
@@ -651 +800,2 @@ class Telnet extends SocketClient {
-    boolean requestedDont(final int option) {
+    boolean requestedDont(final int option)
+    {
@@ -662 +812,2 @@ class Telnet extends SocketClient {
-    boolean requestedWill(final int option) {
+    boolean requestedWill(final int option)
+    {
@@ -673 +824,2 @@ class Telnet extends SocketClient {
-    boolean requestedWont(final int option) {
+    boolean requestedWont(final int option)
+    {
@@ -683,3 +835,7 @@ class Telnet extends SocketClient {
-    final synchronized void requestWill(final int option) throws IOException {
-        if (willResponse[option] == 0 && stateIsWill(option) || requestedWill(option)) {
-            return;
+    final synchronized void requestWill(final int option)
+    throws IOException
+    {
+        if (willResponse[option] == 0 && stateIsWill(option)
+            || requestedWill(option))
+        {
+            return ;
@@ -692 +848 @@ class Telnet extends SocketClient {
-    /* TERMINAL-TYPE option (end) */
+    /* TERMINAL-TYPE option (end)*/
@@ -700,3 +856,7 @@ class Telnet extends SocketClient {
-    final synchronized void requestWont(final int option) throws IOException {
-        if (willResponse[option] == 0 && stateIsWont(option) || requestedWont(option)) {
-            return;
+    final synchronized void requestWont(final int option)
+    throws IOException
+    {
+        if (willResponse[option] == 0 && stateIsWont(option)
+            || requestedWont(option))
+        {
+            return ;
@@ -715 +875,3 @@ class Telnet extends SocketClient {
-    final synchronized void sendByte(final int b) throws IOException {
+    final synchronized void sendByte(final int b)
+    throws IOException
+    {
@@ -718 +880 @@ class Telnet extends SocketClient {
-        /* Code Section added for supporting spystreams (start) */
+        /* Code Section added for supporting spystreams (start)*/
@@ -720 +882 @@ class Telnet extends SocketClient {
-        /* Code Section added for supporting spystreams (end) */
+        /* Code Section added for supporting spystreams (end)*/
@@ -730,2 +892,5 @@ class Telnet extends SocketClient {
-    final synchronized void sendDo(final int option) throws IOException {
-        if (debug || debugoptions) {
+    final synchronized void sendDo(final int option)
+    throws IOException
+    {
+        if (debug || debugoptions)
+        {
@@ -737 +902 @@ class Telnet extends SocketClient {
-        /* Code Section added for sending the negotiation ASAP (start) */
+        /* Code Section added for sending the negotiation ASAP (start)*/
@@ -739 +904 @@ class Telnet extends SocketClient {
-        /* Code Section added for sending the negotiation ASAP (end) */
+        /* Code Section added for sending the negotiation ASAP (end)*/
@@ -748,2 +913,5 @@ class Telnet extends SocketClient {
-    final synchronized void sendDont(final int option) throws IOException {
-        if (debug || debugoptions) {
+    final synchronized void sendDont(final int option)
+    throws IOException
+    {
+        if (debug || debugoptions)
+        {
@@ -755 +923 @@ class Telnet extends SocketClient {
-        /* Code Section added for sending the negotiation ASAP (start) */
+        /* Code Section added for sending the negotiation ASAP (start)*/
@@ -757 +925 @@ class Telnet extends SocketClient {
-        /* Code Section added for sending the negotiation ASAP (end) */
+        /* Code Section added for sending the negotiation ASAP (end)*/
@@ -765,2 +933,5 @@ class Telnet extends SocketClient {
-    final synchronized void sendTerminalType() throws IOException {
-        if (debug) {
+    final synchronized void sendTerminalType()
+    throws IOException
+    {
+        if (debug)
+        {
@@ -769 +940,2 @@ class Telnet extends SocketClient {
-        if (terminalType != null) {
+        if (terminalType != null)
+        {
@@ -784,2 +956,5 @@ class Telnet extends SocketClient {
-    final synchronized void sendWill(final int option) throws IOException {
-        if (debug || debugoptions) {
+    final synchronized void sendWill(final int option)
+    throws IOException
+    {
+        if (debug || debugoptions)
+        {
@@ -791 +966 @@ class Telnet extends SocketClient {
-        /* Code Section added for sending the negotiation ASAP (start) */
+        /* Code Section added for sending the negotiation ASAP (start)*/
@@ -793 +968 @@ class Telnet extends SocketClient {
-        /* Code Section added for sending the negotiation ASAP (end) */
+        /* Code Section added for sending the negotiation ASAP (end)*/
@@ -802,2 +977,5 @@ class Telnet extends SocketClient {
-    final synchronized void sendWont(final int option) throws IOException {
-        if (debug || debugoptions) {
+    final synchronized void sendWont(final int option)
+    throws IOException
+    {
+        if (debug || debugoptions)
+        {
@@ -809 +987 @@ class Telnet extends SocketClient {
-        /* Code Section added for sending the negotiation ASAP (start) */
+        /* Code Section added for sending the negotiation ASAP (start)*/
@@ -811 +989 @@ class Telnet extends SocketClient {
-        /* Code Section added for sending the negotiation ASAP (end) */
+        /* Code Section added for sending the negotiation ASAP (end)*/
@@ -820 +998,2 @@ class Telnet extends SocketClient {
-    void setDo(final int option) throws IOException {
+    void setDo(final int option) throws IOException
+    {
@@ -823,2 +1002,3 @@ class Telnet extends SocketClient {
-        /* open TelnetOptionHandler functionality (start) */
-        if (requestedDo(option) && (optionHandlers[option] != null)) {
+        /* open TelnetOptionHandler functionality (start)*/
+        if (requestedDo(option) && (optionHandlers[option] != null))
+        {
@@ -827 +1007,2 @@ class Telnet extends SocketClient {
-            final int[] subneg = optionHandlers[option].startSubnegotiationRemote();
+            final int[] subneg =
+                optionHandlers[option].startSubnegotiationRemote();
@@ -829 +1010,2 @@ class Telnet extends SocketClient {
-            if (subneg != null) {
+            if (subneg != null)
+            {
@@ -833 +1015 @@ class Telnet extends SocketClient {
-        /* open TelnetOptionHandler functionality (end) */
+        /* open TelnetOptionHandler functionality (end)*/
@@ -835,0 +1018 @@ class Telnet extends SocketClient {
+
@@ -841 +1024,2 @@ class Telnet extends SocketClient {
-    void setDont(final int option) {
+    void setDont(final int option)
+    {
@@ -844,2 +1028,3 @@ class Telnet extends SocketClient {
-        /* open TelnetOptionHandler functionality (start) */
-        if (optionHandlers[option] != null) {
+        /* open TelnetOptionHandler functionality (start)*/
+        if (optionHandlers[option] != null)
+        {
@@ -848 +1033 @@ class Telnet extends SocketClient {
-        /* open TelnetOptionHandler functionality (end) */
+        /* open TelnetOptionHandler functionality (end)*/
@@ -856 +1041,2 @@ class Telnet extends SocketClient {
-    void setWantDo(final int option) {
+    void setWantDo(final int option)
+    {
@@ -865 +1051,2 @@ class Telnet extends SocketClient {
-    void setWantDont(final int option) {
+    void setWantDont(final int option)
+    {
@@ -874 +1061,2 @@ class Telnet extends SocketClient {
-    void setWantWill(final int option) {
+    void setWantWill(final int option)
+    {
@@ -883 +1071,2 @@ class Telnet extends SocketClient {
-    void setWantWont(final int option) {
+    void setWantWont(final int option)
+    {
@@ -893 +1082,2 @@ class Telnet extends SocketClient {
-    void setWill(final int option) throws IOException {
+    void setWill(final int option) throws IOException
+    {
@@ -896,2 +1086,3 @@ class Telnet extends SocketClient {
-        /* open TelnetOptionHandler functionality (start) */
-        if (requestedWill(option) && (optionHandlers[option] != null)) {
+        /* open TelnetOptionHandler functionality (start)*/
+        if (requestedWill(option) && (optionHandlers[option] != null))
+        {
@@ -900 +1091,2 @@ class Telnet extends SocketClient {
-            final int[] subneg = optionHandlers[option].startSubnegotiationLocal();
+            final int[] subneg =
+                optionHandlers[option].startSubnegotiationLocal();
@@ -902 +1094,2 @@ class Telnet extends SocketClient {
-            if (subneg != null) {
+            if (subneg != null)
+            {
@@ -906 +1099 @@ class Telnet extends SocketClient {
-        /* open TelnetOptionHandler functionality (end) */
+        /* open TelnetOptionHandler functionality (end)*/
@@ -909 +1102 @@ class Telnet extends SocketClient {
-    /* open TelnetOptionHandler functionality (start) */
+    /* open TelnetOptionHandler functionality (start)*/
@@ -916 +1109,2 @@ class Telnet extends SocketClient {
-    void setWont(final int option) {
+    void setWont(final int option)
+    {
@@ -919,2 +1113,3 @@ class Telnet extends SocketClient {
-        /* open TelnetOptionHandler functionality (start) */
-        if (optionHandlers[option] != null) {
+        /* open TelnetOptionHandler functionality (start)*/
+        if (optionHandlers[option] != null)
+        {
@@ -923 +1118 @@ class Telnet extends SocketClient {
-        /* open TelnetOptionHandler functionality (end) */
+        /* open TelnetOptionHandler functionality (end)*/
@@ -931 +1126,2 @@ class Telnet extends SocketClient {
-    void spyRead(final int ch) {
+    void spyRead(final int ch)
+    {
@@ -933,2 +1129,4 @@ class Telnet extends SocketClient {
-        if (spy != null) {
-            try {
+        if (spy != null)
+        {
+            try
+            {
@@ -937 +1135,2 @@ class Telnet extends SocketClient {
-                    if (ch == '\n') {
+                    if (ch == '\n')
+                    {
@@ -943 +1142,3 @@ class Telnet extends SocketClient {
-            } catch (final IOException e) {
+            }
+            catch (final IOException e)
+            {
@@ -954,2 +1155,5 @@ class Telnet extends SocketClient {
-    void spyWrite(final int ch) {
-        if (!(stateIsDo(TelnetOption.ECHO) && requestedDo(TelnetOption.ECHO))) {
+    void spyWrite(final int ch)
+    {
+        if (!(stateIsDo(TelnetOption.ECHO)
+            && requestedDo(TelnetOption.ECHO)))
+        {
@@ -957,2 +1161,4 @@ class Telnet extends SocketClient {
-            if (spy != null) {
-                try {
+            if (spy != null)
+            {
+                try
+                {
@@ -961 +1167,3 @@ class Telnet extends SocketClient {
-                } catch (final IOException e) {
+                }
+                catch (final IOException e)
+                {
@@ -967 +1175 @@ class Telnet extends SocketClient {
-    /* Code Section added for supporting spystreams (end) */
+    /* Code Section added for supporting spystreams (end)*/
@@ -976 +1184,2 @@ class Telnet extends SocketClient {
-    boolean stateIsDo(final int option) {
+    boolean stateIsDo(final int option)
+    {
@@ -987 +1196,2 @@ class Telnet extends SocketClient {
-    boolean stateIsDont(final int option) {
+    boolean stateIsDont(final int option)
+    {
@@ -998 +1208,2 @@ class Telnet extends SocketClient {
-    boolean stateIsWill(final int option) {
+    boolean stateIsWill(final int option)
+    {
@@ -1009 +1220,2 @@ class Telnet extends SocketClient {
-    boolean stateIsWont(final int option) {
+    boolean stateIsWont(final int option)
+    {
@@ -1017 +1229,2 @@ class Telnet extends SocketClient {
-    public void unregisterNotifHandler() {
+    public void unregisterNotifHandler()
+    {
diff --git a/src/main/java/org/apache/commons/net/telnet/TelnetClient.java b/src/main/java/org/apache/commons/net/telnet/TelnetClient.java
index bd197531f..f491b1221 100644
--- a/src/main/java/org/apache/commons/net/telnet/TelnetClient.java
+++ b/src/main/java/org/apache/commons/net/telnet/TelnetClient.java
@@ -26,2 +26,5 @@ import java.io.OutputStream;
- * The TelnetClient class implements the simple network virtual terminal (NVT) for the Telnet protocol according to RFC 854. It does not implement any of the
- * extra Telnet options because it is meant to be used within a Java program providing automated access to Telnet accessible resources.
+ * The TelnetClient class implements the simple network virtual
+ * terminal (NVT) for the Telnet protocol according to RFC 854.  It
+ * does not implement any of the extra Telnet options because it
+ * is meant to be used within a Java program providing automated
+ * access to Telnet accessible resources.
@@ -29,3 +32,9 @@ import java.io.OutputStream;
- * The class can be used by first connecting to a server using the SocketClient {@link org.apache.commons.net.SocketClient#connect connect} method. Then an
- * InputStream and OutputStream for sending and receiving data over the Telnet connection can be obtained by using the {@link #getInputStream getInputStream() }
- * and {@link #getOutputStream getOutputStream() } methods. When you finish using the streams, you must call {@link #disconnect disconnect } rather than simply
+ * The class can be used by first connecting to a server using the
+ * SocketClient
+ * {@link org.apache.commons.net.SocketClient#connect connect}
+ * method.  Then an InputStream and OutputStream for sending and
+ * receiving data over the Telnet connection can be obtained by
+ * using the {@link #getInputStream  getInputStream() } and
+ * {@link #getOutputStream  getOutputStream() } methods.
+ * When you finish using the streams, you must call
+ * {@link #disconnect  disconnect } rather than simply
@@ -35 +44,2 @@ import java.io.OutputStream;
-public class TelnetClient extends Telnet {
+public class TelnetClient extends Telnet
+{
@@ -47 +57,2 @@ public class TelnetClient extends Telnet {
-    public TelnetClient() {
+    public TelnetClient()
+    {
@@ -52 +63,2 @@ public class TelnetClient extends Telnet {
-     * Construct an instance with the specified max subnegotiation length and the default terminal-type {@code VT100}
+     * Construct an instance with the specified max subnegotiation
+     * length and the default terminal-type {@code VT100}
@@ -56 +68,2 @@ public class TelnetClient extends Telnet {
-    public TelnetClient(final int maxSubnegotiationLength) {
+    public TelnetClient(final int maxSubnegotiationLength)
+    {
@@ -65 +78,2 @@ public class TelnetClient extends Telnet {
-    public TelnetClient(final String termtype) {
+    public TelnetClient(final String termtype)
+    {
@@ -68,0 +83 @@ public class TelnetClient extends Telnet {
+
@@ -70 +85,2 @@ public class TelnetClient extends Telnet {
-     * Construct an instance with the specified terminal type and max subnegotiation length
+     * Construct an instance with the specified terminal type
+     * and max subnegotiation length
@@ -72 +88 @@ public class TelnetClient extends Telnet {
-     * @param termtype                the terminal type to use, e.g. {@code VT100}
+     * @param termtype the terminal type to use, e.g. {@code VT100}
@@ -75,2 +91,3 @@ public class TelnetClient extends Telnet {
-    public TelnetClient(final String termtype, final int maxSubnegotiationLength) {
-        /* TERMINAL-TYPE option (start) */
+    public TelnetClient(final String termtype, final int maxSubnegotiationLength)
+    {
+    /* TERMINAL-TYPE option (start)*/
@@ -78 +95 @@ public class TelnetClient extends Telnet {
-        /* TERMINAL-TYPE option (end) */
+    /* TERMINAL-TYPE option (end)*/
@@ -87 +104 @@ public class TelnetClient extends Telnet {
-     * @throws IOException If an error occurs during connection setup.
+     * @throws IOException  If an error occurs during connection setup.
@@ -90 +107,2 @@ public class TelnetClient extends Telnet {
-    protected void _connectAction_() throws IOException {
+    protected void _connectAction_() throws IOException
+    {
@@ -93 +111,2 @@ public class TelnetClient extends Telnet {
-        if (readerThread) {
+        if(readerThread)
+        {
@@ -96 +115 @@ public class TelnetClient extends Telnet {
-        // __input CANNOT refer to the TelnetInputStream. We run into
+        // __input CANNOT refer to the TelnetInputStream.  We run into
@@ -105 +123,0 @@ public class TelnetClient extends Telnet {
-
@@ -112 +130 @@ public class TelnetClient extends Telnet {
-     * @throws IOException                  on error
+     * @throws IOException on error
@@ -115 +133,3 @@ public class TelnetClient extends Telnet {
-    public void addOptionHandler(final TelnetOptionHandler opthand) throws InvalidTelnetOptionException, IOException {
+    public void addOptionHandler(final TelnetOptionHandler opthand)
+    throws InvalidTelnetOptionException, IOException
+    {
@@ -118 +138 @@ public class TelnetClient extends Telnet {
-    /* open TelnetOptionHandler functionality (end) */
+    /* open TelnetOptionHandler functionality (end)*/
@@ -120 +140,2 @@ public class TelnetClient extends Telnet {
-    void closeOutputStream() throws IOException {
+    void closeOutputStream() throws IOException
+    {
@@ -132 +153 @@ public class TelnetClient extends Telnet {
-     * Unregisters a TelnetOptionHandler.
+     * Unregisters a  TelnetOptionHandler.
@@ -137 +158 @@ public class TelnetClient extends Telnet {
-     * @throws IOException                  on error
+     * @throws IOException on error
@@ -140 +161,3 @@ public class TelnetClient extends Telnet {
-    public void deleteOptionHandler(final int optcode) throws InvalidTelnetOptionException, IOException {
+    public void deleteOptionHandler(final int optcode)
+    throws InvalidTelnetOptionException, IOException
+    {
@@ -145,2 +168,5 @@ public class TelnetClient extends Telnet {
-     * Disconnects the telnet session, closing the input and output streams as well as the socket. If you have references to the input and output streams of the
-     * telnet connection, you should not close them yourself, but rather call disconnect to properly close the connection.
+     * Disconnects the telnet session, closing the input and output streams
+     * as well as the socket.  If you have references to the
+     * input and output streams of the telnet connection, you should not
+     * close them yourself, but rather call disconnect to properly close
+     * the connection.
@@ -149 +175,2 @@ public class TelnetClient extends Telnet {
-    public void disconnect() throws IOException {
+    public void disconnect() throws IOException
+    {
@@ -164 +191,2 @@ public class TelnetClient extends Telnet {
-    void flushOutputStream() throws IOException {
+    void flushOutputStream() throws IOException
+    {
@@ -172,2 +200,3 @@ public class TelnetClient extends Telnet {
-     * Returns the telnet connection input stream. You should not close the stream when you finish with it. Rather, you should call {@link #disconnect
-     * disconnect }.
+     * Returns the telnet connection input stream.  You should not close the
+     * stream when you finish with it.  Rather, you should call
+     * {@link #disconnect  disconnect }.
@@ -177 +206,2 @@ public class TelnetClient extends Telnet {
-    public InputStream getInputStream() {
+    public InputStream getInputStream()
+    {
@@ -188,2 +218,3 @@ public class TelnetClient extends Telnet {
-    public boolean getLocalOptionState(final int option) {
-        /* BUG (option active when not already acknowledged) (start) */
+    public boolean getLocalOptionState(final int option)
+    {
+        /* BUG (option active when not already acknowledged) (start)*/
@@ -191 +222 @@ public class TelnetClient extends Telnet {
-        /* BUG (option active when not already acknowledged) (end) */
+        /* BUG (option active when not already acknowledged) (end)*/
@@ -194 +225 @@ public class TelnetClient extends Telnet {
-    /* Code Section added for supporting AYT (start) */
+    /* Code Section added for supporting AYT (start)*/
@@ -197,2 +228,3 @@ public class TelnetClient extends Telnet {
-     * Returns the telnet connection output stream. You should not close the stream when you finish with it. Rather, you should call {@link #disconnect
-     * disconnect }.
+     * Returns the telnet connection output stream.  You should not close the
+     * stream when you finish with it.  Rather, you should call
+     * {@link #disconnect  disconnect }.
@@ -202 +234,2 @@ public class TelnetClient extends Telnet {
-    public OutputStream getOutputStream() {
+    public OutputStream getOutputStream()
+    {
@@ -211 +244,2 @@ public class TelnetClient extends Telnet {
-    public boolean getReaderThread() {
+    public boolean getReaderThread()
+    {
@@ -222,2 +256,3 @@ public class TelnetClient extends Telnet {
-    public boolean getRemoteOptionState(final int option) {
-        /* BUG (option active when not already acknowledged) (start) */
+    public boolean getRemoteOptionState(final int option)
+    {
+        /* BUG (option active when not already acknowledged) (start)*/
@@ -225 +260 @@ public class TelnetClient extends Telnet {
-        /* BUG (option active when not already acknowledged) (end) */
+        /* BUG (option active when not already acknowledged) (end)*/
@@ -227 +262 @@ public class TelnetClient extends Telnet {
-    /* open TelnetOptionHandler functionality (end) */
+    /* open TelnetOptionHandler functionality (end)*/
@@ -229 +264 @@ public class TelnetClient extends Telnet {
-    /* open TelnetOptionHandler functionality (start) */
+    /* open TelnetOptionHandler functionality (start)*/
@@ -243,2 +278,3 @@ public class TelnetClient extends Telnet {
-     * Register a listener to be notified when new incoming data is available to be read on the {@link #getInputStream input stream}. Only one listener is
-     * supported at a time.
+     * Register a listener to be notified when new incoming data is
+     * available to be read on the {@link #getInputStream input stream}.
+     * Only one listener is supported at a time.
@@ -247,3 +283,6 @@ public class TelnetClient extends Telnet {
-     * More precisely, notifications are issued whenever the number of bytes available for immediate reading (i.e., the value returned by
-     * {@link InputStream#available}) transitions from zero to non-zero. Note that (in general) multiple reads may be required to empty the buffer and reset
-     * this notification, because incoming bytes are being added to the internal buffer asynchronously.
+     * More precisely, notifications are issued whenever the number of
+     * bytes available for immediate reading (i.e., the value returned
+     * by {@link InputStream#available}) transitions from zero to non-zero.
+     * Note that (in general) multiple reads may be required to empty the
+     * buffer and reset this notification, because incoming bytes are being
+     * added to the internal buffer asynchronously.
@@ -253 +292,2 @@ public class TelnetClient extends Telnet {
-     * Notifications are only supported when a {@link #setReaderThread reader thread} is enabled for the connection.
+     * Notifications are only supported when a {@link #setReaderThread
+     * reader thread} is enabled for the connection.
@@ -259 +299,2 @@ public class TelnetClient extends Telnet {
-    public synchronized void registerInputListener(final TelnetInputListener listener) {
+    public synchronized void registerInputListener(final TelnetInputListener listener)
+    {
@@ -264 +305,2 @@ public class TelnetClient extends Telnet {
-     * Registers a notification handler to which will be sent notifications of received telnet option negotiation commands.
+     * Registers a notification handler to which will be sent
+     * notifications of received telnet option negotiation commands.
@@ -269 +311,2 @@ public class TelnetClient extends Telnet {
-    public void registerNotifHandler(final TelnetNotificationHandler notifhand) {
+    public void registerNotifHandler(final TelnetNotificationHandler  notifhand)
+    {
@@ -273 +316 @@ public class TelnetClient extends Telnet {
-    /* Code Section added for supporting spystreams (start) */
+    /* Code Section added for supporting spystreams (start)*/
@@ -275 +318,2 @@ public class TelnetClient extends Telnet {
-     * Registers an OutputStream for spying what's going on in the TelnetClient session.
+     * Registers an OutputStream for spying what's going on in
+     * the TelnetClient session.
@@ -277 +321,2 @@ public class TelnetClient extends Telnet {
-     * @param spystream - OutputStream on which session activity will be echoed.
+     * @param spystream - OutputStream on which session activity
+     * will be echoed.
@@ -279 +324,2 @@ public class TelnetClient extends Telnet {
-    public void registerSpyStream(final OutputStream spystream) {
+    public void registerSpyStream(final OutputStream  spystream)
+    {
@@ -290 +336 @@ public class TelnetClient extends Telnet {
-     * @throws InterruptedException     on error
+     * @throws InterruptedException on error
@@ -292 +338 @@ public class TelnetClient extends Telnet {
-     * @throws IOException              on error
+     * @throws IOException on error
@@ -294 +340,3 @@ public class TelnetClient extends Telnet {
-    public boolean sendAYT(final long timeout) throws IOException, IllegalArgumentException, InterruptedException {
+    public boolean sendAYT(final long timeout)
+    throws IOException, IllegalArgumentException, InterruptedException
+    {
@@ -297 +345 @@ public class TelnetClient extends Telnet {
-    /* Code Section added for supporting AYT (start) */
+    /* Code Section added for supporting AYT (start)*/
@@ -303 +351,3 @@ public class TelnetClient extends Telnet {
-     * This method does not wait for any response. Messages sent by the remote end can be handled by registering an approrpriate {@link TelnetOptionHandler}.
+     * This method does not wait for any response. Messages
+     * sent by the remote end can be handled by registering an approrpriate
+     * {@link TelnetOptionHandler}.
@@ -307,2 +357,2 @@ public class TelnetClient extends Telnet {
-     * @throws IOException              if an I/O error occurs while writing the message
-     * @throws IllegalArgumentException on error
+     * @throws IOException if an I/O error occurs while writing the message
+     * @throws IllegalArgumentException  on error
@@ -311 +361,3 @@ public class TelnetClient extends Telnet {
-    public void sendCommand(final byte command) throws IOException, IllegalArgumentException {
+    public void sendCommand(final byte command)
+    throws IOException, IllegalArgumentException
+    {
@@ -316,2 +368,4 @@ public class TelnetClient extends Telnet {
-     * Sends a protocol-specific subnegotiation message to the remote peer. {@link TelnetClient} will add the IAC SB &amp; IAC SE framing bytes; the first byte
-     * in {@code message} should be the appropriate telnet option code.
+     * Sends a protocol-specific subnegotiation message to the remote peer.
+     * {@link TelnetClient} will add the IAC SB &amp; IAC SE framing bytes;
+     * the first byte in {@code message} should be the appropriate telnet
+     * option code.
@@ -320 +374,2 @@ public class TelnetClient extends Telnet {
-     * This method does not wait for any response. Subnegotiation messages sent by the remote end can be handled by registering an approrpriate
+     * This method does not wait for any response. Subnegotiation messages
+     * sent by the remote end can be handled by registering an approrpriate
@@ -326 +381 @@ public class TelnetClient extends Telnet {
-     * @throws IOException              if an I/O error occurs while writing the message
+     * @throws IOException if an I/O error occurs while writing the message
@@ -329 +384,3 @@ public class TelnetClient extends Telnet {
-    public void sendSubnegotiation(final int[] message) throws IOException, IllegalArgumentException {
+    public void sendSubnegotiation(final int[] message)
+    throws IOException, IllegalArgumentException
+    {
@@ -340,3 +397,7 @@ public class TelnetClient extends Telnet {
-     * When enabled, a seaparate internal reader thread is created for new connections to read incoming data as it arrives. This results in immediate handling
-     * of option negotiation, notifications, etc. (at least until the fixed-size internal buffer fills up). Otherwise, no thread is created an all negotiation
-     * and option handling is deferred until a read() is performed on the {@link #getInputStream input stream}.
+     * When enabled, a seaparate internal reader thread is created for new
+     * connections to read incoming data as it arrives. This results in
+     * immediate handling of option negotiation, notifications, etc.
+     * (at least until the fixed-size internal buffer fills up).
+     * Otherwise, no thread is created an all negotiation and option
+     * handling is deferred until a read() is performed on the
+     * {@link #getInputStream input stream}.
@@ -346 +407,2 @@ public class TelnetClient extends Telnet {
-     * The reader thread must be enabled for {@link TelnetInputListener} support.
+     * The reader thread must be enabled for {@link TelnetInputListener}
+     * support.
@@ -350 +412,2 @@ public class TelnetClient extends Telnet {
-     * When this method is invoked, the reader thread status will apply to all subsequent connections; the current connection (if any) is not affected.
+     * When this method is invoked, the reader thread status will apply to all
+     * subsequent connections; the current connection (if any) is not affected.
@@ -356 +419,2 @@ public class TelnetClient extends Telnet {
-    public void setReaderThread(final boolean flag) {
+    public void setReaderThread(final boolean flag)
+    {
@@ -364 +428,2 @@ public class TelnetClient extends Telnet {
-    public void stopSpyStream() {
+    public void stopSpyStream()
+    {
@@ -367 +432 @@ public class TelnetClient extends Telnet {
-    /* Code Section added for supporting spystreams (end) */
+    /* Code Section added for supporting spystreams (end)*/
@@ -374 +439,2 @@ public class TelnetClient extends Telnet {
-    public synchronized void unregisterInputListener() {
+    public synchronized void unregisterInputListener()
+    {
@@ -383 +449,2 @@ public class TelnetClient extends Telnet {
-    public void unregisterNotifHandler() {
+    public void unregisterNotifHandler()
+    {
diff --git a/src/main/java/org/apache/commons/net/telnet/TelnetCommand.java b/src/main/java/org/apache/commons/net/telnet/TelnetCommand.java
index cd1ae813a..ed877001d 100644
--- a/src/main/java/org/apache/commons/net/telnet/TelnetCommand.java
+++ b/src/main/java/org/apache/commons/net/telnet/TelnetCommand.java
@@ -21,2 +21,2 @@ package org.apache.commons.net.telnet;
- * The TelnetCommand class cannot be instantiated and only serves as a storehouse for telnet command constants.
- *
+ * The TelnetCommand class cannot be instantiated and only serves as a
+ * storehouse for telnet command constants.
@@ -27,2 +27,3 @@ package org.apache.commons.net.telnet;
-public final class TelnetCommand {
-    /** The maximum value a command code can have. This value is 255. */
+public final class TelnetCommand
+{
+    /** The maximum value a command code can have.  This value is 255. */
@@ -31 +32 @@ public final class TelnetCommand {
-    /** Interpret As Command code. Value is 255 according to RFC 854. */
+    /** Interpret As Command code.  Value is 255 according to RFC 854. */
@@ -34 +35 @@ public final class TelnetCommand {
-    /** Don't use option code. Value is 254 according to RFC 854. */
+    /** Don't use option code.  Value is 254 according to RFC 854. */
@@ -37 +38 @@ public final class TelnetCommand {
-    /** Request to use option code. Value is 253 according to RFC 854. */
+    /** Request to use option code.  Value is 253 according to RFC 854. */
@@ -40 +41 @@ public final class TelnetCommand {
-    /** Refuse to use option code. Value is 252 according to RFC 854. */
+    /** Refuse to use option code.  Value is 252 according to RFC 854. */
@@ -43 +44 @@ public final class TelnetCommand {
-    /** Agree to use option code. Value is 251 according to RFC 854. */
+    /** Agree to use option code.  Value is 251 according to RFC 854. */
@@ -46 +47 @@ public final class TelnetCommand {
-    /** Start subnegotiation code. Value is 250 according to RFC 854. */
+    /** Start subnegotiation code.  Value is 250 according to RFC 854. */
@@ -49 +50 @@ public final class TelnetCommand {
-    /** Go Ahead code. Value is 249 according to RFC 854. */
+    /** Go Ahead code.  Value is 249 according to RFC 854. */
@@ -52 +53 @@ public final class TelnetCommand {
-    /** Erase Line code. Value is 248 according to RFC 854. */
+    /** Erase Line code.  Value is 248 according to RFC 854. */
@@ -55 +56 @@ public final class TelnetCommand {
-    /** Erase Character code. Value is 247 according to RFC 854. */
+    /** Erase Character code.  Value is 247 according to RFC 854. */
@@ -58 +59 @@ public final class TelnetCommand {
-    /** Are You There code. Value is 246 according to RFC 854. */
+    /** Are You There code.  Value is 246 according to RFC 854. */
@@ -61 +62 @@ public final class TelnetCommand {
-    /** Abort Output code. Value is 245 according to RFC 854. */
+    /** Abort Output code.  Value is 245 according to RFC 854. */
@@ -64 +65 @@ public final class TelnetCommand {
-    /** Interrupt Process code. Value is 244 according to RFC 854. */
+    /** Interrupt Process code.  Value is 244 according to RFC 854. */
@@ -67 +68 @@ public final class TelnetCommand {
-    /** Break code. Value is 243 according to RFC 854. */
+    /** Break code.  Value is 243 according to RFC 854. */
@@ -70 +71 @@ public final class TelnetCommand {
-    /** Data mark code. Value is 242 according to RFC 854. */
+    /** Data mark code.  Value is 242 according to RFC 854. */
@@ -73 +74 @@ public final class TelnetCommand {
-    /** No Operation code. Value is 241 according to RFC 854. */
+    /** No Operation code.  Value is 241 according to RFC 854. */
@@ -76 +77 @@ public final class TelnetCommand {
-    /** End subnegotiation code. Value is 240 according to RFC 854. */
+    /** End subnegotiation code.  Value is 240 according to RFC 854. */
@@ -79 +80 @@ public final class TelnetCommand {
-    /** End of record code. Value is 239. */
+    /** End of record code.  Value is 239. */
@@ -82 +83 @@ public final class TelnetCommand {
-    /** Abort code. Value is 238. */
+    /** Abort code.  Value is 238. */
@@ -85 +86 @@ public final class TelnetCommand {
-    /** Suspend process code. Value is 237. */
+    /** Suspend process code.  Value is 237. */
@@ -88 +89 @@ public final class TelnetCommand {
-    /** End of file code. Value is 236. */
+    /** End of file code.  Value is 236. */
@@ -91 +92 @@ public final class TelnetCommand {
-    /** Synchronize code. Value is 242. */
+    /** Synchronize code.  Value is 242. */
@@ -95,2 +96,4 @@ public final class TelnetCommand {
-    private static final String commandString[] = { "IAC", "DONT", "DO", "WONT", "WILL", "SB", "GA", "EL", "EC", "AYT", "AO", "IP", "BRK", "DMARK", "NOP", "SE",
-            "EOR", "ABORT", "SUSP", "EOF" };
+    private static final String commandString[] = {
+                "IAC", "DONT", "DO", "WONT", "WILL", "SB", "GA", "EL", "EC", "AYT",
+                "AO", "IP", "BRK", "DMARK", "NOP", "SE", "EOR", "ABORT", "SUSP", "EOF"
+            };
@@ -102 +105,2 @@ public final class TelnetCommand {
-     * Returns the string representation of the telnet protocol command corresponding to the given command code.
+     * Returns the string representation of the telnet protocol command
+     * corresponding to the given command code.
@@ -104 +107,0 @@ public final class TelnetCommand {
-     *
@@ -108 +111,2 @@ public final class TelnetCommand {
-    public static String getCommand(final int code) {
+    public static String getCommand(final int code)
+    {
@@ -113 +117,2 @@ public final class TelnetCommand {
-     * Determines if a given command code is valid. Returns true if valid, false if not.
+     * Determines if a given command code is valid.  Returns true if valid,
+     * false if not.
@@ -115,2 +120 @@ public final class TelnetCommand {
-     *
-     * @param code The command code to test.
+     * @param code  The command code to test.
@@ -119 +123,2 @@ public final class TelnetCommand {
-    public static boolean isValidCommand(final int code) {
+    public static boolean isValidCommand(final int code)
+    {
@@ -124,2 +129,2 @@ public final class TelnetCommand {
-    private TelnetCommand() {
-    }
+    private TelnetCommand()
+    { }
diff --git a/src/main/java/org/apache/commons/net/telnet/TelnetInputListener.java b/src/main/java/org/apache/commons/net/telnet/TelnetInputListener.java
index c643cd20b..b2012f832 100644
--- a/src/main/java/org/apache/commons/net/telnet/TelnetInputListener.java
+++ b/src/main/java/org/apache/commons/net/telnet/TelnetInputListener.java
@@ -21 +21,2 @@ package org.apache.commons.net.telnet;
- * Listener interface used for notification that incoming data is available to be read.
+ * Listener interface used for notification that incoming data is
+ * available to be read.
@@ -26 +27,2 @@ package org.apache.commons.net.telnet;
-public interface TelnetInputListener {
+public interface TelnetInputListener
+{
@@ -29 +31,2 @@ public interface TelnetInputListener {
-     * Callback method invoked when new incoming data is available on a {@link TelnetClient}'s {@link TelnetClient#getInputStream input stream}.
+     * Callback method invoked when new incoming data is available on a
+     * {@link TelnetClient}'s {@link TelnetClient#getInputStream input stream}.
diff --git a/src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java b/src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java
index 0567afde0..eba8aba6e 100644
--- a/src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java
+++ b/src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java
@@ -25 +25,2 @@ import java.io.InterruptedIOException;
-final class TelnetInputStream extends BufferedInputStream implements Runnable {
+final class TelnetInputStream extends BufferedInputStream implements Runnable
+{
@@ -33,2 +34,3 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-    static final int STATE_DATA = 0, STATE_IAC = 1, STATE_WILL = 2, STATE_WONT = 3, STATE_DO = 4, STATE_DONT = 5, STATE_SB = 6, STATE_SE = 7, STATE_CR = 8,
-            STATE_IAC_SB = 9;
+    static final int STATE_DATA = 0, STATE_IAC = 1, STATE_WILL = 2,
+                     STATE_WONT = 3, STATE_DO = 4, STATE_DONT = 5,
+                     STATE_SB = 6, STATE_SE = 7, STATE_CR = 8, STATE_IAC_SB = 9;
@@ -45 +47 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-    /* TERMINAL-TYPE option (start) */
+    /* TERMINAL-TYPE option (start)*/
@@ -48 +50 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-    /* TERMINAL-TYPE option (end) */
+    /* TERMINAL-TYPE option (end)*/
@@ -56 +58,3 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-    TelnetInputStream(final InputStream input, final TelnetClient client, final boolean readerThread) {
+    TelnetInputStream(final InputStream input, final TelnetClient client,
+                      final boolean readerThread)
+    {
@@ -72 +76 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-        if (readerThread) {
+        if(readerThread) {
@@ -80 +84,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-    public int available() throws IOException {
+    public int available() throws IOException
+    {
@@ -82 +87,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-        synchronized (queue) {
+        synchronized (queue)
+        {
@@ -90 +96,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-    // Cannot be synchronized. Will cause deadlock if run() is blocked
+
+    // Cannot be synchronized.  Will cause deadlock if run() is blocked
@@ -93 +100,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-    public void close() throws IOException {
+    public void close() throws IOException
+    {
@@ -100 +108,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-        synchronized (queue) {
+        synchronized (queue)
+        {
@@ -102 +111 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-            isClosed = true;
+            isClosed      = true;
@@ -104 +113,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-            if (thread != null && thread.isAlive()) {
+            if (thread != null && thread.isAlive())
+            {
@@ -113 +123 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-    /** Returns false. Mark is not supported. */
+    /** Returns false.  Mark is not supported. */
@@ -115 +125,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-    public boolean markSupported() {
+    public boolean markSupported()
+    {
@@ -123 +134,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-    private boolean processChar(final int ch) throws InterruptedException {
+    private boolean processChar(final int ch) throws InterruptedException
+    {
@@ -127 +139,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-        synchronized (queue) {
+        synchronized (queue)
+        {
@@ -129 +142,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-            while (bytesAvailable >= queue.length - 1) {
+            while (bytesAvailable >= queue.length - 1)
+            {
@@ -132 +146 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                if (!threaded) {
+                if(!threaded) {
@@ -138 +152,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                try {
+                try
+                {
@@ -140 +155,3 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                } catch (final InterruptedException e) {
+                }
+                catch (final InterruptedException e)
+                {
@@ -146 +163,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-            if (readIsWaiting && threaded) {
+            if (readIsWaiting && threaded)
+            {
@@ -159,0 +178 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
+
@@ -161 +180,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-    public int read() throws IOException {
+    public int read() throws IOException
+    {
@@ -165 +185,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-        synchronized (queue) {
+        synchronized (queue)
+        {
@@ -167,2 +188,4 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-            while (true) {
-                if (ioException != null) {
+            while (true)
+            {
+                if (ioException != null)
+                {
@@ -175 +198,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                if (bytesAvailable == 0) {
+                if (bytesAvailable == 0)
+                {
@@ -182 +206,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                    if (threaded) {
+                    if(threaded)
+                    {
@@ -184 +209,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                        try {
+                        try
+                        {
@@ -188 +214,3 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                        } catch (final InterruptedException e) {
+                        }
+                        catch (final InterruptedException e)
+                        {
@@ -191,2 +219,4 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                    } else {
-                        // alreadyread = false;
+                    }
+                    else
+                    {
+                        //alreadyread = false;
@@ -195 +225 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                        boolean mayBlock = true; // block on the first read only
+                        boolean mayBlock = true;    // block on the first read only
@@ -197,2 +227,4 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                        do {
-                            try {
+                        do
+                        {
+                            try
+                            {
@@ -200 +232 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                                    if (ch != WOULD_BLOCK) {
+                                    if(ch != WOULD_BLOCK) {
@@ -204,2 +236,5 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                            } catch (final InterruptedIOException e) {
-                                synchronized (queue) {
+                            }
+                            catch (final InterruptedIOException e)
+                            {
+                                synchronized (queue)
+                                {
@@ -208 +243,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                                    try {
+                                    try
+                                    {
@@ -210 +246,3 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                                    } catch (final InterruptedException interrupted) {
+                                    }
+                                    catch (final InterruptedException interrupted)
+                                    {
@@ -217,2 +255,5 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                            try {
-                                if (ch != WOULD_BLOCK) {
+
+                            try
+                            {
+                                if(ch != WOULD_BLOCK)
+                                {
@@ -221 +262,3 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                            } catch (final InterruptedException e) {
+                            }
+                            catch (final InterruptedException e)
+                            {
@@ -249,4 +292,4 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                // Need to explicitly notify() so available() works properly
-                if (bytesAvailable == 0 && threaded) {
-                    queue.notify();
-                }
+         // Need to explicitly notify() so available() works properly
+         if(bytesAvailable == 0 && threaded) {
+            queue.notify();
+         }
@@ -258,0 +302 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
+
@@ -264 +308,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-     * Get the next byte of data. IAC commands are processed internally and do not return data.
+     * Get the next byte of data.
+     * IAC commands are processed internally and do not return data.
@@ -267 +312,3 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-     * @return the next byte of data, or -1 (EOF) if end of stread reached, or -2 (WOULD_BLOCK) if mayBlock is false and there is no data available
+     * @return the next byte of data,
+     * or -1 (EOF) if end of stread reached,
+     * or -2 (WOULD_BLOCK) if mayBlock is false and there is no data available
@@ -269 +316,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-    private int read(final boolean mayBlock) throws IOException {
+    private int read(final boolean mayBlock) throws IOException
+    {
@@ -272 +320,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-        while (true) {
+        while (true)
+        {
@@ -276 +325 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-            if (!mayBlock && super.available() == 0) {
+            if(!mayBlock && super.available() == 0) {
@@ -287,2 +336,3 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-            /* Code Section added for supporting AYT (start) */
-            synchronized (client) {
+            /* Code Section added for supporting AYT (start)*/
+            synchronized (client)
+            {
@@ -291 +341 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-            /* Code Section added for supporting AYT (end) */
+            /* Code Section added for supporting AYT (end)*/
@@ -293 +343 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-            /* Code Section added for supporting spystreams (start) */
+            /* Code Section added for supporting spystreams (start)*/
@@ -295 +345 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-            /* Code Section added for supporting spystreams (end) */
+            /* Code Section added for supporting spystreams (end)*/
@@ -297 +347,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-            switch (receiveState) {
+            switch (receiveState)
+            {
@@ -300 +351,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                if (ch == '\0') {
+                if (ch == '\0')
+                {
@@ -305 +357 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                // else if (ch == '\n' && _requestedDont(TelnetOption.ECHO) &&
+                //  else if (ch == '\n' && _requestedDont(TelnetOption.ECHO) &&
@@ -311 +363,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                if (ch == TelnetCommand.IAC) {
+                if (ch == TelnetCommand.IAC)
+                {
@@ -316,2 +369,5 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                if (ch == '\r') {
-                    synchronized (client) {
+
+                if (ch == '\r')
+                {
+                    synchronized (client)
+                    {
@@ -330 +386,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                switch (ch) {
+                switch (ch)
+                {
@@ -343 +400 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                /* TERMINAL-TYPE option (start) */
+                /* TERMINAL-TYPE option (start)*/
@@ -348 +405 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                /* TERMINAL-TYPE option (end) */
+                /* TERMINAL-TYPE option (end)*/
@@ -362 +419,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                synchronized (client) {
+                synchronized (client)
+                {
@@ -369 +427,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                synchronized (client) {
+                synchronized (client)
+                {
@@ -376 +435,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                synchronized (client) {
+                synchronized (client)
+                {
@@ -383 +443,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                synchronized (client) {
+                synchronized (client)
+                {
@@ -389 +450 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-            /* TERMINAL-TYPE option (start) */
+            /* TERMINAL-TYPE option (start)*/
@@ -391 +452,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                switch (ch) {
+                switch (ch)
+                {
@@ -405 +467,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                switch (ch) {
+                switch (ch)
+                {
@@ -407 +470,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                    synchronized (client) {
+                    synchronized (client)
+                    {
@@ -418 +482 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                default: // unexpected byte! ignore it
+                default:            // unexpected byte! ignore it
@@ -423 +487 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-            /* TERMINAL-TYPE option (end) */
+            /* TERMINAL-TYPE option (end)*/
@@ -431,0 +496 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
+
@@ -433 +498,3 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-     * Reads the next number of bytes from the stream into an array and returns the number of bytes read. Returns -1 if the end of the stream has been reached.
+     * Reads the next number of bytes from the stream into an array and
+     * returns the number of bytes read.  Returns -1 if the end of the
+     * stream has been reached.
@@ -435,4 +502,5 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-     *
-     * @param buffer The byte array in which to store the data.
-     * @return The number of bytes read. Returns -1 if the end of the message has been reached.
-     * @throws IOException If an error occurs in reading the underlying stream.
+     * @param buffer  The byte array in which to store the data.
+     * @return The number of bytes read. Returns -1 if the
+     *          end of the message has been reached.
+     * @throws IOException If an error occurs in reading the underlying
+     *            stream.
@@ -441 +509,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-    public int read(final byte buffer[]) throws IOException {
+    public int read(final byte buffer[]) throws IOException
+    {
@@ -446,2 +515,4 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-     * Reads the next number of bytes from the stream into an array and returns the number of bytes read. Returns -1 if the end of the message has been reached.
-     * The characters are stored in the array starting from the given offset and up to the length specified.
+     * Reads the next number of bytes from the stream into an array and returns
+     * the number of bytes read.  Returns -1 if the end of the
+     * message has been reached.  The characters are stored in the array
+     * starting from the given offset and up to the length specified.
@@ -449 +519,0 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-     *
@@ -451,4 +521,6 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-     * @param offset The offset into the array at which to start storing data.
-     * @param length The number of bytes to read.
-     * @return The number of bytes read. Returns -1 if the end of the stream has been reached.
-     * @throws IOException If an error occurs while reading the underlying stream.
+     * @param offset  The offset into the array at which to start storing data.
+     * @param length   The number of bytes to read.
+     * @return The number of bytes read. Returns -1 if the
+     *          end of the stream has been reached.
+     * @throws IOException If an error occurs while reading the underlying
+     *            stream.
@@ -457 +529,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-    public int read(final byte buffer[], int offset, int length) throws IOException {
+    public int read(final byte buffer[], int offset, int length) throws IOException
+    {
@@ -466 +539,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-        synchronized (queue) {
+        synchronized (queue)
+        {
@@ -478,3 +552,5 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-        do {
-            buffer[offset++] = (byte) ch;
-        } while (--length > 0 && (ch = read()) != EOF);
+        do
+        {
+            buffer[offset++] = (byte)ch;
+        }
+        while (--length > 0 && (ch = read()) != EOF);
@@ -485,0 +562 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
+
@@ -487 +564,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-    public void run() {
+    public void run()
+    {
@@ -490,3 +568,7 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-        try {
-            _outerLoop: while (!isClosed) {
-                try {
+        try
+        {
+_outerLoop:
+            while (!isClosed)
+            {
+                try
+                {
@@ -496,2 +578,5 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                } catch (final InterruptedIOException e) {
-                    synchronized (queue) {
+                }
+                catch (final InterruptedIOException e)
+                {
+                    synchronized (queue)
+                    {
@@ -500 +585,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                        try {
+                        try
+                        {
@@ -502 +588,3 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                        } catch (final InterruptedException interrupted) {
+                        }
+                        catch (final InterruptedException interrupted)
+                        {
@@ -509 +597 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                } catch (final RuntimeException re) {
+                } catch(final RuntimeException re) {
@@ -511 +599 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                    // stream has been closed. We close the
+                    // stream has been closed.  We close the
@@ -521 +609,2 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                try {
+                try
+                {
@@ -523 +612,3 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-                } catch (final InterruptedException e) {
+                }
+                catch (final InterruptedException e)
+                {
@@ -534,2 +625,5 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-        } catch (final IOException ioe) {
-            synchronized (queue) {
+        }
+        catch (final IOException ioe)
+        {
+            synchronized (queue)
+            {
@@ -541,2 +635,3 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-        synchronized (queue) {
-            isClosed = true; // Possibly redundant
+        synchronized (queue)
+        {
+            isClosed      = true; // Possibly redundant
@@ -550,2 +645,3 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-    void start() {
-        if (thread == null) {
+    void start()
+    {
+        if(thread == null) {
@@ -559 +655 @@ final class TelnetInputStream extends BufferedInputStream implements Runnable {
-        // threads. This should prevent scheduler induced deadlock (rather than
+        // threads.  This should prevent scheduler induced deadlock (rather than
diff --git a/src/main/java/org/apache/commons/net/telnet/TelnetNotificationHandler.java b/src/main/java/org/apache/commons/net/telnet/TelnetNotificationHandler.java
index 389891689..a8b2598ea 100644
--- a/src/main/java/org/apache/commons/net/telnet/TelnetNotificationHandler.java
+++ b/src/main/java/org/apache/commons/net/telnet/TelnetNotificationHandler.java
@@ -21 +21,3 @@ package org.apache.commons.net.telnet;
- * The TelnetNotificationHandler interface can be used to handle notification of options negotiation commands received on a telnet session.
+ * The TelnetNotificationHandler interface can be used to handle
+ * notification of options negotiation commands received on a telnet
+ * session.
@@ -23,2 +25,3 @@ package org.apache.commons.net.telnet;
- * The user can implement this interface and register a TelnetNotificationHandler by using the registerNotificationHandler() of TelnetClient to be notified of
- * option negotiation commands.
+ * The user can implement this interface and register a
+ * TelnetNotificationHandler by using the registerNotificationHandler()
+ * of TelnetClient to be notified of option negotiation commands.
@@ -27 +30,2 @@ package org.apache.commons.net.telnet;
-public interface TelnetNotificationHandler {
+public interface TelnetNotificationHandler
+{
@@ -31 +35 @@ public interface TelnetNotificationHandler {
-    int RECEIVED_DO = 1;
+    int RECEIVED_DO =   1;
@@ -50 +53,0 @@ public interface TelnetNotificationHandler {
-     *
@@ -56 +59,2 @@ public interface TelnetNotificationHandler {
-     * Callback method called when TelnetClient receives an command or option negotiation command
+     * Callback method called when TelnetClient receives an
+     * command or option negotiation command
@@ -58 +62,2 @@ public interface TelnetNotificationHandler {
-     * @param negotiation_code - type of (negotiation) command received (RECEIVED_DO, RECEIVED_DONT, RECEIVED_WILL, RECEIVED_WONT, RECEIVED_COMMAND)
+     * @param negotiation_code - type of (negotiation) command received
+     * (RECEIVED_DO, RECEIVED_DONT, RECEIVED_WILL, RECEIVED_WONT, RECEIVED_COMMAND)
@@ -60 +65 @@ public interface TelnetNotificationHandler {
-     * @param option_code      - code of the option negotiated, or the command code itself (e.g. NOP).
+     * @param option_code - code of the option negotiated, or the command code itself (e.g. NOP).
diff --git a/src/main/java/org/apache/commons/net/telnet/TelnetOption.java b/src/main/java/org/apache/commons/net/telnet/TelnetOption.java
index 5fc64dfcf..8bc960d1e 100644
--- a/src/main/java/org/apache/commons/net/telnet/TelnetOption.java
+++ b/src/main/java/org/apache/commons/net/telnet/TelnetOption.java
@@ -21 +21,2 @@ package org.apache.commons.net.telnet;
- * The TelnetOption class cannot be instantiated and only serves as a storehouse for telnet option constants.
+ * The TelnetOption class cannot be instantiated and only serves as a
+ * storehouse for telnet option constants.
@@ -30,2 +31,3 @@ package org.apache.commons.net.telnet;
-public class TelnetOption {
-    /** The maximum value an option code can have. This value is 255. */
+public class TelnetOption
+{
+    /** The maximum value an option code can have.  This value is 255. */
@@ -120,11 +122,35 @@ public class TelnetOption {
-    private static final String optionString[] = { "BINARY", "ECHO", "RCP", "SUPPRESS GO AHEAD", "NAME", "STATUS", "TIMING MARK", "RCTE", "NAOL", "NAOP",
-            "NAOCRD", "NAOHTS", "NAOHTD", "NAOFFD", "NAOVTS", "NAOVTD", "NAOLFD", "EXTEND ASCII", "LOGOUT", "BYTE MACRO", "DATA ENTRY TERMINAL", "SUPDUP",
-            "SUPDUP OUTPUT", "SEND LOCATION", "TERMINAL TYPE", "END OF RECORD", "TACACS UID", "OUTPUT MARKING", "TTYLOC", "3270 REGIME", "X.3 PAD", "NAWS",
-            "TSPEED", "LFLOW", "LINEMODE", "XDISPLOC", "OLD-ENVIRON", "AUTHENTICATION", "ENCRYPT", "NEW-ENVIRON", "TN3270E", "XAUTH", "CHARSET", "RSP",
-            "Com Port Control", "Suppress Local Echo", "Start TLS", "KERMIT", "SEND-URL", "FORWARD_X", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
-            "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
-            "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
-            "TELOPT PRAGMA LOGON", "TELOPT SSPI LOGON", "TELOPT PRAGMA HEARTBEAT", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
-            "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
-            "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
-            "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Extended-Options-List" };
+    private static final String optionString[] = {
+                "BINARY", "ECHO", "RCP", "SUPPRESS GO AHEAD", "NAME", "STATUS",
+                "TIMING MARK", "RCTE", "NAOL", "NAOP", "NAOCRD", "NAOHTS", "NAOHTD",
+                "NAOFFD", "NAOVTS", "NAOVTD", "NAOLFD", "EXTEND ASCII", "LOGOUT",
+                "BYTE MACRO", "DATA ENTRY TERMINAL", "SUPDUP", "SUPDUP OUTPUT",
+                "SEND LOCATION", "TERMINAL TYPE", "END OF RECORD", "TACACS UID",
+                "OUTPUT MARKING", "TTYLOC", "3270 REGIME", "X.3 PAD", "NAWS", "TSPEED",
+                "LFLOW", "LINEMODE", "XDISPLOC", "OLD-ENVIRON", "AUTHENTICATION",
+                "ENCRYPT", "NEW-ENVIRON", "TN3270E", "XAUTH", "CHARSET", "RSP",
+                "Com Port Control", "Suppress Local Echo", "Start TLS",
+                "KERMIT", "SEND-URL", "FORWARD_X", "", "", "",
+                "", "", "", "", "", "", "", "", "", "",
+                "", "", "", "", "", "", "", "", "", "",
+                "", "", "", "", "", "", "", "", "", "",
+                "", "", "", "", "", "", "", "", "", "",
+                "", "", "", "", "", "", "", "", "", "",
+                "", "", "", "", "", "", "", "", "", "",
+                "", "", "", "", "", "", "", "", "", "",
+                "", "", "", "", "", "", "", "", "", "",
+                "", "", "", "", "", "TELOPT PRAGMA LOGON", "TELOPT SSPI LOGON",
+                "TELOPT PRAGMA HEARTBEAT", "", "", "", "",
+                "", "", "", "", "", "", "", "", "", "",
+                "", "", "", "", "", "", "", "", "", "",
+                "", "", "", "", "", "", "", "", "", "",
+                "", "", "", "", "", "", "", "", "", "",
+                "", "", "", "", "", "", "", "", "", "",
+                "", "", "", "", "", "", "", "", "", "",
+                "", "", "", "", "", "", "", "", "", "",
+                "", "", "", "", "", "", "", "", "", "",
+                "", "", "", "", "", "", "", "", "", "",
+                "", "", "", "", "", "", "", "", "", "",
+                "", "", "", "", "", "", "", "", "", "",
+                "Extended-Options-List"
+            };
+
@@ -133 +159,2 @@ public class TelnetOption {
-     * Returns the string representation of the telnet protocol option corresponding to the given option code.
+     * Returns the string representation of the telnet protocol option
+     * corresponding to the given option code.
@@ -138,2 +165,4 @@ public class TelnetOption {
-    public static final String getOption(final int code) {
-        if (optionString[code].isEmpty()) {
+    public static final String getOption(final int code)
+    {
+        if(optionString[code].isEmpty())
+        {
@@ -144,0 +174 @@ public class TelnetOption {
+
@@ -146 +176,2 @@ public class TelnetOption {
-     * Determines if a given option code is valid. Returns true if valid, false if not.
+     * Determines if a given option code is valid.  Returns true if valid,
+     * false if not.
@@ -148 +179 @@ public class TelnetOption {
-     * @param code The option code to test.
+     * @param code  The option code to test.
@@ -151 +182,2 @@ public class TelnetOption {
-    public static final boolean isValidOption(final int code) {
+    public static final boolean isValidOption(final int code)
+    {
@@ -156,2 +188,2 @@ public class TelnetOption {
-    private TelnetOption() {
-    }
+    private TelnetOption()
+    { }
diff --git a/src/main/java/org/apache/commons/net/telnet/TelnetOptionHandler.java b/src/main/java/org/apache/commons/net/telnet/TelnetOptionHandler.java
index 516642dda..135788f52 100644
--- a/src/main/java/org/apache/commons/net/telnet/TelnetOptionHandler.java
+++ b/src/main/java/org/apache/commons/net/telnet/TelnetOptionHandler.java
@@ -21 +21,2 @@ package org.apache.commons.net.telnet;
- * The TelnetOptionHandler class is the base class to be used for implementing handlers for telnet options.
+ * The TelnetOptionHandler class is the base class to be used
+ * for implementing handlers for telnet options.
@@ -23 +24,3 @@ package org.apache.commons.net.telnet;
- * TelnetOptionHandler implements basic option handling functionality and defines abstract methods that must be implemented to define subnegotiation behavior.
+ * TelnetOptionHandler implements basic option handling
+ * functionality and defines abstract methods that must be
+ * implemented to define subnegotiation behavior.
@@ -25 +28,2 @@ package org.apache.commons.net.telnet;
-public abstract class TelnetOptionHandler {
+public abstract class TelnetOptionHandler
+{
@@ -62,2 +66,4 @@ public abstract class TelnetOptionHandler {
-     * Constructor for the TelnetOptionHandler. Allows defining desired initial setting for local/remote activation of this option and behavior in case a
-     * local/remote activation request for this option is received.
+     * Constructor for the TelnetOptionHandler. Allows defining desired
+     * initial setting for local/remote activation of this option and
+     * behavior in case a local/remote activation request for this
+     * option is received.
@@ -65,5 +71,4 @@ public abstract class TelnetOptionHandler {
-     *
-     * @param optcode      - Option code.
-     * @param initlocal    - if set to true, a WILL is sent upon connection.
-     * @param initremote   - if set to true, a DO is sent upon connection.
-     * @param acceptlocal  - if set to true, any DO request is accepted.
+     * @param optcode - Option code.
+     * @param initlocal - if set to true, a WILL is sent upon connection.
+     * @param initremote - if set to true, a DO is sent upon connection.
+     * @param acceptlocal - if set to true, any DO request is accepted.
@@ -72 +77,6 @@ public abstract class TelnetOptionHandler {
-    public TelnetOptionHandler(final int optcode, final boolean initlocal, final boolean initremote, final boolean acceptlocal, final boolean acceptremote) {
+    public TelnetOptionHandler(final int optcode,
+                                final boolean initlocal,
+                                final boolean initremote,
+                                final boolean acceptlocal,
+                                final boolean acceptremote)
+    {
@@ -79,0 +90 @@ public abstract class TelnetOptionHandler {
+
@@ -81 +92,2 @@ public abstract class TelnetOptionHandler {
-     * Method called upon reception of a subnegotiation for this option coming from the other end.
+     * Method called upon reception of a subnegotiation for this option
+     * coming from the other end.
@@ -83,2 +95,3 @@ public abstract class TelnetOptionHandler {
-     * This implementation returns null, and must be overridden by the actual TelnetOptionHandler to specify which response must be sent for the subnegotiation
-     * request.
+     * This implementation returns null, and
+     * must be overridden by the actual TelnetOptionHandler to specify
+     * which response must be sent for the subnegotiation request.
@@ -86,2 +99 @@ public abstract class TelnetOptionHandler {
-     *
-     * @param suboptionData   - the sequence received, without IAC SB &amp; IAC SE
+     * @param suboptionData - the sequence received, without IAC SB &amp; IAC SE
@@ -89,2 +101,3 @@ public abstract class TelnetOptionHandler {
-     *                        <p>
-     * @return response to be sent to the subnegotiation sequence. TelnetClient will add IAC SB &amp; IAC SE. null means no response
+     * <p>
+     * @return response to be sent to the subnegotiation sequence. TelnetClient
+     * will add IAC SB &amp; IAC SE. null means no response
@@ -97 +110,2 @@ public abstract class TelnetOptionHandler {
-     * Returns a boolean indicating whether to accept a DO request coming from the other end.
+     * Returns a boolean indicating whether to accept a DO
+     * request coming from the other end.
@@ -99 +112,0 @@ public abstract class TelnetOptionHandler {
-     *
@@ -102 +115,2 @@ public abstract class TelnetOptionHandler {
-    public boolean getAcceptLocal() {
+    public boolean getAcceptLocal()
+    {
@@ -107 +121,2 @@ public abstract class TelnetOptionHandler {
-     * Returns a boolean indicating whether to accept a WILL request coming from the other end.
+     * Returns a boolean indicating whether to accept a WILL
+     * request coming from the other end.
@@ -109 +123,0 @@ public abstract class TelnetOptionHandler {
-     *
@@ -112 +126,2 @@ public abstract class TelnetOptionHandler {
-    public boolean getAcceptRemote() {
+    public boolean getAcceptRemote()
+    {
@@ -117 +132,2 @@ public abstract class TelnetOptionHandler {
-     * Returns a boolean indicating whether a DO request sent to the other side has been acknowledged.
+     * Returns a boolean indicating whether a DO request sent to the other
+     * side has been acknowledged.
@@ -119 +134,0 @@ public abstract class TelnetOptionHandler {
-     *
@@ -122 +137,2 @@ public abstract class TelnetOptionHandler {
-    boolean getDo() {
+    boolean getDo()
+    {
@@ -127 +143,2 @@ public abstract class TelnetOptionHandler {
-     * Returns a boolean indicating whether to send a WILL request to the other end upon connection.
+     * Returns a boolean indicating whether to send a WILL request
+     * to the other end upon connection.
@@ -129 +145,0 @@ public abstract class TelnetOptionHandler {
-     *
@@ -132 +148,2 @@ public abstract class TelnetOptionHandler {
-    public boolean getInitLocal() {
+    public boolean getInitLocal()
+    {
@@ -137 +154,2 @@ public abstract class TelnetOptionHandler {
-     * Returns a boolean indicating whether to send a DO request to the other end upon connection.
+     * Returns a boolean indicating whether to send a DO request
+     * to the other end upon connection.
@@ -139 +156,0 @@ public abstract class TelnetOptionHandler {
-     *
@@ -142 +159,2 @@ public abstract class TelnetOptionHandler {
-    public boolean getInitRemote() {
+    public boolean getInitRemote()
+    {
@@ -149 +166,0 @@ public abstract class TelnetOptionHandler {
-     *
@@ -152 +169,2 @@ public abstract class TelnetOptionHandler {
-    public int getOptionCode() {
+    public int getOptionCode()
+    {
@@ -157 +175,2 @@ public abstract class TelnetOptionHandler {
-     * Returns a boolean indicating whether a WILL request sent to the other side has been acknowledged.
+     * Returns a boolean indicating whether a WILL request sent to the other
+     * side has been acknowledged.
@@ -159 +177,0 @@ public abstract class TelnetOptionHandler {
-     *
@@ -162 +180,2 @@ public abstract class TelnetOptionHandler {
-    boolean getWill() {
+    boolean getWill()
+    {
@@ -167 +186,2 @@ public abstract class TelnetOptionHandler {
-     * Set behavior of the option for DO requests coming from the other end.
+     * Set behavior of the option for DO requests coming from
+     * the other end.
@@ -169 +188,0 @@ public abstract class TelnetOptionHandler {
-     *
@@ -172 +191,2 @@ public abstract class TelnetOptionHandler {
-    public void setAcceptLocal(final boolean accept) {
+    public void setAcceptLocal(final boolean accept)
+    {
@@ -177 +197,2 @@ public abstract class TelnetOptionHandler {
-     * Set behavior of the option for WILL requests coming from the other end.
+     * Set behavior of the option for WILL requests coming from
+     * the other end.
@@ -179 +199,0 @@ public abstract class TelnetOptionHandler {
-     *
@@ -182 +202,2 @@ public abstract class TelnetOptionHandler {
-    public void setAcceptRemote(final boolean accept) {
+    public void setAcceptRemote(final boolean accept)
+    {
@@ -187 +208,2 @@ public abstract class TelnetOptionHandler {
-     * Tells this option whether a DO request sent to the other side has been acknowledged (invoked by TelnetClient).
+     * Tells this option whether a DO request sent to the other
+     * side has been acknowledged (invoked by TelnetClient).
@@ -189 +210,0 @@ public abstract class TelnetOptionHandler {
-     *
@@ -192 +213,2 @@ public abstract class TelnetOptionHandler {
-    void setDo(final boolean state) {
+    void setDo(final boolean state)
+    {
@@ -199,2 +221,2 @@ public abstract class TelnetOptionHandler {
-     *
-     * @param init - if true, a WILL request will be sent upon subsequent connections.
+     * @param init - if true, a WILL request will be sent upon subsequent
+     * connections.
@@ -202 +224,2 @@ public abstract class TelnetOptionHandler {
-    public void setInitLocal(final boolean init) {
+    public void setInitLocal(final boolean init)
+    {
@@ -209,2 +232,2 @@ public abstract class TelnetOptionHandler {
-     *
-     * @param init - if true, a DO request will be sent upon subsequent connections.
+     * @param init - if true, a DO request will be sent upon subsequent
+     * connections.
@@ -212 +235,2 @@ public abstract class TelnetOptionHandler {
-    public void setInitRemote(final boolean init) {
+    public void setInitRemote(final boolean init)
+    {
@@ -217 +241,2 @@ public abstract class TelnetOptionHandler {
-     * Tells this option whether a WILL request sent to the other side has been acknowledged (invoked by TelnetClient).
+     * Tells this option whether a WILL request sent to the other
+     * side has been acknowledged (invoked by TelnetClient).
@@ -219 +243,0 @@ public abstract class TelnetOptionHandler {
-     *
@@ -222 +246,2 @@ public abstract class TelnetOptionHandler {
-    void setWill(final boolean state) {
+    void setWill(final boolean state)
+    {
@@ -227,2 +252,4 @@ public abstract class TelnetOptionHandler {
-     * This method is invoked whenever this option is acknowledged active on the local end (TelnetClient sent a WILL, remote side sent a DO). The method is used
-     * to specify a subnegotiation sequence that will be sent by TelnetClient when the option is activated.
+     * This method is invoked whenever this option is acknowledged active on
+     * the local end (TelnetClient sent a WILL, remote side sent a DO).
+     * The method is used to specify a subnegotiation sequence that will be
+     * sent by TelnetClient when the option is activated.
@@ -230,4 +257,5 @@ public abstract class TelnetOptionHandler {
-     * This implementation returns null, and must be overriden by the actual TelnetOptionHandler to specify which response must be sent for the subnegotiation
-     * request.
-     *
-     * @return subnegotiation sequence to be sent by TelnetClient. TelnetClient will add IAC SB &amp; IAC SE. null means no subnegotiation.
+     * This implementation returns null, and must be overriden by
+     * the actual TelnetOptionHandler to specify
+     * which response must be sent for the subnegotiation request.
+     * @return subnegotiation sequence to be sent by TelnetClient. TelnetClient
+     * will add IAC SB &amp; IAC SE. null means no subnegotiation.
@@ -238,0 +267 @@ public abstract class TelnetOptionHandler {
+
@@ -240,2 +269,4 @@ public abstract class TelnetOptionHandler {
-     * This method is invoked whenever this option is acknowledged active on the remote end (TelnetClient sent a DO, remote side sent a WILL). The method is
-     * used to specify a subnegotiation sequence that will be sent by TelnetClient when the option is activated.
+     * This method is invoked whenever this option is acknowledged active on
+     * the remote end (TelnetClient sent a DO, remote side sent a WILL).
+     * The method is used to specify a subnegotiation sequence that will be
+     * sent by TelnetClient when the option is activated.
@@ -243,4 +274,5 @@ public abstract class TelnetOptionHandler {
-     * This implementation returns null, and must be overriden by the actual TelnetOptionHandler to specify which response must be sent for the subnegotiation
-     * request.
-     *
-     * @return subnegotiation sequence to be sent by TelnetClient. TelnetClient will add IAC SB &amp; IAC SE. null means no subnegotiation.
+     * This implementation returns null, and must be overriden by
+     * the actual TelnetOptionHandler to specify
+     * which response must be sent for the subnegotiation request.
+     * @return subnegotiation sequence to be sent by TelnetClient. TelnetClient
+     * will add IAC SB &amp; IAC SE. null means no subnegotiation.
diff --git a/src/main/java/org/apache/commons/net/telnet/TelnetOutputStream.java b/src/main/java/org/apache/commons/net/telnet/TelnetOutputStream.java
index 571cab155..7ee8314ca 100644
--- a/src/main/java/org/apache/commons/net/telnet/TelnetOutputStream.java
+++ b/src/main/java/org/apache/commons/net/telnet/TelnetOutputStream.java
@@ -28,2 +28,3 @@ import java.io.OutputStream;
- * In ASCII mode, if convertCRtoCRLF is true (currently always true), any CR is converted to CRLF. IACs are doubled. Also a bare LF is converted to CRLF and a
- * bare CR is converted to CR\0
+ * In ASCII mode, if convertCRtoCRLF is true (currently always true), any CR is converted to CRLF.
+ * IACs are doubled.
+ * Also a bare LF is converted to CRLF and a bare CR is converted to CR\0
@@ -33 +34,3 @@ import java.io.OutputStream;
-final class TelnetOutputStream extends OutputStream {
+
+final class TelnetOutputStream extends OutputStream
+{
@@ -39 +42,2 @@ final class TelnetOutputStream extends OutputStream {
-    TelnetOutputStream(final TelnetClient client) {
+    TelnetOutputStream(final TelnetClient client)
+    {
@@ -42,0 +47 @@ final class TelnetOutputStream extends OutputStream {
+
@@ -45 +50,2 @@ final class TelnetOutputStream extends OutputStream {
-    public void close() throws IOException {
+    public void close() throws IOException
+    {
@@ -48,0 +55 @@ final class TelnetOutputStream extends OutputStream {
+
@@ -51 +58,2 @@ final class TelnetOutputStream extends OutputStream {
-    public void flush() throws IOException {
+    public void flush() throws IOException
+    {
@@ -54,0 +63 @@ final class TelnetOutputStream extends OutputStream {
+
@@ -58,3 +67,3 @@ final class TelnetOutputStream extends OutputStream {
-     *
-     * @param buffer The byte array to write.
-     * @throws IOException If an error occurs while writing to the underlying stream.
+     * @param buffer  The byte array to write.
+     * @throws IOException If an error occurs while writing to the underlying
+     *            stream.
@@ -63 +72,2 @@ final class TelnetOutputStream extends OutputStream {
-    public void write(final byte buffer[]) throws IOException {
+    public void write(final byte buffer[]) throws IOException
+    {
@@ -68 +78,2 @@ final class TelnetOutputStream extends OutputStream {
-     * Writes a number of bytes from a byte array to the stream starting from a given offset.
+     * Writes a number of bytes from a byte array to the stream starting from
+     * a given offset.
@@ -70,5 +81,5 @@ final class TelnetOutputStream extends OutputStream {
-     *
-     * @param buffer The byte array to write.
-     * @param offset The offset into the array at which to start copying data.
-     * @param length The number of bytes to write.
-     * @throws IOException If an error occurs while writing to the underlying stream.
+     * @param buffer  The byte array to write.
+     * @param offset  The offset into the array at which to start copying data.
+     * @param length  The number of bytes to write.
+     * @throws IOException If an error occurs while writing to the underlying
+     *            stream.
@@ -77,2 +88,4 @@ final class TelnetOutputStream extends OutputStream {
-    public void write(final byte buffer[], int offset, int length) throws IOException {
-        synchronized (client) {
+    public void write(final byte buffer[], int offset, int length) throws IOException
+    {
+        synchronized (client)
+        {
@@ -88 +100,0 @@ final class TelnetOutputStream extends OutputStream {
-     *
@@ -90 +102,2 @@ final class TelnetOutputStream extends OutputStream {
-     * @throws IOException If an error occurs while writing to the underlying stream.
+     * @throws IOException If an error occurs while writing to the underlying
+     *            stream.
@@ -93 +106,2 @@ final class TelnetOutputStream extends OutputStream {
-    public void write(int ch) throws IOException {
+    public void write(int ch) throws IOException
+    {
@@ -95 +109,2 @@ final class TelnetOutputStream extends OutputStream {
-        synchronized (client) {
+        synchronized (client)
+        {
@@ -100,2 +115,4 @@ final class TelnetOutputStream extends OutputStream {
-                if (lastWasCR) {
-                    if (convertCRtoCRLF) {
+                if (lastWasCR)
+                {
+                    if (convertCRtoCRLF)
+                    {
@@ -106 +123 @@ final class TelnetOutputStream extends OutputStream {
-                            return;
+                            return ;
@@ -109 +126,2 @@ final class TelnetOutputStream extends OutputStream {
-                    else if (ch != '\n') {
+                    else if (ch != '\n')
+                     {
@@ -114 +132,2 @@ final class TelnetOutputStream extends OutputStream {
-                switch (ch) {
+                switch (ch)
+                {
@@ -137 +156,2 @@ final class TelnetOutputStream extends OutputStream {
-            else if (ch == TelnetCommand.IAC) {
+            else if (ch == TelnetCommand.IAC)
+            {
diff --git a/src/main/java/org/apache/commons/net/telnet/TerminalTypeOptionHandler.java b/src/main/java/org/apache/commons/net/telnet/TerminalTypeOptionHandler.java
index c6d63f96e..0fad08c4c 100644
--- a/src/main/java/org/apache/commons/net/telnet/TerminalTypeOptionHandler.java
+++ b/src/main/java/org/apache/commons/net/telnet/TerminalTypeOptionHandler.java
@@ -23 +23,2 @@ package org.apache.commons.net.telnet;
-public class TerminalTypeOptionHandler extends TelnetOptionHandler {
+public class TerminalTypeOptionHandler extends TelnetOptionHandler
+{
@@ -32 +33 @@ public class TerminalTypeOptionHandler extends TelnetOptionHandler {
-    protected static final int TERMINAL_TYPE_SEND = 1;
+    protected static final int TERMINAL_TYPE_SEND =  1;
@@ -37 +38 @@ public class TerminalTypeOptionHandler extends TelnetOptionHandler {
-    protected static final int TERMINAL_TYPE_IS = 0;
+    protected static final int TERMINAL_TYPE_IS =  0;
@@ -45 +46,2 @@ public class TerminalTypeOptionHandler extends TelnetOptionHandler {
-     * Constructor for the TerminalTypeOptionHandler. Initial and accept behavior flags are set to false
+     * Constructor for the TerminalTypeOptionHandler. Initial and accept
+     * behavior flags are set to false
@@ -47 +48,0 @@ public class TerminalTypeOptionHandler extends TelnetOptionHandler {
-     *
@@ -50 +51,2 @@ public class TerminalTypeOptionHandler extends TelnetOptionHandler {
-    public TerminalTypeOptionHandler(final String termtype) {
+    public TerminalTypeOptionHandler(final String termtype)
+    {
@@ -56,2 +58,4 @@ public class TerminalTypeOptionHandler extends TelnetOptionHandler {
-     * Constructor for the TerminalTypeOptionHandler. Allows defining desired initial setting for local/remote activation of this option and behavior in case a
-     * local/remote activation request for this option is received.
+     * Constructor for the TerminalTypeOptionHandler. Allows defining desired
+     * initial setting for local/remote activation of this option and
+     * behavior in case a local/remote activation request for this
+     * option is received.
@@ -59,5 +63,4 @@ public class TerminalTypeOptionHandler extends TelnetOptionHandler {
-     *
-     * @param termtype     - terminal type that will be negotiated.
-     * @param initlocal    - if set to true, a WILL is sent upon connection.
-     * @param initremote   - if set to true, a DO is sent upon connection.
-     * @param acceptlocal  - if set to true, any DO request is accepted.
+     * @param termtype - terminal type that will be negotiated.
+     * @param initlocal - if set to true, a WILL is sent upon connection.
+     * @param initremote - if set to true, a DO is sent upon connection.
+     * @param acceptlocal - if set to true, any DO request is accepted.
@@ -66,3 +69,8 @@ public class TerminalTypeOptionHandler extends TelnetOptionHandler {
-    public TerminalTypeOptionHandler(final String termtype, final boolean initlocal, final boolean initremote, final boolean acceptlocal,
-            final boolean acceptremote) {
-        super(TelnetOption.TERMINAL_TYPE, initlocal, initremote, acceptlocal, acceptremote);
+    public TerminalTypeOptionHandler(final String termtype,
+                                final boolean initlocal,
+                                final boolean initremote,
+                                final boolean acceptlocal,
+                                final boolean acceptremote)
+    {
+        super(TelnetOption.TERMINAL_TYPE, initlocal, initremote,
+                                      acceptlocal, acceptremote);
@@ -75,2 +83 @@ public class TerminalTypeOptionHandler extends TelnetOptionHandler {
-     *
-     * @param suboptionData   - the sequence received, without IAC SB &amp; IAC SE
+     * @param suboptionData - the sequence received, without IAC SB &amp; IAC SE
@@ -78 +85 @@ public class TerminalTypeOptionHandler extends TelnetOptionHandler {
-     *                        <p>
+     * <p>
@@ -82,3 +89,8 @@ public class TerminalTypeOptionHandler extends TelnetOptionHandler {
-    public int[] answerSubnegotiation(final int suboptionData[], final int suboptionLength) {
-        if ((suboptionData != null) && (suboptionLength > 1) && (termType != null)) {
-            if ((suboptionData[0] == TERMINAL_TYPE) && (suboptionData[1] == TERMINAL_TYPE_SEND)) {
+    public int[] answerSubnegotiation(final int suboptionData[], final int suboptionLength)
+    {
+        if ((suboptionData != null) && (suboptionLength > 1)
+            && (termType != null))
+        {
+            if ((suboptionData[0] == TERMINAL_TYPE)
+                && (suboptionData[1] == TERMINAL_TYPE_SEND))
+            {
@@ -90 +102,2 @@ public class TerminalTypeOptionHandler extends TelnetOptionHandler {
-                for (int ii = 0; ii < termType.length(); ii++) {
+                for (int ii = 0; ii < termType.length(); ii++)
+                {
diff --git a/src/main/java/org/apache/commons/net/telnet/WindowSizeOptionHandler.java b/src/main/java/org/apache/commons/net/telnet/WindowSizeOptionHandler.java
index 4836ce601..ea78ab3f3 100644
--- a/src/main/java/org/apache/commons/net/telnet/WindowSizeOptionHandler.java
+++ b/src/main/java/org/apache/commons/net/telnet/WindowSizeOptionHandler.java
@@ -22 +21,0 @@ package org.apache.commons.net.telnet;
- *
@@ -25 +24,2 @@ package org.apache.commons.net.telnet;
-public class WindowSizeOptionHandler extends TelnetOptionHandler {
+public class WindowSizeOptionHandler extends TelnetOptionHandler
+{
@@ -42 +42,2 @@ public class WindowSizeOptionHandler extends TelnetOptionHandler {
-     * Constructor for the WindowSizeOptionHandler. Initial and accept behavior flags are set to false
+     * Constructor for the WindowSizeOptionHandler. Initial and accept
+     * behavior flags are set to false
@@ -44,2 +45 @@ public class WindowSizeOptionHandler extends TelnetOptionHandler {
-     *
-     * @param nWidth  - Window width.
+     * @param nWidth - Window width.
@@ -48,2 +48,11 @@ public class WindowSizeOptionHandler extends TelnetOptionHandler {
-    public WindowSizeOptionHandler(final int nWidth, final int nHeight) {
-        super(TelnetOption.WINDOW_SIZE, false, false, false, false);
+    public WindowSizeOptionHandler(
+        final int nWidth,
+        final int nHeight
+    ) {
+        super (
+            TelnetOption.WINDOW_SIZE,
+            false,
+            false,
+            false,
+            false
+        );
@@ -56,2 +65,4 @@ public class WindowSizeOptionHandler extends TelnetOptionHandler {
-     * Constructor for the WindowSizeOptionHandler. Allows defining desired initial setting for local/remote activation of this option and behavior in case a
-     * local/remote activation request for this option is received.
+     * Constructor for the WindowSizeOptionHandler. Allows defining desired
+     * initial setting for local/remote activation of this option and
+     * behavior in case a local/remote activation request for this
+     * option is received.
@@ -59,6 +70,5 @@ public class WindowSizeOptionHandler extends TelnetOptionHandler {
-     *
-     * @param nWidth       - Window width.
-     * @param nHeight      - Window Height
-     * @param initlocal    - if set to true, a WILL is sent upon connection.
-     * @param initremote   - if set to true, a DO is sent upon connection.
-     * @param acceptlocal  - if set to true, any DO request is accepted.
+     * @param nWidth - Window width.
+     * @param nHeight - Window Height
+     * @param initlocal - if set to true, a WILL is sent upon connection.
+     * @param initremote - if set to true, a DO is sent upon connection.
+     * @param acceptlocal - if set to true, any DO request is accepted.
@@ -67,3 +77,15 @@ public class WindowSizeOptionHandler extends TelnetOptionHandler {
-    public WindowSizeOptionHandler(final int nWidth, final int nHeight, final boolean initlocal, final boolean initremote, final boolean acceptlocal,
-            final boolean acceptremote) {
-        super(TelnetOption.WINDOW_SIZE, initlocal, initremote, acceptlocal, acceptremote);
+    public WindowSizeOptionHandler(
+        final int nWidth,
+        final int nHeight,
+        final boolean initlocal,
+        final boolean initremote,
+        final boolean acceptlocal,
+        final boolean acceptremote
+    ) {
+        super (
+            TelnetOption.WINDOW_SIZE,
+            initlocal,
+            initremote,
+            acceptlocal,
+            acceptremote
+        );
@@ -76 +98,2 @@ public class WindowSizeOptionHandler extends TelnetOptionHandler {
-     * Implements the abstract method of TelnetOptionHandler. This will send the client Height and Width to the server.
+     * Implements the abstract method of TelnetOptionHandler.
+     * This will send the client Height and Width to the server.
@@ -78 +100,0 @@ public class WindowSizeOptionHandler extends TelnetOptionHandler {
-     *
@@ -82 +104,2 @@ public class WindowSizeOptionHandler extends TelnetOptionHandler {
-    public int[] startSubnegotiationLocal() {
+    public int[] startSubnegotiationLocal()
+    {
@@ -115 +138 @@ public class WindowSizeOptionHandler extends TelnetOptionHandler {
-        // 3. duplicate 'ff' if needed.
+        // 3.    duplicate 'ff' if needed.
@@ -118 +141 @@ public class WindowSizeOptionHandler extends TelnetOptionHandler {
-        response[0] = WINDOW_SIZE; // 1 //
+        response[0] = WINDOW_SIZE;                          // 1 //
@@ -120,2 +143,5 @@ public class WindowSizeOptionHandler extends TelnetOptionHandler {
-        for ( // 2 //
-                nIndex = 1, nShift = 24; nIndex < nResponseSize; nIndex++, nShift -= 8) {
+        for (                                               // 2 //
+            nIndex=1, nShift = 24;
+            nIndex < nResponseSize;
+            nIndex++, nShift -=8
+        ) {
@@ -126 +152 @@ public class WindowSizeOptionHandler extends TelnetOptionHandler {
-            if (response[nIndex] == 0xff) { // 3 //
+            if (response[nIndex] == 0xff) {                 // 3 //
diff --git a/src/main/java/org/apache/commons/net/tftp/TFTP.java b/src/main/java/org/apache/commons/net/tftp/TFTP.java
index ecb3444a1..f9e949e01 100644
--- a/src/main/java/org/apache/commons/net/tftp/TFTP.java
+++ b/src/main/java/org/apache/commons/net/tftp/TFTP.java
@@ -28,4 +28,8 @@ import org.apache.commons.net.DatagramSocketClient;
- * The TFTP class exposes a set of methods to allow you to deal with the TFTP protocol directly, in case you want to write your own TFTP client or server.
- * However, almost every user should only be concerend with the {@link org.apache.commons.net.DatagramSocketClient#open open() }, and
- * {@link org.apache.commons.net.DatagramSocketClient#close close() }, methods. Additionally,the a
- * {@link org.apache.commons.net.DatagramSocketClient#setDefaultTimeout setDefaultTimeout() } method may be of importance for performance tuning.
+ * The TFTP class exposes a set of methods to allow you to deal with the TFTP
+ * protocol directly, in case you want to write your own TFTP client or
+ * server.  However, almost every user should only be concerend with
+ * the {@link org.apache.commons.net.DatagramSocketClient#open  open() },
+ * and {@link org.apache.commons.net.DatagramSocketClient#close  close() },
+ * methods. Additionally,the a
+ * {@link org.apache.commons.net.DatagramSocketClient#setDefaultTimeout setDefaultTimeout() }
+ *  method may be of importance for performance tuning.
@@ -33,2 +37,3 @@ import org.apache.commons.net.DatagramSocketClient;
- * Details regarding the TFTP protocol and the format of TFTP packets can be found in RFC 783. But the point of these classes is to keep you from having to
- * worry about the internals.
+ * Details regarding the TFTP protocol and the format of TFTP packets can
+ * be found in RFC 783.  But the point of these classes is to keep you
+ * from having to worry about the internals.
@@ -43 +48,2 @@ import org.apache.commons.net.DatagramSocketClient;
-public class TFTP extends DatagramSocketClient {
+public class TFTP extends DatagramSocketClient
+{
@@ -45 +51 @@ public class TFTP extends DatagramSocketClient {
-     * The ascii transfer mode. Its value is 0 and equivalent to NETASCII_MODE
+     * The ascii transfer mode.  Its value is 0 and equivalent to NETASCII_MODE
@@ -50 +56 @@ public class TFTP extends DatagramSocketClient {
-     * The netascii transfer mode. Its value is 0.
+     * The netascii transfer mode.  Its value is 0.
@@ -55 +61 @@ public class TFTP extends DatagramSocketClient {
-     * The binary transfer mode. Its value is 1 and equivalent to OCTET_MODE.
+     * The binary transfer mode.  Its value is 1 and equivalent to OCTET_MODE.
@@ -60 +66 @@ public class TFTP extends DatagramSocketClient {
-     * The image transfer mode. Its value is 1 and equivalent to OCTET_MODE.
+     * The image transfer mode.  Its value is 1 and equivalent to OCTET_MODE.
@@ -65 +71 @@ public class TFTP extends DatagramSocketClient {
-     * The octet transfer mode. Its value is 1.
+     * The octet transfer mode.  Its value is 1.
@@ -70 +76,2 @@ public class TFTP extends DatagramSocketClient {
-     * The default number of milliseconds to wait to receive a datagram before timing out. The default is 5000 milliseconds (5 seconds).
+     * The default number of milliseconds to wait to receive a datagram
+     * before timing out.  The default is 5000 milliseconds (5 seconds).
@@ -80 +87,2 @@ public class TFTP extends DatagramSocketClient {
-     * The size to use for TFTP packet buffers. Its 4 plus the TFTPPacket.SEGMENT_SIZE, i.e. 516.
+     * The size to use for TFTP packet buffers.  Its 4 plus the
+     * TFTPPacket.SEGMENT_SIZE, i.e. 516.
@@ -85 +93,3 @@ public class TFTP extends DatagramSocketClient {
-     * Returns the TFTP string representation of a TFTP transfer mode. Will throw an ArrayIndexOutOfBoundsException if an invalid transfer mode is specified.
+     * Returns the TFTP string representation of a TFTP transfer mode.
+     * Will throw an ArrayIndexOutOfBoundsException if an invalid transfer
+     * mode is specified.
@@ -87,2 +97,2 @@ public class TFTP extends DatagramSocketClient {
-     * @param mode The TFTP transfer mode. One of the MODE constants.
-     * @return The TFTP string representation of the TFTP transfer mode.
+     * @param mode  The TFTP transfer mode.  One of the MODE constants.
+     * @return  The TFTP string representation of the TFTP transfer mode.
@@ -90 +100,2 @@ public class TFTP extends DatagramSocketClient {
-    public static final String getModeName(final int mode) {
+    public static final String getModeName(final int mode)
+    {
@@ -102,0 +114 @@ public class TFTP extends DatagramSocketClient {
+
@@ -104,2 +116,4 @@ public class TFTP extends DatagramSocketClient {
-     * A buffer used to accelerate sends in bufferedSend(). It is left package visible so that TFTPClient may be slightly more efficient during file sends. It
-     * saves the creation of an additional buffer and prevents a buffer copy in _newDataPcket().
+     * A buffer used to accelerate sends in bufferedSend().
+     * It is left package visible so that TFTPClient may be slightly more
+     * efficient during file sends.  It saves the creation of an
+     * additional buffer and prevents a buffer copy in _newDataPcket().
@@ -110 +124,2 @@ public class TFTP extends DatagramSocketClient {
-     * Creates a TFTP instance with a default timeout of DEFAULT_TIMEOUT, a null socket, and buffered operations disabled.
+     * Creates a TFTP instance with a default timeout of DEFAULT_TIMEOUT,
+     * a null socket, and buffered operations disabled.
@@ -112 +127,2 @@ public class TFTP extends DatagramSocketClient {
-    public TFTP() {
+    public TFTP()
+    {
@@ -119,3 +135,6 @@ public class TFTP extends DatagramSocketClient {
-     * Initializes the internal buffers. Buffers are used by {@link #bufferedSend bufferedSend() } and {@link #bufferedReceive bufferedReceive() }. This method
-     * must be called before calling either one of those two methods. When you finish using buffered operations, you must call {@link #endBufferedOps
-     * endBufferedOps() }.
+     * Initializes the internal buffers. Buffers are used by
+     * {@link #bufferedSend  bufferedSend() } and
+     * {@link #bufferedReceive  bufferedReceive() }.  This
+     * method must be called before calling either one of those two
+     * methods.  When you finish using buffered operations, you must
+     * call {@link #endBufferedOps  endBufferedOps() }.
@@ -123 +142,2 @@ public class TFTP extends DatagramSocketClient {
-    public final void beginBufferedOps() {
+    public final void beginBufferedOps()
+    {
@@ -125 +145,2 @@ public class TFTP extends DatagramSocketClient {
-        receiveDatagram = new DatagramPacket(receiveBuffer, receiveBuffer.length);
+        receiveDatagram =
+            new DatagramPacket(receiveBuffer, receiveBuffer.length);
@@ -127 +148,2 @@ public class TFTP extends DatagramSocketClient {
-        sendDatagram = new DatagramPacket(sendBuffer, sendBuffer.length);
+        sendDatagram =
+            new DatagramPacket(sendBuffer, sendBuffer.length);
@@ -129,0 +152 @@ public class TFTP extends DatagramSocketClient {
+
@@ -131,6 +154,13 @@ public class TFTP extends DatagramSocketClient {
-     * This is a special method to perform a more efficient packet receive. It should only be used after calling {@link #beginBufferedOps beginBufferedOps() }.
-     * beginBufferedOps() initializes a set of buffers used internally that prevent the new allocation of a DatagramPacket and byte array for each send and
-     * receive. To use these buffers you must call the bufferedReceive() and bufferedSend() methods instead of send() and receive(). You must also be certain
-     * that you don't manipulate the resulting packet in such a way that it interferes with future buffered operations. For example, a TFTPDataPacket received
-     * with bufferedReceive() will have a reference to the internal byte buffer. You must finish using this data before calling bufferedReceive() again, or else
-     * the data will be overwritten by the the call.
+     * This is a special method to perform a more efficient packet receive.
+     * It should only be used after calling
+     * {@link #beginBufferedOps  beginBufferedOps() }.  beginBufferedOps()
+     * initializes a set of buffers used internally that prevent the new
+     * allocation of a DatagramPacket and byte array for each send and receive.
+     * To use these buffers you must call the bufferedReceive() and
+     * bufferedSend() methods instead of send() and receive().  You must
+     * also be certain that you don't manipulate the resulting packet in
+     * such a way that it interferes with future buffered operations.
+     * For example, a TFTPDataPacket received with bufferedReceive() will
+     * have a reference to the internal byte buffer.  You must finish using
+     * this data before calling bufferedReceive() again, or else the data
+     * will be overwritten by the the call.
@@ -139,8 +169,14 @@ public class TFTP extends DatagramSocketClient {
-     * @throws InterruptedIOException If a socket timeout occurs. The Java documentation claims an InterruptedIOException is thrown on a DatagramSocket timeout,
-     *                                but in practice we find a SocketException is thrown. You should catch both to be safe.
-     * @throws SocketException        If a socket timeout occurs. The Java documentation claims an InterruptedIOException is thrown on a DatagramSocket timeout,
-     *                                but in practice we find a SocketException is thrown. You should catch both to be safe.
-     * @throws IOException            If some other I/O error occurs.
-     * @throws TFTPPacketException    If an invalid TFTP packet is received.
-     */
-    public final TFTPPacket bufferedReceive() throws IOException, InterruptedIOException, SocketException, TFTPPacketException {
+     * @throws InterruptedIOException  If a socket timeout occurs.  The
+     *       Java documentation claims an InterruptedIOException is thrown
+     *       on a DatagramSocket timeout, but in practice we find a
+     *       SocketException is thrown.  You should catch both to be safe.
+     * @throws SocketException  If a socket timeout occurs.  The
+     *       Java documentation claims an InterruptedIOException is thrown
+     *       on a DatagramSocket timeout, but in practice we find a
+     *       SocketException is thrown.  You should catch both to be safe.
+     * @throws IOException  If some other I/O error occurs.
+     * @throws TFTPPacketException If an invalid TFTP packet is received.
+     */
+    public final TFTPPacket bufferedReceive() throws IOException,
+                InterruptedIOException, SocketException, TFTPPacketException
+    {
@@ -157,6 +193,13 @@ public class TFTP extends DatagramSocketClient {
-     * This is a special method to perform a more efficient packet send. It should only be used after calling {@link #beginBufferedOps beginBufferedOps() }.
-     * beginBufferedOps() initializes a set of buffers used internally that prevent the new allocation of a DatagramPacket and byte array for each send and
-     * receive. To use these buffers you must call the bufferedReceive() and bufferedSend() methods instead of send() and receive(). You must also be certain
-     * that you don't manipulate the resulting packet in such a way that it interferes with future buffered operations. For example, a TFTPDataPacket received
-     * with bufferedReceive() will have a reference to the internal byte buffer. You must finish using this data before calling bufferedReceive() again, or else
-     * the data will be overwritten by the the call.
+     * This is a special method to perform a more efficient packet send.
+     * It should only be used after calling
+     * {@link #beginBufferedOps  beginBufferedOps() }.  beginBufferedOps()
+     * initializes a set of buffers used internally that prevent the new
+     * allocation of a DatagramPacket and byte array for each send and receive.
+     * To use these buffers you must call the bufferedReceive() and
+     * bufferedSend() methods instead of send() and receive().  You must
+     * also be certain that you don't manipulate the resulting packet in
+     * such a way that it interferes with future buffered operations.
+     * For example, a TFTPDataPacket received with bufferedReceive() will
+     * have a reference to the internal byte buffer.  You must finish using
+     * this data before calling bufferedReceive() again, or else the data
+     * will be overwritten by the the call.
@@ -164,2 +207,2 @@ public class TFTP extends DatagramSocketClient {
-     * @param packet The TFTP packet to send.
-     * @throws IOException If some I/O error occurs.
+     * @param packet  The TFTP packet to send.
+     * @throws IOException  If some  I/O error occurs.
@@ -167 +210,2 @@ public class TFTP extends DatagramSocketClient {
-    public final void bufferedSend(final TFTPPacket packet) throws IOException {
+    public final void bufferedSend(final TFTPPacket packet) throws IOException
+    {
@@ -171,0 +216 @@ public class TFTP extends DatagramSocketClient {
+
@@ -173,2 +218,3 @@ public class TFTP extends DatagramSocketClient {
-     * This method synchronizes a connection by discarding all packets that may be in the local socket buffer. This method need only be called when you
-     * implement your own TFTP client or server.
+     * This method synchronizes a connection by discarding all packets that
+     * may be in the local socket buffer.  This method need only be called
+     * when you implement your own TFTP client or server.
@@ -178 +224,2 @@ public class TFTP extends DatagramSocketClient {
-    public final void discardPackets() throws IOException {
+    public final void discardPackets() throws IOException
+    {
@@ -187 +234,2 @@ public class TFTP extends DatagramSocketClient {
-        try {
+        try
+        {
@@ -191,2 +239,4 @@ public class TFTP extends DatagramSocketClient {
-        } catch (final SocketException | InterruptedIOException e) {
-            // Do nothing. We timed out so we hope we're caught up.
+        }
+        catch (final SocketException | InterruptedIOException e)
+        {
+            // Do nothing.  We timed out so we hope we're caught up.
@@ -201 +251,2 @@ public class TFTP extends DatagramSocketClient {
-    public final void endBufferedOps() {
+    public final void endBufferedOps()
+    {
@@ -207,0 +259 @@ public class TFTP extends DatagramSocketClient {
+
@@ -212,8 +264,14 @@ public class TFTP extends DatagramSocketClient {
-     * @throws InterruptedIOException If a socket timeout occurs. The Java documentation claims an InterruptedIOException is thrown on a DatagramSocket timeout,
-     *                                but in practice we find a SocketException is thrown. You should catch both to be safe.
-     * @throws SocketException        If a socket timeout occurs. The Java documentation claims an InterruptedIOException is thrown on a DatagramSocket timeout,
-     *                                but in practice we find a SocketException is thrown. You should catch both to be safe.
-     * @throws IOException            If some other I/O error occurs.
-     * @throws TFTPPacketException    If an invalid TFTP packet is received.
-     */
-    public final TFTPPacket receive() throws IOException, InterruptedIOException, SocketException, TFTPPacketException {
+     * @throws InterruptedIOException  If a socket timeout occurs.  The
+     *       Java documentation claims an InterruptedIOException is thrown
+     *       on a DatagramSocket timeout, but in practice we find a
+     *       SocketException is thrown.  You should catch both to be safe.
+     * @throws SocketException  If a socket timeout occurs.  The
+     *       Java documentation claims an InterruptedIOException is thrown
+     *       on a DatagramSocket timeout, but in practice we find a
+     *       SocketException is thrown.  You should catch both to be safe.
+     * @throws IOException  If some other I/O error occurs.
+     * @throws TFTPPacketException If an invalid TFTP packet is received.
+     */
+    public final TFTPPacket receive() throws IOException, InterruptedIOException,
+                SocketException, TFTPPacketException
+    {
@@ -230,0 +289 @@ public class TFTP extends DatagramSocketClient {
+
@@ -234,2 +293,2 @@ public class TFTP extends DatagramSocketClient {
-     * @param packet The TFTP packet to send.
-     * @throws IOException If some I/O error occurs.
+     * @param packet  The TFTP packet to send.
+     * @throws IOException  If some  I/O error occurs.
@@ -237 +296,2 @@ public class TFTP extends DatagramSocketClient {
-    public final void send(final TFTPPacket packet) throws IOException {
+    public final void send(final TFTPPacket packet) throws IOException
+    {
@@ -247,3 +307,2 @@ public class TFTP extends DatagramSocketClient {
-     *
-     * @param direction {@code >} or {@code <}
-     * @param packet    the packet to be sent or that has been received respectively
+     * @param direction {@code >} or  {@code <}
+     * @param packet the packet to be sent or that has been received respectively
diff --git a/src/main/java/org/apache/commons/net/tftp/TFTPAckPacket.java b/src/main/java/org/apache/commons/net/tftp/TFTPAckPacket.java
index ddce2e0ef..7a2db6860 100644
--- a/src/main/java/org/apache/commons/net/tftp/TFTPAckPacket.java
+++ b/src/main/java/org/apache/commons/net/tftp/TFTPAckPacket.java
@@ -24 +24,2 @@ import java.net.InetAddress;
- * A final class derived from TFTPPacket definiing the TFTP Acknowledgement packet type.
+ * A final class derived from TFTPPacket definiing the TFTP Acknowledgement
+ * packet type.
@@ -26,4 +27,10 @@ import java.net.InetAddress;
- * Details regarding the TFTP protocol and the format of TFTP packets can be found in RFC 783. But the point of these classes is to keep you from having to
- * worry about the internals. Additionally, only very few people should have to care about any of the TFTPPacket classes or derived classes. Almost all users
- * should only be concerned with the {@link org.apache.commons.net.tftp.TFTPClient} class {@link org.apache.commons.net.tftp.TFTPClient#receiveFile
- * receiveFile()} and {@link org.apache.commons.net.tftp.TFTPClient#sendFile sendFile()} methods.
+ * Details regarding the TFTP protocol and the format of TFTP packets can
+ * be found in RFC 783.  But the point of these classes is to keep you
+ * from having to worry about the internals.  Additionally, only very
+ * few people should have to care about any of the TFTPPacket classes
+ * or derived classes.  Almost all users should only be concerned with the
+ * {@link org.apache.commons.net.tftp.TFTPClient} class
+ * {@link org.apache.commons.net.tftp.TFTPClient#receiveFile receiveFile()}
+ * and
+ * {@link org.apache.commons.net.tftp.TFTPClient#sendFile sendFile()}
+ * methods.
@@ -37 +44,2 @@ import java.net.InetAddress;
-public final class TFTPAckPacket extends TFTPPacket {
+public final class TFTPAckPacket extends TFTPPacket
+{
@@ -42,2 +50,3 @@ public final class TFTPAckPacket extends TFTPPacket {
-     * Creates an acknowledgement packet based from a received datagram. Assumes the datagram is at least length 4, else an ArrayIndexOutOfBoundsException may
-     * be thrown.
+     * Creates an acknowledgement packet based from a received
+     * datagram.  Assumes the datagram is at least length 4, else an
+     * ArrayIndexOutOfBoundsException may be thrown.
@@ -45,2 +54,3 @@ public final class TFTPAckPacket extends TFTPPacket {
-     * @param datagram The datagram containing the received acknowledgement.
-     * @throws TFTPPacketException If the datagram isn't a valid TFTP acknowledgement packet.
+     * @param datagram  The datagram containing the received acknowledgement.
+     * @throws TFTPPacketException  If the datagram isn't a valid TFTP
+     *         acknowledgement packet.
@@ -48,2 +58,4 @@ public final class TFTPAckPacket extends TFTPPacket {
-    TFTPAckPacket(final DatagramPacket datagram) throws TFTPPacketException {
-        super(TFTPPacket.ACKNOWLEDGEMENT, datagram.getAddress(), datagram.getPort());
+    TFTPAckPacket(final DatagramPacket datagram) throws TFTPPacketException
+    {
+        super(TFTPPacket.ACKNOWLEDGEMENT, datagram.getAddress(),
+              datagram.getPort());
@@ -62 +74,2 @@ public final class TFTPAckPacket extends TFTPPacket {
-     * Creates an acknowledgment packet to be sent to a host at a given port acknowledging receipt of a block.
+     * Creates an acknowledgment packet to be sent to a host at a given port
+     * acknowledging receipt of a block.
@@ -64,3 +77,3 @@ public final class TFTPAckPacket extends TFTPPacket {
-     * @param destination The host to which the packet is going to be sent.
-     * @param port        The port to which the packet is going to be sent.
-     * @param blockNumber The block number being acknowledged.
+     * @param destination  The host to which the packet is going to be sent.
+     * @param port  The port to which the packet is going to be sent.
+     * @param blockNumber  The block number being acknowledged.
@@ -68 +81,2 @@ public final class TFTPAckPacket extends TFTPPacket {
-    public TFTPAckPacket(final InetAddress destination, final int port, final int blockNumber) {
+    public TFTPAckPacket(final InetAddress destination, final int port, final int blockNumber)
+    {
@@ -78 +92,2 @@ public final class TFTPAckPacket extends TFTPPacket {
-    public int getBlockNumber() {
+    public int getBlockNumber()
+    {
@@ -81,0 +97 @@ public final class TFTPAckPacket extends TFTPPacket {
+
@@ -83,3 +99,7 @@ public final class TFTPAckPacket extends TFTPPacket {
-     * Creates a UDP datagram containing all the TFTP acknowledgement packet data in the proper format. This is a method exposed to the programmer in case he
-     * wants to implement his own TFTP client instead of using the {@link org.apache.commons.net.tftp.TFTPClient} class. Under normal circumstances, you should
-     * not have a need to call this method.
+     * Creates a UDP datagram containing all the TFTP
+     * acknowledgement packet data in the proper format.
+     * This is a method exposed to the programmer in case he
+     * wants to implement his own TFTP client instead of using
+     * the {@link org.apache.commons.net.tftp.TFTPClient}
+     * class.  Under normal circumstances, you should not have a need to call this
+     * method.
@@ -90 +110,2 @@ public final class TFTPAckPacket extends TFTPPacket {
-    public DatagramPacket newDatagram() {
+    public DatagramPacket newDatagram()
+    {
@@ -95,3 +116,3 @@ public final class TFTPAckPacket extends TFTPPacket {
-        data[1] = (byte) type;
-        data[2] = (byte) ((blockNumber & 0xffff) >> 8);
-        data[3] = (byte) (blockNumber & 0xff);
+        data[1] = (byte)type;
+        data[2] = (byte)((blockNumber & 0xffff) >> 8);
+        data[3] = (byte)(blockNumber & 0xff);
@@ -101,0 +123 @@ public final class TFTPAckPacket extends TFTPPacket {
+
@@ -103,2 +125,5 @@ public final class TFTPAckPacket extends TFTPPacket {
-     * This is a method only available within the package for implementing efficient datagram transport by elminating buffering. It takes a datagram as an
-     * argument, and a byte buffer in which to store the raw datagram data. Inside the method, the data is set as the datagram's data and the datagram returned.
+     * This is a method only available within the package for
+     * implementing efficient datagram transport by elminating buffering.
+     * It takes a datagram as an argument, and a byte buffer in which
+     * to store the raw datagram data.  Inside the method, the data
+     * is set as the datagram's data and the datagram returned.
@@ -106,2 +131,2 @@ public final class TFTPAckPacket extends TFTPPacket {
-     * @param datagram The datagram to create.
-     * @param data     The buffer to store the packet and to use in the datagram.
+     * @param datagram  The datagram to create.
+     * @param data The buffer to store the packet and to use in the datagram.
@@ -111 +136,2 @@ public final class TFTPAckPacket extends TFTPPacket {
-    DatagramPacket newDatagram(final DatagramPacket datagram, final byte[] data) {
+    DatagramPacket newDatagram(final DatagramPacket datagram, final byte[] data)
+    {
@@ -113,3 +139,3 @@ public final class TFTPAckPacket extends TFTPPacket {
-        data[1] = (byte) type;
-        data[2] = (byte) ((blockNumber & 0xffff) >> 8);
-        data[3] = (byte) (blockNumber & 0xff);
+        data[1] = (byte)type;
+        data[2] = (byte)((blockNumber & 0xffff) >> 8);
+        data[3] = (byte)(blockNumber & 0xff);
@@ -124,0 +151 @@ public final class TFTPAckPacket extends TFTPPacket {
+
@@ -130 +157,2 @@ public final class TFTPAckPacket extends TFTPPacket {
-    public void setBlockNumber(final int blockNumber) {
+    public void setBlockNumber(final int blockNumber)
+    {
@@ -136 +163,0 @@ public final class TFTPAckPacket extends TFTPPacket {
-     *
@@ -143,0 +171 @@ public final class TFTPAckPacket extends TFTPPacket {
+
diff --git a/src/main/java/org/apache/commons/net/tftp/TFTPClient.java b/src/main/java/org/apache/commons/net/tftp/TFTPClient.java
index 5011b97e6..b3330a386 100644
--- a/src/main/java/org/apache/commons/net/tftp/TFTPClient.java
+++ b/src/main/java/org/apache/commons/net/tftp/TFTPClient.java
@@ -32,6 +32,14 @@ import org.apache.commons.net.io.ToNetASCIIInputStream;
- * The TFTPClient class encapsulates all the aspects of the TFTP protocol necessary to receive and send files through TFTP. It is derived from the
- * {@link org.apache.commons.net.tftp.TFTP} because it is more convenient than using aggregation, and as a result exposes the same set of methods to allow you
- * to deal with the TFTP protocol directly. However, almost every user should only be concerend with the the
- * {@link org.apache.commons.net.DatagramSocketClient#open open() }, {@link org.apache.commons.net.DatagramSocketClient#close close() }, {@link #sendFile
- * sendFile() }, and {@link #receiveFile receiveFile() } methods. Additionally, the {@link #setMaxTimeouts setMaxTimeouts() } and
- * {@link org.apache.commons.net.DatagramSocketClient#setDefaultTimeout setDefaultTimeout() } methods may be of importance for performance tuning.
+ * The TFTPClient class encapsulates all the aspects of the TFTP protocol
+ * necessary to receive and send files through TFTP.  It is derived from
+ * the {@link org.apache.commons.net.tftp.TFTP} because
+ * it is more convenient than using aggregation, and as a result exposes
+ * the same set of methods to allow you to deal with the TFTP protocol
+ * directly.  However, almost every user should only be concerend with the
+ * the {@link org.apache.commons.net.DatagramSocketClient#open  open() },
+ * {@link org.apache.commons.net.DatagramSocketClient#close  close() },
+ * {@link #sendFile  sendFile() }, and
+ * {@link #receiveFile  receiveFile() } methods.  Additionally, the
+ * {@link #setMaxTimeouts  setMaxTimeouts() } and
+ * {@link org.apache.commons.net.DatagramSocketClient#setDefaultTimeout setDefaultTimeout() }
+ *  methods may be of importance for performance
+ * tuning.
@@ -39,2 +47,3 @@ import org.apache.commons.net.io.ToNetASCIIInputStream;
- * Details regarding the TFTP protocol and the format of TFTP packets can be found in RFC 783. But the point of these classes is to keep you from having to
- * worry about the internals.
+ * Details regarding the TFTP protocol and the format of TFTP packets can
+ * be found in RFC 783.  But the point of these classes is to keep you
+ * from having to worry about the internals.
@@ -48 +57,2 @@ import org.apache.commons.net.io.ToNetASCIIInputStream;
-public class TFTPClient extends TFTP {
+public class TFTPClient extends TFTP
+{
@@ -50 +60,3 @@ public class TFTPClient extends TFTP {
-     * The default number of times a receive attempt is allowed to timeout before ending attempts to retry the receive and failing. The default is 5 timeouts.
+     * The default number of times a receive attempt is allowed to timeout
+     * before ending attempts to retry the receive and failing.  The default
+     * is 5 timeouts.
@@ -64,2 +76,3 @@ public class TFTPClient extends TFTP {
-     * Creates a TFTPClient instance with a default timeout of DEFAULT_TIMEOUT, maximum timeouts value of DEFAULT_MAX_TIMEOUTS, a null socket, and buffered
-     * operations disabled.
+     * Creates a TFTPClient instance with a default timeout of DEFAULT_TIMEOUT,
+     * maximum timeouts value of DEFAULT_MAX_TIMEOUTS, a null socket,
+     * and buffered operations disabled.
@@ -67 +80,2 @@ public class TFTPClient extends TFTP {
-    public TFTPClient() {
+    public TFTPClient()
+    {
@@ -72 +86,2 @@ public class TFTPClient extends TFTP {
-     * Returns the maximum number of times a receive attempt is allowed to timeout before ending attempts to retry the receive and failing.
+     * Returns the maximum number of times a receive attempt is allowed to
+     * timeout before ending attempts to retry the receive and failing.
@@ -76 +91,2 @@ public class TFTPClient extends TFTP {
-    public int getMaxTimeouts() {
+    public int getMaxTimeouts()
+    {
@@ -86,0 +103 @@ public class TFTPClient extends TFTP {
+
@@ -102 +119,2 @@ public class TFTPClient extends TFTP {
-     * @throws IOException If an I/O error occurs. The nature of the error will be reported in the message.
+     * @throws IOException If an I/O error occurs.  The nature of the
+     *            error will be reported in the message.
@@ -104 +122,4 @@ public class TFTPClient extends TFTP {
-    public int receiveFile(final String fileName, final int mode, final OutputStream output, final InetAddress host) throws IOException {
+    public int receiveFile(final String fileName, final int mode, final OutputStream output,
+                           final InetAddress host)
+    throws IOException
+    {
@@ -109,3 +130,6 @@ public class TFTPClient extends TFTP {
-     * Requests a named file from a remote host, writes the file to an OutputStream, closes the connection, and returns the number of bytes read. A local UDP
-     * socket must first be created by {@link org.apache.commons.net.DatagramSocketClient#open open()} before invoking this method. This method will not close
-     * the OutputStream containing the file; you must close it after the method invocation.
+     * Requests a named file from a remote host, writes the
+     * file to an OutputStream, closes the connection, and returns the number
+     * of bytes read.  A local UDP socket must first be created by
+     * {@link org.apache.commons.net.DatagramSocketClient#open open()} before
+     * invoking this method.  This method will not close the OutputStream
+     * containing the file; you must close it after the method invocation.
@@ -113,5 +137,5 @@ public class TFTPClient extends TFTP {
-     * @param fileName The name of the file to receive.
-     * @param mode     The TFTP mode of the transfer (one of the MODE constants).
-     * @param output   The OutputStream to which the file should be written.
-     * @param host     The remote host serving the file.
-     * @param port     The port number of the remote TFTP server.
+     * @param fileName  The name of the file to receive.
+     * @param mode   The TFTP mode of the transfer (one of the MODE constants).
+     * @param output The OutputStream to which the file should be written.
+     * @param host   The remote host serving the file.
+     * @param port   The port number of the remote TFTP server.
@@ -119 +143,2 @@ public class TFTPClient extends TFTP {
-     * @throws IOException If an I/O error occurs. The nature of the error will be reported in the message.
+     * @throws IOException If an I/O error occurs.  The nature of the
+     *            error will be reported in the message.
@@ -121 +146,3 @@ public class TFTPClient extends TFTP {
-    public int receiveFile(final String fileName, final int mode, OutputStream output, InetAddress host, final int port) throws IOException {
+    public int receiveFile(final String fileName, final int mode, OutputStream output,
+                           InetAddress host, final int port) throws IOException
+    {
@@ -155 +182,3 @@ public class TFTPClient extends TFTP {
-                                final TFTPErrorPacket error = new TFTPErrorPacket(recdAddress, recdPort, TFTPErrorPacket.UNKNOWN_TID, "INCORRECT SOURCE PORT");
+                                final TFTPErrorPacket error = new TFTPErrorPacket(recdAddress,
+                                        recdPort, TFTPErrorPacket.UNKNOWN_TID,
+                                        "INCORRECT SOURCE PORT");
@@ -157 +186 @@ public class TFTPClient extends TFTP {
-                                throw new IOException("Incorrect source port (" + recdPort + ") in request reply.");
+                                throw new IOException("Incorrect source port ("+recdPort+") in request reply.");
@@ -161 +190,2 @@ public class TFTPClient extends TFTP {
-                            if (!host.equals(recdAddress)) {
+                            if(!host.equals(recdAddress))
+                            {
@@ -173,2 +203,3 @@ public class TFTPClient extends TFTP {
-                                TFTPErrorPacket error = (TFTPErrorPacket) received;
-                                throw new IOException("Error code " + error.getError() + " received: " + error.getMessage());
+                                TFTPErrorPacket error = (TFTPErrorPacket)received;
+                                throw new IOException("Error code " + error.getError() +
+                                                      " received: " + error.getMessage());
@@ -176 +207 @@ public class TFTPClient extends TFTP {
-                                final TFTPDataPacket data = (TFTPDataPacket) received;
+                                final TFTPDataPacket data = (TFTPDataPacket)received;
@@ -184 +215,3 @@ public class TFTPClient extends TFTP {
-                                        error = new TFTPErrorPacket(host, hostPort, TFTPErrorPacket.OUT_OF_SPACE, "File write failed.");
+                                        error = new TFTPErrorPacket(host, hostPort,
+                                                                    TFTPErrorPacket.OUT_OF_SPACE,
+                                                                    "File write failed.");
@@ -206 +239,3 @@ public class TFTPClient extends TFTP {
-                            final TFTPErrorPacket error = new TFTPErrorPacket(recdAddress, recdPort, TFTPErrorPacket.UNKNOWN_TID, "Unexpected host or port.");
+                            final TFTPErrorPacket error = new TFTPErrorPacket(recdAddress, recdPort,
+                                    TFTPErrorPacket.UNKNOWN_TID,
+                                    "Unexpected host or port.");
@@ -216 +251 @@ public class TFTPClient extends TFTP {
-                } while (wantReply); // waiting for response
+                } while(wantReply); // waiting for response
@@ -229,0 +265 @@ public class TFTPClient extends TFTP {
+
@@ -238,2 +274,3 @@ public class TFTPClient extends TFTP {
-     * @throws IOException          If an I/O error occurs. The nature of the error will be reported in the message.
-     * @throws UnknownHostException If the hostname cannot be resolved.
+     * @throws IOException If an I/O error occurs.  The nature of the
+     *            error will be reported in the message.
+     * @throws UnknownHostException  If the hostname cannot be resolved.
@@ -241,2 +278,6 @@ public class TFTPClient extends TFTP {
-    public int receiveFile(final String fileName, final int mode, final OutputStream output, final String hostname) throws UnknownHostException, IOException {
-        return receiveFile(fileName, mode, output, InetAddress.getByName(hostname), DEFAULT_PORT);
+    public int receiveFile(final String fileName, final int mode, final OutputStream output,
+                           final String hostname)
+    throws UnknownHostException, IOException
+    {
+        return receiveFile(fileName, mode, output, InetAddress.getByName(hostname),
+                           DEFAULT_PORT);
@@ -244,0 +286 @@ public class TFTPClient extends TFTP {
+
@@ -246,3 +288,6 @@ public class TFTPClient extends TFTP {
-     * Requests a named file from a remote host, writes the file to an OutputStream, closes the connection, and returns the number of bytes read. A local UDP
-     * socket must first be created by {@link org.apache.commons.net.DatagramSocketClient#open open()} before invoking this method. This method will not close
-     * the OutputStream containing the file; you must close it after the method invocation.
+     * Requests a named file from a remote host, writes the
+     * file to an OutputStream, closes the connection, and returns the number
+     * of bytes read.  A local UDP socket must first be created by
+     * {@link org.apache.commons.net.DatagramSocketClient#open open()} before
+     * invoking this method.  This method will not close the OutputStream
+     * containing the file; you must close it after the method invocation.
@@ -256,2 +301,3 @@ public class TFTPClient extends TFTP {
-     * @throws IOException          If an I/O error occurs. The nature of the error will be reported in the message.
-     * @throws UnknownHostException If the hostname cannot be resolved.
+     * @throws IOException If an I/O error occurs.  The nature of the
+     *            error will be reported in the message.
+     * @throws UnknownHostException  If the hostname cannot be resolved.
@@ -259,3 +305,6 @@ public class TFTPClient extends TFTP {
-    public int receiveFile(final String fileName, final int mode, final OutputStream output, final String hostname, final int port)
-            throws UnknownHostException, IOException {
-        return receiveFile(fileName, mode, output, InetAddress.getByName(hostname), port);
+    public int receiveFile(final String fileName, final int mode, final OutputStream output,
+                           final String hostname, final int port)
+    throws UnknownHostException, IOException
+    {
+        return receiveFile(fileName, mode, output, InetAddress.getByName(hostname),
+                           port);
@@ -267 +316,2 @@ public class TFTPClient extends TFTP {
-     * @param fileName The name the remote server should use when creating the file on its file system.
+     * @param fileName The name the remote server should use when creating
+     *        the file on its file system.
@@ -269 +319 @@ public class TFTPClient extends TFTP {
-     * @param input    the input stream containing the data to be sent
+     * @param input the input stream containing the data to be sent
@@ -271,2 +321,3 @@ public class TFTPClient extends TFTP {
-     * @throws IOException          If an I/O error occurs. The nature of the error will be reported in the message.
-     * @throws UnknownHostException If the hostname cannot be resolved.
+     * @throws IOException If an I/O error occurs.  The nature of the
+     *            error will be reported in the message.
+     * @throws UnknownHostException  If the hostname cannot be resolved.
@@ -274 +325,4 @@ public class TFTPClient extends TFTP {
-    public void sendFile(final String fileName, final int mode, final InputStream input, final InetAddress host) throws IOException {
+    public void sendFile(final String fileName, final int mode, final InputStream input,
+                         final InetAddress host)
+    throws IOException
+    {
@@ -277,0 +332 @@ public class TFTPClient extends TFTP {
+
@@ -279,3 +334,6 @@ public class TFTPClient extends TFTP {
-     * Requests to send a file to a remote host, reads the file from an InputStream, sends the file to the remote host, and closes the connection. A local UDP
-     * socket must first be created by {@link org.apache.commons.net.DatagramSocketClient#open open()} before invoking this method. This method will not close
-     * the InputStream containing the file; you must close it after the method invocation.
+     * Requests to send a file to a remote host, reads the file from an
+     * InputStream, sends the file to the remote host, and closes the
+     * connection.  A local UDP socket must first be created by
+     * {@link org.apache.commons.net.DatagramSocketClient#open open()} before
+     * invoking this method.  This method will not close the InputStream
+     * containing the file; you must close it after the method invocation.
@@ -283 +341,2 @@ public class TFTPClient extends TFTP {
-     * @param fileName The name the remote server should use when creating the file on its file system.
+     * @param fileName The name the remote server should use when creating
+     *        the file on its file system.
@@ -285 +344 @@ public class TFTPClient extends TFTP {
-     * @param input    the input stream containing the data to be sent
+     * @param input the input stream containing the data to be sent
@@ -288 +347,2 @@ public class TFTPClient extends TFTP {
-     * @throws IOException If an I/O error occurs. The nature of the error will be reported in the message.
+     * @throws IOException If an I/O error occurs.  The nature of the
+     *            error will be reported in the message.
@@ -290 +350,3 @@ public class TFTPClient extends TFTP {
-    public void sendFile(final String fileName, final int mode, InputStream input, InetAddress host, final int port) throws IOException {
+    public void sendFile(final String fileName, final int mode, InputStream input,
+                         InetAddress host, final int port) throws IOException
+    {
@@ -309,2 +371,2 @@ public class TFTPClient extends TFTP {
-                 // first time: block is 0, lastBlock is 0, send a request packet.
-                 // subsequent: block is integer starting at 1, send data packet.
+                // first time: block is 0, lastBlock is 0, send a request packet.
+                // subsequent: block is integer starting at 1, send data packet.
@@ -324 +386,3 @@ public class TFTPClient extends TFTP {
-                                final TFTPErrorPacket error = new TFTPErrorPacket(recdAddress, recdPort, TFTPErrorPacket.UNKNOWN_TID, "INCORRECT SOURCE PORT");
+                                final TFTPErrorPacket error = new TFTPErrorPacket(recdAddress,
+                                        recdPort, TFTPErrorPacket.UNKNOWN_TID,
+                                        "INCORRECT SOURCE PORT");
@@ -326 +390 @@ public class TFTPClient extends TFTP {
-                                throw new IOException("Incorrect source port (" + recdPort + ") in request reply.");
+                                throw new IOException("Incorrect source port ("+recdPort+") in request reply.");
@@ -342,2 +406,3 @@ public class TFTPClient extends TFTP {
-                                final TFTPErrorPacket error = (TFTPErrorPacket) received;
-                                throw new IOException("Error code " + error.getError() + " received: " + error.getMessage());
+                                final TFTPErrorPacket error = (TFTPErrorPacket)received;
+                                throw new IOException("Error code " + error.getError() +
+                                                      " received: " + error.getMessage());
@@ -346 +411 @@ public class TFTPClient extends TFTP {
-                                final int lastBlock = ((TFTPAckPacket) received).getBlockNumber();
+                                final int lastBlock = ((TFTPAckPacket)received).getBlockNumber();
@@ -363 +428,4 @@ public class TFTPClient extends TFTP {
-                            final TFTPErrorPacket error = new TFTPErrorPacket(recdAddress, recdPort, TFTPErrorPacket.UNKNOWN_TID, "Unexpected host or port.");
+                            final TFTPErrorPacket error = new TFTPErrorPacket(recdAddress,
+                                                        recdPort,
+                                                        TFTPErrorPacket.UNKNOWN_TID,
+                                                        "Unexpected host or port.");
@@ -374 +442 @@ public class TFTPClient extends TFTP {
-                } while (wantReply);
+                } while(wantReply);
@@ -384 +452,2 @@ public class TFTPClient extends TFTP {
-                while (dataLength > 0 && (bytesRead = input.read(sendBuffer, offset, dataLength)) > 0) {
+                while (dataLength > 0 &&
+                        (bytesRead = input.read(sendBuffer, offset, dataLength)) > 0) {
@@ -389 +458 @@ public class TFTPClient extends TFTP {
-                if (totalThisPacket < TFTPPacket.SEGMENT_SIZE) {
+                if( totalThisPacket < TFTPPacket.SEGMENT_SIZE ) {
@@ -402,0 +472 @@ public class TFTPClient extends TFTP {
+
@@ -406 +476,2 @@ public class TFTPClient extends TFTP {
-     * @param fileName The name the remote server should use when creating the file on its file system.
+     * @param fileName The name the remote server should use when creating
+     *        the file on its file system.
@@ -408 +479 @@ public class TFTPClient extends TFTP {
-     * @param input    the input stream containing the data to be sent
+     * @param input the input stream containing the data to be sent
@@ -410,2 +481,3 @@ public class TFTPClient extends TFTP {
-     * @throws IOException          If an I/O error occurs. The nature of the error will be reported in the message.
-     * @throws UnknownHostException If the hostname cannot be resolved.
+     * @throws IOException If an I/O error occurs.  The nature of the
+     *            error will be reported in the message.
+     * @throws UnknownHostException  If the hostname cannot be resolved.
@@ -413,2 +485,6 @@ public class TFTPClient extends TFTP {
-    public void sendFile(final String fileName, final int mode, final InputStream input, final String hostname) throws UnknownHostException, IOException {
-        sendFile(fileName, mode, input, InetAddress.getByName(hostname), DEFAULT_PORT);
+    public void sendFile(final String fileName, final int mode, final InputStream input,
+                         final String hostname)
+    throws UnknownHostException, IOException
+    {
+        sendFile(fileName, mode, input, InetAddress.getByName(hostname),
+                 DEFAULT_PORT);
@@ -416,0 +493 @@ public class TFTPClient extends TFTP {
+
@@ -418,3 +495,6 @@ public class TFTPClient extends TFTP {
-     * Requests to send a file to a remote host, reads the file from an InputStream, sends the file to the remote host, and closes the connection. A local UDP
-     * socket must first be created by {@link org.apache.commons.net.DatagramSocketClient#open open()} before invoking this method. This method will not close
-     * the InputStream containing the file; you must close it after the method invocation.
+     * Requests to send a file to a remote host, reads the file from an
+     * InputStream, sends the file to the remote host, and closes the
+     * connection.  A local UDP socket must first be created by
+     * {@link org.apache.commons.net.DatagramSocketClient#open open()} before
+     * invoking this method.  This method will not close the InputStream
+     * containing the file; you must close it after the method invocation.
@@ -422 +502,2 @@ public class TFTPClient extends TFTP {
-     * @param fileName The name the remote server should use when creating the file on its file system.
+     * @param fileName The name the remote server should use when creating
+     *        the file on its file system.
@@ -424 +505 @@ public class TFTPClient extends TFTP {
-     * @param input    the input stream containing the data to be sent
+     * @param input the input stream containing the data to be sent
@@ -427,2 +508,3 @@ public class TFTPClient extends TFTP {
-     * @throws IOException          If an I/O error occurs. The nature of the error will be reported in the message.
-     * @throws UnknownHostException If the hostname cannot be resolved.
+     * @throws IOException If an I/O error occurs.  The nature of the
+     *            error will be reported in the message.
+     * @throws UnknownHostException  If the hostname cannot be resolved.
@@ -430,2 +512,4 @@ public class TFTPClient extends TFTP {
-    public void sendFile(final String fileName, final int mode, final InputStream input, final String hostname, final int port)
-            throws UnknownHostException, IOException {
+    public void sendFile(final String fileName, final int mode, final InputStream input,
+                         final String hostname, final int port)
+    throws UnknownHostException, IOException
+    {
@@ -436,2 +520,4 @@ public class TFTPClient extends TFTP {
-     * Sets the maximum number of times a receive attempt is allowed to timeout during a receiveFile() or sendFile() operation before ending attempts to retry
-     * the receive and failing. The default is DEFAULT_MAX_TIMEOUTS.
+     * Sets the maximum number of times a receive attempt is allowed to
+     * timeout during a receiveFile() or sendFile() operation before ending
+     * attempts to retry the receive and failing.
+     * The default is DEFAULT_MAX_TIMEOUTS.
@@ -439 +525,3 @@ public class TFTPClient extends TFTP {
-     * @param numTimeouts The maximum number of timeouts to allow. Values less than 1 should not be used, but if they are, they are treated as 1.
+     * @param numTimeouts  The maximum number of timeouts to allow.  Values
+     *        less than 1 should not be used, but if they are, they are
+     *        treated as 1.
@@ -441 +529,2 @@ public class TFTPClient extends TFTP {
-    public void setMaxTimeouts(final int numTimeouts) {
+    public void setMaxTimeouts(final int numTimeouts)
+    {
diff --git a/src/main/java/org/apache/commons/net/tftp/TFTPDataPacket.java b/src/main/java/org/apache/commons/net/tftp/TFTPDataPacket.java
index 63e7c456a..9abc1e47a 100644
--- a/src/main/java/org/apache/commons/net/tftp/TFTPDataPacket.java
+++ b/src/main/java/org/apache/commons/net/tftp/TFTPDataPacket.java
@@ -24 +24,2 @@ import java.net.InetAddress;
- * A final class derived from TFTPPacket definiing the TFTP Data packet type.
+ * A final class derived from TFTPPacket definiing the TFTP Data
+ * packet type.
@@ -26,4 +27,10 @@ import java.net.InetAddress;
- * Details regarding the TFTP protocol and the format of TFTP packets can be found in RFC 783. But the point of these classes is to keep you from having to
- * worry about the internals. Additionally, only very few people should have to care about any of the TFTPPacket classes or derived classes. Almost all users
- * should only be concerned with the {@link org.apache.commons.net.tftp.TFTPClient} class {@link org.apache.commons.net.tftp.TFTPClient#receiveFile
- * receiveFile()} and {@link org.apache.commons.net.tftp.TFTPClient#sendFile sendFile()} methods.
+ * Details regarding the TFTP protocol and the format of TFTP packets can
+ * be found in RFC 783.  But the point of these classes is to keep you
+ * from having to worry about the internals.  Additionally, only very
+ * few people should have to care about any of the TFTPPacket classes
+ * or derived classes.  Almost all users should only be concerned with the
+ * {@link org.apache.commons.net.tftp.TFTPClient} class
+ * {@link org.apache.commons.net.tftp.TFTPClient#receiveFile receiveFile()}
+ * and
+ * {@link org.apache.commons.net.tftp.TFTPClient#sendFile sendFile()}
+ * methods.
@@ -37 +44,2 @@ import java.net.InetAddress;
-public final class TFTPDataPacket extends TFTPPacket {
+public final class TFTPDataPacket extends TFTPPacket
+{
@@ -57 +65,3 @@ public final class TFTPDataPacket extends TFTPPacket {
-     * Creates a data packet based from a received datagram. Assumes the datagram is at least length 4, else an ArrayIndexOutOfBoundsException may be thrown.
+     * Creates a data packet based from a received
+     * datagram.  Assumes the datagram is at least length 4, else an
+     * ArrayIndexOutOfBoundsException may be thrown.
@@ -59,2 +69,3 @@ public final class TFTPDataPacket extends TFTPPacket {
-     * @param datagram The datagram containing the received data.
-     * @throws TFTPPacketException If the datagram isn't a valid TFTP data packet.
+     * @param datagram  The datagram containing the received data.
+     * @throws TFTPPacketException  If the datagram isn't a valid TFTP
+     *         data packet.
@@ -62 +73,2 @@ public final class TFTPDataPacket extends TFTPPacket {
-    TFTPDataPacket(final DatagramPacket datagram) throws TFTPPacketException {
+    TFTPDataPacket(final DatagramPacket datagram) throws TFTPPacketException
+    {
@@ -81 +93,3 @@ public final class TFTPDataPacket extends TFTPPacket {
-    public TFTPDataPacket(final InetAddress destination, final int port, final int blockNumber, final byte[] data) {
+    public TFTPDataPacket(final InetAddress destination, final int port, final int blockNumber,
+                          final byte[] data)
+    {
@@ -84,0 +99 @@ public final class TFTPDataPacket extends TFTPPacket {
+
@@ -86,3 +101,6 @@ public final class TFTPDataPacket extends TFTPPacket {
-     * Creates a data packet to be sent to a host at a given port with a given block number. The actual data to be sent is passed as an array, an offset, and a
-     * length. The offset is the offset into the byte array where the data starts. The length is the length of the data. If the length is greater than
-     * MAX_DATA_LENGTH, it is truncated.
+     * Creates a data packet to be sent to a host at a given port
+     * with a given block number.  The actual data to be sent is passed as
+     * an array, an offset, and a length.  The offset is the offset into
+     * the byte array where the data starts.  The length is the length of
+     * the data.  If the length is greater than MAX_DATA_LENGTH, it is
+     * truncated.
@@ -90,2 +108,2 @@ public final class TFTPDataPacket extends TFTPPacket {
-     * @param destination The host to which the packet is going to be sent.
-     * @param port        The port to which the packet is going to be sent.
+     * @param destination  The host to which the packet is going to be sent.
+     * @param port  The port to which the packet is going to be sent.
@@ -93,3 +111,3 @@ public final class TFTPDataPacket extends TFTPPacket {
-     * @param data        The byte array containing the data.
-     * @param offset      The offset into the array where the data starts.
-     * @param length      The length of the data.
+     * @param data The byte array containing the data.
+     * @param offset The offset into the array where the data starts.
+     * @param length The length of the data.
@@ -97 +115,3 @@ public final class TFTPDataPacket extends TFTPPacket {
-    public TFTPDataPacket(final InetAddress destination, final int port, final int blockNumber, final byte[] data, final int offset, final int length) {
+    public TFTPDataPacket(final InetAddress destination, final int port, final int blockNumber,
+                          final byte[] data, final int offset, final int length)
+    {
@@ -112 +132,2 @@ public final class TFTPDataPacket extends TFTPPacket {
-    public int getBlockNumber() {
+    public int getBlockNumber()
+    {
@@ -121 +142,2 @@ public final class TFTPDataPacket extends TFTPPacket {
-    public byte[] getData() {
+    public byte[] getData()
+    {
@@ -130 +152,2 @@ public final class TFTPDataPacket extends TFTPPacket {
-    public int getDataLength() {
+    public int getDataLength()
+    {
@@ -135 +158,2 @@ public final class TFTPDataPacket extends TFTPPacket {
-     * Returns the offset into the byte array where the packet data actually starts.
+     * Returns the offset into the byte array where the packet data actually
+     * starts.
@@ -137 +161,2 @@ public final class TFTPDataPacket extends TFTPPacket {
-     * @return The offset into the byte array where the packet data actually starts.
+     * @return The offset into the byte array where the packet data actually
+     *         starts.
@@ -139 +164,2 @@ public final class TFTPDataPacket extends TFTPPacket {
-    public int getDataOffset() {
+    public int getDataOffset()
+    {
@@ -144,3 +170,8 @@ public final class TFTPDataPacket extends TFTPPacket {
-     * Creates a UDP datagram containing all the TFTP data packet data in the proper format. This is a method exposed to the programmer in case he wants to
-     * implement his own TFTP client instead of using the {@link org.apache.commons.net.tftp.TFTPClient} class. Under normal circumstances, you should not have
-     * a need to call this method.
+     * Creates a UDP datagram containing all the TFTP
+     * data packet data in the proper format.
+     * This is a method exposed to the programmer in case he
+     * wants to implement his own TFTP client instead of using
+     * the {@link org.apache.commons.net.tftp.TFTPClient}
+     * class.
+     * Under normal circumstances, you should not have a need to call this
+     * method.
@@ -151 +182,2 @@ public final class TFTPDataPacket extends TFTPPacket {
-    public DatagramPacket newDatagram() {
+    public DatagramPacket newDatagram()
+    {
@@ -156,3 +188,3 @@ public final class TFTPDataPacket extends TFTPPacket {
-        data[1] = (byte) type;
-        data[2] = (byte) ((blockNumber & 0xffff) >> 8);
-        data[3] = (byte) (blockNumber & 0xff);
+        data[1] = (byte)type;
+        data[2] = (byte)((blockNumber & 0xffff) >> 8);
+        data[3] = (byte)(blockNumber & 0xff);
@@ -166,2 +198,5 @@ public final class TFTPDataPacket extends TFTPPacket {
-     * This is a method only available within the package for implementing efficient datagram transport by elminating buffering. It takes a datagram as an
-     * argument, and a byte buffer in which to store the raw datagram data. Inside the method, the data is set as the datagram's data and the datagram returned.
+     * This is a method only available within the package for
+     * implementing efficient datagram transport by elminating buffering.
+     * It takes a datagram as an argument, and a byte buffer in which
+     * to store the raw datagram data.  Inside the method, the data
+     * is set as the datagram's data and the datagram returned.
@@ -169,2 +204,2 @@ public final class TFTPDataPacket extends TFTPPacket {
-     * @param datagram The datagram to create.
-     * @param data     The buffer to store the packet and to use in the datagram.
+     * @param datagram  The datagram to create.
+     * @param data The buffer to store the packet and to use in the datagram.
@@ -174 +209,2 @@ public final class TFTPDataPacket extends TFTPPacket {
-    DatagramPacket newDatagram(final DatagramPacket datagram, final byte[] data) {
+    DatagramPacket newDatagram(final DatagramPacket datagram, final byte[] data)
+    {
@@ -176,3 +212,3 @@ public final class TFTPDataPacket extends TFTPPacket {
-        data[1] = (byte) type;
-        data[2] = (byte) ((blockNumber & 0xffff) >> 8);
-        data[3] = (byte) (blockNumber & 0xff);
+        data[1] = (byte)type;
+        data[2] = (byte)((blockNumber & 0xffff) >> 8);
+        data[3] = (byte)(blockNumber & 0xff);
@@ -193,3 +229 @@ public final class TFTPDataPacket extends TFTPPacket {
-    /**
-     * Sets the block number of the data packet.
-     *
+    /** Sets the block number of the data packet.
@@ -198 +232,2 @@ public final class TFTPDataPacket extends TFTPPacket {
-    public void setBlockNumber(final int blockNumber) {
+    public void setBlockNumber(final int blockNumber)
+    {
@@ -205 +240 @@ public final class TFTPDataPacket extends TFTPPacket {
-     * @param data   The byte array containing the data.
+     * @param data The byte array containing the data.
@@ -209 +244,2 @@ public final class TFTPDataPacket extends TFTPPacket {
-    public void setData(final byte[] data, final int offset, final int length) {
+    public void setData(final byte[] data, final int offset, final int length)
+    {
@@ -219 +254,0 @@ public final class TFTPDataPacket extends TFTPPacket {
-     *
diff --git a/src/main/java/org/apache/commons/net/tftp/TFTPErrorPacket.java b/src/main/java/org/apache/commons/net/tftp/TFTPErrorPacket.java
index e77bec9f0..c189a55d6 100644
--- a/src/main/java/org/apache/commons/net/tftp/TFTPErrorPacket.java
+++ b/src/main/java/org/apache/commons/net/tftp/TFTPErrorPacket.java
@@ -24 +24,2 @@ import java.net.InetAddress;
- * A final class derived from TFTPPacket definiing the TFTP Error packet type.
+ * A final class derived from TFTPPacket definiing the TFTP Error
+ * packet type.
@@ -26,4 +27,10 @@ import java.net.InetAddress;
- * Details regarding the TFTP protocol and the format of TFTP packets can be found in RFC 783. But the point of these classes is to keep you from having to
- * worry about the internals. Additionally, only very few people should have to care about any of the TFTPPacket classes or derived classes. Almost all users
- * should only be concerned with the {@link org.apache.commons.net.tftp.TFTPClient} class {@link org.apache.commons.net.tftp.TFTPClient#receiveFile
- * receiveFile()} and {@link org.apache.commons.net.tftp.TFTPClient#sendFile sendFile()} methods.
+ * Details regarding the TFTP protocol and the format of TFTP packets can
+ * be found in RFC 783.  But the point of these classes is to keep you
+ * from having to worry about the internals.  Additionally, only very
+ * few people should have to care about any of the TFTPPacket classes
+ * or derived classes.  Almost all users should only be concerned with the
+ * {@link org.apache.commons.net.tftp.TFTPClient} class
+ * {@link org.apache.commons.net.tftp.TFTPClient#receiveFile receiveFile()}
+ * and
+ * {@link org.apache.commons.net.tftp.TFTPClient#sendFile sendFile()}
+ * methods.
@@ -37 +44,2 @@ import java.net.InetAddress;
-public final class TFTPErrorPacket extends TFTPPacket {
+public final class TFTPErrorPacket extends TFTPPacket
+{
@@ -71 +79,3 @@ public final class TFTPErrorPacket extends TFTPPacket {
-     * Creates an error packet based from a received datagram. Assumes the datagram is at least length 4, else an ArrayIndexOutOfBoundsException may be thrown.
+     * Creates an error packet based from a received
+     * datagram.  Assumes the datagram is at least length 4, else an
+     * ArrayIndexOutOfBoundsException may be thrown.
@@ -73,2 +83,3 @@ public final class TFTPErrorPacket extends TFTPPacket {
-     * @param datagram The datagram containing the received error.
-     * @throws TFTPPacketException If the datagram isn't a valid TFTP error packet.
+     * @param datagram  The datagram containing the received error.
+     * @throws TFTPPacketException  If the datagram isn't a valid TFTP
+     *         error packet.
@@ -76 +87,2 @@ public final class TFTPErrorPacket extends TFTPPacket {
-    TFTPErrorPacket(final DatagramPacket datagram) throws TFTPPacketException {
+    TFTPErrorPacket(final DatagramPacket datagram) throws TFTPPacketException
+    {
@@ -99,2 +111,3 @@ public final class TFTPErrorPacket extends TFTPPacket {
-        while (index < length && data[index] != 0) {
-            buffer.append((char) data[index]);
+        while (index < length && data[index] != 0)
+        {
+            buffer.append((char)data[index]);
@@ -108 +121,2 @@ public final class TFTPErrorPacket extends TFTPPacket {
-     * Creates an error packet to be sent to a host at a given port with an error code and error message.
+     * Creates an error packet to be sent to a host at a given port
+     * with an error code and error message.
@@ -110,4 +124,4 @@ public final class TFTPErrorPacket extends TFTPPacket {
-     * @param destination The host to which the packet is going to be sent.
-     * @param port        The port to which the packet is going to be sent.
-     * @param error       The error code of the packet.
-     * @param message     The error message of the packet.
+     * @param destination  The host to which the packet is going to be sent.
+     * @param port  The port to which the packet is going to be sent.
+     * @param error The error code of the packet.
+     * @param message The error message of the packet.
@@ -115 +129,3 @@ public final class TFTPErrorPacket extends TFTPPacket {
-    public TFTPErrorPacket(final InetAddress destination, final int port, final int error, final String message) {
+    public TFTPErrorPacket(final InetAddress destination, final int port,
+                           final int error, final String message)
+    {
@@ -127 +143,2 @@ public final class TFTPErrorPacket extends TFTPPacket {
-    public int getError() {
+    public int getError()
+    {
@@ -130,0 +148 @@ public final class TFTPErrorPacket extends TFTPPacket {
+
@@ -136 +154,2 @@ public final class TFTPErrorPacket extends TFTPPacket {
-    public String getMessage() {
+    public String getMessage()
+    {
@@ -139,0 +159 @@ public final class TFTPErrorPacket extends TFTPPacket {
+
@@ -141,3 +161,8 @@ public final class TFTPErrorPacket extends TFTPPacket {
-     * Creates a UDP datagram containing all the TFTP error packet data in the proper format. This is a method exposed to the programmer in case he wants to
-     * implement his own TFTP client instead of using the {@link org.apache.commons.net.tftp.TFTPClient} class. Under normal circumstances, you should not have
-     * a need to call this method.
+     * Creates a UDP datagram containing all the TFTP
+     * error packet data in the proper format.
+     * This is a method exposed to the programmer in case he
+     * wants to implement his own TFTP client instead of using
+     * the {@link org.apache.commons.net.tftp.TFTPClient}
+     * class.
+     * Under normal circumstances, you should not have a need to call this
+     * method.
@@ -148 +173,2 @@ public final class TFTPErrorPacket extends TFTPPacket {
-    public DatagramPacket newDatagram() {
+    public DatagramPacket newDatagram()
+    {
@@ -156,3 +182,3 @@ public final class TFTPErrorPacket extends TFTPPacket {
-        data[1] = (byte) type;
-        data[2] = (byte) ((error & 0xffff) >> 8);
-        data[3] = (byte) (error & 0xff);
+        data[1] = (byte)type;
+        data[2] = (byte)((error & 0xffff) >> 8);
+        data[3] = (byte)(error & 0xff);
@@ -166,0 +193 @@ public final class TFTPErrorPacket extends TFTPPacket {
+
@@ -168,2 +195,5 @@ public final class TFTPErrorPacket extends TFTPPacket {
-     * This is a method only available within the package for implementing efficient datagram transport by elminating buffering. It takes a datagram as an
-     * argument, and a byte buffer in which to store the raw datagram data. Inside the method, the data is set as the datagram's data and the datagram returned.
+     * This is a method only available within the package for
+     * implementing efficient datagram transport by elminating buffering.
+     * It takes a datagram as an argument, and a byte buffer in which
+     * to store the raw datagram data.  Inside the method, the data
+     * is set as the datagram's data and the datagram returned.
@@ -171,2 +201,2 @@ public final class TFTPErrorPacket extends TFTPPacket {
-     * @param datagram The datagram to create.
-     * @param data     The buffer to store the packet and to use in the datagram.
+     * @param datagram  The datagram to create.
+     * @param data The buffer to store the packet and to use in the datagram.
@@ -176 +206,2 @@ public final class TFTPErrorPacket extends TFTPPacket {
-    DatagramPacket newDatagram(final DatagramPacket datagram, final byte[] data) {
+    DatagramPacket newDatagram(final DatagramPacket datagram, final byte[] data)
+    {
@@ -182,3 +213,3 @@ public final class TFTPErrorPacket extends TFTPPacket {
-        data[1] = (byte) type;
-        data[2] = (byte) ((error & 0xffff) >> 8);
-        data[3] = (byte) (error & 0xff);
+        data[1] = (byte)type;
+        data[2] = (byte)((error & 0xffff) >> 8);
+        data[3] = (byte)(error & 0xff);
@@ -200 +230,0 @@ public final class TFTPErrorPacket extends TFTPPacket {
-     *
diff --git a/src/main/java/org/apache/commons/net/tftp/TFTPPacket.java b/src/main/java/org/apache/commons/net/tftp/TFTPPacket.java
index 293284edb..0ff7ec438 100644
--- a/src/main/java/org/apache/commons/net/tftp/TFTPPacket.java
+++ b/src/main/java/org/apache/commons/net/tftp/TFTPPacket.java
@@ -24,3 +24,5 @@ import java.net.InetAddress;
- * TFTPPacket is an abstract class encapsulating the functionality common to the 5 types of TFTP packets. It also provides a static factory method that will
- * create the correct TFTP packet instance from a datagram. This relieves the programmer from having to figure out what kind of TFTP packet is contained in a
- * datagram and create it himself.
+ * TFTPPacket is an abstract class encapsulating the functionality common
+ * to the 5 types of TFTP packets.  It also provides a static factory
+ * method that will create the correct TFTP packet instance from a
+ * datagram.  This relieves the programmer from having to figure out what
+ * kind of TFTP packet is contained in a datagram and create it himself.
@@ -28,4 +30,10 @@ import java.net.InetAddress;
- * Details regarding the TFTP protocol and the format of TFTP packets can be found in RFC 783. But the point of these classes is to keep you from having to
- * worry about the internals. Additionally, only very few people should have to care about any of the TFTPPacket classes or derived classes. Almost all users
- * should only be concerned with the {@link org.apache.commons.net.tftp.TFTPClient} class {@link org.apache.commons.net.tftp.TFTPClient#receiveFile
- * receiveFile()} and {@link org.apache.commons.net.tftp.TFTPClient#sendFile sendFile()} methods.
+ * Details regarding the TFTP protocol and the format of TFTP packets can
+ * be found in RFC 783.  But the point of these classes is to keep you
+ * from having to worry about the internals.  Additionally, only very
+ * few people should have to care about any of the TFTPPacket classes
+ * or derived classes.  Almost all users should only be concerned with the
+ * {@link org.apache.commons.net.tftp.TFTPClient} class
+ * {@link org.apache.commons.net.tftp.TFTPClient#receiveFile receiveFile()}
+ * and
+ * {@link org.apache.commons.net.tftp.TFTPClient#sendFile sendFile()}
+ * methods.
@@ -38 +46,2 @@ import java.net.InetAddress;
-public abstract class TFTPPacket {
+public abstract class TFTPPacket
+{
@@ -40 +49,3 @@ public abstract class TFTPPacket {
-     * The minimum size of a packet. This is 4 bytes. It is enough to store the opcode and blocknumber or other required data depending on the packet type.
+     * The minimum size of a packet.  This is 4 bytes.  It is enough
+     * to store the opcode and blocknumber or other required data
+     * depending on the packet type.
@@ -45 +56,4 @@ public abstract class TFTPPacket {
-     * This is the actual TFTP spec identifier and is equal to 1. Identifier returned by {@link #getType getType()} indicating a read request packet.
+     * This is the actual TFTP spec
+     * identifier and is equal to 1.
+     * Identifier returned by {@link #getType getType()}
+     * indicating a read request packet.
@@ -50 +64,4 @@ public abstract class TFTPPacket {
-     * This is the actual TFTP spec identifier and is equal to 2. Identifier returned by {@link #getType getType()} indicating a write request packet.
+     * This is the actual TFTP spec
+     * identifier and is equal to 2.
+     * Identifier returned by {@link #getType getType()}
+     * indicating a write request packet.
@@ -55 +72,4 @@ public abstract class TFTPPacket {
-     * This is the actual TFTP spec identifier and is equal to 3. Identifier returned by {@link #getType getType()} indicating a data packet.
+     * This is the actual TFTP spec
+     * identifier and is equal to 3.
+     * Identifier returned by {@link #getType getType()}
+     * indicating a data packet.
@@ -60 +80,4 @@ public abstract class TFTPPacket {
-     * This is the actual TFTP spec identifier and is equal to 4. Identifier returned by {@link #getType getType()} indicating an acknowledgement packet.
+     * This is the actual TFTP spec
+     * identifier and is equal to 4.
+     * Identifier returned by {@link #getType getType()}
+     * indicating an acknowledgement packet.
@@ -65 +88,4 @@ public abstract class TFTPPacket {
-     * This is the actual TFTP spec identifier and is equal to 5. Identifier returned by {@link #getType getType()} indicating an error packet.
+     * This is the actual TFTP spec
+     * identifier and is equal to 5.
+     * Identifier returned by {@link #getType getType()}
+     * indicating an error packet.
@@ -70,2 +96,4 @@ public abstract class TFTPPacket {
-     * The TFTP data packet maximum segment size in bytes. This is 512 and is useful for those familiar with the TFTP protocol who want to use the
-     * {@link org.apache.commons.net.tftp.TFTP} class methods to implement their own TFTP servers or clients.
+     * The TFTP data packet maximum segment size in bytes.  This is 512
+     * and is useful for those familiar with the TFTP protocol who want
+     * to use the {@link org.apache.commons.net.tftp.TFTP}
+     * class methods to implement their own TFTP servers or clients.
@@ -76,2 +104,5 @@ public abstract class TFTPPacket {
-     * When you receive a datagram that you expect to be a TFTP packet, you use this factory method to create the proper TFTPPacket object encapsulating the
-     * data contained in that datagram. This method is the only way you can instantiate a TFTPPacket derived class from a datagram.
+     * When you receive a datagram that you expect to be a TFTP packet, you use
+     * this factory method to create the proper TFTPPacket object
+     * encapsulating the data contained in that datagram.  This method is the
+     * only way you can instantiate a TFTPPacket derived class from a
+     * datagram.
@@ -79 +110 @@ public abstract class TFTPPacket {
-     * @param datagram The datagram containing a TFTP packet.
+     * @param datagram  The datagram containing a TFTP packet.
@@ -81 +112,2 @@ public abstract class TFTPPacket {
-     * @throws TFTPPacketException If the datagram does not contain a valid TFTP packet.
+     * @throws TFTPPacketException  If the datagram does not contain a valid
+     *             TFTP packet.
@@ -83 +115,3 @@ public abstract class TFTPPacket {
-    public static final TFTPPacket newTFTPPacket(final DatagramPacket datagram) throws TFTPPacketException {
+    public static final TFTPPacket newTFTPPacket(final DatagramPacket datagram)
+    throws TFTPPacketException
+    {
@@ -88 +122,2 @@ public abstract class TFTPPacket {
-            throw new TFTPPacketException("Bad packet. Datagram data length is too short.");
+            throw new TFTPPacketException(
+                "Bad packet. Datagram data length is too short.");
@@ -93 +128,2 @@ public abstract class TFTPPacket {
-        switch (data[1]) {
+        switch (data[1])
+        {
@@ -110 +146,2 @@ public abstract class TFTPPacket {
-            throw new TFTPPacketException("Bad packet.  Invalid TFTP operator code.");
+            throw new TFTPPacketException(
+                "Bad packet.  Invalid TFTP operator code.");
@@ -126 +163,2 @@ public abstract class TFTPPacket {
-     * This constructor is not visible outside of the package. It is used by subclasses within the package to initialize base data.
+     * This constructor is not visible outside of the package.  It is used
+     * by subclasses within the package to initialize base data.
@@ -128 +166 @@ public abstract class TFTPPacket {
-     * @param type    The type of the packet.
+     * @param type The type of the packet.
@@ -130 +168 @@ public abstract class TFTPPacket {
-     * @param port    The port the packet came from or is going to be sent.
+     * @param port The port the packet came from or is going to be sent.
@@ -132 +170,2 @@ public abstract class TFTPPacket {
-    TFTPPacket(final int type, final InetAddress address, final int port) {
+    TFTPPacket(final int type, final InetAddress address, final int port)
+    {
@@ -139 +178,2 @@ public abstract class TFTPPacket {
-     * Returns the address of the host where the packet is going to be sent or where it came from.
+     * Returns the address of the host where the packet is going to be sent
+     * or where it came from.
@@ -143 +183,2 @@ public abstract class TFTPPacket {
-    public final InetAddress getAddress() {
+    public final InetAddress getAddress()
+    {
@@ -148 +189,2 @@ public abstract class TFTPPacket {
-     * Returns the port where the packet is going to be sent or where it came from.
+     * Returns the port where the packet is going to be sent
+     * or where it came from.
@@ -152 +194,2 @@ public abstract class TFTPPacket {
-    public final int getPort() {
+    public final int getPort()
+    {
@@ -161 +204,2 @@ public abstract class TFTPPacket {
-    public final int getType() {
+    public final int getType()
+    {
@@ -166,3 +210,8 @@ public abstract class TFTPPacket {
-     * Creates a UDP datagram containing all the TFTP packet data in the proper format. This is an abstract method, exposed to the programmer in case he wants
-     * to implement his own TFTP client instead of using the {@link org.apache.commons.net.tftp.TFTPClient} class. Under normal circumstances, you should not
-     * have a need to call this method.
+     * Creates a UDP datagram containing all the TFTP packet
+     * data in the proper format.
+     * This is an abstract method, exposed to the programmer in case he
+     * wants to implement his own TFTP client instead of using
+     * the {@link org.apache.commons.net.tftp.TFTPClient}
+     * class.
+     * Under normal circumstances, you should not have a need to call this
+     * method.
@@ -175,3 +224,5 @@ public abstract class TFTPPacket {
-     * This is an abstract method only available within the package for implementing efficient datagram transport by elminating buffering. It takes a datagram
-     * as an argument, and a byte buffer in which to store the raw datagram data. Inside the method, the data should be set as the datagram's data and the
-     * datagram returned.
+     * This is an abstract method only available within the package for
+     * implementing efficient datagram transport by elminating buffering.
+     * It takes a datagram as an argument, and a byte buffer in which
+     * to store the raw datagram data.  Inside the method, the data
+     * should be set as the datagram's data and the datagram returned.
@@ -179,2 +230,2 @@ public abstract class TFTPPacket {
-     * @param datagram The datagram to create.
-     * @param data     The buffer to store the packet and to use in the datagram.
+     * @param datagram  The datagram to create.
+     * @param data The buffer to store the packet and to use in the datagram.
@@ -185,3 +236 @@ public abstract class TFTPPacket {
-    /**
-     * Sets the host address where the packet is going to be sent.
-     *
+    /** Sets the host address where the packet is going to be sent.
@@ -190 +239,2 @@ public abstract class TFTPPacket {
-    public final void setAddress(final InetAddress address) {
+    public final void setAddress(final InetAddress address)
+    {
@@ -196 +245,0 @@ public abstract class TFTPPacket {
-     *
@@ -199 +248,2 @@ public abstract class TFTPPacket {
-    public final void setPort(final int port) {
+    public final void setPort(final int port)
+    {
@@ -205 +254,0 @@ public abstract class TFTPPacket {
-     *
diff --git a/src/main/java/org/apache/commons/net/tftp/TFTPPacketException.java b/src/main/java/org/apache/commons/net/tftp/TFTPPacketException.java
index 16f60c16b..d5cde5f01 100644
--- a/src/main/java/org/apache/commons/net/tftp/TFTPPacketException.java
+++ b/src/main/java/org/apache/commons/net/tftp/TFTPPacketException.java
@@ -21,4 +21,11 @@ package org.apache.commons.net.tftp;
- * A class used to signify the occurrence of an error in the creation of a TFTP packet. It is not declared final so that it may be subclassed to identify more
- * specific errors. You would only want to do this if you were building your own TFTP client or server on top of the {@link org.apache.commons.net.tftp.TFTP}
- * class if you wanted more functionality than the {@link org.apache.commons.net.tftp.TFTPClient#receiveFile receiveFile()} and
- * {@link org.apache.commons.net.tftp.TFTPClient#sendFile sendFile()} methods provide.
+ * A class used to signify the occurrence of an error in the creation of
+ * a TFTP packet.  It is not declared final so that it may be subclassed
+ * to identify more specific errors.  You would only want to do this if
+ * you were building your own TFTP client or server on top of the
+ * {@link org.apache.commons.net.tftp.TFTP}
+ * class if you
+ * wanted more functionality than the
+ * {@link org.apache.commons.net.tftp.TFTPClient#receiveFile receiveFile()}
+ * and
+ * {@link org.apache.commons.net.tftp.TFTPClient#sendFile sendFile()}
+ * methods provide.
@@ -31 +38,2 @@ package org.apache.commons.net.tftp;
-public class TFTPPacketException extends Exception {
+public class TFTPPacketException extends Exception
+{
@@ -38 +46,2 @@ public class TFTPPacketException extends Exception {
-    public TFTPPacketException() {
+    public TFTPPacketException()
+    {
@@ -43 +51,0 @@ public class TFTPPacketException extends Exception {
-     *
@@ -46 +54,2 @@ public class TFTPPacketException extends Exception {
-    public TFTPPacketException(final String message) {
+    public TFTPPacketException(final String message)
+    {
diff --git a/src/main/java/org/apache/commons/net/tftp/TFTPReadRequestPacket.java b/src/main/java/org/apache/commons/net/tftp/TFTPReadRequestPacket.java
index c26ca1006..f5ecf01cb 100644
--- a/src/main/java/org/apache/commons/net/tftp/TFTPReadRequestPacket.java
+++ b/src/main/java/org/apache/commons/net/tftp/TFTPReadRequestPacket.java
@@ -24 +24,2 @@ import java.net.InetAddress;
- * A class derived from TFTPRequestPacket definiing a TFTP read request packet type.
+ * A class derived from TFTPRequestPacket definiing a TFTP read request
+ * packet type.
@@ -26,4 +27,10 @@ import java.net.InetAddress;
- * Details regarding the TFTP protocol and the format of TFTP packets can be found in RFC 783. But the point of these classes is to keep you from having to
- * worry about the internals. Additionally, only very few people should have to care about any of the TFTPPacket classes or derived classes. Almost all users
- * should only be concerned with the {@link org.apache.commons.net.tftp.TFTPClient} class {@link org.apache.commons.net.tftp.TFTPClient#receiveFile
- * receiveFile()} and {@link org.apache.commons.net.tftp.TFTPClient#sendFile sendFile()} methods.
+ * Details regarding the TFTP protocol and the format of TFTP packets can
+ * be found in RFC 783.  But the point of these classes is to keep you
+ * from having to worry about the internals.  Additionally, only very
+ * few people should have to care about any of the TFTPPacket classes
+ * or derived classes.  Almost all users should only be concerned with the
+ * {@link org.apache.commons.net.tftp.TFTPClient} class
+ * {@link org.apache.commons.net.tftp.TFTPClient#receiveFile receiveFile()}
+ * and
+ * {@link org.apache.commons.net.tftp.TFTPClient#sendFile sendFile()}
+ * methods.
@@ -38 +45,2 @@ import java.net.InetAddress;
-public final class TFTPReadRequestPacket extends TFTPRequestPacket {
+public final class TFTPReadRequestPacket extends TFTPRequestPacket
+{
@@ -41,2 +49,4 @@ public final class TFTPReadRequestPacket extends TFTPRequestPacket {
-     * Creates a read request packet of based on a received datagram and assumes the datagram has already been identified as a read request. Assumes the
-     * datagram is at least length 4, else an ArrayIndexOutOfBoundsException may be thrown.
+     * Creates a read request packet of based on a received
+     * datagram and assumes the datagram has already been identified as a
+     * read request.  Assumes the datagram is at least length 4, else an
+     * ArrayIndexOutOfBoundsException may be thrown.
@@ -44,2 +54,3 @@ public final class TFTPReadRequestPacket extends TFTPRequestPacket {
-     * @param datagram The datagram containing the received request.
-     * @throws TFTPPacketException If the datagram isn't a valid TFTP request packet.
+     * @param datagram  The datagram containing the received request.
+     * @throws TFTPPacketException  If the datagram isn't a valid TFTP
+     *         request packet.
@@ -47 +58,2 @@ public final class TFTPReadRequestPacket extends TFTPRequestPacket {
-    TFTPReadRequestPacket(final DatagramPacket datagram) throws TFTPPacketException {
+    TFTPReadRequestPacket(final DatagramPacket datagram) throws TFTPPacketException
+    {
@@ -52 +64,2 @@ public final class TFTPReadRequestPacket extends TFTPRequestPacket {
-     * Creates a read request packet to be sent to a host at a given port with a file name and transfer mode request.
+     * Creates a read request packet to be sent to a host at a
+     * given port with a file name and transfer mode request.
@@ -54,4 +67,5 @@ public final class TFTPReadRequestPacket extends TFTPRequestPacket {
-     * @param destination The host to which the packet is going to be sent.
-     * @param port        The port to which the packet is going to be sent.
-     * @param fileName    The requested file name.
-     * @param mode        The requested transfer mode. This should be on of the TFTP class MODE constants (e.g., TFTP.NETASCII_MODE).
+     * @param destination  The host to which the packet is going to be sent.
+     * @param port  The port to which the packet is going to be sent.
+     * @param fileName The requested file name.
+     * @param mode The requested transfer mode.  This should be on of the TFTP
+     *        class MODE constants (e.g., TFTP.NETASCII_MODE).
@@ -59 +73,3 @@ public final class TFTPReadRequestPacket extends TFTPRequestPacket {
-    public TFTPReadRequestPacket(final InetAddress destination, final int port, final String fileName, final int mode) {
+    public TFTPReadRequestPacket(final InetAddress destination, final int port,
+                                 final String fileName, final int mode)
+    {
@@ -65 +80,0 @@ public final class TFTPReadRequestPacket extends TFTPRequestPacket {
-     *
diff --git a/src/main/java/org/apache/commons/net/tftp/TFTPRequestPacket.java b/src/main/java/org/apache/commons/net/tftp/TFTPRequestPacket.java
index fc97c31ee..3669ec23a 100644
--- a/src/main/java/org/apache/commons/net/tftp/TFTPRequestPacket.java
+++ b/src/main/java/org/apache/commons/net/tftp/TFTPRequestPacket.java
@@ -24,2 +24,6 @@ import java.net.InetAddress;
- * An abstract class derived from TFTPPacket definiing a TFTP Request packet type. It is subclassed by the
- * {@link org.apache.commons.net.tftp.TFTPReadRequestPacket} and {@link org.apache.commons.net.tftp.TFTPWriteRequestPacket} classes.
+ * An abstract class derived from TFTPPacket definiing a TFTP Request
+ * packet type.  It is subclassed by the
+ * {@link org.apache.commons.net.tftp.TFTPReadRequestPacket}
+ *   and
+ * {@link org.apache.commons.net.tftp.TFTPWriteRequestPacket}
+ *  classes.
@@ -27,4 +31,10 @@ import java.net.InetAddress;
- * Details regarding the TFTP protocol and the format of TFTP packets can be found in RFC 783. But the point of these classes is to keep you from having to
- * worry about the internals. Additionally, only very few people should have to care about any of the TFTPPacket classes or derived classes. Almost all users
- * should only be concerned with the {@link org.apache.commons.net.tftp.TFTPClient} class {@link org.apache.commons.net.tftp.TFTPClient#receiveFile
- * receiveFile()} and {@link org.apache.commons.net.tftp.TFTPClient#sendFile sendFile()} methods.
+ * Details regarding the TFTP protocol and the format of TFTP packets can
+ * be found in RFC 783.  But the point of these classes is to keep you
+ * from having to worry about the internals.  Additionally, only very
+ * few people should have to care about any of the TFTPPacket classes
+ * or derived classes.  Almost all users should only be concerned with the
+ * {@link org.apache.commons.net.tftp.TFTPClient} class
+ * {@link org.apache.commons.net.tftp.TFTPClient#receiveFile receiveFile()}
+ * and
+ * {@link org.apache.commons.net.tftp.TFTPClient#sendFile sendFile()}
+ * methods.
@@ -40 +50,2 @@ import java.net.InetAddress;
-public abstract class TFTPRequestPacket extends TFTPPacket {
+public abstract class TFTPRequestPacket extends TFTPPacket
+{
@@ -42 +53,2 @@ public abstract class TFTPRequestPacket extends TFTPPacket {
-     * An array containing the string names of the transfer modes and indexed by the transfer mode constants.
+     * An array containing the string names of the transfer modes and indexed
+     * by the transfer mode constants.
@@ -47 +59,3 @@ public abstract class TFTPRequestPacket extends TFTPPacket {
-     * A null terminated byte array representation of the ascii names of the transfer mode constants. This is convenient for creating the TFTP request packets.
+     * A null terminated byte array representation of the ascii names of the
+     * transfer mode constants.  This is convenient for creating the TFTP
+     * request packets.
@@ -49,2 +63,5 @@ public abstract class TFTPRequestPacket extends TFTPPacket {
-    private static final byte[] modeBytes[] = { { (byte) 'n', (byte) 'e', (byte) 't', (byte) 'a', (byte) 's', (byte) 'c', (byte) 'i', (byte) 'i', 0 },
-            { (byte) 'o', (byte) 'c', (byte) 't', (byte) 'e', (byte) 't', 0 } };
+    private static final byte[] modeBytes[] = {
+                                           { (byte)'n', (byte)'e', (byte)'t', (byte)'a', (byte)'s', (byte)'c',
+                                             (byte)'i', (byte)'i', 0 },
+                                           { (byte)'o', (byte)'c', (byte)'t', (byte)'e', (byte)'t', 0 }
+                                       };
@@ -59 +76,2 @@ public abstract class TFTPRequestPacket extends TFTPPacket {
-     * Creates a request packet of a given type to be sent to a host at a given port with a file name and transfer mode request.
+     * Creates a request packet of a given type to be sent to a host at a
+     * given port with a file name and transfer mode request.
@@ -61,5 +79,7 @@ public abstract class TFTPRequestPacket extends TFTPPacket {
-     * @param destination The host to which the packet is going to be sent.
-     * @param port        The port to which the packet is going to be sent.
-     * @param type        The type of the request (either TFTPPacket.READ_REQUEST or TFTPPacket.WRITE_REQUEST).
-     * @param fileName    The requested file name.
-     * @param mode        The requested transfer mode. This should be on of the TFTP class MODE constants (e.g., TFTP.NETASCII_MODE).
+     * @param destination  The host to which the packet is going to be sent.
+     * @param port  The port to which the packet is going to be sent.
+     * @param type The type of the request (either TFTPPacket.READ_REQUEST or
+     *             TFTPPacket.WRITE_REQUEST).
+     * @param fileName The requested file name.
+     * @param mode The requested transfer mode.  This should be on of the TFTP
+     *        class MODE constants (e.g., TFTP.NETASCII_MODE).
@@ -67 +87,3 @@ public abstract class TFTPRequestPacket extends TFTPPacket {
-    TFTPRequestPacket(final InetAddress destination, final int port, final int type, final String fileName, final int mode) {
+    TFTPRequestPacket(final InetAddress destination, final int port,
+                      final int type, final String fileName, final int mode)
+    {
@@ -75,2 +97,3 @@ public abstract class TFTPRequestPacket extends TFTPPacket {
-     * Creates a request packet of a given type based on a received datagram. Assumes the datagram is at least length 4, else an ArrayIndexOutOfBoundsException
-     * may be thrown.
+     * Creates a request packet of a given type based on a received
+     * datagram.  Assumes the datagram is at least length 4, else an
+     * ArrayIndexOutOfBoundsException may be thrown.
@@ -78,3 +101,5 @@ public abstract class TFTPRequestPacket extends TFTPPacket {
-     * @param type     The type of the request (either TFTPPacket.READ_REQUEST or TFTPPacket.WRITE_REQUEST).
-     * @param datagram The datagram containing the received request.
-     * @throws TFTPPacketException If the datagram isn't a valid TFTP request packet of the appropriate type.
+     * @param type The type of the request (either TFTPPacket.READ_REQUEST or
+     *             TFTPPacket.WRITE_REQUEST).
+     * @param datagram  The datagram containing the received request.
+     * @throws TFTPPacketException  If the datagram isn't a valid TFTP
+     *         request packet of the appropriate type.
@@ -82 +107,3 @@ public abstract class TFTPRequestPacket extends TFTPPacket {
-    TFTPRequestPacket(final int type, final DatagramPacket datagram) throws TFTPPacketException {
+    TFTPRequestPacket(final int type, final DatagramPacket datagram)
+    throws TFTPPacketException
+    {
@@ -96,2 +123,3 @@ public abstract class TFTPRequestPacket extends TFTPPacket {
-        while (index < length && data[index] != 0) {
-            buffer.append((char) data[index]);
+        while (index < length && data[index] != 0)
+        {
+            buffer.append((char)data[index]);
@@ -109,2 +137,3 @@ public abstract class TFTPRequestPacket extends TFTPPacket {
-        while (index < length && data[index] != 0) {
-            buffer.append((char) data[index]);
+        while (index < length && data[index] != 0)
+        {
+            buffer.append((char)data[index]);
@@ -118,2 +147,4 @@ public abstract class TFTPRequestPacket extends TFTPPacket {
-        for (index = 0; index < length; index++) {
-            if (modeString.equals(modeStrings[index])) {
+        for (index = 0; index < length; index++)
+        {
+            if (modeString.equals(modeStrings[index]))
+            {
@@ -127 +158,2 @@ public abstract class TFTPRequestPacket extends TFTPPacket {
-        if (index >= length) {
+        if (index >= length)
+        {
@@ -131 +163 @@ public abstract class TFTPRequestPacket extends TFTPPacket {
-            // _mode = TFTP.OCTET_MODE;
+            //_mode = TFTP.OCTET_MODE;
@@ -134,0 +167 @@ public abstract class TFTPRequestPacket extends TFTPPacket {
+
@@ -140 +173,2 @@ public abstract class TFTPRequestPacket extends TFTPPacket {
-    public final String getFilename() {
+    public final String getFilename()
+    {
@@ -149 +183,2 @@ public abstract class TFTPRequestPacket extends TFTPPacket {
-    public final int getMode() {
+    public final int getMode()
+    {
@@ -154,3 +189,7 @@ public abstract class TFTPRequestPacket extends TFTPPacket {
-     * Creates a UDP datagram containing all the TFTP request packet data in the proper format. This is a method exposed to the programmer in case he wants to
-     * implement his own TFTP client instead of using the {@link org.apache.commons.net.tftp.TFTPClient} class. Under normal circumstances, you should not have
-     * a need to call this method.
+     * Creates a UDP datagram containing all the TFTP
+     * request packet data in the proper format.
+     * This is a method exposed to the programmer in case he
+     * wants to implement his own TFTP client instead of using
+     * the {@link org.apache.commons.net.tftp.TFTPClient}
+     * class.  Under normal circumstances, you should not have a need to call
+     * this method.
@@ -161 +200,2 @@ public abstract class TFTPRequestPacket extends TFTPPacket {
-    public final DatagramPacket newDatagram() {
+    public final DatagramPacket newDatagram()
+    {
@@ -171 +211 @@ public abstract class TFTPRequestPacket extends TFTPPacket {
-        data[1] = (byte) type;
+        data[1] = (byte)type;
@@ -174 +214,2 @@ public abstract class TFTPRequestPacket extends TFTPPacket {
-        System.arraycopy(modeBytes[mode], 0, data, fileLength + 3, modeLength);
+        System.arraycopy(modeBytes[mode], 0, data, fileLength + 3,
+                         modeLength);
@@ -180,2 +221,5 @@ public abstract class TFTPRequestPacket extends TFTPPacket {
-     * This is a method only available within the package for implementing efficient datagram transport by elminating buffering. It takes a datagram as an
-     * argument, and a byte buffer in which to store the raw datagram data. Inside the method, the data is set as the datagram's data and the datagram returned.
+     * This is a method only available within the package for
+     * implementing efficient datagram transport by elminating buffering.
+     * It takes a datagram as an argument, and a byte buffer in which
+     * to store the raw datagram data.  Inside the method, the data
+     * is set as the datagram's data and the datagram returned.
@@ -183,2 +227,2 @@ public abstract class TFTPRequestPacket extends TFTPPacket {
-     * @param datagram The datagram to create.
-     * @param data     The buffer to store the packet and to use in the datagram.
+     * @param datagram  The datagram to create.
+     * @param data The buffer to store the packet and to use in the datagram.
@@ -188 +232,2 @@ public abstract class TFTPRequestPacket extends TFTPPacket {
-    final DatagramPacket newDatagram(final DatagramPacket datagram, final byte[] data) {
+    final DatagramPacket newDatagram(final DatagramPacket datagram, final byte[] data)
+    {
@@ -196 +241 @@ public abstract class TFTPRequestPacket extends TFTPPacket {
-        data[1] = (byte) type;
+        data[1] = (byte)type;
@@ -199 +244,2 @@ public abstract class TFTPRequestPacket extends TFTPPacket {
-        System.arraycopy(modeBytes[mode], 0, data, fileLength + 3, modeLength);
+        System.arraycopy(modeBytes[mode], 0, data, fileLength + 3,
+                         modeLength);
diff --git a/src/main/java/org/apache/commons/net/tftp/TFTPWriteRequestPacket.java b/src/main/java/org/apache/commons/net/tftp/TFTPWriteRequestPacket.java
index a9e2fa117..8955f8b45 100644
--- a/src/main/java/org/apache/commons/net/tftp/TFTPWriteRequestPacket.java
+++ b/src/main/java/org/apache/commons/net/tftp/TFTPWriteRequestPacket.java
@@ -24 +24,2 @@ import java.net.InetAddress;
- * A class derived from TFTPRequestPacket definiing a TFTP write request packet type.
+ * A class derived from TFTPRequestPacket definiing a TFTP write request
+ * packet type.
@@ -26,4 +27,10 @@ import java.net.InetAddress;
- * Details regarding the TFTP protocol and the format of TFTP packets can be found in RFC 783. But the point of these classes is to keep you from having to
- * worry about the internals. Additionally, only very few people should have to care about any of the TFTPPacket classes or derived classes. Almost all users
- * should only be concerned with the {@link org.apache.commons.net.tftp.TFTPClient} class {@link org.apache.commons.net.tftp.TFTPClient#receiveFile
- * receiveFile()} and {@link org.apache.commons.net.tftp.TFTPClient#sendFile sendFile()} methods.
+ * Details regarding the TFTP protocol and the format of TFTP packets can
+ * be found in RFC 783.  But the point of these classes is to keep you
+ * from having to worry about the internals.  Additionally, only very
+ * few people should have to care about any of the TFTPPacket classes
+ * or derived classes.  Almost all users should only be concerned with the
+ * {@link org.apache.commons.net.tftp.TFTPClient} class
+ * {@link org.apache.commons.net.tftp.TFTPClient#receiveFile receiveFile()}
+ * and
+ * {@link org.apache.commons.net.tftp.TFTPClient#sendFile sendFile()}
+ * methods.
@@ -38 +45,2 @@ import java.net.InetAddress;
-public final class TFTPWriteRequestPacket extends TFTPRequestPacket {
+public final class TFTPWriteRequestPacket extends TFTPRequestPacket
+{
@@ -41,2 +49,4 @@ public final class TFTPWriteRequestPacket extends TFTPRequestPacket {
-     * Creates a write request packet of based on a received datagram and assumes the datagram has already been identified as a write request. Assumes the
-     * datagram is at least length 4, else an ArrayIndexOutOfBoundsException may be thrown.
+     * Creates a write request packet of based on a received
+     * datagram and assumes the datagram has already been identified as a
+     * write request.  Assumes the datagram is at least length 4, else an
+     * ArrayIndexOutOfBoundsException may be thrown.
@@ -44,2 +54,3 @@ public final class TFTPWriteRequestPacket extends TFTPRequestPacket {
-     * @param datagram The datagram containing the received request.
-     * @throws TFTPPacketException If the datagram isn't a valid TFTP request packet.
+     * @param datagram  The datagram containing the received request.
+     * @throws TFTPPacketException  If the datagram isn't a valid TFTP
+     *         request packet.
@@ -47 +58,2 @@ public final class TFTPWriteRequestPacket extends TFTPRequestPacket {
-    TFTPWriteRequestPacket(final DatagramPacket datagram) throws TFTPPacketException {
+    TFTPWriteRequestPacket(final DatagramPacket datagram) throws TFTPPacketException
+    {
@@ -52 +64,2 @@ public final class TFTPWriteRequestPacket extends TFTPRequestPacket {
-     * Creates a write request packet to be sent to a host at a given port with a file name and transfer mode request.
+     * Creates a write request packet to be sent to a host at a
+     * given port with a file name and transfer mode request.
@@ -54,4 +67,5 @@ public final class TFTPWriteRequestPacket extends TFTPRequestPacket {
-     * @param destination The host to which the packet is going to be sent.
-     * @param port        The port to which the packet is going to be sent.
-     * @param fileName    The requested file name.
-     * @param mode        The requested transfer mode. This should be on of the TFTP class MODE constants (e.g., TFTP.NETASCII_MODE).
+     * @param destination  The host to which the packet is going to be sent.
+     * @param port  The port to which the packet is going to be sent.
+     * @param fileName The requested file name.
+     * @param mode The requested transfer mode.  This should be on of the TFTP
+     *        class MODE constants (e.g., TFTP.NETASCII_MODE).
@@ -59 +73,3 @@ public final class TFTPWriteRequestPacket extends TFTPRequestPacket {
-    public TFTPWriteRequestPacket(final InetAddress destination, final int port, final String fileName, final int mode) {
+    public TFTPWriteRequestPacket(final InetAddress destination, final int port,
+                                  final String fileName, final int mode)
+    {
@@ -65 +80,0 @@ public final class TFTPWriteRequestPacket extends TFTPRequestPacket {
-     *
diff --git a/src/main/java/org/apache/commons/net/time/TimeTCPClient.java b/src/main/java/org/apache/commons/net/time/TimeTCPClient.java
index 250e52724..a16d0087b 100644
--- a/src/main/java/org/apache/commons/net/time/TimeTCPClient.java
+++ b/src/main/java/org/apache/commons/net/time/TimeTCPClient.java
@@ -27,3 +27,8 @@ import org.apache.commons.net.SocketClient;
- * The TimeTCPClient class is a TCP implementation of a client for the Time protocol described in RFC 868. To use the class, merely establish a connection with
- * {@link org.apache.commons.net.SocketClient#connect connect } and call either {@link #getTime getTime() } or {@link #getDate getDate() } to retrieve the time,
- * then call {@link org.apache.commons.net.SocketClient#disconnect disconnect } to close the connection properly.
+ * The TimeTCPClient class is a TCP implementation of a client for the
+ * Time protocol described in RFC 868.  To use the class, merely
+ * establish a connection with
+ * {@link org.apache.commons.net.SocketClient#connect  connect }
+ * and call either {@link #getTime  getTime() } or
+ * {@link #getDate  getDate() } to retrieve the time, then
+ * call {@link org.apache.commons.net.SocketClient#disconnect  disconnect }
+ * to close the connection properly.
@@ -35,2 +40,3 @@ import org.apache.commons.net.SocketClient;
-public final class TimeTCPClient extends SocketClient {
-    /** The default time port. It is set to 37 according to RFC 868. */
+public final class TimeTCPClient extends SocketClient
+{
+    /** The default time port.  It is set to 37 according to RFC 868. */
@@ -40 +46,3 @@ public final class TimeTCPClient extends SocketClient {
-     * The number of seconds between 00:00 1 January 1900 and 00:00 1 January 1970. This value can be useful for converting time values to other formats.
+     * The number of seconds between 00:00 1 January 1900 and
+     * 00:00 1 January 1970.  This value can be useful for converting
+     * time values to other formats.
@@ -45 +53,2 @@ public final class TimeTCPClient extends SocketClient {
-     * The default TimeTCPClient constructor. It merely sets the default port to <code> DEFAULT_PORT </code>.
+     * The default TimeTCPClient constructor.  It merely sets the default
+     * port to <code> DEFAULT_PORT </code>.
@@ -47 +56,2 @@ public final class TimeTCPClient extends SocketClient {
-    public TimeTCPClient() {
+    public TimeTCPClient ()
+    {
@@ -52 +62,2 @@ public final class TimeTCPClient extends SocketClient {
-     * Retrieves the time from the server and returns a Java Date containing the time converted to the local time zone.
+     * Retrieves the time from the server and returns a Java Date
+     * containing the time converted to the local time zone.
@@ -54,2 +65,6 @@ public final class TimeTCPClient extends SocketClient {
-     * The server will have closed the connection at this point, so you should call {@link org.apache.commons.net.SocketClient#disconnect disconnect } after
-     * calling this method. To retrieve another time, you must initiate another connection with {@link org.apache.commons.net.SocketClient#connect connect }
+     * The server will have closed the connection at this point, so you should
+     * call
+     * {@link org.apache.commons.net.SocketClient#disconnect  disconnect }
+     * after calling this method.  To retrieve another time, you must
+     * initiate another connection with
+     * {@link org.apache.commons.net.SocketClient#connect  connect }
@@ -58,2 +73,3 @@ public final class TimeTCPClient extends SocketClient {
-     * @return A Date value containing the time retrieved from the server converted to the local time zone.
-     * @throws IOException If an error occurs while fetching the time.
+     * @return A Date value containing the time retrieved from the server
+     *     converted to the local time zone.
+     * @throws IOException  If an error occurs while fetching the time.
@@ -61,2 +77,3 @@ public final class TimeTCPClient extends SocketClient {
-    public Date getDate() throws IOException {
-        return new Date((getTime() - SECONDS_1900_TO_1970) * 1000L);
+    public Date getDate() throws IOException
+    {
+        return new Date((getTime() - SECONDS_1900_TO_1970)*1000L);
@@ -66,2 +83,5 @@ public final class TimeTCPClient extends SocketClient {
-     * Retrieves the time from the server and returns it. The time is the number of seconds since 00:00 (midnight) 1 January 1900 GMT, as specified by RFC 868.
-     * This method reads the raw 32-bit big-endian unsigned integer from the server, converts it to a Java long, and returns the value.
+     * Retrieves the time from the server and returns it.  The time
+     * is the number of seconds since 00:00 (midnight) 1 January 1900 GMT,
+     * as specified by RFC 868.  This method reads the raw 32-bit big-endian
+     * unsigned integer from the server, converts it to a Java long, and
+     * returns the value.
@@ -69,2 +89,6 @@ public final class TimeTCPClient extends SocketClient {
-     * The server will have closed the connection at this point, so you should call {@link org.apache.commons.net.SocketClient#disconnect disconnect } after
-     * calling this method. To retrieve another time, you must initiate another connection with {@link org.apache.commons.net.SocketClient#connect connect }
+     * The server will have closed the connection at this point, so you should
+     * call
+     * {@link org.apache.commons.net.SocketClient#disconnect  disconnect }
+     * after calling this method.  To retrieve another time, you must
+     * initiate another connection with
+     * {@link org.apache.commons.net.SocketClient#connect  connect }
@@ -74 +98 @@ public final class TimeTCPClient extends SocketClient {
-     * @throws IOException If an error occurs while fetching the time.
+     * @throws IOException  If an error occurs while fetching the time.
@@ -76 +100,2 @@ public final class TimeTCPClient extends SocketClient {
-    public long getTime() throws IOException {
+    public long getTime() throws IOException
+    {
@@ -82,0 +108 @@ public final class TimeTCPClient extends SocketClient {
+
diff --git a/src/main/java/org/apache/commons/net/time/TimeUDPClient.java b/src/main/java/org/apache/commons/net/time/TimeUDPClient.java
index fd1b416e8..34020aa82 100644
--- a/src/main/java/org/apache/commons/net/time/TimeUDPClient.java
+++ b/src/main/java/org/apache/commons/net/time/TimeUDPClient.java
@@ -28,5 +28,13 @@ import org.apache.commons.net.DatagramSocketClient;
- * The TimeUDPClient class is a UDP implementation of a client for the Time protocol described in RFC 868. To use the class, merely open a local datagram socket
- * with {@link org.apache.commons.net.DatagramSocketClient#open open } and call {@link #getTime getTime } or {@link #getTime getDate } to retrieve the time.
- * Then call {@link org.apache.commons.net.DatagramSocketClient#close close } to close the connection properly. Unlike
- * {@link org.apache.commons.net.time.TimeTCPClient}, successive calls to {@link #getTime getTime } or {@link #getDate getDate } are permitted without
- * re-establishing a connection. That is because UDP is a connectionless protocol and the Time protocol is stateless.
+ * The TimeUDPClient class is a UDP implementation of a client for the
+ * Time protocol described in RFC 868.  To use the class, merely
+ * open a local datagram socket with
+ * {@link org.apache.commons.net.DatagramSocketClient#open  open }
+ * and call {@link #getTime  getTime } or
+ * {@link #getTime  getDate } to retrieve the time. Then call
+ * {@link org.apache.commons.net.DatagramSocketClient#close  close }
+ * to close the connection properly.  Unlike
+ * {@link org.apache.commons.net.time.TimeTCPClient},
+ * successive calls to {@link #getTime  getTime } or
+ * {@link #getDate  getDate } are permitted
+ * without re-establishing a connection.  That is because UDP is a
+ * connectionless protocol and the Time protocol is stateless.
@@ -38,2 +46,3 @@ import org.apache.commons.net.DatagramSocketClient;
-public final class TimeUDPClient extends DatagramSocketClient {
-    /** The default time port. It is set to 37 according to RFC 868. */
+public final class TimeUDPClient extends DatagramSocketClient
+{
+    /** The default time port.  It is set to 37 according to RFC 868. */
@@ -43 +52,3 @@ public final class TimeUDPClient extends DatagramSocketClient {
-     * The number of seconds between 00:00 1 January 1900 and 00:00 1 January 1970. This value can be useful for converting time values to other formats.
+     * The number of seconds between 00:00 1 January 1900 and
+     * 00:00 1 January 1970.  This value can be useful for converting
+     * time values to other formats.
@@ -50,3 +61 @@ public final class TimeUDPClient extends DatagramSocketClient {
-    /**
-     * Same as <code> getTime(host, DEFAULT_PORT); </code>
-     *
+    /** Same as <code> getTime(host, DEFAULT_PORT); </code>
@@ -57 +66,2 @@ public final class TimeUDPClient extends DatagramSocketClient {
-    public Date getDate(final InetAddress host) throws IOException {
+    public Date getDate(final InetAddress host) throws IOException
+    {
@@ -62 +72,2 @@ public final class TimeUDPClient extends DatagramSocketClient {
-     * Retrieves the time from the server and returns a Java Date containing the time converted to the local time zone.
+     * Retrieves the time from the server and returns a Java Date
+     * containing the time converted to the local time zone.
@@ -66,2 +77,3 @@ public final class TimeUDPClient extends DatagramSocketClient {
-     * @return A Date value containing the time retrieved from the server converted to the local time zone.
-     * @throws IOException If an error occurs while fetching the time.
+     * @return A Date value containing the time retrieved from the server
+     *     converted to the local time zone.
+     * @throws IOException  If an error occurs while fetching the time.
@@ -69 +81,2 @@ public final class TimeUDPClient extends DatagramSocketClient {
-    public Date getDate(final InetAddress host, final int port) throws IOException {
+    public Date getDate(final InetAddress host, final int port) throws IOException
+    {
@@ -73,3 +86,2 @@ public final class TimeUDPClient extends DatagramSocketClient {
-    /**
-     * Same as <code> getTime(host, DEFAULT_PORT); </code>
-     *
+
+    /** Same as <code> getTime(host, DEFAULT_PORT); </code>
@@ -80 +92,2 @@ public final class TimeUDPClient extends DatagramSocketClient {
-    public long getTime(final InetAddress host) throws IOException {
+    public long getTime(final InetAddress host) throws IOException
+    {
@@ -83,0 +97 @@ public final class TimeUDPClient extends DatagramSocketClient {
+
@@ -85,2 +99,6 @@ public final class TimeUDPClient extends DatagramSocketClient {
-     * Retrieves the time from the specified server and port and returns it. The time is the number of seconds since 00:00 (midnight) 1 January 1900 GMT, as
-     * specified by RFC 868. This method reads the raw 32-bit big-endian unsigned integer from the server, converts it to a Java long, and returns the value.
+     * Retrieves the time from the specified server and port and
+     * returns it. The time is the number of seconds since
+     * 00:00 (midnight) 1 January 1900 GMT, as specified by RFC 868.
+     * This method reads the raw 32-bit big-endian
+     * unsigned integer from the server, converts it to a Java long, and
+     * returns the value.
@@ -93 +111,2 @@ public final class TimeUDPClient extends DatagramSocketClient {
-    public long getTime(final InetAddress host, final int port) throws IOException {
+    public long getTime(final InetAddress host, final int port) throws IOException
+    {
@@ -113,0 +133 @@ public final class TimeUDPClient extends DatagramSocketClient {
+
diff --git a/src/main/java/org/apache/commons/net/util/Base64.java b/src/main/java/org/apache/commons/net/util/Base64.java
index b866720be..a80f8d8e3 100644
--- a/src/main/java/org/apache/commons/net/util/Base64.java
+++ b/src/main/java/org/apache/commons/net/util/Base64.java
@@ -23,0 +24 @@ import java.util.Objects;
+
@@ -28,2 +29,2 @@ import java.util.Objects;
- * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose Internet Mail Extensions (MIME) Part One:
- * Format of Internet Message Bodies</cite> by Freed and Borenstein.
+ * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose
+ * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.
@@ -35 +36,2 @@ import java.util.Objects;
- * <li>Line length: Default 76. Line length that aren't multiples of 4 will still essentially end up being multiples of 4 in the encoded data.
+ * <li>Line length: Default 76. Line length that aren't multiples of 4 will still essentially end up being multiples of
+ * 4 in the encoded data.
@@ -39,2 +41,2 @@ import java.util.Objects;
- * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode character encodings which are
- * compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).
+ * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode
+ * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).
@@ -55 +57,2 @@ public class Base64 {
-     * The {@value} character limit does not count the trailing CRLF, but counts all other characters, including any equal signs.
+     * The {@value} character limit does not count the trailing CRLF, but counts all other characters, including any
+     * equal signs.
@@ -67 +70 @@ public class Base64 {
-    private static final byte[] CHUNK_SEPARATOR = { '\r', '\n' };
+    private static final byte[] CHUNK_SEPARATOR = {'\r', '\n'};
@@ -70,2 +73,2 @@ public class Base64 {
-     * This array is a lookup table that translates 6-bit positive integer index values into their "Base64 Alphabet" equivalents as specified in Table 1 of RFC
-     * 2045.
+     * This array is a lookup table that translates 6-bit positive integer index values into their "Base64 Alphabet"
+     * equivalents as specified in Table 1 of RFC 2045.
@@ -73 +76,2 @@ public class Base64 {
-     * Thanks to "commons" project in ws.apache.org for this code. http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/
+     * Thanks to "commons" project in ws.apache.org for this code.
+     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/
@@ -75,3 +79,7 @@ public class Base64 {
-    private static final byte[] STANDARD_ENCODE_TABLE = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',
-            'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',
-            'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/' };
+    private static final byte[] STANDARD_ENCODE_TABLE = {
+            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
+            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
+            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
+            'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
+            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'
+    };
@@ -80,2 +88,3 @@ public class Base64 {
-     * This is a copy of the STANDARD_ENCODE_TABLE above, but with + and / changed to - and _ to make the encoded Base64 results more URL-SAFE. This table is
-     * only used when the Base64's mode is set to URL-SAFE.
+     * This is a copy of the STANDARD_ENCODE_TABLE above, but with + and /
+     * changed to - and _ to make the encoded Base64 results more URL-SAFE.
+     * This table is only used when the Base64's mode is set to URL-SAFE.
@@ -83,3 +92,7 @@ public class Base64 {
-    private static final byte[] URL_SAFE_ENCODE_TABLE = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',
-            'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',
-            'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_' };
+    private static final byte[] URL_SAFE_ENCODE_TABLE = {
+            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
+            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
+            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
+            'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
+            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_'
+    };
@@ -93,2 +106,3 @@ public class Base64 {
-     * This array is a lookup table that translates Unicode characters drawn from the "Base64 Alphabet" (as specified in Table 1 of RFC 2045) into their 6-bit
-     * positive integer equivalents. Characters that are not in the Base64 alphabet but fall within the bounds of the array are translated to -1.
+     * This array is a lookup table that translates Unicode characters drawn from the "Base64 Alphabet" (as specified in
+     * Table 1 of RFC 2045) into their 6-bit positive integer equivalents. Characters that are not in the Base64
+     * alphabet but fall within the bounds of the array are translated to -1.
@@ -96,2 +110,2 @@ public class Base64 {
-     * Note: '+' and '-' both decode to 62. '/' and '_' both decode to 63. This means decoder seamlessly handles both URL_SAFE and STANDARD base64. (The
-     * encoder, on the other hand, needs to know ahead of time what to emit).
+     * Note: '+' and '-' both decode to 62. '/' and '_' both decode to 63. This means decoder seamlessly handles both
+     * URL_SAFE and STANDARD base64. (The encoder, on the other hand, needs to know ahead of time what to emit).
@@ -99 +113,2 @@ public class Base64 {
-     * Thanks to "commons" project in ws.apache.org for this code. http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/
+     * Thanks to "commons" project in ws.apache.org for this code.
+     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/
@@ -101,4 +116,9 @@ public class Base64 {
-    private static final byte[] DECODE_TABLE = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, 62, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1,
-            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32,
-            33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51 };
+    private static final byte[] DECODE_TABLE = {
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, 62, -1, 63, 52, 53, 54,
+            55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4,
+            5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
+            24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34,
+            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51
+    };
@@ -119 +139,2 @@ public class Base64 {
-     * @param arrayOctet byte array to test
+     * @param arrayOctet
+     *            byte array to test
@@ -123 +144,2 @@ public class Base64 {
-        for (final byte element : arrayOctet) {
+        for (final byte element : arrayOctet)
+        {
@@ -134 +156,2 @@ public class Base64 {
-     * @param base64Data Byte array containing Base64 data
+     * @param base64Data
+     *            Byte array containing Base64 data
@@ -144 +167,2 @@ public class Base64 {
-     * @param base64String String containing Base64 data
+     * @param base64String
+     *            String containing Base64 data
@@ -156 +180,2 @@ public class Base64 {
-     * @param pArray a byte array containing base64 character data
+     * @param pArray
+     *            a byte array containing base64 character data
@@ -167 +192,2 @@ public class Base64 {
-     * @param binaryData binary data to encode
+     * @param binaryData
+     *            binary data to encode
@@ -177,2 +203,4 @@ public class Base64 {
-     * @param binaryData Array containing binary data to encode.
-     * @param isChunked  if <code>true</code> this encoder will chunk the base64 output into 76 character blocks
+     * @param binaryData
+     *            Array containing binary data to encode.
+     * @param isChunked
+     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks
@@ -180 +208,2 @@ public class Base64 {
-     * @throws IllegalArgumentException Thrown when the input array needs an output array bigger than {@link Integer#MAX_VALUE}
+     * @throws IllegalArgumentException
+     *             Thrown when the input array needs an output array bigger than {@link Integer#MAX_VALUE}
@@ -189,3 +218,6 @@ public class Base64 {
-     * @param binaryData Array containing binary data to encode.
-     * @param isChunked  if <code>true</code> this encoder will chunk the base64 output into 76 character blocks
-     * @param urlSafe    if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.
+     * @param binaryData
+     *            Array containing binary data to encode.
+     * @param isChunked
+     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks
+     * @param urlSafe
+     *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.
@@ -193 +225,2 @@ public class Base64 {
-     * @throws IllegalArgumentException Thrown when the input array needs an output array bigger than {@link Integer#MAX_VALUE}
+     * @throws IllegalArgumentException
+     *             Thrown when the input array needs an output array bigger than {@link Integer#MAX_VALUE}
@@ -203,4 +236,8 @@ public class Base64 {
-     * @param binaryData    Array containing binary data to encode.
-     * @param isChunked     if <code>true</code> this encoder will chunk the base64 output into 76 character blocks
-     * @param urlSafe       if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.
-     * @param maxResultSize The maximum result size to accept.
+     * @param binaryData
+     *            Array containing binary data to encode.
+     * @param isChunked
+     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks
+     * @param urlSafe
+     *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.
+     * @param maxResultSize
+     *            The maximum result size to accept.
@@ -208 +245,2 @@ public class Base64 {
-     * @throws IllegalArgumentException Thrown when the input array needs an output array bigger than maxResultSize
+     * @throws IllegalArgumentException
+     *             Thrown when the input array needs an output array bigger than maxResultSize
@@ -211 +249,2 @@ public class Base64 {
-    public static byte[] encodeBase64(final byte[] binaryData, final boolean isChunked, final boolean urlSafe, final int maxResultSize) {
+    public static byte[] encodeBase64(final byte[] binaryData, final boolean isChunked, final boolean urlSafe,
+            final int maxResultSize) {
@@ -216 +255,2 @@ public class Base64 {
-        final long len = getEncodeLength(binaryData, isChunked ? CHUNK_SIZE : 0, isChunked ? CHUNK_SEPARATOR : NetConstants.EMPTY_BTYE_ARRAY);
+        final long len = getEncodeLength(binaryData, isChunked ? CHUNK_SIZE : 0,
+                isChunked ? CHUNK_SEPARATOR : NetConstants.EMPTY_BTYE_ARRAY);
@@ -218,2 +258,2 @@ public class Base64 {
-            throw new IllegalArgumentException(
-                    "Input array too big, the output array would be bigger (" + len + ") than the specified maxium size of " + maxResultSize);
+            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len
+                    + ") than the specified maxium size of " + maxResultSize);
@@ -229 +269,2 @@ public class Base64 {
-     * @param binaryData binary data to encode
+     * @param binaryData
+     *            binary data to encode
@@ -241 +282,2 @@ public class Base64 {
-     * @param binaryData binary data to encode
+     * @param binaryData
+     *            binary data to encode
@@ -252 +294,2 @@ public class Base64 {
-     * @param binaryData  binary data to encode
+     * @param binaryData
+     *            binary data to encode
@@ -266 +309,2 @@ public class Base64 {
-     * @param binaryData binary data to encode
+     * @param binaryData
+     *            binary data to encode
@@ -275,2 +319,2 @@ public class Base64 {
-     * Encodes binary data using a URL-safe variation of the base64 algorithm but does not chunk the output. The url-safe variation emits - and _ instead of +
-     * and / characters.
+     * Encodes binary data using a URL-safe variation of the base64 algorithm but does not chunk the output. The
+     * url-safe variation emits - and _ instead of + and / characters.
@@ -278 +322,2 @@ public class Base64 {
-     * @param binaryData binary data to encode
+     * @param binaryData
+     *            binary data to encode
@@ -287,2 +332,2 @@ public class Base64 {
-     * Encodes binary data using a URL-safe variation of the base64 algorithm but does not chunk the output. The url-safe variation emits - and _ instead of +
-     * and / characters.
+     * Encodes binary data using a URL-safe variation of the base64 algorithm but does not chunk the output. The
+     * url-safe variation emits - and _ instead of + and / characters.
@@ -290 +335,2 @@ public class Base64 {
-     * @param binaryData binary data to encode
+     * @param binaryData
+     *            binary data to encode
@@ -301 +347,2 @@ public class Base64 {
-     * @param bigInt a BigInteger
+     * @param bigInt
+     *            a BigInteger
@@ -303 +350,2 @@ public class Base64 {
-     * @throws NullPointerException if null is passed in
+     * @throws NullPointerException
+     *             if null is passed in
@@ -313,2 +361,3 @@ public class Base64 {
-     * @param pArray         byte[] array which will later be encoded
-     * @param chunkSize      line-length of the output (<= 0 means no chunking) between each chunkSeparator (e.g. CRLF).
+     * @param pArray byte[] array which will later be encoded
+     * @param chunkSize line-length of the output (<= 0 means no chunking) between each
+     *        chunkSeparator (e.g. CRLF).
@@ -317 +366,2 @@ public class Base64 {
-     * @return amount of space needed to encoded the supplied array. Returns a long since a max-len array will require Integer.MAX_VALUE + 33%.
+     * @return amount of space needed to encoded the supplied array.  Returns
+     *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
@@ -339 +389,2 @@ public class Base64 {
-     * Tests a given byte array to see if it contains only valid characters within the Base64 alphabet. Currently the method treats whitespace as valid.
+     * Tests a given byte array to see if it contains only valid characters within the Base64 alphabet. Currently the
+     * method treats whitespace as valid.
@@ -341,2 +392,4 @@ public class Base64 {
-     * @param arrayOctet byte array to test
-     * @return <code>true</code> if all bytes are valid characters in the Base64 alphabet or if the byte array is empty; false, otherwise
+     * @param arrayOctet
+     *            byte array to test
+     * @return <code>true</code> if all bytes are valid characters in the Base64 alphabet or if the byte array is empty;
+     *         false, otherwise
@@ -356 +409,2 @@ public class Base64 {
-     * @param octet The value to test
+     * @param octet
+     *            The value to test
@@ -367 +421,2 @@ public class Base64 {
-     * @param byteToCheck the byte to check
+     * @param byteToCheck
+     *            the byte to check
@@ -372,7 +427,7 @@ public class Base64 {
-        case ' ':
-        case '\n':
-        case '\r':
-        case '\t':
-            return true;
-        default:
-            return false;
+            case ' ' :
+            case '\n' :
+            case '\r' :
+            case '\t' :
+                return true;
+            default :
+                return false;
@@ -389 +444,2 @@ public class Base64 {
-     * @param bigInt <code>BigInteger</code> to be converted
+     * @param bigInt
+     *            <code>BigInteger</code> to be converted
@@ -418,2 +474,3 @@ public class Base64 {
-     * Encode table to use: either STANDARD or URL_SAFE. Note: the DECODE_TABLE above remains static because it is able to decode both STANDARD and URL_SAFE
-     * streams, but the encodeTable must be a member variable so we can switch between the two modes.
+     * Encode table to use: either STANDARD or URL_SAFE. Note: the DECODE_TABLE above remains static because it is able
+     * to decode both STANDARD and URL_SAFE streams, but the encodeTable must be a member variable so we can switch
+     * between the two modes.
@@ -424 +481,2 @@ public class Base64 {
-     * Line length for encoding. Not used when decoding. A value of zero or less implies no chunking of the base64 encoded data.
+     * Line length for encoding. Not used when decoding. A value of zero or less implies no chunking of the base64
+     * encoded data.
@@ -461,2 +519,2 @@ public class Base64 {
-     * Variable tracks how many characters have been written to the current line. Only used when encoding. We use it to make sure each encoded line never goes
-     * beyond lineLength (if lineLength > 0).
+     * Variable tracks how many characters have been written to the current line. Only used when encoding. We use it to
+     * make sure each encoded line never goes beyond lineLength (if lineLength > 0).
@@ -467 +525,2 @@ public class Base64 {
-     * Writes to the buffer only occur after every 3 reads when encoding, an every 4 reads when decoding. This variable helps track that.
+     * Writes to the buffer only occur after every 3 reads when encoding, an every 4 reads when decoding. This variable
+     * helps track that.
@@ -472 +531,2 @@ public class Base64 {
-     * Boolean flag to indicate the EOF has been reached. Once EOF has been reached, this Base64 object becomes useless, and must be thrown away.
+     * Boolean flag to indicate the EOF has been reached. Once EOF has been reached, this Base64 object becomes useless,
+     * and must be thrown away.
@@ -477,2 +537,2 @@ public class Base64 {
-     * Place holder for the 3 bytes we're dealing with for our base64 logic. Bitwise operations store and extract the base64 encoding or decoding from this
-     * variable.
+     * Place holder for the 3 bytes we're dealing with for our base64 logic. Bitwise operations store and extract the
+     * base64 encoding or decoding from this variable.
@@ -506 +566,3 @@ public class Base64 {
-     * @param urlSafe if <code>true</code>, URL-safe encoding is used. In most cases this should be set to <code>false</code>.
+     * @param urlSafe
+     *            if <code>true</code>, URL-safe encoding is used. In most cases this should be set to
+     *            <code>false</code>.
@@ -516 +578,2 @@ public class Base64 {
-     * When encoding the line length is given in the constructor, the line separator is CRLF, and the encoding table is STANDARD_ENCODE_TABLE.
+     * When encoding the line length is given in the constructor, the line separator is CRLF, and the encoding table is
+     * STANDARD_ENCODE_TABLE.
@@ -525,2 +588,3 @@ public class Base64 {
-     * @param lineLength Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4). If {@code lineLength <= 0}, then
-     *                   the output will not be divided into lines (chunks). Ignored when decoding.
+     * @param lineLength
+     *            Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4).
+     *            If {@code lineLength <= 0}, then the output will not be divided into lines (chunks). Ignored when decoding.
@@ -536 +600,2 @@ public class Base64 {
-     * When encoding the line length and line separator are given in the constructor, and the encoding table is STANDARD_ENCODE_TABLE.
+     * When encoding the line length and line separator are given in the constructor, and the encoding table is
+     * STANDARD_ENCODE_TABLE.
@@ -545,4 +610,7 @@ public class Base64 {
-     * @param lineLength    Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4). If {@code lineLength <= 0},
-     *                      then the output will not be divided into lines (chunks). Ignored when decoding.
-     * @param lineSeparator Each line of encoded data will end with this sequence of bytes.
-     * @throws IllegalArgumentException Thrown when the provided lineSeparator included some base64 characters.
+     * @param lineLength
+     *            Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4).
+     *            If {@code lineLength <= 0}, then the output will not be divided into lines (chunks). Ignored when decoding.
+     * @param lineSeparator
+     *            Each line of encoded data will end with this sequence of bytes.
+     * @throws IllegalArgumentException
+     *             Thrown when the provided lineSeparator included some base64 characters.
@@ -558 +626,2 @@ public class Base64 {
-     * When encoding the line length and line separator are given in the constructor, and the encoding table is STANDARD_ENCODE_TABLE.
+     * When encoding the line length and line separator are given in the constructor, and the encoding table is
+     * STANDARD_ENCODE_TABLE.
@@ -567,6 +636,10 @@ public class Base64 {
-     * @param lineLength    Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4). If {@code lineLength <= 0},
-     *                      then the output will not be divided into lines (chunks). Ignored when decoding.
-     * @param lineSeparator Each line of encoded data will end with this sequence of bytes.
-     * @param urlSafe       Instead of emitting '+' and '/' we emit '-' and '_' respectively. urlSafe is only applied to encode operations. Decoding seamlessly
-     *                      handles both modes.
-     * @throws IllegalArgumentException The provided lineSeparator included some base64 characters. That's not going to work!
+     * @param lineLength
+     *            Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4).
+     *            If {@code lineLength <= 0}, then the output will not be divided into lines (chunks). Ignored when decoding.
+     * @param lineSeparator
+     *            Each line of encoded data will end with this sequence of bytes.
+     * @param urlSafe
+     *            Instead of emitting '+' and '/' we emit '-' and '_' respectively. urlSafe is only applied to encode
+     *            operations. Decoding seamlessly handles both modes.
+     * @throws IllegalArgumentException
+     *             The provided lineSeparator included some base64 characters. That's not going to work!
@@ -577,2 +650,2 @@ public class Base64 {
-            lineLength = 0; // disable chunk-separating
-            lineSeparator = NetConstants.EMPTY_BTYE_ARRAY; // this just gets ignored
+            lineLength = 0;  // disable chunk-separating
+            lineSeparator = NetConstants.EMPTY_BTYE_ARRAY;  // this just gets ignored
@@ -608 +681,2 @@ public class Base64 {
-     * @param pArray A byte array containing Base64 character data
+     * @param pArray
+     *            A byte array containing Base64 character data
@@ -624,2 +698,2 @@ public class Base64 {
-        // variable). So we cannot determine ahead of time exactly how big an
-        // array is necessary. Hence the need to construct a 2nd byte array to
+        // variable).  So we cannot determine ahead of time exactly how big an
+        // array is necessary.  Hence the need to construct a 2nd byte array to
@@ -635,2 +709,3 @@ public class Base64 {
-     * Decodes all of the provided data, starting at inPos, for inAvail bytes. Should be called at least twice: once with the data to decode, and once with
-     * inAvail set to "-1" to alert decoder that EOF has been reached. The "-1" call is not necessary when decoding, but it doesn't hurt, either.
+     * Decodes all of the provided data, starting at inPos, for inAvail bytes. Should be called at least twice: once
+     * with the data to decode, and once with inAvail set to "-1" to alert decoder that EOF has been reached. The "-1"
+     * call is not necessary when decoding, but it doesn't hurt, either.
@@ -639,2 +714,3 @@ public class Base64 {
-     * Ignores all non-base64 characters. This is how chunked (e.g. 76 character) data is handled, since CR and LF are silently ignored, but has implications
-     * for other bytes, too. This method subscribes to the garbage-in, garbage-out philosophy: it will not check the provided data for validity.
+     * Ignores all non-base64 characters. This is how chunked (e.g. 76 character) data is handled, since CR and LF are
+     * silently ignored, but has implications for other bytes, too. This method subscribes to the garbage-in,
+     * garbage-out philosophy: it will not check the provided data for validity.
@@ -647,3 +723,6 @@ public class Base64 {
-     * @param in      byte[] array of ascii data to base64 decode.
-     * @param inPos   Position to start reading data from.
-     * @param inAvail Amount of bytes available from input for encoding.
+     * @param in
+     *            byte[] array of ascii data to base64 decode.
+     * @param inPos
+     *            Position to start reading data from.
+     * @param inAvail
+     *            Amount of bytes available from input for encoding.
@@ -688,10 +767,10 @@ public class Base64 {
-            case 2:
-                x = x << 6;
-                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
-                break;
-            case 3:
-                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
-                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
-                break;
-            default:
-                break; // other values ignored
+                case 2 :
+                    x = x << 6;
+                    buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+                    break;
+                case 3 :
+                    buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+                    buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+                    break;
+                default:
+                    break;  // other values ignored
@@ -705 +784,2 @@ public class Base64 {
-     * @param pArray A String containing Base64 character data
+     * @param pArray
+     *            A String containing Base64 character data
@@ -716 +796,2 @@ public class Base64 {
-     * @param pArray a byte array containing binary data
+     * @param pArray
+     *            a byte array containing binary data
@@ -745,2 +826,3 @@ public class Base64 {
-     * Encodes all of the provided data, starting at inPos, for inAvail bytes. Must be called at least twice: once with the data to encode, and once with
-     * inAvail set to "-1" to alert encoder that EOF has been reached, so flush last remaining bytes (if not multiple of 3).
+     * Encodes all of the provided data, starting at inPos, for inAvail bytes. Must be called at least twice: once with
+     * the data to encode, and once with inAvail set to "-1" to alert encoder that EOF has been reached, so flush last
+     * remaining bytes (if not multiple of 3).
@@ -753,3 +835,6 @@ public class Base64 {
-     * @param in      byte[] array of binary data to base64 encode.
-     * @param inPos   Position to start reading data from.
-     * @param inAvail Amount of bytes available from input for encoding.
+     * @param in
+     *            byte[] array of binary data to base64 encode.
+     * @param inPos
+     *            Position to start reading data from.
+     * @param inAvail
+     *            Amount of bytes available from input for encoding.
@@ -769,21 +854,21 @@ public class Base64 {
-            case 1:
-                buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
-                // URL-SAFE skips the padding to further reduce size.
-                if (encodeTable == STANDARD_ENCODE_TABLE) {
-                    buffer[pos++] = PAD;
-                    buffer[pos++] = PAD;
-                }
-                break;
-
-            case 2:
-                buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
-                buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
-                buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
-                // URL-SAFE skips the padding to further reduce size.
-                if (encodeTable == STANDARD_ENCODE_TABLE) {
-                    buffer[pos++] = PAD;
-                }
-                break;
-            default:
-                break; // other values ignored
+                case 1 :
+                    buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+                    // URL-SAFE skips the padding to further reduce size.
+                    if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        buffer[pos++] = PAD;
+                        buffer[pos++] = PAD;
+                    }
+                    break;
+
+                case 2 :
+                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+                    buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+                    buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+                    // URL-SAFE skips the padding to further reduce size.
+                    if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        buffer[pos++] = PAD;
+                    }
+                    break;
+                default:
+                    break;  // other values ignored
@@ -825 +910,2 @@ public class Base64 {
-     * @param pArray a byte array containing binary data
+     * @param pArray
+     *            a byte array containing binary data
@@ -865,2 +951,2 @@ public class Base64 {
-     * Extracts buffered data into the provided byte[] array, starting at position bPos, up to a maximum of bAvail bytes. Returns how many bytes were actually
-     * extracted.
+     * Extracts buffered data into the provided byte[] array, starting at position bPos, up to a maximum of bAvail
+     * bytes. Returns how many bytes were actually extracted.
@@ -868,3 +954,6 @@ public class Base64 {
-     * @param b      byte[] array to extract the buffered data into.
-     * @param bPos   position in byte[] array to start extraction at.
-     * @param bAvail amount of bytes we're allowed to extract. We may extract fewer (if fewer are available).
+     * @param b
+     *            byte[] array to extract the buffered data into.
+     * @param bPos
+     *            position in byte[] array to start extraction at.
+     * @param bAvail
+     *            amount of bytes we're allowed to extract. We may extract fewer (if fewer are available).
@@ -920,2 +1009,2 @@ public class Base64 {
-     * Sets the streaming buffer. This is a small optimization where we try to buffer directly to the consumer's output array for one round (if the consumer
-     * calls this method first) instead of starting our own buffer.
+     * Sets the streaming buffer. This is a small optimization where we try to buffer directly to the consumer's output
+     * array for one round (if the consumer calls this method first) instead of starting our own buffer.
@@ -923,3 +1012,6 @@ public class Base64 {
-     * @param out      byte[] array to buffer directly to.
-     * @param outPos   Position to start buffering into.
-     * @param outAvail Amount of bytes available for direct buffering.
+     * @param out
+     *            byte[] array to buffer directly to.
+     * @param outPos
+     *            Position to start buffering into.
+     * @param outAvail
+     *            Amount of bytes available for direct buffering.
diff --git a/src/main/java/org/apache/commons/net/util/Charsets.java b/src/main/java/org/apache/commons/net/util/Charsets.java
index 40a9c8aff..6d0d43a79 100644
--- a/src/main/java/org/apache/commons/net/util/Charsets.java
+++ b/src/main/java/org/apache/commons/net/util/Charsets.java
@@ -32 +32,3 @@ public class Charsets {
-     * @param charsetName The name of the requested charset; may be a canonical name, an alias, or null. If null, return the default charset.
+     * @param charsetName
+     *            The name of the requested charset; may be a canonical name, an alias, or null. If null, return the
+     *            default charset.
@@ -42 +44,3 @@ public class Charsets {
-     * @param charsetName        The name of the requested charset; may be a canonical name, an alias, or null. If null, return the default charset.
+     * @param charsetName
+     *            The name of the requested charset; may be a canonical name, an alias, or null.
+     *            If null, return the default charset.
diff --git a/src/main/java/org/apache/commons/net/util/KeyManagerUtils.java b/src/main/java/org/apache/commons/net/util/KeyManagerUtils.java
index 8135f3c04..7b0526285 100644
--- a/src/main/java/org/apache/commons/net/util/KeyManagerUtils.java
+++ b/src/main/java/org/apache/commons/net/util/KeyManagerUtils.java
@@ -44 +43,0 @@ import org.apache.commons.net.io.Util;
- *
@@ -53,4 +52,4 @@ import org.apache.commons.net.io.Util;
- *
- * If using the default store type and the key password is the same as the store password, these parameters can be omitted. <br>
- * If the desired key is the first or only key in the keystore, the keyAlias parameter can be omitted, in which case the code becomes:
- *
+ * If using the default store type and the key password is the same as the
+ * store password, these parameters can be omitted. <br>
+ * If the desired key is the first or only key in the keystore, the keyAlias parameter
+ * can be omitted, in which case the code becomes:
@@ -75 +74,2 @@ public final class KeyManagerUtils {
-        ClientKeyStore(final KeyStore ks, final String keyAlias, final String keyPass) throws GeneralSecurityException {
+        ClientKeyStore(final KeyStore ks, final String keyAlias, final String keyPass) throws GeneralSecurityException
+        {
@@ -97 +97 @@ public final class KeyManagerUtils {
-    private static class X509KeyManager extends X509ExtendedKeyManager {
+    private static class X509KeyManager extends X509ExtendedKeyManager  {
@@ -107 +107,2 @@ public final class KeyManagerUtils {
-        public String chooseClientAlias(final String[] keyType, final Principal[] issuers, final Socket socket) {
+        public String chooseClientAlias(final String[] keyType, final Principal[] issuers,
+                final Socket socket) {
@@ -124 +125 @@ public final class KeyManagerUtils {
-            return new String[] { keyStore.getAlias() };
+            return new String[]{ keyStore.getAlias()};
@@ -143,2 +144,4 @@ public final class KeyManagerUtils {
-     * Create a client key manager which returns a particular key. Does not handle server keys. Uses the default store type and assumes the key password is the
-     * same as the store password. The key alias is found by searching the keystore for the first private key entry
+     * Create a client key manager which returns a particular key.
+     * Does not handle server keys.
+     * Uses the default store type and assumes the key password is the same as the store password.
+     * The key alias is found by searching the keystore for the first private key entry
@@ -149 +152 @@ public final class KeyManagerUtils {
-     * @throws IOException              if there is a problem creating the keystore
+     * @throws IOException if there is a problem creating the keystore
@@ -152 +155,3 @@ public final class KeyManagerUtils {
-    public static KeyManager createClientKeyManager(final File storePath, final String storePass) throws IOException, GeneralSecurityException {
+    public static KeyManager createClientKeyManager(final File storePath, final String storePass)
+        throws IOException, GeneralSecurityException
+    {
@@ -157,2 +162,3 @@ public final class KeyManagerUtils {
-     * Create a client key manager which returns a particular key. Does not handle server keys. Uses the default store type and assumes the key password is the
-     * same as the store password
+     * Create a client key manager which returns a particular key.
+     * Does not handle server keys.
+     * Uses the default store type and assumes the key password is the same as the store password
@@ -162 +168 @@ public final class KeyManagerUtils {
-     * @param keyAlias  the alias of the key to use, may be {@code null} in which case the first key entry alias is used
+     * @param keyAlias the alias of the key to use, may be {@code null} in which case the first key entry alias is used
@@ -164 +170 @@ public final class KeyManagerUtils {
-     * @throws IOException              if there is a problem creating the keystore
+     * @throws IOException if there is a problem creating the keystore
@@ -168 +174,2 @@ public final class KeyManagerUtils {
-            throws IOException, GeneralSecurityException {
+        throws IOException, GeneralSecurityException
+    {
@@ -173 +180,2 @@ public final class KeyManagerUtils {
-     * Create a client key manager which returns a particular key. Does not handle server keys.
+     * Create a client key manager which returns a particular key.
+     * Does not handle server keys.
@@ -175 +183 @@ public final class KeyManagerUtils {
-     * @param ks       the keystore to use
+     * @param ks the keystore to use
@@ -177 +185 @@ public final class KeyManagerUtils {
-     * @param keyPass  the password of the key to use
+     * @param keyPass the password of the key to use
@@ -181 +189,3 @@ public final class KeyManagerUtils {
-    public static KeyManager createClientKeyManager(final KeyStore ks, final String keyAlias, final String keyPass) throws GeneralSecurityException {
+    public static KeyManager createClientKeyManager(final KeyStore ks, final String keyAlias, final String keyPass)
+        throws GeneralSecurityException
+    {
@@ -187 +197,2 @@ public final class KeyManagerUtils {
-     * Create a client key manager which returns a particular key. Does not handle server keys.
+     * Create a client key manager which returns a particular key.
+     * Does not handle server keys.
@@ -192,2 +203,2 @@ public final class KeyManagerUtils {
-     * @param keyAlias  the alias of the key to use, may be {@code null} in which case the first key entry alias is used
-     * @param keyPass   the password of the key to use
+     * @param keyAlias the alias of the key to use, may be {@code null} in which case the first key entry alias is used
+     * @param keyPass the password of the key to use
@@ -196 +207 @@ public final class KeyManagerUtils {
-     * @throws IOException              if there is a problem creating the keystore
+     * @throws IOException if there is a problem creating the keystore
@@ -198,2 +209,4 @@ public final class KeyManagerUtils {
-    public static KeyManager createClientKeyManager(final String storeType, final File storePath, final String storePass, final String keyAlias,
-            final String keyPass) throws IOException, GeneralSecurityException {
+    public static KeyManager createClientKeyManager(
+            final String storeType, final File storePath, final String storePass, final String keyAlias, final String keyPass)
+        throws IOException, GeneralSecurityException
+    {
@@ -206 +219 @@ public final class KeyManagerUtils {
-        while (e.hasMoreElements()) {
+        while(e.hasMoreElements()) {
@@ -216 +229 @@ public final class KeyManagerUtils {
-            throws KeyStoreException, IOException, GeneralSecurityException {
+        throws KeyStoreException,  IOException, GeneralSecurityException {
@@ -228 +241 @@ public final class KeyManagerUtils {
-    private KeyManagerUtils() {
+    private KeyManagerUtils(){
diff --git a/src/main/java/org/apache/commons/net/util/ListenerList.java b/src/main/java/org/apache/commons/net/util/ListenerList.java
index a54f5dcbd..8175f935c 100644
--- a/src/main/java/org/apache/commons/net/util/ListenerList.java
+++ b/src/main/java/org/apache/commons/net/util/ListenerList.java
@@ -31 +31,2 @@ import java.util.concurrent.CopyOnWriteArrayList;
-public class ListenerList implements Serializable, Iterable<EventListener> {
+public class ListenerList implements Serializable, Iterable<EventListener>
+{
@@ -36 +37,2 @@ public class ListenerList implements Serializable, Iterable<EventListener> {
-    public ListenerList() {
+    public ListenerList()
+    {
@@ -40,2 +42,3 @@ public class ListenerList implements Serializable, Iterable<EventListener> {
-    public void addListener(final EventListener listener) {
-        listeners.add(listener);
+    public void addListener(final EventListener listener)
+    {
+            listeners.add(listener);
@@ -44 +47,2 @@ public class ListenerList implements Serializable, Iterable<EventListener> {
-    public int getListenerCount() {
+    public int getListenerCount()
+    {
@@ -52 +56,2 @@ public class ListenerList implements Serializable, Iterable<EventListener> {
-     * @since 2.0 TODO Check that this is a good defensive strategy
+     * @since 2.0
+     * TODO Check that this is a good defensive strategy
@@ -56 +61 @@ public class ListenerList implements Serializable, Iterable<EventListener> {
-        return listeners.iterator();
+            return listeners.iterator();
@@ -59,2 +64,3 @@ public class ListenerList implements Serializable, Iterable<EventListener> {
-    public void removeListener(final EventListener listener) {
-        listeners.remove(listener);
+    public  void removeListener(final EventListener listener)
+    {
+            listeners.remove(listener);
@@ -64 +70,2 @@ public class ListenerList implements Serializable, Iterable<EventListener> {
-     * Serialization is unnecessary for this class. Reject attempts to do so until such time as the Serializable attribute can be dropped.
+        Serialization is unnecessary for this class.
+        Reject attempts to do so until such time as the Serializable attribute can be dropped.
@@ -67 +74,2 @@ public class ListenerList implements Serializable, Iterable<EventListener> {
-    private void writeObject(final ObjectOutputStream out) throws IOException {
+    private void writeObject(final ObjectOutputStream out) throws IOException
+    {
@@ -71 +79,2 @@ public class ListenerList implements Serializable, Iterable<EventListener> {
-    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {
+    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException
+    {
diff --git a/src/main/java/org/apache/commons/net/util/SSLContextUtils.java b/src/main/java/org/apache/commons/net/util/SSLContextUtils.java
index 7b44c99a4..2583973c0 100644
--- a/src/main/java/org/apache/commons/net/util/SSLContextUtils.java
+++ b/src/main/java/org/apache/commons/net/util/SSLContextUtils.java
@@ -30 +29,0 @@ import javax.net.ssl.TrustManager;
- *
@@ -37,3 +36,2 @@ public class SSLContextUtils {
-     *
-     * @param protocol     the protocol used to instatiate the context
-     * @param keyManager   the key manager, may be {@code null}
+     * @param protocol the protocol used to instatiate the context
+     * @param keyManager the key manager, may be {@code null}
@@ -44,2 +42,4 @@ public class SSLContextUtils {
-    public static SSLContext createSSLContext(final String protocol, final KeyManager keyManager, final TrustManager trustManager) throws IOException {
-        return createSSLContext(protocol, keyManager == null ? null : new KeyManager[] { keyManager },
+    public static SSLContext createSSLContext(final String protocol, final KeyManager keyManager, final TrustManager trustManager)
+            throws IOException {
+        return createSSLContext(protocol,
+                keyManager == null ? null : new KeyManager[] { keyManager },
@@ -51,3 +51,2 @@ public class SSLContextUtils {
-     *
-     * @param protocol      the protocol used to instatiate the context
-     * @param keyManagers   the array of key managers, may be {@code null} but array entries must not be {@code null}
+     * @param protocol the protocol used to instatiate the context
+     * @param keyManagers the array of key managers, may be {@code null} but array entries must not be {@code null}
@@ -58 +57,2 @@ public class SSLContextUtils {
-    public static SSLContext createSSLContext(final String protocol, final KeyManager[] keyManagers, final TrustManager[] trustManagers) throws IOException {
+    public static SSLContext createSSLContext(final String protocol, final KeyManager[] keyManagers,
+            final TrustManager[] trustManagers) throws IOException {
diff --git a/src/main/java/org/apache/commons/net/util/SSLSocketUtils.java b/src/main/java/org/apache/commons/net/util/SSLSocketUtils.java
index 3261c08cb..db344c66f 100644
--- a/src/main/java/org/apache/commons/net/util/SSLSocketUtils.java
+++ b/src/main/java/org/apache/commons/net/util/SSLSocketUtils.java
@@ -41 +41,2 @@ public class SSLSocketUtils {
-            final Method setEndpointIdentificationAlgorithm = cls.getDeclaredMethod("setEndpointIdentificationAlgorithm", String.class);
+            final Method setEndpointIdentificationAlgorithm = cls
+                .getDeclaredMethod("setEndpointIdentificationAlgorithm", String.class);
@@ -50,2 +51,2 @@ public class SSLSocketUtils {
-        } catch (final SecurityException | ClassNotFoundException | NoSuchMethodException | IllegalArgumentException | IllegalAccessException
-                | InvocationTargetException e) { // Ignored
+        } catch (final SecurityException | ClassNotFoundException | NoSuchMethodException | IllegalArgumentException |
+            IllegalAccessException | InvocationTargetException e) { // Ignored
diff --git a/src/main/java/org/apache/commons/net/util/SubnetUtils.java b/src/main/java/org/apache/commons/net/util/SubnetUtils.java
index e93b75e04..b9bf0fb2c 100644
--- a/src/main/java/org/apache/commons/net/util/SubnetUtils.java
+++ b/src/main/java/org/apache/commons/net/util/SubnetUtils.java
@@ -24 +23,0 @@ import java.util.regex.Pattern;
- *
@@ -38,2 +37 @@ public class SubnetUtils {
-        private SubnetInfo() {
-        }
+        private SubnetInfo() {}
@@ -43,0 +42 @@ public class SubnetUtils {
+        private long broadcastLong(){ return broadcast &  UNSIGNED_INT_MASK; }
@@ -45,7 +44,3 @@ public class SubnetUtils {
-        private long broadcastLong() {
-            return broadcast & UNSIGNED_INT_MASK;
-        }
-
-        /**
-         * Converts a 4-element array into dotted decimal format.
-         */
+       /**
+        * Converts a 4-element array into dotted decimal format.
+        */
@@ -69,2 +64,2 @@ public class SubnetUtils {
-         * Gets the count of available addresses. Will be zero for CIDR/31 and CIDR/32 if the inclusive flag is false.
-         *
+         * Gets the count of available addresses.
+         * Will be zero for CIDR/31 and CIDR/32 if the inclusive flag is false.
@@ -86,2 +81,2 @@ public class SubnetUtils {
-         * Gets the count of available addresses. Will be zero for CIDR/31 and CIDR/32 if the inclusive flag is false.
-         *
+         * Gets the count of available addresses.
+         * Will be zero for CIDR/31 and CIDR/32 if the inclusive flag is false.
@@ -119 +114,2 @@ public class SubnetUtils {
-         * Gets the high address as a dotted IP address. Will be zero for CIDR/31 and CIDR/32 if the inclusive flag is false.
+         * Gets the high address as a dotted IP address.
+         * Will be zero for CIDR/31 and CIDR/32 if the inclusive flag is false.
@@ -128 +124,2 @@ public class SubnetUtils {
-         * Gets the low address as a dotted IP address. Will be zero for CIDR/31 and CIDR/32 if the inclusive flag is false.
+         * Gets the low address as a dotted IP address.
+         * Will be zero for CIDR/31 and CIDR/32 if the inclusive flag is false.
@@ -153 +150,2 @@ public class SubnetUtils {
-            return isInclusiveHostCount() ? broadcast : broadcastLong() - networkLong() > 1 ? broadcast - 1 : 0;
+            return isInclusiveHostCount() ? broadcast :
+                broadcastLong() - networkLong() > 1 ? broadcast -1  : 0;
@@ -157,3 +155,4 @@ public class SubnetUtils {
-         * Tests if the parameter <code>address</code> is in the range of usable endpoint addresses for this subnet. This excludes the network and broadcast
-         * addresses by default. Use {@link SubnetUtils#setInclusiveHostCount(boolean)} to change this.
-         *
+         * Tests if the parameter <code>address</code> is in the
+         * range of usable endpoint addresses for this subnet. This excludes the
+         * network and broadcast addresses by default. Use {@link SubnetUtils#setInclusiveHostCount(boolean)}
+         * to change this.
@@ -175,3 +174,4 @@ public class SubnetUtils {
-         * Tests if the parameter <code>address</code> is in the range of usable endpoint addresses for this subnet. This excludes the network and broadcast
-         * addresses. Use {@link SubnetUtils#setInclusiveHostCount(boolean)} to change this.
-         *
+         * Tests if the parameter <code>address</code> is in the
+         * range of usable endpoint addresses for this subnet. This excludes the
+         * network and broadcast addresses. Use {@link SubnetUtils#setInclusiveHostCount(boolean)}
+         * to change this.
@@ -186 +186,2 @@ public class SubnetUtils {
-            return isInclusiveHostCount() ? network : broadcastLong() - networkLong() > 1 ? network + 1 : 0;
+            return isInclusiveHostCount() ? network :
+                broadcastLong() - networkLong() > 1 ? network + 1 : 0;
@@ -194,10 +195,10 @@ public class SubnetUtils {
-        /**
-         * Converts a packed integer address into a 4-element array
-         */
-        private int[] toArray(final int val) {
-            final int ret[] = new int[4];
-            for (int j = 3; j >= 0; --j) {
-                ret[j] |= val >>> 8 * (3 - j) & 0xff;
-            }
-            return ret;
-        }
+       /**
+        * Converts a packed integer address into a 4-element array
+        */
+       private int[] toArray(final int val) {
+           final int ret[] = new int[4];
+           for (int j = 3; j >= 0; --j) {
+               ret[j] |= val >>> 8 * (3 - j) & 0xff;
+           }
+           return ret;
+       }
@@ -207 +207,0 @@ public class SubnetUtils {
-         *
@@ -225 +224,0 @@ public class SubnetUtils {
-
@@ -236 +235,2 @@ public class SubnetUtils {
-     * Extracts the components of a dotted decimal address and pack into an integer using a regex match
+     * Extracts the components of a dotted decimal address and
+     * pack into an integer using a regex match
@@ -246 +245,0 @@ public class SubnetUtils {
-
@@ -248 +247,3 @@ public class SubnetUtils {
-     * Checks integer boundaries. Checks if a value x is in the range [begin,end]. Returns x if it is in range, throws an exception otherwise.
+     * Checks integer boundaries.
+     * Checks if a value x is in the range [begin,end].
+     * Returns x if it is in range, throws an exception otherwise.
@@ -281 +281,0 @@ public class SubnetUtils {
-     *
@@ -283,2 +283,2 @@ public class SubnetUtils {
-     * @throws IllegalArgumentException if the parameter is invalid, i.e. does not match n.n.n.n/m where n=1-3 decimal digits, m = 1-2 decimal digits in range
-     *                                  0-32
+     * @throws IllegalArgumentException if the parameter is invalid,
+     * i.e. does not match n.n.n.n/m where n=1-3 decimal digits, m = 1-2 decimal digits in range 0-32
@@ -317 +316,0 @@ public class SubnetUtils {
-     *
@@ -319,2 +318,3 @@ public class SubnetUtils {
-     * @param mask    A dotted decimal netmask e.g. "255.255.0.0"
-     * @throws IllegalArgumentException if the address or mask is invalid, i.e. does not match n.n.n.n where n=1-3 decimal digits and the mask is not all zeros
+     * @param mask A dotted decimal netmask e.g. "255.255.0.0"
+     * @throws IllegalArgumentException if the address or mask is invalid,
+     * i.e. does not match n.n.n.n where n=1-3 decimal digits and the mask is not all zeros
@@ -339 +338,0 @@ public class SubnetUtils {
-     *
@@ -355,2 +354,2 @@ public class SubnetUtils {
-     * Tests if the return value of {@link SubnetInfo#getAddressCount()} includes the network and broadcast addresses.
-     *
+     * Tests if the return value of {@link SubnetInfo#getAddressCount()}
+     * includes the network and broadcast addresses.
@@ -365,3 +364,3 @@ public class SubnetUtils {
-     * Sets to <code>true</code> if you want the return value of {@link SubnetInfo#getAddressCount()} to include the network and broadcast addresses. This also
-     * applies to {@link SubnetInfo#isInRange(int)}
-     *
+     * Sets to <code>true</code> if you want the return value of {@link SubnetInfo#getAddressCount()}
+     * to include the network and broadcast addresses.
+     * This also applies to {@link SubnetInfo#isInRange(int)}
diff --git a/src/main/java/org/apache/commons/net/util/TrustManagerUtils.java b/src/main/java/org/apache/commons/net/util/TrustManagerUtils.java
index 9efa550cc..7ae108e82 100644
--- a/src/main/java/org/apache/commons/net/util/TrustManagerUtils.java
+++ b/src/main/java/org/apache/commons/net/util/TrustManagerUtils.java
@@ -85,3 +85,3 @@ public final class TrustManagerUtils {
-     * {@link javax.net.ssl.SSLContext#init(javax.net.ssl.KeyManager[], javax.net.ssl.TrustManager[], java.security.SecureRandom) SSLContext#init(KeyManager[],
-     * TrustManager[], SecureRandom)} when the TrustManager parameter is set to {@code null}
-     *
+     *  {@link javax.net.ssl.SSLContext#init(javax.net.ssl.KeyManager[], javax.net.ssl.TrustManager[], java.security.SecureRandom)
+     * SSLContext#init(KeyManager[], TrustManager[], SecureRandom)}
+     * when the TrustManager parameter is set to {@code null}
@@ -100 +100,2 @@ public final class TrustManagerUtils {
-     * Generate a TrustManager that checks server certificates for validity, but otherwise performs no checks.
+     * Generate a TrustManager that checks server certificates for validity,
+     * but otherwise performs no checks.
@@ -104 +105 @@ public final class TrustManagerUtils {
-    public static X509TrustManager getValidateServerCertificateTrustManager() {
+    public static X509TrustManager getValidateServerCertificateTrustManager(){
diff --git a/src/main/java/org/apache/commons/net/whois/WhoisClient.java b/src/main/java/org/apache/commons/net/whois/WhoisClient.java
index e2218ec43..7269800fb 100644
--- a/src/main/java/org/apache/commons/net/whois/WhoisClient.java
+++ b/src/main/java/org/apache/commons/net/whois/WhoisClient.java
@@ -26,4 +26,6 @@ import org.apache.commons.net.finger.FingerClient;
- * The WhoisClient class implements the client side of the Internet Whois Protocol defined in RFC 954. To query a host you create a WhoisClient instance,
- * connect to the host, query the host, and finally disconnect from the host. If the whois service you want to query is on a non-standard port, connect to the
- * host at that port. Here's a sample use:
- *
+ * The WhoisClient class implements the client side of the Internet Whois
+ * Protocol defined in RFC 954.   To query a host you create a
+ * WhoisClient instance, connect to the host, query the host, and finally
+ * disconnect from the host.  If the whois service you want to query is on
+ * a non-standard port, connect to the host at that port.
+ * Here's a sample use:
@@ -31 +33 @@ import org.apache.commons.net.finger.FingerClient;
- * WhoisClient whois;
+ *    WhoisClient whois;
@@ -33 +35 @@ import org.apache.commons.net.finger.FingerClient;
- * whois = new WhoisClient();
+ *    whois = new WhoisClient();
@@ -35,8 +37,8 @@ import org.apache.commons.net.finger.FingerClient;
- * try {
- *     whois.connect(WhoisClient.DEFAULT_HOST);
- *     System.out.println(whois.query("foobar"));
- *     whois.disconnect();
- * } catch (IOException e) {
- *     System.err.println("Error I/O exception: " + e.getMessage());
- *     return;
- * }
+ *    try {
+ *      whois.connect(WhoisClient.DEFAULT_HOST);
+ *      System.out.println(whois.query("foobar"));
+ *      whois.disconnect();
+ *    } catch(IOException e) {
+ *      System.err.println("Error I/O exception: " + e.getMessage());
+ *      return;
+ *    }
@@ -49 +51,2 @@ import org.apache.commons.net.finger.FingerClient;
-public final class WhoisClient extends FingerClient {
+public final class WhoisClient extends FingerClient
+{
@@ -51 +54 @@ public final class WhoisClient extends FingerClient {
-     * The default whois host to query. It is set to whois.internic.net.
+     * The default whois host to query.  It is set to whois.internic.net.
@@ -56 +59 @@ public final class WhoisClient extends FingerClient {
-     * The default whois port. It is set to 43 according to RFC 954.
+     * The default whois port.  It is set to 43 according to RFC 954.
@@ -59,0 +63 @@ public final class WhoisClient extends FingerClient {
+
@@ -61 +65,2 @@ public final class WhoisClient extends FingerClient {
-     * The default whois constructor. Initializes the default port to <code> DEFAULT_PORT </code>.
+     * The default whois constructor.    Initializes the
+     * default port to <code> DEFAULT_PORT </code>.
@@ -63 +68,2 @@ public final class WhoisClient extends FingerClient {
-    public WhoisClient() {
+    public WhoisClient()
+    {
@@ -68,3 +74,6 @@ public final class WhoisClient extends FingerClient {
-     * Queries the connected whois server for information regarding the given handle and returns the InputStream of the network connection. It is up to the
-     * programmer to be familiar with the handle syntax of the whois server. You must first connect to a finger server before calling this method, and you
-     * should disconnect after finishing reading the stream.
+     * Queries the connected whois server for information regarding
+     * the given handle and returns the InputStream of the network connection.
+     * It is up to the programmer to be familiar with the handle syntax
+     * of the whois server.  You must first connect to a finger server before
+     * calling this method, and you should disconnect after finishing reading
+     * the stream.
@@ -72,3 +81,4 @@ public final class WhoisClient extends FingerClient {
-     * @param handle The handle to lookup.
-     * @return The InputStream of the network connection of the whois query. Can be read to obtain whois results.
-     * @throws IOException If an I/O error occurs during the operation.
+     * @param handle  The handle to lookup.
+     * @return The InputStream of the network connection of the whois query.
+     *         Can be read to obtain whois results.
+     * @throws IOException  If an I/O error occurs during the operation.
@@ -76 +86,2 @@ public final class WhoisClient extends FingerClient {
-    public InputStream getInputStream(final String handle) throws IOException {
+    public InputStream getInputStream(final String handle) throws IOException
+    {
@@ -79,0 +91 @@ public final class WhoisClient extends FingerClient {
+
@@ -81,2 +93,4 @@ public final class WhoisClient extends FingerClient {
-     * Queries the connected whois server for information regarding the given handle. It is up to the programmer to be familiar with the handle syntax of the
-     * whois server. You must first connect to a whois server before calling this method, and you should disconnect afterward.
+     * Queries the connected whois server for information regarding
+     * the given handle.  It is up to the programmer to be familiar with the
+     * handle syntax of the whois server.  You must first connect to a whois
+     * server before calling this method, and you should disconnect afterward.
@@ -84 +98 @@ public final class WhoisClient extends FingerClient {
-     * @param handle The handle to lookup.
+     * @param handle  The handle to lookup.
@@ -86 +100 @@ public final class WhoisClient extends FingerClient {
-     * @throws IOException If an I/O error occurs during the operation.
+     * @throws IOException  If an I/O error occurs during the operation.
@@ -88 +102,2 @@ public final class WhoisClient extends FingerClient {
-    public String query(final String handle) throws IOException {
+    public String query(final String handle) throws IOException
+    {
@@ -92,0 +108 @@ public final class WhoisClient extends FingerClient {
+
diff --git a/src/test/java/org/apache/commons/net/SocketClientFunctionalTest.java b/src/test/java/org/apache/commons/net/SocketClientFunctionalTest.java
index 1030eaa3c..0936ac5f4 100644
--- a/src/test/java/org/apache/commons/net/SocketClientFunctionalTest.java
+++ b/src/test/java/org/apache/commons/net/SocketClientFunctionalTest.java
@@ -31 +31,2 @@ import junit.framework.TestCase;
-public class SocketClientFunctionalTest extends TestCase {
+public class SocketClientFunctionalTest extends TestCase
+{
@@ -41 +41,0 @@ public class SocketClientFunctionalTest extends TestCase {
-     *
@@ -44 +44,2 @@ public class SocketClientFunctionalTest extends TestCase {
-    public SocketClientFunctionalTest(final String name) {
+    public SocketClientFunctionalTest(final String name)
+    {
@@ -50 +50,0 @@ public class SocketClientFunctionalTest extends TestCase {
-     *
@@ -53 +53,2 @@ public class SocketClientFunctionalTest extends TestCase {
-    public void testProxySettings() throws Exception {
+    public void testProxySettings() throws Exception
+    {
@@ -61,0 +63 @@ public class SocketClientFunctionalTest extends TestCase {
+
diff --git a/src/test/java/org/apache/commons/net/SocketClientTest.java b/src/test/java/org/apache/commons/net/SocketClientTest.java
index 0f3f9253c..52ad58778 100644
--- a/src/test/java/org/apache/commons/net/SocketClientTest.java
+++ b/src/test/java/org/apache/commons/net/SocketClientTest.java
@@ -31 +31,2 @@ import junit.framework.TestCase;
-public class SocketClientTest extends TestCase {
+public class SocketClientTest extends TestCase
+{
@@ -38 +39,2 @@ public class SocketClientTest extends TestCase {
-    public void testProxySettings() {
+    public void testProxySettings()
+    {
diff --git a/src/test/java/org/apache/commons/net/SubnetUtilsTest.java b/src/test/java/org/apache/commons/net/SubnetUtilsTest.java
index e60b264ed..a4715989d 100644
--- a/src/test/java/org/apache/commons/net/SubnetUtilsTest.java
+++ b/src/test/java/org/apache/commons/net/SubnetUtilsTest.java
@@ -255,2 +255,2 @@ public class SubnetUtilsTest extends TestCase {
-        assertEquals("0.0.0.0", info.getNetworkAddress());
-        assertEquals("255.255.255.255", info.getBroadcastAddress());
+        assertEquals("0.0.0.0",info.getNetworkAddress());
+        assertEquals("255.255.255.255",info.getBroadcastAddress());
@@ -296,2 +296,2 @@ public class SubnetUtilsTest extends TestCase {
-        new SubnetUtils("0.0.0.0", "0.0.0.0");
-        new SubnetUtils("0.0.0.0", "128.0.0.0");
+        new SubnetUtils("0.0.0.0","0.0.0.0");
+        new SubnetUtils("0.0.0.0","128.0.0.0");
@@ -299 +299 @@ public class SubnetUtilsTest extends TestCase {
-            new SubnetUtils("0.0.0.0", "64.0.0.0");
+            new SubnetUtils("0.0.0.0","64.0.0.0");
@@ -305 +305 @@ public class SubnetUtilsTest extends TestCase {
-            new SubnetUtils("0.0.0.0", "0.0.0.1");
+            new SubnetUtils("0.0.0.0","0.0.0.1");
@@ -342 +342,2 @@ public class SubnetUtilsTest extends TestCase {
-        final String bcastAddresses[] = { "192.255.255.255", "192.168.255.255", "192.168.0.255", "192.168.0.7" };
+        final String bcastAddresses[] = { "192.255.255.255", "192.168.255.255", "192.168.0.255",
+                "192.168.0.7" };
@@ -344,3 +345,6 @@ public class SubnetUtilsTest extends TestCase {
-        final String highAddresses[] = { "192.255.255.254", "192.168.255.254", "192.168.0.254", "192.168.0.6" };
-        final String nextAddresses[] = { "192.168.0.2", "192.168.0.2", "192.168.0.2", "192.168.0.2" };
-        final String previousAddresses[] = { "192.168.0.0", "192.168.0.0", "192.168.0.0", "192.168.0.0" };
+        final String highAddresses[] = { "192.255.255.254", "192.168.255.254", "192.168.0.254",
+                "192.168.0.6" };
+        final String nextAddresses[] = { "192.168.0.2", "192.168.0.2", "192.168.0.2",
+                "192.168.0.2" };
+        final String previousAddresses[] = { "192.168.0.0", "192.168.0.0", "192.168.0.0",
+                "192.168.0.0" };
@@ -348 +352,2 @@ public class SubnetUtilsTest extends TestCase {
-        final String cidrSignatures[] = { "192.168.0.1/8", "192.168.0.1/16", "192.168.0.1/24", "192.168.0.1/29" };
+        final String cidrSignatures[] = { "192.168.0.1/8", "192.168.0.1/16", "192.168.0.1/24",
+                "192.168.0.1/29" };
diff --git a/src/test/java/org/apache/commons/net/examples/MainTest.java b/src/test/java/org/apache/commons/net/examples/MainTest.java
index e8701b11e..ca27fed9b 100644
--- a/src/test/java/org/apache/commons/net/examples/MainTest.java
+++ b/src/test/java/org/apache/commons/net/examples/MainTest.java
@@ -55,3 +55,5 @@ public class MainTest {
-        if (!name.endsWith(".class") || name.contains("$") // subclasses
-                || name.endsWith("examples.Main.class") // the initial class, don't want to add that
-                || !hasMainMethod(name)) {
+        if (!name.endsWith(".class")
+                || name.contains("$") // subclasses
+                || name.endsWith("examples.Main.class")  // the initial class, don't want to add that
+                || !hasMainMethod(name)
+                ) {
@@ -62 +64 @@ public class MainTest {
-        final String alias = name.substring(lastSep + 1);
+        final String alias = name.substring(lastSep+1);
@@ -64 +66 @@ public class MainTest {
-            System.out.printf("Duplicate alias: %-25s %s %s %n", alias, name, p.getProperty(alias));
+            System.out.printf("Duplicate alias: %-25s %s %s %n",alias,name,p.getProperty(alias));
@@ -92 +94 @@ public class MainTest {
-        while (propertyNames.hasMoreElements()) {
+        while(propertyNames.hasMoreElements()){
@@ -97 +99 @@ public class MainTest {
-                System.out.printf("%-25s %s - missing from examples.properties%n", c, cv);
+                System.out.printf("%-25s %s - missing from examples.properties%n",c,cv);
@@ -99 +101 @@ public class MainTest {
-                System.out.printf("%-25s %s - expected value %s %n", c, fv, cv);
+                System.out.printf("%-25s %s - expected value %s %n",c,fv,cv);
@@ -108 +110 @@ public class MainTest {
-        final String sourceFile = new File(URLDecoder.decode(codeSource.getLocation().getFile(), "UTF-8")).getCanonicalPath();
+        final String sourceFile = new File(URLDecoder.decode(codeSource.getLocation().getFile(),"UTF-8")).getCanonicalPath();
diff --git a/src/test/java/org/apache/commons/net/ftp/FTPClientConfigFunctionalTest.java b/src/test/java/org/apache/commons/net/ftp/FTPClientConfigFunctionalTest.java
index 8306c8368..bb549c0ae 100644
--- a/src/test/java/org/apache/commons/net/ftp/FTPClientConfigFunctionalTest.java
+++ b/src/test/java/org/apache/commons/net/ftp/FTPClientConfigFunctionalTest.java
@@ -28,2 +28,4 @@ import junit.framework.TestCase;
- * This test was contributed in a different form by W. McDonald Buck of Boulder, Colorado, to help fix some bugs with the FTPClientConfig in a real world
- * setting. It is a perfect functional test for the Time Zone functionality of FTPClientConfig.
+ * This test was contributed in a different form by W. McDonald Buck
+ * of Boulder, Colorado, to help fix some bugs with the FTPClientConfig
+ * in a real world setting.  It is a perfect functional test for the
+ * Time Zone functionality of FTPClientConfig.
@@ -31,3 +33,7 @@ import junit.framework.TestCase;
- * A publicly accessible FTP server at the US National Oceanographic and Atmospheric Adminstration houses a directory which contains 300 files, named sn.0000 to
- * sn.0300. Every ten minutes or so the next file in sequence is rewritten with new data. Thus the directory contains observations for more than 24 hours of
- * data. Since the server has its clock set to GMT this is an excellent functional test for any machine in a different time zone.
+ * A publicly accessible FTP server at the US National Oceanographic and
+ * Atmospheric Adminstration houses a directory which contains
+ * 300 files, named sn.0000 to sn.0300. Every ten minutes or so
+ * the next file in sequence is rewritten with new data. Thus the directory
+ * contains observations for more than 24 hours of data.  Since the server
+ * has its clock set to GMT this is an excellent functional test for any
+ * machine in a different time zone.
@@ -35,3 +41,7 @@ import junit.framework.TestCase;
- * Noteworthy is the fact that the FTP routines in some web browsers don't work as well as this. They can't, since they have no way of knowing the server's time
- * zone. Depending on the local machine's position relative to GMT and the time of day, the browsers may decide that a timestamp would be in the future if given
- * the current year, so they assume the year to be last year. This illustrates the value of FTPClientConfig's time zone functionality.
+ * Noteworthy is the fact that the FTP routines in some web browsers don't
+ * work as well as this.  They can't, since they have no way of knowing the
+ * server's time zone.  Depending on the local machine's position relative
+ * to GMT and the time of day, the browsers may decide that a timestamp
+ * would be in the  future if given the current year, so they assume the
+ * year to be  last year.  This illustrates the value of FTPClientConfig's
+ * time zone functionality.
@@ -43,0 +54 @@ public class FTPClientConfigFunctionalTest extends TestCase {
+
@@ -83 +94 @@ public class FTPClientConfigFunctionalTest extends TestCase {
-            ftpClient.login("anonymous", "testing@apache.org");
+            ftpClient.login("anonymous","testing@apache.org");
@@ -105 +116 @@ public class FTPClientConfigFunctionalTest extends TestCase {
-        // SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm z" );
+        //SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm z" );
@@ -112,2 +123,2 @@ public class FTPClientConfigFunctionalTest extends TestCase {
-            // System.out.println(sdf.format(thisFile.getTimestamp().getTime())
-            // + " " +thisFile.getName());
+            //System.out.println(sdf.format(thisFile.getTimestamp().getTime())
+            //        + " " +thisFile.getName());
@@ -122 +133 @@ public class FTPClientConfigFunctionalTest extends TestCase {
-        if (firstFile == null || lastFile == null) {
+        if (firstFile == null || lastFile == null)  {
@@ -137,2 +148,4 @@ public class FTPClientConfigFunctionalTest extends TestCase {
-            assertTrue(lastFile.getTimestamp().getTime() + " before " + firstCal.getTime(), lastFile.getTimestamp().before(firstCal));
-            assertTrue(lastFile.getTimestampInstant() + " before " + firstInstant, lastFile.getTimestampInstant().isBefore(firstInstant));
+            assertTrue(lastFile.getTimestamp().getTime() + " before " + firstCal.getTime(),
+                lastFile.getTimestamp().before(firstCal));
+            assertTrue(lastFile.getTimestampInstant() + " before " + firstInstant,
+                lastFile.getTimestampInstant().isBefore(firstInstant));
@@ -141,0 +155,4 @@ public class FTPClientConfigFunctionalTest extends TestCase {
+
+
+
+
diff --git a/src/test/java/org/apache/commons/net/ftp/FTPClientConfigTest.java b/src/test/java/org/apache/commons/net/ftp/FTPClientConfigTest.java
index 0ba88105b..473db8f62 100644
--- a/src/test/java/org/apache/commons/net/ftp/FTPClientConfigTest.java
+++ b/src/test/java/org/apache/commons/net/ftp/FTPClientConfigTest.java
@@ -38 +38,2 @@ public class FTPClientConfigTest extends TestCase {
-    private static final String tooLong = "jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|jan";
+    private static final String tooLong =  "jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|jan";
+
@@ -42 +42,0 @@ public class FTPClientConfigTest extends TestCase {
-
@@ -55 +54,0 @@ public class FTPClientConfigTest extends TestCase {
-
@@ -60 +59 @@ public class FTPClientConfigTest extends TestCase {
-        final FTPClientConfig conf = new FTPClientConfig(A, B, C, D, E, F);
+        final FTPClientConfig conf = new FTPClientConfig(A,B,C,D,E,F);
@@ -75 +74 @@ public class FTPClientConfigTest extends TestCase {
-        } catch (final IllegalArgumentException e) {
+        } catch (final IllegalArgumentException e){
@@ -81 +80 @@ public class FTPClientConfigTest extends TestCase {
-        } catch (final IllegalArgumentException e) {
+        } catch (final IllegalArgumentException e){
@@ -87 +86 @@ public class FTPClientConfigTest extends TestCase {
-        } catch (final IllegalArgumentException e) {
+        } catch (final IllegalArgumentException e){
@@ -93 +92 @@ public class FTPClientConfigTest extends TestCase {
-        } catch (final Exception e) {
+        } catch (final Exception e){
@@ -96 +95,2 @@ public class FTPClientConfigTest extends TestCase {
-        final SimpleDateFormat sdf1 = new SimpleDateFormat("MMM dd, yyyy", Locale.ENGLISH);
+        final SimpleDateFormat sdf1 =
+            new SimpleDateFormat("MMM dd, yyyy", Locale.ENGLISH);
@@ -112 +112 @@ public class FTPClientConfigTest extends TestCase {
-        assertEquals("different.parser.same.date", d1, d2);
+        assertEquals("different.parser.same.date",d1, d2);
@@ -126,0 +127 @@ public class FTPClientConfigTest extends TestCase {
+
@@ -137,0 +139 @@ public class FTPClientConfigTest extends TestCase {
+
@@ -140 +142 @@ public class FTPClientConfigTest extends TestCase {
-        } catch (final IllegalArgumentException e) {
+        } catch (final IllegalArgumentException e){
@@ -146 +148 @@ public class FTPClientConfigTest extends TestCase {
-        } catch (final IllegalArgumentException e) {
+        } catch (final IllegalArgumentException e){
@@ -152 +154 @@ public class FTPClientConfigTest extends TestCase {
-        } catch (final IllegalArgumentException e) {
+        } catch (final IllegalArgumentException e){
@@ -157 +159 @@ public class FTPClientConfigTest extends TestCase {
-        } catch (final IllegalArgumentException e) {
+        } catch (final IllegalArgumentException e){
@@ -161 +163 @@ public class FTPClientConfigTest extends TestCase {
-        assertEquals(dfs3, dfs4);
+        assertEquals(dfs3,dfs4);
diff --git a/src/test/java/org/apache/commons/net/ftp/FTPClientTest.java b/src/test/java/org/apache/commons/net/ftp/FTPClientTest.java
index fe8bfe0d0..334580633 100644
--- a/src/test/java/org/apache/commons/net/ftp/FTPClientTest.java
+++ b/src/test/java/org/apache/commons/net/ftp/FTPClientTest.java
@@ -64 +64,3 @@ public class FTPClientTest extends TestCase {
-    private static final String[] TESTS = { "257 /path/without/quotes", "/path/without/quotes",
+    private static final String[] TESTS = {
+        "257 /path/without/quotes",
+            "/path/without/quotes",
@@ -66 +68,2 @@ public class FTPClientTest extends TestCase {
-            "257 \"/path/with/delimiting/quotes/without/commentary\"", "/path/with/delimiting/quotes/without/commentary",
+        "257 \"/path/with/delimiting/quotes/without/commentary\"",
+              "/path/with/delimiting/quotes/without/commentary",
@@ -68 +71,2 @@ public class FTPClientTest extends TestCase {
-            "257 \"/path/with/quotes\"\" /inside/but/without/commentary\"", "/path/with/quotes\" /inside/but/without/commentary",
+        "257 \"/path/with/quotes\"\" /inside/but/without/commentary\"",
+              "/path/with/quotes\" /inside/but/without/commentary",
@@ -70 +74,2 @@ public class FTPClientTest extends TestCase {
-            "257 \"/path/with/quotes\"\" /inside/string\" and with commentary", "/path/with/quotes\" /inside/string",
+        "257 \"/path/with/quotes\"\" /inside/string\" and with commentary",
+              "/path/with/quotes\" /inside/string",
@@ -72 +77,2 @@ public class FTPClientTest extends TestCase {
-            "257 \"/path/with/quotes\"\" /inside/string\" and with commentary that also \"contains quotes\"", "/path/with/quotes\" /inside/string",
+        "257 \"/path/with/quotes\"\" /inside/string\" and with commentary that also \"contains quotes\"",
+              "/path/with/quotes\" /inside/string",
@@ -74 +80 @@ public class FTPClientTest extends TestCase {
-            "257 \"/path/without/trailing/quote", // invalid syntax, return all after reply code prefix
+        "257 \"/path/without/trailing/quote", // invalid syntax, return all after reply code prefix
@@ -77 +83 @@ public class FTPClientTest extends TestCase {
-            "257 root is current directory.", // NET-442
+        "257 root is current directory.", // NET-442
@@ -80,2 +86,3 @@ public class FTPClientTest extends TestCase {
-            "257 \"/\"", // NET-502
-            "/", };
+        "257 \"/\"", // NET-502
+              "/",
+    };
@@ -114,0 +122 @@ public class FTPClientTest extends TestCase {
+
@@ -204 +212 @@ public class FTPClientTest extends TestCase {
-        baos.write(new byte[] { '\r', '\n' });
+        baos.write(new byte[]{'\r','\n'});
@@ -206 +214 @@ public class FTPClientTest extends TestCase {
-        baos.write(new byte[] { '\r', '\n' });
+        baos.write(new byte[]{'\r','\n'});
@@ -215 +223 @@ public class FTPClientTest extends TestCase {
-        engine = new FTPListParseEngine(parser, config);
+        engine = new FTPListParseEngine(parser, config );
@@ -220 +228 @@ public class FTPClientTest extends TestCase {
-}
+ }
diff --git a/src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java b/src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java
index ba83b7426..d2e4827c0 100644
--- a/src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java
+++ b/src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java
@@ -91 +90,0 @@ public class FTPSClientTest {
-
@@ -93,3 +92 @@ public class FTPSClientTest {
-        if (TRACE_CALLS) {
-            System.err.println(msg + " " + (System.nanoTime() - startTime));
-        }
+        if (TRACE_CALLS) System.err.println(msg + " " + (System.nanoTime() - startTime));
@@ -160 +157 @@ public class FTPSClientTest {
-        return new Boolean[] { Boolean.FALSE, Boolean.TRUE };
+        return new Boolean[] {Boolean.FALSE, Boolean.TRUE};
@@ -177,3 +174 @@ public class FTPSClientTest {
-        if (ADD_LISTENER) {
-            client.addProtocolCommandListener(new PrintCommandListener(System.err));
-        }
+        if (ADD_LISTENER) client.addProtocolCommandListener(new PrintCommandListener(System.err));
@@ -206,2 +201 @@ public class FTPSClientTest {
-        } catch (InterruptedException e) {
-        }
+        } catch (InterruptedException e) {}
diff --git a/src/test/java/org/apache/commons/net/ftp/ListingFunctionalTest.java b/src/test/java/org/apache/commons/net/ftp/ListingFunctionalTest.java
index 28b3b29f9..d51a90edd 100644
--- a/src/test/java/org/apache/commons/net/ftp/ListingFunctionalTest.java
+++ b/src/test/java/org/apache/commons/net/ftp/ListingFunctionalTest.java
@@ -18 +17,0 @@ package org.apache.commons.net.ftp;
-
@@ -34 +33,2 @@ import junit.framework.TestSuite;
-public class ListingFunctionalTest extends TestCase {
+public class ListingFunctionalTest extends TestCase
+{
@@ -44,3 +44,16 @@ public class ListingFunctionalTest extends TestCase {
-    public static final Test suite() {
-        final String[][] testData = { { "ftp.ibiblio.org", "unix", "vms", "HA!", "javaio.jar", "pub/languages/java/javafaq", "/pub/languages/java/javafaq", },
-                { "apache.cs.utah.edu", "unix", "vms", "HA!", "HEADER.html", "apache.org", "/apache.org", },
+    public static final Test suite()
+    {
+        final String[][] testData =
+            {
+                {
+                    "ftp.ibiblio.org", "unix", "vms",
+                    "HA!", "javaio.jar",
+                    "pub/languages/java/javafaq",
+                    "/pub/languages/java/javafaq",
+                },
+                {
+                    "apache.cs.utah.edu", "unix", "vms",
+                    "HA!", "HEADER.html",
+                    "apache.org",
+                    "/apache.org",
+                },
@@ -51,2 +64,6 @@ public class ListingFunctionalTest extends TestCase {
-                { "ftp.decuslib.com", "vms", "windows", // VMS OpenVMS V8.3
-                        "[.HA!]", "FREEWARE_SUBMISSION_INSTRUCTIONS.TXT;1", "[.FREEWAREV80.FREEWARE]", "DECUSLIB:[DECUS.FREEWAREV80.FREEWARE]" },
+                {
+                    "ftp.decuslib.com", "vms", "windows", // VMS OpenVMS V8.3
+                    "[.HA!]", "FREEWARE_SUBMISSION_INSTRUCTIONS.TXT;1",
+                    "[.FREEWAREV80.FREEWARE]",
+                    "DECUSLIB:[DECUS.FREEWAREV80.FREEWARE]"
+                },
@@ -58 +75 @@ public class ListingFunctionalTest extends TestCase {
-        };
+            };
@@ -63,2 +80,3 @@ public class ListingFunctionalTest extends TestCase {
-        for (final String[] element : testData) {
-            final TestSuite suite = new TestSuite(element[VALID_PARSERKEY] + " @ " + element[HOSTNAME]);
+        for (final String[] element : testData)
+        {
+            final TestSuite suite = new TestSuite(element[VALID_PARSERKEY]+ " @ " +element[HOSTNAME]);
@@ -66,2 +84,4 @@ public class ListingFunctionalTest extends TestCase {
-            for (final Method method : methods) {
-                if (method.getName().startsWith("test")) {
+            for (final Method method : methods)
+            {
+                if (method.getName().startsWith("test"))
+                {
@@ -87 +107,2 @@ public class ListingFunctionalTest extends TestCase {
-    public ListingFunctionalTest(final String arg0, final String[] settings) {
+    public ListingFunctionalTest(final String arg0, final String[] settings)
+    {
@@ -98 +119,2 @@ public class ListingFunctionalTest extends TestCase {
-    private boolean findByName(final List<?> fileList, final String string) {
+    private boolean findByName(final List<?> fileList, final String string)
+    {
@@ -102 +124,2 @@ public class ListingFunctionalTest extends TestCase {
-        while (iter.hasNext() && !found) {
+        while (iter.hasNext() && !found)
+        {
@@ -105 +128,2 @@ public class ListingFunctionalTest extends TestCase {
-            if (element instanceof FTPFile) {
+            if (element instanceof FTPFile)
+            {
@@ -109 +133,3 @@ public class ListingFunctionalTest extends TestCase {
-            } else {
+            }
+            else
+            {
@@ -123 +149,2 @@ public class ListingFunctionalTest extends TestCase {
-    protected void setUp() throws Exception {
+    protected void setUp() throws Exception
+    {
@@ -136,2 +163,5 @@ public class ListingFunctionalTest extends TestCase {
-    protected void tearDown() throws Exception {
-        try {
+    protected void tearDown()
+        throws Exception
+    {
+        try
+        {
@@ -139 +169,3 @@ public class ListingFunctionalTest extends TestCase {
-        } catch (final IOException e) {
+        }
+        catch (final IOException e)
+        {
@@ -143 +175,2 @@ public class ListingFunctionalTest extends TestCase {
-        if (client.isConnected()) {
+        if (client.isConnected())
+        {
@@ -154 +187,3 @@ public class ListingFunctionalTest extends TestCase {
-    public void testInitiateListParsing() throws IOException {
+    public void testInitiateListParsing()
+        throws IOException
+    {
@@ -166,2 +201,5 @@ public class ListingFunctionalTest extends TestCase {
-    public void testInitiateListParsingWithPath() throws IOException {
-        final FTPListParseEngine engine = client.initiateListParsing(validParserKey, validPath);
+    public void testInitiateListParsingWithPath()
+        throws IOException
+    {
+        final FTPListParseEngine engine = client.initiateListParsing(validParserKey,
+                                                               validPath);
@@ -176 +214,3 @@ public class ListingFunctionalTest extends TestCase {
-    public void testInitiateListParsingWithPathAndAutodetection() throws IOException {
+    public void testInitiateListParsingWithPathAndAutodetection()
+        throws IOException
+    {
@@ -186 +226,3 @@ public class ListingFunctionalTest extends TestCase {
-    public void testInitiateListParsingWithPathAndAutodetectionButEmpty() throws IOException {
+    public void testInitiateListParsingWithPathAndAutodetectionButEmpty()
+        throws IOException
+    {
@@ -195,2 +237,5 @@ public class ListingFunctionalTest extends TestCase {
-    public void testInitiateListParsingWithPathAndIncorrectParser() throws IOException {
-        final FTPListParseEngine engine = client.initiateListParsing(invalidParserKey, invalidPath);
+    public void testInitiateListParsingWithPathAndIncorrectParser()
+        throws IOException
+    {
+        final FTPListParseEngine engine = client.initiateListParsing(invalidParserKey,
+                                                               invalidPath);
@@ -204 +249,3 @@ public class ListingFunctionalTest extends TestCase {
-    public void testListFiles() throws IOException {
+    public void testListFiles()
+        throws IOException
+    {
@@ -209 +256,2 @@ public class ListingFunctionalTest extends TestCase {
-        assertTrue(files.toString(), findByName(files, validFilename));
+        assertTrue(files.toString(),
+                   findByName(files, validFilename));
@@ -212 +260,3 @@ public class ListingFunctionalTest extends TestCase {
-    public void testListFilesWithAutodection() throws IOException {
+    public void testListFilesWithAutodection()
+        throws IOException
+    {
@@ -217 +267,2 @@ public class ListingFunctionalTest extends TestCase {
-        assertTrue(files.toString(), findByName(files, validFilename));
+        assertTrue(files.toString(),
+                   findByName(files, validFilename));
@@ -223 +274,3 @@ public class ListingFunctionalTest extends TestCase {
-    public void testListFilesWithIncorrectParser() throws IOException {
+    public void testListFilesWithIncorrectParser()
+        throws IOException
+    {
@@ -232 +285 @@ public class ListingFunctionalTest extends TestCase {
-        assertArrayEquals("Expected empty array: " + Arrays.toString(files), new FTPFile[] {}, files);
+        assertArrayEquals("Expected empty array: " + Arrays.toString(files), new FTPFile[]{}, files);
@@ -238 +291,3 @@ public class ListingFunctionalTest extends TestCase {
-    public void testListFilesWithPathAndAutodectionButEmpty() throws IOException {
+    public void testListFilesWithPathAndAutodectionButEmpty()
+        throws IOException
+    {
@@ -247 +302,3 @@ public class ListingFunctionalTest extends TestCase {
-    public void testListFilesWithPathAndAutodetection() throws IOException {
+    public void testListFilesWithPathAndAutodetection()
+        throws IOException
+    {
@@ -250 +307,2 @@ public class ListingFunctionalTest extends TestCase {
-        assertTrue(files.toString(), findByName(files, validFilename));
+        assertTrue(files.toString(),
+                   findByName(files, validFilename));
@@ -256 +314,3 @@ public class ListingFunctionalTest extends TestCase {
-    public void testListNames() throws IOException {
+    public void testListNames()
+        throws IOException
+    {
@@ -271 +331,3 @@ public class ListingFunctionalTest extends TestCase {
-    public void testListNamesWithPath() throws IOException {
+    public void testListNamesWithPath()
+        throws IOException
+    {
@@ -279 +341,3 @@ public class ListingFunctionalTest extends TestCase {
-    public void testListNamesWithPathButEmpty() throws IOException {
+    public void testListNamesWithPathButEmpty()
+        throws IOException
+    {
@@ -285 +349,3 @@ public class ListingFunctionalTest extends TestCase {
-    public void testPrintWorkingDirectory() throws IOException {
+    public void testPrintWorkingDirectory()
+            throws IOException
+    {
diff --git a/src/test/java/org/apache/commons/net/ftp/parser/CompositeFTPParseTestFramework.java b/src/test/java/org/apache/commons/net/ftp/parser/CompositeFTPParseTestFramework.java
index 59e9723d7..f66323dbe 100644
--- a/src/test/java/org/apache/commons/net/ftp/parser/CompositeFTPParseTestFramework.java
+++ b/src/test/java/org/apache/commons/net/ftp/parser/CompositeFTPParseTestFramework.java
@@ -24,2 +24,4 @@ import org.apache.commons.net.ftp.FTPFileEntryParser;
-public abstract class CompositeFTPParseTestFramework extends FTPParseTestFramework {
-    public CompositeFTPParseTestFramework(final String name) {
+public abstract class CompositeFTPParseTestFramework extends FTPParseTestFramework
+{
+    public CompositeFTPParseTestFramework(final String name)
+    {
@@ -30 +32,2 @@ public abstract class CompositeFTPParseTestFramework extends FTPParseTestFramewo
-    protected String[] getBadListing() {
+    protected String[] getBadListing()
+    {
@@ -35 +38,3 @@ public abstract class CompositeFTPParseTestFramework extends FTPParseTestFramewo
-     * Method getBadListing. Implementors must provide multiple listing that contains failures and must force the composite parser to switch the FtpEntryParser
+     * Method getBadListing.
+     * Implementors must provide multiple listing that contains failures and
+     * must force the composite parser to switch the FtpEntryParser
@@ -42 +47,2 @@ public abstract class CompositeFTPParseTestFramework extends FTPParseTestFramewo
-    protected String[] getGoodListing() {
+    protected String[] getGoodListing()
+    {
@@ -47 +53,3 @@ public abstract class CompositeFTPParseTestFramework extends FTPParseTestFramewo
-     * Method getGoodListing. Implementors must provide multiple listing that passes and must force the composite parser to switch the FtpEntryParser
+     * Method getGoodListing.
+     * Implementors must provide multiple listing that passes and
+     * must force the composite parser to switch the FtpEntryParser
@@ -53,3 +61 @@ public abstract class CompositeFTPParseTestFramework extends FTPParseTestFramewo
-    /*
-     * (non-Javadoc)
-     *
+    /* (non-Javadoc)
@@ -59 +65,2 @@ public abstract class CompositeFTPParseTestFramework extends FTPParseTestFramewo
-    public void testBadListing() {
+    public void testBadListing()
+    {
@@ -62 +69,2 @@ public abstract class CompositeFTPParseTestFramework extends FTPParseTestFramewo
-        for (final String[] badsample : badsamples) {
+        for (final String[] badsample : badsamples)
+        {
@@ -66 +74,2 @@ public abstract class CompositeFTPParseTestFramework extends FTPParseTestFramewo
-                assertNull("Should have Failed to parse " + test, nullFileOrNullDate(f));
+                assertNull("Should have Failed to parse " + test,
+                        nullFileOrNullDate(f));
@@ -73,3 +82 @@ public abstract class CompositeFTPParseTestFramework extends FTPParseTestFramewo
-    /*
-     * (non-Javadoc)
-     *
+    /* (non-Javadoc)
@@ -78 +85,2 @@ public abstract class CompositeFTPParseTestFramework extends FTPParseTestFramewo
-    public void testConsistentListing() {
+    public void testConsistentListing()
+    {
@@ -81 +89,2 @@ public abstract class CompositeFTPParseTestFramework extends FTPParseTestFramewo
-        for (final String[] goodsample : goodsamples) {
+        for (final String[] goodsample : goodsamples)
+        {
@@ -85 +94,2 @@ public abstract class CompositeFTPParseTestFramework extends FTPParseTestFramewo
-                assertNotNull("Failed to parse " + test, f);
+                assertNotNull("Failed to parse " + test,
+                        f);
@@ -95 +105,2 @@ public abstract class CompositeFTPParseTestFramework extends FTPParseTestFramewo
-    public void testInconsistentListing() {
+    public void testInconsistentListing()
+    {
@@ -100 +111,2 @@ public abstract class CompositeFTPParseTestFramework extends FTPParseTestFramewo
-        for (int i = 0; i < goodsamples.length; i++) {
+        for (int i = 0; i < goodsamples.length; i++)
+        {
@@ -104 +116,2 @@ public abstract class CompositeFTPParseTestFramework extends FTPParseTestFramewo
-            switch (i) {
+            switch (i)
+            {
diff --git a/src/test/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactoryTest.java b/src/test/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactoryTest.java
index 60023143a..d16c5d976 100644
--- a/src/test/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactoryTest.java
+++ b/src/test/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactoryTest.java
@@ -18 +17,0 @@ package org.apache.commons.net.ftp.parser;
-
@@ -24,2 +23,4 @@ import junit.framework.TestCase;
-public class DefaultFTPFileEntryParserFactoryTest extends TestCase {
-    private void checkParserClass(final FTPFileEntryParserFactory fact, final String key, final Class<?> expected) {
+
+public class DefaultFTPFileEntryParserFactoryTest extends TestCase
+{
+    private void checkParserClass(final FTPFileEntryParserFactory fact, final String key, final Class<?> expected){
@@ -29 +30,2 @@ public class DefaultFTPFileEntryParserFactoryTest extends TestCase {
-        assertTrue("Expected " + expected.getCanonicalName() + " got " + parser.getClass().getCanonicalName(), expected.isInstance(parser));
+        assertTrue("Expected "+expected.getCanonicalName()+" got "+parser.getClass().getCanonicalName(),
+                expected.isInstance(parser));
@@ -33 +35,2 @@ public class DefaultFTPFileEntryParserFactoryTest extends TestCase {
-        final DefaultFTPFileEntryParserFactory factory = new DefaultFTPFileEntryParserFactory();
+        final DefaultFTPFileEntryParserFactory factory =
+            new DefaultFTPFileEntryParserFactory();
@@ -40 +43 @@ public class DefaultFTPFileEntryParserFactoryTest extends TestCase {
-        assertFalse(((UnixFTPEntryParser) parser).trimLeadingSpaces);
+        assertFalse(((UnixFTPEntryParser)parser).trimLeadingSpaces);
@@ -44 +47 @@ public class DefaultFTPFileEntryParserFactoryTest extends TestCase {
-        assertTrue(((UnixFTPEntryParser) parser).trimLeadingSpaces);
+        assertTrue(((UnixFTPEntryParser)parser).trimLeadingSpaces);
@@ -62 +65,2 @@ public class DefaultFTPFileEntryParserFactoryTest extends TestCase {
-            assertTrue(pie.getMessage() + "should contain 'Unknown parser type:'", pie.getMessage().contains("Unknown parser type:"));
+            assertTrue(pie.getMessage()+ "should contain 'Unknown parser type:'",
+                    pie.getMessage().contains("Unknown parser type:"));
@@ -92 +96,2 @@ public class DefaultFTPFileEntryParserFactoryTest extends TestCase {
-        parser = factory.createFileEntryParser("org.apache.commons.net.ftp.parser.OS2FTPEntryParser");
+        parser = factory.createFileEntryParser(
+            "org.apache.commons.net.ftp.parser.OS2FTPEntryParser");
@@ -96 +101,2 @@ public class DefaultFTPFileEntryParserFactoryTest extends TestCase {
-            factory.createFileEntryParser("org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory");
+            factory.createFileEntryParser(
+                "org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory");
@@ -107 +113 @@ public class DefaultFTPFileEntryParserFactoryTest extends TestCase {
-        } catch (final ParserInitializationException pie) {
+        } catch (final ParserInitializationException pie){
@@ -115 +121 @@ public class DefaultFTPFileEntryParserFactoryTest extends TestCase {
-        } catch (final ParserInitializationException pie) {
+        } catch (final ParserInitializationException pie){
@@ -120 +125,0 @@ public class DefaultFTPFileEntryParserFactoryTest extends TestCase {
-
@@ -122 +127,2 @@ public class DefaultFTPFileEntryParserFactoryTest extends TestCase {
-        final DefaultFTPFileEntryParserFactory factory = new DefaultFTPFileEntryParserFactory();
+        final DefaultFTPFileEntryParserFactory factory =
+            new DefaultFTPFileEntryParserFactory();
@@ -125 +131 @@ public class DefaultFTPFileEntryParserFactoryTest extends TestCase {
-            factory.createFileEntryParser((FTPClientConfig) null);
+            factory.createFileEntryParser((FTPClientConfig)null);
diff --git a/src/test/java/org/apache/commons/net/ftp/parser/DownloadListings.java b/src/test/java/org/apache/commons/net/ftp/parser/DownloadListings.java
index 1d354c7d9..dfb8f6e50 100644
--- a/src/test/java/org/apache/commons/net/ftp/parser/DownloadListings.java
+++ b/src/test/java/org/apache/commons/net/ftp/parser/DownloadListings.java
@@ -86 +85,0 @@ public class DownloadListings extends FTPClient {
-
@@ -99 +98 @@ public class DownloadListings extends FTPClient {
-        Util.copyStream(inputStream, outputStream);
+        Util.copyStream(inputStream, outputStream );
@@ -104 +103,2 @@ public class DownloadListings extends FTPClient {
-        if (!completePendingCommand()) {
+        if (!completePendingCommand())
+        {
@@ -116,3 +116,3 @@ public class DownloadListings extends FTPClient {
-    private boolean open(final String host, final int port) throws Exception {
-        System.out.println("Connecting to " + host);
-        out = new PrintWriter(new FileWriter(new File(DOWNLOAD_DIR, host + "_info.txt")));
+    private boolean open(final String host, final int port) throws Exception{
+        System.out.println("Connecting to "+host);
+        out = new PrintWriter(new FileWriter(new File(DOWNLOAD_DIR, host+"_info.txt")));
@@ -129 +129 @@ public class DownloadListings extends FTPClient {
-        System.out.println("Logging in to " + host);
+        System.out.println("Logging in to "+host);
diff --git a/src/test/java/org/apache/commons/net/ftp/parser/EnterpriseUnixFTPEntryParserTest.java b/src/test/java/org/apache/commons/net/ftp/parser/EnterpriseUnixFTPEntryParserTest.java
index 2d3b454f3..f60fb1d42 100644
--- a/src/test/java/org/apache/commons/net/ftp/parser/EnterpriseUnixFTPEntryParserTest.java
+++ b/src/test/java/org/apache/commons/net/ftp/parser/EnterpriseUnixFTPEntryParserTest.java
@@ -33 +33,2 @@ import org.apache.commons.net.ftp.FTPFileEntryParser;
-public class EnterpriseUnixFTPEntryParserTest extends FTPParseTestFramework {
+public class EnterpriseUnixFTPEntryParserTest extends FTPParseTestFramework
+{
@@ -35,16 +36,33 @@ public class EnterpriseUnixFTPEntryParserTest extends FTPParseTestFramework {
-    private static final String[] BADSAMPLES = { "zrwxr-xr-x   2 root     root         4096 Mar  2 15:13 zxbox",
-            "dxrwr-xr-x   2 root     root         4096 Aug 24  2001 zxjdbc", "drwxr-xr-x   2 root     root         4096 Jam  4 00:03 zziplib",
-            "drwxr-xr-x   2 root     99           4096 Feb 23 30:01 zzplayer", "drwxr-xr-x   2 root     root         4096 Aug 36  2001 zztpp",
-            "-rw-r--r--   1 14       staff       80284 Aug 22  zxJDBC-1.2.3.tar.gz", "-rw-r--r--   1 14       staff      119:26 Aug 22  2000 zxJDBC-1.2.3.zip",
-            "-rw-r--r--   1 ftp      no group    83853 Jan 22  2001 zxJDBC-1.2.4.tar.gz",
-            "-rw-r--r--   1ftp       nogroup    126552 Jan 22  2001 zxJDBC-1.2.4.zip",
-            "-rw-r--r--   1 root     root       111325 Apr -7 18:79 zxJDBC-2.0.1b1.tar.gz", "drwxr-xr-x   2 root     root         4096 Mar  2 15:13 zxbox",
-            "drwxr-xr-x 1 usernameftp 512 Jan 29 23:32 prog", "drwxr-xr-x   2 root     root         4096 Aug 24  2001 zxjdbc",
-            "drwxr-xr-x   2 root     root         4096 Jan  4 00:03 zziplib", "drwxr-xr-x   2 root     99           4096 Feb 23  2001 zzplayer",
-            "drwxr-xr-x   2 root     root         4096 Aug  6  2001 zztpp", "-rw-r--r--   1 14       staff       80284 Aug 22  2000 zxJDBC-1.2.3.tar.gz",
-            "-rw-r--r--   1 14       staff      119926 Aug 22  2000 zxJDBC-1.2.3.zip",
-            "-rw-r--r--   1 ftp      nogroup     83853 Jan 22  2001 zxJDBC-1.2.4.tar.gz",
-            "-rw-r--r--   1 ftp      nogroup    126552 Jan 22  2001 zxJDBC-1.2.4.zip",
-            "-rw-r--r--   1 root     root       111325 Apr 27  2001 zxJDBC-2.0.1b1.tar.gz",
-            "-rw-r--r--   1 root     root       190144 Apr 27  2001 zxJDBC-2.0.1b1.zip", "drwxr-xr-x   2 root     root         4096 Aug 26  20 zztpp",
-            "drwxr-xr-x   2 root     root         4096 Aug 26  201 zztpp", "drwxr-xr-x   2 root     root         4096 Aug 26  201O zztpp", // OH not zero
+    private static final String[] BADSAMPLES =
+    {
+        "zrwxr-xr-x   2 root     root         4096 Mar  2 15:13 zxbox",
+        "dxrwr-xr-x   2 root     root         4096 Aug 24  2001 zxjdbc",
+        "drwxr-xr-x   2 root     root         4096 Jam  4 00:03 zziplib",
+        "drwxr-xr-x   2 root     99           4096 Feb 23 30:01 zzplayer",
+        "drwxr-xr-x   2 root     root         4096 Aug 36  2001 zztpp",
+        "-rw-r--r--   1 14       staff       80284 Aug 22  zxJDBC-1.2.3.tar.gz",
+        "-rw-r--r--   1 14       staff      119:26 Aug 22  2000 zxJDBC-1.2.3.zip",
+        "-rw-r--r--   1 ftp      no group    83853 Jan 22  2001 zxJDBC-1.2.4.tar.gz",
+        "-rw-r--r--   1ftp       nogroup    126552 Jan 22  2001 zxJDBC-1.2.4.zip",
+        "-rw-r--r--   1 root     root       111325 Apr -7 18:79 zxJDBC-2.0.1b1.tar.gz",
+        "drwxr-xr-x   2 root     root         4096 Mar  2 15:13 zxbox",
+        "drwxr-xr-x 1 usernameftp 512 Jan 29 23:32 prog",
+        "drwxr-xr-x   2 root     root         4096 Aug 24  2001 zxjdbc",
+        "drwxr-xr-x   2 root     root         4096 Jan  4 00:03 zziplib",
+        "drwxr-xr-x   2 root     99           4096 Feb 23  2001 zzplayer",
+        "drwxr-xr-x   2 root     root         4096 Aug  6  2001 zztpp",
+        "-rw-r--r--   1 14       staff       80284 Aug 22  2000 zxJDBC-1.2.3.tar.gz",
+        "-rw-r--r--   1 14       staff      119926 Aug 22  2000 zxJDBC-1.2.3.zip",
+        "-rw-r--r--   1 ftp      nogroup     83853 Jan 22  2001 zxJDBC-1.2.4.tar.gz",
+        "-rw-r--r--   1 ftp      nogroup    126552 Jan 22  2001 zxJDBC-1.2.4.zip",
+        "-rw-r--r--   1 root     root       111325 Apr 27  2001 zxJDBC-2.0.1b1.tar.gz",
+        "-rw-r--r--   1 root     root       190144 Apr 27  2001 zxJDBC-2.0.1b1.zip",
+        "drwxr-xr-x   2 root     root         4096 Aug 26  20 zztpp",
+        "drwxr-xr-x   2 root     root         4096 Aug 26  201 zztpp",
+        "drwxr-xr-x   2 root     root         4096 Aug 26  201O zztpp", // OH not zero
+    };
+    private static final String[] GOODSAMPLES =
+    {
+        "-C--E-----FTP B QUA1I1      18128       41 Aug 12 13:56 QUADTEST",
+        "-C--E-----FTP A QUA1I1      18128       41 Aug 12 13:56 QUADTEST2",
+        "-C--E-----FTP A QUA1I1      18128       41 Apr 1 2014 QUADTEST3"
@@ -52,2 +69,0 @@ public class EnterpriseUnixFTPEntryParserTest extends FTPParseTestFramework {
-    private static final String[] GOODSAMPLES = { "-C--E-----FTP B QUA1I1      18128       41 Aug 12 13:56 QUADTEST",
-            "-C--E-----FTP A QUA1I1      18128       41 Aug 12 13:56 QUADTEST2", "-C--E-----FTP A QUA1I1      18128       41 Apr 1 2014 QUADTEST3" };
@@ -60 +76,2 @@ public class EnterpriseUnixFTPEntryParserTest extends FTPParseTestFramework {
-    public EnterpriseUnixFTPEntryParserTest(final String name) {
+    public EnterpriseUnixFTPEntryParserTest(final String name)
+    {
@@ -65 +82,2 @@ public class EnterpriseUnixFTPEntryParserTest extends FTPParseTestFramework {
-     * Method checkPermisions. Verify that the parser does NOT set the permissions.
+     * Method checkPermisions. Verify that the parser does NOT  set the
+     * permissions.
@@ -69,10 +87,29 @@ public class EnterpriseUnixFTPEntryParserTest extends FTPParseTestFramework {
-    private void checkPermisions(final FTPFile dir) {
-        assertFalse("Owner should not have read permission.", dir.hasPermission(FTPFile.USER_ACCESS, FTPFile.READ_PERMISSION));
-        assertFalse("Owner should not have write permission.", dir.hasPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION));
-        assertFalse("Owner should not have execute permission.", dir.hasPermission(FTPFile.USER_ACCESS, FTPFile.EXECUTE_PERMISSION));
-        assertFalse("Group should not have read permission.", dir.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.READ_PERMISSION));
-        assertFalse("Group should not have write permission.", dir.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.WRITE_PERMISSION));
-        assertFalse("Group should not have execute permission.", dir.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.EXECUTE_PERMISSION));
-        assertFalse("World should not have read permission.", dir.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.READ_PERMISSION));
-        assertFalse("World should not have write permission.", dir.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.WRITE_PERMISSION));
-        assertFalse("World should not have execute permission.", dir.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.EXECUTE_PERMISSION));
+    private void checkPermisions(final FTPFile dir)
+    {
+        assertFalse("Owner should not have read permission.",
+                   dir.hasPermission(FTPFile.USER_ACCESS,
+                                      FTPFile.READ_PERMISSION));
+        assertFalse("Owner should not have write permission.",
+                   dir.hasPermission(FTPFile.USER_ACCESS,
+                                      FTPFile.WRITE_PERMISSION));
+        assertFalse("Owner should not have execute permission.",
+                   dir.hasPermission(FTPFile.USER_ACCESS,
+                                      FTPFile.EXECUTE_PERMISSION));
+        assertFalse("Group should not have read permission.",
+                   dir.hasPermission(FTPFile.GROUP_ACCESS,
+                                      FTPFile.READ_PERMISSION));
+        assertFalse("Group should not have write permission.",
+                   dir.hasPermission(FTPFile.GROUP_ACCESS,
+                                      FTPFile.WRITE_PERMISSION));
+        assertFalse("Group should not have execute permission.",
+                   dir.hasPermission(FTPFile.GROUP_ACCESS,
+                                      FTPFile.EXECUTE_PERMISSION));
+        assertFalse("World should not have read permission.",
+                   dir.hasPermission(FTPFile.WORLD_ACCESS,
+                                      FTPFile.READ_PERMISSION));
+        assertFalse("World should not have write permission.",
+                   dir.hasPermission(FTPFile.WORLD_ACCESS,
+                                      FTPFile.WRITE_PERMISSION));
+        assertFalse("World should not have execute permission.",
+                   dir.hasPermission(FTPFile.WORLD_ACCESS,
+                                      FTPFile.EXECUTE_PERMISSION));
@@ -85 +122,2 @@ public class EnterpriseUnixFTPEntryParserTest extends FTPParseTestFramework {
-    protected String[] getBadListing() {
+    protected String[] getBadListing()
+    {
@@ -93 +131,2 @@ public class EnterpriseUnixFTPEntryParserTest extends FTPParseTestFramework {
-    protected String[] getGoodListing() {
+    protected String[] getGoodListing()
+    {
@@ -101 +140,2 @@ public class EnterpriseUnixFTPEntryParserTest extends FTPParseTestFramework {
-    protected FTPFileEntryParser getParser() {
+    protected FTPFileEntryParser getParser()
+    {
@@ -114 +154,2 @@ public class EnterpriseUnixFTPEntryParserTest extends FTPParseTestFramework {
-    public void testParseFieldsOnDirectory() throws Exception {
+    public void testParseFieldsOnDirectory() throws Exception
+    {
@@ -122 +163,2 @@ public class EnterpriseUnixFTPEntryParserTest extends FTPParseTestFramework {
-    public void testParseFieldsOnFile() throws Exception {
+    public void testParseFieldsOnFile() throws Exception
+    {
@@ -124 +166,2 @@ public class EnterpriseUnixFTPEntryParserTest extends FTPParseTestFramework {
-        final FTPFile ftpFile = getParser().parseFTPEntry("-C--E-----FTP B QUA1I1      18128       5000000000 Aug 12 13:56 QUADTEST");
+        final FTPFile ftpFile = getParser()
+            .parseFTPEntry("-C--E-----FTP B QUA1I1      18128       5000000000 Aug 12 13:56 QUADTEST");
diff --git a/src/test/java/org/apache/commons/net/ftp/parser/FTPConfigEntryParserTest.java b/src/test/java/org/apache/commons/net/ftp/parser/FTPConfigEntryParserTest.java
index 56a5869d2..3f12f4723 100644
--- a/src/test/java/org/apache/commons/net/ftp/parser/FTPConfigEntryParserTest.java
+++ b/src/test/java/org/apache/commons/net/ftp/parser/FTPConfigEntryParserTest.java
@@ -28,2 +28,3 @@ import junit.framework.TestCase;
- * This is a simple TestCase that tests entry parsing using the new FTPClientConfig mechanism. The normal FTPClient cannot handle the different date formats in
- * these entries, however using a configurable format, we can handle it easily.
+ * This is a simple TestCase that tests entry parsing using the new FTPClientConfig
+ * mechanism. The normal FTPClient cannot handle the different date formats in these
+ * entries, however using a configurable format, we can handle it easily.
@@ -39 +40,2 @@ public class FTPConfigEntryParserTest extends TestCase {
-     * This is a new format reported on the mailing lists. Parsing this kind of entry necessitated changing the regex in the parser.
+     * This is a new format reported on the mailing lists. Parsing this kind of
+     * entry necessitated changing the regex in the parser.
@@ -57,8 +59,16 @@ public class FTPConfigEntryParserTest extends TestCase {
-        assertTrue("Should have user write permission.", f.hasPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION));
-        assertTrue("Should have user execute permission.", f.hasPermission(FTPFile.USER_ACCESS, FTPFile.EXECUTE_PERMISSION));
-        assertTrue("Should have group read permission.", f.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.READ_PERMISSION));
-        assertTrue("Should have group write permission.", f.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.WRITE_PERMISSION));
-        assertTrue("Should have group execute permission.", f.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.EXECUTE_PERMISSION));
-        assertTrue("Should have world read permission.", f.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.READ_PERMISSION));
-        assertTrue("Should have world write permission.", f.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.WRITE_PERMISSION));
-        assertTrue("Should have world execute permission.", f.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.EXECUTE_PERMISSION));
+        assertTrue("Should have user write permission.",
+            f.hasPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION));
+        assertTrue("Should have user execute permission.",
+            f.hasPermission(FTPFile.USER_ACCESS, FTPFile.EXECUTE_PERMISSION));
+        assertTrue("Should have group read permission.",
+            f.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.READ_PERMISSION));
+        assertTrue("Should have group write permission.",
+            f.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.WRITE_PERMISSION));
+        assertTrue("Should have group execute permission.",
+            f.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.EXECUTE_PERMISSION));
+        assertTrue("Should have world read permission.",
+            f.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.READ_PERMISSION));
+        assertTrue("Should have world write permission.",
+            f.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.WRITE_PERMISSION));
+        assertTrue("Should have world execute permission.",
+            f.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.EXECUTE_PERMISSION));
@@ -101,9 +111,18 @@ public class FTPConfigEntryParserTest extends TestCase {
-        assertTrue("Should have user read permission.", ftpFile.hasPermission(FTPFile.USER_ACCESS, FTPFile.READ_PERMISSION));
-        assertTrue("Should have user write permission.", ftpFile.hasPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION));
-        assertFalse("Should NOT have user execute permission.", ftpFile.hasPermission(FTPFile.USER_ACCESS, FTPFile.EXECUTE_PERMISSION));
-        assertTrue("Should have group read permission.", ftpFile.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.READ_PERMISSION));
-        assertFalse("Should NOT have group write permission.", ftpFile.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.WRITE_PERMISSION));
-        assertFalse("Should NOT have group execute permission.", ftpFile.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.EXECUTE_PERMISSION));
-        assertFalse("Should NOT have world read permission.", ftpFile.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.READ_PERMISSION));
-        assertFalse("Should NOT have world write permission.", ftpFile.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.WRITE_PERMISSION));
-        assertFalse("Should NOT have world execute permission.", ftpFile.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.EXECUTE_PERMISSION));
+        assertTrue("Should have user read permission.",
+            ftpFile.hasPermission(FTPFile.USER_ACCESS, FTPFile.READ_PERMISSION));
+        assertTrue("Should have user write permission.",
+            ftpFile.hasPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION));
+        assertFalse("Should NOT have user execute permission.",
+            ftpFile.hasPermission(FTPFile.USER_ACCESS, FTPFile.EXECUTE_PERMISSION));
+        assertTrue("Should have group read permission.",
+            ftpFile.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.READ_PERMISSION));
+        assertFalse("Should NOT have group write permission.",
+            ftpFile.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.WRITE_PERMISSION));
+        assertFalse("Should NOT have group execute permission.",
+            ftpFile.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.EXECUTE_PERMISSION));
+        assertFalse("Should NOT have world read permission.",
+            ftpFile.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.READ_PERMISSION));
+        assertFalse("Should NOT have world write permission.",
+            ftpFile.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.WRITE_PERMISSION));
+        assertFalse("Should NOT have world execute permission.",
+            ftpFile.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.EXECUTE_PERMISSION));
diff --git a/src/test/java/org/apache/commons/net/ftp/parser/FTPParseTestFramework.java b/src/test/java/org/apache/commons/net/ftp/parser/FTPParseTestFramework.java
index 2fbba3abd..0caefaddc 100644
--- a/src/test/java/org/apache/commons/net/ftp/parser/FTPParseTestFramework.java
+++ b/src/test/java/org/apache/commons/net/ftp/parser/FTPParseTestFramework.java
@@ -18 +17,0 @@ package org.apache.commons.net.ftp.parser;
-
@@ -31 +30,2 @@ import junit.framework.TestCase;
-public abstract class FTPParseTestFramework extends TestCase {
+public abstract class FTPParseTestFramework extends TestCase
+{
@@ -36,2 +36,7 @@ public abstract class FTPParseTestFramework extends TestCase {
-        MILLISECOND(Calendar.MILLISECOND), SECOND(Calendar.SECOND), MINUTE(Calendar.MINUTE), HOUR_OF_DAY(Calendar.HOUR_OF_DAY),
-        DAY_OF_MONTH(Calendar.DAY_OF_MONTH), MONTH(Calendar.MONTH), YEAR(Calendar.YEAR);
+        MILLISECOND(Calendar.MILLISECOND),
+        SECOND(Calendar.SECOND),
+        MINUTE(Calendar.MINUTE),
+        HOUR_OF_DAY(Calendar.HOUR_OF_DAY),
+        DAY_OF_MONTH(Calendar.DAY_OF_MONTH),
+        MONTH(Calendar.MONTH),
+        YEAR(Calendar.YEAR);
@@ -45 +49,0 @@ public abstract class FTPParseTestFramework extends TestCase {
-
@@ -53 +57,2 @@ public abstract class FTPParseTestFramework extends TestCase {
-    public FTPParseTestFramework(final String name) {
+    public FTPParseTestFramework(final String name)
+    {
@@ -63 +68,2 @@ public abstract class FTPParseTestFramework extends TestCase {
-    protected void doAdditionalBadTests(final String test, final FTPFile f) {
+    protected void doAdditionalBadTests(final String test, final FTPFile f)
+    {
@@ -72,2 +78,3 @@ public abstract class FTPParseTestFramework extends TestCase {
-    protected void doAdditionalGoodTests(final String test, final FTPFile f) {
-    }
+    protected void doAdditionalGoodTests(final String test, final FTPFile f)
+    {
+        }
@@ -76,2 +83,2 @@ public abstract class FTPParseTestFramework extends TestCase {
-     * Method getBadListing. Implementors must provide a listing that contains failures.
-     *
+     * Method getBadListing.
+     * Implementors must provide a listing that contains failures.
@@ -83,2 +90,2 @@ public abstract class FTPParseTestFramework extends TestCase {
-     * Method getGoodListing. Implementors must provide a listing that passes.
-     *
+     * Method getGoodListing.
+     * Implementors must provide a listing that passes.
@@ -90,2 +97,2 @@ public abstract class FTPParseTestFramework extends TestCase {
-     * Method getParser. Provide the parser to use for testing.
-     *
+     * Method getParser.
+     * Provide the parser to use for testing.
@@ -113 +120,2 @@ public abstract class FTPParseTestFramework extends TestCase {
-    protected void setUp() throws Exception {
+    protected void setUp() throws Exception
+    {
@@ -119 +127,2 @@ public abstract class FTPParseTestFramework extends TestCase {
-    public void testBadListing() {
+    public void testBadListing()
+    {
@@ -122 +131,2 @@ public abstract class FTPParseTestFramework extends TestCase {
-        for (final String test : badsamples) {
+        for (final String test : badsamples)
+        {
@@ -125 +135,2 @@ public abstract class FTPParseTestFramework extends TestCase {
-            assertNull("Should have Failed to parse <" + test + ">", nullFileOrNullDate(f));
+            assertNull("Should have Failed to parse <" + test + ">",
+                       nullFileOrNullDate(f));
@@ -134 +145,2 @@ public abstract class FTPParseTestFramework extends TestCase {
-    public void testGoodListing() {
+    public void testGoodListing()
+    {
@@ -137 +149,2 @@ public abstract class FTPParseTestFramework extends TestCase {
-        for (final String test : goodsamples) {
+        for (final String test : goodsamples)
+        {
@@ -147,2 +160,2 @@ public abstract class FTPParseTestFramework extends TestCase {
-     * Method testParseFieldsOnDirectory. Provide a test to show that fields on a directory entry are parsed correctly.
-     *
+     * Method testParseFieldsOnDirectory.
+     * Provide a test to show that fields on a directory entry are parsed correctly.
@@ -154,2 +167,2 @@ public abstract class FTPParseTestFramework extends TestCase {
-     * Method testParseFieldsOnFile. Provide a test to show that fields on a file entry are parsed correctly.
-     *
+     * Method testParseFieldsOnFile.
+     * Provide a test to show that fields on a file entry are parsed correctly.
diff --git a/src/test/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java b/src/test/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java
index 7e3c7538d..27042bde2 100644
--- a/src/test/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java
+++ b/src/test/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java
@@ -41 +41,2 @@ public class FTPTimestampParserImplTest extends TestCase {
-     * Check how short date is interpreted at a given time. Check both with and without lenient future dates
+     * Check how short date is interpreted at a given time.
+     * Check both with and without lenient future dates
@@ -49,3 +50,3 @@ public class FTPTimestampParserImplTest extends TestCase {
-     * Check how short date is interpreted at a given time Check only using specified lenient future dates setting
-     *
-     * @param msg        identifying message
+     * Check how short date is interpreted at a given time
+     * Check only using specified lenient future dates setting
+     * @param msg identifying message
@@ -53,2 +54,2 @@ public class FTPTimestampParserImplTest extends TestCase {
-     * @param input      the time to be converted to a short date, parsed and tested against the full time
-     * @param lenient    whether to use lenient mode or not.
+     * @param input the time to be converted to a short date, parsed and tested against the full time
+     * @param lenient whether to use lenient mode or not.
@@ -61 +62,2 @@ public class FTPTimestampParserImplTest extends TestCase {
-     * Check how short date is interpreted at a given time. Check both with and without lenient future dates
+     * Check how short date is interpreted at a given time.
+     * Check both with and without lenient future dates
@@ -69,3 +71,3 @@ public class FTPTimestampParserImplTest extends TestCase {
-     * Check how short date is interpreted at a given time Check only using specified lenient future dates setting
-     *
-     * @param msg        identifying message
+     * Check how short date is interpreted at a given time
+     * Check only using specified lenient future dates setting
+     * @param msg identifying message
@@ -73,3 +75,3 @@ public class FTPTimestampParserImplTest extends TestCase {
-     * @param input      the time to be converted to a short date and parsed
-     * @param expected   the expected result from parsing
-     * @param lenient    whether to use lenient mode or not.
+     * @param input the time to be converted to a short date and parsed
+     * @param expected the expected result from parsing
+     * @param lenient whether to use lenient mode or not.
@@ -84 +86 @@ public class FTPTimestampParserImplTest extends TestCase {
-        final Calendar output = parser.parseTimestamp(shortDate, servertime);
+        final Calendar output=parser.parseTimestamp(shortDate, servertime);
@@ -91 +93 @@ public class FTPTimestampParserImplTest extends TestCase {
-        if (indom != outdom || inmon != outmon || inyear != outyear) {
+        if (indom != outdom || inmon != outmon || inyear != outyear){
@@ -93,3 +95,5 @@ public class FTPTimestampParserImplTest extends TestCase {
-            fail("Test: '" + msg + "' Server=" + longFormat.format(servertime.getTime()) + ". Failed to parse " + shortDate
-                    + (lenient ? " (lenient)" : " (non-lenient)") + " using " + shortFormat.toPattern() + ". Actual " + longFormat.format(output.getTime())
-                    + ". Expected " + longFormat.format(expected.getTime()));
+            fail("Test: '"+msg+"' Server="+longFormat.format(servertime.getTime())
+                    +". Failed to parse "+shortDate + (lenient ? " (lenient)" : " (non-lenient)")
+                    +" using " + shortFormat.toPattern()
+                    +". Actual "+longFormat.format(output.getTime())
+                    +". Expected "+longFormat.format(expected.getTime()));
@@ -98,0 +103 @@ public class FTPTimestampParserImplTest extends TestCase {
+
@@ -103,2 +108,2 @@ public class FTPTimestampParserImplTest extends TestCase {
-        final GregorianCalendar input = new GregorianCalendar(2000, Calendar.FEBRUARY, 29);
-        final GregorianCalendar expected = new GregorianCalendar(2000, Calendar.FEBRUARY, 29);
+        final GregorianCalendar input = new GregorianCalendar(2000, Calendar.FEBRUARY,29);
+        final GregorianCalendar expected = new GregorianCalendar(2000, Calendar.FEBRUARY,29);
@@ -109 +114 @@ public class FTPTimestampParserImplTest extends TestCase {
-    public void testFeb29IfLeapYear() throws Exception {
+    public void testFeb29IfLeapYear() throws Exception{
@@ -112,3 +117,6 @@ public class FTPTimestampParserImplTest extends TestCase {
-        final GregorianCalendar target = new GregorianCalendar(thisYear, Calendar.FEBRUARY, 29);
-        if (now.isLeapYear(thisYear) && now.after(target) && now.before(new GregorianCalendar(thisYear, Calendar.AUGUST, 29))) {
-            checkShortParse("Feb 29th", now, target);
+        final GregorianCalendar target = new GregorianCalendar(thisYear,Calendar.FEBRUARY,29);
+        if (now.isLeapYear(thisYear)
+         && now.after(target)
+         && now.before(new GregorianCalendar(thisYear,Calendar.AUGUST,29))
+        ){
+            checkShortParse("Feb 29th",now,target);
@@ -121 +129 @@ public class FTPTimestampParserImplTest extends TestCase {
-    public void testFeb29LeapYear() throws Exception {
+    public void testFeb29LeapYear() throws Exception{
@@ -124 +132 @@ public class FTPTimestampParserImplTest extends TestCase {
-        checkShortParse("Feb 29th 2000", now, new GregorianCalendar(year, Calendar.FEBRUARY, 29));
+        checkShortParse("Feb 29th 2000",now,new GregorianCalendar(year, Calendar.FEBRUARY,29));
@@ -127 +135 @@ public class FTPTimestampParserImplTest extends TestCase {
-    public void testFeb29LeapYear2() throws Exception {
+    public void testFeb29LeapYear2() throws Exception{
@@ -134 +142 @@ public class FTPTimestampParserImplTest extends TestCase {
-    public void testFeb29LeapYear3() throws Exception {
+    public void testFeb29LeapYear3() throws Exception{
@@ -141 +149 @@ public class FTPTimestampParserImplTest extends TestCase {
-    public void testFeb29LeapYear4() throws Exception {
+    public void testFeb29LeapYear4() throws Exception{
@@ -149 +157 @@ public class FTPTimestampParserImplTest extends TestCase {
-    public void testFeb29NonLeapYear() {
+    public void testFeb29NonLeapYear(){
@@ -152,2 +160,2 @@ public class FTPTimestampParserImplTest extends TestCase {
-        final GregorianCalendar input = new GregorianCalendar(2000, Calendar.FEBRUARY, 29);
-        final GregorianCalendar expected = new GregorianCalendar(1999, Calendar.FEBRUARY, 29);
+        final GregorianCalendar input = new GregorianCalendar(2000, Calendar.FEBRUARY,29);
+        final GregorianCalendar expected = new GregorianCalendar(1999, Calendar.FEBRUARY,29);
@@ -191 +199 @@ public class FTPTimestampParserImplTest extends TestCase {
-        checkShortParse("2007-12-30", now, now); // should always work
+        checkShortParse("2007-12-30",now,now); // should always work
@@ -194 +202 @@ public class FTPTimestampParserImplTest extends TestCase {
-        checkShortParse("2007-12-31", now, target, true);
+        checkShortParse("2007-12-31",now,target, true);
@@ -199 +207 @@ public class FTPTimestampParserImplTest extends TestCase {
-        checkShortParse("2007-01-01", now, now); // should always work
+        checkShortParse("2007-01-01",now,now); // should always work
@@ -201,2 +209,2 @@ public class FTPTimestampParserImplTest extends TestCase {
-        checkShortParse("2006-12-31", now, target, true);
-        checkShortParse("2006-12-31", now, target, false);
+        checkShortParse("2006-12-31",now,target, true);
+        checkShortParse("2006-12-31",now,target, false);
@@ -207 +215 @@ public class FTPTimestampParserImplTest extends TestCase {
-        checkShortParse("2007-12-31", now, now); // should always work
+        checkShortParse("2007-12-31",now,now); // should always work
@@ -210 +218 @@ public class FTPTimestampParserImplTest extends TestCase {
-        checkShortParse("2008-1-1", now, target, true);
+        checkShortParse("2008-1-1",now,target, true);
@@ -226 +234 @@ public class FTPTimestampParserImplTest extends TestCase {
-                fail("should.have.failed.to.parse.default, but was: " + c.getTime().toString());
+                fail("should.have.failed.to.parse.default, but was: "+c.getTime().toString());
@@ -286 +294 @@ public class FTPTimestampParserImplTest extends TestCase {
-        checkShortParse("2001-5-30", now, now); // should always work
+        checkShortParse("2001-5-30",now,now); // should always work
@@ -289 +297 @@ public class FTPTimestampParserImplTest extends TestCase {
-        checkShortParse("2001-5-30 +1 day", now, target, true);
+        checkShortParse("2001-5-30 +1 day",now,target,true);
@@ -291 +299 @@ public class FTPTimestampParserImplTest extends TestCase {
-            checkShortParse("2001-5-30 +1 day", now, target, false);
+            checkShortParse("2001-5-30 +1 day",now,target,false);
@@ -308 +316 @@ public class FTPTimestampParserImplTest extends TestCase {
-        checkShortParse("2004-8-1", now, now); // should always work
+        checkShortParse("2004-8-1",now,now); // should always work
@@ -311 +319 @@ public class FTPTimestampParserImplTest extends TestCase {
-        checkShortParse("2004-8-1 +1 day", now, target, true);
+        checkShortParse("2004-8-1 +1 day",now,target,true);
@@ -313 +321 @@ public class FTPTimestampParserImplTest extends TestCase {
-            checkShortParse("2004-8-1 +1 day", now, target, false);
+            checkShortParse("2004-8-1 +1 day",now,target,false);
@@ -330 +338 @@ public class FTPTimestampParserImplTest extends TestCase {
-        checkShortParse("2001-5-30", now, now); // should always work
+        checkShortParse("2001-5-30",now,now); // should always work
@@ -333 +341 @@ public class FTPTimestampParserImplTest extends TestCase {
-        checkShortParse("2001-5-30 -1 week", now, target);
+        checkShortParse("2001-5-30 -1 week",now,target);
@@ -335 +343 @@ public class FTPTimestampParserImplTest extends TestCase {
-        checkShortParse("2001-5-30 -13 weeks", now, target);
+        checkShortParse("2001-5-30 -13 weeks",now,target);
@@ -337 +345 @@ public class FTPTimestampParserImplTest extends TestCase {
-        checkShortParse("2001-5-30 -26 weeks", now, target);
+        checkShortParse("2001-5-30 -26 weeks",now,target);
@@ -342 +350 @@ public class FTPTimestampParserImplTest extends TestCase {
-        checkShortParse("2004-8-1", now, now); // should always work
+        checkShortParse("2004-8-1",now,now); // should always work
@@ -345 +353 @@ public class FTPTimestampParserImplTest extends TestCase {
-        checkShortParse("2004-8-1 -1 week", now, target);
+        checkShortParse("2004-8-1 -1 week",now,target);
@@ -347 +355 @@ public class FTPTimestampParserImplTest extends TestCase {
-        checkShortParse("2004-8-1 -13 weeks", now, target);
+        checkShortParse("2004-8-1 -13 weeks",now,target);
@@ -349 +357 @@ public class FTPTimestampParserImplTest extends TestCase {
-        checkShortParse("2004-8-1 -26 weeks", now, target);
+        checkShortParse("2004-8-1 -26 weeks",now,target);
@@ -355,2 +363,2 @@ public class FTPTimestampParserImplTest extends TestCase {
-        cal.set(Calendar.SECOND, 0);
-        cal.set(Calendar.MILLISECOND, 0);
+        cal.set(Calendar.SECOND,0);
+        cal.set(Calendar.MILLISECOND,0);
@@ -359 +367,2 @@ public class FTPTimestampParserImplTest extends TestCase {
-        final SimpleDateFormat sdf = new SimpleDateFormat(parser.getRecentDateFormatString());
+        final SimpleDateFormat sdf =
+            new SimpleDateFormat(parser.getRecentDateFormatString());
@@ -372,0 +382 @@ public class FTPTimestampParserImplTest extends TestCase {
+
@@ -374,2 +384,2 @@ public class FTPTimestampParserImplTest extends TestCase {
-        cal.set(Calendar.SECOND, 0);
-        cal.set(Calendar.MILLISECOND, 0);
+        cal.set(Calendar.SECOND,0);
+        cal.set(Calendar.MILLISECOND,0);
@@ -388 +398,2 @@ public class FTPTimestampParserImplTest extends TestCase {
-        final FTPClientConfig config = new FTPClientConfig(FTPClientConfig.SYST_UNIX);
+        final FTPClientConfig config =
+            new FTPClientConfig(FTPClientConfig.SYST_UNIX);
@@ -396 +407,2 @@ public class FTPTimestampParserImplTest extends TestCase {
-        final SimpleDateFormat sdf = (SimpleDateFormat) parser.getRecentDateFormat().clone();
+        final SimpleDateFormat sdf = (SimpleDateFormat)
+            parser.getRecentDateFormat().clone();
@@ -405,0 +418 @@ public class FTPTimestampParserImplTest extends TestCase {
+
@@ -410,2 +423,4 @@ public class FTPTimestampParserImplTest extends TestCase {
-            assertEquals("no.rollback.because.of.time.zones", TWO_HOURS_OF_MILLISECONDS, cal.getTime().getTime() - parsed.getTime().getTime());
-        } catch (final ParseException e) {
+            assertEquals("no.rollback.because.of.time.zones",
+                TWO_HOURS_OF_MILLISECONDS,
+                cal.getTime().getTime() - parsed.getTime().getTime());
+        } catch (final ParseException e){
@@ -415,4 +430,4 @@ public class FTPTimestampParserImplTest extends TestCase {
-        // but if the file's timestamp is THREE hours ahead of now, that should
-        // cause a rollover even taking the time zone difference into account.
-        // Since that time is still later than ours, it is parsed as occurring
-        // on this date last year.
+        //but if the file's timestamp is THREE hours ahead of now, that should
+        //cause a rollover even taking the time zone difference into account.
+        //Since that time is still later than ours, it is parsed as occurring
+        //on this date last year.
@@ -422,2 +437,3 @@ public class FTPTimestampParserImplTest extends TestCase {
-            assertEquals("rollback.even.with.time.zones", 1, cal.get(Calendar.YEAR) - parsed.get(Calendar.YEAR));
-        } catch (final ParseException e) {
+            assertEquals("rollback.even.with.time.zones",
+                    1, cal.get(Calendar.YEAR) - parsed.get(Calendar.YEAR));
+        } catch (final ParseException e){
@@ -430,2 +446,2 @@ public class FTPTimestampParserImplTest extends TestCase {
-        cal.set(Calendar.SECOND, 0);
-        cal.set(Calendar.MILLISECOND, 0);
+        cal.set(Calendar.SECOND,0);
+        cal.set(Calendar.MILLISECOND,0);
@@ -444 +460,2 @@ public class FTPTimestampParserImplTest extends TestCase {
-        final SimpleDateFormat sdf = new SimpleDateFormat(parser.getRecentDateFormatString());
+        final SimpleDateFormat sdf =
+            new SimpleDateFormat(parser.getRecentDateFormatString());
diff --git a/src/test/java/org/apache/commons/net/ftp/parser/MLSDComparison.java b/src/test/java/org/apache/commons/net/ftp/parser/MLSDComparison.java
index dd9283eaa..e48674c76 100644
--- a/src/test/java/org/apache/commons/net/ftp/parser/MLSDComparison.java
+++ b/src/test/java/org/apache/commons/net/ftp/parser/MLSDComparison.java
@@ -45,4 +45,4 @@ public class MLSDComparison {
-        final String n1 = o1.getName();
-        final String n2 = o2.getName();
-        return n1.compareTo(n2);
-    };
+            final String n1 = o1.getName();
+            final String n2 = o2.getName();
+            return n1.compareTo(n2);
+        };
@@ -51,2 +51,2 @@ public class MLSDComparison {
-     * Compare two instances to see if they are the same, ignoring any uninitialized fields.
-     *
+     * Compare two instances to see if they are the same,
+     * ignoring any uninitialized fields.
@@ -59 +59,3 @@ public class MLSDComparison {
-        return a.getName().equals(b.getName()) && areSame(a.getSize(), b.getSize(), -1L) &&
+        return
+            a.getName().equals(b.getName()) &&
+            areSame(a.getSize(), b.getSize(), -1L) &&
@@ -62 +64 @@ public class MLSDComparison {
-                areSame(a.getTimestamp(), b.getTimestamp()) &&
+            areSame(a.getTimestamp(), b.getTimestamp()) &&
@@ -66 +68,2 @@ public class MLSDComparison {
-                true;
+            true
+            ;
@@ -72 +74,0 @@ public class MLSDComparison {
-
@@ -94,0 +97 @@ public class MLSDComparison {
+
@@ -104,3 +107,3 @@ public class MLSDComparison {
-    private void compareSortedLists(final FTPFile[] lst, final FTPFile[] mlst) {
-        Arrays.sort(lst, cmp);
-        Arrays.sort(mlst, cmp);
+    private void compareSortedLists(final FTPFile[] lst, final FTPFile[] mlst){
+        Arrays.sort(lst, cmp );
+        Arrays.sort(mlst, cmp );
@@ -108,3 +111,3 @@ public class MLSDComparison {
-        final int firstl = lst.length;
-        final int secondl = mlst.length;
-        int one = 0, two = 0;
+        final int firstl=lst.length;
+        final int secondl=mlst.length;
+        int one=0, two=0;
@@ -121 +124 @@ public class MLSDComparison {
-                if (first.getName().endsWith("HEADER.html")) {
+                if (first.getName().endsWith("HEADER.html")){
@@ -124 +127 @@ public class MLSDComparison {
-                if (!areEquivalent(first, second)) {
+                if (!areEquivalent(first, second)){
@@ -127,2 +130,2 @@ public class MLSDComparison {
-                    final long tdiff = first.getTimestamp().getTimeInMillis() - second.getTimestamp().getTimeInMillis();
-                    System.out.println("Minutes diff " + tdiff / (1000 * 60));
+                    final long tdiff = first.getTimestamp().getTimeInMillis()-second.getTimestamp().getTimeInMillis();
+                    System.out.println("Minutes diff "+tdiff/(1000*60));
@@ -142 +145 @@ public class MLSDComparison {
-                    System.out.println("1: " + rl1);
+                    System.out.println("1: "+rl1);
@@ -148 +151 @@ public class MLSDComparison {
-                System.out.println("2: " + rl2);
+                System.out.println("2: "+rl2);
@@ -159 +162,5 @@ public class MLSDComparison {
-        return a.get(Calendar.YEAR) == b.get(Calendar.YEAR) && a.get(Calendar.MONTH) == b.get(Calendar.MONTH) && ad == bd;
+        return
+            a.get(Calendar.YEAR) == b.get(Calendar.YEAR) &&
+            a.get(Calendar.MONTH) == b.get(Calendar.MONTH) &&
+            ad == bd
+            ;
@@ -161 +167,0 @@ public class MLSDComparison {
-
@@ -169,2 +175,5 @@ public class MLSDComparison {
-        return (ah == 0 && am == 0 && as == 0) || (bh == 0 && bm == 0 && bs == 0) || (ah == bh && am == bm) // ignore seconds
-        ;
+        return
+            (ah == 0 && am == 0 && as ==0) ||
+            (bh == 0 && bm == 0 && bs ==0) ||
+            (ah == bh && am == bm) // ignore seconds
+            ;
@@ -172,0 +182 @@ public class MLSDComparison {
+
diff --git a/src/test/java/org/apache/commons/net/ftp/parser/MLSxEntryParserTest.java b/src/test/java/org/apache/commons/net/ftp/parser/MLSxEntryParserTest.java
index 01c2fe101..424d1baeb 100644
--- a/src/test/java/org/apache/commons/net/ftp/parser/MLSxEntryParserTest.java
+++ b/src/test/java/org/apache/commons/net/ftp/parser/MLSxEntryParserTest.java
@@ -26,7 +26,14 @@ public class MLSxEntryParserTest extends FTPParseTestFramework {
-    private static final String[] badsamples = { "Type=cdir;Modify=20141022065101;UNIX.mode=0775;/no/space", // no space between facts and name
-            "Type=cdir;Modify=20141022065103;UNIX.mode=0775;", // no name or space
-            "/no/leading/space", "", // empty
-            "Type=cdir;Modify=20141022065102;UNIX.mode=0775; ", // no name
-            "Type=dir;Size; missing =size", "Type=dir missing-semicolon", "Type= missing value and semicolon", " ", // no path
-            "Modify=2014; Short stamp", "Type=pdir;Modify=20141205180002Z; /trailing chars in Modify",
-            "Type=dir;Modify=2014102206510x2.999;UNIX.mode=0775; modify has spurious chars", };
+    private static final String[] badsamples = {
+        "Type=cdir;Modify=20141022065101;UNIX.mode=0775;/no/space", // no space between facts and name
+        "Type=cdir;Modify=20141022065103;UNIX.mode=0775;", // no name or space
+        "/no/leading/space",
+        "", //empty
+        "Type=cdir;Modify=20141022065102;UNIX.mode=0775; ", // no name
+        "Type=dir;Size; missing =size",
+        "Type=dir missing-semicolon",
+        "Type= missing value and semicolon",
+        " ", // no path
+        "Modify=2014; Short stamp",
+        "Type=pdir;Modify=20141205180002Z; /trailing chars in Modify",
+        "Type=dir;Modify=2014102206510x2.999;UNIX.mode=0775; modify has spurious chars",
+    };
@@ -34,8 +41,13 @@ public class MLSxEntryParserTest extends FTPParseTestFramework {
-    private static final String[] goodsamples = { "Type=cdir;Modify=20141022065102;UNIX.mode=0775; /commons/net",
-            "Type=pdir;Modify=20141205180002;UNIX.mode=0775; /commons", "Type=file;Size=431;Modify=20130303210732;UNIX.mode=0664; HEADER.html",
-            "Type=file;Size=1880;Modify=20130611172748;UNIX.mode=0664; README.html",
-            "Type=file;Size=2364;Modify=20130611170131;UNIX.mode=0664; RELEASE-NOTES.txt", "Type=dir;Modify=20141022065102;UNIX.mode=0775; binaries",
-            "Type=dir;Modify=20141022065102.999;UNIX.mode=0775; source", " /no/facts", // no facts
-            "Type=; /empty/fact", "Size=; /empty/size", " Type=cdir;Modify=20141022065102;UNIX.mode=0775; /leading/space", // leading space before facts => it's
-                                                                                                                           // a file name!
-            "  ", // pathname of space
+    private static final String[] goodsamples = {
+        "Type=cdir;Modify=20141022065102;UNIX.mode=0775; /commons/net",
+        "Type=pdir;Modify=20141205180002;UNIX.mode=0775; /commons",
+        "Type=file;Size=431;Modify=20130303210732;UNIX.mode=0664; HEADER.html",
+        "Type=file;Size=1880;Modify=20130611172748;UNIX.mode=0664; README.html",
+        "Type=file;Size=2364;Modify=20130611170131;UNIX.mode=0664; RELEASE-NOTES.txt",
+        "Type=dir;Modify=20141022065102;UNIX.mode=0775; binaries",
+        "Type=dir;Modify=20141022065102.999;UNIX.mode=0775; source",
+        " /no/facts", // no facts
+        "Type=; /empty/fact",
+        "Size=; /empty/size",
+        " Type=cdir;Modify=20141022065102;UNIX.mode=0775; /leading/space", // leading space before facts => it's a file name!
+        "  ", // pathname of space
@@ -57,0 +70 @@ public class MLSxEntryParserTest extends FTPParseTestFramework {
+
@@ -64 +77,3 @@ public class MLSxEntryParserTest extends FTPParseTestFramework {
-     * Check if FTPFile entry parsing failed; i.e. if entry is null. We override parent check, as a null timestamp is not acceptable for these tests.
+     * Check if FTPFile entry parsing failed; i.e. if entry is null.
+     * We override parent check, as a null timestamp is not acceptable
+     * for these tests.
diff --git a/src/test/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParserTest.java b/src/test/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParserTest.java
index 5cd868d72..155567126 100644
--- a/src/test/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParserTest.java
+++ b/src/test/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParserTest.java
@@ -33 +33 @@ public class MVSFTPEntryParserTest extends FTPParseTestFramework {
-            // "Volume Unit Referred Ext Used Recfm Lrecl BlkSz Dsorg Dsname",
+            //  "Volume Unit    Referred Ext Used Recfm Lrecl BlkSz Dsorg Dsname",
@@ -37,3 +37,6 @@ public class MVSFTPEntryParserTest extends FTPParseTestFramework {
-            "PSMLC1 3390   2005/04/04  1    1  VB   27994 27998  PS    file3.I", "PSMLB9 3390   2005/04/04  1    1  VB   27994 27998  PS    file4.I.BU",
-            "PSMLB6 3390   2005/04/05  1    1  VB   27994 27998  PS    file3.I.BU", "PSMLC6 3390   2005/04/05  1    1  VB   27994 27998  PS    file6.I",
-            "PSMLB7 3390   2005/04/04  1    1  VB   27994 27998  PS    file7.O", "PSMLC6 3390   2005/04/05  1    1  VB   27994 27998  PS    file7.O.BU",
+            "PSMLC1 3390   2005/04/04  1    1  VB   27994 27998  PS    file3.I",
+            "PSMLB9 3390   2005/04/04  1    1  VB   27994 27998  PS    file4.I.BU",
+            "PSMLB6 3390   2005/04/05  1    1  VB   27994 27998  PS    file3.I.BU",
+            "PSMLC6 3390   2005/04/05  1    1  VB   27994 27998  PS    file6.I",
+            "PSMLB7 3390   2005/04/04  1    1  VB   27994 27998  PS    file7.O",
+            "PSMLC6 3390   2005/04/05  1    1  VB   27994 27998  PS    file7.O.BU",
@@ -44 +47,2 @@ public class MVSFTPEntryParserTest extends FTPParseTestFramework {
-            "VVVVVV 3390   2020/04/18 1    60   U   32760 32760  PO    NAME" };
+            "VVVVVV 3390   2020/04/18 1    60   U   32760 32760  PO    NAME"
+        };
@@ -48 +52,2 @@ public class MVSFTPEntryParserTest extends FTPParseTestFramework {
-            "Name      VV.MM   Created       Changed      Size  Init   Mod   Id", "SAVE03    01.03 2002/09/12 2002/10/11 09:37    11    11     0 KIL001",
+            "Name      VV.MM   Created       Changed      Size  Init   Mod   Id",
+            "SAVE03    01.03 2002/09/12 2002/10/11 09:37    11    11     0 KIL001",
@@ -50,2 +55,4 @@ public class MVSFTPEntryParserTest extends FTPParseTestFramework {
-            "TBSHELF1  01.03 2002/09/12 2002/10/11 09:37    11    11     0 KIL001", "TBSHELF2  01.03 2002/09/12 2002/10/11 09:37    11    11     0 KIL001",
-            "TBSHELF3  01.03 2002/09/12 2002/10/11 09:37    11    11     0 KIL001", "TBSHELF4  01.03 2002/09/12 2002/10/11 09:37    11    11     0 KIL001", };
+            "TBSHELF1  01.03 2002/09/12 2002/10/11 09:37    11    11     0 KIL001",
+            "TBSHELF2  01.03 2002/09/12 2002/10/11 09:37    11    11     0 KIL001",
+            "TBSHELF3  01.03 2002/09/12 2002/10/11 09:37    11    11     0 KIL001",
+            "TBSHELF4  01.03 2002/09/12 2002/10/11 09:37    11    11     0 KIL001", };
@@ -54,2 +61,2 @@ public class MVSFTPEntryParserTest extends FTPParseTestFramework {
-            /* Note, if the string begins with SAVE, the parsed entry is stored in the List saveftpfiles */
-            "IBMUSER1  JOB01906  OUTPUT    3 Spool Files", };
+    /* Note, if the string begins with SAVE, the parsed entry is stored in the List saveftpfiles */
+    "IBMUSER1  JOB01906  OUTPUT    3 Spool Files", };
@@ -59,2 +66,3 @@ public class MVSFTPEntryParserTest extends FTPParseTestFramework {
-            // "JOBNAME JOBID OWNER STATUS CLASS",
-            "IBMUSER2 JOB01906 IBMUSER  OUTPUT A        RC=0000 3 spool files", "IBMUSER  TSU01830 IBMUSER  OUTPUT TSU      ABEND=522 3 spool files", };
+            //"JOBNAME  JOBID    OWNER    STATUS CLASS",
+            "IBMUSER2 JOB01906 IBMUSER  OUTPUT A        RC=0000 3 spool files",
+            "IBMUSER  TSU01830 IBMUSER  OUTPUT TSU      ABEND=522 3 spool files", };
@@ -62,2 +70,5 @@ public class MVSFTPEntryParserTest extends FTPParseTestFramework {
-    private static final String[] goodsamplesUnixList = { "total 1234", "-rwxr-xr-x   2 root     root         4096 Mar  2 15:13 zxbox",
-            "drwxr-xr-x   2 root     root         4096 Aug 24  2001 zxjdbc", };
+    private static final String[] goodsamplesUnixList = {
+            "total 1234",
+            "-rwxr-xr-x   2 root     root         4096 Mar  2 15:13 zxbox",
+            "drwxr-xr-x   2 root     root         4096 Aug 24  2001 zxjdbc",
+            };
@@ -65 +76,3 @@ public class MVSFTPEntryParserTest extends FTPParseTestFramework {
-    private static final String[] badsamples = { "MigratedP201.$FTXPBI1.$CF2ITB.$AAB0402.I", "PSMLC133902005/04/041VB2799427998PSfile1.I", "file2.O", };
+    private static final String[] badsamples = {
+            "MigratedP201.$FTXPBI1.$CF2ITB.$AAB0402.I",
+            "PSMLC133902005/04/041VB2799427998PSfile1.I", "file2.O", };
@@ -92,3 +105 @@ public class MVSFTPEntryParserTest extends FTPParseTestFramework {
-    /*
-     * (non-Javadoc)
-     *
+    /* (non-Javadoc)
@@ -102,3 +113,2 @@ public class MVSFTPEntryParserTest extends FTPParseTestFramework {
-    /*
-     * (non-Javadoc)
-     *
+
+    /* (non-Javadoc)
@@ -126 +136,2 @@ public class MVSFTPEntryParserTest extends FTPParseTestFramework {
-     * note the testGoodListing has to be the first test invoked, because some FTPFile entries are saved for the later tests
+     * note the testGoodListing has to be the first test invoked, because
+     * some FTPFile entries are saved for the later tests
@@ -129 +139,0 @@ public class MVSFTPEntryParserTest extends FTPParseTestFramework {
-     *
@@ -184 +194,2 @@ public class MVSFTPEntryParserTest extends FTPParseTestFramework {
-        FTPFile file = parser.parseFTPEntry("SAVE01 3390   2004/06/23  1    1  FB     128  6144  PO    INCOMING.RPTBM024.D061704");
+        FTPFile file = parser
+                .parseFTPEntry("SAVE01 3390   2004/06/23  1    1  FB     128  6144  PO    INCOMING.RPTBM024.D061704");
@@ -189 +200,2 @@ public class MVSFTPEntryParserTest extends FTPParseTestFramework {
-        file = parser.parseFTPEntry("SAVE02 3390   2004/06/23  1    1  FB     128  6144  PO-E  INCOMING.RPTBM025.D061704");
+        file = parser
+                .parseFTPEntry("SAVE02 3390   2004/06/23  1    1  FB     128  6144  PO-E  INCOMING.RPTBM025.D061704");
@@ -196,3 +208 @@ public class MVSFTPEntryParserTest extends FTPParseTestFramework {
-    /*
-     * (non-Javadoc)
-     *
+    /* (non-Javadoc)
diff --git a/src/test/java/org/apache/commons/net/ftp/parser/MacOsPeterFTPEntryParserTest.java b/src/test/java/org/apache/commons/net/ftp/parser/MacOsPeterFTPEntryParserTest.java
index 6aa6a4d2b..90f6f48c8 100644
--- a/src/test/java/org/apache/commons/net/ftp/parser/MacOsPeterFTPEntryParserTest.java
+++ b/src/test/java/org/apache/commons/net/ftp/parser/MacOsPeterFTPEntryParserTest.java
@@ -26,12 +26,18 @@ public class MacOsPeterFTPEntryParserTest extends FTPParseTestFramework {
-    private static final String[] badsamples = { "drwxr-xr-x    123       folder        0 Jan  4 14:49 Steak", };
-
-    private static final String[] goodsamples = { "-rw-r--r--    54149       27826    81975 Jul 22  2010 09.jpg",
-            "drwxr-xr-x               folder        0 Jan  4 14:51 Alias_to_Steak",
-            "-rw-r--r--    78440       49231   127671 Jul 22  2010 Filename with whitespace.jpg",
-            "-rw-r--r--    78440       49231   127671 Jul 22 14:51 Filename with whitespace.jpg",
-            "-rw-r--r--        0      108767   108767 Jul 22  2010 presentation03.jpg",
-            "-rw-r--r--    58679       60393   119072 Jul 22  2010 presentation04.jpg",
-            "-rw-r--r--    82543       51433   133976 Jul 22  2010 presentation06.jpg",
-            "-rw-r--r--    83616     1430976  1514592 Jul 22  2010 presentation10.jpg",
-            "-rw-r--r--        0       66990    66990 Jul 22  2010 presentation11.jpg", "drwxr-xr-x               folder        0 Jan  4 14:49 Steak",
-            "-rwx------        0       12713    12713 Jul  8  2009 Twitter_Avatar.png", };
+    private static final String[] badsamples = {
+        "drwxr-xr-x    123       folder        0 Jan  4 14:49 Steak",
+    };
+
+    private static final String[] goodsamples =
+    {
+        "-rw-r--r--    54149       27826    81975 Jul 22  2010 09.jpg",
+        "drwxr-xr-x               folder        0 Jan  4 14:51 Alias_to_Steak",
+        "-rw-r--r--    78440       49231   127671 Jul 22  2010 Filename with whitespace.jpg",
+        "-rw-r--r--    78440       49231   127671 Jul 22 14:51 Filename with whitespace.jpg",
+        "-rw-r--r--        0      108767   108767 Jul 22  2010 presentation03.jpg",
+        "-rw-r--r--    58679       60393   119072 Jul 22  2010 presentation04.jpg",
+        "-rw-r--r--    82543       51433   133976 Jul 22  2010 presentation06.jpg",
+        "-rw-r--r--    83616     1430976  1514592 Jul 22  2010 presentation10.jpg",
+        "-rw-r--r--        0       66990    66990 Jul 22  2010 presentation11.jpg",
+        "drwxr-xr-x               folder        0 Jan  4 14:49 Steak",
+        "-rwx------        0       12713    12713 Jul  8  2009 Twitter_Avatar.png",
+    };
@@ -44,2 +50,2 @@ public class MacOsPeterFTPEntryParserTest extends FTPParseTestFramework {
-     * Method checkPermissions. Verify that the persmissions were properly set.
-     *
+     * Method checkPermissions.
+     * Verify that the persmissions were properly set.
@@ -49,9 +55,18 @@ public class MacOsPeterFTPEntryParserTest extends FTPParseTestFramework {
-        assertTrue("Should have user read permission.", f.hasPermission(FTPFile.USER_ACCESS, FTPFile.READ_PERMISSION));
-        assertTrue("Should have user write permission.", f.hasPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION));
-        assertTrue("Should have user execute permission.", f.hasPermission(FTPFile.USER_ACCESS, FTPFile.EXECUTE_PERMISSION));
-        assertTrue("Should have group read permission.", f.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.READ_PERMISSION));
-        assertFalse("Should NOT have group write permission.", f.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.WRITE_PERMISSION));
-        assertTrue("Should have group execute permission.", f.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.EXECUTE_PERMISSION));
-        assertTrue("Should have world read permission.", f.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.READ_PERMISSION));
-        assertFalse("Should NOT have world write permission.", f.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.WRITE_PERMISSION));
-        assertTrue("Should have world execute permission.", f.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.EXECUTE_PERMISSION));
+        assertTrue("Should have user read permission.", f.hasPermission(
+                FTPFile.USER_ACCESS, FTPFile.READ_PERMISSION));
+        assertTrue("Should have user write permission.", f.hasPermission(
+                FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION));
+        assertTrue("Should have user execute permission.", f.hasPermission(
+                FTPFile.USER_ACCESS, FTPFile.EXECUTE_PERMISSION));
+        assertTrue("Should have group read permission.", f.hasPermission(
+                FTPFile.GROUP_ACCESS, FTPFile.READ_PERMISSION));
+        assertFalse("Should NOT have group write permission.", f.hasPermission(
+                FTPFile.GROUP_ACCESS, FTPFile.WRITE_PERMISSION));
+        assertTrue("Should have group execute permission.", f.hasPermission(
+                FTPFile.GROUP_ACCESS, FTPFile.EXECUTE_PERMISSION));
+        assertTrue("Should have world read permission.", f.hasPermission(
+                FTPFile.WORLD_ACCESS, FTPFile.READ_PERMISSION));
+        assertFalse("Should NOT have world write permission.", f.hasPermission(
+                FTPFile.WORLD_ACCESS, FTPFile.WRITE_PERMISSION));
+        assertTrue("Should have world execute permission.", f.hasPermission(
+                FTPFile.WORLD_ACCESS, FTPFile.EXECUTE_PERMISSION));
@@ -77 +92,2 @@ public class MacOsPeterFTPEntryParserTest extends FTPParseTestFramework {
-        testPrecision("-rw-r--r--    78440       49231   127671 Jul 22  2010 Filename with whitespace.jpg", CalendarUnit.DAY_OF_MONTH);
+        testPrecision(
+            "-rw-r--r--    78440       49231   127671 Jul 22  2010 Filename with whitespace.jpg", CalendarUnit.DAY_OF_MONTH);
@@ -82 +98,2 @@ public class MacOsPeterFTPEntryParserTest extends FTPParseTestFramework {
-        final FTPFile f = getParser().parseFTPEntry("drwxr-xr-x               folder        0 Mar  2 15:13 Alias_to_Steak");
+        final FTPFile f = getParser().parseFTPEntry(
+                "drwxr-xr-x               folder        0 Mar  2 15:13 Alias_to_Steak");
@@ -106 +123,2 @@ public class MacOsPeterFTPEntryParserTest extends FTPParseTestFramework {
-        assertEquals(df.format(cal.getTime()), df.format(f.getTimestamp().getTime()));
+        assertEquals(df.format(cal.getTime()), df.format(f.getTimestamp()
+                .getTime()));
@@ -111 +129,3 @@ public class MacOsPeterFTPEntryParserTest extends FTPParseTestFramework {
-        final FTPFile f = getParser().parseFTPEntry("-rwxr-xr-x    78440       49231   127671 Jul  2 14:51 Filename with whitespace.jpg");
+        final FTPFile f = getParser().parseFTPEntry(
+            "-rwxr-xr-x    78440       49231   127671 Jul  2 14:51 Filename with whitespace.jpg"
+            );
@@ -139 +159,2 @@ public class MacOsPeterFTPEntryParserTest extends FTPParseTestFramework {
-        testPrecision("-rw-r--r--    78440       49231   127671 Jul 22 14:51 Filename with whitespace.jpg", CalendarUnit.MINUTE);
+        testPrecision(
+            "-rw-r--r--    78440       49231   127671 Jul 22 14:51 Filename with whitespace.jpg", CalendarUnit.MINUTE);
diff --git a/src/test/java/org/apache/commons/net/ftp/parser/NTFTPEntryParserTest.java b/src/test/java/org/apache/commons/net/ftp/parser/NTFTPEntryParserTest.java
index 5db1de1e7..0abd1e194 100644
--- a/src/test/java/org/apache/commons/net/ftp/parser/NTFTPEntryParserTest.java
+++ b/src/test/java/org/apache/commons/net/ftp/parser/NTFTPEntryParserTest.java
@@ -28,8 +28,16 @@ import org.apache.commons.net.ftp.FTPListParseEngine;
-public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework {
-
-    private static final String[][] goodsamples = { { // DOS-style tests
-            "05-26-95  10:57AM               143712 $LDR$", "05-20-97  03:31PM                  681 .bash_history",
-            "12-05-96  05:03PM       <DIR>          absoft2", "11-14-97  04:21PM                  953 AUDITOR3.INI",
-            "05-22-97  08:08AM                  828 AUTOEXEC.BAK", "01-22-98  01:52PM                  795 AUTOEXEC.BAT",
-            "05-13-97  01:46PM                  828 AUTOEXEC.DOS", "12-03-96  06:38AM                  403 AUTOTOOL.LOG",
-            "12-03-96  06:38AM       <DIR>          123xyz", "01-20-97  03:48PM       <DIR>          bin", "05-26-1995  10:57AM               143712 $LDR$",
+public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework
+{
+
+    private static final String [][] goodsamples = {
+    { // DOS-style tests
+            "05-26-95  10:57AM               143712 $LDR$",
+            "05-20-97  03:31PM                  681 .bash_history",
+            "12-05-96  05:03PM       <DIR>          absoft2",
+            "11-14-97  04:21PM                  953 AUDITOR3.INI",
+            "05-22-97  08:08AM                  828 AUTOEXEC.BAK",
+            "01-22-98  01:52PM                  795 AUTOEXEC.BAT",
+            "05-13-97  01:46PM                  828 AUTOEXEC.DOS",
+            "12-03-96  06:38AM                  403 AUTOTOOL.LOG",
+            "12-03-96  06:38AM       <DIR>          123xyz",
+            "01-20-97  03:48PM       <DIR>          bin",
+            "05-26-1995  10:57AM               143712 $LDR$",
@@ -37,15 +45,28 @@ public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework {
-            "12-05-96  17:03         <DIR>          absoft2", "05-22-97  08:08                    828 AUTOEXEC.BAK",
-            "01-01-98  05:00       <DIR>          Network", "01-01-98  05:00       <DIR>          StorageCard", "09-13-10  20:08       <DIR>          Recycled",
-            "09-06-06  19:00                   69 desktop.ini", "09-13-10  13:08                   23 Control Panel.lnk",
-            "09-13-10  13:08       <DIR>          My Documents", "09-13-10  13:08       <DIR>          Program Files",
-            "09-13-10  13:08       <DIR>          Temp", "09-13-10  13:08       <DIR>          Windows", },
-            { // Unix-style tests
-                    "-rw-r--r--   1 root     root       111325 Apr 27  2001 zxJDBC-2.0.1b1.tar.gz",
-                    "-rw-r--r--   1 root     root       190144 Apr 27  2001 zxJDBC-2.0.1b1.zip",
-                    "-rwxr-xr-x   2 500      500           166 Nov  2  2001 73131-testtes1.afp",
-                    "-rw-r--r--   1 500      500           166 Nov  9  2001 73131-testtes1.AFP",
-                    "drwx------ 4 maxm Domain Users 512 Oct 2 10:59 .metadata", } };
-
-    private static final String[][] badsamples = { { // DOS-style tests
-            "20-05-97  03:31PM                  681 .bash_history", "     0           DIR   05-19-97   12:56  local",
-            "     0           DIR   05-12-97   16:52  Maintenance Desktop", },
+            "12-05-96  17:03         <DIR>          absoft2",
+            "05-22-97  08:08                    828 AUTOEXEC.BAK",
+            "01-01-98  05:00       <DIR>          Network",
+            "01-01-98  05:00       <DIR>          StorageCard",
+            "09-13-10  20:08       <DIR>          Recycled",
+            "09-06-06  19:00                   69 desktop.ini",
+            "09-13-10  13:08                   23 Control Panel.lnk",
+            "09-13-10  13:08       <DIR>          My Documents",
+            "09-13-10  13:08       <DIR>          Program Files",
+            "09-13-10  13:08       <DIR>          Temp",
+            "09-13-10  13:08       <DIR>          Windows",
+    },
+    { // Unix-style tests
+            "-rw-r--r--   1 root     root       111325 Apr 27  2001 zxJDBC-2.0.1b1.tar.gz",
+            "-rw-r--r--   1 root     root       190144 Apr 27  2001 zxJDBC-2.0.1b1.zip",
+            "-rwxr-xr-x   2 500      500           166 Nov  2  2001 73131-testtes1.afp",
+            "-rw-r--r--   1 500      500           166 Nov  9  2001 73131-testtes1.AFP",
+            "drwx------ 4 maxm Domain Users 512 Oct 2 10:59 .metadata",
+        }
+    };
+
+    private static final String[][] badsamples =
+        {
+            { // DOS-style tests
+                "20-05-97  03:31PM                  681 .bash_history",
+                "     0           DIR   05-19-97   12:56  local",
+                "     0           DIR   05-12-97   16:52  Maintenance Desktop",
+            },
@@ -53 +74,6 @@ public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework {
-                    "drwxr-xr-x   2 root     99           4096Feb 23 30:01 zzplayer", } };
+                "drwxr-xr-x   2 root     99           4096Feb 23 30:01 zzplayer",
+            }
+            };
+
+    private static final String directoryBeginningWithNumber =
+        "12-03-96  06:38AM       <DIR>          123xyz";
@@ -55 +80,0 @@ public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework {
-    private static final String directoryBeginningWithNumber = "12-03-96  06:38AM       <DIR>          123xyz";
@@ -58,36 +83,69 @@ public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework {
-    private static final byte[] listFilesByteTrace = { 48, 57, 45, 48, 52, 45, 49, 51, 32, 32, 48, 53, 58, 53, 49, 80, 77, 32, 32, 32, 32, 32, 32, 32, 60, 68,
-            73, 82, 62, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 115, 112, 110, 101, 116, 95, 99, 108, 105, 101, 110, 116, 13, 10, // 1
-            48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 50, 58, 53, 52, 80, 77, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
-            50, 32, 65, 95, 113, 117, 105, 99, 107, 95, 98, 114, 111, 119, 110, 95, 102, 111, 120, 95, 106, 117, 109, 112, 115, 95, 111, 118, 101, 114, 95, 116,
-            104, 101, 95, 108, 97, 122, 121, 95, 100, 111, 103, 13, 10, // 2
-            48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 50, 58, 49, 55, 80, 77, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
-            51, 32, 120, -127, -123, 121, 13, 10, // 3
-            48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 49, 58, 52, 57, 80, 77, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
-            52, 32, -126, -28, -126, -83, -119, -51, -126, -52, -105, -84, -126, -22, -126, -51, -112, -30, -126, -90, -126, -72, -126, -75, -126, -60, -127,
-            65, -126, -75, -126, -87, -126, -32, -126, -32, -126, -58, -126, -52, -112, -123, -126, -55, -126, -96, -126, -25, -126, -72, 46, 116, 120, 116, 13,
-            10, // 4
-            48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 50, 58, 52, 54, 80, 77, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
-            53, 32, -125, 76, -125, -125, -125, 98, -125, 86, -125, 116, -125, -115, -127, 91, -116, 118, -114, 90, -113, -111, 13, 10, // 5
-            48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 50, 58, 52, 54, 80, 77, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
-            54, 32, -125, 76, -125, -125, -125, 98, -125, 86, -125, -123, -125, 116, -125, -115, -127, 91, -116, 118, -114, 90, -113, -111, 13, 10, // 6
-            48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 49, 58, 52, 57, 80, 77, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
-            55, 32, -114, 79, -116, -38, -126, -52, -105, -25, 46, 116, 120, 116, 13, 10, // 7
-            48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 49, 58, 52, 57, 80, 77, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
-            56, 32, -111, -66, -116, -10, -106, 93, 46, 116, 120, 116, 13, 10, // 8
-            48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 50, 58, 53, 52, 80, 77, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
-            57, 32, -113, -84, -106, -20, -106, -123, -114, 113, 13, 10, // 9
-            48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 49, 58, 52, 57, 80, 77, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49,
-            48, 32, -119, -28, -109, 99, -118, -108, -114, -82, -119, -17, -114, -48, -120, -8, -112, -123, -108, 95, -117, -58, 46, 80, 68, 70, 13, 10, // 10
-            48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 50, 58, 49, 49, 80, 77, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49,
-            49, 32, -112, -124, -99, -56, 46, 116, 120, 116, 13, 10, // 11
-            48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 50, 58, 52, 51, 80, 77, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49,
-            50, 32, -117, -76, -116, -123, 13, 10, // 12
-            48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 50, 58, 49, 50, 80, 77, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49,
-            51, 32, -114, -107, -111, -123, -108, 94, -104, 82, 13, 10, // 13
-            48, 55, 45, 48, 51, 45, 49, 51, 32, 32, 48, 50, 58, 51, 53, 80, 77, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49,
-            52, 32, -112, -123, -117, -101, -126, -52, -116, -16, -126, -19, -126, -24, 46, 116, 120, 116, 13, 10, // 14
-            48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 50, 58, 49, 50, 80, 77, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49,
-            53, 32, -114, -123, -117, -101, -112, -20, 13, 10, // 15
-            48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 49, 58, 52, 57, 80, 77, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49,
-            54, 32, -107, -94, -112, -123, -106, 126, -126, -55, -107, -44, -126, -25, -126, -72, 46, 116, 120, 116, 13, 10 // 16
-    };
+    private static final byte[] listFilesByteTrace = {
+        48, 57, 45, 48, 52, 45, 49, 51, 32, 32, 48, 53, 58, 53, 49, 80, 77,
+        32, 32, 32, 32, 32, 32, 32, 60, 68, 73, 82, 62, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
+        97, 115, 112, 110, 101, 116, 95, 99, 108, 105, 101, 110, 116,
+        13, 10, // 1
+        48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 50, 58, 53, 52, 80, 77,
+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 50, 32,
+        65, 95, 113, 117, 105, 99, 107, 95, 98, 114, 111, 119, 110, 95, 102, 111, 120, 95, 106, 117, 109, 112, 115,
+        95, 111, 118, 101, 114, 95, 116, 104, 101, 95, 108, 97, 122, 121, 95, 100, 111, 103,
+        13, 10, // 2
+        48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 50, 58, 49, 55, 80, 77,
+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 51, 32,
+        120, -127, -123, 121,
+        13, 10, // 3
+        48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 49, 58, 52, 57, 80, 77,
+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 52, 32,
+        -126, -28, -126, -83, -119, -51, -126, -52, -105, -84, -126, -22, -126, -51,
+        -112, -30, -126, -90, -126, -72, -126, -75, -126, -60, -127, 65, -126, -75, -126, -87, -126, -32, -126,
+        -32, -126, -58, -126, -52, -112, -123, -126, -55, -126, -96, -126, -25, -126, -72, 46, 116, 120, 116,
+        13, 10, // 4
+        48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 50, 58, 52, 54, 80, 77,
+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 53, 32,
+        -125, 76, -125, -125, -125, 98, -125, 86, -125, 116, -125, -115, -127, 91, -116, 118, -114, 90, -113, -111,
+        13, 10, // 5
+        48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 50, 58, 52, 54, 80, 77,
+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 54, 32,
+        -125, 76, -125, -125, -125, 98, -125, 86, -125, -123, -125, 116, -125, -115, -127, 91, -116, 118, -114, 90, -113, -111,
+        13, 10, // 6
+        48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 49, 58, 52, 57, 80, 77,
+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 55, 32,
+        -114, 79, -116, -38, -126, -52, -105, -25, 46, 116, 120, 116,
+        13, 10, // 7
+        48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 49, 58, 52, 57, 80, 77,
+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 56, 32,
+        -111, -66, -116, -10, -106, 93, 46, 116, 120, 116,
+        13, 10, // 8
+        48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 50, 58, 53, 52, 80, 77,
+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 57, 32,
+        -113, -84, -106, -20, -106, -123, -114, 113,
+        13, 10, // 9
+        48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 49, 58, 52, 57, 80, 77,
+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 48, 32,
+        -119, -28, -109, 99, -118, -108, -114, -82, -119, -17, -114, -48, -120, -8, -112, -123, -108, 95, -117, -58, 46, 80, 68, 70,
+        13, 10, // 10
+        48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 50, 58, 49, 49, 80, 77,
+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 49, 32,
+        -112, -124, -99, -56, 46, 116, 120, 116,
+        13, 10, // 11
+        48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 50, 58, 52, 51, 80, 77,
+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 50, 32,
+        -117, -76, -116, -123,
+        13, 10, // 12
+        48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 50, 58, 49, 50, 80, 77,
+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 51, 32,
+        -114, -107, -111, -123, -108, 94, -104, 82,
+        13, 10, //13
+        48, 55, 45, 48, 51, 45, 49, 51, 32, 32, 48, 50, 58, 51, 53, 80, 77,
+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 52, 32,
+        -112, -123, -117, -101, -126, -52, -116, -16, -126, -19, -126, -24, 46, 116, 120, 116,
+        13, 10, // 14
+        48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 50, 58, 49, 50, 80, 77,
+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 53, 32,
+        -114, -123, -117, -101, -112, -20,
+        13, 10, //15
+        48, 55, 45, 49, 55, 45, 49, 51, 32, 32, 48, 49, 58, 52, 57, 80, 77,
+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 54, 32,
+        -107, -94, -112, -123, -106, 126, -126, -55, -107, -44, -126, -25, -126, -72, 46, 116, 120, 116,
+        13, 10 // 16
+        };
@@ -100 +158,2 @@ public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework {
-    public NTFTPEntryParserTest(final String name) {
+    public NTFTPEntryParserTest (final String name)
+    {
@@ -105,3 +164,6 @@ public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework {
-    protected void doAdditionalGoodTests(final String test, final FTPFile f) {
-        if (test.indexOf("<DIR>") >= 0) {
-            assertEquals("directory.type", FTPFile.DIRECTORY_TYPE, f.getType());
+    protected void doAdditionalGoodTests(final String test, final FTPFile f)
+    {
+        if (test.indexOf("<DIR>") >= 0)
+        {
+                    assertEquals("directory.type",
+                            FTPFile.DIRECTORY_TYPE, f.getType());
@@ -115 +177,2 @@ public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework {
-    protected String[][] getBadListings() {
+    protected String[][] getBadListings()
+    {
@@ -123 +186,2 @@ public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework {
-    protected String[][] getGoodListings() {
+    protected String[][] getGoodListings()
+    {
@@ -131,2 +195,6 @@ public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework {
-    protected FTPFileEntryParser getParser() {
-        return new CompositeFileEntryParser(new FTPFileEntryParser[] { new NTFTPEntryParser(), new UnixFTPEntryParser()
+    protected FTPFileEntryParser getParser()
+    {
+       return new CompositeFileEntryParser(new FTPFileEntryParser[]
+        {
+            new NTFTPEntryParser(),
+            new UnixFTPEntryParser()
@@ -142,0 +211 @@ public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework {
+
@@ -144 +213,3 @@ public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework {
-     * test condition reported as bug 20259 - now NET-106. directory with name beginning with a numeric character was not parsing correctly
+     * test condition reported as bug 20259 - now NET-106.
+     * directory with name beginning with a numeric character
+     * was not parsing correctly
@@ -146 +217,2 @@ public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework {
-    public void testDirectoryBeginningWithNumber() {
+    public void testDirectoryBeginningWithNumber()
+    {
@@ -151 +223,2 @@ public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework {
-    public void testDirectoryBeginningWithNumberFollowedBySpaces() {
+    public void testDirectoryBeginningWithNumberFollowedBySpaces()
+    {
@@ -176,2 +249,2 @@ public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework {
-        assertNotNull("Could not parse time", timestamp);
-        assertEquals("Thu May 22 12:08:00 1997", df.format(timestamp.getTime()));
+        assertNotNull("Could not parse time",timestamp);
+        assertEquals("Thu May 22 12:08:00 1997",df.format(timestamp.getTime()));
@@ -183,3 +256,3 @@ public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework {
-        assertNotNull("Could not parse time", timestamp);
-        assertEquals("Tue Dec 03 06:38:00 1996", df.format(timestamp.getTime()));
-    }
+        assertNotNull("Could not parse time",timestamp);
+        assertEquals("Tue Dec 03 06:38:00 1996",df.format(timestamp.getTime()));
+}
@@ -198,2 +271,2 @@ public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework {
-        final FTPListParseEngine engine = new FTPListParseEngine(parser);
-        engine.readServerList(new ByteArrayInputStream(listFilesByteTrace), charset);
+        final FTPListParseEngine engine = new FTPListParseEngine(parser );
+        engine.readServerList(new ByteArrayInputStream(listFilesByteTrace),charset);
@@ -208 +281,2 @@ public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework {
-    public void testParseFieldsOnDirectory() throws Exception {
+    public void testParseFieldsOnDirectory() throws Exception
+    {
@@ -211,2 +285,4 @@ public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework {
-        assertEquals("Thu Dec 05 17:03:00 1996", df.format(dir.getTimestamp().getTime()));
-        assertTrue("Should have been a directory.", dir.isDirectory());
+        assertEquals("Thu Dec 05 17:03:00 1996",
+                     df.format(dir.getTimestamp().getTime()));
+        assertTrue("Should have been a directory.",
+                   dir.isDirectory());
@@ -218 +294,2 @@ public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework {
-        assertTrue("Should have been a directory.", dir.isDirectory());
+        assertTrue("Should have been a directory.",
+                dir.isDirectory());
@@ -228 +305,2 @@ public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework {
-    public void testParseFieldsOnFile() throws Exception {
+    public void testParseFieldsOnFile() throws Exception
+    {
@@ -231,2 +309,4 @@ public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework {
-        assertEquals("Thu May 22 00:08:00 1997", df.format(f.getTimestamp().getTime()));
-        assertTrue("Should have been a file.", f.isFile());
+        assertEquals("Thu May 22 00:08:00 1997",
+                     df.format(f.getTimestamp().getTime()));
+        assertTrue("Should have been a file.",
+                   f.isFile());
@@ -239 +319,2 @@ public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework {
-        f = getParser().parseFTPEntry("-rw-rw-r--   1 mqm        mqm          17707 Mar 12  3:33 killmq.sh.log");
+        f = getParser().parseFTPEntry(
+                "-rw-rw-r--   1 mqm        mqm          17707 Mar 12  3:33 killmq.sh.log");
@@ -244 +325,2 @@ public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework {
-        assertTrue("Should have been a file.", f.isFile());
+        assertTrue("Should have been a file.",
+                f.isFile());
@@ -249,7 +331,7 @@ public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework {
-        final FTPFile file = getParser().parseFTPEntry("05-22-97  12:08AM                  5000000000 10 years and under");
-        assertNotNull("Could not parse entry", file);
-        assertEquals("10 years and under", file.getName());
-        assertEquals(5000000000L, file.getSize());
-        Calendar timestamp = file.getTimestamp();
-        assertNotNull("Could not parse time", timestamp);
-        assertEquals("Thu May 22 00:08:00 1997", df.format(timestamp.getTime()));
+            final FTPFile file = getParser().parseFTPEntry("05-22-97  12:08AM                  5000000000 10 years and under");
+            assertNotNull("Could not parse entry", file);
+            assertEquals("10 years and under", file.getName());
+            assertEquals(5000000000L, file.getSize());
+            Calendar timestamp = file.getTimestamp();
+            assertNotNull("Could not parse time",timestamp);
+            assertEquals("Thu May 22 00:08:00 1997",df.format(timestamp.getTime()));
@@ -257,6 +339,6 @@ public class NTFTPEntryParserTest extends CompositeFTPParseTestFramework {
-        final FTPFile dir = getParser().parseFTPEntry("12-03-96  06:38PM       <DIR>           10 years and under");
-        assertNotNull("Could not parse entry", dir);
-        assertEquals("10 years and under", dir.getName());
-        timestamp = dir.getTimestamp();
-        assertNotNull("Could not parse time", timestamp);
-        assertEquals("Tue Dec 03 18:38:00 1996", df.format(timestamp.getTime()));
+            final FTPFile dir = getParser().parseFTPEntry("12-03-96  06:38PM       <DIR>           10 years and under");
+            assertNotNull("Could not parse entry", dir);
+            assertEquals("10 years and under", dir.getName());
+            timestamp = dir.getTimestamp();
+            assertNotNull("Could not parse time",timestamp);
+            assertEquals("Tue Dec 03 18:38:00 1996",df.format(timestamp.getTime()));
diff --git a/src/test/java/org/apache/commons/net/ftp/parser/NetwareFTPEntryParserTest.java b/src/test/java/org/apache/commons/net/ftp/parser/NetwareFTPEntryParserTest.java
index a41dfc62f..23f3f49dd 100644
--- a/src/test/java/org/apache/commons/net/ftp/parser/NetwareFTPEntryParserTest.java
+++ b/src/test/java/org/apache/commons/net/ftp/parser/NetwareFTPEntryParserTest.java
@@ -28,7 +28,12 @@ public class NetwareFTPEntryParserTest extends FTPParseTestFramework {
-    private static final String[] badsamples = { "a [-----F--] SCION_SYS                         512 Apr 13 23:52 SYS",
-            "d [----AF--]          0                        512 10-04-2001 _ADMIN" };
-
-    private static final String[] goodsamples = { "d [-----F--] SCION_SYS                         512 Apr 13 23:52 SYS",
-            "d [----AF--]          0                        512 Feb 22 17:32 _ADMIN", "d [-W---F--] SCION_VOL2                        512 Apr 13 23:12 VOL2",
-            "- [RWCEAFMS] rwinston                        19968 Mar 12 15:20 Executive Summary.doc",
-            "d [RWCEAFMS] rwinston                          512 Nov 24  2005 Favorites" };
+    private static final String[] badsamples = {
+        "a [-----F--] SCION_SYS                         512 Apr 13 23:52 SYS",
+            "d [----AF--]          0                        512 10-04-2001 _ADMIN"
+    };
+
+    private static final String [] goodsamples = {
+        "d [-----F--] SCION_SYS                         512 Apr 13 23:52 SYS",
+        "d [----AF--]          0                        512 Feb 22 17:32 _ADMIN",
+        "d [-W---F--] SCION_VOL2                        512 Apr 13 23:12 VOL2",
+        "- [RWCEAFMS] rwinston                        19968 Mar 12 15:20 Executive Summary.doc",
+        "d [RWCEAFMS] rwinston                          512 Nov 24  2005 Favorites"
+    };
@@ -59,0 +65 @@ public class NetwareFTPEntryParserTest extends FTPParseTestFramework {
+
@@ -80 +86,2 @@ public class NetwareFTPEntryParserTest extends FTPParseTestFramework {
-        assertEquals(df.format(cal.getTime()), df.format(f.getTimestamp().getTime()));
+        assertEquals(df.format(cal.getTime()), df.format(f.getTimestamp()
+                .getTime()));
@@ -105,0 +113,2 @@ public class NetwareFTPEntryParserTest extends FTPParseTestFramework {
+
+
diff --git a/src/test/java/org/apache/commons/net/ftp/parser/OS2FTPEntryParserTest.java b/src/test/java/org/apache/commons/net/ftp/parser/OS2FTPEntryParserTest.java
index af3bf2e57..715c98cc7 100644
--- a/src/test/java/org/apache/commons/net/ftp/parser/OS2FTPEntryParserTest.java
+++ b/src/test/java/org/apache/commons/net/ftp/parser/OS2FTPEntryParserTest.java
@@ -22 +22,2 @@ import org.apache.commons.net.ftp.FTPFileEntryParser;
-public class OS2FTPEntryParserTest extends FTPParseTestFramework {
+public class OS2FTPEntryParserTest extends FTPParseTestFramework
+{
@@ -24,4 +25,11 @@ public class OS2FTPEntryParserTest extends FTPParseTestFramework {
-    private static final String[] badsamples = { "                 DIR   12-30-97   12:32  jbrekke", "     0    rsa    DIR   11-25-97   09:42  junk",
-            "     0           dir   05-12-97   16:44  LANGUAGE", "     0           DIR   13-05-97   25:49  MPTN",
-            "587823    RSA    DIR   Jan-08-97   13:58  OS2KRNL", " 33280      A          1997-02-03  13:49  OS2LDR",
-            "12-05-96  05:03PM       <DIR>          absoft2", "11-14-97  04:21PM                  953 AUDITOR3.INI" };
+    private static final String[] badsamples =
+    {
+        "                 DIR   12-30-97   12:32  jbrekke",
+        "     0    rsa    DIR   11-25-97   09:42  junk",
+        "     0           dir   05-12-97   16:44  LANGUAGE",
+        "     0           DIR   13-05-97   25:49  MPTN",
+        "587823    RSA    DIR   Jan-08-97   13:58  OS2KRNL",
+        " 33280      A          1997-02-03  13:49  OS2LDR",
+        "12-05-96  05:03PM       <DIR>          absoft2",
+        "11-14-97  04:21PM                  953 AUDITOR3.INI"
+    };
@@ -29,6 +37,15 @@ public class OS2FTPEntryParserTest extends FTPParseTestFramework {
-    private static final String[] goodsamples = { "     0           DIR   12-30-97   12:32  jbrekke", "     0           DIR   11-25-97   09:42  junk",
-            "     0           DIR   05-12-97   16:44  LANGUAGE", "     0           DIR   05-19-97   12:56  local",
-            "     0           DIR   05-12-97   16:52  Maintenance Desktop", "     0           DIR   05-13-97   10:49  MPTN",
-            "587823    RSA    DIR   01-08-97   13:58  OS2KRNL", " 33280      A          02-09-97   13:49  OS2LDR",
-            "     0           DIR   11-28-97   09:42  PC", "149473      A          11-17-98   16:07  POPUPLOG.OS2",
-            "     0           DIR   05-12-97   16:44  PSFONTS", "     0           DIR   05-19-2000 12:56  local", };
+    private static final String[] goodsamples =
+    {
+        "     0           DIR   12-30-97   12:32  jbrekke",
+        "     0           DIR   11-25-97   09:42  junk",
+        "     0           DIR   05-12-97   16:44  LANGUAGE",
+        "     0           DIR   05-19-97   12:56  local",
+        "     0           DIR   05-12-97   16:52  Maintenance Desktop",
+        "     0           DIR   05-13-97   10:49  MPTN",
+        "587823    RSA    DIR   01-08-97   13:58  OS2KRNL",
+        " 33280      A          02-09-97   13:49  OS2LDR",
+        "     0           DIR   11-28-97   09:42  PC",
+        "149473      A          11-17-98   16:07  POPUPLOG.OS2",
+        "     0           DIR   05-12-97   16:44  PSFONTS",
+        "     0           DIR   05-19-2000 12:56  local",
+    };
@@ -36 +53,2 @@ public class OS2FTPEntryParserTest extends FTPParseTestFramework {
-    public OS2FTPEntryParserTest(final String name) {
+    public OS2FTPEntryParserTest(final String name)
+    {
@@ -41 +59,2 @@ public class OS2FTPEntryParserTest extends FTPParseTestFramework {
-    protected String[] getBadListing() {
+    protected String[] getBadListing()
+    {
@@ -47 +66,2 @@ public class OS2FTPEntryParserTest extends FTPParseTestFramework {
-    protected String[] getGoodListing() {
+    protected String[] getGoodListing()
+    {
@@ -53 +73,2 @@ public class OS2FTPEntryParserTest extends FTPParseTestFramework {
-    protected FTPFileEntryParser getParser() {
+    protected FTPFileEntryParser getParser()
+    {
@@ -66 +87,2 @@ public class OS2FTPEntryParserTest extends FTPParseTestFramework {
-    public void testParseFieldsOnDirectory() throws Exception {
+    public void testParseFieldsOnDirectory() throws Exception
+    {
@@ -76 +98,2 @@ public class OS2FTPEntryParserTest extends FTPParseTestFramework {
-    public void testParseFieldsOnFile() throws Exception {
+    public void testParseFieldsOnFile() throws Exception
+    {
diff --git a/src/test/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParserAdditionalTest.java b/src/test/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParserAdditionalTest.java
index 68af2a66c..42a69384c 100644
--- a/src/test/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParserAdditionalTest.java
+++ b/src/test/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParserAdditionalTest.java
@@ -27,13 +27,29 @@ import org.apache.commons.net.ftp.FTPFileEntryParser;
-public class OS400FTPEntryParserAdditionalTest extends CompositeFTPParseTestFramework {
-    private static final String[][] badsamples = { { "QPGMR          135168 04/03/18 13:18:19 *FILE", "QPGMR          135168    03/24 13:18:19 *FILE",
-            "QPGMR          135168 04/03/18 30:06:29 *FILE", "QPGMR                 04/03/18 13:18:19 *FILE      RPGUNITC1.FILE",
-            "QPGMR          135168    03/24 13:18:19 *FILE      RPGUNITC1.FILE", "QPGMR          135168 04/03/18 30:06:29 *FILE      RPGUNITC1.FILE",
-            "QPGMR                                   *MEM       ", "QPGMR          135168 04/03/18 13:18:19 *MEM       RPGUNITC1.FILE/RUCALLTST.MBR",
-            "QPGMR          135168                   *MEM       RPGUNITC1.FILE/RUCALLTST.MBR",
-            "QPGMR                 04/03/18 13:18:19 *MEM       RPGUNITC1.FILE/RUCALLTST.MBR",
-            "QPGMR USR                               *MEM       RPGUNITC1.FILE/RUCALLTST.MBR" } };
-
-    private static final String[][] goodsamples = { { "QPGMR                                   *MEM       RPGUNITC1.FILE/RUCALLTST.MBR",
-            "QPGMR        16347136 29.06.13 15:45:09 *FILE      RPGUNIT.SAVF" } };
-
-    public OS400FTPEntryParserAdditionalTest(final String name) {
+public class OS400FTPEntryParserAdditionalTest extends CompositeFTPParseTestFramework
+{
+    private static final String[][] badsamples =
+{
+    {
+        "QPGMR          135168 04/03/18 13:18:19 *FILE",
+        "QPGMR          135168    03/24 13:18:19 *FILE",
+        "QPGMR          135168 04/03/18 30:06:29 *FILE",
+        "QPGMR                 04/03/18 13:18:19 *FILE      RPGUNITC1.FILE",
+        "QPGMR          135168    03/24 13:18:19 *FILE      RPGUNITC1.FILE",
+        "QPGMR          135168 04/03/18 30:06:29 *FILE      RPGUNITC1.FILE",
+        "QPGMR                                   *MEM       ",
+        "QPGMR          135168 04/03/18 13:18:19 *MEM       RPGUNITC1.FILE/RUCALLTST.MBR",
+        "QPGMR          135168                   *MEM       RPGUNITC1.FILE/RUCALLTST.MBR",
+        "QPGMR                 04/03/18 13:18:19 *MEM       RPGUNITC1.FILE/RUCALLTST.MBR",
+        "QPGMR USR                               *MEM       RPGUNITC1.FILE/RUCALLTST.MBR"
+            }
+    };
+
+    private static final String[][] goodsamples =
+        {
+    {
+        "QPGMR                                   *MEM       RPGUNITC1.FILE/RUCALLTST.MBR",
+        "QPGMR        16347136 29.06.13 15:45:09 *FILE      RPGUNIT.SAVF"
+            }
+    };
+
+    public OS400FTPEntryParserAdditionalTest(final String name)
+    {
@@ -44,3 +60,6 @@ public class OS400FTPEntryParserAdditionalTest extends CompositeFTPParseTestFram
-    protected void doAdditionalGoodTests(final String test, final FTPFile f) {
-        if (test.startsWith("d")) {
-            assertEquals("directory.type", FTPFile.DIRECTORY_TYPE, f.getType());
+    protected void doAdditionalGoodTests(final String test, final FTPFile f)
+    {
+        if (test.startsWith("d"))
+        {
+            assertEquals("directory.type",
+                FTPFile.DIRECTORY_TYPE, f.getType());
@@ -51 +70,2 @@ public class OS400FTPEntryParserAdditionalTest extends CompositeFTPParseTestFram
-    protected String[][] getBadListings() {
+    protected String[][] getBadListings()
+    {
@@ -56 +76,2 @@ public class OS400FTPEntryParserAdditionalTest extends CompositeFTPParseTestFram
-    protected String[][] getGoodListings() {
+    protected String[][] getGoodListings()
+    {
@@ -61,2 +82,7 @@ public class OS400FTPEntryParserAdditionalTest extends CompositeFTPParseTestFram
-    protected FTPFileEntryParser getParser() {
-        return new CompositeFileEntryParser(new FTPFileEntryParser[] { new OS400FTPEntryParser(), new UnixFTPEntryParser() });
+    protected FTPFileEntryParser getParser()
+    {
+        return new CompositeFileEntryParser(new FTPFileEntryParser[]
+        {
+            new OS400FTPEntryParser(),
+            new UnixFTPEntryParser()
+        });
@@ -71 +97,2 @@ public class OS400FTPEntryParserAdditionalTest extends CompositeFTPParseTestFram
-    public void testParseFieldsOnDirectory() throws Exception {
+    public void testParseFieldsOnDirectory() throws Exception
+    {
@@ -73,5 +100,10 @@ public class OS400FTPEntryParserAdditionalTest extends CompositeFTPParseTestFram
-        assertNotNull("Could not parse entry.", f);
-        assertTrue("Should have been a directory.", f.isDirectory());
-        assertEquals("PEP", f.getUser());
-        assertEquals("dir1", f.getName());
-        assertEquals(36864, f.getSize());
+        assertNotNull("Could not parse entry.",
+                      f);
+        assertTrue("Should have been a directory.",
+                   f.isDirectory());
+        assertEquals("PEP",
+                     f.getUser());
+        assertEquals("dir1",
+                     f.getName());
+        assertEquals(36864,
+                     f.getSize());
@@ -88 +120,2 @@ public class OS400FTPEntryParserAdditionalTest extends CompositeFTPParseTestFram
-        assertEquals(df.format(cal.getTime()), df.format(f.getTimestamp().getTime()));
+        assertEquals(df.format(cal.getTime()),
+                     df.format(f.getTimestamp().getTime()));
@@ -92 +125,2 @@ public class OS400FTPEntryParserAdditionalTest extends CompositeFTPParseTestFram
-    public void testParseFieldsOnFile() throws Exception {
+    public void testParseFieldsOnFile() throws Exception
+    {
@@ -94,5 +128,10 @@ public class OS400FTPEntryParserAdditionalTest extends CompositeFTPParseTestFram
-        assertNotNull("Could not parse entry.", f);
-        assertTrue("Should have been a file.", f.isFile());
-        assertEquals("PEP", f.getUser());
-        assertEquals("build.xml", f.getName());
-        assertEquals(5000000000L, f.getSize());
+        assertNotNull("Could not parse entry.",
+                      f);
+        assertTrue("Should have been a file.",
+                   f.isFile());
+        assertEquals("PEP",
+                     f.getUser());
+        assertEquals("build.xml",
+                     f.getName());
+        assertEquals(5000000000L,
+                     f.getSize());
@@ -108 +147,2 @@ public class OS400FTPEntryParserAdditionalTest extends CompositeFTPParseTestFram
-        assertEquals(df.format(cal.getTime()), df.format(f.getTimestamp().getTime()));
+        assertEquals(df.format(cal.getTime()),
+                     df.format(f.getTimestamp().getTime()));
diff --git a/src/test/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParserTest.java b/src/test/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParserTest.java
index 8e082b1cd..1eb09fceb 100644
--- a/src/test/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParserTest.java
+++ b/src/test/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParserTest.java
@@ -28,16 +28,37 @@ import org.apache.commons.net.ftp.FTPFileEntryParser;
-public class OS400FTPEntryParserTest extends CompositeFTPParseTestFramework {
-    private static final String[][] badsamples = {
-            { "PEP              4019 04/03/18 18:58:16 STMF       einladung.zip", "PEP               422 03/24 14:06:26 *STMF      readme",
-                    "PEP              6409 04/03/24 30:06:29 *STMF      build.xml", "PEP USR         36864 04/03/24 14:06:34 *DIR       dir1/",
-                    "PEP             3686404/03/24 14:06:47 *DIR       zdir2/" },
-
-            { "----rwxr-x   1PEP       0           4019 Mar 18 18:58 einladung.zip", "----rwxr-x   1 PEP      0  xx        422 Mar 24 14:06 readme",
-                    "----rwxr-x   1 PEP      0           8492 Apr 07 30:13 build.xml", "d---rwxr-x   2 PEP      0          45056Mar 24 14:06 zdir2" } };
-
-    private static final String[][] goodsamples = {
-            { "PEP              4019 04/03/18 18:58:16 *STMF      einladung.zip", "PEP               422 04/03/24 14:06:26 *STMF      readme",
-                    "PEP              6409 04/03/24 14:06:29 *STMF      build.xml", "PEP             36864 04/03/24 14:06:34 *DIR       dir1/",
-                    "PEP             36864 04/03/24 14:06:47 *DIR       zdir2/" },
-            { "----rwxr-x   1 PEP      0           4019 Mar 18 18:58 einladung.zip", "----rwxr-x   1 PEP      0            422 Mar 24 14:06 readme",
-                    "----rwxr-x   1 PEP      0           8492 Apr 07 07:13 build.xml", "d---rwxr-x   2 PEP      0          45056 Mar 24 14:06 dir1",
-                    "d---rwxr-x   2 PEP      0          45056 Mar 24 14:06 zdir2" } };
+public class OS400FTPEntryParserTest extends CompositeFTPParseTestFramework
+{
+    private static final String[][] badsamples =
+{
+    {
+        "PEP              4019 04/03/18 18:58:16 STMF       einladung.zip",
+        "PEP               422 03/24 14:06:26 *STMF      readme",
+        "PEP              6409 04/03/24 30:06:29 *STMF      build.xml",
+        "PEP USR         36864 04/03/24 14:06:34 *DIR       dir1/",
+        "PEP             3686404/03/24 14:06:47 *DIR       zdir2/"
+            },
+
+            {
+                "----rwxr-x   1PEP       0           4019 Mar 18 18:58 einladung.zip",
+                "----rwxr-x   1 PEP      0  xx        422 Mar 24 14:06 readme",
+                "----rwxr-x   1 PEP      0           8492 Apr 07 30:13 build.xml",
+                "d---rwxr-x   2 PEP      0          45056Mar 24 14:06 zdir2"
+            }
+    };
+
+    private static final String[][] goodsamples =
+        {
+    {
+        "PEP              4019 04/03/18 18:58:16 *STMF      einladung.zip",
+        "PEP               422 04/03/24 14:06:26 *STMF      readme",
+        "PEP              6409 04/03/24 14:06:29 *STMF      build.xml",
+        "PEP             36864 04/03/24 14:06:34 *DIR       dir1/",
+        "PEP             36864 04/03/24 14:06:47 *DIR       zdir2/"
+            },
+            {
+                "----rwxr-x   1 PEP      0           4019 Mar 18 18:58 einladung.zip",
+                "----rwxr-x   1 PEP      0            422 Mar 24 14:06 readme",
+                "----rwxr-x   1 PEP      0           8492 Apr 07 07:13 build.xml",
+                "d---rwxr-x   2 PEP      0          45056 Mar 24 14:06 dir1",
+                "d---rwxr-x   2 PEP      0          45056 Mar 24 14:06 zdir2"
+            }
+    };
@@ -48 +69,2 @@ public class OS400FTPEntryParserTest extends CompositeFTPParseTestFramework {
-    public OS400FTPEntryParserTest(final String name) {
+    public OS400FTPEntryParserTest(final String name)
+    {
@@ -53,3 +75,6 @@ public class OS400FTPEntryParserTest extends CompositeFTPParseTestFramework {
-    protected void doAdditionalGoodTests(final String test, final FTPFile f) {
-        if (test.startsWith("d")) {
-            assertEquals("directory.type", FTPFile.DIRECTORY_TYPE, f.getType());
+    protected void doAdditionalGoodTests(final String test, final FTPFile f)
+    {
+        if (test.startsWith("d"))
+        {
+            assertEquals("directory.type",
+                FTPFile.DIRECTORY_TYPE, f.getType());
@@ -63 +88,2 @@ public class OS400FTPEntryParserTest extends CompositeFTPParseTestFramework {
-    protected String[][] getBadListings() {
+    protected String[][] getBadListings()
+    {
@@ -71 +97,2 @@ public class OS400FTPEntryParserTest extends CompositeFTPParseTestFramework {
-    protected String[][] getGoodListings() {
+    protected String[][] getGoodListings()
+    {
@@ -79,2 +106,7 @@ public class OS400FTPEntryParserTest extends CompositeFTPParseTestFramework {
-    protected FTPFileEntryParser getParser() {
-        return new CompositeFileEntryParser(new FTPFileEntryParser[] { new OS400FTPEntryParser(), new UnixFTPEntryParser() });
+    protected FTPFileEntryParser getParser()
+    {
+        return new CompositeFileEntryParser(new FTPFileEntryParser[]
+        {
+            new OS400FTPEntryParser(),
+            new UnixFTPEntryParser()
+        });
@@ -88 +120,2 @@ public class OS400FTPEntryParserTest extends CompositeFTPParseTestFramework {
-    public void testNET573() {
+    public void testNET573()
+    {
@@ -116 +149,2 @@ public class OS400FTPEntryParserTest extends CompositeFTPParseTestFramework {
-    public void testParseFieldsOnDirectory() throws Exception {
+    public void testParseFieldsOnDirectory() throws Exception
+    {
@@ -118,5 +152,10 @@ public class OS400FTPEntryParserTest extends CompositeFTPParseTestFramework {
-        assertNotNull("Could not parse entry.", f);
-        assertTrue("Should have been a directory.", f.isDirectory());
-        assertEquals("PEP", f.getUser());
-        assertEquals("dir1", f.getName());
-        assertEquals(36864, f.getSize());
+        assertNotNull("Could not parse entry.",
+                      f);
+        assertTrue("Should have been a directory.",
+                   f.isDirectory());
+        assertEquals("PEP",
+                     f.getUser());
+        assertEquals("dir1",
+                     f.getName());
+        assertEquals(36864,
+                     f.getSize());
@@ -133 +172,2 @@ public class OS400FTPEntryParserTest extends CompositeFTPParseTestFramework {
-        assertEquals(df.format(cal.getTime()), df.format(f.getTimestamp().getTime()));
+        assertEquals(df.format(cal.getTime()),
+                     df.format(f.getTimestamp().getTime()));
@@ -140 +180,2 @@ public class OS400FTPEntryParserTest extends CompositeFTPParseTestFramework {
-    public void testParseFieldsOnFile() throws Exception {
+    public void testParseFieldsOnFile() throws Exception
+    {
@@ -142,5 +183,10 @@ public class OS400FTPEntryParserTest extends CompositeFTPParseTestFramework {
-        assertNotNull("Could not parse entry.", f);
-        assertTrue("Should have been a file.", f.isFile());
-        assertEquals("PEP", f.getUser());
-        assertEquals("build.xml", f.getName());
-        assertEquals(5000000000L, f.getSize());
+        assertNotNull("Could not parse entry.",
+                      f);
+        assertTrue("Should have been a file.",
+                   f.isFile());
+        assertEquals("PEP",
+                     f.getUser());
+        assertEquals("build.xml",
+                     f.getName());
+        assertEquals(5000000000L,
+                     f.getSize());
@@ -156 +202,2 @@ public class OS400FTPEntryParserTest extends CompositeFTPParseTestFramework {
-        assertEquals(df.format(cal.getTime()), df.format(f.getTimestamp().getTime()));
+        assertEquals(df.format(cal.getTime()),
+                     df.format(f.getTimestamp().getTime()));
diff --git a/src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java b/src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java
index da2884658..9e0dc6347 100644
--- a/src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java
+++ b/src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java
@@ -28,5 +28,9 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-    private static final String[] badsamples = { "zrwxr-xr-x   2 root     root         4096 Mar  2 15:13 zxbox",
-            "dxrwr-xr-x   2 root     root         4096 Aug 24  2001 zxjdbc", "drwxr-xr-x   2 root     root         4096 Jam  4 00:03 zziplib",
-            "drwxr-xr-x   2 root     99           4096 Feb 23 30:01 zzplayer", "drwxr-xr-x   2 root     root         4096 Aug 36  2001 zztpp",
-            "-rw-r--r--   1 14       staff       80284 Aug 22  zxJDBC-1.2.3.tar.gz", "-rw-r--r--   1 14       staff      119:26 Aug 22  2000 zxJDBC-1.2.3.zip",
-            /* "-rw-r--r--   1 ftp      no group    83853 Jan 22  2001 zxJDBC-1.2.4.tar.gz", */
+    private static final String[] badsamples = {
+            "zrwxr-xr-x   2 root     root         4096 Mar  2 15:13 zxbox",
+            "dxrwr-xr-x   2 root     root         4096 Aug 24  2001 zxjdbc",
+            "drwxr-xr-x   2 root     root         4096 Jam  4 00:03 zziplib",
+            "drwxr-xr-x   2 root     99           4096 Feb 23 30:01 zzplayer",
+            "drwxr-xr-x   2 root     root         4096 Aug 36  2001 zztpp",
+            "-rw-r--r--   1 14       staff       80284 Aug 22  zxJDBC-1.2.3.tar.gz",
+            "-rw-r--r--   1 14       staff      119:26 Aug 22  2000 zxJDBC-1.2.3.zip",
+            /*"-rw-r--r--   1 ftp      no group    83853 Jan 22  2001 zxJDBC-1.2.4.tar.gz",*/
@@ -37,4 +41,9 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-    private static final String[] goodsamples = { "-rw-r--r--   1 500      500            21 Aug  8 14:14 JB3-TES1.gz",
-            "-rwxr-xr-x   2 root     root         4096 Mar  2 15:13 zxbox", "drwxr-xr-x   2 root     root         4096 Aug 24  2001 zxjdbc",
-            "drwxr-xr-x   2 root     root         4096 Jan  4 00:03 zziplib", "drwxr-xr-x   2 root     99           4096 Feb 23  2001 zzplayer",
-            "drwxr-xr-x   2 root     root         4096 Aug  6  2001 zztpp", "drwxr-xr-x 1 usernameftp 512 Jan 29 23:32 prog",
+    private static final String[] goodsamples =
+    {
+            "-rw-r--r--   1 500      500            21 Aug  8 14:14 JB3-TES1.gz",
+            "-rwxr-xr-x   2 root     root         4096 Mar  2 15:13 zxbox",
+            "drwxr-xr-x   2 root     root         4096 Aug 24  2001 zxjdbc",
+            "drwxr-xr-x   2 root     root         4096 Jan  4 00:03 zziplib",
+            "drwxr-xr-x   2 root     99           4096 Feb 23  2001 zzplayer",
+            "drwxr-xr-x   2 root     root         4096 Aug  6  2001 zztpp",
+            "drwxr-xr-x 1 usernameftp 512 Jan 29 23:32 prog",
@@ -53,4 +62,8 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-            "-rw-r--r--   1 500      500       2040000 Aug  5 07:31 testRemoteUPVCopyNIX", "-rw-r--r-T   1 500      500             0 Mar 25 08:20 testSticky",
-            "-rwxr-xr-t   1 500      500             0 Mar 25 08:21 testStickyExec", "-rwSr-Sr--   1 500      500             0 Mar 25 08:22 testSuid",
-            "-rwsr-sr--   1 500      500             0 Mar 25 08:23 testSuidExec", "-rwsr-sr--   1 500      500             0 Mar 25 0:23 testSuidExec2",
-            "drwxrwx---+ 23 500     500    0 Jan 10 13:09 testACL", "-rw-r--r--   1 1        3518644 May 25 12:12 std",
+            "-rw-r--r--   1 500      500       2040000 Aug  5 07:31 testRemoteUPVCopyNIX",
+            "-rw-r--r-T   1 500      500             0 Mar 25 08:20 testSticky",
+            "-rwxr-xr-t   1 500      500             0 Mar 25 08:21 testStickyExec",
+            "-rwSr-Sr--   1 500      500             0 Mar 25 08:22 testSuid",
+            "-rwsr-sr--   1 500      500             0 Mar 25 08:23 testSuidExec",
+            "-rwsr-sr--   1 500      500             0 Mar 25 0:23 testSuidExec2",
+            "drwxrwx---+ 23 500     500    0 Jan 10 13:09 testACL",
+            "-rw-r--r--   1 1        3518644 May 25 12:12 std",
@@ -58,4 +71,5 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-            "-rw-r--r--   1 ftp      group with spaces in it as allowed in cygwin see bug 38634" + "   83853 Jan 22  2001 zxJDBC-1.2.4.tar.gz",
-            // Bug 38634 => NET-16
-            "crw-r----- 1 root kmem 0, 27 Jan 30 11:42 kmem", // FreeBSD device
-            "crw-------   1 root     sys      109,767 Jul  2  2004 pci@1c,600000:devctl", // Solaris device
+            "-rw-r--r--   1 ftp      group with spaces in it as allowed in cygwin see bug 38634" +
+                         "   83853 Jan 22  2001 zxJDBC-1.2.4.tar.gz",
+                                                                                   // Bug 38634 => NET-16
+            "crw-r----- 1 root kmem 0, 27 Jan 30 11:42 kmem",  //FreeBSD device
+            "crw-------   1 root     sys      109,767 Jul  2  2004 pci@1c,600000:devctl", //Solaris device
@@ -65 +79,2 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-            "-rw-r--r-- 1 1 3518644 May 25 12:12 std", "-rw-rw---- 1 ep1adm sapsys 0 6\u6708 3\u65e5 2003\u5e74 \u8a66\u9a13\u30d5\u30a1\u30a4\u30eb.csv",
+            "-rw-r--r-- 1 1 3518644 May 25 12:12 std",
+            "-rw-rw---- 1 ep1adm sapsys 0 6\u6708 3\u65e5 2003\u5e74 \u8a66\u9a13\u30d5\u30a1\u30a4\u30eb.csv",
@@ -75,9 +90,18 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-        assertTrue("Should have user read permission.", f.hasPermission(FTPFile.USER_ACCESS, FTPFile.READ_PERMISSION));
-        assertTrue("Should have user write permission.", f.hasPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION));
-        assertTrue("Should have user execute permission.", f.hasPermission(FTPFile.USER_ACCESS, FTPFile.EXECUTE_PERMISSION));
-        assertTrue("Should have group read permission.", f.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.READ_PERMISSION));
-        assertFalse("Should NOT have group write permission.", f.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.WRITE_PERMISSION));
-        assertTrue("Should have group execute permission.", f.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.EXECUTE_PERMISSION));
-        assertTrue("Should have world read permission.", f.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.READ_PERMISSION));
-        assertFalse("Should NOT have world write permission.", f.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.WRITE_PERMISSION));
-        assertTrue("Should have world execute permission.", f.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.EXECUTE_PERMISSION));
+        assertTrue("Should have user read permission.", f.hasPermission(
+                FTPFile.USER_ACCESS, FTPFile.READ_PERMISSION));
+        assertTrue("Should have user write permission.", f.hasPermission(
+                FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION));
+        assertTrue("Should have user execute permission.", f.hasPermission(
+                FTPFile.USER_ACCESS, FTPFile.EXECUTE_PERMISSION));
+        assertTrue("Should have group read permission.", f.hasPermission(
+                FTPFile.GROUP_ACCESS, FTPFile.READ_PERMISSION));
+        assertFalse("Should NOT have group write permission.", f.hasPermission(
+                FTPFile.GROUP_ACCESS, FTPFile.WRITE_PERMISSION));
+        assertTrue("Should have group execute permission.", f.hasPermission(
+                FTPFile.GROUP_ACCESS, FTPFile.EXECUTE_PERMISSION));
+        assertTrue("Should have world read permission.", f.hasPermission(
+                FTPFile.WORLD_ACCESS, FTPFile.READ_PERMISSION));
+        assertFalse("Should NOT have world write permission.", f.hasPermission(
+                FTPFile.WORLD_ACCESS, FTPFile.WRITE_PERMISSION));
+        assertTrue("Should have world execute permission.", f.hasPermission(
+                FTPFile.WORLD_ACCESS, FTPFile.EXECUTE_PERMISSION));
@@ -97 +121,2 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-        switch (test.charAt(0)) {
+        switch (test.charAt(0))
+        {
@@ -99 +124 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-            assertEquals("Type of " + test, type, FTPFile.DIRECTORY_TYPE);
+            assertEquals("Type of "+ test, type, FTPFile.DIRECTORY_TYPE);
@@ -102,2 +127,2 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-            assertEquals("Type of " + test, type, FTPFile.SYMBOLIC_LINK_TYPE);
-            break;
+             assertEquals("Type of "+ test, type, FTPFile.SYMBOLIC_LINK_TYPE);
+             break;
@@ -110 +135 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-            assertEquals("Type of " + test, type, FTPFile.FILE_TYPE);
+            assertEquals("Type of "+ test, type, FTPFile.FILE_TYPE);
@@ -113 +138 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-            assertEquals("Type of " + test, type, FTPFile.UNKNOWN_TYPE);
+            assertEquals("Type of "+ test, type, FTPFile.UNKNOWN_TYPE);
@@ -116,3 +141,7 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-        for (int access = FTPFile.USER_ACCESS; access <= FTPFile.WORLD_ACCESS; access++) {
-            for (int perm = FTPFile.READ_PERMISSION; perm <= FTPFile.EXECUTE_PERMISSION; perm++) {
-                final int pos = 3 * access + perm + 1;
+        for (int access = FTPFile.USER_ACCESS;
+            access <= FTPFile.WORLD_ACCESS; access++)
+        {
+            for (int perm = FTPFile.READ_PERMISSION;
+                perm <= FTPFile.EXECUTE_PERMISSION; perm++)
+            {
+                final int pos = 3*access + perm + 1;
@@ -120 +149,2 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-                assertEquals("Permission " + test.substring(1, 10), Boolean.valueOf(f.hasPermission(access, perm)),
+                assertEquals("Permission " + test.substring(1,10),
+                        Boolean.valueOf(f.hasPermission(access, perm)),
@@ -125 +155 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-        assertNotNull("Expected to find a timestamp", f.getTimestamp());
+        assertNotNull("Expected to find a timestamp",f.getTimestamp());
@@ -192 +222 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-        assertEquals("  zxbox", f.getName()); // leading spaces retained
+        assertEquals("  zxbox", f.getName() ); // leading spaces retained
@@ -196 +226,2 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-        final FTPFile f = new UnixFTPEntryParser(null, false).parseFTPEntry("drwxr-xr-x   2 john smith     group         4096 Mar  2 15:13   zxbox");
+        final FTPFile f = new UnixFTPEntryParser(null, false).parseFTPEntry(
+            "drwxr-xr-x   2 john smith     group         4096 Mar  2 15:13   zxbox");
@@ -198 +229 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-        assertEquals("  zxbox", f.getName()); // leading spaces retained
+        assertEquals("  zxbox", f.getName() ); // leading spaces retained
@@ -208 +239,2 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-        final FTPFile f = getParser().parseFTPEntry("-rwxrwx---   1 ftp      ftp-admin 816026400 Oct  5  2008 bloplab 7 cd1.img");
+        final FTPFile f = getParser().parseFTPEntry(
+                "-rwxrwx---   1 ftp      ftp-admin 816026400 Oct  5  2008 bloplab 7 cd1.img");
@@ -212,4 +244,4 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-        assertEquals(816026400L, f.getSize());
-        assertNotNull("Timestamp should not be null", f.getTimestamp());
-        assertEquals(2008, f.getTimestamp().get(Calendar.YEAR));
-        assertEquals("bloplab 7 cd1.img", f.getName());
+        assertEquals(816026400L,f.getSize());
+        assertNotNull("Timestamp should not be null",f.getTimestamp());
+        assertEquals(2008,f.getTimestamp().get(Calendar.YEAR));
+        assertEquals("bloplab 7 cd1.img",f.getName());
@@ -228,3 +260,6 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-    public void testNumericDateFormat() {
-        final String testNumericDF = "-rw-r-----   1 neeme neeme   346 2005-04-08 11:22 services.vsp";
-        final String testNumericDF2 = "lrwxrwxrwx   1 neeme neeme    23 2005-03-02 18:06 macros -> ./../../global/macros/.";
+    public void testNumericDateFormat()
+    {
+        final String testNumericDF =
+            "-rw-r-----   1 neeme neeme   346 2005-04-08 11:22 services.vsp";
+        final String testNumericDF2 =
+            "lrwxrwxrwx   1 neeme neeme    23 2005-03-02 18:06 macros -> ./../../global/macros/.";
@@ -232 +267,2 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-        final UnixFTPEntryParser parser = new UnixFTPEntryParser(UnixFTPEntryParser.NUMERIC_DATE_CONFIG);
+        final UnixFTPEntryParser parser =
+            new UnixFTPEntryParser(UnixFTPEntryParser.NUMERIC_DATE_CONFIG);
@@ -236,0 +273 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
+
@@ -265,0 +303 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
+
@@ -297 +335,3 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-        final FTPFile f = getParser().parseFTPEntry("-rwxr-xr-x   2 user     my group 500        5000000000 Mar  2 15:13 zxbox");
+        final FTPFile f = getParser()
+                .parseFTPEntry(
+                        "-rwxr-xr-x   2 user     my group 500        5000000000 Mar  2 15:13 zxbox");
@@ -324 +364,2 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-    public void testParseFieldsOnFileJapaneseTime() {
+    public void testParseFieldsOnFileJapaneseTime()
+    {
@@ -338 +379 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-        cal.set(Calendar.DATE, 1);
+        cal.set(Calendar.DATE,1);
@@ -345 +386 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-        cal.set(Calendar.DATE, 2);
+        cal.set(Calendar.DATE,2);
@@ -353 +394,2 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-        final FTPFile f = getParser().parseFTPEntry("-rwxr-xr-x 2 user group 4096 3\u6708 2\u65e5 2003\u5e74 \u8a66\u9a13\u30d5\u30a1\u30a4\u30eb.csv");
+        final FTPFile f = getParser().parseFTPEntry(
+                "-rwxr-xr-x 2 user group 4096 3\u6708 2\u65e5 2003\u5e74 \u8a66\u9a13\u30d5\u30a1\u30a4\u30eb.csv");
@@ -379 +421 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-    public void testTrailingSpaces() {
+ public void testTrailingSpaces() {
@@ -386 +428,2 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-        final FTPFile f = new UnixFTPEntryParser(null, true).parseFTPEntry("drwxr-xr-x   2 john smith     group         4096 Mar  2 15:13   zxbox");
+        final FTPFile f = new UnixFTPEntryParser(null, true).parseFTPEntry(
+            "drwxr-xr-x   2 john smith     group         4096 Mar  2 15:13   zxbox");
@@ -388 +431 @@ public class UnixFTPEntryParserTest extends FTPParseTestFramework {
-        assertEquals("zxbox", f.getName()); // leading spaces trimmed
+        assertEquals("zxbox", f.getName() ); // leading spaces trimmed
diff --git a/src/test/java/org/apache/commons/net/ftp/parser/VMSFTPEntryParserTest.java b/src/test/java/org/apache/commons/net/ftp/parser/VMSFTPEntryParserTest.java
index e3afde28d..c8f8d3973 100644
--- a/src/test/java/org/apache/commons/net/ftp/parser/VMSFTPEntryParserTest.java
+++ b/src/test/java/org/apache/commons/net/ftp/parser/VMSFTPEntryParserTest.java
@@ -28,11 +28,15 @@ import org.apache.commons.net.ftp.FTPListParseEngine;
-public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-    private static final String[] BAD_SAMPLES = {
-
-            "1-JUN.LIS;2              9/9           JUN-2-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,)",
-            "1-JUN.LIS;2              a/9           2-JUN-98 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,)",
-            "DATA.DIR; 1              1/9           2-JUN-1998 07:32:04  [GROUP,OWNER]    (,RWED,RWED,RE)",
-            "120196.TXT;1           118/126        14-APR-1997 12:45:27 PM  [GROUP,OWNER]    (RWED,,RWED,RE)",
-            "30CHARBAR.TXT;1         11/18          2-JUN-1998 08:38:42  [GROUP-1,OWNER]    (RWED,RWED,RWED,RE)",
-            "A.;2                    18/18          1-JUL-1998 08:43:20  [GROUP,OWNER]    (RWED2,RWED,RWED,RE)",
-            "AA.;2                  152/153        13-FED-1997 08:13:43  [GROUP,OWNER]    (RWED,RWED,RWED,RE)", "Directory USER1:[TEMP]\r\n\r\n",
-            "\r\nTotal 14 files" };
+public class VMSFTPEntryParserTest extends FTPParseTestFramework
+{
+    private static final String[] BAD_SAMPLES =
+    {
+
+        "1-JUN.LIS;2              9/9           JUN-2-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,)",
+        "1-JUN.LIS;2              a/9           2-JUN-98 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,)",
+        "DATA.DIR; 1              1/9           2-JUN-1998 07:32:04  [GROUP,OWNER]    (,RWED,RWED,RE)",
+        "120196.TXT;1           118/126        14-APR-1997 12:45:27 PM  [GROUP,OWNER]    (RWED,,RWED,RE)",
+        "30CHARBAR.TXT;1         11/18          2-JUN-1998 08:38:42  [GROUP-1,OWNER]    (RWED,RWED,RWED,RE)",
+        "A.;2                    18/18          1-JUL-1998 08:43:20  [GROUP,OWNER]    (RWED2,RWED,RWED,RE)",
+        "AA.;2                  152/153        13-FED-1997 08:13:43  [GROUP,OWNER]    (RWED,RWED,RWED,RE)",
+        "Directory USER1:[TEMP]\r\n\r\n",
+        "\r\nTotal 14 files"
+    };
@@ -41,17 +45,24 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-    private static final String[] GOOD_SAMPLES = { "1-JUN.LIS;1              9/9           2-JUN-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,RE)",
-            "1-JUN.LIS;3              9/9           2-JUN-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,)",
-            "1-JUN.LIS;2              9/9           2-JUN-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,)",
-            "DATA.DIR;1               1/9           2-JUN-1998 07:32:04  [TRANSLATED]     (,RWED,RWED,RE)",
-            "120196.TXT;1           118/126        14-APR-1997 12:45:27  [GROUP,OWNER]    (RWED,,RWED,RE)",
-            "30CHARBAR.TXT;1         11/18          2-JUN-1998 08:38:42  [GROUP,OWNER]    (RWED,RWED,RWED,RE)",
-            "A.;2                    18/18          1-JUL-1998 08:43:20  [GROUP,OWNER]    (RWED,RWED,RWED,RE)",
-            "AA.;2                  152/153        13-FEB-1997 08:13:43  [GROUP,OWNER]    (RWED,RWED,RWED,RE)",
-            "UCX$REXECD_STARTUP.LOG;1098\r\n" + "                         4/15         24-FEB-2003 13:17:24  [POSTWARE,LP]    (RWED,RWED,RE,)",
-            "UNARCHIVE.COM;1          2/15          7-JUL-1997 16:37:45  [POSTWARE,LP]    (RWE,RWE,RWE,RE)",
-            "UNXMERGE.COM;15          1/15         20-AUG-1996 13:59:50  [POSTWARE,LP]    (RWE,RWE,RWE,RE)",
-            "UNXTEMP.COM;7            1/15         15-AUG-1996 14:10:38  [POSTWARE,LP]    (RWE,RWE,RWE,RE)",
-            "UNZIP_AND_ATTACH_FILES.COM;12\r\n" + "                        14/15         24-JUL-2002 14:35:40  [TRANSLATED]    (RWE,RWE,RWE,RE)",
-            "UNZIP_AND_ATTACH_FILES.SAV;1\r\n" + "                        14/15         17-JAN-2002 11:13:53  [POSTWARE,LP]    (RWE,RWED,RWE,RE)",
-            "FREEWARE40.DIR;1        27/36" + "         16-FEB-1999 10:01:46  [AP_HTTPD,APACHE$WWW                               (RWE,RWE,RE,RE)",
-            "1-JUN.LIS;1              9/9           2-jun-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,RE)",
-            "ALLOCMISS.COM;1            1         15-AUG-1996 14:10:38  [POSTWARE,LP]    (RWE,RWE,RWE,RE)" };
+    private static final String[] GOOD_SAMPLES =
+    {
+        "1-JUN.LIS;1              9/9           2-JUN-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,RE)",
+        "1-JUN.LIS;3              9/9           2-JUN-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,)",
+        "1-JUN.LIS;2              9/9           2-JUN-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,)",
+        "DATA.DIR;1               1/9           2-JUN-1998 07:32:04  [TRANSLATED]     (,RWED,RWED,RE)",
+        "120196.TXT;1           118/126        14-APR-1997 12:45:27  [GROUP,OWNER]    (RWED,,RWED,RE)",
+        "30CHARBAR.TXT;1         11/18          2-JUN-1998 08:38:42  [GROUP,OWNER]    (RWED,RWED,RWED,RE)",
+        "A.;2                    18/18          1-JUL-1998 08:43:20  [GROUP,OWNER]    (RWED,RWED,RWED,RE)",
+        "AA.;2                  152/153        13-FEB-1997 08:13:43  [GROUP,OWNER]    (RWED,RWED,RWED,RE)",
+        "UCX$REXECD_STARTUP.LOG;1098\r\n"+
+        "                         4/15         24-FEB-2003 13:17:24  [POSTWARE,LP]    (RWED,RWED,RE,)",
+        "UNARCHIVE.COM;1          2/15          7-JUL-1997 16:37:45  [POSTWARE,LP]    (RWE,RWE,RWE,RE)",
+        "UNXMERGE.COM;15          1/15         20-AUG-1996 13:59:50  [POSTWARE,LP]    (RWE,RWE,RWE,RE)",
+        "UNXTEMP.COM;7            1/15         15-AUG-1996 14:10:38  [POSTWARE,LP]    (RWE,RWE,RWE,RE)",
+        "UNZIP_AND_ATTACH_FILES.COM;12\r\n"+
+        "                        14/15         24-JUL-2002 14:35:40  [TRANSLATED]    (RWE,RWE,RWE,RE)",
+        "UNZIP_AND_ATTACH_FILES.SAV;1\r\n"+
+        "                        14/15         17-JAN-2002 11:13:53  [POSTWARE,LP]    (RWE,RWED,RWE,RE)",
+        "FREEWARE40.DIR;1        27/36"+
+        "         16-FEB-1999 10:01:46  [AP_HTTPD,APACHE$WWW                               (RWE,RWE,RE,RE)",
+        "1-JUN.LIS;1              9/9           2-jun-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,RE)",
+        "ALLOCMISS.COM;1            1         15-AUG-1996 14:10:38  [POSTWARE,LP]    (RWE,RWE,RWE,RE)"
+    };
@@ -60,7 +71,8 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-    private static final String FULL_LISTING = "Directory USER1:[TEMP]\r\n\r\n"
-            + "1-JUN.LIS;1              9/9           2-JUN-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,RE)\r\n"
-            + "2-JUN.LIS;1              9/9           2-JUN-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,)\r\n"
-            + "3-JUN.LIS;1              9/9           3-JUN-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,)\r\n"
-            + "3-JUN.LIS;4              9/9           7-JUN-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,)\r\n"
-            + "3-JUN.LIS;2              9/9           4-JUN-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,)\r\n"
-            + "3-JUN.LIS;3              9/9           6-JUN-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,)\r\n" + "\r\nTotal 6 files";
+    private static final String FULL_LISTING = "Directory USER1:[TEMP]\r\n\r\n"+
+    "1-JUN.LIS;1              9/9           2-JUN-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,RE)\r\n"+
+    "2-JUN.LIS;1              9/9           2-JUN-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,)\r\n"+
+    "3-JUN.LIS;1              9/9           3-JUN-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,)\r\n"+
+    "3-JUN.LIS;4              9/9           7-JUN-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,)\r\n"+
+    "3-JUN.LIS;2              9/9           4-JUN-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,)\r\n"+
+    "3-JUN.LIS;3              9/9           6-JUN-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,)\r\n"+
+    "\r\nTotal 6 files";
@@ -71 +83,2 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-    public VMSFTPEntryParserTest(final String name) {
+    public VMSFTPEntryParserTest(final String name)
+    {
@@ -76 +89,2 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-        for (final FTPFile element : listing) {
+        for (final FTPFile element : listing)
+        {
@@ -85 +99,2 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-        for (final FTPFile element : listing) {
+        for (final FTPFile element : listing)
+        {
@@ -93 +108 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-     * Verify that the VMS parser does NOT set the permissions.
+     * Verify that the VMS parser does NOT  set the permissions.
@@ -95,3 +110,6 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-    private void checkPermisions(final FTPFile dir, final int octalPerm) {
-        int permMask = 1 << 8;
-        assertEquals("Owner should not have read permission.", (permMask & octalPerm) != 0, dir.hasPermission(FTPFile.USER_ACCESS, FTPFile.READ_PERMISSION));
+    private void checkPermisions(final FTPFile dir, final int octalPerm)
+    {
+        int permMask = 1<<8;
+        assertEquals("Owner should not have read permission.",
+                (permMask & octalPerm) != 0, dir.hasPermission(FTPFile.USER_ACCESS,
+                                      FTPFile.READ_PERMISSION));
@@ -99 +117,3 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-        assertEquals("Owner should not have write permission.", (permMask & octalPerm) != 0, dir.hasPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION));
+        assertEquals("Owner should not have write permission.",
+                (permMask & octalPerm) != 0, dir.hasPermission(FTPFile.USER_ACCESS,
+                                      FTPFile.WRITE_PERMISSION));
@@ -101,2 +121,3 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-        assertEquals("Owner should not have execute permission.", (permMask & octalPerm) != 0,
-                dir.hasPermission(FTPFile.USER_ACCESS, FTPFile.EXECUTE_PERMISSION));
+        assertEquals("Owner should not have execute permission.",
+                (permMask & octalPerm) != 0, dir.hasPermission(FTPFile.USER_ACCESS,
+                                      FTPFile.EXECUTE_PERMISSION));
@@ -104 +125,3 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-        assertEquals("Group should not have read permission.", (permMask & octalPerm) != 0, dir.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.READ_PERMISSION));
+        assertEquals("Group should not have read permission.",
+                (permMask & octalPerm) != 0, dir.hasPermission(FTPFile.GROUP_ACCESS,
+                                      FTPFile.READ_PERMISSION));
@@ -106 +129,3 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-        assertEquals("Group should not have write permission.", (permMask & octalPerm) != 0, dir.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.WRITE_PERMISSION));
+        assertEquals("Group should not have write permission.",
+                (permMask & octalPerm) != 0, dir.hasPermission(FTPFile.GROUP_ACCESS,
+                                      FTPFile.WRITE_PERMISSION));
@@ -108,2 +133,3 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-        assertEquals("Group should not have execute permission.", (permMask & octalPerm) != 0,
-                dir.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.EXECUTE_PERMISSION));
+        assertEquals("Group should not have execute permission.",
+                (permMask & octalPerm) != 0, dir.hasPermission(FTPFile.GROUP_ACCESS,
+                                      FTPFile.EXECUTE_PERMISSION));
@@ -111 +137,3 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-        assertEquals("World should not have read permission.", (permMask & octalPerm) != 0, dir.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.READ_PERMISSION));
+        assertEquals("World should not have read permission.",
+                (permMask & octalPerm) != 0, dir.hasPermission(FTPFile.WORLD_ACCESS,
+                                      FTPFile.READ_PERMISSION));
@@ -113 +141,3 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-        assertEquals("World should not have write permission.", (permMask & octalPerm) != 0, dir.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.WRITE_PERMISSION));
+        assertEquals("World should not have write permission.",
+                (permMask & octalPerm) != 0, dir.hasPermission(FTPFile.WORLD_ACCESS,
+                                      FTPFile.WRITE_PERMISSION));
@@ -115,2 +145,3 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-        assertEquals("World should not have execute permission.", (permMask & octalPerm) != 0,
-                dir.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.EXECUTE_PERMISSION));
+        assertEquals("World should not have execute permission.",
+                (permMask & octalPerm) != 0, dir.hasPermission(FTPFile.WORLD_ACCESS,
+                                      FTPFile.EXECUTE_PERMISSION));
@@ -118 +148,0 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-
@@ -120 +150,2 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-    protected String[] getBadListing() {
+    protected String[] getBadListing()
+    {
@@ -126 +157,2 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-    protected String[] getGoodListing() {
+    protected String[] getGoodListing()
+    {
@@ -132,2 +164,4 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-    protected FTPFileEntryParser getParser() {
-        final ConfigurableFTPFileEntryParserImpl parser = new VMSFTPEntryParser();
+    protected FTPFileEntryParser getParser()
+    {
+        final ConfigurableFTPFileEntryParserImpl parser =
+            new VMSFTPEntryParser();
@@ -138,2 +172,4 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-    protected FTPFileEntryParser getVersioningParser() {
-        final ConfigurableFTPFileEntryParserImpl parser = new VMSVersioningFTPEntryParser();
+    protected FTPFileEntryParser getVersioningParser()
+    {
+        final ConfigurableFTPFileEntryParserImpl parser =
+            new VMSVersioningFTPEntryParser();
@@ -146 +182,2 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-        testPrecision("1-JUN.LIS;1              9/9           2-JUN-1998 07:32:04  [TRANSLATED]    (RWED,RD,,)", CalendarUnit.SECOND);
+        testPrecision(
+                "1-JUN.LIS;1              9/9           2-JUN-1998 07:32:04  [TRANSLATED]    (RWED,RD,,)", CalendarUnit.SECOND);
@@ -150,9 +187,17 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-    public void testParseFieldsOnDirectory() throws Exception {
-
-        FTPFile dir = getParser().parseFTPEntry("DATA.DIR;1               1/9           2-JUN-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,RE)");
-        assertTrue("Should be a directory.", dir.isDirectory());
-        assertEquals("DATA.DIR", dir.getName());
-        assertEquals(512, dir.getSize());
-        assertEquals("Tue Jun 02 07:32:04 1998", df.format(dir.getTimestamp().getTime()));
-        assertEquals("GROUP", dir.getGroup());
-        assertEquals("OWNER", dir.getUser());
+    public void testParseFieldsOnDirectory() throws Exception
+    {
+
+        FTPFile dir = getParser().parseFTPEntry(
+            "DATA.DIR;1               1/9           2-JUN-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RWED,RE)");
+        assertTrue("Should be a directory.",
+                   dir.isDirectory());
+        assertEquals("DATA.DIR",
+                     dir.getName());
+        assertEquals(512,
+                     dir.getSize());
+        assertEquals("Tue Jun 02 07:32:04 1998",
+                     df.format(dir.getTimestamp().getTime()));
+        assertEquals("GROUP",
+                     dir.getGroup());
+        assertEquals("OWNER",
+                     dir.getUser());
@@ -161,5 +206,11 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-        dir = getParser().parseFTPEntry("DATA.DIR;1               1/9           2-JUN-1998 07:32:04  [TRANSLATED]    (RWED,RWED,,RE)");
-        assertTrue("Should be a directory.", dir.isDirectory());
-        assertEquals("DATA.DIR", dir.getName());
-        assertEquals(512, dir.getSize());
-        assertEquals("Tue Jun 02 07:32:04 1998", df.format(dir.getTimestamp().getTime()));
+
+        dir = getParser().parseFTPEntry(
+                "DATA.DIR;1               1/9           2-JUN-1998 07:32:04  [TRANSLATED]    (RWED,RWED,,RE)");
+        assertTrue("Should be a directory.",
+                           dir.isDirectory());
+        assertEquals("DATA.DIR",
+                             dir.getName());
+        assertEquals(512,
+                             dir.getSize());
+        assertEquals("Tue Jun 02 07:32:04 1998",
+                             df.format(dir.getTimestamp().getTime()));
@@ -167 +218,2 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-        assertEquals("TRANSLATED", dir.getUser());
+        assertEquals("TRANSLATED",
+                     dir.getUser());
@@ -172,8 +224,16 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-    public void testParseFieldsOnFile() throws Exception {
-        FTPFile file = getParser().parseFTPEntry("1-JUN.LIS;1              9/9           2-JUN-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RW,R)");
-        assertTrue("Should be a file.", file.isFile());
-        assertEquals("1-JUN.LIS", file.getName());
-        assertEquals(9 * 512, file.getSize());
-        assertEquals("Tue Jun 02 07:32:04 1998", df.format(file.getTimestamp().getTime()));
-        assertEquals("GROUP", file.getGroup());
-        assertEquals("OWNER", file.getUser());
+    public void testParseFieldsOnFile() throws Exception
+    {
+        FTPFile file = getParser().parseFTPEntry(
+            "1-JUN.LIS;1              9/9           2-JUN-1998 07:32:04  [GROUP,OWNER]    (RWED,RWED,RW,R)");
+        assertTrue("Should be a file.",
+                   file.isFile());
+        assertEquals("1-JUN.LIS",
+                     file.getName());
+        assertEquals(9 * 512,
+                     file.getSize());
+        assertEquals("Tue Jun 02 07:32:04 1998",
+                     df.format(file.getTimestamp().getTime()));
+        assertEquals("GROUP",
+                     file.getGroup());
+        assertEquals("OWNER",
+                     file.getUser());
@@ -181,0 +242 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
+
@@ -183,4 +244,8 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-        assertTrue("Should be a file.", file.isFile());
-        assertEquals("1-JUN.LIS", file.getName());
-        assertEquals(9 * 512, file.getSize());
-        assertEquals("Tue Jun 02 07:32:04 1998", df.format(file.getTimestamp().getTime()));
+        assertTrue("Should be a file.",
+                   file.isFile());
+        assertEquals("1-JUN.LIS",
+                     file.getName());
+        assertEquals(9 * 512,
+                     file.getSize());
+        assertEquals("Tue Jun 02 07:32:04 1998",
+                     df.format(file.getTimestamp().getTime()));
@@ -188 +253,2 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-        assertEquals("TRANSLATED", file.getUser());
+        assertEquals("TRANSLATED",
+                     file.getUser());
@@ -197 +263,2 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-    public void testWholeListParse() throws IOException {
+    public void testWholeListParse() throws IOException
+    {
@@ -201 +268,2 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-        engine.readServerList(new ByteArrayInputStream(FULL_LISTING.getBytes()), null); // use default encoding
+        engine.readServerList(
+                new ByteArrayInputStream(FULL_LISTING.getBytes()), null); // use default encoding
@@ -211 +279,2 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-    public void testWholeListParseWithVersioning() throws IOException {
+    public void testWholeListParseWithVersioning() throws IOException
+    {
@@ -216 +285,2 @@ public class VMSFTPEntryParserTest extends FTPParseTestFramework {
-        engine.readServerList(new ByteArrayInputStream(FULL_LISTING.getBytes()), null); // use default encoding
+        engine.readServerList(
+                new ByteArrayInputStream(FULL_LISTING.getBytes()), null); // use default encoding
diff --git a/src/test/java/org/apache/commons/net/imap/IMAPTest.java b/src/test/java/org/apache/commons/net/imap/IMAPTest.java
index 50992aa12..bb93affce 100644
--- a/src/test/java/org/apache/commons/net/imap/IMAPTest.java
+++ b/src/test/java/org/apache/commons/net/imap/IMAPTest.java
@@ -23,0 +24 @@ import org.junit.Test;
+
@@ -34 +35 @@ public class IMAPTest {
-        for (int j = 0; j < initial.length(); j++) {
+        for(int j=0; j < initial.length(); j++) {
@@ -37,3 +38,3 @@ public class IMAPTest {
-        int i = 0;
-        boolean matched = false;
-        while (i <= expected + 10) { // don't loop forever, but allow it to pass go!
+        int i=0;
+        boolean matched=false;
+        while(i <= expected+10) { // don't loop forever, but allow it to pass go!
diff --git a/src/test/java/org/apache/commons/net/io/DotTerminatedMessageReaderTest.java b/src/test/java/org/apache/commons/net/io/DotTerminatedMessageReaderTest.java
index c74a12969..c9f95c994 100644
--- a/src/test/java/org/apache/commons/net/io/DotTerminatedMessageReaderTest.java
+++ b/src/test/java/org/apache/commons/net/io/DotTerminatedMessageReaderTest.java
@@ -29 +29 @@ public class DotTerminatedMessageReaderTest extends TestCase {
-    private static final String EOM = CRLF + DOT + CRLF;
+    private static final String EOM = CRLF+DOT+CRLF;
@@ -35 +35 @@ public class DotTerminatedMessageReaderTest extends TestCase {
-        final String test = "Hello World!\r" + EOM;
+        final String test = "Hello World!\r"+EOM;
@@ -43 +43 @@ public class DotTerminatedMessageReaderTest extends TestCase {
-        assertEquals("Hello World!\r" + CRLF, str.toString());
+        assertEquals("Hello World!\r" + CRLF,str.toString());
@@ -47 +47 @@ public class DotTerminatedMessageReaderTest extends TestCase {
-        final String test = "Hello . World!" + EOM;
+        final String test = "Hello . World!"+EOM;
@@ -55 +55 @@ public class DotTerminatedMessageReaderTest extends TestCase {
-        assertEquals("Hello . World!" + CRLF, str.toString());
+        assertEquals("Hello . World!" + CRLF,str.toString());
@@ -59 +59 @@ public class DotTerminatedMessageReaderTest extends TestCase {
-        final String test = "Hello .. World!" + EOM;
+        final String test = "Hello .. World!"+EOM;
@@ -67 +67 @@ public class DotTerminatedMessageReaderTest extends TestCase {
-        assertEquals("Hello .. World!" + CRLF, str.toString());
+        assertEquals("Hello .. World!" + CRLF,str.toString());
@@ -71 +71 @@ public class DotTerminatedMessageReaderTest extends TestCase {
-        final String test = "Hello World." + CRLF + "more" + EOM;
+        final String test = "Hello World."+CRLF+"more"+EOM;
@@ -79 +79 @@ public class DotTerminatedMessageReaderTest extends TestCase {
-        assertEquals("Hello World." + CRLF + "more" + CRLF, str.toString());
+        assertEquals("Hello World." + CRLF+"more"+CRLF,str.toString());
@@ -83 +83 @@ public class DotTerminatedMessageReaderTest extends TestCase {
-        final String test = "Hello World\r.\nmore" + EOM;
+        final String test = "Hello World\r.\nmore"+EOM;
@@ -91 +91 @@ public class DotTerminatedMessageReaderTest extends TestCase {
-        assertEquals("Hello World\r.\nmore" + CRLF, str.toString());
+        assertEquals("Hello World\r.\nmore" + CRLF,str.toString());
@@ -95 +95 @@ public class DotTerminatedMessageReaderTest extends TestCase {
-        final String test = "Hello" + CRLF + "World\nA\rB" + EOM;
+        final String test = "Hello"+CRLF+"World\nA\rB"+EOM;
@@ -103 +103 @@ public class DotTerminatedMessageReaderTest extends TestCase {
-        assertEquals(str.toString(), "Hello" + CRLF + "World\nA\rB" + CRLF);
+        assertEquals(str.toString(), "Hello" + CRLF  +"World\nA\rB" + CRLF);
@@ -107 +107 @@ public class DotTerminatedMessageReaderTest extends TestCase {
-        final String test = "Hello World!" + CRLF + "..text" + EOM;
+        final String test = "Hello World!"+CRLF+"..text"+EOM;
@@ -115 +115 @@ public class DotTerminatedMessageReaderTest extends TestCase {
-        assertEquals("Hello World!" + CRLF + ".text" + CRLF, str.toString());
+        assertEquals("Hello World!" + CRLF+".text"+CRLF,str.toString());
@@ -119 +119 @@ public class DotTerminatedMessageReaderTest extends TestCase {
-        final String test = "Hello World" + CRLF + "more" + EOM;
+        final String test = "Hello World"+CRLF+"more"+EOM;
@@ -128 +128 @@ public class DotTerminatedMessageReaderTest extends TestCase {
-        assertEquals("Hello World#more#", str.toString());
+        assertEquals("Hello World#more#",str.toString());
@@ -133 +133 @@ public class DotTerminatedMessageReaderTest extends TestCase {
-        final String test = "Hello World\r.\nmore" + EOM;
+        final String test = "Hello World\r.\nmore"+EOM;
@@ -142 +142 @@ public class DotTerminatedMessageReaderTest extends TestCase {
-        assertEquals("Hello World\r.\nmore#", str.toString());
+        assertEquals("Hello World\r.\nmore#",str.toString());
@@ -147 +147 @@ public class DotTerminatedMessageReaderTest extends TestCase {
-        final String test = "Hello World!" + EOM;
+        final String test = "Hello World!"+EOM;
@@ -155 +155 @@ public class DotTerminatedMessageReaderTest extends TestCase {
-        assertEquals("Hello World!" + CRLF, str.toString());
+        assertEquals("Hello World!"+CRLF, str.toString());
@@ -159 +159 @@ public class DotTerminatedMessageReaderTest extends TestCase {
-        final String test = "Hello World!" + EOM;
+        final String test = "Hello World!"+EOM;
@@ -167 +167 @@ public class DotTerminatedMessageReaderTest extends TestCase {
-        assertEquals("Hello World!" + CRLF, str.toString());
+        assertEquals("Hello World!"+CRLF, str.toString());
@@ -171 +171 @@ public class DotTerminatedMessageReaderTest extends TestCase {
-        final String test = "Hello World!" + CRLF + ".text" + EOM;
+        final String test = "Hello World!"+CRLF+".text"+EOM;
@@ -179 +179 @@ public class DotTerminatedMessageReaderTest extends TestCase {
-        assertEquals("Hello World!" + CRLF + ".text" + CRLF, str.toString());
+        assertEquals("Hello World!"+CRLF+".text"+CRLF,str.toString());
diff --git a/src/test/java/org/apache/commons/net/io/ToNetASCIIInputStreamTest.java b/src/test/java/org/apache/commons/net/io/ToNetASCIIInputStreamTest.java
index ba6bb00f8..404d20340 100644
--- a/src/test/java/org/apache/commons/net/io/ToNetASCIIInputStreamTest.java
+++ b/src/test/java/org/apache/commons/net/io/ToNetASCIIInputStreamTest.java
@@ -47,3 +47,4 @@ public class ToNetASCIIInputStreamTest {
-    private int getBuffer(final ToNetASCIIInputStream toNetASCII, final byte[] output) throws IOException {
-        int length = 0;
-        int remain = output.length;
+    private int getBuffer(final ToNetASCIIInputStream toNetASCII, final byte[] output)
+            throws IOException {
+        int length=0;
+        int remain=output.length;
@@ -51,5 +52,5 @@ public class ToNetASCIIInputStreamTest {
-        int offset = 0;
-        while (remain > 0 && (chunk = toNetASCII.read(output, offset, remain)) != -1) {
-            length += chunk;
-            offset += chunk;
-            remain -= chunk;
+        int offset=0;
+        while(remain > 0 && (chunk=toNetASCII.read(output,offset,remain)) != -1){
+            length+=chunk;
+            offset+=chunk;
+            remain-=chunk;
@@ -60 +61,2 @@ public class ToNetASCIIInputStreamTest {
-    private int getSingleBytes(final ToNetASCIIInputStream toNetASCII, final byte[] output) throws IOException {
+    private int getSingleBytes(final ToNetASCIIInputStream toNetASCII, final byte[] output)
+            throws IOException {
@@ -62,3 +64,3 @@ public class ToNetASCIIInputStreamTest {
-        int length = 0;
-        while ((b = toNetASCII.read()) != -1) {
-            output[length++] = (byte) b;
+        int length=0;
+        while((b=toNetASCII.read()) != -1) {
+            output[length++]=(byte)b;
@@ -70 +72,2 @@ public class ToNetASCIIInputStreamTest {
-    public void testToNetASCIIInputStream_single_bytes() throws Exception {
+    public void testToNetASCIIInputStream_single_bytes() throws Exception
+    {
@@ -83 +86,2 @@ public class ToNetASCIIInputStreamTest {
-    public void testToNetASCIIInputStream1() throws Exception {
+    public void testToNetASCIIInputStream1() throws Exception
+    {
diff --git a/src/test/java/org/apache/commons/net/ntp/TestNtpClient.java b/src/test/java/org/apache/commons/net/ntp/TestNtpClient.java
index af894ca49..c9764a5d1 100644
--- a/src/test/java/org/apache/commons/net/ntp/TestNtpClient.java
+++ b/src/test/java/org/apache/commons/net/ntp/TestNtpClient.java
@@ -36 +36,2 @@ public class TestNtpClient {
-    public static void oneTimeSetUp() throws IOException {
+    public static void oneTimeSetUp() throws IOException
+    {
@@ -47 +48 @@ public class TestNtpClient {
-        // System.out.println("XXX: time server started");
+        //System.out.println("XXX: time server started");
@@ -49 +50 @@ public class TestNtpClient {
-        for (int retries = 0; retries < 5; retries++) {
+        for (int retries=0; retries < 5; retries++) {
@@ -81 +82 @@ public class TestNtpClient {
-            final InetAddress addr = InetAddress.getByAddress("loopback", new byte[] { 127, 0, 0, 1 });
+            final InetAddress addr = InetAddress.getByAddress("loopback", new byte[]{127, 0, 0, 1});
diff --git a/src/test/java/org/apache/commons/net/ntp/TestNtpPacket.java b/src/test/java/org/apache/commons/net/ntp/TestNtpPacket.java
index d1aa75eb1..bf34381af 100644
--- a/src/test/java/org/apache/commons/net/ntp/TestNtpPacket.java
+++ b/src/test/java/org/apache/commons/net/ntp/TestNtpPacket.java
@@ -31 +31,2 @@ public class TestNtpPacket {
-    static final byte[] ntpPacket = hexStringToByteArray("1c0304ef0000006400000d3681531472d552447fec1d6000d5524718ac49ba5ed55247194b6d9000d55247194b797000");
+    static final byte[] ntpPacket = hexStringToByteArray(
+            "1c0304ef0000006400000d3681531472d552447fec1d6000d5524718ac49ba5ed55247194b6d9000d55247194b797000");
@@ -37 +38,2 @@ public class TestNtpPacket {
-            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4) + Character.digit(s.charAt(i + 1), 16));
+            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
+                    + Character.digit(s.charAt(i+1), 16));
@@ -45 +47 @@ public class TestNtpPacket {
-        message.setLeapIndicator(0); // byte 0 [bit numbers 7-6]
+        message.setLeapIndicator(0);             // byte 0 [bit numbers 7-6]
@@ -47,7 +49,7 @@ public class TestNtpPacket {
-        message.setMode(4); // byte 0 [bit numbers 3-0]
-        message.setStratum(3); // byte 1
-        message.setPoll(4); // byte 2
-        message.setPrecision(-17); // byte 3
-        message.setRootDelay(100); // bytes 4-7
-        message.setRootDispersion(3382); // bytes 8-11
-        message.setReferenceId(0x81531472); // byte 12-15
+        message.setMode(4);                         // byte 0 [bit numbers 3-0]
+        message.setStratum(3);                     // byte 1
+        message.setPoll(4);                          // byte 2
+        message.setPrecision(-17);                 // byte 3
+        message.setRootDelay(100);                 // bytes 4-7
+        message.setRootDispersion(3382);         // bytes 8-11
+        message.setReferenceId(0x81531472);         // byte 12-15
@@ -141 +143 @@ public class TestNtpPacket {
-        final DatagramPacket dp = new DatagramPacket(ntpPacket, ntpPacket.length - 4); // drop 4-bytes from packet
+        final DatagramPacket dp = new DatagramPacket(ntpPacket, ntpPacket.length-4); // drop 4-bytes from packet
diff --git a/src/test/java/org/apache/commons/net/ntp/TestTimeInfo.java b/src/test/java/org/apache/commons/net/ntp/TestTimeInfo.java
index 2927eccb3..b80252e86 100644
--- a/src/test/java/org/apache/commons/net/ntp/TestTimeInfo.java
+++ b/src/test/java/org/apache/commons/net/ntp/TestTimeInfo.java
@@ -36 +36 @@ public class TestTimeInfo {
-        packet.getDatagramPacket().setAddress(InetAddress.getByAddress("loopback", new byte[] { 127, 0, 0, 1 }));
+        packet.getDatagramPacket().setAddress(InetAddress.getByAddress("loopback", new byte[]{127, 0, 0, 1}));
@@ -48 +48 @@ public class TestTimeInfo {
-        // origTime= 1370571659178
+        // origTime=  1370571659178
@@ -58,3 +58,3 @@ public class TestTimeInfo {
-        // long origTime = packet.getOriginateTimeStamp().getTime();
-        // System.out.println("returntime=" + returnTime);
-        // System.out.println("origTime= " + origTime);
+        //long origTime = packet.getOriginateTimeStamp().getTime();
+        //System.out.println("returntime=" + returnTime);
+        //System.out.println("origTime=  " + origTime);
@@ -85 +85 @@ public class TestTimeInfo {
-        // Assert.assertFalse(info.equals(other)); // comments not used for equality
+        //Assert.assertFalse(info.equals(other)); // comments not used for equality
@@ -116 +116 @@ public class TestTimeInfo {
-        Object other = this;
+        Object  other = this;
diff --git a/src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java b/src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java
index 72a5c6b23..e6c77828d 100644
--- a/src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java
+++ b/src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java
@@ -27,2 +27,6 @@ import junit.framework.TestCase;
- * The POP3* tests all presume the existence of the following parameters: mailserver: localhost (running on the default port 110) account: username=test;
- * password=password account: username=alwaysempty; password=password. mail: At least four emails in the test account and zero emails in the alwaysempty account
+ * The POP3* tests all presume the existence of the following parameters:
+ *   mailserver: localhost (running on the default port 110)
+ *   account: username=test; password=password
+ *   account: username=alwaysempty; password=password.
+ *   mail: At least four emails in the test account and zero emails
+ *         in the alwaysempty account
@@ -30 +34,2 @@ import junit.framework.TestCase;
- * If this won't work for you, you can change these parameters in the TestSetupParameters class.
+ * If this won't work for you, you can change these parameters in the
+ * TestSetupParameters class.
@@ -32,2 +37,3 @@ import junit.framework.TestCase;
- * The tests were originally run on a default installation of James. Your mileage may vary based on the POP3 server you run the tests against. Some servers are
- * more standards-compliant than others.
+ * The tests were originally run on a default installation of James.
+ * Your mileage may vary based on the POP3 server you run the tests against.
+ * Some servers are more standards-compliant than others.
@@ -35 +41,2 @@ import junit.framework.TestCase;
-public class POP3ClientCommandsTest extends TestCase {
+public class POP3ClientCommandsTest extends TestCase
+{
@@ -43 +50,2 @@ public class POP3ClientCommandsTest extends TestCase {
-    public POP3ClientCommandsTest(final String name) {
+    public POP3ClientCommandsTest(final String name)
+    {
@@ -47 +55,2 @@ public class POP3ClientCommandsTest extends TestCase {
-    private void connect() throws Exception {
+    private void connect() throws Exception
+    {
@@ -53 +62,2 @@ public class POP3ClientCommandsTest extends TestCase {
-    private void login() throws Exception {
+    private void login() throws Exception
+    {
@@ -58,5 +68,9 @@ public class POP3ClientCommandsTest extends TestCase {
-    private void reset() throws IOException {
-        // Case where this is the first time reset is called
-        if (pop3Client == null) {
-            // Do nothing
-        } else if (pop3Client.isConnected()) {
+    private void reset() throws IOException
+    {
+        //Case where this is the first time reset is called
+        if (pop3Client == null)
+        {
+            //Do nothing
+        }
+        else if (pop3Client.isConnected())
+        {
@@ -69 +83,2 @@ public class POP3ClientCommandsTest extends TestCase {
-    public void testDelete() throws Exception {
+    public void testDelete() throws Exception
+    {
@@ -73 +88 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Get the original number of messages
+        //Get the original number of messages
@@ -78,2 +93,3 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Now delete some and logout
-        for (int i = 0; i < numMessages - 3; i++) {
+        //Now delete some and logout
+        for (int i = 0; i < numMessages - 3; i ++)
+        {
@@ -83 +99 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Check to see that they are marked as deleted
+        //Check to see that they are marked as deleted
@@ -86 +102 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Logout and come back in
+        //Logout and come back in
@@ -92,2 +108,2 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Get the new number of messages, because of
-        // reset, new number should match old number
+        //Get the new number of messages, because of
+        //reset, new number should match old number
@@ -98 +114,2 @@ public class POP3ClientCommandsTest extends TestCase {
-    public void testDeleteWithReset() throws Exception {
+    public void testDeleteWithReset() throws Exception
+    {
@@ -102 +119 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Get the original number of messages
+        //Get the original number of messages
@@ -107,2 +124,3 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Now delete some and logout
-        for (int i = 0; i < numMessages - 1; i++) {
+        //Now delete some and logout
+        for (int i = 0; i < numMessages - 1; i ++)
+        {
@@ -112 +130 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Check to see that they are marked as deleted
+        //Check to see that they are marked as deleted
@@ -115 +133 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Now reset to unmark the messages as deleted
+        //Now reset to unmark the messages as deleted
@@ -118 +136 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Logout and come back in
+        //Logout and come back in
@@ -124,2 +142,2 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Get the new number of messages, because of
-        // reset, new number should match old number
+        //Get the new number of messages, because of
+        //reset, new number should match old number
@@ -130 +148,2 @@ public class POP3ClientCommandsTest extends TestCase {
-    public void testListMessageOnEmptyMailbox() throws Exception {
+    public void testListMessageOnEmptyMailbox() throws Exception
+    {
@@ -135 +154 @@ public class POP3ClientCommandsTest extends TestCase {
-        // The first message is always at index 1
+        //The first message is always at index 1
@@ -140 +159,2 @@ public class POP3ClientCommandsTest extends TestCase {
-    public void testListMessageOnFullMailbox() throws Exception {
+    public void testListMessageOnFullMailbox() throws Exception
+    {
@@ -145 +165 @@ public class POP3ClientCommandsTest extends TestCase {
-        // The first message is always at index 1
+        //The first message is always at index 1
@@ -152 +172 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Now retrieve a message from index 0
+        //Now retrieve a message from index 0
@@ -156 +176 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Now retrieve a msg that is not there
+        //Now retrieve a msg that is not there
@@ -160 +180 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Now retrieve a msg with a negative index
+        //Now retrieve a msg with a negative index
@@ -164 +184 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Now try to get a valid message from the update state
+        //Now try to get a valid message from the update state
@@ -170 +190,2 @@ public class POP3ClientCommandsTest extends TestCase {
-    public void testListMessagesOnEmptyMailbox() throws Exception {
+    public void testListMessagesOnEmptyMailbox() throws Exception
+    {
@@ -178 +199 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Now test from the update state
+        //Now test from the update state
@@ -184 +205,2 @@ public class POP3ClientCommandsTest extends TestCase {
-    public void testListMessagesOnFullMailbox() throws Exception {
+    public void testListMessagesOnFullMailbox() throws Exception
+    {
@@ -192 +214,2 @@ public class POP3ClientCommandsTest extends TestCase {
-        for (int i = 0; i < msg.length; i++) {
+        for(int i = 0; i < msg.length; i++)
+        {
@@ -194 +217 @@ public class POP3ClientCommandsTest extends TestCase {
-            assertEquals(i + 1, msg[i].number);
+            assertEquals(i+1, msg[i].number);
@@ -199 +222 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Now test from the update state
+        //Now test from the update state
@@ -205 +228,2 @@ public class POP3ClientCommandsTest extends TestCase {
-    public void testListUniqueIdentifierOnEmptyMailbox() throws Exception {
+    public void testListUniqueIdentifierOnEmptyMailbox() throws Exception
+    {
@@ -210 +234 @@ public class POP3ClientCommandsTest extends TestCase {
-        // The first message is always at index 1
+        //The first message is always at index 1
@@ -215 +239,2 @@ public class POP3ClientCommandsTest extends TestCase {
-    public void testListUniqueIDOnFullMailbox() throws Exception {
+    public void testListUniqueIDOnFullMailbox() throws Exception
+    {
@@ -220 +245 @@ public class POP3ClientCommandsTest extends TestCase {
-        // The first message is always at index 1
+        //The first message is always at index 1
@@ -226 +251 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Now retrieve a message from index 0
+        //Now retrieve a message from index 0
@@ -230 +255 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Now retrieve a msg that is not there
+        //Now retrieve a msg that is not there
@@ -234 +259 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Now retrieve a msg with a negative index
+        //Now retrieve a msg with a negative index
@@ -238 +263 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Now try to get a valid message from the update state
+        //Now try to get a valid message from the update state
@@ -244 +269,2 @@ public class POP3ClientCommandsTest extends TestCase {
-    public void testListUniqueIDsOnEmptyMailbox() throws Exception {
+    public void testListUniqueIDsOnEmptyMailbox() throws Exception
+    {
@@ -252 +278 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Now test from the update state
+        //Now test from the update state
@@ -258 +284,2 @@ public class POP3ClientCommandsTest extends TestCase {
-    public void testListUniqueIDsOnFullMailbox() throws Exception {
+    public void testListUniqueIDsOnFullMailbox() throws Exception
+    {
@@ -266 +293,2 @@ public class POP3ClientCommandsTest extends TestCase {
-        for (int i = 0; i < msg.length; i++) {
+        for(int i = 0; i < msg.length; i++)
+        {
@@ -272 +300 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Now test from the update state
+        //Now test from the update state
@@ -278 +306,2 @@ public class POP3ClientCommandsTest extends TestCase {
-    public void testNoopCommand() throws Exception {
+    public void testNoopCommand() throws Exception
+    {
@@ -282 +311 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Should fail before authorization
+        //Should fail before authorization
@@ -285 +314 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Should pass in transaction state
+        //Should pass in transaction state
@@ -289 +318 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Should fail in update state
+        //Should fail in update state
@@ -294 +323,2 @@ public class POP3ClientCommandsTest extends TestCase {
-    public void testResetAndDeleteShouldFails() throws Exception {
+    public void testResetAndDeleteShouldFails() throws Exception
+    {
@@ -305 +335,2 @@ public class POP3ClientCommandsTest extends TestCase {
-    public void testRetrieveMessageOnEmptyMailbox() throws Exception {
+    public void testRetrieveMessageOnEmptyMailbox() throws Exception
+    {
@@ -312 +343,2 @@ public class POP3ClientCommandsTest extends TestCase {
-    public void testRetrieveMessageOnFullMailbox() throws Exception {
+    public void testRetrieveMessageOnFullMailbox() throws Exception
+    {
@@ -322 +354,2 @@ public class POP3ClientCommandsTest extends TestCase {
-        for (int i = msg.length; i > 0; i--) {
+        for (int i = msg.length; i > 0; i--)
+        {
@@ -328,3 +361,4 @@ public class POP3ClientCommandsTest extends TestCase {
-            if (!r.ready()) {
-                // Give the reader time to get the message
-                // from the server
+            if (!r.ready())
+            {
+                //Give the reader time to get the message
+                //from the server
@@ -333,2 +367,3 @@ public class POP3ClientCommandsTest extends TestCase {
-                // but don't wait too long
-                if (delaycount == 4) {
+                //but don't wait too long
+                if (delaycount == 4)
+                {
@@ -338 +373,2 @@ public class POP3ClientCommandsTest extends TestCase {
-            while (r.ready()) {
+            while(r.ready())
+            {
@@ -342,5 +378,5 @@ public class POP3ClientCommandsTest extends TestCase {
-            // Due to variations in line termination
-            // on different platforms, the actual
-            // size may vary slightly. On Win2KPro, the
-            // actual size is 2 bytes larger than the reported
-            // size.
+            //Due to variations in line termination
+            //on different platforms, the actual
+            //size may vary slightly.  On Win2KPro, the
+            //actual size is 2 bytes larger than the reported
+            //size.
@@ -351 +387,2 @@ public class POP3ClientCommandsTest extends TestCase {
-    public void testRetrieveMessageShouldFails() throws Exception {
+    public void testRetrieveMessageShouldFails() throws Exception
+    {
@@ -356 +393 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Try to get message 0
+        //Try to get message 0
@@ -359 +396 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Try to get a negative message
+        //Try to get a negative message
@@ -362 +399 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Try to get a message that is not there
+        //Try to get a message that is not there
@@ -365 +402 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Change states and try to get a valid message
+        //Change states and try to get a valid message
@@ -370 +407,2 @@ public class POP3ClientCommandsTest extends TestCase {
-    public void testRetrieveMessageTopOnEmptyMailbox() throws Exception {
+    public void testRetrieveMessageTopOnEmptyMailbox() throws Exception
+    {
@@ -377 +415,2 @@ public class POP3ClientCommandsTest extends TestCase {
-    public void testRetrieveMessageTopOnFullMailbox() throws Exception {
+    public void testRetrieveMessageTopOnFullMailbox() throws Exception
+    {
@@ -386 +425,2 @@ public class POP3ClientCommandsTest extends TestCase {
-        for (int i = 0; i < msg.length; i++) {
+        for (int i = 0; i < msg.length; i++)
+        {
@@ -394 +434,2 @@ public class POP3ClientCommandsTest extends TestCase {
-    public void testRetrieveMessageTopShouldFails() throws Exception {
+    public void testRetrieveMessageTopShouldFails() throws Exception
+    {
@@ -399 +440 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Try to get message 0
+        //Try to get message 0
@@ -402 +443 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Try to get a negative message
+        //Try to get a negative message
@@ -405 +446 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Try to get a message that is not there
+        //Try to get a message that is not there
@@ -408 +449 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Change states and try to get a valid message
+        //Change states and try to get a valid message
@@ -413 +454,2 @@ public class POP3ClientCommandsTest extends TestCase {
-    public void testRetrieveOverSizedMessageTopOnFullMailbox() throws Exception {
+    public void testRetrieveOverSizedMessageTopOnFullMailbox() throws Exception
+    {
@@ -422 +464 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Now try to retrieve more lines than exist in the message
+        //Now try to retrieve more lines than exist in the message
@@ -427,3 +469,4 @@ public class POP3ClientCommandsTest extends TestCase {
-        while (!r.ready()) {
-            // Give the reader time to get the message
-            // from the server
+        while(!r.ready())
+        {
+            //Give the reader time to get the message
+            //from the server
@@ -432,2 +475,3 @@ public class POP3ClientCommandsTest extends TestCase {
-            // but don't wait too long
-            if (delaycount == 4) {
+            //but don't wait too long
+            if (delaycount == 4)
+            {
@@ -437 +481,2 @@ public class POP3ClientCommandsTest extends TestCase {
-        while (r.ready()) {
+        while(r.ready())
+        {
@@ -441,5 +486,5 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Due to variations in line termination
-        // on different platforms, the actual
-        // size may vary slightly. On Win2KPro, the
-        // actual size is 2 bytes larger than the reported
-        // size.
+        //Due to variations in line termination
+        //on different platforms, the actual
+        //size may vary slightly.  On Win2KPro, the
+        //actual size is 2 bytes larger than the reported
+        //size.
@@ -449 +494,2 @@ public class POP3ClientCommandsTest extends TestCase {
-    public void testStatus() throws Exception {
+    public void testStatus() throws Exception
+    {
@@ -453 +499 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Should fail in authorization state
+        //Should fail in authorization state
@@ -456 +502 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Should pass on a mailbox with mail in it
+        //Should pass on a mailbox with mail in it
@@ -464 +510 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Should also pass on a mailbox with no mail in it
+        //Should also pass on a mailbox with no mail in it
@@ -474 +520 @@ public class POP3ClientCommandsTest extends TestCase {
-        // Should fail in the 'update' state
+        //Should fail in the 'update' state
diff --git a/src/test/java/org/apache/commons/net/pop3/POP3ClientTest.java b/src/test/java/org/apache/commons/net/pop3/POP3ClientTest.java
index b6ddbae22..ef753e781 100644
--- a/src/test/java/org/apache/commons/net/pop3/POP3ClientTest.java
+++ b/src/test/java/org/apache/commons/net/pop3/POP3ClientTest.java
@@ -23,0 +24 @@ import junit.framework.TestCase;
+
@@ -26,2 +27,6 @@ import junit.framework.TestCase;
- * The POP3* tests all presume the existence of the following parameters: mailserver: localhost (running on the default port 110) account: username=test;
- * password=password account: username=alwaysempty; password=password. mail: At least four emails in the test account and zero emails in the alwaysempty account
+ * The POP3* tests all presume the existence of the following parameters:
+ *   mailserver: localhost (running on the default port 110)
+ *   account: username=test; password=password
+ *   account: username=alwaysempty; password=password.
+ *   mail: At least four emails in the test account and zero emails
+ *         in the alwaysempty account
@@ -29 +34,2 @@ import junit.framework.TestCase;
- * If this won't work for you, you can change these parameters in the TestSetupParameters class.
+ * If this won't work for you, you can change these parameters in the
+ * TestSetupParameters class.
@@ -31,2 +37,3 @@ import junit.framework.TestCase;
- * The tests were originally run on a default installation of James. Your mileage may vary based on the POP3 server you run the tests against. Some servers are
- * more standards-compliant than others.
+ * The tests were originally run on a default installation of James.
+ * Your mileage may vary based on the POP3 server you run the tests against.
+ * Some servers are more standards-compliant than others.
@@ -34 +41,2 @@ import junit.framework.TestCase;
-public class POP3ClientTest extends TestCase {
+public class POP3ClientTest extends TestCase
+{
@@ -42 +50,2 @@ public class POP3ClientTest extends TestCase {
-    public POP3ClientTest(final String name) {
+    public POP3ClientTest(final String name)
+    {
@@ -46 +55,2 @@ public class POP3ClientTest extends TestCase {
-    private void connect() throws Exception {
+    private void connect() throws Exception
+    {
@@ -52 +62,2 @@ public class POP3ClientTest extends TestCase {
-    private void login() throws Exception {
+    private void login() throws Exception
+    {
@@ -57,5 +68,9 @@ public class POP3ClientTest extends TestCase {
-    private void reset() throws IOException {
-        // Case where this is the first time reset is called
-        if (p == null) {
-            // Do nothing
-        } else if (p.isConnected()) {
+    private void reset() throws IOException
+    {
+        //Case where this is the first time reset is called
+        if (p == null)
+        {
+            //Do nothing
+        }
+        else if (p.isConnected())
+        {
@@ -68 +83,2 @@ public class POP3ClientTest extends TestCase {
-    public void testInvalidLoginWithBadName() throws Exception {
+    public void testInvalidLoginWithBadName() throws Exception
+    {
@@ -72 +88 @@ public class POP3ClientTest extends TestCase {
-        // Try with an invalid user that doesn't exist
+        //Try with an invalid user that doesn't exist
@@ -76 +92,2 @@ public class POP3ClientTest extends TestCase {
-    public void testInvalidLoginWithBadPassword() throws Exception {
+    public void testInvalidLoginWithBadPassword() throws Exception
+    {
@@ -80 +97 @@ public class POP3ClientTest extends TestCase {
-        // Try with a bad password
+        //Try with a bad password
@@ -85 +102,2 @@ public class POP3ClientTest extends TestCase {
-     * Test to try to run the login method from the disconnected, transaction and update states
+     * Test to try to run the login method from the
+     * disconnected, transaction and update states
@@ -87 +105,2 @@ public class POP3ClientTest extends TestCase {
-    public void testLoginFromWrongState() throws Exception {
+    public void testLoginFromWrongState() throws Exception
+    {
@@ -90,2 +109,2 @@ public class POP3ClientTest extends TestCase {
-        // Not currently connected, not in authorization state
-        // Try to login with good name/password
+        //Not currently connected, not in authorization state
+        //Try to login with good name/password
@@ -94 +113 @@ public class POP3ClientTest extends TestCase {
-        // Now connect and set the state to 'transaction' and try again
+        //Now connect and set the state to 'transaction' and try again
@@ -100 +119 @@ public class POP3ClientTest extends TestCase {
-        // Now connect and set the state to 'update' and try again
+        //Now connect and set the state to 'update' and try again
@@ -107,2 +126,3 @@ public class POP3ClientTest extends TestCase {
-    public void testLogoutFromAllStates() throws Exception {
-        // From 'transaction' state
+    public void testLogoutFromAllStates() throws Exception
+    {
+        //From 'transaction' state
@@ -115 +135 @@ public class POP3ClientTest extends TestCase {
-        // From 'update' state
+        //From 'update' state
@@ -124 +144,2 @@ public class POP3ClientTest extends TestCase {
-     * Simple test to logon to a valid server using a valid user name and password.
+     * Simple test to logon to a valid server using a valid
+     * user name and password.
@@ -126 +147,2 @@ public class POP3ClientTest extends TestCase {
-    public void testValidLoginWithNameAndPassword() throws Exception {
+    public void testValidLoginWithNameAndPassword() throws Exception
+    {
@@ -130 +152 @@ public class POP3ClientTest extends TestCase {
-        // Try with a valid user
+        //Try with a valid user
diff --git a/src/test/java/org/apache/commons/net/pop3/POP3Constants.java b/src/test/java/org/apache/commons/net/pop3/POP3Constants.java
index 186846fd3..8ea0849c1 100644
--- a/src/test/java/org/apache/commons/net/pop3/POP3Constants.java
+++ b/src/test/java/org/apache/commons/net/pop3/POP3Constants.java
@@ -21,2 +21,6 @@ package org.apache.commons.net.pop3;
- * The POP3* tests all presume the existence of the following parameters: mailserver: localhost (running on the default port 110) account: username=test;
- * password=password account: username=alwaysempty; password=password. mail: At least four emails in the test account and zero emails in the alwaysempty account
+ * The POP3* tests all presume the existence of the following parameters:
+ *   mailserver: localhost (running on the default port 110)
+ *   account: username=test; password=password
+ *   account: username=alwaysempty; password=password.
+ *   mail: At least four emails in the test account and zero emails
+ *         in the alwaysempty account
@@ -24 +28,2 @@ package org.apache.commons.net.pop3;
- * If this won't work for you, you can change these parameters in the TestSetupParameters class.
+ * If this won't work for you, you can change these parameters in the
+ * TestSetupParameters class.
@@ -26,2 +31,3 @@ package org.apache.commons.net.pop3;
- * The tests were originally run on a default installation of James. Your mileage may vary based on the POP3 server you run the tests against. Some servers are
- * more standards-compliant than others.
+ * The tests were originally run on a default installation of James.
+ * Your mileage may vary based on the POP3 server you run the tests against.
+ * Some servers are more standards-compliant than others.
@@ -29 +35,2 @@ package org.apache.commons.net.pop3;
-public class POP3Constants {
+public class POP3Constants
+{
@@ -36,3 +43,3 @@ public class POP3Constants {
-    // Cannot be instantiated
-    private POP3Constants() {
-    }
+     //Cannot be instantiated
+    private POP3Constants()
+    {}
diff --git a/src/test/java/org/apache/commons/net/pop3/POP3ConstructorTest.java b/src/test/java/org/apache/commons/net/pop3/POP3ConstructorTest.java
index 299fa8938..f68d41c70 100644
--- a/src/test/java/org/apache/commons/net/pop3/POP3ConstructorTest.java
+++ b/src/test/java/org/apache/commons/net/pop3/POP3ConstructorTest.java
@@ -24,2 +24,6 @@ import junit.framework.TestCase;
- * The POP3* tests all presume the existence of the following parameters: mailserver: localhost (running on the default port 110) account: username=test;
- * password=password account: username=alwaysempty; password=password. mail: At least four emails in the test account and zero emails in the alwaysempty account
+ * The POP3* tests all presume the existence of the following parameters:
+ *   mailserver: localhost (running on the default port 110)
+ *   account: username=test; password=password
+ *   account: username=alwaysempty; password=password.
+ *   mail: At least four emails in the test account and zero emails
+ *         in the alwaysempty account
@@ -27 +31,2 @@ import junit.framework.TestCase;
- * If this won't work for you, you can change these parameters in the TestSetupParameters class.
+ * If this won't work for you, you can change these parameters in the
+ * TestSetupParameters class.
@@ -29,2 +34,3 @@ import junit.framework.TestCase;
- * The tests were originally run on a default installation of James. Your mileage may vary based on the POP3 server you run the tests against. Some servers are
- * more standards-compliant than others.
+ * The tests were originally run on a default installation of James.
+ * Your mileage may vary based on the POP3 server you run the tests against.
+ * Some servers are more standards-compliant than others.
@@ -32 +38,2 @@ import junit.framework.TestCase;
-public class POP3ConstructorTest extends TestCase {
+public class POP3ConstructorTest extends TestCase
+{
@@ -38 +45,2 @@ public class POP3ConstructorTest extends TestCase {
-    public POP3ConstructorTest(final String name) {
+    public POP3ConstructorTest(final String name)
+    {
@@ -43,2 +51,3 @@ public class POP3ConstructorTest extends TestCase {
-     * This test will ensure that the constants are not inadvertently changed. If the constants are changed in org.apache.commons.net.pop3 for some reason, this
-     * test will have to be updated.
+     * This test will ensure that the constants are not inadvertently changed.
+     * If the constants are changed in org.apache.commons.net.pop3 for some
+     * reason, this test will have to be updated.
@@ -46,2 +55,3 @@ public class POP3ConstructorTest extends TestCase {
-    public void testConstants() {
-        // From POP3
+    public void testConstants()
+    {
+        //From POP3
@@ -54 +64 @@ public class POP3ConstructorTest extends TestCase {
-        // From POP3Command
+        //From POP3Command
@@ -69 +79,2 @@ public class POP3ConstructorTest extends TestCase {
-    public void testPOP3ClientStateTransition() throws Exception {
+    public void testPOP3ClientStateTransition() throws Exception
+    {
@@ -72 +83 @@ public class POP3ConstructorTest extends TestCase {
-        // Initial state
+        //Initial state
@@ -78 +89 @@ public class POP3ConstructorTest extends TestCase {
-        // Now connect
+        //Now connect
@@ -82 +93 @@ public class POP3ConstructorTest extends TestCase {
-        // Now authenticate
+        //Now authenticate
@@ -86 +97 @@ public class POP3ConstructorTest extends TestCase {
-        // Now do a series of commands and make sure the state stays as it should
+        //Now do a series of commands and make sure the state stays as it should
@@ -92 +103 @@ public class POP3ConstructorTest extends TestCase {
-        // Make sure we have at least one message to test
+        //Make sure we have at least one message to test
@@ -95 +106,2 @@ public class POP3ConstructorTest extends TestCase {
-        if (msg.length > 0) {
+        if (msg.length > 0)
+        {
@@ -117,2 +129,3 @@ public class POP3ConstructorTest extends TestCase {
-            // Add some sleep here to handle network latency
-            while (!r.ready()) {
+            //Add some sleep here to handle network latency
+            while(!r.ready())
+            {
@@ -127,2 +140,3 @@ public class POP3ConstructorTest extends TestCase {
-            // Add some sleep here to handle network latency
-            while (!r.ready()) {
+            //Add some sleep here to handle network latency
+            while(!r.ready())
+            {
@@ -136 +150 @@ public class POP3ConstructorTest extends TestCase {
-        // Now logout
+        //Now logout
@@ -141 +155,2 @@ public class POP3ConstructorTest extends TestCase {
-    public void testPOP3DefaultConstructor() {
+    public void testPOP3DefaultConstructor()
+    {
diff --git a/src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java b/src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java
index 0cec31427..95f61236d 100644
--- a/src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java
+++ b/src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java
@@ -55 +55 @@ public class SimpleSMTPHeaderTestCase {
-                    fail(sentDate + " should be after " + beforeDate);
+                    fail(sentDate + " should be after "+beforeDate);
@@ -58 +58 @@ public class SimpleSMTPHeaderTestCase {
-                    fail(sentDate + " should be before " + afterDate);
+                    fail(sentDate+" should be before "+afterDate);
@@ -61 +61 @@ public class SimpleSMTPHeaderTestCase {
-                fail("" + e);
+                fail(""+e);
@@ -67 +67 @@ public class SimpleSMTPHeaderTestCase {
-                return msg.substring(end + 1);
+                return msg.substring(end+1);
@@ -69 +69 @@ public class SimpleSMTPHeaderTestCase {
-            return msg.substring(0, start) + msg.substring(end + 1);
+            return msg.substring(0, start)+msg.substring(end+1);
@@ -71 +71 @@ public class SimpleSMTPHeaderTestCase {
-        fail("Expecting Date header in " + msg);
+        fail("Expecting Date header in "+msg);
diff --git a/src/test/java/org/apache/commons/net/telnet/EchoOptionHandlerTest.java b/src/test/java/org/apache/commons/net/telnet/EchoOptionHandlerTest.java
index be9b3680e..6d4ac053f 100644
--- a/src/test/java/org/apache/commons/net/telnet/EchoOptionHandlerTest.java
+++ b/src/test/java/org/apache/commons/net/telnet/EchoOptionHandlerTest.java
@@ -22 +22,2 @@ package org.apache.commons.net.telnet;
-public class EchoOptionHandlerTest extends TelnetOptionHandlerTestAbstract {
+public class EchoOptionHandlerTest extends TelnetOptionHandlerTestAbstract
+{
@@ -28 +29,2 @@ public class EchoOptionHandlerTest extends TelnetOptionHandlerTestAbstract {
-    protected void setUp() {
+    protected void setUp()
+    {
@@ -35 +37,2 @@ public class EchoOptionHandlerTest extends TelnetOptionHandlerTestAbstract {
-     * test of server-driven subnegotiation. Checks that no subnegotiation is made.
+     * test of server-driven subnegotiation.
+     * Checks that no subnegotiation is made.
@@ -38,2 +41,7 @@ public class EchoOptionHandlerTest extends TelnetOptionHandlerTestAbstract {
-    public void testAnswerSubnegotiation() {
-        final int subn[] = { TelnetCommand.IAC, TelnetCommand.SB, TelnetOption.ECHO, 1, TelnetCommand.IAC, TelnetCommand.SE, };
+    public void testAnswerSubnegotiation()
+    {
+        final int subn[] =
+        {
+            TelnetCommand.IAC, TelnetCommand.SB, TelnetOption.ECHO,
+            1, TelnetCommand.IAC, TelnetCommand.SE,
+        };
@@ -50 +58,2 @@ public class EchoOptionHandlerTest extends TelnetOptionHandlerTestAbstract {
-    public void testConstructors() {
+    public void testConstructors()
+    {
@@ -56 +65,2 @@ public class EchoOptionHandlerTest extends TelnetOptionHandlerTestAbstract {
-     * test of client-driven subnegotiation. Checks that no subnegotiation is made.
+     * test of client-driven subnegotiation.
+     * Checks that no subnegotiation is made.
@@ -59 +69,2 @@ public class EchoOptionHandlerTest extends TelnetOptionHandlerTestAbstract {
-    public void testStartSubnegotiation() {
+    public void testStartSubnegotiation()
+    {
diff --git a/src/test/java/org/apache/commons/net/telnet/InvalidTelnetOptionExceptionTest.java b/src/test/java/org/apache/commons/net/telnet/InvalidTelnetOptionExceptionTest.java
index 3b052fa95..a52c4d26b 100644
--- a/src/test/java/org/apache/commons/net/telnet/InvalidTelnetOptionExceptionTest.java
+++ b/src/test/java/org/apache/commons/net/telnet/InvalidTelnetOptionExceptionTest.java
@@ -24 +24,2 @@ import junit.framework.TestCase;
-public class InvalidTelnetOptionExceptionTest extends TestCase {
+public class InvalidTelnetOptionExceptionTest extends TestCase
+{
@@ -33 +34,2 @@ public class InvalidTelnetOptionExceptionTest extends TestCase {
-    protected void setUp() {
+    protected void setUp()
+    {
@@ -42 +44,2 @@ public class InvalidTelnetOptionExceptionTest extends TestCase {
-    public void testConstructors() {
+    public void testConstructors()
+    {
@@ -44 +47 @@ public class InvalidTelnetOptionExceptionTest extends TestCase {
-        assertTrue(exc1.getMessage().indexOf("" + code1) >= 0);
+        assertTrue(exc1.getMessage().indexOf("" +code1) >= 0);
diff --git a/src/test/java/org/apache/commons/net/telnet/SimpleOptionHandlerTest.java b/src/test/java/org/apache/commons/net/telnet/SimpleOptionHandlerTest.java
index a559f4729..848afaa4d 100644
--- a/src/test/java/org/apache/commons/net/telnet/SimpleOptionHandlerTest.java
+++ b/src/test/java/org/apache/commons/net/telnet/SimpleOptionHandlerTest.java
@@ -22 +22,2 @@ package org.apache.commons.net.telnet;
-public class SimpleOptionHandlerTest extends TelnetOptionHandlerTestAbstract {
+public class SimpleOptionHandlerTest extends TelnetOptionHandlerTestAbstract
+{
@@ -27 +28,2 @@ public class SimpleOptionHandlerTest extends TelnetOptionHandlerTestAbstract {
-    protected void setUp() {
+    protected void setUp()
+    {
@@ -34 +36,2 @@ public class SimpleOptionHandlerTest extends TelnetOptionHandlerTestAbstract {
-     * test of server-driven subnegotiation. Checks that no subnegotiation is made.
+     * test of server-driven subnegotiation.
+     * Checks that no subnegotiation is made.
@@ -37,2 +40,7 @@ public class SimpleOptionHandlerTest extends TelnetOptionHandlerTestAbstract {
-    public void testAnswerSubnegotiation() {
-        final int subn[] = { TelnetCommand.IAC, TelnetCommand.SB, 4, 1, TelnetCommand.IAC, TelnetCommand.SE, };
+    public void testAnswerSubnegotiation()
+    {
+        final int subn[] =
+        {
+            TelnetCommand.IAC, TelnetCommand.SB, 4,
+            1, TelnetCommand.IAC, TelnetCommand.SE,
+        };
@@ -49 +57,2 @@ public class SimpleOptionHandlerTest extends TelnetOptionHandlerTestAbstract {
-    public void testConstructors() {
+    public void testConstructors()
+    {
@@ -57 +66,2 @@ public class SimpleOptionHandlerTest extends TelnetOptionHandlerTestAbstract {
-     * test of client-driven subnegotiation. Checks that no subnegotiation is made.
+     * test of client-driven subnegotiation.
+     * Checks that no subnegotiation is made.
@@ -60 +70,2 @@ public class SimpleOptionHandlerTest extends TelnetOptionHandlerTestAbstract {
-    public void testStartSubnegotiation() {
+    public void testStartSubnegotiation()
+    {
diff --git a/src/test/java/org/apache/commons/net/telnet/SuppressGAOptionHandlerTest.java b/src/test/java/org/apache/commons/net/telnet/SuppressGAOptionHandlerTest.java
index f1b8e7276..fb806eef4 100644
--- a/src/test/java/org/apache/commons/net/telnet/SuppressGAOptionHandlerTest.java
+++ b/src/test/java/org/apache/commons/net/telnet/SuppressGAOptionHandlerTest.java
@@ -22 +22,2 @@ package org.apache.commons.net.telnet;
-public class SuppressGAOptionHandlerTest extends TelnetOptionHandlerTestAbstract {
+public class SuppressGAOptionHandlerTest extends TelnetOptionHandlerTestAbstract
+{
@@ -28 +29,2 @@ public class SuppressGAOptionHandlerTest extends TelnetOptionHandlerTestAbstract
-    protected void setUp() {
+    protected void setUp()
+    {
@@ -35 +37,2 @@ public class SuppressGAOptionHandlerTest extends TelnetOptionHandlerTestAbstract
-     * test of server-driven subnegotiation. Checks that no subnegotiation is made.
+     * test of server-driven subnegotiation.
+     * Checks that no subnegotiation is made.
@@ -38,2 +41,7 @@ public class SuppressGAOptionHandlerTest extends TelnetOptionHandlerTestAbstract
-    public void testAnswerSubnegotiation() {
-        final int subn[] = { TelnetCommand.IAC, TelnetCommand.SB, TelnetOption.SUPPRESS_GO_AHEAD, 1, TelnetCommand.IAC, TelnetCommand.SE, };
+    public void testAnswerSubnegotiation()
+    {
+        final int subn[] =
+        {
+            TelnetCommand.IAC, TelnetCommand.SB, TelnetOption.SUPPRESS_GO_AHEAD,
+            1, TelnetCommand.IAC, TelnetCommand.SE,
+        };
@@ -50 +58,2 @@ public class SuppressGAOptionHandlerTest extends TelnetOptionHandlerTestAbstract
-    public void testConstructors() {
+    public void testConstructors()
+    {
@@ -56 +65,2 @@ public class SuppressGAOptionHandlerTest extends TelnetOptionHandlerTestAbstract
-     * test of client-driven subnegotiation. Checks that no subnegotiation is made.
+     * test of client-driven subnegotiation.
+     * Checks that no subnegotiation is made.
@@ -59 +69,2 @@ public class SuppressGAOptionHandlerTest extends TelnetOptionHandlerTestAbstract
-    public void testStartSubnegotiation() {
+    public void testStartSubnegotiation()
+    {
diff --git a/src/test/java/org/apache/commons/net/telnet/TelnetClientFunctionalTest.java b/src/test/java/org/apache/commons/net/telnet/TelnetClientFunctionalTest.java
index a759391c7..de0c19d44 100644
--- a/src/test/java/org/apache/commons/net/telnet/TelnetClientFunctionalTest.java
+++ b/src/test/java/org/apache/commons/net/telnet/TelnetClientFunctionalTest.java
@@ -25 +25,3 @@ import junit.framework.TestCase;
- * JUnit functional test for TelnetClient. Connects to the weather forecast service rainmaker.wunderground.com and asks for Los Angeles forecast.
+ * JUnit functional test for TelnetClient.
+ * Connects to the weather forecast service
+ * rainmaker.wunderground.com and asks for Los Angeles forecast.
@@ -27 +29,2 @@ import junit.framework.TestCase;
-public class TelnetClientFunctionalTest extends TestCase {
+public class TelnetClientFunctionalTest extends TestCase
+{
@@ -34 +37,2 @@ public class TelnetClientFunctionalTest extends TestCase {
-    protected void setUp() {
+    protected void setUp()
+    {
@@ -39 +43,5 @@ public class TelnetClientFunctionalTest extends TestCase {
-     * Do the functional test: - connect to the weather service - press return on the first menu - send LAX on the second menu - send X to exit
+     * Do the functional test:
+     * - connect to the weather service
+     * - press return on the first menu
+     * - send LAX on the second menu
+     * - send X to exit
@@ -41 +49,2 @@ public class TelnetClientFunctionalTest extends TestCase {
-    public void testFunctionalTest() throws Exception {
+    public void testFunctionalTest() throws Exception
+    {
@@ -45 +54,2 @@ public class TelnetClientFunctionalTest extends TestCase {
-        try (final InputStream is = tc1.getInputStream(); final OutputStream os = tc1.getOutputStream()) {
+        try (final InputStream is = tc1.getInputStream();
+            final OutputStream os = tc1.getOutputStream()) {
@@ -71,0 +82 @@ public class TelnetClientFunctionalTest extends TestCase {
+
@@ -75 +86,2 @@ public class TelnetClientFunctionalTest extends TestCase {
-    public boolean waitForString(final InputStream is, final String end, final long timeout) throws Exception {
+    public boolean waitForString(final InputStream is, final String end, final long timeout) throws Exception
+    {
@@ -80,2 +92,5 @@ public class TelnetClientFunctionalTest extends TestCase {
-        while ((readbytes.indexOf(end) < 0) && ((System.currentTimeMillis() - starttime) < timeout)) {
-            if (is.available() > 0) {
+        while((readbytes.indexOf(end) < 0) &&
+              ((System.currentTimeMillis() - starttime) < timeout))
+        {
+            if(is.available() > 0)
+            {
@@ -84 +99,3 @@ public class TelnetClientFunctionalTest extends TestCase {
-            } else {
+            }
+            else
+            {
@@ -89 +106,2 @@ public class TelnetClientFunctionalTest extends TestCase {
-        if (readbytes.indexOf(end) >= 0) {
+        if(readbytes.indexOf(end) >= 0)
+        {
diff --git a/src/test/java/org/apache/commons/net/telnet/TelnetClientTest.java b/src/test/java/org/apache/commons/net/telnet/TelnetClientTest.java
index ae60b2ffa..be40ba739 100644
--- a/src/test/java/org/apache/commons/net/telnet/TelnetClientTest.java
+++ b/src/test/java/org/apache/commons/net/telnet/TelnetClientTest.java
@@ -18 +17,0 @@ package org.apache.commons.net.telnet;
-
@@ -28 +27,2 @@ import junit.framework.TestCase;
- * JUnit test class for TelnetClient.s Implements protocol compliance tests
+ * JUnit test class for TelnetClient.s
+ * Implements protocol compliance tests
@@ -30 +30,3 @@ import junit.framework.TestCase;
-public class TelnetClientTest extends TestCase implements TelnetNotificationHandler {
+public class TelnetClientTest
+extends TestCase implements TelnetNotificationHandler
+{
@@ -32 +34,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-     * Handy holder to hold both sides of the connection used in testing for clarity.
+     * Handy holder to hold both sides of the connection
+     * used in testing for clarity.
@@ -38,2 +41,5 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-
-        TestConnection(final TelnetTestSimpleServer server, final TelnetClient client, final int port) {
+        TestConnection(
+                final TelnetTestSimpleServer server,
+                final TelnetClient client,
+                final int port)
+        {
@@ -44 +49,0 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-
@@ -46 +51,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-            TelnetClientTest.this.closeConnection(this.server, this.client, this.port);
+            TelnetClientTest.this.closeConnection(
+                    this.server, this.client, this.port);
@@ -59,0 +66 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
+
@@ -79 +86 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-            System.err.println("ERROR in closeConnection(), " + e.getMessage());
+            System.err.println("ERROR in closeConnection(), "+ e.getMessage());
@@ -87,2 +94,4 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-    protected boolean equalBytes(final byte a1[], final byte a2[]) {
-        if (a1.length != a2.length) {
+    protected boolean equalBytes(final byte a1[], final byte a2[])
+    {
+        if(a1.length != a2.length)
+        {
@@ -92 +101,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        for (int ii = 0; ii < a1.length; ii++) {
+        for(int ii=0; ii<a1.length; ii++)
+        {
@@ -94 +104 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-            if (a1[ii] != a2[ii]) {
+            if (a1[ii]!= a2[ii]) {
@@ -100,0 +111,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
+
+
@@ -102,5 +114,8 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-     * Callback method called when TelnetClient receives an option negotiation command. <p>
-     *
-     * @param negotiation_code - type of negotiation command received (RECEIVED_DO, RECEIVED_DONT, RECEIVED_WILL, RECEIVED_WONT) <p>
-     *
-     * @param option_code - code of the option negotiated <p>
+     * Callback method called when TelnetClient receives an option
+     * negotiation command.
+     * <p>
+     * @param negotiation_code - type of negotiation command received
+     * (RECEIVED_DO, RECEIVED_DONT, RECEIVED_WILL, RECEIVED_WONT)
+     * <p>
+     * @param option_code - code of the option negotiated
+     * <p>
@@ -109,2 +124,4 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-    public void receivedNegotiation(final int negotiation_code, final int option_code) {
-        if (negotiation_code == TelnetNotificationHandler.RECEIVED_DO) {
+    public void receivedNegotiation(final int negotiation_code, final int option_code)
+    {
+        if(negotiation_code == TelnetNotificationHandler.RECEIVED_DO)
+        {
@@ -112 +129,3 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        } else if (negotiation_code == TelnetNotificationHandler.RECEIVED_DONT) {
+        }
+        else if(negotiation_code == TelnetNotificationHandler.RECEIVED_DONT)
+        {
@@ -114 +133,3 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        } else if (negotiation_code == TelnetNotificationHandler.RECEIVED_WILL) {
+        }
+        else if(negotiation_code == TelnetNotificationHandler.RECEIVED_WILL)
+        {
@@ -116 +137,3 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        } else if (negotiation_code == TelnetNotificationHandler.RECEIVED_WONT) {
+        }
+        else if(negotiation_code == TelnetNotificationHandler.RECEIVED_WONT)
+        {
@@ -125,2 +148,4 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-    protected void setUp() throws Exception {
-        final SimpleOptionHandler subnegotiationSizeHandler = new SimpleOptionHandler(99, false, false, true, false) {
+    protected void setUp() throws Exception
+    {
+        final SimpleOptionHandler subnegotiationSizeHandler = new SimpleOptionHandler(99, false, false, true, false)
+        {
@@ -128 +153,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-            public int[] answerSubnegotiation(final int[] suboptionData, final int suboptionLength) {
+            public int[] answerSubnegotiation(final int[] suboptionData, final int suboptionLength)
+            {
@@ -137 +163,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        for (int port = 3333; socket < NUM_CONNECTIONS && port < 4000; port++) {
+        for (int port = 3333; socket < NUM_CONNECTIONS && port < 4000; port++)
+        {
@@ -140,2 +167,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-            try {
-                server = new TelnetTestSimpleServer(port);
+           try {
+               server = new TelnetTestSimpleServer(port);
@@ -143,48 +170,51 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-                case 0:
-                    client = new TelnetClient();
-                    // redundant but makes code clearer.
-                    client.setReaderThread(true);
-                    client.addOptionHandler(subnegotiationSizeHandler);
-                    client.connect("127.0.0.1", port);
-                    STANDARD = new TestConnection(server, client, port);
-                    break;
-                case 1:
-                    client = new TelnetClient();
-                    final TerminalTypeOptionHandler ttopt = new TerminalTypeOptionHandler("VT100", false, false, true, false);
-                    final EchoOptionHandler echoopt = new EchoOptionHandler(true, false, true, false);
-                    final SuppressGAOptionHandler gaopt = new SuppressGAOptionHandler(true, true, true, true);
-
-                    client.addOptionHandler(ttopt);
-                    client.addOptionHandler(echoopt);
-                    client.addOptionHandler(gaopt);
-                    client.connect("127.0.0.1", port);
-                    OPTIONS = new TestConnection(server, client, port);
-                    break;
-                case 2:
-                    client = new TelnetClient("ANSI");
-                    client.connect("127.0.0.1", port);
-                    ANSI = new TestConnection(server, client, port);
-                    break;
-                case 3:
-                    client = new TelnetClient();
-                    client.setReaderThread(false);
-                    client.connect("127.0.0.1", port);
-                    NOREAD = new TestConnection(server, client, port);
-                    break;
-                case 4:
-                    client = new TelnetClient(8);
-                    client.addOptionHandler(subnegotiationSizeHandler);
-                    client.connect("127.0.0.1", port);
-                    SMALL_BUFFER = new TestConnection(server, client, port);
-                    break;
-                }
-                // only increment socket number on success
-                socket++;
-            } catch (final IOException e) {
-                closeConnection(server, client, port);
-            }
-        }
-        if (socket < NUM_CONNECTIONS) {
-            System.err.println("Only created " + socket + " clients; wanted " + NUM_CONNECTIONS);
-        }
-        Thread.sleep(1000);
+                    case 0:
+                        client = new TelnetClient();
+                        // redundant but makes code clearer.
+                        client.setReaderThread(true);
+                        client.addOptionHandler(subnegotiationSizeHandler);
+                        client.connect("127.0.0.1", port);
+                        STANDARD = new TestConnection(server, client, port);
+                        break;
+                    case 1:
+                        client = new TelnetClient();
+                        final TerminalTypeOptionHandler ttopt =
+                            new TerminalTypeOptionHandler("VT100", false, false, true, false);
+                        final EchoOptionHandler echoopt =
+                            new EchoOptionHandler(true, false, true, false);
+                        final SuppressGAOptionHandler gaopt =
+                            new SuppressGAOptionHandler(true, true, true, true);
+
+                        client.addOptionHandler(ttopt);
+                        client.addOptionHandler(echoopt);
+                        client.addOptionHandler(gaopt);
+                        client.connect("127.0.0.1", port);
+                        OPTIONS = new TestConnection(server, client, port);
+                        break;
+                    case 2:
+                        client = new TelnetClient("ANSI");
+                        client.connect("127.0.0.1", port);
+                        ANSI = new TestConnection(server, client, port);
+                        break;
+                    case 3:
+                        client = new TelnetClient();
+                        client.setReaderThread(false);
+                        client.connect("127.0.0.1", port);
+                        NOREAD = new TestConnection(server, client, port);
+                        break;
+                    case 4:
+                        client = new TelnetClient(8);
+                        client.addOptionHandler(subnegotiationSizeHandler);
+                        client.connect("127.0.0.1", port);
+                        SMALL_BUFFER = new TestConnection(server, client, port);
+                        break;
+               }
+               // only increment socket number on success
+               socket++;
+           } catch (final IOException e) {
+               closeConnection(server, client, port);
+           }
+       }
+       if (socket < NUM_CONNECTIONS) {
+           System.err.println("Only created "+socket+" clients; wanted "+NUM_CONNECTIONS);
+       }
+       Thread.sleep(1000);
@@ -206 +236 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-            // do nothing
+            //do nothing
@@ -210,0 +241 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
+
@@ -214 +245,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-    public void testAYT() throws Exception {
+    public void testAYT() throws Exception
+    {
@@ -217,0 +250 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
+
@@ -219 +252,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        final byte response[] = { (byte) '[', (byte) 'Y', (byte) 'e', (byte) 's', (byte) ']' };
+        final byte response[] =
+            { (byte) '[', (byte) 'Y', (byte) 'e', (byte) 's', (byte) ']' };
@@ -222,2 +256,3 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        inputs[0] = new String(AYT);
-        outputs[0] = new String(response);
+        inputs[0] = new String (AYT);
+        outputs[0] = new String (response);
+
@@ -227 +262,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        final TelnetTestResponder tr = new TelnetTestResponder(is, os, inputs, outputs, 30000);
+        final TelnetTestResponder tr =
+            new TelnetTestResponder(is, os, inputs, outputs, 30000);
@@ -232 +268 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-            ayt_true_ok = true;
+            ayt_true_ok=true;
@@ -241 +277 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-            ayt_false_ok = true;
+            ayt_false_ok=true;
@@ -243,0 +280 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
+
@@ -251 +288,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-    public void testDeleteOptionHandler() throws Exception {
+    public void testDeleteOptionHandler() throws Exception
+    {
@@ -257,2 +295,9 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        final byte send[] = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO, (byte) TelnetOption.ECHO, (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO,
-                (byte) TelnetOption.SUPPRESS_GO_AHEAD, (byte) TelnetCommand.IAC, (byte) TelnetCommand.WILL, (byte) TelnetOption.SUPPRESS_GO_AHEAD };
+        final byte send[] =
+        {
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO,
+            (byte) TelnetOption.ECHO,
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO,
+            (byte) TelnetOption.SUPPRESS_GO_AHEAD,
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.WILL,
+            (byte) TelnetOption.SUPPRESS_GO_AHEAD
+        };
@@ -260,2 +305,7 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        final byte expected[] = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT, (byte) TelnetOption.SUPPRESS_GO_AHEAD, (byte) TelnetCommand.IAC,
-                (byte) TelnetCommand.DONT, (byte) TelnetOption.SUPPRESS_GO_AHEAD };
+        final byte expected[] =
+        {
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT,
+            (byte) TelnetOption.SUPPRESS_GO_AHEAD,
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.DONT,
+            (byte) TelnetOption.SUPPRESS_GO_AHEAD
+        };
@@ -270 +320,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        if (is.available() == 0) {
+        if(is.available() == 0)
+        {
@@ -273 +324,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-            if (is.available() == 6) {
+            if(is.available() == 6)
+            {
@@ -281 +333,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        try {
+        try
+        {
@@ -283 +336,3 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        } catch (final Exception e) {
+        }
+        catch (final Exception e)
+        {
@@ -287 +342,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        try {
+        try
+        {
@@ -289 +345,3 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        } catch (final Exception e) {
+        }
+        catch (final Exception e)
+        {
@@ -300,0 +359 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
+
@@ -304 +363,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-    public void testInitial() throws Exception {
+    public void testInitial() throws Exception
+    {
@@ -312,3 +372,9 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        final byte expected2[] = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.WILL, (byte) TelnetOption.ECHO, (byte) TelnetCommand.IAC,
-                (byte) TelnetCommand.WILL, (byte) TelnetOption.SUPPRESS_GO_AHEAD, (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO,
-                (byte) TelnetOption.SUPPRESS_GO_AHEAD, };
+        final byte expected2[] =
+        {
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.WILL,
+            (byte) TelnetOption.ECHO,
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.WILL,
+            (byte) TelnetOption.SUPPRESS_GO_AHEAD,
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO,
+            (byte) TelnetOption.SUPPRESS_GO_AHEAD,
+        };
@@ -317 +383,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        try {
+        try
+        {
@@ -319 +386,3 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        } catch (final Exception e) {
+        }
+        catch (final Exception e)
+        {
@@ -323 +392,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        try {
+        try
+        {
@@ -325 +395,3 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        } catch (final Exception e) {
+        }
+        catch (final Exception e)
+        {
@@ -331 +403,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        if (is1.available() == 0) {
+        if(is1.available() == 0)
+        {
@@ -337 +410,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        if (is2.available() == 9) {
+        if(is2.available() == 9)
+        {
@@ -348 +422,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        if (is3.available() == 0) {
+        if(is3.available() == 0)
+        {
@@ -351,0 +427 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
+
@@ -365,0 +442 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
+
@@ -369,4 +446,12 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-    public void testMaxSubnegotiationLength() throws Exception {
-        final byte send[] = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.SB, (byte) 99, (byte) 1, (byte) 2, (byte) 3, (byte) 4, (byte) 5, (byte) 6,
-                (byte) 7, (byte) 8, (byte) 9, (byte) 10, (byte) 11, (byte) 12, (byte) 13, (byte) 14, (byte) 15, (byte) TelnetCommand.IAC,
-                (byte) TelnetCommand.SE, };
+    public void testMaxSubnegotiationLength() throws Exception
+    {
+        final byte send[] =
+            {
+                (byte) TelnetCommand.IAC, (byte) TelnetCommand.SB, (byte) 99,
+                (byte) 1, (byte) 2, (byte) 3,
+                (byte) 4, (byte) 5, (byte) 6,
+                (byte) 7, (byte) 8, (byte) 9,
+                (byte) 10, (byte) 11, (byte) 12,
+                (byte) 13, (byte) 14, (byte) 15,
+                (byte) TelnetCommand.IAC, (byte) TelnetCommand.SE,
+            };
@@ -412 +497,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-    public void testNotification() throws Exception {
+    public void testNotification() throws Exception
+    {
@@ -414 +500,5 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        final byte send1[] = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO, (byte) 15, (byte) TelnetCommand.IAC, (byte) TelnetCommand.WILL, (byte) 15, };
+        final byte send1[] =
+        {
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO, (byte) 15,
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.WILL, (byte) 15,
+        };
@@ -417,3 +507,11 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        final byte send2[] = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO, (byte) TelnetOption.TERMINAL_TYPE, (byte) TelnetCommand.IAC,
-                (byte) TelnetCommand.DONT, (byte) TelnetOption.ECHO, (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO, (byte) TelnetOption.SUPPRESS_GO_AHEAD,
-                (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT, (byte) TelnetOption.SUPPRESS_GO_AHEAD };
+        final byte send2[] =
+        {
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO,
+            (byte) TelnetOption.TERMINAL_TYPE,
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.DONT,
+            (byte) TelnetOption.ECHO,
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO,
+            (byte) TelnetOption.SUPPRESS_GO_AHEAD,
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT,
+            (byte) TelnetOption.SUPPRESS_GO_AHEAD
+        };
@@ -422,0 +521 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
+
@@ -435 +534,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        if (is1.available() > 0) {
+        if(is1.available() > 0)
+        {
@@ -446 +546,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        if (is2.available() > 0) {
+        if(is2.available() > 0)
+        {
@@ -448,4 +549,5 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-            Thread.sleep(1000);
-            if (is2.available() > 0) {
-                is2.read(buffread2b);
-            }
+                Thread.sleep(1000);
+                if(is2.available() > 0)
+                {
+                    is2.read(buffread2b);
+                }
@@ -453,0 +556 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
+
@@ -463 +566,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-    public void testOptionNegotiation() throws Exception {
+    public void testOptionNegotiation() throws Exception
+    {
@@ -466,3 +570,10 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        final byte send1[] = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO, (byte) 15, (byte) TelnetCommand.IAC, (byte) TelnetCommand.WILL, (byte) 15, };
-        final byte expected1[] = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT, (byte) 15, (byte) TelnetCommand.IAC, (byte) TelnetCommand.DONT,
-                (byte) 15, };
+        final byte send1[] =
+        {
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO, (byte) 15,
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.WILL, (byte) 15,
+        };
+        final byte expected1[] =
+        {
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT, (byte) 15,
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.DONT, (byte) 15,
+        };
@@ -472,6 +583,20 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        final byte send2[] = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO, (byte) TelnetOption.TERMINAL_TYPE, (byte) TelnetCommand.IAC,
-                (byte) TelnetCommand.DONT, (byte) TelnetOption.ECHO, (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO, (byte) TelnetOption.SUPPRESS_GO_AHEAD,
-                (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT, (byte) TelnetOption.SUPPRESS_GO_AHEAD };
-        final byte expected2[] = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.WILL, (byte) TelnetOption.TERMINAL_TYPE, (byte) TelnetCommand.IAC,
-                (byte) TelnetCommand.WONT, (byte) TelnetOption.ECHO, (byte) TelnetCommand.IAC, (byte) TelnetCommand.DONT,
-                (byte) TelnetOption.SUPPRESS_GO_AHEAD };
+        final byte send2[] =
+        {
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO,
+            (byte) TelnetOption.TERMINAL_TYPE,
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.DONT,
+            (byte) TelnetOption.ECHO,
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO,
+            (byte) TelnetOption.SUPPRESS_GO_AHEAD,
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT,
+            (byte) TelnetOption.SUPPRESS_GO_AHEAD
+        };
+        final byte expected2[] =
+        {
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.WILL,
+            (byte) TelnetOption.TERMINAL_TYPE,
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT,
+            (byte) TelnetOption.ECHO,
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.DONT,
+            (byte) TelnetOption.SUPPRESS_GO_AHEAD
+        };
@@ -480,4 +605,14 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        final byte send2b[] = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.SB, (byte) TelnetOption.TERMINAL_TYPE, (byte) 1, (byte) TelnetCommand.IAC,
-                (byte) TelnetCommand.SE, };
-        final byte expected2b[] = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.SB, (byte) TelnetOption.TERMINAL_TYPE, (byte) 0, (byte) 'V', (byte) 'T',
-                (byte) '1', (byte) '0', (byte) '0', (byte) TelnetCommand.IAC, (byte) TelnetCommand.SE, };
+        final byte send2b[] =
+        {
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.SB,
+            (byte) TelnetOption.TERMINAL_TYPE,
+            (byte) 1, (byte) TelnetCommand.IAC, (byte) TelnetCommand.SE,
+        };
+        final byte expected2b[] =
+        {
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.SB,
+            (byte) TelnetOption.TERMINAL_TYPE,
+            (byte) 0, (byte) 'V', (byte) 'T', (byte) '1', (byte) '0',
+            (byte) '0',
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.SE,
+        };
@@ -487,4 +622,14 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        final byte send3[] = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO, (byte) TelnetOption.TERMINAL_TYPE, (byte) TelnetCommand.IAC,
-                (byte) TelnetCommand.DO, (byte) TelnetOption.SUPPRESS_GO_AHEAD };
-        final byte expected3[] = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.WILL, (byte) TelnetOption.TERMINAL_TYPE, (byte) TelnetCommand.IAC,
-                (byte) TelnetCommand.WONT, (byte) TelnetOption.SUPPRESS_GO_AHEAD };
+        final byte send3[] =
+        {
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO,
+            (byte) TelnetOption.TERMINAL_TYPE,
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO,
+            (byte) TelnetOption.SUPPRESS_GO_AHEAD
+        };
+        final byte expected3[] =
+        {
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.WILL,
+            (byte) TelnetOption.TERMINAL_TYPE,
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT,
+            (byte) TelnetOption.SUPPRESS_GO_AHEAD
+        };
@@ -492,4 +637,14 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        final byte send3b[] = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.SB, (byte) TelnetOption.TERMINAL_TYPE, (byte) 1, (byte) TelnetCommand.IAC,
-                (byte) TelnetCommand.SE, };
-        final byte expected3b[] = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.SB, (byte) TelnetOption.TERMINAL_TYPE, (byte) 0, (byte) 'A', (byte) 'N',
-                (byte) 'S', (byte) 'I', (byte) TelnetCommand.IAC, (byte) TelnetCommand.SE, };
+        final byte send3b[] =
+        {
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.SB,
+            (byte) TelnetOption.TERMINAL_TYPE,
+            (byte) 1, (byte) TelnetCommand.IAC, (byte) TelnetCommand.SE,
+        };
+        final byte expected3b[] =
+        {
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.SB,
+            (byte) TelnetOption.TERMINAL_TYPE,
+            (byte) 0, (byte) 'A', (byte) 'N', (byte) 'S', (byte) 'I',
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.SE,
+        };
+
@@ -503 +658,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        if (is1.available() == 6) {
+        if(is1.available() == 6)
+        {
@@ -518 +674,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        if (is2.available() == 9) {
+        if(is2.available() == 9)
+        {
@@ -525 +682,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-            if (negotiation2_ok) {
+            if(negotiation2_ok)
+            {
@@ -530 +688,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-                if (is2.available() == 11) {
+                if(is2.available() == 11)
+                {
@@ -547 +706,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        if (is3.available() == 6) {
+        if(is3.available() == 6)
+        {
@@ -554 +714,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-            if (negotiation3_ok) {
+            if(negotiation3_ok)
+            {
@@ -559 +720,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-                if (is3.available() == 10) {
+                if(is3.available() == 10)
+                {
@@ -586 +748,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-    public void testOptionRenegotiation() throws Exception {
+    public void testOptionRenegotiation() throws Exception
+    {
@@ -590,4 +753,16 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        final byte send[] = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO, (byte) TelnetOption.ECHO, (byte) TelnetCommand.IAC, (byte) TelnetCommand.DONT,
-                (byte) TelnetOption.SUPPRESS_GO_AHEAD, (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT, (byte) TelnetOption.SUPPRESS_GO_AHEAD };
-        final byte expected[] = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT, (byte) TelnetOption.SUPPRESS_GO_AHEAD, (byte) TelnetCommand.IAC,
-                (byte) TelnetCommand.DONT, (byte) TelnetOption.SUPPRESS_GO_AHEAD };
+        final byte send[] =
+        {
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO,
+            (byte) TelnetOption.ECHO,
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.DONT,
+            (byte) TelnetOption.SUPPRESS_GO_AHEAD,
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT,
+            (byte) TelnetOption.SUPPRESS_GO_AHEAD
+        };
+        final byte expected[] =
+        {
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT,
+            (byte) TelnetOption.SUPPRESS_GO_AHEAD,
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.DONT,
+            (byte) TelnetOption.SUPPRESS_GO_AHEAD
+        };
@@ -596,2 +771,11 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        final byte send2[] = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.DONT, (byte) TelnetOption.ECHO, };
-        final byte expected2[] = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT, (byte) TelnetOption.ECHO, };
+        final byte send2[] =
+        {
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.DONT,
+            (byte) TelnetOption.ECHO,
+        };
+        final byte expected2[] =
+        {
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT,
+            (byte) TelnetOption.ECHO,
+        };
+
@@ -606 +790,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        if (is.available() == 6) {
+        if(is.available() == 6)
+        {
@@ -613 +798,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-            if (negotiation1_ok) {
+            if(negotiation1_ok)
+            {
@@ -618 +804,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-                if (is.available() == 3) {
+                if(is.available() == 3)
+                {
@@ -630,0 +818 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
+
@@ -634 +822,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-    public void testSetReaderThread() throws Exception {
+    public void testSetReaderThread() throws Exception
+    {
@@ -639,3 +828,11 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        final byte send1[] = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO, (byte) 15, (byte) TelnetCommand.IAC, (byte) TelnetCommand.WILL, (byte) 15, };
-        final byte expected1[] = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT, (byte) 15, (byte) TelnetCommand.IAC, (byte) TelnetCommand.DONT,
-                (byte) 15, };
+        final byte send1[] =
+        {
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO, (byte) 15,
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.WILL, (byte) 15,
+        };
+        final byte expected1[] =
+        {
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT, (byte) 15,
+            (byte) TelnetCommand.IAC, (byte) TelnetCommand.DONT, (byte) 15,
+        };
+
@@ -655 +852,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        if (ret_read == 1 && buff[0] == 'A') {
+        if(ret_read == 1 && buff[0] == 'A')
+        {
@@ -659,4 +857,4 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        // if(is1.available() == 6)
-        // {
-        int read = 0;
-        int pos = 0;
+       // if(is1.available() == 6)
+        //{
+            int read = 0;
+            int pos = 0;
@@ -664,6 +862,11 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        byte[] tmp = new byte[16];
-        while (pos < 5) {
-            read = is1.read(tmp);
-            System.arraycopy(tmp, 0, buffread1, pos, read);
-            pos += read;
-        }
+            byte[] tmp = new byte[16];
+            while ( pos < 5 ) {
+                read = is1.read(tmp);
+                System.arraycopy(tmp, 0, buffread1, pos, read);
+                pos+=read;
+            }
+
+            if (equalBytes(buffread1, expected1)) {
+                negotiation1_ok = true;
+        //}
+            }
@@ -671,4 +873,0 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        if (equalBytes(buffread1, expected1)) {
-            negotiation1_ok = true;
-            // }
-        }
@@ -685 +884 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        while (pos < 5) {
+        while ( pos < 5 ) {
@@ -688 +887 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-            pos += read;
+            pos+=read;
@@ -690,3 +889,3 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        // if(is2.available() == 6)
-        // {
-        is2.read(buffread1);
+        //if(is2.available() == 6)
+        //{
+            is2.read(buffread1);
@@ -694,4 +893,4 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        if (equalBytes(buffread1, expected1)) {
-            negotiation2_ok = true;
-            // }
-        }
+            if (equalBytes(buffread1, expected1)) {
+                negotiation2_ok = true;
+        //}
+            }
@@ -709 +908,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-    public void testSpy() throws Exception {
+    public void testSpy() throws Exception
+    {
@@ -713,2 +913,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        final byte expected1[] = { (byte) 't', (byte) 'e', (byte) 's', (byte) 't', (byte) '1' };
-        final byte expected2[] = { (byte) 't', (byte) 'e', (byte) 's', (byte) 't', (byte) '2' };
+        final byte expected1[] = {(byte) 't', (byte) 'e', (byte) 's', (byte) 't', (byte) '1'};
+        final byte expected2[] = {(byte) 't', (byte) 'e', (byte) 's', (byte) 't', (byte) '2'};
@@ -716 +916,2 @@ public class TelnetClientTest extends TestCase implements TelnetNotificationHand
-        try (final PipedOutputStream po = new PipedOutputStream(); final PipedInputStream pi = new PipedInputStream(po)) {
+        try (final PipedOutputStream po = new PipedOutputStream();
+            final PipedInputStream pi = new PipedInputStream(po)) {
diff --git a/src/test/java/org/apache/commons/net/telnet/TelnetOptionHandlerTestAbstract.java b/src/test/java/org/apache/commons/net/telnet/TelnetOptionHandlerTestAbstract.java
index 272e26981..acf8622c0 100644
--- a/src/test/java/org/apache/commons/net/telnet/TelnetOptionHandlerTestAbstract.java
+++ b/src/test/java/org/apache/commons/net/telnet/TelnetOptionHandlerTestAbstract.java
@@ -22,2 +22,5 @@ import junit.framework.TestCase;
- * The TelnetOptionHandlerTest is the abstract class for testing TelnetOptionHandler. It can be used to derive the actual test classes for TelnetOptionHadler
- * derived classes, by adding creation of three new option handlers and testing of the specific subnegotiation behavior.
+ * The TelnetOptionHandlerTest is the abstract class for
+ * testing TelnetOptionHandler. It can be used to derive
+ * the actual test classes for TelnetOptionHadler derived
+ * classes, by adding creation of three new option handlers
+ * and testing of the specific subnegotiation behavior.
@@ -25 +28,2 @@ import junit.framework.TestCase;
-public abstract class TelnetOptionHandlerTestAbstract extends TestCase {
+public abstract class TelnetOptionHandlerTestAbstract extends TestCase
+{
@@ -31,2 +35,6 @@ public abstract class TelnetOptionHandlerTestAbstract extends TestCase {
-     * setUp for the test. The derived test class must implement this method by creating opthand1, opthand2, opthand3 like in the following: opthand1 = new
-     * EchoOptionHandler(); opthand2 = new EchoOptionHandler(true, true, true, true); opthand3 = new EchoOptionHandler(false, false, false, false);
+     * setUp for the test. The derived test class must implement
+     * this method by creating opthand1, opthand2, opthand3
+     * like in the following:
+     *     opthand1 = new EchoOptionHandler();
+     *     opthand2 = new EchoOptionHandler(true, true, true, true);
+     *     opthand3 = new EchoOptionHandler(false, false, false, false);
@@ -38 +46,2 @@ public abstract class TelnetOptionHandlerTestAbstract extends TestCase {
-     * test of server-driven subnegotiation. Abstract test: the derived class should implement it.
+     * test of server-driven subnegotiation. Abstract test:
+     * the derived class should implement it.
@@ -41 +50 @@ public abstract class TelnetOptionHandlerTestAbstract extends TestCase {
-    // test subnegotiation
+        // test subnegotiation
@@ -44 +53,2 @@ public abstract class TelnetOptionHandlerTestAbstract extends TestCase {
-     * test of the constructors. The derived class may add test of the option code.
+     * test of the constructors. The derived class may add
+     * test of the option code.
@@ -46 +56,2 @@ public abstract class TelnetOptionHandlerTestAbstract extends TestCase {
-    public void testConstructors() {
+    public void testConstructors()
+    {
@@ -67 +78,2 @@ public abstract class TelnetOptionHandlerTestAbstract extends TestCase {
-    public void testDo() {
+    public void testDo()
+    {
@@ -77 +89,2 @@ public abstract class TelnetOptionHandlerTestAbstract extends TestCase {
-     * test of client-driven subnegotiation. Abstract test: the derived class should implement it.
+     * test of client-driven subnegotiation. Abstract test:
+     * the derived class should implement it.
@@ -84 +97,2 @@ public abstract class TelnetOptionHandlerTestAbstract extends TestCase {
-    public void testWill() {
+    public void testWill()
+    {
diff --git a/src/test/java/org/apache/commons/net/telnet/TelnetOptionTest.java b/src/test/java/org/apache/commons/net/telnet/TelnetOptionTest.java
index e120ee275..04dbdce74 100644
--- a/src/test/java/org/apache/commons/net/telnet/TelnetOptionTest.java
+++ b/src/test/java/org/apache/commons/net/telnet/TelnetOptionTest.java
@@ -24 +24,2 @@ import junit.framework.TestCase;
-public class TelnetOptionTest extends TestCase {
+public class TelnetOptionTest extends TestCase
+{
@@ -28 +29,2 @@ public class TelnetOptionTest extends TestCase {
-    public void testGetOption() {
+    public void testGetOption()
+    {
@@ -37 +39,2 @@ public class TelnetOptionTest extends TestCase {
-    public void testisValidOption() {
+    public void testisValidOption()
+    {
diff --git a/src/test/java/org/apache/commons/net/telnet/TelnetTestResponder.java b/src/test/java/org/apache/commons/net/telnet/TelnetTestResponder.java
index 5910fb1f0..c45e363d9 100644
--- a/src/test/java/org/apache/commons/net/telnet/TelnetTestResponder.java
+++ b/src/test/java/org/apache/commons/net/telnet/TelnetTestResponder.java
@@ -21,0 +22 @@ import java.io.OutputStream;
+
@@ -23,2 +24,4 @@ import java.io.OutputStream;
- * Simple stream responder. Waits for strings on an input stream and answers sending corresponfing strings on an output stream. The reader runs in a separate
- * thread.
+ * Simple stream responder.
+ * Waits for strings on an input stream and answers
+ * sending corresponfing strings on an output stream.
+ * The reader runs in a separate thread.
@@ -26 +29,2 @@ import java.io.OutputStream;
-public class TelnetTestResponder implements Runnable {
+public class TelnetTestResponder implements Runnable
+{
@@ -33 +37,2 @@ public class TelnetTestResponder implements Runnable {
-     * Constructor. Starts a new thread for the reader.
+     * Constructor.
+     * Starts a new thread for the reader.
@@ -35,4 +40,3 @@ public class TelnetTestResponder implements Runnable {
-     *
-     * @param is      - InputStream on which to read.
-     * @param os      - OutputStream on which to answer.
-     * @param inputs  - Array of waited for Strings.
+     * @param is - InputStream on which to read.
+     * @param os - OutputStream on which to answer.
+     * @param inputs - Array of waited for Strings.
@@ -42 +46,2 @@ public class TelnetTestResponder implements Runnable {
-    public TelnetTestResponder(final InputStream is, final OutputStream os, final String inputs[], final String outputs[], final long timeout) {
+    public TelnetTestResponder(final InputStream is, final OutputStream os, final String inputs[], final String outputs[], final long timeout)
+    {
@@ -48 +53 @@ public class TelnetTestResponder implements Runnable {
-        final Thread reader = new Thread(this);
+        final Thread reader = new Thread (this);
@@ -57 +62,2 @@ public class TelnetTestResponder implements Runnable {
-    public void run() {
+    public void run()
+    {
@@ -62 +68,2 @@ public class TelnetTestResponder implements Runnable {
-        try {
+        try
+        {
@@ -64,2 +71,5 @@ public class TelnetTestResponder implements Runnable {
-            while (!result && System.currentTimeMillis() - starttime < _timeout) {
-                if (_is.available() > 0) {
+            while(!result &&
+                  System.currentTimeMillis() - starttime < _timeout)
+            {
+                if(_is.available() > 0)
+                {
@@ -69,2 +79,4 @@ public class TelnetTestResponder implements Runnable {
-                    for (int ii = 0; ii < _inputs.length; ii++) {
-                        if (readbytes.indexOf(_inputs[ii]) >= 0) {
+                    for(int ii=0; ii<_inputs.length; ii++)
+                    {
+                        if(readbytes.indexOf(_inputs[ii]) >= 0)
+                        {
@@ -76 +88,3 @@ public class TelnetTestResponder implements Runnable {
-                } else {
+                }
+                else
+                {
@@ -81 +95,3 @@ public class TelnetTestResponder implements Runnable {
-        } catch (final Exception e) {
+        }
+        catch (final Exception e)
+        {
diff --git a/src/test/java/org/apache/commons/net/telnet/TelnetTestSimpleServer.java b/src/test/java/org/apache/commons/net/telnet/TelnetTestSimpleServer.java
index 1503add39..611e6bec6 100644
--- a/src/test/java/org/apache/commons/net/telnet/TelnetTestSimpleServer.java
+++ b/src/test/java/org/apache/commons/net/telnet/TelnetTestSimpleServer.java
@@ -26 +26,2 @@ import java.net.Socket;
- * Simple TCP server. Waits for connections on a TCP port in a separate thread.
+ * Simple TCP server.
+ * Waits for connections on a TCP port in a separate thread.
@@ -28 +29,2 @@ import java.net.Socket;
-public class TelnetTestSimpleServer implements Runnable {
+public class TelnetTestSimpleServer implements Runnable
+{
@@ -34,2 +36,2 @@ public class TelnetTestSimpleServer implements Runnable {
-     * test of client-driven subnegotiation. <p>
-     *
+     * test of client-driven subnegotiation.
+     * <p>
@@ -37 +38,0 @@ public class TelnetTestSimpleServer implements Runnable {
-     *
@@ -40 +41,2 @@ public class TelnetTestSimpleServer implements Runnable {
-    public TelnetTestSimpleServer(final int port) throws IOException {
+    public TelnetTestSimpleServer(final int port) throws IOException
+    {
@@ -43 +45 @@ public class TelnetTestSimpleServer implements Runnable {
-        listener = new Thread(this);
+        listener = new Thread (this);
@@ -48 +50,2 @@ public class TelnetTestSimpleServer implements Runnable {
-    public void disconnect() {
+    public void disconnect()
+    {
@@ -52,2 +55,4 @@ public class TelnetTestSimpleServer implements Runnable {
-        synchronized (clientSocket) {
-            try {
+        synchronized (clientSocket)
+        {
+            try
+            {
@@ -55,2 +60,4 @@ public class TelnetTestSimpleServer implements Runnable {
-            } catch (final Exception e) {
-                System.err.println("Exception in notify, " + e.getMessage());
+            }
+            catch (final Exception e)
+            {
+                System.err.println("Exception in notify, "+ e.getMessage());
@@ -61,2 +68,5 @@ public class TelnetTestSimpleServer implements Runnable {
-    public InputStream getInputStream() throws IOException {
-        if (clientSocket != null) {
+
+    public InputStream getInputStream() throws IOException
+    {
+        if(clientSocket != null)
+        {
@@ -68,2 +78,4 @@ public class TelnetTestSimpleServer implements Runnable {
-    public OutputStream getOutputStream() throws IOException {
-        if (clientSocket != null) {
+    public OutputStream getOutputStream() throws IOException
+    {
+        if(clientSocket != null)
+        {
@@ -76 +88,2 @@ public class TelnetTestSimpleServer implements Runnable {
-    public void run() {
+    public void run()
+    {
@@ -78,2 +91,4 @@ public class TelnetTestSimpleServer implements Runnable {
-        while (!bError) {
-            try {
+        while(!bError)
+        {
+            try
+            {
@@ -81,2 +96,4 @@ public class TelnetTestSimpleServer implements Runnable {
-                synchronized (clientSocket) {
-                    try {
+                synchronized (clientSocket)
+                {
+                    try
+                    {
@@ -84,2 +100,0 @@ public class TelnetTestSimpleServer implements Runnable {
-                    } catch (final Exception e) {
-                        System.err.println("Exception in wait, " + e.getMessage());
@@ -87 +102,6 @@ public class TelnetTestSimpleServer implements Runnable {
-                    try {
+                    catch (final Exception e)
+                    {
+                        System.err.println("Exception in wait, "+ e.getMessage());
+                    }
+                    try
+                    {
@@ -89,2 +109,4 @@ public class TelnetTestSimpleServer implements Runnable {
-                    } catch (final Exception e) {
-                        System.err.println("Exception in close, " + e.getMessage());
+                    }
+                    catch (final Exception e)
+                    {
+                        System.err.println("Exception in close, "+ e.getMessage());
@@ -93 +115,3 @@ public class TelnetTestSimpleServer implements Runnable {
-            } catch (final IOException e) {
+            }
+            catch (final IOException e)
+            {
@@ -98 +122,2 @@ public class TelnetTestSimpleServer implements Runnable {
-        try {
+        try
+        {
@@ -100,2 +125,4 @@ public class TelnetTestSimpleServer implements Runnable {
-        } catch (final Exception e) {
-            System.err.println("Exception in close, " + e.getMessage());
+        }
+        catch (final Exception e)
+        {
+            System.err.println("Exception in close, "+ e.getMessage());
@@ -105 +132,2 @@ public class TelnetTestSimpleServer implements Runnable {
-    public void stop() {
+    public void stop()
+    {
@@ -107 +135,2 @@ public class TelnetTestSimpleServer implements Runnable {
-        try {
+        try
+        {
@@ -109,2 +138,4 @@ public class TelnetTestSimpleServer implements Runnable {
-        } catch (final Exception e) {
-            System.err.println("Exception in close, " + e.getMessage());
+        }
+        catch (final Exception e)
+        {
+            System.err.println("Exception in close, "+ e.getMessage());
diff --git a/src/test/java/org/apache/commons/net/telnet/TerminalTypeOptionHandlerTest.java b/src/test/java/org/apache/commons/net/telnet/TerminalTypeOptionHandlerTest.java
index 7859e48da..efa5f6c3f 100644
--- a/src/test/java/org/apache/commons/net/telnet/TerminalTypeOptionHandlerTest.java
+++ b/src/test/java/org/apache/commons/net/telnet/TerminalTypeOptionHandlerTest.java
@@ -19 +19,2 @@ package org.apache.commons.net.telnet;
-public class TerminalTypeOptionHandlerTest extends TelnetOptionHandlerTestAbstract {
+public class TerminalTypeOptionHandlerTest extends TelnetOptionHandlerTestAbstract
+{
@@ -23,2 +24,4 @@ public class TerminalTypeOptionHandlerTest extends TelnetOptionHandlerTestAbstra
-    protected boolean equalInts(final int a1[], final int a2[]) {
-        if (a1.length != a2.length) {
+    protected boolean equalInts(final int a1[], final int a2[])
+    {
+        if(a1.length != a2.length)
+        {
@@ -28,2 +31,3 @@ public class TerminalTypeOptionHandlerTest extends TelnetOptionHandlerTestAbstra
-        for (int ii = 0; ii < a1.length; ii++) {
-            if (a1[ii] != a2[ii]) {
+        for(int ii=0; ii<a1.length; ii++)
+        {
+            if(a1[ii]!= a2[ii]) {
@@ -37 +41,2 @@ public class TerminalTypeOptionHandlerTest extends TelnetOptionHandlerTestAbstra
-    protected void setUp() {
+    protected void setUp()
+    {
@@ -44 +49,2 @@ public class TerminalTypeOptionHandlerTest extends TelnetOptionHandlerTestAbstra
-     * test of client-driven subnegotiation. Checks that the terminal type is sent
+     * test of client-driven subnegotiation.
+     * Checks that the terminal type is sent
@@ -47,2 +53,6 @@ public class TerminalTypeOptionHandlerTest extends TelnetOptionHandlerTestAbstra
-    public void testAnswerSubnegotiation() {
-        final int subn[] = { TelnetOption.TERMINAL_TYPE, 1 };
+    public void testAnswerSubnegotiation()
+    {
+        final int subn[] =
+        {
+            TelnetOption.TERMINAL_TYPE, 1
+        };
@@ -50 +60,4 @@ public class TerminalTypeOptionHandlerTest extends TelnetOptionHandlerTestAbstra
-        final int expected1[] = { TelnetOption.TERMINAL_TYPE, 0, 'V', 'T', '1', '0', '0' };
+        final int expected1[] =
+        {
+            TelnetOption.TERMINAL_TYPE, 0, 'V', 'T', '1', '0', '0'
+        };
@@ -52 +65,4 @@ public class TerminalTypeOptionHandlerTest extends TelnetOptionHandlerTestAbstra
-        final int expected2[] = { TelnetOption.TERMINAL_TYPE, 0, 'A', 'N', 'S', 'I' };
+        final int expected2[] =
+        {
+            TelnetOption.TERMINAL_TYPE, 0, 'A', 'N', 'S', 'I'
+        };
@@ -60,0 +77 @@ public class TerminalTypeOptionHandlerTest extends TelnetOptionHandlerTestAbstra
+
@@ -62 +79,2 @@ public class TerminalTypeOptionHandlerTest extends TelnetOptionHandlerTestAbstra
-    public void testConstructors() {
+    public void testConstructors()
+    {
@@ -66,0 +85 @@ public class TerminalTypeOptionHandlerTest extends TelnetOptionHandlerTestAbstra
+
@@ -68 +87,2 @@ public class TerminalTypeOptionHandlerTest extends TelnetOptionHandlerTestAbstra
-     * test of client-driven subnegotiation. Checks that no subnegotiation is made.
+     * test of client-driven subnegotiation.
+     * Checks that no subnegotiation is made.
@@ -71 +91,2 @@ public class TerminalTypeOptionHandlerTest extends TelnetOptionHandlerTestAbstra
-    public void testStartSubnegotiation() {
+    public void testStartSubnegotiation()
+    {
diff --git a/src/test/java/org/apache/commons/net/telnet/WindowSizeOptionHandlerTest.java b/src/test/java/org/apache/commons/net/telnet/WindowSizeOptionHandlerTest.java
index 8fe0c7167..0d7d10933 100644
--- a/src/test/java/org/apache/commons/net/telnet/WindowSizeOptionHandlerTest.java
+++ b/src/test/java/org/apache/commons/net/telnet/WindowSizeOptionHandlerTest.java
@@ -22 +22,2 @@ package org.apache.commons.net.telnet;
-public class WindowSizeOptionHandlerTest extends TelnetOptionHandlerTestAbstract {
+public class WindowSizeOptionHandlerTest extends TelnetOptionHandlerTestAbstract
+{
@@ -26 +27,2 @@ public class WindowSizeOptionHandlerTest extends TelnetOptionHandlerTestAbstract
-    private void equalInts(final int a1[], final int a2[]) {
+    private void equalInts(final int a1[], final int a2[])
+    {
@@ -28,2 +30,3 @@ public class WindowSizeOptionHandlerTest extends TelnetOptionHandlerTestAbstract
-        for (int ii = 0; ii < a1.length; ii++) {
-            assertEquals("Array entry " + ii + " should match", a1[ii], a2[ii]);
+        for(int ii=0; ii<a1.length; ii++)
+        {
+            assertEquals("Array entry "+ii+" should match",a1[ii], a2[ii]);
@@ -37 +40,2 @@ public class WindowSizeOptionHandlerTest extends TelnetOptionHandlerTestAbstract
-    protected void setUp() {
+    protected void setUp()
+    {
@@ -44 +48,2 @@ public class WindowSizeOptionHandlerTest extends TelnetOptionHandlerTestAbstract
-     * test of client-driven subnegotiation. Checks that nothing is sent
+     * test of client-driven subnegotiation.
+     * Checks that nothing is sent
@@ -47,2 +52,6 @@ public class WindowSizeOptionHandlerTest extends TelnetOptionHandlerTestAbstract
-    public void testAnswerSubnegotiation() {
-        final int subn[] = { TelnetOption.WINDOW_SIZE, 24, 80 };
+    public void testAnswerSubnegotiation()
+    {
+        final int subn[] =
+        {
+            TelnetOption.WINDOW_SIZE, 24, 80
+        };
@@ -63 +72,2 @@ public class WindowSizeOptionHandlerTest extends TelnetOptionHandlerTestAbstract
-    public void testConstructors() {
+    public void testConstructors()
+    {
@@ -67,0 +78,2 @@ public class WindowSizeOptionHandlerTest extends TelnetOptionHandlerTestAbstract
+
+
@@ -69 +81,2 @@ public class WindowSizeOptionHandlerTest extends TelnetOptionHandlerTestAbstract
-     * test of client-driven subnegotiation. Checks that no subnegotiation is made.
+     * test of client-driven subnegotiation.
+     * Checks that no subnegotiation is made.
@@ -72 +85,2 @@ public class WindowSizeOptionHandlerTest extends TelnetOptionHandlerTestAbstract
-    public void testStartSubnegotiation() {
+    public void testStartSubnegotiation()
+    {
@@ -82,2 +96,3 @@ public class WindowSizeOptionHandlerTest extends TelnetOptionHandlerTestAbstract
-    public void testStartSubnegotiationLocal() {
-        final int[] exp1 = { 31, 0, 80, 0, 24 };
+    public void testStartSubnegotiationLocal()
+    {
+        final int[] exp1 = {31, 0, 80, 0, 24};
@@ -88 +103 @@ public class WindowSizeOptionHandlerTest extends TelnetOptionHandlerTestAbstract
-        final int[] exp2 = { 31, 0, 255, 255, 0, 255, 255 };
+        final int[] exp2 = {31, 0, 255, 255, 0, 255, 255};
@@ -92 +107 @@ public class WindowSizeOptionHandlerTest extends TelnetOptionHandlerTestAbstract
-        final int[] exp3 = { 31, 255, 255, 255, 255, 0, 255, 255 };
+        final int[] exp3 = {31, 255, 255, 255, 255, 0, 255, 255};
diff --git a/src/test/java/org/apache/commons/net/tftp/TFTPServer.java b/src/test/java/org/apache/commons/net/tftp/TFTPServer.java
index ea8a86d5e..5e322954c 100644
--- a/src/test/java/org/apache/commons/net/tftp/TFTPServer.java
+++ b/src/test/java/org/apache/commons/net/tftp/TFTPServer.java
@@ -40 +40,2 @@ import org.apache.commons.net.io.ToNetASCIIInputStream;
- * A fully multi-threaded tftp server. Can handle multiple clients at the same time. Implements RFC 1350 and wrapping block numbers for large file support.
+ * A fully multi-threaded tftp server. Can handle multiple clients at the same time. Implements RFC
+ * 1350 and wrapping block numbers for large file support.
@@ -42,2 +43,2 @@ import org.apache.commons.net.io.ToNetASCIIInputStream;
- * To launch, just create an instance of the class. An IOException will be thrown if the server fails to start for reasons such as port in use, port denied,
- * etc.
+ * To launch, just create an instance of the class. An IOException will be thrown if the server
+ * fails to start for reasons such as port in use, port denied, etc.
@@ -47 +48,2 @@ import org.apache.commons.net.io.ToNetASCIIInputStream;
- * To check to see if the server is still running (or if it stopped because of an error), call the isRunning() method.
+ * To check to see if the server is still running (or if it stopped because of an error), call the
+ * isRunning() method.
@@ -49 +51,2 @@ import org.apache.commons.net.io.ToNetASCIIInputStream;
- * By default, events are not logged to stdout/stderr. This can be changed with the setLog and setLogError methods.
+ * By default, events are not logged to stdout/stderr. This can be changed with the
+ * setLog and setLogError methods.
@@ -80,5 +83,3 @@ import org.apache.commons.net.io.ToNetASCIIInputStream;
-public class TFTPServer implements Runnable {
-    public enum ServerMode {
-        GET_ONLY, PUT_ONLY, GET_AND_PUT
-    }
-
+public class TFTPServer implements Runnable
+{
+    public enum ServerMode { GET_ONLY, PUT_ONLY, GET_AND_PUT}
@@ -88 +89,2 @@ public class TFTPServer implements Runnable {
-    private class TFTPTransfer implements Runnable {
+    private class TFTPTransfer implements Runnable
+    {
@@ -95 +97,2 @@ public class TFTPServer implements Runnable {
-        public TFTPTransfer(final TFTPPacket tftpPacket) {
+        public TFTPTransfer(final TFTPPacket tftpPacket)
+        {
@@ -100 +103,2 @@ public class TFTPServer implements Runnable {
-         * Utility method to make sure that paths provided by tftp clients do not get outside of the serverRoot directory.
+         * Utility method to make sure that paths provided by tftp clients do not get outside of the
+         * serverRoot directory.
@@ -102 +106,3 @@ public class TFTPServer implements Runnable {
-        private File buildSafeFile(final File serverDirectory, final String fileName, final boolean createSubDirs) throws IOException {
+        private File buildSafeFile(final File serverDirectory, final String fileName, final boolean createSubDirs)
+                throws IOException
+        {
@@ -106 +112,2 @@ public class TFTPServer implements Runnable {
-            if (!isSubdirectoryOf(serverDirectory, temp)) {
+            if (!isSubdirectoryOf(serverDirectory, temp))
+            {
@@ -111 +118,2 @@ public class TFTPServer implements Runnable {
-            if (createSubDirs) {
+            if (createSubDirs)
+            {
@@ -121 +129,2 @@ public class TFTPServer implements Runnable {
-        private void createDirectory(final File file) throws IOException {
+        private void createDirectory(final File file) throws IOException
+        {
@@ -123 +132,2 @@ public class TFTPServer implements Runnable {
-            if (parent == null) {
+            if (parent == null)
+            {
@@ -126 +136,2 @@ public class TFTPServer implements Runnable {
-            if (!parent.exists()) {
+            if (!parent.exists())
+            {
@@ -132 +143,2 @@ public class TFTPServer implements Runnable {
-                throw new IOException("Invalid directory path - file in the way of requested folder");
+                throw new IOException(
+                        "Invalid directory path - file in the way of requested folder");
@@ -134 +146,2 @@ public class TFTPServer implements Runnable {
-            if (file.isDirectory()) {
+            if (file.isDirectory())
+            {
@@ -138 +151,2 @@ public class TFTPServer implements Runnable {
-            if (!result) {
+            if (!result)
+            {
@@ -146 +160,2 @@ public class TFTPServer implements Runnable {
-        private void handleRead(final TFTPReadRequestPacket trrp) throws IOException, TFTPPacketException {
+        private void handleRead(final TFTPReadRequestPacket trrp) throws IOException, TFTPPacketException
+        {
@@ -148,4 +163,7 @@ public class TFTPServer implements Runnable {
-            try {
-                if (mode_ == ServerMode.PUT_ONLY) {
-                    transferTftp_.bufferedSend(
-                            new TFTPErrorPacket(trrp.getAddress(), trrp.getPort(), TFTPErrorPacket.ILLEGAL_OPERATION, "Read not allowed by server."));
+            try
+            {
+                if (mode_ == ServerMode.PUT_ONLY)
+                {
+                    transferTftp_.bufferedSend(new TFTPErrorPacket(trrp.getAddress(), trrp
+                            .getPort(), TFTPErrorPacket.ILLEGAL_OPERATION,
+                            "Read not allowed by server."));
@@ -155,4 +173,9 @@ public class TFTPServer implements Runnable {
-                try {
-                    is = new BufferedInputStream(new FileInputStream(buildSafeFile(serverReadDirectory_, trrp.getFilename(), false)));
-                } catch (final FileNotFoundException e) {
-                    transferTftp_.bufferedSend(new TFTPErrorPacket(trrp.getAddress(), trrp.getPort(), TFTPErrorPacket.FILE_NOT_FOUND, e.getMessage()));
+                try
+                {
+                    is = new BufferedInputStream(new FileInputStream(buildSafeFile(
+                            serverReadDirectory_, trrp.getFilename(), false)));
+                }
+                catch (final FileNotFoundException e)
+                {
+                    transferTftp_.bufferedSend(new TFTPErrorPacket(trrp.getAddress(), trrp
+                            .getPort(), TFTPErrorPacket.FILE_NOT_FOUND, e.getMessage()));
@@ -160,2 +183,5 @@ public class TFTPServer implements Runnable {
-                } catch (final Exception e) {
-                    transferTftp_.bufferedSend(new TFTPErrorPacket(trrp.getAddress(), trrp.getPort(), TFTPErrorPacket.UNDEFINED, e.getMessage()));
+                }
+                catch (final Exception e)
+                {
+                    transferTftp_.bufferedSend(new TFTPErrorPacket(trrp.getAddress(), trrp
+                            .getPort(), TFTPErrorPacket.UNDEFINED, e.getMessage()));
@@ -165 +191,2 @@ public class TFTPServer implements Runnable {
-                if (trrp.getMode() == TFTP.NETASCII_MODE) {
+                if (trrp.getMode() == TFTP.NETASCII_MODE)
+                {
@@ -182,2 +209,4 @@ public class TFTPServer implements Runnable {
-                while (readLength == TFTPDataPacket.MAX_DATA_LENGTH && !shutdownTransfer) {
-                    if (sendNext) {
+                while (readLength == TFTPDataPacket.MAX_DATA_LENGTH && !shutdownTransfer)
+                {
+                    if (sendNext)
+                    {
@@ -185 +214,2 @@ public class TFTPServer implements Runnable {
-                        if (readLength == -1) {
+                        if (readLength == -1)
+                        {
@@ -189 +219,2 @@ public class TFTPServer implements Runnable {
-                        lastSentData = new TFTPDataPacket(trrp.getAddress(), trrp.getPort(), block, temp, 0, readLength);
+                        lastSentData = new TFTPDataPacket(trrp.getAddress(), trrp.getPort(), block,
+                                temp, 0, readLength);
@@ -197 +228,4 @@ public class TFTPServer implements Runnable {
-                    while (!shutdownTransfer && (answer == null || !answer.getAddress().equals(trrp.getAddress()) || answer.getPort() != trrp.getPort())) {
+                    while (!shutdownTransfer
+                            && (answer == null || !answer.getAddress().equals(trrp.getAddress()) || answer
+                                    .getPort() != trrp.getPort()))
+                    {
@@ -199 +233,2 @@ public class TFTPServer implements Runnable {
-                        if (answer != null) {
+                        if (answer != null)
+                        {
@@ -204,2 +239,3 @@ public class TFTPServer implements Runnable {
-                            transferTftp_.bufferedSend(
-                                    new TFTPErrorPacket(answer.getAddress(), answer.getPort(), TFTPErrorPacket.UNKNOWN_TID, "Unexpected Host or Port"));
+                            transferTftp_.bufferedSend(new TFTPErrorPacket(answer.getAddress(),
+                                    answer.getPort(), TFTPErrorPacket.UNKNOWN_TID,
+                                    "Unexpected Host or Port"));
@@ -207 +243,2 @@ public class TFTPServer implements Runnable {
-                        try {
+                        try
+                        {
@@ -209,2 +246,5 @@ public class TFTPServer implements Runnable {
-                        } catch (final SocketTimeoutException e) {
-                            if (timeoutCount >= maxTimeoutRetries_) {
+                        }
+                        catch (final SocketTimeoutException e)
+                        {
+                            if (timeoutCount >= maxTimeoutRetries_)
+                            {
@@ -221,3 +261,7 @@ public class TFTPServer implements Runnable {
-                    if (answer == null || !(answer instanceof TFTPAckPacket)) {
-                        if (!shutdownTransfer) {
-                            logError_.println("Unexpected response from tftp client during transfer (" + answer + ").  Transfer aborted.");
+                    if (answer == null || !(answer instanceof TFTPAckPacket))
+                    {
+                        if (!shutdownTransfer)
+                        {
+                            logError_
+                                    .println("Unexpected response from tftp client during transfer ("
+                                            + answer + ").  Transfer aborted.");
@@ -230 +274,2 @@ public class TFTPServer implements Runnable {
-                    if (ack.getBlockNumber() != block) {
+                    if (ack.getBlockNumber() != block)
+                    {
@@ -232,3 +277,6 @@ public class TFTPServer implements Runnable {
-                         * The origional tftp spec would have called on us to resend the previous data here, however, that causes the SAS Syndrome.
-                         * http://www.faqs.org/rfcs/rfc1123.html section 4.2.3.1 The modified spec says that we ignore a duplicate ack. If the packet was really
-                         * lost, we will time out on receive, and resend the previous data at that point.
+                         * The origional tftp spec would have called on us to resend the
+                         * previous data here, however, that causes the SAS Syndrome.
+                         * http://www.faqs.org/rfcs/rfc1123.html section 4.2.3.1 The modified
+                         * spec says that we ignore a duplicate ack. If the packet was really
+                         * lost, we will time out on receive, and resend the previous data at
+                         * that point.
@@ -237 +285,3 @@ public class TFTPServer implements Runnable {
-                    } else {
+                    }
+                    else
+                    {
@@ -240 +290,2 @@ public class TFTPServer implements Runnable {
-                        if (block > 65535) {
+                        if (block > 65535)
+                        {
@@ -247,3 +298,7 @@ public class TFTPServer implements Runnable {
-            } finally {
-                try {
-                    if (is != null) {
+            }
+            finally
+            {
+                try
+                {
+                    if (is != null)
+                    {
@@ -252 +307,3 @@ public class TFTPServer implements Runnable {
-                } catch (final IOException e) {
+                }
+                catch (final IOException e)
+                {
@@ -261 +318,3 @@ public class TFTPServer implements Runnable {
-        private void handleWrite(final TFTPWriteRequestPacket twrp) throws IOException, TFTPPacketException {
+        private void handleWrite(final TFTPWriteRequestPacket twrp) throws IOException,
+                TFTPPacketException
+        {
@@ -263,4 +322,7 @@ public class TFTPServer implements Runnable {
-            try {
-                if (mode_ == ServerMode.GET_ONLY) {
-                    transferTftp_.bufferedSend(
-                            new TFTPErrorPacket(twrp.getAddress(), twrp.getPort(), TFTPErrorPacket.ILLEGAL_OPERATION, "Write not allowed by server."));
+            try
+            {
+                if (mode_ == ServerMode.GET_ONLY)
+                {
+                    transferTftp_.bufferedSend(new TFTPErrorPacket(twrp.getAddress(), twrp
+                            .getPort(), TFTPErrorPacket.ILLEGAL_OPERATION,
+                            "Write not allowed by server."));
@@ -273 +335,2 @@ public class TFTPServer implements Runnable {
-                try {
+                try
+                {
@@ -275,2 +338,4 @@ public class TFTPServer implements Runnable {
-                    if (temp.exists()) {
-                        transferTftp_.bufferedSend(new TFTPErrorPacket(twrp.getAddress(), twrp.getPort(), TFTPErrorPacket.FILE_EXISTS, "File already exists"));
+                    if (temp.exists())
+                    {
+                        transferTftp_.bufferedSend(new TFTPErrorPacket(twrp.getAddress(), twrp
+                                .getPort(), TFTPErrorPacket.FILE_EXISTS, "File already exists"));
@@ -281 +346,2 @@ public class TFTPServer implements Runnable {
-                    if (twrp.getMode() == TFTP.NETASCII_MODE) {
+                    if (twrp.getMode() == TFTP.NETASCII_MODE)
+                    {
@@ -284,2 +350,5 @@ public class TFTPServer implements Runnable {
-                } catch (final Exception e) {
-                    transferTftp_.bufferedSend(new TFTPErrorPacket(twrp.getAddress(), twrp.getPort(), TFTPErrorPacket.UNDEFINED, e.getMessage()));
+                }
+                catch (final Exception e)
+                {
+                    transferTftp_.bufferedSend(new TFTPErrorPacket(twrp.getAddress(), twrp
+                            .getPort(), TFTPErrorPacket.UNDEFINED, e.getMessage()));
@@ -292 +361,2 @@ public class TFTPServer implements Runnable {
-                while (true) {
+                while (true)
+                {
@@ -299 +369,4 @@ public class TFTPServer implements Runnable {
-                            && (dataPacket == null || !dataPacket.getAddress().equals(twrp.getAddress()) || dataPacket.getPort() != twrp.getPort())) {
+                            && (dataPacket == null
+                                    || !dataPacket.getAddress().equals(twrp.getAddress()) || dataPacket
+                                    .getPort() != twrp.getPort()))
+                    {
@@ -301 +374,2 @@ public class TFTPServer implements Runnable {
-                        if (dataPacket != null) {
+                        if (dataPacket != null)
+                        {
@@ -306,2 +380,3 @@ public class TFTPServer implements Runnable {
-                            transferTftp_.bufferedSend(
-                                    new TFTPErrorPacket(dataPacket.getAddress(), dataPacket.getPort(), TFTPErrorPacket.UNKNOWN_TID, "Unexpected Host or Port"));
+                            transferTftp_.bufferedSend(new TFTPErrorPacket(dataPacket.getAddress(),
+                                    dataPacket.getPort(), TFTPErrorPacket.UNKNOWN_TID,
+                                    "Unexpected Host or Port"));
@@ -310 +385,2 @@ public class TFTPServer implements Runnable {
-                        try {
+                        try
+                        {
@@ -312,2 +388,5 @@ public class TFTPServer implements Runnable {
-                        } catch (final SocketTimeoutException e) {
-                            if (timeoutCount >= maxTimeoutRetries_) {
+                        }
+                        catch (final SocketTimeoutException e)
+                        {
+                            if (timeoutCount >= maxTimeoutRetries_)
+                            {
@@ -323 +402,2 @@ public class TFTPServer implements Runnable {
-                    if (dataPacket instanceof TFTPWriteRequestPacket) {
+                    if (dataPacket instanceof TFTPWriteRequestPacket)
+                    {
@@ -327,3 +407,8 @@ public class TFTPServer implements Runnable {
-                    } else if (dataPacket == null || !(dataPacket instanceof TFTPDataPacket)) {
-                        if (!shutdownTransfer) {
-                            logError_.println("Unexpected response from tftp client during transfer (" + dataPacket + ").  Transfer aborted.");
+                    }
+                    else if (dataPacket == null || !(dataPacket instanceof TFTPDataPacket))
+                    {
+                        if (!shutdownTransfer)
+                        {
+                            logError_
+                                    .println("Unexpected response from tftp client during transfer ("
+                                            + dataPacket + ").  Transfer aborted.");
@@ -332 +417,3 @@ public class TFTPServer implements Runnable {
-                    } else {
+                    }
+                    else
+                    {
@@ -338 +425,2 @@ public class TFTPServer implements Runnable {
-                        if (block > lastBlock || lastBlock == 65535 && block == 0) {
+                        if (block > lastBlock || lastBlock == 65535 && block == 0)
+                        {
@@ -347 +435,2 @@ public class TFTPServer implements Runnable {
-                        if (dataLength < TFTPDataPacket.MAX_DATA_LENGTH) {
+                        if (dataLength < TFTPDataPacket.MAX_DATA_LENGTH)
+                        {
@@ -353,2 +442,4 @@ public class TFTPServer implements Runnable {
-                            for (int i = 0; i < maxTimeoutRetries_; i++) {
-                                try {
+                            for (int i = 0; i < maxTimeoutRetries_; i++)
+                            {
+                                try
+                                {
@@ -356 +447,3 @@ public class TFTPServer implements Runnable {
-                                } catch (final SocketTimeoutException e) {
+                                }
+                                catch (final SocketTimeoutException e)
+                                {
@@ -362 +455,4 @@ public class TFTPServer implements Runnable {
-                                if (dataPacket != null && (!dataPacket.getAddress().equals(twrp.getAddress()) || dataPacket.getPort() != twrp.getPort())) {
+                                if (dataPacket != null
+                                        && (!dataPacket.getAddress().equals(twrp.getAddress()) || dataPacket
+                                                .getPort() != twrp.getPort()))
+                                {
@@ -364,3 +460,8 @@ public class TFTPServer implements Runnable {
-                                    transferTftp_.bufferedSend(new TFTPErrorPacket(dataPacket.getAddress(), dataPacket.getPort(), TFTPErrorPacket.UNKNOWN_TID,
-                                            "Unexpected Host or Port"));
-                                } else {
+                                    transferTftp_
+                                            .bufferedSend(new TFTPErrorPacket(dataPacket
+                                                    .getAddress(), dataPacket.getPort(),
+                                                    TFTPErrorPacket.UNKNOWN_TID,
+                                                    "Unexpected Host or Port"));
+                                }
+                                else
+                                {
@@ -379,2 +480,5 @@ public class TFTPServer implements Runnable {
-            } finally {
-                if (bos != null) {
+            }
+            finally
+            {
+                if (bos != null)
+                {
@@ -389 +493,2 @@ public class TFTPServer implements Runnable {
-        private boolean isSubdirectoryOf(final File parent, final File child) {
+        private boolean isSubdirectoryOf(final File parent, final File child)
+        {
@@ -391 +496,2 @@ public class TFTPServer implements Runnable {
-            if (childsParent == null) {
+            if (childsParent == null)
+            {
@@ -394 +500,2 @@ public class TFTPServer implements Runnable {
-            if (childsParent.equals(parent)) {
+            if (childsParent.equals(parent))
+            {
@@ -401,2 +508,4 @@ public class TFTPServer implements Runnable {
-        public void run() {
-            try {
+        public void run()
+        {
+            try
+            {
@@ -410 +519,2 @@ public class TFTPServer implements Runnable {
-                if (tftpPacket_ instanceof TFTPReadRequestPacket) {
+                if (tftpPacket_ instanceof TFTPReadRequestPacket)
+                {
@@ -412 +522,3 @@ public class TFTPServer implements Runnable {
-                } else if (tftpPacket_ instanceof TFTPWriteRequestPacket) {
+                }
+                else if (tftpPacket_ instanceof TFTPWriteRequestPacket)
+                {
@@ -414 +526,3 @@ public class TFTPServer implements Runnable {
-                } else {
+                }
+                else
+                {
@@ -417,3 +531,8 @@ public class TFTPServer implements Runnable {
-            } catch (final Exception e) {
-                if (!shutdownTransfer) {
-                    logError_.println("Unexpected Error in during TFTP file transfer.  Transfer aborted. " + e);
+            }
+            catch (final Exception e)
+            {
+                if (!shutdownTransfer)
+                {
+                    logError_
+                            .println("Unexpected Error in during TFTP file transfer.  Transfer aborted. "
+                                    + e);
@@ -421,3 +540,7 @@ public class TFTPServer implements Runnable {
-            } finally {
-                try {
-                    if (transferTftp_ != null && transferTftp_.isOpen()) {
+            }
+            finally
+            {
+                try
+                {
+                    if (transferTftp_ != null && transferTftp_.isOpen())
+                    {
@@ -427 +550,3 @@ public class TFTPServer implements Runnable {
-                } catch (final Exception e) {
+                }
+                catch (final Exception e)
+                {
@@ -430 +555,2 @@ public class TFTPServer implements Runnable {
-                synchronized (transfers_) {
+                synchronized(transfers_)
+                {
@@ -436 +562,2 @@ public class TFTPServer implements Runnable {
-        public void shutdown() {
+        public void shutdown()
+        {
@@ -438 +565,2 @@ public class TFTPServer implements Runnable {
-            try {
+            try
+            {
@@ -440 +568,3 @@ public class TFTPServer implements Runnable {
-            } catch (final RuntimeException e) {
+            }
+            catch (final RuntimeException e)
+            {
@@ -448,9 +578,8 @@ public class TFTPServer implements Runnable {
-    private static final PrintStream nullStream = new PrintStream(new OutputStream() {
-        @Override
-        public void write(final byte[] b) throws IOException {
-        }
-
-        @Override
-        public void write(final int b) {
-        }
-    });
+    private static final PrintStream nullStream = new PrintStream(
+            new OutputStream() {
+                @Override
+                public void write(final byte[] b) throws IOException {}
+                @Override
+                public void write(final int b){}
+                }
+            );
@@ -475,0 +605 @@ public class TFTPServer implements Runnable {
+
@@ -483 +613,2 @@ public class TFTPServer implements Runnable {
-     * If a get or a put comes in with a relative path that tries to get outside of the serverDirectory, then the get or put will be denied.
+     * If a get or a put comes in with a relative path that tries to get outside of the
+     * serverDirectory, then the get or put will be denied.
@@ -485 +616,2 @@ public class TFTPServer implements Runnable {
-     * GET_ONLY mode only allows gets, PUT_ONLY mode only allows puts, and GET_AND_PUT allows both. Modes are defined as int constants in this class.
+     * GET_ONLY mode only allows gets, PUT_ONLY mode only allows puts, and GET_AND_PUT allows both.
+     * Modes are defined as int constants in this class.
@@ -487 +619 @@ public class TFTPServer implements Runnable {
-     * @param serverReadDirectory  directory for GET requests
+     * @param serverReadDirectory directory for GET requests
@@ -489,5 +621,5 @@ public class TFTPServer implements Runnable {
-     * @param port                 The local port to bind to.
-     * @param localaddr            The local address to bind to.
-     * @param mode                 A value as specified above.
-     * @param log                  Stream to write log message to. If not provided, uses System.out
-     * @param errorLog             Stream to write error messages to. If not provided, uses System.err.
+     * @param port The local port to bind to.
+     * @param localaddr The local address to bind to.
+     * @param mode A value as specified above.
+     * @param log Stream to write log message to. If not provided, uses System.out
+     * @param errorLog Stream to write error messages to. If not provided, uses System.err.
@@ -496,2 +628,4 @@ public class TFTPServer implements Runnable {
-    public TFTPServer(final File serverReadDirectory, final File serverWriteDirectory, final int port, final InetAddress localaddr, final ServerMode mode,
-            final PrintStream log, final PrintStream errorLog) throws IOException {
+    public TFTPServer(final File serverReadDirectory, final File serverWriteDirectory, final int port,
+        final InetAddress localaddr, final ServerMode mode, final PrintStream log, final PrintStream errorLog)
+        throws IOException
+    {
@@ -501 +635 @@ public class TFTPServer implements Runnable {
-        log_ = log == null ? nullStream : log;
+        log_ = log == null ? nullStream: log;
@@ -511 +645,2 @@ public class TFTPServer implements Runnable {
-     * If a get or a put comes in with a relative path that tries to get outside of the serverDirectory, then the get or put will be denied.
+     * If a get or a put comes in with a relative path that tries to get outside of the
+     * serverDirectory, then the get or put will be denied.
@@ -513 +648,2 @@ public class TFTPServer implements Runnable {
-     * GET_ONLY mode only allows gets, PUT_ONLY mode only allows puts, and GET_AND_PUT allows both. Modes are defined as int constants in this class.
+     * GET_ONLY mode only allows gets, PUT_ONLY mode only allows puts, and GET_AND_PUT allows both.
+     * Modes are defined as int constants in this class.
@@ -515 +651 @@ public class TFTPServer implements Runnable {
-     * @param serverReadDirectory  directory for GET requests
+     * @param serverReadDirectory directory for GET requests
@@ -517,5 +653,6 @@ public class TFTPServer implements Runnable {
-     * @param port                 the port to use
-     * @param localiface           The local network interface to bind to. The interface's first address wil be used.
-     * @param mode                 A value as specified above.
-     * @param log                  Stream to write log message to. If not provided, uses System.out
-     * @param errorLog             Stream to write error messages to. If not provided, uses System.err.
+     * @param port the port to use
+     * @param localiface The local network interface to bind to.
+     *  The interface's first address wil be used.
+     * @param mode A value as specified above.
+     * @param log Stream to write log message to. If not provided, uses System.out
+     * @param errorLog Stream to write error messages to. If not provided, uses System.err.
@@ -524,2 +661,4 @@ public class TFTPServer implements Runnable {
-    public TFTPServer(final File serverReadDirectory, final File serverWriteDirectory, final int port, final NetworkInterface localiface, final ServerMode mode,
-            final PrintStream log, final PrintStream errorLog) throws IOException {
+    public TFTPServer(final File serverReadDirectory, final File serverWriteDirectory, final int port,
+        final NetworkInterface localiface, final ServerMode mode, final PrintStream log, final PrintStream errorLog)
+        throws IOException
+    {
@@ -527 +666 @@ public class TFTPServer implements Runnable {
-        port_ = port;
+        port_= port;
@@ -529 +668,2 @@ public class TFTPServer implements Runnable {
-        if (localiface != null) {
+        if (localiface != null)
+        {
@@ -535 +675 @@ public class TFTPServer implements Runnable {
-        log_ = log == null ? nullStream : log;
+        log_ = log == null ? nullStream: log;
@@ -546 +686,2 @@ public class TFTPServer implements Runnable {
-     * If a get or a put comes in with a relative path that tries to get outside of the serverDirectory, then the get or put will be denied.
+     * If a get or a put comes in with a relative path that tries to get outside of the
+     * serverDirectory, then the get or put will be denied.
@@ -548 +689,2 @@ public class TFTPServer implements Runnable {
-     * GET_ONLY mode only allows gets, PUT_ONLY mode only allows puts, and GET_AND_PUT allows both. Modes are defined as int constants in this class.
+     * GET_ONLY mode only allows gets, PUT_ONLY mode only allows puts, and GET_AND_PUT allows both.
+     * Modes are defined as int constants in this class.
@@ -550 +692 @@ public class TFTPServer implements Runnable {
-     * @param serverReadDirectory  directory for GET requests
+     * @param serverReadDirectory directory for GET requests
@@ -552,4 +694,4 @@ public class TFTPServer implements Runnable {
-     * @param port                 the port to use
-     * @param mode                 A value as specified above.
-     * @param log                  Stream to write log message to. If not provided, uses System.out
-     * @param errorLog             Stream to write error messages to. If not provided, uses System.err.
+     * @param port the port to use
+     * @param mode A value as specified above.
+     * @param log Stream to write log message to. If not provided, uses System.out
+     * @param errorLog Stream to write error messages to. If not provided, uses System.err.
@@ -558,2 +700,3 @@ public class TFTPServer implements Runnable {
-    public TFTPServer(final File serverReadDirectory, final File serverWriteDirectory, final int port, final ServerMode mode, final PrintStream log,
-            final PrintStream errorLog) throws IOException {
+    public TFTPServer(final File serverReadDirectory, final File serverWriteDirectory, final int port, final ServerMode mode,
+            final PrintStream log, final PrintStream errorLog) throws IOException
+    {
@@ -562 +705 @@ public class TFTPServer implements Runnable {
-        log_ = log == null ? nullStream : log;
+        log_ = log == null ? nullStream: log;
@@ -569 +712,2 @@ public class TFTPServer implements Runnable {
-     * Start a TFTP Server on the default port (69). Gets and Puts occur in the specified directories.
+     * Start a TFTP Server on the default port (69). Gets and Puts occur in the specified
+     * directories.
@@ -573 +717,2 @@ public class TFTPServer implements Runnable {
-     * If a get or a put comes in with a relative path that tries to get outside of the serverDirectory, then the get or put will be denied.
+     * If a get or a put comes in with a relative path that tries to get outside of the
+     * serverDirectory, then the get or put will be denied.
@@ -575 +720,2 @@ public class TFTPServer implements Runnable {
-     * GET_ONLY mode only allows gets, PUT_ONLY mode only allows puts, and GET_AND_PUT allows both. Modes are defined as int constants in this class.
+     * GET_ONLY mode only allows gets, PUT_ONLY mode only allows puts, and GET_AND_PUT allows both.
+     * Modes are defined as int constants in this class.
@@ -577 +723 @@ public class TFTPServer implements Runnable {
-     * @param serverReadDirectory  directory for GET requests
+     * @param serverReadDirectory directory for GET requests
@@ -579 +725 @@ public class TFTPServer implements Runnable {
-     * @param mode                 A value as specified above.
+     * @param mode A value as specified above.
@@ -582 +728,3 @@ public class TFTPServer implements Runnable {
-    public TFTPServer(final File serverReadDirectory, final File serverWriteDirectory, final ServerMode mode) throws IOException {
+    public TFTPServer(final File serverReadDirectory, final File serverWriteDirectory, final ServerMode mode)
+            throws IOException
+    {
@@ -587 +735,2 @@ public class TFTPServer implements Runnable {
-    protected void finalize() throws Throwable {
+    protected void finalize() throws Throwable
+    {
@@ -593 +741,0 @@ public class TFTPServer implements Runnable {
-     *
@@ -596 +744,2 @@ public class TFTPServer implements Runnable {
-    public int getMaxTimeoutRetries() {
+    public int getMaxTimeoutRetries()
+    {
@@ -602 +750,0 @@ public class TFTPServer implements Runnable {
-     *
@@ -605 +753,2 @@ public class TFTPServer implements Runnable {
-    public int getSocketTimeout() {
+    public int getSocketTimeout()
+    {
@@ -613 +762,2 @@ public class TFTPServer implements Runnable {
-     * @throws Exception throws the exception that stopped the server if the server is stopped from an exception.
+     * @throws Exception throws the exception that stopped the server if the server is stopped from
+     *             an exception.
@@ -615,2 +765,4 @@ public class TFTPServer implements Runnable {
-    public boolean isRunning() throws Exception {
-        if (shutdownServer && serverException != null) {
+    public boolean isRunning() throws Exception
+    {
+        if (shutdownServer && serverException != null)
+        {
@@ -625,2 +777,4 @@ public class TFTPServer implements Runnable {
-    private void launch(final File serverReadDirectory, final File serverWriteDirectory) throws IOException {
-        log_.println("Starting TFTP Server on port " + port_ + ".  Read directory: " + serverReadDirectory + " Write directory: " + serverWriteDirectory
+    private void launch(final File serverReadDirectory, final File serverWriteDirectory) throws IOException
+    {
+        log_.println("Starting TFTP Server on port " + port_ + ".  Read directory: "
+                + serverReadDirectory + " Write directory: " + serverWriteDirectory
@@ -630,2 +784,4 @@ public class TFTPServer implements Runnable {
-        if (!serverReadDirectory_.exists() || !serverReadDirectory.isDirectory()) {
-            throw new IOException("The server read directory " + serverReadDirectory_ + " does not exist");
+        if (!serverReadDirectory_.exists() || !serverReadDirectory.isDirectory())
+        {
+            throw new IOException("The server read directory " + serverReadDirectory_
+                    + " does not exist");
@@ -635,2 +791,4 @@ public class TFTPServer implements Runnable {
-        if (!serverWriteDirectory_.exists() || !serverWriteDirectory.isDirectory()) {
-            throw new IOException("The server write directory " + serverWriteDirectory_ + " does not exist");
+        if (!serverWriteDirectory_.exists() || !serverWriteDirectory.isDirectory())
+        {
+            throw new IOException("The server write directory " + serverWriteDirectory_
+                    + " does not exist");
@@ -666,3 +824,6 @@ public class TFTPServer implements Runnable {
-    public void run() {
-        try {
-            while (!shutdownServer) {
+    public void run()
+    {
+        try
+        {
+            while (!shutdownServer)
+            {
@@ -674 +835,2 @@ public class TFTPServer implements Runnable {
-                synchronized (transfers_) {
+                synchronized(transfers_)
+                {
@@ -682,2 +844,5 @@ public class TFTPServer implements Runnable {
-        } catch (final Exception e) {
-            if (!shutdownServer) {
+        }
+        catch (final Exception e)
+        {
+            if (!shutdownServer)
+            {
@@ -687 +852,3 @@ public class TFTPServer implements Runnable {
-        } finally {
+        }
+        finally
+        {
@@ -689 +856,2 @@ public class TFTPServer implements Runnable {
-            if (serverTftp_ != null && serverTftp_.isOpen()) {
+            if (serverTftp_ != null && serverTftp_.isOpen())
+            {
@@ -707 +875,2 @@ public class TFTPServer implements Runnable {
-    public void setLog(final PrintStream log) {
+    public void setLog(final PrintStream log)
+    {
@@ -716 +885,2 @@ public class TFTPServer implements Runnable {
-    public void setLogError(final PrintStream logError) {
+    public void setLogError(final PrintStream logError)
+    {
@@ -725,2 +895,4 @@ public class TFTPServer implements Runnable {
-    public void setMaxTimeoutRetries(final int retries) {
-        if (retries < 0) {
+    public void setMaxTimeoutRetries(final int retries)
+    {
+        if (retries < 0)
+        {
@@ -734,2 +906,2 @@ public class TFTPServer implements Runnable {
-     * https://commons.apache.org/net/apidocs/org/apache/commons/net/tftp/TFTP.html#DEFAULT_TIMEOUT (5000 at the time I write this) Min value of 10.
-     *
+     * https://commons.apache.org/net/apidocs/org/apache/commons/net/tftp/TFTP.html#DEFAULT_TIMEOUT
+     * (5000 at the time I write this) Min value of 10.
@@ -738,2 +910,4 @@ public class TFTPServer implements Runnable {
-    public void setSocketTimeout(final int timeout) {
-        if (timeout < 10) {
+    public void setSocketTimeout(final int timeout)
+    {
+        if (timeout < 10)
+        {
@@ -746 +920,2 @@ public class TFTPServer implements Runnable {
-     * Stop the tftp server (and any currently running transfers) and release all opened network resources.
+     * Stop the tftp server (and any currently running transfers) and release all opened network
+     * resources.
@@ -748 +923,2 @@ public class TFTPServer implements Runnable {
-    public void shutdown() {
+    public void shutdown()
+    {
@@ -751 +927,2 @@ public class TFTPServer implements Runnable {
-        synchronized (transfers_) {
+        synchronized(transfers_)
+        {
@@ -755 +932,2 @@ public class TFTPServer implements Runnable {
-        try {
+        try
+        {
@@ -757 +935,3 @@ public class TFTPServer implements Runnable {
-        } catch (final RuntimeException e) {
+        }
+        catch (final RuntimeException e)
+        {
diff --git a/src/test/java/org/apache/commons/net/tftp/TFTPServerMain.java b/src/test/java/org/apache/commons/net/tftp/TFTPServerMain.java
index a43347035..0fd10dad2 100644
--- a/src/test/java/org/apache/commons/net/tftp/TFTPServerMain.java
+++ b/src/test/java/org/apache/commons/net/tftp/TFTPServerMain.java
@@ -27,2 +27,2 @@ import java.util.Random;
- * Main class for TFTPServer. This allows CLI use of the server.
- *
+ * Main class for TFTPServer.
+ * This allows CLI use of the server.
@@ -33,2 +33,7 @@ public class TFTPServerMain {
-    private static final String USAGE = "Usage: TFTPServerMain [options] [port]\n\n" + "port   - the port to use (default 6901)\n"
-            + "\t-p path to server directory (default java.io.tempdir)\n" + "\t-r randomly introduce errors\n" + "\t-v verbose (trace packets)\n";
+    private static final String USAGE =
+            "Usage: TFTPServerMain [options] [port]\n\n" +
+            "port   - the port to use (default 6901)\n" +
+            "\t-p path to server directory (default java.io.tempdir)\n" +
+            "\t-r randomly introduce errors\n" +
+            "\t-v verbose (trace packets)\n"
+            ;
@@ -36 +41 @@ public class TFTPServerMain {
-    public static void main(final String[] args) throws Exception {
+    public static void main(final String [] args) throws Exception {
@@ -39 +44 @@ public class TFTPServerMain {
-        final Map<String, String> opts = new HashMap<>();
+        final Map<String,String> opts = new HashMap<>();
@@ -42 +47,2 @@ public class TFTPServerMain {
-        for (argc = 0; argc < args.length; argc++) {
+        for (argc = 0; argc < args.length; argc++)
+        {
@@ -68 +74,2 @@ public class TFTPServerMain {
-        final TFTPServer tftpS = new TFTPServer(serverDirectory, serverDirectory, port, TFTPServer.ServerMode.GET_AND_PUT, null, null) {
+        final TFTPServer tftpS = new TFTPServer(serverDirectory, serverDirectory, port,
+                TFTPServer.ServerMode.GET_AND_PUT, null, null){
@@ -70 +77 @@ public class TFTPServerMain {
-            TFTP newTFTP() {
+            TFTP newTFTP(){
@@ -73,4 +80,4 @@ public class TFTPServerMain {
-                        @Override
-                        protected void trace(final String direction, final TFTPPacket packet) {
-                            System.out.println(direction + " " + packet.toString());
-                        }
+                      @Override
+                      protected void trace(final String direction, final TFTPPacket packet) {
+                          System.out.println(direction + " " + packet.toString());
+                      }
@@ -89,13 +96,5 @@ public class TFTPServerMain {
-                switch (rint) {
-                case 0:
-                    System.out.println("Bump port " + packet);
-                    final int port = packet.getPort();
-                    packet.setPort(port + 5);
-                    super.sendData(tftp, packet);
-                    packet.setPort(port);
-                    break;
-                case 1:
-                    if (packet instanceof TFTPDataPacket) {
-                        final TFTPDataPacket data = (TFTPDataPacket) packet;
-                        System.out.println("Change data block num");
-                        data.blockNumber--;
+                switch(rint) {
+                    case 0:
+                        System.out.println("Bump port " + packet);
+                        final int port = packet.getPort();
+                        packet.setPort(port+5);
@@ -103,6 +102,23 @@ public class TFTPServerMain {
-                        data.blockNumber++;
-                    }
-                    if (packet instanceof TFTPAckPacket) {
-                        final TFTPAckPacket ack = (TFTPAckPacket) packet;
-                        System.out.println("Change ack block num");
-                        ack.blockNumber--;
+                        packet.setPort(port);
+                        break;
+                    case 1:
+                        if (packet instanceof TFTPDataPacket) {
+                            final TFTPDataPacket data = (TFTPDataPacket) packet;
+                            System.out.println("Change data block num");
+                            data.blockNumber--;
+                            super.sendData(tftp, packet);
+                            data.blockNumber++;
+                        }
+                        if (packet instanceof TFTPAckPacket) {
+                            final TFTPAckPacket ack = (TFTPAckPacket) packet;
+                            System.out.println("Change ack block num");
+                            ack.blockNumber--;
+                            super.sendData(tftp, packet);
+                            ack.blockNumber++;
+                        }
+                        break;
+                    case 2:
+                        System.out.println("Drop packet: " + packet);
+                        break;
+                    case 3:
+                        System.out.println("Dupe packet: " + packet);
@@ -110,14 +126,5 @@ public class TFTPServerMain {
-                        ack.blockNumber++;
-                    }
-                    break;
-                case 2:
-                    System.out.println("Drop packet: " + packet);
-                    break;
-                case 3:
-                    System.out.println("Dupe packet: " + packet);
-                    super.sendData(tftp, packet);
-                    super.sendData(tftp, packet);
-                    break;
-                default:
-                    super.sendData(tftp, packet);
-                    break;
+                        super.sendData(tftp, packet);
+                        break;
+                    default:
+                        super.sendData(tftp, packet);
+                        break;
@@ -133,0 +141 @@ public class TFTPServerMain {
+                }
@@ -135 +143 @@ public class TFTPServerMain {
-        });
+        );
diff --git a/src/test/java/org/apache/commons/net/tftp/TFTPServerPathTest.java b/src/test/java/org/apache/commons/net/tftp/TFTPServerPathTest.java
index d9d89aeb6..6272f9209 100644
--- a/src/test/java/org/apache/commons/net/tftp/TFTPServerPathTest.java
+++ b/src/test/java/org/apache/commons/net/tftp/TFTPServerPathTest.java
@@ -29,2 +29,2 @@ import junit.framework.TestCase;
- * Some basic tests to ensure that the TFTP Server is honoring its read/write mode, and preventing files from being read or written from outside of the assigned
- * roots.
+ * Some basic tests to ensure that the TFTP Server is honoring its read/write mode, and preventing
+ * files from being read or written from outside of the assigned roots.
@@ -32 +32,2 @@ import junit.framework.TestCase;
-public class TFTPServerPathTest extends TestCase {
+public class TFTPServerPathTest extends TestCase
+{
@@ -37 +38,2 @@ public class TFTPServerPathTest extends TestCase {
-    public void testReadOnly() throws IOException {
+    public void testReadOnly() throws IOException
+    {
@@ -39 +41,2 @@ public class TFTPServerPathTest extends TestCase {
-        final TFTPServer tftpS = new TFTPServer(serverDirectory, serverDirectory, SERVER_PORT, ServerMode.GET_ONLY, null, null);
+        final TFTPServer tftpS = new TFTPServer(serverDirectory, serverDirectory, SERVER_PORT,
+                ServerMode.GET_ONLY, null, null);
@@ -75 +78,2 @@ public class TFTPServerPathTest extends TestCase {
-    public void testWriteOnly() throws IOException {
+    public void testWriteOnly() throws IOException
+    {
@@ -77 +81,2 @@ public class TFTPServerPathTest extends TestCase {
-        final TFTPServer tftpS = new TFTPServer(serverDirectory, serverDirectory, SERVER_PORT, ServerMode.PUT_ONLY, null, null);
+        final TFTPServer tftpS = new TFTPServer(serverDirectory, serverDirectory, SERVER_PORT,
+                ServerMode.PUT_ONLY, null, null);
@@ -114 +119,2 @@ public class TFTPServerPathTest extends TestCase {
-    public void testWriteOutsideHome() throws IOException {
+    public void testWriteOutsideHome() throws IOException
+    {
@@ -116 +122,2 @@ public class TFTPServerPathTest extends TestCase {
-        final TFTPServer tftpS = new TFTPServer(serverDirectory, serverDirectory, SERVER_PORT, ServerMode.GET_AND_PUT, null, null);
+        final TFTPServer tftpS = new TFTPServer(serverDirectory, serverDirectory, SERVER_PORT,
+                ServerMode.GET_AND_PUT, null, null);
@@ -134 +141,2 @@ public class TFTPServerPathTest extends TestCase {
-        assertFalse("file created when it should not have been", new File(serverDirectory, "../foo").exists());
+        assertFalse("file created when it should not have been",
+                new File(serverDirectory, "../foo").exists());
@@ -141,0 +150 @@ public class TFTPServerPathTest extends TestCase {
+
diff --git a/src/test/java/org/apache/commons/net/tftp/TFTPTest.java b/src/test/java/org/apache/commons/net/tftp/TFTPTest.java
index 42d92f4f8..b41200af5 100644
--- a/src/test/java/org/apache/commons/net/tftp/TFTPTest.java
+++ b/src/test/java/org/apache/commons/net/tftp/TFTPTest.java
@@ -33 +33,2 @@ import junit.framework.TestCase;
- * Test the TFTP Server and TFTP Client by creating some files in the system temp folder and then uploading and downloading them.
+ * Test the TFTP Server and TFTP Client by creating some files in the system temp folder and then
+ * uploading and downloading them.
@@ -35 +36,2 @@ import junit.framework.TestCase;
-public class TFTPTest extends TestCase {
+public class TFTPTest extends TestCase
+{
@@ -45,2 +47,4 @@ public class TFTPTest extends TestCase {
-    static {
-        try {
+    static
+    {
+        try
+        {
@@ -57 +61,2 @@ public class TFTPTest extends TestCase {
-            tftpS = new TFTPServer(serverDirectory, serverDirectory, SERVER_PORT, ServerMode.GET_AND_PUT, null, null);
+            tftpS = new TFTPServer(serverDirectory, serverDirectory, SERVER_PORT, ServerMode.GET_AND_PUT,
+                    null, null);
@@ -59 +64,3 @@ public class TFTPTest extends TestCase {
-        } catch (final IOException e) {
+        }
+        catch (final IOException e)
+        {
@@ -68 +75,2 @@ public class TFTPTest extends TestCase {
-    private static File createFile(final File file, final int size) throws IOException {
+    private static File createFile(final File file, final int size) throws IOException
+    {
@@ -78 +86,2 @@ public class TFTPTest extends TestCase {
-    private boolean filesIdentical(final File a, final File b) throws IOException {
+    private boolean filesIdentical(final File a, final File b) throws IOException
+    {
@@ -88 +97 @@ public class TFTPTest extends TestCase {
-                final InputStream fisB = new BufferedInputStream(new FileInputStream(b))) {
+            final InputStream fisB = new BufferedInputStream(new FileInputStream(b))) {
@@ -108 +117,2 @@ public class TFTPTest extends TestCase {
-    protected void tearDown() throws Exception {
+    protected void tearDown() throws Exception
+    {
@@ -110,2 +120,4 @@ public class TFTPTest extends TestCase {
-        if (testsLeftToRun <= 0) {
-            if (tftpS != null) {
+        if (testsLeftToRun <= 0)
+        {
+            if (tftpS != null)
+            {
@@ -114 +126,2 @@ public class TFTPTest extends TestCase {
-            for (final File file : files) {
+            for (final File file : files)
+            {
@@ -121 +134,2 @@ public class TFTPTest extends TestCase {
-    public void testASCIIDownloads() {
+    public void testASCIIDownloads()
+    {
@@ -123 +137,2 @@ public class TFTPTest extends TestCase {
-        for (int i = 0; i < 6; i++) {
+        for (int i = 0; i < 6; i++)
+        {
@@ -127 +142 @@ public class TFTPTest extends TestCase {
-                fail("Entry " + i + " Error " + e.toString());
+                fail("Entry "+i+" Error "+e.toString());
@@ -133 +148,2 @@ public class TFTPTest extends TestCase {
-    public void testASCIIUploads() throws Exception {
+    public void testASCIIUploads() throws Exception
+    {
@@ -135 +151,2 @@ public class TFTPTest extends TestCase {
-        for (int i = 0; i < 6; i++) {
+        for (int i = 0; i < 6; i++)
+        {
@@ -140 +157,2 @@ public class TFTPTest extends TestCase {
-    private void testDownload(final int mode, final File file) throws IOException {
+    private void testDownload(final int mode, final File file) throws IOException
+    {
@@ -163 +181,2 @@ public class TFTPTest extends TestCase {
-    public void testHugeDownloads() throws Exception {
+    public void testHugeDownloads() throws Exception
+    {
@@ -165 +184,2 @@ public class TFTPTest extends TestCase {
-        for (int i = 5; i < files.length; i++) {
+        for (int i = 5; i < files.length; i++)
+        {
@@ -170,2 +190,4 @@ public class TFTPTest extends TestCase {
-    public void testHugeUploads() throws Exception {
-        for (int i = 5; i < files.length; i++) {
+    public void testHugeUploads() throws Exception
+    {
+        for (int i = 5; i < files.length; i++)
+        {
@@ -176 +198,2 @@ public class TFTPTest extends TestCase {
-    public void testTFTPBinaryDownloads() throws Exception {
+    public void testTFTPBinaryDownloads() throws Exception
+    {
@@ -178 +201,2 @@ public class TFTPTest extends TestCase {
-        for (int i = 0; i < 6; i++) {
+        for (int i = 0; i < 6; i++)
+        {
@@ -183 +207,2 @@ public class TFTPTest extends TestCase {
-    public void testTFTPBinaryUploads() throws Exception {
+    public void testTFTPBinaryUploads() throws Exception
+    {
@@ -185 +210,2 @@ public class TFTPTest extends TestCase {
-        for (int i = 0; i < 6; i++) {
+        for (int i = 0; i < 6; i++)
+        {
@@ -190 +216,2 @@ public class TFTPTest extends TestCase {
-    private void testUpload(final int mode, final File file) throws Exception {
+    private void testUpload(final int mode, final File file) throws Exception
+    {
diff --git a/src/test/java/org/apache/commons/net/time/TimeTCPClientTest.java b/src/test/java/org/apache/commons/net/time/TimeTCPClientTest.java
index a9815fbc0..2ce9020a4 100644
--- a/src/test/java/org/apache/commons/net/time/TimeTCPClientTest.java
+++ b/src/test/java/org/apache/commons/net/time/TimeTCPClientTest.java
@@ -26 +26,2 @@ import junit.framework.TestCase;
-public class TimeTCPClientTest extends TestCase {
+public class TimeTCPClientTest extends TestCase
+{
@@ -31,2 +32,4 @@ public class TimeTCPClientTest extends TestCase {
-    protected void closeConnections() {
-        try {
+    protected void closeConnections()
+    {
+        try
+        {
@@ -35 +38,2 @@ public class TimeTCPClientTest extends TestCase {
-        } catch (final Exception e) {
+        } catch (final Exception e)
+        {
@@ -40 +44,2 @@ public class TimeTCPClientTest extends TestCase {
-    protected void openConnections() throws Exception {
+    protected void openConnections() throws Exception
+    {
@@ -44 +49,2 @@ public class TimeTCPClientTest extends TestCase {
-        } catch (final IOException ioe) {
+        } catch (final IOException ioe)
+        {
@@ -56 +62,2 @@ public class TimeTCPClientTest extends TestCase {
-    public void testCompareTimes() throws Exception {
+    public void testCompareTimes() throws Exception
+    {
@@ -62 +69,2 @@ public class TimeTCPClientTest extends TestCase {
-        try {
+        try
+        {
@@ -65 +73,2 @@ public class TimeTCPClientTest extends TestCase {
-            try {
+            try
+            {
@@ -72 +81 @@ public class TimeTCPClientTest extends TestCase {
-                fail("IOError <" + e + "> trying to connect to " + localHost + " " + _port);
+                fail("IOError <"+e+"> trying to connect to " + localHost + " " + _port );
@@ -74,4 +83,5 @@ public class TimeTCPClientTest extends TestCase {
-            } finally {
-                if (client.isConnected()) {
-                    client.disconnect();
-                }
+            } finally
+            {
+              if(client.isConnected()) {
+                  client.disconnect();
+              }
@@ -80 +90,2 @@ public class TimeTCPClientTest extends TestCase {
-            try {
+            try
+            {
@@ -84 +95 @@ public class TimeTCPClientTest extends TestCase {
-                clientTime2 = (client.getTime() - TimeTCPClient.SECONDS_1900_TO_1970) * 1000L;
+                clientTime2 = (client.getTime() - TimeTCPClient.SECONDS_1900_TO_1970)*1000L;
@@ -86,4 +97,5 @@ public class TimeTCPClientTest extends TestCase {
-            } finally {
-                if (client.isConnected()) {
-                    client.disconnect();
-                }
+            } finally
+            {
+              if(client.isConnected()) {
+                  client.disconnect();
+              }
@@ -91 +103,2 @@ public class TimeTCPClientTest extends TestCase {
-        } finally {
+        } finally
+        {
@@ -101 +114,2 @@ public class TimeTCPClientTest extends TestCase {
-     * tests the constant basetime used by TimeClient against tha computed from Calendar class.
+     *  tests the constant basetime used by TimeClient against tha
+     *  computed from Calendar class.
@@ -112,0 +127 @@ public class TimeTCPClientTest extends TestCase {
+
diff --git a/src/test/java/org/apache/commons/net/time/TimeTestSimpleServer.java b/src/test/java/org/apache/commons/net/time/TimeTestSimpleServer.java
index 21d6fd8cb..f9a197acc 100644
--- a/src/test/java/org/apache/commons/net/time/TimeTestSimpleServer.java
+++ b/src/test/java/org/apache/commons/net/time/TimeTestSimpleServer.java
@@ -26 +26,2 @@ import java.net.Socket;
- * The TimetSimpleServer class is a simple TCP implementation of a server for the Time Protocol described in RFC 868.
+ * The TimetSimpleServer class is a simple TCP implementation of a server
+ * for the Time Protocol described in RFC 868.
@@ -28,2 +29,5 @@ import java.net.Socket;
- * Listens for TCP socket connections on the time protocol port and writes the local time to socket outputStream as 32-bit integer of seconds since midnight on
- * 1 January 1900 GMT. See <A HREF="ftp://ftp.rfc-editor.org/in-notes/rfc868.txt"> the spec </A> for details.
+ * Listens for TCP socket connections on the time protocol port and writes
+ * the local time to socket outputStream as 32-bit integer of seconds
+ * since midnight on 1 January 1900 GMT.
+ * See <A HREF="ftp://ftp.rfc-editor.org/in-notes/rfc868.txt"> the spec </A> for
+ * details.
@@ -34 +38,2 @@ import java.net.Socket;
-public class TimeTestSimpleServer implements Runnable {
+public class TimeTestSimpleServer implements Runnable
+{
@@ -41 +46 @@ public class TimeTestSimpleServer implements Runnable {
-    /** The default time port. It is set to 37 according to RFC 868. */
+    /** The default time port.  It is set to 37 according to RFC 868. */
@@ -44 +49,2 @@ public class TimeTestSimpleServer implements Runnable {
-    public static void main(final String[] args) {
+    public static void main(final String[] args)
+    {
@@ -46 +52,2 @@ public class TimeTestSimpleServer implements Runnable {
-        try {
+        try
+        {
@@ -48 +55,2 @@ public class TimeTestSimpleServer implements Runnable {
-        } catch (final IOException e) {
+        } catch (final IOException e)
+        {
@@ -52 +59,0 @@ public class TimeTestSimpleServer implements Runnable {
-
@@ -58 +65,2 @@ public class TimeTestSimpleServer implements Runnable {
-    public TimeTestSimpleServer() {
+    public TimeTestSimpleServer()
+    {
@@ -62 +70,2 @@ public class TimeTestSimpleServer implements Runnable {
-    public TimeTestSimpleServer(final int port) {
+    public TimeTestSimpleServer(final int port)
+    {
@@ -66,2 +75,4 @@ public class TimeTestSimpleServer implements Runnable {
-    public void connect() throws IOException {
-        if (server == null) {
+    public void connect() throws IOException
+    {
+        if (server == null)
+        {
@@ -72 +83,2 @@ public class TimeTestSimpleServer implements Runnable {
-    public int getPort() {
+    public int getPort()
+    {
@@ -76 +88,2 @@ public class TimeTestSimpleServer implements Runnable {
-    public boolean isRunning() {
+    public boolean isRunning()
+    {
@@ -81 +94,2 @@ public class TimeTestSimpleServer implements Runnable {
-    public void run() {
+    public void run()
+    {
@@ -83,2 +97,4 @@ public class TimeTestSimpleServer implements Runnable {
-        while (running) {
-            try {
+        while (running)
+        {
+            try
+            {
@@ -91 +107,2 @@ public class TimeTestSimpleServer implements Runnable {
-            } catch (final IOException e) {
+            } catch (final IOException e)
+            {
@@ -93 +110,2 @@ public class TimeTestSimpleServer implements Runnable {
-            } finally {
+            } finally
+            {
@@ -95,3 +113,5 @@ public class TimeTestSimpleServer implements Runnable {
-                    try {
-                        socket.close(); // force closing of the socket
-                    } catch (final IOException e) {
+                    try
+                    {
+                        socket.close();  // force closing of the socket
+                    } catch (final IOException e)
+                    {
@@ -108,2 +128,4 @@ public class TimeTestSimpleServer implements Runnable {
-    public void start() throws IOException {
-        if (server == null) {
+    public void start() throws IOException
+    {
+        if (server == null)
+    {
@@ -111,5 +133,6 @@ public class TimeTestSimpleServer implements Runnable {
-        }
-        if (!running) {
-            running = true;
-            new Thread(this).start();
-        }
+    }
+    if (!running)
+    {
+        running = true;
+        new Thread(this).start();
+    }
@@ -121 +144,2 @@ public class TimeTestSimpleServer implements Runnable {
-    public void stop() {
+    public void stop()
+    {
@@ -123,4 +147,7 @@ public class TimeTestSimpleServer implements Runnable {
-        if (server != null) {
-            try {
-                server.close(); // force closing of the socket
-            } catch (final IOException e) {
+        if (server != null)
+        {
+            try
+            {
+                server.close();  // force closing of the socket
+            } catch (final IOException e)
+            {
diff --git a/src/test/java/org/apache/commons/net/util/Base64Test.java b/src/test/java/org/apache/commons/net/util/Base64Test.java
index 580dd1e29..df3a328ff 100644
--- a/src/test/java/org/apache/commons/net/util/Base64Test.java
+++ b/src/test/java/org/apache/commons/net/util/Base64Test.java
@@ -43 +43 @@ public class Base64Test {
-        assertArrayEquals(new byte[] { '\r', '\n' }, b64.getLineSeparator());
+        assertArrayEquals(new byte[]{'\r', '\n'}, b64.getLineSeparator());
@@ -59 +59 @@ public class Base64Test {
-        b64 = new Base64(8, new byte[] {});
+        b64 = new Base64(8, new byte[]{});
@@ -61 +61 @@ public class Base64Test {
-        assertArrayEquals(new byte[] {}, b64.getLineSeparator());
+        assertArrayEquals(new byte[]{}, b64.getLineSeparator());
@@ -67 +67 @@ public class Base64Test {
-        b64 = new Base64(8, new byte[] {}, false);
+        b64 = new Base64(8, new byte[]{}, false);
@@ -69 +69 @@ public class Base64Test {
-        b64 = new Base64(8, new byte[] {}, true);
+        b64 = new Base64(8, new byte[]{}, true);
@@ -73,2 +73 @@ public class Base64Test {
-    @Test
-    @Ignore
+    @Test @Ignore
@@ -79,2 +78 @@ public class Base64Test {
-    @Test
-    @Ignore
+    @Test @Ignore
@@ -85,2 +83 @@ public class Base64Test {
-    @Test
-    @Ignore
+    @Test @Ignore
@@ -91,2 +88 @@ public class Base64Test {
-    @Test
-    @Ignore
+    @Test @Ignore
@@ -97,2 +93 @@ public class Base64Test {
-    @Test
-    @Ignore
+    @Test @Ignore
@@ -103,2 +98 @@ public class Base64Test {
-    @Test
-    @Ignore
+    @Test @Ignore
@@ -111 +105 @@ public class Base64Test {
-        final byte[] binaryData = null;
+        final byte[] binaryData=null;
@@ -115,2 +109 @@ public class Base64Test {
-    @Test
-    @Ignore
+    @Test @Ignore
@@ -121,2 +114 @@ public class Base64Test {
-    @Test
-    @Ignore
+    @Test @Ignore
@@ -129 +121 @@ public class Base64Test {
-        final byte[] binaryData = new byte[] { '1', '2', '3' };
+        final byte[] binaryData = new byte[]{'1','2','3'};
@@ -157,2 +149 @@ public class Base64Test {
-    @Test
-    @Ignore
+    @Test @Ignore
@@ -163,2 +154 @@ public class Base64Test {
-    @Test
-    @Ignore
+    @Test @Ignore
@@ -169,2 +159 @@ public class Base64Test {
-    @Test
-    @Ignore
+    @Test @Ignore
@@ -175,2 +164 @@ public class Base64Test {
-    @Test
-    @Ignore
+    @Test @Ignore
@@ -181,2 +169 @@ public class Base64Test {
-    @Test
-    @Ignore
+    @Test @Ignore
@@ -187,2 +174 @@ public class Base64Test {
-    @Test
-    @Ignore
+    @Test @Ignore
@@ -193,2 +179 @@ public class Base64Test {
-    @Test
-    @Ignore
+    @Test @Ignore
@@ -199,2 +184 @@ public class Base64Test {
-    @Test
-    @Ignore
+    @Test @Ignore
@@ -205,2 +189 @@ public class Base64Test {
-    @Test
-    @Ignore
+    @Test @Ignore
@@ -211,2 +194 @@ public class Base64Test {
-    @Test
-    @Ignore
+    @Test @Ignore
@@ -219,2 +201,2 @@ public class Base64Test {
-        assertTrue(Base64.isArrayByteBase64(new byte[] { 'b', ' ' }));
-        assertFalse(Base64.isArrayByteBase64(new byte[] { '?' }));
+        assertTrue(Base64.isArrayByteBase64(new byte[]{'b',' '}));
+        assertFalse(Base64.isArrayByteBase64(new byte[]{'?'}));
@@ -225,2 +207,2 @@ public class Base64Test {
-        assertTrue(Base64.isBase64((byte) 'b'));
-        assertFalse(Base64.isBase64((byte) ' '));
+        assertTrue(Base64.isBase64((byte)'b'));
+        assertFalse(Base64.isBase64((byte)' '));
@@ -229,2 +211 @@ public class Base64Test {
-    @Test
-    @Ignore
+    @Test @Ignore
diff --git a/src/test/java/org/apache/commons/net/util/UtilTest.java b/src/test/java/org/apache/commons/net/util/UtilTest.java
index 556dc9190..a76c24b6a 100644
--- a/src/test/java/org/apache/commons/net/util/UtilTest.java
+++ b/src/test/java/org/apache/commons/net/util/UtilTest.java
@@ -45 +44,0 @@ public class UtilTest {
-
@@ -51 +49,0 @@ public class UtilTest {
-
@@ -64 +61,0 @@ public class UtilTest {
-
@@ -77 +73,0 @@ public class UtilTest {
-
@@ -95 +90,0 @@ public class UtilTest {
-
@@ -97 +92 @@ public class UtilTest {
-    private final Reader source = new CharArrayReader(new char[] { 'a' });
+    private final Reader source = new CharArrayReader(new char[]{'a'});
@@ -99 +94 @@ public class UtilTest {
-    private final InputStream src = new ByteArrayInputStream(new byte[] { 'z' });
+    private final InputStream src = new ByteArrayInputStream(new byte[]{'z'});
@@ -111 +106 @@ public class UtilTest {
-        final char[] buff = new char[] { 'a', 'b', 'c', 'd' }; // must be multiple of 2
+        final char[] buff = new char[]{'a', 'b', 'c', 'd'}; // must be multiple of 2
@@ -113 +108 @@ public class UtilTest {
-        { // Check buffer size 1 processes in chunks of 1
+        {   // Check buffer size 1 processes in chunks of 1
@@ -119 +114 @@ public class UtilTest {
-        { // Check bufsize 2 uses chunks of 2
+        {   // Check bufsize 2 uses chunks of 2
@@ -125 +120 @@ public class UtilTest {
-        { // Check bigger size reads the lot
+        {   // Check bigger size reads the lot
@@ -131 +126 @@ public class UtilTest {
-        { // Check negative size reads reads full amount
+        {   // Check negative size reads reads full amount
@@ -137 +132 @@ public class UtilTest {
-        { // Check zero size reads reads full amount
+        {   // Check zero size reads reads full amount
@@ -147 +142 @@ public class UtilTest {
-        final byte[] buff = new byte[] { 'a', 'b', 'c', 'd' }; // must be multiple of 2
+        final byte[] buff = new byte[]{'a', 'b', 'c', 'd'}; // must be multiple of 2
@@ -149 +144 @@ public class UtilTest {
-        { // Check buffer size 1 processes in chunks of 1
+        {   // Check buffer size 1 processes in chunks of 1
@@ -155 +150 @@ public class UtilTest {
-        { // Check bufsize 2 uses chunks of 2
+        {   // Check bufsize 2 uses chunks of 2
@@ -161 +156 @@ public class UtilTest {
-        { // Check bigger size reads the lot
+        {   // Check bigger size reads the lot
@@ -167 +162 @@ public class UtilTest {
-        { // Check negative size reads reads full amount
+        {   // Check negative size reads reads full amount
@@ -173 +168 @@ public class UtilTest {
-        { // Check zero size reads reads full amount
+        {   // Check zero size reads reads full amount
@@ -183,3 +178,3 @@ public class UtilTest {
-        final long streamSize = 0;
-        final int bufferSize = -1;
-        Util.copyReader(source, dest, bufferSize, streamSize, new CSL(1, 1, streamSize));
+        final long streamSize=0;
+        final int bufferSize=-1;
+        Util.copyReader(source, dest, bufferSize, streamSize, new CSL(1,1,streamSize));
@@ -190,3 +185,3 @@ public class UtilTest {
-        final long streamSize = 0;
-        final int bufferSize = 0;
-        Util.copyReader(source, dest, bufferSize, streamSize, new CSL(1, 1, streamSize));
+        final long streamSize=0;
+        final int bufferSize=0;
+        Util.copyReader(source, dest, bufferSize, streamSize, new CSL(1,1,streamSize));
@@ -197,3 +192,3 @@ public class UtilTest {
-        final long streamSize = 0;
-        final int bufferSize = 1;
-        Util.copyReader(source, dest, bufferSize, streamSize, new CSL(1, 1, streamSize));
+        final long streamSize=0;
+        final int bufferSize=1;
+        Util.copyReader(source, dest, bufferSize, streamSize, new CSL(1,1,streamSize));
@@ -204,3 +199,3 @@ public class UtilTest {
-        final long streamSize = 0;
-        final int bufferSize = -1;
-        Util.copyStream(src, dst, bufferSize, streamSize, new CSL(1, 1, streamSize));
+        final long streamSize=0;
+        final int bufferSize=-1;
+        Util.copyStream(src, dst, bufferSize, streamSize, new CSL(1,1,streamSize));
@@ -211,3 +206,3 @@ public class UtilTest {
-        final long streamSize = 0;
-        final int bufferSize = 0;
-        Util.copyStream(src, dst, bufferSize, streamSize, new CSL(1, 1, streamSize));
+        final long streamSize=0;
+        final int bufferSize=0;
+        Util.copyStream(src, dst, bufferSize, streamSize, new CSL(1,1,streamSize));
@@ -218,3 +213,3 @@ public class UtilTest {
-        final long streamSize = 0;
-        final int bufferSize = 1;
-        Util.copyStream(src, dst, bufferSize, streamSize, new CSL(1, 1, streamSize));
+        final long streamSize=0;
+        final int bufferSize=1;
+        Util.copyStream(src, dst, bufferSize, streamSize, new CSL(1,1,streamSize));
