package
org
.
apache
.
commons
.
net
.
pop3
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
BufferedWriter
;
import
java
.
io
.
EOFException
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStreamReader
;
import
java
.
io
.
OutputStreamWriter
;
import
java
.
nio
.
charset
.
Charset
;
import
java
.
nio
.
charset
.
StandardCharsets
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
import
org
.
apache
.
commons
.
net
.
MalformedServerReplyException
;
import
org
.
apache
.
commons
.
net
.
ProtocolCommandSupport
;
import
org
.
apache
.
commons
.
net
.
SocketClient
;
import
org
.
apache
.
commons
.
net
.
io
.
CRLFLineReader
;
import
org
.
apache
.
commons
.
net
.
util
.
NetConstants
;
public
class
POP3
extends
SocketClient
{
public
static
final
int
DEFAULT_PORT
=
110
;
public
static
final
int
DISCONNECTED_STATE
=
-
1
;
public
static
final
int
AUTHORIZATION_STATE
=
0
;
public
static
final
int
TRANSACTION_STATE
=
1
;
public
static
final
int
UPDATE_STATE
=
2
;
static
final
String
OK
=
"+OK"
;
static
final
String
OK_INT
=
"+ "
;
static
final
String
ERROR
=
"-ERR"
;
static
final
Charset
DEFAULT_ENCODING
=
StandardCharsets
.
ISO_8859_1
;
private
int
popState
;
BufferedWriter
writer
;
BufferedReader
reader
;
int
replyCode
;
String
lastReplyLine
;
List
<
String
>
replyLines
;
protected
ProtocolCommandSupport
_commandSupport_
;
public
POP3
(
)
{
setDefaultPort
(
DEFAULT_PORT
)
;
popState
=
DISCONNECTED_STATE
;
reader
=
null
;
writer
=
null
;
replyLines
=
new
ArrayList
<
>
(
)
;
_commandSupport_
=
new
ProtocolCommandSupport
(
this
)
;
}
@
Override
protected
void
_connectAction_
(
)
throws
IOException
{
super
.
_connectAction_
(
)
;
reader
=
new
CRLFLineReader
(
new
InputStreamReader
(
_input_
,
DEFAULT_ENCODING
)
)
;
writer
=
new
BufferedWriter
(
new
OutputStreamWriter
(
_output_
,
DEFAULT_ENCODING
)
)
;
getReply
(
)
;
setState
(
AUTHORIZATION_STATE
)
;
}
@
Override
public
void
disconnect
(
)
throws
IOException
{
super
.
disconnect
(
)
;
reader
=
null
;
writer
=
null
;
lastReplyLine
=
null
;
replyLines
.
clear
(
)
;
setState
(
DISCONNECTED_STATE
)
;
}
public
void
getAdditionalReply
(
)
throws
IOException
{
String
line
;
line
=
reader
.
readLine
(
)
;
while
(
line
!=
null
)
{
replyLines
.
add
(
line
)
;
if
(
line
.
equals
(
"."
)
)
{
break
;
}
line
=
reader
.
readLine
(
)
;
}
}
@
Override
protected
ProtocolCommandSupport
getCommandSupport
(
)
{
return
_commandSupport_
;
}
private
void
getReply
(
)
throws
IOException
{
final
String
line
;
replyLines
.
clear
(
)
;
line
=
reader
.
readLine
(
)
;
if
(
line
==
null
)
{
throw
new
EOFException
(
"Connection closed without indication."
)
;
}
if
(
line
.
startsWith
(
OK
)
)
{
replyCode
=
POP3Reply
.
OK
;
}
else
if
(
line
.
startsWith
(
ERROR
)
)
{
replyCode
=
POP3Reply
.
ERROR
;
}
else
if
(
line
.
startsWith
(
OK_INT
)
)
{
replyCode
=
POP3Reply
.
OK_INT
;
}
else
{
throw
new
MalformedServerReplyException
(
"Received invalid POP3 protocol response from server."
+
line
)
;
}
replyLines
.
add
(
line
)
;
lastReplyLine
=
line
;
fireReplyReceived
(
replyCode
,
getReplyString
(
)
)
;
}
public
String
getReplyString
(
)
{
final
StringBuilder
buffer
=
new
StringBuilder
(
256
)
;
for
(
final
String
entry
:
replyLines
)
{
buffer
.
append
(
entry
)
;
buffer
.
append
(
SocketClient
.
NETASCII_EOL
)
;
}
return
buffer
.
toString
(
)
;
}
public
String
[
]
getReplyStrings
(
)
{
return
replyLines
.
toArray
(
NetConstants
.
EMPTY_STRING_ARRAY
)
;
}
public
int
getState
(
)
{
return
popState
;
}
public
void
removeProtocolCommandistener
(
final
org
.
apache
.
commons
.
net
.
ProtocolCommandListener
listener
)
{
removeProtocolCommandListener
(
listener
)
;
}
public
int
sendCommand
(
final
int
command
)
throws
IOException
{
return
sendCommand
(
POP3Command
.
commands
[
command
]
,
null
)
;
}
public
int
sendCommand
(
final
int
command
,
final
String
args
)
throws
IOException
{
return
sendCommand
(
POP3Command
.
commands
[
command
]
,
args
)
;
}
public
int
sendCommand
(
final
String
command
)
throws
IOException
{
return
sendCommand
(
command
,
null
)
;
}
public
int
sendCommand
(
final
String
command
,
final
String
args
)
throws
IOException
{
if
(
writer
==
null
)
{
throw
new
IllegalStateException
(
"Socket is not connected"
)
;
}
final
StringBuilder
__commandBuffer
=
new
StringBuilder
(
)
;
__commandBuffer
.
append
(
command
)
;
if
(
args
!=
null
)
{
__commandBuffer
.
append
(
' '
)
;
__commandBuffer
.
append
(
args
)
;
}
__commandBuffer
.
append
(
SocketClient
.
NETASCII_EOL
)
;
final
String
message
=
__commandBuffer
.
toString
(
)
;
writer
.
write
(
message
)
;
writer
.
flush
(
)
;
fireCommandSent
(
command
,
message
)
;
getReply
(
)
;
return
replyCode
;
}
public
void
setState
(
final
int
state
)
{
popState
=
state
;
}
}
<EOF>
