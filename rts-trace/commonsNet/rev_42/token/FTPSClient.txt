package
org
.
apache
.
commons
.
net
.
ftp
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
BufferedWriter
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStreamReader
;
import
java
.
io
.
OutputStreamWriter
;
import
java
.
net
.
Inet6Address
;
import
java
.
net
.
InetAddress
;
import
java
.
net
.
InetSocketAddress
;
import
java
.
net
.
ServerSocket
;
import
java
.
net
.
Socket
;
import
javax
.
net
.
ssl
.
HostnameVerifier
;
import
javax
.
net
.
ssl
.
KeyManager
;
import
javax
.
net
.
ssl
.
SSLContext
;
import
javax
.
net
.
ssl
.
SSLException
;
import
javax
.
net
.
ssl
.
SSLHandshakeException
;
import
javax
.
net
.
ssl
.
SSLSocket
;
import
javax
.
net
.
ssl
.
SSLSocketFactory
;
import
javax
.
net
.
ssl
.
TrustManager
;
import
org
.
apache
.
commons
.
net
.
util
.
Base64
;
import
org
.
apache
.
commons
.
net
.
util
.
SSLContextUtils
;
import
org
.
apache
.
commons
.
net
.
util
.
SSLSocketUtils
;
import
org
.
apache
.
commons
.
net
.
util
.
TrustManagerUtils
;
public
class
FTPSClient
extends
FTPClient
{
public
static
final
int
DEFAULT_FTPS_DATA_PORT
=
989
;
public
static
final
int
DEFAULT_FTPS_PORT
=
990
;
private
static
final
String
[
]
PROT_COMMAND_VALUE
=
{
"C"
,
"E"
,
"S"
,
"P"
}
;
private
static
final
String
DEFAULT_PROT
=
"C"
;
private
static
final
String
DEFAULT_PROTOCOL
=
"TLS"
;
private
static
final
String
CMD_AUTH
=
"AUTH"
;
private
static
final
String
CMD_ADAT
=
"ADAT"
;
private
static
final
String
CMD_PROT
=
"PROT"
;
private
static
final
String
CMD_PBSZ
=
"PBSZ"
;
private
static
final
String
CMD_MIC
=
"MIC"
;
private
static
final
String
CMD_CONF
=
"CONF"
;
private
static
final
String
CMD_ENC
=
"ENC"
;
private
static
final
String
CMD_CCC
=
"CCC"
;
@
Deprecated
public
static
String
KEYSTORE_ALGORITHM
;
@
Deprecated
public
static
String
TRUSTSTORE_ALGORITHM
;
@
Deprecated
public
static
String
PROVIDER
;
@
Deprecated
public
static
String
STORE_TYPE
;
private
final
boolean
isImplicit
;
private
final
String
protocol
;
private
String
auth
=
DEFAULT_PROTOCOL
;
private
SSLContext
context
;
private
Socket
plainSocket
;
private
boolean
isCreation
=
true
;
private
boolean
isClientMode
=
true
;
private
boolean
isNeedClientAuth
;
private
boolean
isWantClientAuth
;
private
String
[
]
suites
;
private
String
[
]
protocols
;
private
TrustManager
trustManager
=
TrustManagerUtils
.
getValidateServerCertificateTrustManager
(
)
;
private
KeyManager
keyManager
;
private
HostnameVerifier
hostnameVerifier
;
private
boolean
tlsEndpointChecking
;
public
FTPSClient
(
)
{
this
(
DEFAULT_PROTOCOL
,
false
)
;
}
public
FTPSClient
(
final
boolean
isImplicit
)
{
this
(
DEFAULT_PROTOCOL
,
isImplicit
)
;
}
public
FTPSClient
(
final
boolean
isImplicit
,
final
SSLContext
context
)
{
this
(
DEFAULT_PROTOCOL
,
isImplicit
)
;
this
.
context
=
context
;
}
public
FTPSClient
(
final
SSLContext
context
)
{
this
(
false
,
context
)
;
}
public
FTPSClient
(
final
String
protocol
)
{
this
(
protocol
,
false
)
;
}
public
FTPSClient
(
final
String
protocol
,
final
boolean
isImplicit
)
{
this
.
protocol
=
protocol
;
this
.
isImplicit
=
isImplicit
;
if
(
isImplicit
)
{
setDefaultPort
(
DEFAULT_FTPS_PORT
)
;
}
}
@
Override
protected
void
_connectAction_
(
)
throws
IOException
{
if
(
isImplicit
)
{
applySocketAttributes
(
)
;
sslNegotiation
(
)
;
}
super
.
_connectAction_
(
)
;
if
(
!
isImplicit
)
{
execAUTH
(
)
;
sslNegotiation
(
)
;
}
}
@
Override
@
Deprecated
protected
Socket
_openDataConnection_
(
final
int
command
,
final
String
arg
)
throws
IOException
{
return
_openDataConnection_
(
FTPCommand
.
getCommand
(
command
)
,
arg
)
;
}
@
Override
protected
Socket
_openDataConnection_
(
final
String
command
,
final
String
arg
)
throws
IOException
{
final
Socket
socket
=
openDataSecureConnection
(
command
,
arg
)
;
_prepareDataSocket_
(
socket
)
;
if
(
socket
instanceof
SSLSocket
)
{
final
SSLSocket
sslSocket
=
(
SSLSocket
)
socket
;
sslSocket
.
setUseClientMode
(
isClientMode
)
;
sslSocket
.
setEnableSessionCreation
(
isCreation
)
;
if
(
!
isClientMode
)
{
sslSocket
.
setNeedClientAuth
(
isNeedClientAuth
)
;
sslSocket
.
setWantClientAuth
(
isWantClientAuth
)
;
}
if
(
suites
!=
null
)
{
sslSocket
.
setEnabledCipherSuites
(
suites
)
;
}
if
(
protocols
!=
null
)
{
sslSocket
.
setEnabledProtocols
(
protocols
)
;
}
sslSocket
.
startHandshake
(
)
;
}
return
socket
;
}
protected
void
_prepareDataSocket_
(
final
Socket
socket
)
throws
IOException
{
}
private
boolean
checkPROTValue
(
final
String
prot
)
{
for
(
final
String
element
:
PROT_COMMAND_VALUE
)
{
if
(
element
.
equals
(
prot
)
)
{
return
true
;
}
}
return
false
;
}
private
void
closeSockets
(
Socket
socket
,
Socket
sslSocket
)
throws
IOException
{
if
(
socket
!=
null
)
{
socket
.
close
(
)
;
}
if
(
sslSocket
!=
null
)
{
sslSocket
.
close
(
)
;
}
}
private
SSLSocket
createSSLSocket
(
final
Socket
socket
)
throws
IOException
{
if
(
socket
!=
null
)
{
final
SSLSocketFactory
f
=
context
.
getSocketFactory
(
)
;
return
(
SSLSocket
)
f
.
createSocket
(
socket
,
_hostname_
,
socket
.
getPort
(
)
,
false
)
;
}
return
null
;
}
@
Override
public
void
disconnect
(
)
throws
IOException
{
super
.
disconnect
(
)
;
if
(
plainSocket
!=
null
)
{
plainSocket
.
close
(
)
;
}
setSocketFactory
(
null
)
;
setServerSocketFactory
(
null
)
;
}
public
int
execADAT
(
final
byte
[
]
data
)
throws
IOException
{
if
(
data
!=
null
)
{
return
sendCommand
(
CMD_ADAT
,
Base64
.
encodeBase64StringUnChunked
(
data
)
)
;
}
return
sendCommand
(
CMD_ADAT
)
;
}
protected
void
execAUTH
(
)
throws
SSLException
,
IOException
{
final
int
replyCode
=
sendCommand
(
CMD_AUTH
,
auth
)
;
if
(
FTPReply
.
SECURITY_MECHANISM_IS_OK
==
replyCode
)
{
}
else
if
(
FTPReply
.
SECURITY_DATA_EXCHANGE_COMPLETE
!=
replyCode
)
{
throw
new
SSLException
(
getReplyString
(
)
)
;
}
}
public
int
execAUTH
(
final
String
mechanism
)
throws
IOException
{
return
sendCommand
(
CMD_AUTH
,
mechanism
)
;
}
public
int
execCCC
(
)
throws
IOException
{
final
int
repCode
=
sendCommand
(
CMD_CCC
)
;
return
repCode
;
}
public
int
execCONF
(
final
byte
[
]
data
)
throws
IOException
{
if
(
data
!=
null
)
{
return
sendCommand
(
CMD_CONF
,
Base64
.
encodeBase64StringUnChunked
(
data
)
)
;
}
return
sendCommand
(
CMD_CONF
,
""
)
;
}
public
int
execENC
(
final
byte
[
]
data
)
throws
IOException
{
if
(
data
!=
null
)
{
return
sendCommand
(
CMD_ENC
,
Base64
.
encodeBase64StringUnChunked
(
data
)
)
;
}
return
sendCommand
(
CMD_ENC
,
""
)
;
}
public
int
execMIC
(
final
byte
[
]
data
)
throws
IOException
{
if
(
data
!=
null
)
{
return
sendCommand
(
CMD_MIC
,
Base64
.
encodeBase64StringUnChunked
(
data
)
)
;
}
return
sendCommand
(
CMD_MIC
,
""
)
;
}
public
void
execPBSZ
(
final
long
pbsz
)
throws
SSLException
,
IOException
{
if
(
pbsz
<
0
||
4294967295L
<
pbsz
)
{
throw
new
IllegalArgumentException
(
)
;
}
final
int
status
=
sendCommand
(
CMD_PBSZ
,
String
.
valueOf
(
pbsz
)
)
;
if
(
FTPReply
.
COMMAND_OK
!=
status
)
{
throw
new
SSLException
(
getReplyString
(
)
)
;
}
}
public
void
execPROT
(
String
prot
)
throws
SSLException
,
IOException
{
if
(
prot
==
null
)
{
prot
=
DEFAULT_PROT
;
}
if
(
!
checkPROTValue
(
prot
)
)
{
throw
new
IllegalArgumentException
(
)
;
}
if
(
FTPReply
.
COMMAND_OK
!=
sendCommand
(
CMD_PROT
,
prot
)
)
{
throw
new
SSLException
(
getReplyString
(
)
)
;
}
if
(
DEFAULT_PROT
.
equals
(
prot
)
)
{
setSocketFactory
(
null
)
;
setServerSocketFactory
(
null
)
;
}
else
{
setSocketFactory
(
new
FTPSSocketFactory
(
context
)
)
;
setServerSocketFactory
(
new
FTPSServerSocketFactory
(
context
)
)
;
initSslContext
(
)
;
}
}
private
String
extractPrefixedData
(
final
String
prefix
,
final
String
reply
)
{
final
int
idx
=
reply
.
indexOf
(
prefix
)
;
if
(
idx
==
-
1
)
{
return
null
;
}
return
reply
.
substring
(
idx
+
prefix
.
length
(
)
)
.
trim
(
)
;
}
public
String
getAuthValue
(
)
{
return
this
.
auth
;
}
public
String
[
]
getEnabledCipherSuites
(
)
{
if
(
_socket_
instanceof
SSLSocket
)
{
return
(
(
SSLSocket
)
_socket_
)
.
getEnabledCipherSuites
(
)
;
}
return
null
;
}
public
String
[
]
getEnabledProtocols
(
)
{
if
(
_socket_
instanceof
SSLSocket
)
{
return
(
(
SSLSocket
)
_socket_
)
.
getEnabledProtocols
(
)
;
}
return
null
;
}
public
boolean
getEnableSessionCreation
(
)
{
if
(
_socket_
instanceof
SSLSocket
)
{
return
(
(
SSLSocket
)
_socket_
)
.
getEnableSessionCreation
(
)
;
}
return
false
;
}
public
HostnameVerifier
getHostnameVerifier
(
)
{
return
hostnameVerifier
;
}
private
KeyManager
getKeyManager
(
)
{
return
keyManager
;
}
public
boolean
getNeedClientAuth
(
)
{
if
(
_socket_
instanceof
SSLSocket
)
{
return
(
(
SSLSocket
)
_socket_
)
.
getNeedClientAuth
(
)
;
}
return
false
;
}
public
TrustManager
getTrustManager
(
)
{
return
trustManager
;
}
public
boolean
getUseClientMode
(
)
{
if
(
_socket_
instanceof
SSLSocket
)
{
return
(
(
SSLSocket
)
_socket_
)
.
getUseClientMode
(
)
;
}
return
false
;
}
public
boolean
getWantClientAuth
(
)
{
if
(
_socket_
instanceof
SSLSocket
)
{
return
(
(
SSLSocket
)
_socket_
)
.
getWantClientAuth
(
)
;
}
return
false
;
}
private
void
initSslContext
(
)
throws
IOException
{
if
(
context
==
null
)
{
context
=
SSLContextUtils
.
createSSLContext
(
protocol
,
getKeyManager
(
)
,
getTrustManager
(
)
)
;
}
}
public
boolean
isEndpointCheckingEnabled
(
)
{
return
tlsEndpointChecking
;
}
private
Socket
openDataSecureConnection
(
String
command
,
String
arg
)
throws
IOException
{
if
(
getDataConnectionMode
(
)
!=
ACTIVE_LOCAL_DATA_CONNECTION_MODE
&&
getDataConnectionMode
(
)
!=
PASSIVE_LOCAL_DATA_CONNECTION_MODE
)
{
return
null
;
}
final
boolean
isInet6Address
=
getRemoteAddress
(
)
instanceof
Inet6Address
;
final
Socket
socket
;
Socket
sslSocket
=
null
;
final
int
soTimeoutMillis
=
DurationUtils
.
toMillisInt
(
getDataTimeout
(
)
)
;
if
(
getDataConnectionMode
(
)
==
ACTIVE_LOCAL_DATA_CONNECTION_MODE
)
{
try
(
final
ServerSocket
server
=
_serverSocketFactory_
.
createServerSocket
(
getActivePort
(
)
,
1
,
getHostAddress
(
)
)
)
{
if
(
isInet6Address
)
{
if
(
!
FTPReply
.
isPositiveCompletion
(
eprt
(
getReportHostAddress
(
)
,
server
.
getLocalPort
(
)
)
)
)
{
return
null
;
}
}
else
if
(
!
FTPReply
.
isPositiveCompletion
(
port
(
getReportHostAddress
(
)
,
server
.
getLocalPort
(
)
)
)
)
{
return
null
;
}
if
(
(
getRestartOffset
(
)
>
0
)
&&
!
restart
(
getRestartOffset
(
)
)
)
{
return
null
;
}
if
(
!
FTPReply
.
isPositivePreliminary
(
sendCommand
(
command
,
arg
)
)
)
{
return
null
;
}
if
(
soTimeoutMillis
>=
0
)
{
server
.
setSoTimeout
(
soTimeoutMillis
)
;
}
socket
=
server
.
accept
(
)
;
if
(
soTimeoutMillis
>=
0
)
{
socket
.
setSoTimeout
(
soTimeoutMillis
)
;
}
if
(
getReceiveDataSocketBufferSize
(
)
>
0
)
{
socket
.
setReceiveBufferSize
(
getReceiveDataSocketBufferSize
(
)
)
;
}
if
(
getSendDataSocketBufferSize
(
)
>
0
)
{
socket
.
setSendBufferSize
(
getSendDataSocketBufferSize
(
)
)
;
}
}
}
else
{
final
boolean
attemptEPSV
=
isUseEPSVwithIPv4
(
)
||
isInet6Address
;
if
(
attemptEPSV
&&
epsv
(
)
==
FTPReply
.
ENTERING_EPSV_MODE
)
{
_parseExtendedPassiveModeReply
(
_replyLines
.
get
(
0
)
)
;
}
else
{
if
(
isInet6Address
)
{
return
null
;
}
if
(
pasv
(
)
!=
FTPReply
.
ENTERING_PASSIVE_MODE
)
{
return
null
;
}
_parsePassiveModeReply
(
_replyLines
.
get
(
0
)
)
;
}
if
(
getProxy
(
)
!=
null
)
{
socket
=
new
Socket
(
getProxy
(
)
)
;
}
else
{
socket
=
_socketFactory_
.
createSocket
(
)
;
}
if
(
getReceiveDataSocketBufferSize
(
)
>
0
)
{
socket
.
setReceiveBufferSize
(
getReceiveDataSocketBufferSize
(
)
)
;
}
if
(
getSendDataSocketBufferSize
(
)
>
0
)
{
socket
.
setSendBufferSize
(
getSendDataSocketBufferSize
(
)
)
;
}
if
(
getPassiveLocalIPAddress
(
)
!=
null
)
{
socket
.
bind
(
new
InetSocketAddress
(
getPassiveLocalIPAddress
(
)
,
0
)
)
;
}
if
(
soTimeoutMillis
>=
0
)
{
socket
.
setSoTimeout
(
soTimeoutMillis
)
;
}
socket
.
connect
(
new
InetSocketAddress
(
getPassiveHost
(
)
,
getPassivePort
(
)
)
,
connectTimeout
)
;
if
(
getProxy
(
)
!=
null
)
{
sslSocket
=
context
.
getSocketFactory
(
)
.
createSocket
(
socket
,
getPassiveHost
(
)
,
getPassivePort
(
)
,
true
)
;
}
if
(
(
getRestartOffset
(
)
>
0
)
&&
!
restart
(
getRestartOffset
(
)
)
)
{
closeSockets
(
socket
,
sslSocket
)
;
return
null
;
}
if
(
!
FTPReply
.
isPositivePreliminary
(
sendCommand
(
command
,
arg
)
)
)
{
closeSockets
(
socket
,
sslSocket
)
;
return
null
;
}
}
if
(
isRemoteVerificationEnabled
(
)
&&
!
verifyRemote
(
socket
)
)
{
final
InetAddress
socketHost
=
socket
.
getInetAddress
(
)
;
closeSockets
(
socket
,
sslSocket
)
;
throw
new
IOException
(
"Host attempting data connection "
+
socketHost
.
getHostAddress
(
)
+
" is not same as server "
+
getRemoteAddress
(
)
.
getHostAddress
(
)
)
;
}
return
getProxy
(
)
!=
null
?
sslSocket
:
socket
;
}
public
byte
[
]
parseADATReply
(
final
String
reply
)
{
if
(
reply
==
null
)
{
return
null
;
}
return
Base64
.
decodeBase64
(
extractPrefixedData
(
"ADAT="
,
reply
)
)
;
}
public
long
parsePBSZ
(
final
long
pbsz
)
throws
SSLException
,
IOException
{
execPBSZ
(
pbsz
)
;
long
minvalue
=
pbsz
;
final
String
remainder
=
extractPrefixedData
(
"PBSZ="
,
getReplyString
(
)
)
;
if
(
remainder
!=
null
)
{
final
long
replysz
=
Long
.
parseLong
(
remainder
)
;
if
(
replysz
<
minvalue
)
{
minvalue
=
replysz
;
}
}
return
minvalue
;
}
@
Override
public
int
sendCommand
(
final
String
command
,
final
String
args
)
throws
IOException
{
final
int
repCode
=
super
.
sendCommand
(
command
,
args
)
;
if
(
CMD_CCC
.
equals
(
command
)
)
{
if
(
FTPReply
.
COMMAND_OK
!=
repCode
)
{
throw
new
SSLException
(
getReplyString
(
)
)
;
}
_socket_
.
close
(
)
;
_socket_
=
plainSocket
;
_controlInput_
=
new
BufferedReader
(
new
InputStreamReader
(
_socket_
.
getInputStream
(
)
,
getControlEncoding
(
)
)
)
;
_controlOutput_
=
new
BufferedWriter
(
new
OutputStreamWriter
(
_socket_
.
getOutputStream
(
)
,
getControlEncoding
(
)
)
)
;
}
return
repCode
;
}
public
void
setAuthValue
(
final
String
auth
)
{
this
.
auth
=
auth
;
}
public
void
setEnabledCipherSuites
(
final
String
[
]
cipherSuites
)
{
suites
=
cipherSuites
.
clone
(
)
;
}
public
void
setEnabledProtocols
(
final
String
[
]
protocolVersions
)
{
protocols
=
protocolVersions
.
clone
(
)
;
}
public
void
setEnabledSessionCreation
(
final
boolean
isCreation
)
{
this
.
isCreation
=
isCreation
;
}
public
void
setEndpointCheckingEnabled
(
final
boolean
enable
)
{
tlsEndpointChecking
=
enable
;
}
public
void
setHostnameVerifier
(
final
HostnameVerifier
newHostnameVerifier
)
{
hostnameVerifier
=
newHostnameVerifier
;
}
public
void
setKeyManager
(
final
KeyManager
keyManager
)
{
this
.
keyManager
=
keyManager
;
}
public
void
setNeedClientAuth
(
final
boolean
isNeedClientAuth
)
{
this
.
isNeedClientAuth
=
isNeedClientAuth
;
}
public
void
setTrustManager
(
final
TrustManager
trustManager
)
{
this
.
trustManager
=
trustManager
;
}
public
void
setUseClientMode
(
final
boolean
isClientMode
)
{
this
.
isClientMode
=
isClientMode
;
}
public
void
setWantClientAuth
(
final
boolean
isWantClientAuth
)
{
this
.
isWantClientAuth
=
isWantClientAuth
;
}
protected
void
sslNegotiation
(
)
throws
IOException
{
plainSocket
=
_socket_
;
initSslContext
(
)
;
final
SSLSocket
socket
=
createSSLSocket
(
_socket_
)
;
socket
.
setEnableSessionCreation
(
isCreation
)
;
socket
.
setUseClientMode
(
isClientMode
)
;
if
(
isClientMode
)
{
if
(
tlsEndpointChecking
)
{
SSLSocketUtils
.
enableEndpointNameVerification
(
socket
)
;
}
}
else
{
socket
.
setNeedClientAuth
(
isNeedClientAuth
)
;
socket
.
setWantClientAuth
(
isWantClientAuth
)
;
}
if
(
protocols
!=
null
)
{
socket
.
setEnabledProtocols
(
protocols
)
;
}
if
(
suites
!=
null
)
{
socket
.
setEnabledCipherSuites
(
suites
)
;
}
socket
.
startHandshake
(
)
;
_socket_
=
socket
;
_controlInput_
=
new
BufferedReader
(
new
InputStreamReader
(
socket
.
getInputStream
(
)
,
getControlEncoding
(
)
)
)
;
_controlOutput_
=
new
BufferedWriter
(
new
OutputStreamWriter
(
socket
.
getOutputStream
(
)
,
getControlEncoding
(
)
)
)
;
if
(
isClientMode
&&
(
hostnameVerifier
!=
null
&&
!
hostnameVerifier
.
verify
(
_hostname_
,
socket
.
getSession
(
)
)
)
)
{
throw
new
SSLHandshakeException
(
"Hostname doesn't match certificate"
)
;
}
}
}
<EOF>
