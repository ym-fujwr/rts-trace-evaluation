package
org
.
apache
.
commons
.
net
.
io
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
IOException
;
import
java
.
io
.
Reader
;
import
org
.
apache
.
commons
.
net
.
util
.
NetConstants
;
public
final
class
DotTerminatedMessageReader
extends
BufferedReader
{
private
static
final
char
LF
=
'\n'
;
private
static
final
char
CR
=
'\r'
;
private
static
final
int
DOT
=
'.'
;
private
boolean
atBeginning
;
private
boolean
eof
;
private
boolean
seenCR
;
public
DotTerminatedMessageReader
(
final
Reader
reader
)
{
super
(
reader
)
;
atBeginning
=
true
;
eof
=
false
;
}
@
Override
public
void
close
(
)
throws
IOException
{
synchronized
(
lock
)
{
if
(
!
eof
)
{
while
(
read
(
)
!=
-
1
)
{
}
}
eof
=
true
;
atBeginning
=
false
;
}
}
@
Override
public
int
read
(
)
throws
IOException
{
synchronized
(
lock
)
{
if
(
eof
)
{
return
NetConstants
.
EOS
;
}
int
chint
=
super
.
read
(
)
;
if
(
chint
==
NetConstants
.
EOS
)
{
eof
=
true
;
return
NetConstants
.
EOS
;
}
if
(
atBeginning
)
{
atBeginning
=
false
;
if
(
chint
==
DOT
)
{
mark
(
2
)
;
chint
=
super
.
read
(
)
;
switch
(
chint
)
{
case
NetConstants
.
EOS
:
eof
=
true
;
return
DOT
;
case
DOT
:
return
chint
;
case
CR
:
chint
=
super
.
read
(
)
;
if
(
chint
==
NetConstants
.
EOS
)
{
reset
(
)
;
return
DOT
;
}
if
(
chint
==
LF
)
{
atBeginning
=
true
;
eof
=
true
;
return
NetConstants
.
EOS
;
}
break
;
default
:
break
;
}
reset
(
)
;
return
DOT
;
}
}
if
(
seenCR
)
{
seenCR
=
false
;
if
(
chint
==
LF
)
{
atBeginning
=
true
;
}
}
if
(
chint
==
CR
)
{
seenCR
=
true
;
}
return
chint
;
}
}
@
Override
public
int
read
(
final
char
[
]
buffer
)
throws
IOException
{
return
read
(
buffer
,
0
,
buffer
.
length
)
;
}
@
Override
public
int
read
(
final
char
[
]
buffer
,
int
offset
,
int
length
)
throws
IOException
{
if
(
length
<
1
)
{
return
0
;
}
int
ch
;
synchronized
(
lock
)
{
if
(
(
ch
=
read
(
)
)
==
-
1
)
{
return
NetConstants
.
EOS
;
}
final
int
off
=
offset
;
do
{
buffer
[
offset
++
]
=
(
char
)
ch
;
}
while
(
--
length
>
0
&&
(
ch
=
read
(
)
)
!=
-
1
)
;
return
offset
-
off
;
}
}
@
Override
public
String
readLine
(
)
throws
IOException
{
final
StringBuilder
sb
=
new
StringBuilder
(
)
;
int
intch
;
synchronized
(
lock
)
{
while
(
(
intch
=
read
(
)
)
!=
NetConstants
.
EOS
)
{
if
(
intch
==
LF
&&
atBeginning
)
{
return
sb
.
substring
(
0
,
sb
.
length
(
)
-
1
)
;
}
sb
.
append
(
(
char
)
intch
)
;
}
}
final
String
string
=
sb
.
toString
(
)
;
if
(
string
.
isEmpty
(
)
)
{
return
null
;
}
return
string
;
}
}
<EOF>
