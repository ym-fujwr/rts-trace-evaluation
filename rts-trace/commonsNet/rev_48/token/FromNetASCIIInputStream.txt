package
org
.
apache
.
commons
.
net
.
io
;
import
org
.
apache
.
commons
.
net
.
util
.
NetConstants
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
PushbackInputStream
;
import
java
.
nio
.
charset
.
StandardCharsets
;
public
final
class
FromNetASCIIInputStream
extends
PushbackInputStream
{
static
final
boolean
_noConversionRequired
;
static
final
String
_lineSeparator
;
static
final
byte
[
]
_lineSeparatorBytes
;
static
{
_lineSeparator
=
System
.
getProperty
(
"line.separator"
)
;
_noConversionRequired
=
_lineSeparator
.
equals
(
"\r\n"
)
;
_lineSeparatorBytes
=
_lineSeparator
.
getBytes
(
StandardCharsets
.
US_ASCII
)
;
}
public
static
boolean
isConversionRequired
(
)
{
return
!
_noConversionRequired
;
}
private
int
length
;
public
FromNetASCIIInputStream
(
final
InputStream
input
)
{
super
(
input
,
_lineSeparatorBytes
.
length
+
1
)
;
}
@
Override
public
int
available
(
)
throws
IOException
{
if
(
in
==
null
)
{
throw
new
IOException
(
"Stream closed"
)
;
}
return
buf
.
length
-
pos
+
in
.
available
(
)
;
}
@
Override
public
int
read
(
)
throws
IOException
{
if
(
_noConversionRequired
)
{
return
super
.
read
(
)
;
}
return
readInt
(
)
;
}
@
Override
public
int
read
(
final
byte
buffer
[
]
)
throws
IOException
{
return
read
(
buffer
,
0
,
buffer
.
length
)
;
}
@
Override
public
int
read
(
final
byte
buffer
[
]
,
int
offset
,
final
int
length
)
throws
IOException
{
if
(
_noConversionRequired
)
{
return
super
.
read
(
buffer
,
offset
,
length
)
;
}
if
(
length
<
1
)
{
return
0
;
}
int
ch
;
final
int
off
;
ch
=
available
(
)
;
this
.
length
=
Math
.
min
(
length
,
ch
)
;
if
(
this
.
length
<
1
)
{
this
.
length
=
1
;
}
if
(
(
ch
=
readInt
(
)
)
==
-
1
)
{
return
NetConstants
.
EOS
;
}
off
=
offset
;
do
{
buffer
[
offset
++
]
=
(
byte
)
ch
;
}
while
(
--
this
.
length
>
0
&&
(
ch
=
readInt
(
)
)
!=
-
1
)
;
return
offset
-
off
;
}
private
int
readInt
(
)
throws
IOException
{
int
ch
;
ch
=
super
.
read
(
)
;
if
(
ch
==
'\r'
)
{
ch
=
super
.
read
(
)
;
if
(
ch
!=
'\n'
)
{
if
(
ch
!=
-
1
)
{
unread
(
ch
)
;
}
return
'\r'
;
}
unread
(
_lineSeparatorBytes
)
;
ch
=
super
.
read
(
)
;
--
length
;
}
return
ch
;
}
}
<EOF>
