package
org
.
apache
.
commons
.
net
.
telnet
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
OutputStream
;
import
junit
.
framework
.
TestCase
;
public
class
TelnetClientFunctionalTest
extends
TestCase
{
protected
TelnetClient
tc1
;
@
Override
protected
void
setUp
(
)
{
tc1
=
new
TelnetClient
(
)
;
}
public
void
testFunctionalTest
(
)
throws
Exception
{
boolean
testresult
=
false
;
tc1
.
connect
(
"rainmaker.wunderground.com"
,
3000
)
;
try
(
final
InputStream
is
=
tc1
.
getInputStream
(
)
;
final
OutputStream
os
=
tc1
.
getOutputStream
(
)
)
{
boolean
cont
=
waitForString
(
is
,
"Return to continue:"
,
30000
)
;
if
(
cont
)
{
os
.
write
(
"\n"
.
getBytes
(
)
)
;
os
.
flush
(
)
;
cont
=
waitForString
(
is
,
"city code--"
,
30000
)
;
}
if
(
cont
)
{
os
.
write
(
"LAX\n"
.
getBytes
(
)
)
;
os
.
flush
(
)
;
cont
=
waitForString
(
is
,
"Los Angeles"
,
30000
)
;
}
if
(
cont
)
{
cont
=
waitForString
(
is
,
"X to exit:"
,
30000
)
;
}
if
(
cont
)
{
os
.
write
(
"X\n"
.
getBytes
(
)
)
;
os
.
flush
(
)
;
tc1
.
disconnect
(
)
;
testresult
=
true
;
}
assertTrue
(
testresult
)
;
}
}
public
boolean
waitForString
(
final
InputStream
is
,
final
String
end
,
final
long
timeout
)
throws
Exception
{
final
byte
buffer
[
]
=
new
byte
[
32
]
;
final
long
starttime
=
System
.
currentTimeMillis
(
)
;
String
readbytes
=
""
;
while
(
(
readbytes
.
indexOf
(
end
)
<
0
)
&&
(
(
System
.
currentTimeMillis
(
)
-
starttime
)
<
timeout
)
)
{
if
(
is
.
available
(
)
>
0
)
{
final
int
ret_read
=
is
.
read
(
buffer
)
;
readbytes
=
readbytes
+
new
String
(
buffer
,
0
,
ret_read
)
;
}
else
{
Thread
.
sleep
(
500
)
;
}
}
if
(
readbytes
.
indexOf
(
end
)
>=
0
)
{
return
(
true
)
;
}
return
(
false
)
;
}
}
<EOF>
