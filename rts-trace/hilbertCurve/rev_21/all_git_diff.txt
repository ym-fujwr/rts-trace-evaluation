diff --git a/src/main/java/org/davidmoten/hilbert/Node.java b/src/main/java/org/davidmoten/hilbert/Node.java
new file mode 100644
index 0000000..16b99dc
--- /dev/null
+++ b/src/main/java/org/davidmoten/hilbert/Node.java
@@ -0,0 +1,82 @@
+package org.davidmoten.hilbert;
+
+import com.github.davidmoten.guavamini.Preconditions;
+
+// NotThreadSafe
+final class Node implements Comparable<Node> {
+
+    private static long counter = 0;
+
+    private final long id;
+    final Range value;
+    private Node next;
+    private Node previous;
+    private long distanceToPrevious;
+
+    Node(Range value) {
+        this.value = value;
+        this.id = counter++;
+    }
+
+    Node next() {
+        return next;
+    }
+
+    Node previous() {
+        return previous;
+    }
+
+    Node setNext(Node next) {
+        Preconditions.checkNotNull(next);
+        Preconditions.checkArgument(next != this);
+        this.next = next;
+        next.distanceToPrevious = value.low() - next.value.high();
+        next.previous = this;
+        return this;
+    }
+
+    Node insert(Range value) {
+        Node n = new Node(value);
+        n.next = this;
+        previous = n;
+        return n;
+    }
+
+    @Override
+    public int compareTo(Node o) {
+        if (this == o) {
+            return 0;
+        } else {
+            if (next == null) {
+                return -1;
+            }
+            long x = distanceToPrevious;
+            long y = o.distanceToPrevious;
+            if (x < y) {
+                return -1;
+            } else if (x == y) {
+                return Long.compare(id, o.id);
+            } else {
+                return 1;
+            }
+        }
+    }
+
+    @Override
+    public String toString() {
+        return "Node [value=" + value + ", next=" + next + ", previous=" + previous + "]";
+    }
+
+    public void setDistanceToPrevious(long distance) {
+        this.distanceToPrevious = distance;
+    }
+
+    public void clearNext() {
+        next = null;
+    }
+    
+    public void clearPrevious() {
+        previous = null;
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/java/org/davidmoten/hilbert/Ranges2.java b/src/main/java/org/davidmoten/hilbert/Ranges2.java
index 09232ed..b7b00d4 100644
--- a/src/main/java/org/davidmoten/hilbert/Ranges2.java
+++ b/src/main/java/org/davidmoten/hilbert/Ranges2.java
@@ -2,0 +3 @@ package org.davidmoten.hilbert;
+import java.util.Iterator;
@@ -7 +8,2 @@ import com.github.davidmoten.guavamini.Preconditions;
-public class Ranges2 {
+// NotThreadSafe
+public class Ranges2 implements Iterable<Range>{
@@ -25,2 +27 @@ public class Ranges2 {
-        System.out.println("adding " + r);
-        ranges = insert(ranges, r);
+        Node node = new Node(r);
@@ -28,2 +29,7 @@ public class Ranges2 {
-        if (ranges.next != null) {
-            // if there are at least two ranges
+        if (ranges == null) {
+            ranges = node;
+        } else {
+            // and set new head and recalculate distance for ranges
+            node.setNext(ranges);
+
+            // add old head to set
@@ -30,0 +37,3 @@ public class Ranges2 {
+
+            ranges = node;
+
@@ -32,27 +41,2 @@ public class Ranges2 {
-                // join the range with the smallest distance to next
-                Node x = set.first();
-                System.out.println("first = " + x.value);
-                Node next = x.next();
-                Node y = new Node(x.value.join(next.value));
-                y.setNext(next.next());
-                if (x.previous() == null) {
-                    ranges = y;
-                } else {
-                    x.previous.setNext(y);
-                    y.setPrevious(x.previous);
-                }
-                // x has been replaced now so null its references for the joy of gc (I remember
-                // some old/new generation gc problem with linked lists that was fixed by doing
-                // this)
-                x.setNext(null);
-                x.setPrevious (null);
-
-                // remove x (its old distance was used for sorting)
-                System.out.println("removing " + x);
-                set.remove(x);
-                // add y as replacement for x
-                set.add(y);
-                count--;
-            }
-        }
-    }
+                // remove node from set with least distance to next node
+                Node first = set.pollFirst();
@@ -60,7 +44,2 @@ public class Ranges2 {
-    private static Node insert(Node ranges, Range r) {
-        if (ranges == null) {
-            return new Node(r);
-        } else {
-            return ranges.insert(r);
-        }
-    }
+                // replace that node in linked list (ranges) with a new Node
+                // that has the concatenation of that node with previous node's range
@@ -68,34 +47,8 @@ public class Ranges2 {
-    // NotThreadSafe
-    private static final class Node implements Comparable<Node> {
-        
-        private static long counter = 0;
-        
-        final Range value;
-        private Node next;
-        private Node previous;
-        private final long id;
-
-        Node(Range value) {
-            this.value = value;
-            this.id = counter++;
-        }
-        
-        Node next() {
-            return next;
-        }
-        
-        Node previous() {
-            return previous;
-        }
-        
-        Node setNext(Node next) {
-            Preconditions.checkArgument(next != this);
-            this.next = next;
-            return this;
-        }
-        
-        Node setPrevious(Node previous) {
-            Preconditions.checkArgument(previous != this);
-            this.previous = previous;
-            return this;
-        }
+                // first.previous will not be null because distance was present to be in set
+                Range joined = first.value.join(first.previous().value);
+                Node n = new Node(joined);
+                // link and recalculate distance (won't change because the lower bound of the
+                // new ranges is the same as the lower bound of the range of first)
+                n.setNext(first.next());
+                //link and calculate the distance for n
+                first.previous().setNext(n);
@@ -103,6 +56,4 @@ public class Ranges2 {
-        Node insert(Range value) {
-            Node n = new Node(value);
-            n.next = this;
-            previous = n;
-            return n;
-        }
+                // clear pointers from first to help gc out
+                // there new gen to old gen promotion can cause problems
+                first.clearNext();
+                first.clearPrevious();
@@ -110,17 +60,0 @@ public class Ranges2 {
-        @Override
-        public int compareTo(Node o) {
-            if (this == o) {
-                return 0;
-            } else {
-                if (next == null) {
-                    return -1;
-                }
-                long x = next.value.low() - value.high();
-                long y = o.next.value.low() - o.value.high();
-                if (x < y) {
-                    return -1;
-                } else if (x == y) {
-                    return Long.compare(id, o.id);
-                } else {
-                    return 1;
-                }
@@ -128,0 +63 @@ public class Ranges2 {
+    }
@@ -130,5 +65,19 @@ public class Ranges2 {
-        @Override
-        public String toString() {
-            return "Node [value=" + value + ", next=" + next + ", previous=" + previous + "]";
-        }
-        
+    @Override
+    public Iterator<Range> iterator() {
+        return new Iterator<Range>() {
+            
+            Node r = ranges;
+
+            @Override
+            public boolean hasNext() {
+                return r != null;
+            }
+
+            @Override
+            public Range next() {
+                Range v = r.value;
+                r = r.next();
+                return v;
+            }
+            
+        };
@@ -136,0 +86 @@ public class Ranges2 {
+    
diff --git a/src/test/java/org/davidmoten/hilbert/Ranges2Test.java b/src/test/java/org/davidmoten/hilbert/Ranges2Test.java
new file mode 100644
index 0000000..7223a12
--- /dev/null
+++ b/src/test/java/org/davidmoten/hilbert/Ranges2Test.java
@@ -0,0 +1,20 @@
+package org.davidmoten.hilbert;
+
+import org.junit.Test;
+
+public class Ranges2Test {
+
+    @Test
+    public void testRemovesCorrectRange() {
+
+        Ranges2 r = new Ranges2(2);
+        r.add(Range.create(1));
+        r.add(Range.create(10));
+        r.add(Range.create(11));
+        r.add(Range.create(12));
+
+        r.forEach(System.out::println);
+
+    }
+
+}
