package
org
.
davidmoten
.
hilbert
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
TreeSet
;
import
com
.
github
.
davidmoten
.
guavamini
.
Preconditions
;
public
class
Ranges2
implements
Iterable
<
Range
>
{
private
final
int
bufferSize
;
private
final
TreeSet
<
Node
>
set
;
private
Node
ranges
;
private
int
count
;
public
Ranges2
(
int
bufferSize
)
{
Preconditions
.
checkArgument
(
bufferSize
>
1
)
;
this
.
bufferSize
=
bufferSize
;
this
.
ranges
=
null
;
this
.
set
=
new
TreeSet
<
>
(
)
;
}
public
void
add
(
Range
r
)
{
Preconditions
.
checkArgument
(
ranges
==
null
||
ranges
.
value
.
high
(
)
<
r
.
low
(
)
)
;
Node
node
=
new
Node
(
r
)
;
count
++
;
if
(
ranges
==
null
)
{
ranges
=
node
;
}
else
{
node
.
setNext
(
ranges
)
;
set
.
add
(
ranges
)
;
ranges
=
node
;
if
(
count
>
bufferSize
)
{
Node
first
=
set
.
pollFirst
(
)
;
Range
joined
=
first
.
value
.
join
(
first
.
previous
(
)
.
value
)
;
Node
n
=
new
Node
(
joined
)
;
n
.
setNext
(
first
.
next
(
)
)
;
first
.
previous
(
)
.
setNext
(
n
)
;
first
.
clearNext
(
)
;
first
.
clearPrevious
(
)
;
}
}
}
@
Override
public
Iterator
<
Range
>
iterator
(
)
{
return
new
Iterator
<
Range
>
(
)
{
Node
r
=
ranges
;
@
Override
public
boolean
hasNext
(
)
{
return
r
!=
null
;
}
@
Override
public
Range
next
(
)
{
Range
v
=
r
.
value
;
r
=
r
.
next
(
)
;
return
v
;
}
}
;
}
}
<EOF>
