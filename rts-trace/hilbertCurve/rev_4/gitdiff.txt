diff --git a/src/main/java/org/davidmoten/hilbert/internal/util/BoundedPriorityQueue.java b/src/main/java/org/davidmoten/hilbert/internal/util/BoundedPriorityQueue.java
deleted file mode 100644
index 06b108b..0000000
--- a/src/main/java/org/davidmoten/hilbert/internal/util/BoundedPriorityQueue.java
+++ /dev/null
@@ -1,94 +0,0 @@
-package org.davidmoten.hilbert.internal.util;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.List;
-import java.util.PriorityQueue;
-
-import org.davidmoten.hilbert.internal.util.BoundedPriorityQueue;
-
-import com.github.davidmoten.guavamini.Preconditions;
-
-public final class BoundedPriorityQueue<T> {
-
-    private final PriorityQueue<T> queue; /* backing data structure */
-    private final Comparator<? super T> comparator;
-    private final int maxSize;
-
-    /**
-     * Constructs a {@link BoundedPriorityQueue} with the specified
-     * {@code maxSize} and {@code comparator}.
-     *
-     * @param maxSize
-     *            - The maximum size the queue can reach, must be a positive
-     *            integer.
-     * @param comparator
-     *            - The comparator to be used to compare the elements in the
-     *            queue, must be non-null.
-     */
-    public BoundedPriorityQueue(final int maxSize, final Comparator<? super T> comparator) {
-        Preconditions.checkArgument(maxSize > 0, "maxSize must be > 0");
-        Preconditions.checkNotNull(comparator, "comparator cannot be null");
-        this.queue = new PriorityQueue<T>(reverse(comparator));
-        this.comparator = comparator;
-        this.maxSize = maxSize;
-    }
-
-    private static <T> Comparator<T> reverse(final Comparator<T> comparator) {
-        return new Comparator<T>() {
-
-            @Override
-            public int compare(T o1, T o2) {
-                return comparator.compare(o2, o1);
-            }
-        };
-    }
-
-    public static <T> BoundedPriorityQueue<T> create(final int maxSize,
-            final Comparator<? super T> comparator) {
-        return new BoundedPriorityQueue<T>(maxSize, comparator);
-    }
-
-    /**
-     * Adds an element to the queue. If the queue contains {@code maxSize}
-     * elements, {@code e} will be compared to the lowest element in the queue
-     * using {@code comparator}. If {@code e} is greater than or equal to the
-     * lowest element, that element will be removed and {@code e} will be added
-     * instead. Otherwise, the queue will not be modified and {@code e} will not
-     * be added.
-     *
-     * @param t
-     *            - Element to be added, must be non-null.
-     */
-    public void add(final T t) {
-        if (t == null) {
-            throw new NullPointerException("cannot add null to the queue");
-        }
-        if (queue.size() >= maxSize) {
-            final T maxElement = queue.peek();
-            if (comparator.compare(maxElement, t) < 1) {
-                return;
-            } else {
-                queue.poll();
-            }
-        }
-        queue.add(t);
-    }
-    
-    /**
-     * @return Returns a view of the queue as a
-     *         {@link Collections#unmodifiableList(java.util.List)}
-     *         unmodifiableList sorted in reverse order.
-     */
-    public List<T> asList() {
-        return Collections.unmodifiableList(new ArrayList<T>(queue));
-    }
-
-    public List<T> asOrderedList() {
-        List<T> list = new ArrayList<T>(queue);
-        Collections.sort(list, comparator);
-        return list;
-    }
-
-}
\ No newline at end of file
diff --git a/src/test/java/org/davidmoten/hilbert/internal/util/BoundedPriorityQueueTest.java b/src/test/java/org/davidmoten/hilbert/internal/util/BoundedPriorityQueueTest.java
deleted file mode 100644
index 652c015..0000000
--- a/src/test/java/org/davidmoten/hilbert/internal/util/BoundedPriorityQueueTest.java
+++ /dev/null
@@ -1,140 +0,0 @@
-package org.davidmoten.hilbert.internal.util;
-
-import static org.davidmoten.hilbert.internal.util.BoundedPriorityQueue.create;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-import java.util.Comparator;
-
-import org.junit.Test;
-
-import com.github.davidmoten.guavamini.Sets;
-
-public class BoundedPriorityQueueTest {
-
-    private static final Comparator<Integer> comparator = new Comparator<Integer>() {
-
-        @Override
-        public int compare(Integer o1, Integer o2) {
-            return o1.compareTo(o2);
-        }
-    };
-
-    @Test
-    public void emptyQueueAsListIsEmpty() {
-        BoundedPriorityQueue<Integer> q = create(2, comparator);
-        assertTrue(q.asList().isEmpty());
-    }
-
-    @Test
-    public void singleItemReturnsSingleItem() {
-        BoundedPriorityQueue<Integer> q = create(2, comparator);
-        q.add(1);
-        assertEquals(Sets.newHashSet(1), Sets.newHashSet(q.asList()));
-    }
-
-    @Test
-    public void twoItemsReturnsSingleItemWhenMaxIsOne() {
-        BoundedPriorityQueue<Integer> q = create(1, comparator);
-        q.add(1);
-        q.add(2);
-        assertEquals(Sets.newHashSet(1), Sets.newHashSet(q.asList()));
-    }
-
-    @Test
-    public void twoItemsReturnsSingleItemWhenMaxIsOneInputOrderFlipped() {
-        BoundedPriorityQueue<Integer> q = create(1, comparator);
-        q.add(2);
-        q.add(1);
-        assertEquals(Sets.newHashSet(1), Sets.newHashSet(q.asList()));
-    }
-
-    @Test
-    public void threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderFlipped() {
-        BoundedPriorityQueue<Integer> q = create(2, comparator);
-        q.add(3);
-        q.add(2);
-        q.add(1);
-        assertEquals(Sets.newHashSet(1, 2), Sets.newHashSet(q.asList()));
-    }
-
-    @Test
-    public void threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderIncreasing() {
-        BoundedPriorityQueue<Integer> q = create(2, comparator);
-        q.add(1);
-        q.add(2);
-        q.add(3);
-        assertEquals(Sets.newHashSet(1, 2), Sets.newHashSet(q.asList()));
-    }
-
-    @Test
-    public void threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderMixed() {
-        BoundedPriorityQueue<Integer> q = create(2, comparator);
-        q.add(3);
-        q.add(1);
-        q.add(2);
-        assertEquals(Sets.newHashSet(1, 2), Sets.newHashSet(q.asList()));
-    }
-
-    @Test
-    public void threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderMixed2() {
-        BoundedPriorityQueue<Integer> q = create(2, comparator);
-        q.add(1);
-        q.add(3);
-        q.add(2);
-        assertEquals(Sets.newHashSet(1, 2), Sets.newHashSet(q.asList()));
-    }
-
-    @Test
-    public void threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderFlipped() {
-        BoundedPriorityQueue<Integer> q = create(10, comparator);
-        q.add(3);
-        q.add(2);
-        q.add(1);
-        assertEquals(Sets.newHashSet(1, 2, 3), Sets.newHashSet(q.asList()));
-    }
-
-    @Test
-    public void threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderIncreasing() {
-        BoundedPriorityQueue<Integer> q = create(10, comparator);
-        q.add(1);
-        q.add(2);
-        q.add(3);
-        assertEquals(Sets.newHashSet(1, 2, 3), Sets.newHashSet(q.asList()));
-    }
-
-    @Test
-    public void threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderMixed() {
-        BoundedPriorityQueue<Integer> q = create(10, comparator);
-        q.add(3);
-        q.add(1);
-        q.add(2);
-        assertEquals(Sets.newHashSet(1, 2, 3), Sets.newHashSet(q.asList()));
-    }
-
-    @Test
-    public void threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderMixed2() {
-        BoundedPriorityQueue<Integer> q = create(10, comparator);
-        q.add(1);
-        q.add(3);
-        q.add(2);
-        assertEquals(Sets.newHashSet(1, 2, 3), Sets.newHashSet(q.asList()));
-    }
-    
-    @Test(expected=IllegalArgumentException.class)
-    public void testInstantiateWithNegativeSizeThrowsIAE() {
-        create(-1, comparator);
-    }
-    
-    @Test(expected=IllegalArgumentException.class)
-    public void testInstantiateWithZeroSizeThrowsIAE() {
-        create(0, comparator);
-    }
-
-    @Test(expected=NullPointerException.class)
-    public void testAddNullThrowsNPE() {
-        BoundedPriorityQueue<Integer> q = create(10, comparator);
-        q.add(null);
-    }
-    
-}
