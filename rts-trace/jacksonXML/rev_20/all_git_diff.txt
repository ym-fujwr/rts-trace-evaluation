diff --git a/release-notes/CREDITS-2.x b/release-notes/CREDITS-2.x
index 7fedf40f2..4e28a8c3e 100644
--- a/release-notes/CREDITS-2.x
+++ b/release-notes/CREDITS-2.x
@@ -220,0 +221 @@ Joo Hyuk Kim (JooHyukKim@github)
+PJ Fanning (pjfanning@github)
@@ -221,0 +223,3 @@ Joo Hyuk Kim (JooHyukKim@github)
+* Contributed fix for #533: (Android) java.lang.NoClassDefFoundError: Failed resolution
+   of: Ljavax/xml/stream/XMLInputFactory
+ (2.15.0)
diff --git a/release-notes/VERSION-2.x b/release-notes/VERSION-2.x
index f3cd82380..f696d9016 100644
--- a/release-notes/VERSION-2.x
+++ b/release-notes/VERSION-2.x
@@ -8,0 +9,4 @@ Project: jackson-dataformat-xml
+#533: (Android) java.lang.NoClassDefFoundError: Failed resolution
+   of: Ljavax/xml/stream/XMLInputFactory
+ (reported by @clashcaddie)
+ (fix contributed by @pjfanning)
diff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/JsonAppend508Test.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/JsonAppend508Test.java
new file mode 100644
index 000000000..fe4d032f1
--- /dev/null
+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/JsonAppend508Test.java
@@ -0,0 +1,58 @@
+package com.fasterxml.jackson.dataformat.xml.failing;
+
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.*;
+import com.fasterxml.jackson.databind.annotation.JsonAppend;
+import com.fasterxml.jackson.databind.cfg.MapperConfig;
+import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
+import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
+import com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter;
+import com.fasterxml.jackson.databind.util.Annotations;
+import com.fasterxml.jackson.dataformat.xml.XmlMapper;
+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;
+
+public class JsonAppend508Test extends XmlTestBase
+{
+    // [dataformat-xml#508]: Duplication of virtual properties
+    @JsonAppend(props = @JsonAppend.Prop(name = "virtual", value = MyVirtualPropertyWriter.class))
+    public static class Pojo508 {
+        private final String name;
+
+        public Pojo508(String name) {
+            this.name = name;
+        }
+        public String getName() {
+            return name;
+        }
+    }
+
+    static class MyVirtualPropertyWriter extends VirtualBeanPropertyWriter {
+        private static final long serialVersionUID = 1L;
+
+        public MyVirtualPropertyWriter() {}
+
+        protected MyVirtualPropertyWriter(BeanPropertyDefinition propDef, Annotations contextAnnotations,
+                                          JavaType declaredType) {
+            super(propDef, contextAnnotations, declaredType);
+        }
+
+        @Override
+        protected Object value(Object bean, JsonGenerator g, SerializerProvider prov) {
+            return "bar";
+        }
+
+        @Override
+        public VirtualBeanPropertyWriter withConfig(MapperConfig<?> config, AnnotatedClass declaringClass,
+                BeanPropertyDefinition propDef, JavaType type) {
+            return new MyVirtualPropertyWriter(propDef, declaringClass.getAnnotations(), type);
+        }
+    }
+
+    private final XmlMapper MAPPER = newMapper();
+
+    // [dataformat-xml#508]: Duplication of virtual properties
+    public void testJsonAppend() throws Exception {
+        String xml = MAPPER.writeValueAsString(new Pojo508("foo"));
+        assertEquals("<Pojo><name>foo</name><virtual>bar</virtual></Pojo>",xml);
+    }
+}
