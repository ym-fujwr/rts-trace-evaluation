package
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
deser
;
import
com
.
fasterxml
.
jackson
.
annotation
.
JsonRootName
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
XmlMapper
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
XmlTestBase
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
annotation
.
JacksonXmlProperty
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
annotation
.
JacksonXmlText
;
public
class
TestDeserialization
extends
XmlTestBase
{
static
class
AttributeBean
{
@
JacksonXmlProperty
(
isAttribute
=
true
,
localName
=
"attr"
)
public
String
text
=
"?"
;
}
static
class
Optional
{
@
JacksonXmlText
public
String
number
=
"NOT SET"
;
public
String
type
=
"NOT SET"
;
}
static
class
Worker219
{
@
JacksonXmlProperty
(
localName
=
"developer"
)
String
developer
;
@
JacksonXmlProperty
(
localName
=
"tester"
)
String
tester
;
@
JacksonXmlProperty
(
localName
=
"manager"
)
String
manager
;
}
@
JsonRootName
(
"line"
)
static
class
Line219
{
public
String
code
;
public
String
amount
;
}
private
final
XmlMapper
MAPPER
=
newMapper
(
)
;
public
void
testRoundTripWithJacksonExample
(
)
throws
Exception
{
FiveMinuteUser
user
=
new
FiveMinuteUser
(
"Joe"
,
"Sixpack"
,
true
,
FiveMinuteUser
.
Gender
.
MALE
,
new
byte
[
]
{
1
,
2
,
3
,
4
,
5
}
)
;
String
xml
=
MAPPER
.
writeValueAsString
(
user
)
;
FiveMinuteUser
result
=
MAPPER
.
readValue
(
xml
,
FiveMinuteUser
.
class
)
;
assertEquals
(
user
,
result
)
;
}
public
void
testFromAttribute
(
)
throws
Exception
{
AttributeBean
bean
=
MAPPER
.
readValue
(
"<AttributeBean attr=\"abc\"></AttributeBean>"
,
AttributeBean
.
class
)
;
assertNotNull
(
bean
)
;
assertEquals
(
"abc"
,
bean
.
text
)
;
}
public
void
testOptionalAttr
(
)
throws
Exception
{
Optional
ob
=
MAPPER
.
readValue
(
"<Optional type='work'>123-456-7890</Optional>"
,
Optional
.
class
)
;
assertNotNull
(
ob
)
;
assertEquals
(
"123-456-7890"
,
ob
.
number
)
;
assertEquals
(
"work"
,
ob
.
type
)
;
}
public
void
testWithAttribute219Worker
(
)
throws
Exception
{
final
String
DOC
=
"<worker>\n"
+
"  <developer>test1</developer>\n"
+
"  <tester grade='senior'>test2</tester>\n"
+
"  <manager>test3</manager>\n"
+
"</worker>"
;
Worker219
result
=
MAPPER
.
readValue
(
DOC
,
Worker219
.
class
)
;
assertNotNull
(
result
)
;
assertEquals
(
"test3"
,
result
.
manager
)
;
}
public
void
testWithAttribute219Line
(
)
throws
Exception
{
final
String
DOC
=
"<line>\n"
+
"    <code type='ABC'>qsd</code>\n"
+
"    <amount>138</amount>\n"
+
"</line>"
;
Line219
result
=
MAPPER
.
readValue
(
DOC
,
Line219
.
class
)
;
assertNotNull
(
result
)
;
assertEquals
(
"138"
,
result
.
amount
)
;
}
}
<EOF>
