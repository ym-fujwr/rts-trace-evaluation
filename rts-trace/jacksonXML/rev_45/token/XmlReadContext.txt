package
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
deser
;
import
java
.
util
.
Set
;
import
com
.
fasterxml
.
jackson
.
core
.
*
;
import
com
.
fasterxml
.
jackson
.
core
.
io
.
CharTypes
;
import
com
.
fasterxml
.
jackson
.
core
.
io
.
ContentReference
;
public
final
class
XmlReadContext
extends
JsonStreamContext
{
protected
final
XmlReadContext
_parent
;
protected
int
_lineNr
;
protected
int
_columnNr
;
protected
String
_currentName
;
protected
Object
_currentValue
;
protected
Set
<
String
>
_namesToWrap
;
protected
String
_wrappedName
;
protected
XmlReadContext
_child
=
null
;
public
XmlReadContext
(
XmlReadContext
parent
,
int
type
,
int
lineNr
,
int
colNr
)
{
super
(
)
;
_type
=
type
;
_parent
=
parent
;
_lineNr
=
lineNr
;
_columnNr
=
colNr
;
_index
=
-
1
;
}
protected
final
void
reset
(
int
type
,
int
lineNr
,
int
colNr
)
{
_type
=
type
;
_index
=
-
1
;
_lineNr
=
lineNr
;
_columnNr
=
colNr
;
_currentName
=
null
;
_currentValue
=
null
;
_namesToWrap
=
null
;
}
@
Override
public
Object
getCurrentValue
(
)
{
return
_currentValue
;
}
@
Override
public
void
setCurrentValue
(
Object
v
)
{
_currentValue
=
v
;
}
public
static
XmlReadContext
createRootContext
(
int
lineNr
,
int
colNr
)
{
return
new
XmlReadContext
(
null
,
TYPE_ROOT
,
lineNr
,
colNr
)
;
}
public
static
XmlReadContext
createRootContext
(
)
{
return
new
XmlReadContext
(
null
,
TYPE_ROOT
,
1
,
0
)
;
}
public
final
XmlReadContext
createChildArrayContext
(
int
lineNr
,
int
colNr
)
{
++
_index
;
XmlReadContext
ctxt
=
_child
;
if
(
ctxt
==
null
)
{
_child
=
ctxt
=
new
XmlReadContext
(
this
,
TYPE_ARRAY
,
lineNr
,
colNr
)
;
return
ctxt
;
}
ctxt
.
reset
(
TYPE_ARRAY
,
lineNr
,
colNr
)
;
return
ctxt
;
}
public
final
XmlReadContext
createChildObjectContext
(
int
lineNr
,
int
colNr
)
{
++
_index
;
XmlReadContext
ctxt
=
_child
;
if
(
ctxt
==
null
)
{
_child
=
ctxt
=
new
XmlReadContext
(
this
,
TYPE_OBJECT
,
lineNr
,
colNr
)
;
return
ctxt
;
}
ctxt
.
reset
(
TYPE_OBJECT
,
lineNr
,
colNr
)
;
return
ctxt
;
}
@
Override
public
final
String
getCurrentName
(
)
{
return
_currentName
;
}
@
Override
public
boolean
hasCurrentName
(
)
{
return
_currentName
!=
null
;
}
@
Override
public
final
XmlReadContext
getParent
(
)
{
return
_parent
;
}
@
Override
public
final
JsonLocation
startLocation
(
ContentReference
srcRef
)
{
long
totalChars
=
-
1L
;
return
new
JsonLocation
(
srcRef
,
totalChars
,
_lineNr
,
_columnNr
)
;
}
public
final
void
valueStarted
(
)
{
++
_index
;
}
public
void
setCurrentName
(
String
name
)
{
_currentName
=
name
;
}
public
void
setNamesToWrap
(
Set
<
String
>
namesToWrap
)
{
_namesToWrap
=
namesToWrap
;
}
public
boolean
shouldWrap
(
String
localName
)
{
return
(
_namesToWrap
!=
null
)
&&
_namesToWrap
.
contains
(
localName
)
;
}
protected
void
convertToArray
(
)
{
_type
=
TYPE_ARRAY
;
}
@
Override
public
final
String
toString
(
)
{
StringBuilder
sb
=
new
StringBuilder
(
64
)
;
switch
(
_type
)
{
case
TYPE_ROOT
:
sb
.
append
(
"/"
)
;
break
;
case
TYPE_ARRAY
:
sb
.
append
(
'['
)
;
sb
.
append
(
getCurrentIndex
(
)
)
;
sb
.
append
(
']'
)
;
break
;
case
TYPE_OBJECT
:
sb
.
append
(
'{'
)
;
if
(
_currentName
!=
null
)
{
sb
.
append
(
'"'
)
;
CharTypes
.
appendQuoted
(
sb
,
_currentName
)
;
sb
.
append
(
'"'
)
;
}
else
{
sb
.
append
(
'?'
)
;
}
sb
.
append
(
'}'
)
;
break
;
}
return
sb
.
toString
(
)
;
}
}
<EOF>
