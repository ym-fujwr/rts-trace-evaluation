diff --git a/.github/workflows/main.yml b/.github/workflows/main.yml
index beaa4b694..1b27e8f60 100644
--- a/.github/workflows/main.yml
+++ b/.github/workflows/main.yml
@@ -38 +38 @@ jobs:
-      uses: actions/setup-java@v3
+      uses: actions/setup-java@v4
diff --git a/release-notes/CREDITS-2.x b/release-notes/CREDITS-2.x
index ef3635bec..67cc18d06 100644
--- a/release-notes/CREDITS-2.x
+++ b/release-notes/CREDITS-2.x
@@ -239,0 +240,6 @@ Marco Belladelli (mbladel@github)
+
+Motonori IWAMURO (vmi@github)
+
+* Contributed fix for #616: Fix mismatch in `setNextIsUnwrapped(boolean)` in
+  `XmlBeanSerializerBase#serializeFieldsFiltered()`
+ (2.16.1)
diff --git a/release-notes/VERSION-2.x b/release-notes/VERSION-2.x
index d61544bfc..6ad676b68 100644
--- a/release-notes/VERSION-2.x
+++ b/release-notes/VERSION-2.x
@@ -10,0 +11,6 @@ Project: jackson-dataformat-xml
+2.16.1 (not yet released)
+
+#616: Fix mismatch in `setNextIsUnwrapped(boolean)` in
+  `XmlBeanSerializerBase#serializeFieldsFiltered()`
+ (fix contributed by Motonori I)
+
diff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java
index 12a716ed8..cf9e4806c 100644
--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java
+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java
@@ -476 +476 @@ public class FromXmlParser
-    public String getCurrentName() throws IOException
+    public String currentName() throws IOException
@@ -492,0 +493,6 @@ public class FromXmlParser
+    @Deprecated // since 2.17
+    @Override
+    public String getCurrentName() throws IOException {
+        return currentName();
+    }
+
@@ -503 +509 @@ public class FromXmlParser
-    
+
@@ -539 +545 @@ public class FromXmlParser
-    public JsonLocation getTokenLocation() {
+    public JsonLocation currentTokenLocation() {
@@ -548 +554 @@ public class FromXmlParser
-    public JsonLocation getCurrentLocation() {
+    public JsonLocation currentLocation() {
@@ -551,0 +558,12 @@ public class FromXmlParser
+    @Deprecated // since 2.17
+    @Override
+    public JsonLocation getCurrentLocation() {
+        return currentLocation();
+    }
+
+    @Deprecated // since 2.17
+    @Override
+    public JsonLocation getTokenLocation() {
+        return currentTokenLocation();
+    }
+
@@ -662 +680 @@ public class FromXmlParser
-                System.out.printf("FromXmlParser.nextToken() at '%s': JsonToken.FIELD_NAME '%s'\n", loc, _parsingContext.getCurrentName());
+                System.out.printf("FromXmlParser.nextToken() at '%s': JsonToken.FIELD_NAME '%s'\n", loc, _parsingContext.currentName());
@@ -877 +895 @@ XmlTokenStream.XML_END_ELEMENT, XmlTokenStream.XML_START_ELEMENT, token));
-            return getCurrentName();
+            return currentName();
@@ -1030 +1048 @@ XmlTokenStream.XML_END_ELEMENT, XmlTokenStream.XML_START_ELEMENT, token));
-            return getCurrentName();
+            return currentName();
diff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java
index f53f90a49..7a2d3d78c 100644
--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java
+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java
@@ -16 +15,0 @@ import com.fasterxml.jackson.databind.ser.SerializerFactory;
-import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.Impl;
diff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/XmlTestBase.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/XmlTestBase.java
index 4a75778a3..b794ff979 100644
--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/XmlTestBase.java
+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/XmlTestBase.java
@@ -296 +296 @@ public abstract class XmlTestBase
-        assertEquals(expName, jp.getCurrentName());
+        assertEquals(expName, jp.currentName());
diff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/StringListRoundtripTest.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/StringListRoundtripTest.java
index ea9a75f21..09297c614 100644
--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/StringListRoundtripTest.java
+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/StringListRoundtripTest.java
@@ -21,28 +21,29 @@ import static org.junit.Assert.assertNull;
-public class StringListRoundtripTest {
-	private final static String[] TEST_DATA = new String[] {"", "test", null, "test2"};
-
-	private final static XmlMapper MAPPER_READ_WRITE_NULLS = XmlMapper.builder()
-             .enable(PROCESS_XSI_NIL)
-             .enable(WRITE_NULLS_AS_XSI_NIL)
-             .build();
-     private final static XmlMapper MAPPER_READ_NULLS = XmlMapper.builder()
-             .enable(PROCESS_XSI_NIL)
-             .disable(WRITE_NULLS_AS_XSI_NIL)
-             .build();
-     private final static XmlMapper MAPPER_WRITE_NULLS = XmlMapper.builder()
-             .disable(PROCESS_XSI_NIL)
-             .enable(WRITE_NULLS_AS_XSI_NIL)
-             .build();
-
-     @Test
-	public void testStringArray() throws Exception
-	{
-		// default mode, should get back empty string
-		_stringArrayRoundtrip(MAPPER_READ_NULLS, false);
-
-		// xsi null enabled, should get back null
-		_stringArrayRoundtrip(MAPPER_READ_WRITE_NULLS, true);
-
-		// xsi null write enabled but processing disabled, should get back empty string
-		_stringArrayRoundtrip(MAPPER_WRITE_NULLS, false);
-	}
+public class StringListRoundtripTest
+{
+    private final static String[] TEST_DATA = new String[] {"", "test", null, "test2"};
+
+    private final static XmlMapper MAPPER_READ_WRITE_NULLS = XmlMapper.builder()
+            .enable(PROCESS_XSI_NIL)
+            .enable(WRITE_NULLS_AS_XSI_NIL)
+            .build();
+    private final static XmlMapper MAPPER_READ_NULLS = XmlMapper.builder()
+            .enable(PROCESS_XSI_NIL)
+            .disable(WRITE_NULLS_AS_XSI_NIL)
+            .build();
+    private final static XmlMapper MAPPER_WRITE_NULLS = XmlMapper.builder()
+            .disable(PROCESS_XSI_NIL)
+            .enable(WRITE_NULLS_AS_XSI_NIL)
+            .build();
+
+    @Test
+    public void testStringArray() throws Exception
+    {
+        // default mode, should get back empty string
+        _stringArrayRoundtrip(MAPPER_READ_NULLS, false);
+
+        // xsi null enabled, should get back null
+        _stringArrayRoundtrip(MAPPER_READ_WRITE_NULLS, true);
+
+        // xsi null write enabled but processing disabled, should get back empty string
+        _stringArrayRoundtrip(MAPPER_WRITE_NULLS, false);
+    }
@@ -218,29 +219,28 @@ public class StringListRoundtripTest {
-	private void _stringMapPojoRoundtrip(ObjectMapper mapper, boolean shouldBeNull) throws Exception
-	{
-		Map<String, String> map = new HashMap<String, String>() {{
-			put("a", "");
-			put("b", "test");
-			put("c", null);
-			put("d", "test2");
-		}};
-		MapPojo mapPojo = new MapPojo();
-		mapPojo.setMap(map);
-
-		// serialize to string
-		String xml = mapper.writeValueAsString(mapPojo);
-		assertNotNull(xml);
-
-		// then bring it back
-		MapPojo result = mapper.readValue(xml, MapPojo.class);
-		assertEquals(4, result.map.size());
-		assertEquals("", result.map.get("a"));
-		assertEquals("test", result.map.get("b"));
-		if (shouldBeNull)
-		{
-			assertNull(result.map.get("c"));
-		} else
-		{
-			assertEquals("", result.map.get("c"));
-		}
-		assertEquals("test2", result.map.get("d"));
-	}
+    private void _stringMapPojoRoundtrip(ObjectMapper mapper, boolean shouldBeNull) throws Exception
+    {
+        @SuppressWarnings("serial")
+        Map<String, String> map = new HashMap<String, String>() {{
+            put("a", "");
+            put("b", "test");
+            put("c", null);
+            put("d", "test2");
+        }};
+        MapPojo mapPojo = new MapPojo();
+        mapPojo.setMap(map);
+
+        // serialize to string
+        String xml = mapper.writeValueAsString(mapPojo);
+        assertNotNull(xml);
+
+        // then bring it back
+        MapPojo result = mapper.readValue(xml, MapPojo.class);
+        assertEquals(4, result.map.size());
+        assertEquals("", result.map.get("a"));
+        assertEquals("test", result.map.get("b"));
+        if (shouldBeNull) {
+            assertNull(result.map.get("c"));
+        } else {
+            assertEquals("", result.map.get("c"));
+        }
+        assertEquals("test2", result.map.get("d"));
+    }
diff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlParserNextXxxTest.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlParserNextXxxTest.java
index b2ee2e9e7..ac9b6921f 100644
--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlParserNextXxxTest.java
+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlParserNextXxxTest.java
@@ -39 +39 @@ public class XmlParserNextXxxTest extends XmlTestBase
-        assertEquals("max", xp.getCurrentName());
+        assertEquals("max", xp.currentName());
@@ -44 +44 @@ public class XmlParserNextXxxTest extends XmlTestBase
-        assertEquals("offset", xp.getCurrentName());
+        assertEquals("offset", xp.currentName());
diff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlParserTest.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlParserTest.java
index e45f9ad11..c19d58868 100644
--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlParserTest.java
+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlParserTest.java
@@ -231 +231 @@ public class XmlParserTest extends XmlTestBase
-        assertEquals("elem", xp.getCurrentName());
+        assertEquals("elem", xp.currentName());
@@ -236 +236 @@ public class XmlParserTest extends XmlTestBase
-        assertEquals("elem", xp.getCurrentName());
+        assertEquals("elem", xp.currentName());
@@ -239 +239 @@ public class XmlParserTest extends XmlTestBase
-        assertEquals("property", xp.getCurrentName());
+        assertEquals("property", xp.currentName());
@@ -245 +245 @@ public class XmlParserTest extends XmlTestBase
-        assertEquals("elem", xp.getCurrentName());
+        assertEquals("elem", xp.currentName());
@@ -271 +271 @@ public class XmlParserTest extends XmlTestBase
-        assertEquals("property", xp.getCurrentName());
+        assertEquals("property", xp.currentName());
@@ -301 +301 @@ public class XmlParserTest extends XmlTestBase
-        assertEquals("max", xp.getCurrentName());
+        assertEquals("max", xp.currentName());
@@ -306 +306 @@ public class XmlParserTest extends XmlTestBase
-        assertEquals("offset", xp.getCurrentName());
+        assertEquals("offset", xp.currentName());
@@ -347 +347 @@ public class XmlParserTest extends XmlTestBase
-        assertEquals("value2", xp.getCurrentName());
+        assertEquals("value2", xp.currentName());
@@ -355 +355 @@ public class XmlParserTest extends XmlTestBase
-        assertEquals("", xp.getCurrentName());
+        assertEquals("", xp.currentName());
diff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/dos/DeepNestingParserTest.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/dos/DeepNestingParserTest.java
index c201d7135..1f6c9a8e0 100644
--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/dos/DeepNestingParserTest.java
+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/dos/DeepNestingParserTest.java
@@ -4 +4 @@ import com.ctc.wstx.stax.WstxInputFactory;
-import com.fasterxml.jackson.core.JsonParseException;
+
@@ -6 +6,2 @@ import com.fasterxml.jackson.core.JsonParser;
-import com.fasterxml.jackson.core.JsonToken;
+import com.fasterxml.jackson.core.exc.StreamReadException;
+
@@ -17,6 +18,3 @@ public class DeepNestingParserTest extends XmlTestBase {
-            JsonToken jt;
-            while ((jt = p.nextToken()) != null) {
-
-            }
-            fail("expected JsonParseException");
-        } catch (JsonParseException e) {
+            while (p.nextToken() != null) { }
+            fail("expected StreamReadException");
+        } catch (StreamReadException e) {
@@ -34,4 +32 @@ public class DeepNestingParserTest extends XmlTestBase {
-            JsonToken jt;
-            while ((jt = p.nextToken()) != null) {
-
-            }
+            while (p.nextToken() != null) { }
