package
com
.
fasterxml
.
jackson
.
dataformat
.
xml
;
import
java
.
io
.
IOException
;
import
javax
.
xml
.
stream
.
XMLInputFactory
;
import
javax
.
xml
.
stream
.
XMLOutputFactory
;
import
javax
.
xml
.
stream
.
XMLStreamReader
;
import
javax
.
xml
.
stream
.
XMLStreamWriter
;
import
com
.
fasterxml
.
jackson
.
core
.
*
;
import
com
.
fasterxml
.
jackson
.
core
.
type
.
TypeReference
;
import
com
.
fasterxml
.
jackson
.
databind
.
*
;
import
com
.
fasterxml
.
jackson
.
databind
.
cfg
.
CoercionAction
;
import
com
.
fasterxml
.
jackson
.
databind
.
cfg
.
CoercionInputShape
;
import
com
.
fasterxml
.
jackson
.
databind
.
cfg
.
MapperBuilder
;
import
com
.
fasterxml
.
jackson
.
databind
.
deser
.
BeanDeserializerFactory
;
import
com
.
fasterxml
.
jackson
.
databind
.
jsontype
.
PolymorphicTypeValidator
;
import
com
.
fasterxml
.
jackson
.
databind
.
jsontype
.
TypeResolverBuilder
;
import
com
.
fasterxml
.
jackson
.
databind
.
type
.
LogicalType
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
deser
.
FromXmlParser
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
deser
.
XmlDeserializationContext
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
ser
.
ToXmlGenerator
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
ser
.
XmlSerializerProvider
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
util
.
DefaultXmlPrettyPrinter
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
util
.
XmlRootNameLookup
;
public
class
XmlMapper
extends
ObjectMapper
{
private
static
final
long
serialVersionUID
=
1L
;
public
static
class
Builder
extends
MapperBuilder
<
XmlMapper
,
Builder
>
{
public
Builder
(
XmlMapper
m
)
{
super
(
m
)
;
}
public
Builder
enable
(
FromXmlParser
.
Feature
...
features
)
{
for
(
FromXmlParser
.
Feature
f
:
features
)
{
_mapper
.
enable
(
f
)
;
}
return
this
;
}
public
Builder
disable
(
FromXmlParser
.
Feature
...
features
)
{
for
(
FromXmlParser
.
Feature
f
:
features
)
{
_mapper
.
disable
(
f
)
;
}
return
this
;
}
public
Builder
configure
(
FromXmlParser
.
Feature
feature
,
boolean
state
)
{
if
(
state
)
{
_mapper
.
enable
(
feature
)
;
}
else
{
_mapper
.
disable
(
feature
)
;
}
return
this
;
}
public
Builder
enable
(
ToXmlGenerator
.
Feature
...
features
)
{
for
(
ToXmlGenerator
.
Feature
f
:
features
)
{
_mapper
.
enable
(
f
)
;
}
return
this
;
}
public
Builder
disable
(
ToXmlGenerator
.
Feature
...
features
)
{
for
(
ToXmlGenerator
.
Feature
f
:
features
)
{
_mapper
.
disable
(
f
)
;
}
return
this
;
}
public
Builder
configure
(
ToXmlGenerator
.
Feature
feature
,
boolean
state
)
{
if
(
state
)
{
_mapper
.
enable
(
feature
)
;
}
else
{
_mapper
.
disable
(
feature
)
;
}
return
this
;
}
public
Builder
nameForTextElement
(
String
name
)
{
_mapper
.
setXMLTextElementName
(
name
)
;
return
this
;
}
public
Builder
defaultUseWrapper
(
boolean
state
)
{
_mapper
.
setDefaultUseWrapper
(
state
)
;
return
this
;
}
public
Builder
xmlNameProcessor
(
XmlNameProcessor
processor
)
{
_mapper
.
setXmlNameProcessor
(
processor
)
;
return
this
;
}
}
protected
final
static
JacksonXmlModule
DEFAULT_XML_MODULE
=
new
JacksonXmlModule
(
)
;
protected
final
static
DefaultXmlPrettyPrinter
DEFAULT_XML_PRETTY_PRINTER
=
new
DefaultXmlPrettyPrinter
(
)
;
protected
final
JacksonXmlModule
_xmlModule
;
public
XmlMapper
(
)
{
this
(
new
XmlFactory
(
)
)
;
}
public
XmlMapper
(
XMLInputFactory
inputF
,
XMLOutputFactory
outF
)
{
this
(
new
XmlFactory
(
inputF
,
outF
)
)
;
}
public
XmlMapper
(
XMLInputFactory
inputF
)
{
this
(
new
XmlFactory
(
inputF
)
)
;
}
public
XmlMapper
(
XmlFactory
xmlFactory
)
{
this
(
xmlFactory
,
DEFAULT_XML_MODULE
)
;
}
public
XmlMapper
(
JacksonXmlModule
module
)
{
this
(
new
XmlFactory
(
)
,
module
)
;
}
public
XmlMapper
(
XmlFactory
xmlFactory
,
JacksonXmlModule
module
)
{
super
(
xmlFactory
,
new
XmlSerializerProvider
(
new
XmlRootNameLookup
(
)
)
,
new
XmlDeserializationContext
(
BeanDeserializerFactory
.
instance
)
)
;
_xmlModule
=
module
;
if
(
module
!=
null
)
{
registerModule
(
module
)
;
}
_serializationConfig
=
_serializationConfig
.
withDefaultPrettyPrinter
(
DEFAULT_XML_PRETTY_PRINTER
)
;
enable
(
DeserializationFeature
.
ACCEPT_EMPTY_STRING_AS_NULL_OBJECT
)
;
setBase64Variant
(
Base64Variants
.
MIME
)
;
coercionConfigDefaults
(
)
.
setAcceptBlankAsEmpty
(
Boolean
.
TRUE
)
.
setCoercion
(
CoercionInputShape
.
EmptyString
,
CoercionAction
.
AsEmpty
)
;
coercionConfigFor
(
LogicalType
.
Integer
)
.
setCoercion
(
CoercionInputShape
.
EmptyString
,
CoercionAction
.
AsNull
)
;
coercionConfigFor
(
LogicalType
.
Float
)
.
setCoercion
(
CoercionInputShape
.
EmptyString
,
CoercionAction
.
AsNull
)
;
coercionConfigFor
(
LogicalType
.
Boolean
)
.
setCoercion
(
CoercionInputShape
.
EmptyString
,
CoercionAction
.
AsNull
)
;
}
protected
XmlMapper
(
XmlMapper
src
)
{
super
(
src
)
;
_xmlModule
=
src
.
_xmlModule
;
}
@
Override
public
XmlMapper
copy
(
)
{
_checkInvalidCopy
(
XmlMapper
.
class
)
;
return
new
XmlMapper
(
this
)
;
}
public
static
XmlMapper
.
Builder
xmlBuilder
(
)
{
return
new
XmlMapper
.
Builder
(
new
XmlMapper
(
)
)
;
}
public
static
XmlMapper
.
Builder
builder
(
)
{
return
new
XmlMapper
.
Builder
(
new
XmlMapper
(
)
)
;
}
public
static
XmlMapper
.
Builder
builder
(
XmlFactory
streamFactory
)
{
return
new
XmlMapper
.
Builder
(
new
XmlMapper
(
streamFactory
)
)
;
}
@
Override
public
Version
version
(
)
{
return
PackageVersion
.
VERSION
;
}
@
Override
protected
TypeResolverBuilder
<
?
>
_constructDefaultTypeResolverBuilder
(
DefaultTyping
applicability
,
PolymorphicTypeValidator
ptv
)
{
return
new
DefaultingXmlTypeResolverBuilder
(
applicability
,
ptv
)
;
}
@
Deprecated
protected
void
setXMLTextElementName
(
String
name
)
{
(
(
XmlFactory
)
_jsonFactory
)
.
setXMLTextElementName
(
name
)
;
}
@
Deprecated
public
XmlMapper
setDefaultUseWrapper
(
boolean
state
)
{
AnnotationIntrospector
ai0
=
getDeserializationConfig
(
)
.
getAnnotationIntrospector
(
)
;
for
(
AnnotationIntrospector
ai
:
ai0
.
allIntrospectors
(
)
)
{
if
(
ai
instanceof
JacksonXmlAnnotationIntrospector
)
{
(
(
JacksonXmlAnnotationIntrospector
)
ai
)
.
setDefaultUseWrapper
(
state
)
;
}
}
return
this
;
}
public
void
setXmlNameProcessor
(
XmlNameProcessor
processor
)
{
(
(
XmlFactory
)
_jsonFactory
)
.
setXmlNameProcessor
(
processor
)
;
}
@
Override
public
XmlFactory
getFactory
(
)
{
return
(
XmlFactory
)
_jsonFactory
;
}
public
ObjectMapper
configure
(
ToXmlGenerator
.
Feature
f
,
boolean
state
)
{
(
(
XmlFactory
)
_jsonFactory
)
.
configure
(
f
,
state
)
;
return
this
;
}
public
ObjectMapper
configure
(
FromXmlParser
.
Feature
f
,
boolean
state
)
{
(
(
XmlFactory
)
_jsonFactory
)
.
configure
(
f
,
state
)
;
return
this
;
}
public
ObjectMapper
enable
(
ToXmlGenerator
.
Feature
f
)
{
(
(
XmlFactory
)
_jsonFactory
)
.
enable
(
f
)
;
return
this
;
}
public
ObjectMapper
enable
(
FromXmlParser
.
Feature
f
)
{
(
(
XmlFactory
)
_jsonFactory
)
.
enable
(
f
)
;
return
this
;
}
public
ObjectMapper
disable
(
ToXmlGenerator
.
Feature
f
)
{
(
(
XmlFactory
)
_jsonFactory
)
.
disable
(
f
)
;
return
this
;
}
public
ObjectMapper
disable
(
FromXmlParser
.
Feature
f
)
{
(
(
XmlFactory
)
_jsonFactory
)
.
disable
(
f
)
;
return
this
;
}
public
<
T
>
T
readValue
(
XMLStreamReader
r
,
Class
<
T
>
valueType
)
throws
IOException
{
return
readValue
(
r
,
_typeFactory
.
constructType
(
valueType
)
)
;
}
public
<
T
>
T
readValue
(
XMLStreamReader
r
,
TypeReference
<
T
>
valueTypeRef
)
throws
IOException
{
return
readValue
(
r
,
_typeFactory
.
constructType
(
valueTypeRef
)
)
;
}
@
SuppressWarnings
(
"resource"
)
public
<
T
>
T
readValue
(
XMLStreamReader
r
,
JavaType
valueType
)
throws
IOException
{
FromXmlParser
p
=
getFactory
(
)
.
createParser
(
r
)
;
return
super
.
readValue
(
p
,
valueType
)
;
}
public
void
writeValue
(
XMLStreamWriter
w0
,
Object
value
)
throws
IOException
{
@
SuppressWarnings
(
"resource"
)
ToXmlGenerator
g
=
getFactory
(
)
.
createGenerator
(
w0
)
;
super
.
writeValue
(
g
,
value
)
;
}
}
<EOF>
