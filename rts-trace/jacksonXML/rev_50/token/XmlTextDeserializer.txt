package
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
deser
;
import
java
.
io
.
IOException
;
import
com
.
fasterxml
.
jackson
.
core
.
*
;
import
com
.
fasterxml
.
jackson
.
databind
.
*
;
import
com
.
fasterxml
.
jackson
.
databind
.
deser
.
*
;
import
com
.
fasterxml
.
jackson
.
databind
.
deser
.
std
.
DelegatingDeserializer
;
import
com
.
fasterxml
.
jackson
.
databind
.
jsontype
.
TypeDeserializer
;
public
class
XmlTextDeserializer
extends
DelegatingDeserializer
{
private
static
final
long
serialVersionUID
=
1L
;
protected
final
int
_xmlTextPropertyIndex
;
protected
final
SettableBeanProperty
_xmlTextProperty
;
protected
final
ValueInstantiator
_valueInstantiator
;
public
XmlTextDeserializer
(
BeanDeserializerBase
delegate
,
SettableBeanProperty
prop
)
{
super
(
delegate
)
;
_xmlTextProperty
=
prop
;
_xmlTextPropertyIndex
=
prop
.
getPropertyIndex
(
)
;
_valueInstantiator
=
delegate
.
getValueInstantiator
(
)
;
}
public
XmlTextDeserializer
(
BeanDeserializerBase
delegate
,
int
textPropIndex
)
{
super
(
delegate
)
;
_xmlTextPropertyIndex
=
textPropIndex
;
_valueInstantiator
=
delegate
.
getValueInstantiator
(
)
;
_xmlTextProperty
=
delegate
.
findProperty
(
textPropIndex
)
;
}
@
Override
protected
JsonDeserializer
<
?
>
newDelegatingInstance
(
JsonDeserializer
<
?
>
newDelegatee0
)
{
throw
new
IllegalStateException
(
"Internal error: should never get called"
)
;
}
@
Override
public
JsonDeserializer
<
?
>
createContextual
(
DeserializationContext
ctxt
,
BeanProperty
property
)
throws
JsonMappingException
{
return
new
XmlTextDeserializer
(
_verifyDeserType
(
_delegatee
)
,
_xmlTextPropertyIndex
)
;
}
@
Override
public
Object
deserialize
(
JsonParser
p
,
DeserializationContext
ctxt
)
throws
IOException
{
if
(
p
.
getCurrentToken
(
)
==
JsonToken
.
VALUE_STRING
)
{
Object
bean
=
_valueInstantiator
.
createUsingDefault
(
ctxt
)
;
_xmlTextProperty
.
deserializeAndSet
(
p
,
ctxt
,
bean
)
;
return
bean
;
}
return
_delegatee
.
deserialize
(
p
,
ctxt
)
;
}
@
SuppressWarnings
(
"unchecked"
)
@
Override
public
Object
deserialize
(
JsonParser
p
,
DeserializationContext
ctxt
,
Object
bean
)
throws
IOException
{
if
(
p
.
getCurrentToken
(
)
==
JsonToken
.
VALUE_STRING
)
{
_xmlTextProperty
.
deserializeAndSet
(
p
,
ctxt
,
bean
)
;
return
bean
;
}
return
(
(
JsonDeserializer
<
Object
>
)
_delegatee
)
.
deserialize
(
p
,
ctxt
,
bean
)
;
}
@
Override
public
Object
deserializeWithType
(
JsonParser
p
,
DeserializationContext
ctxt
,
TypeDeserializer
typeDeserializer
)
throws
IOException
{
return
_delegatee
.
deserializeWithType
(
p
,
ctxt
,
typeDeserializer
)
;
}
protected
BeanDeserializerBase
_verifyDeserType
(
JsonDeserializer
<
?
>
deser
)
{
if
(
!
(
deser
instanceof
BeanDeserializerBase
)
)
{
throw
new
IllegalArgumentException
(
"Can not change delegate to be of type "
+
deser
.
getClass
(
)
.
getName
(
)
)
;
}
return
(
BeanDeserializerBase
)
deser
;
}
}
<EOF>
