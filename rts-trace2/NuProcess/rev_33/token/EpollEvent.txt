package
com
.
zaxxer
.
nuprocess
.
linux
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
List
;
import
com
.
sun
.
jna
.
Memory
;
import
com
.
sun
.
jna
.
Pointer
;
import
com
.
sun
.
jna
.
Structure
;
import
com
.
sun
.
jna
.
Union
;
class
EpollEvent
{
private
static
final
int
eventsOffset
;
private
static
final
int
fdOffset
;
private
static
final
int
size
;
static
{
EpollEventPrototype
event
=
new
EpollEventPrototype
(
)
;
eventsOffset
=
event
.
getFieldOffset
(
"events"
)
;
fdOffset
=
event
.
getFieldOffset
(
"data"
)
;
size
=
event
.
size
(
)
;
}
private
final
Pointer
pointer
;
EpollEvent
(
)
{
pointer
=
new
Memory
(
size
)
;
}
int
getEvents
(
)
{
return
pointer
.
getInt
(
eventsOffset
)
;
}
void
setEvents
(
final
int
mask
)
{
pointer
.
setInt
(
eventsOffset
,
mask
)
;
}
void
setFileDescriptor
(
final
int
fd
)
{
pointer
.
setInt
(
fdOffset
,
fd
)
;
}
int
getFileDescriptor
(
)
{
return
pointer
.
getInt
(
fdOffset
)
;
}
Pointer
getPointer
(
)
{
return
pointer
;
}
int
size
(
)
{
return
size
;
}
public
static
class
EpollEventPrototype
extends
Structure
{
public
int
events
;
public
EpollData
data
;
EpollEventPrototype
(
)
{
super
(
ALIGN_GNUC
)
;
data
=
new
EpollData
(
)
;
data
.
setType
(
"fd"
)
;
}
int
getFieldOffset
(
String
field
)
{
return
fieldOffset
(
field
)
;
}
@
SuppressWarnings
(
"rawtypes"
)
@
Override
protected
List
<
String
>
getFieldOrder
(
)
{
return
Arrays
.
asList
(
"events"
,
"data"
)
;
}
@
SuppressWarnings
(
"unused"
)
public
static
class
EpollData
extends
Union
{
public
int
fd
;
public
int
u32
;
public
long
u64
;
}
}
}
<EOF>
