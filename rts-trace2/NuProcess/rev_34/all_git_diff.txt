diff --git a/shippable.yml b/shippable.yml
index d66735c..1cb35a2 100644
--- a/shippable.yml
+++ b/shippable.yml
@@ -11,2 +11 @@ build:
-    - mkdir -p shippable/codecoverage
-    - cp -r target/site/jacoco/jacoco.xml shippable/codecoverage
+    - cp -r target/surefire-reports/* shippable/testresults
diff --git a/src/main/java/com/zaxxer/nuprocess/linux/EpollEvent.java b/src/main/java/com/zaxxer/nuprocess/linux/EpollEvent.java
index bc8e0e8..bbe58e7 100644
--- a/src/main/java/com/zaxxer/nuprocess/linux/EpollEvent.java
+++ b/src/main/java/com/zaxxer/nuprocess/linux/EpollEvent.java
@@ -22,4 +22 @@ import java.util.List;
-import com.sun.jna.Memory;
-import com.sun.jna.Pointer;
-import com.sun.jna.Structure;
-import com.sun.jna.Union;
+import com.sun.jna.*;
@@ -79,4 +76 @@ class EpollEvent
-          On x86, __EPOLL_PACKED is:    #define __EPOLL_PACKED
-          On x86_64, __EPOLL_PACKED is: #define __EPOLL_PACKED __attribute__ ((__packed__))
-
-          sizeof(struct epoll_event) is 12 on x86 and x86_64
+          sizeof(struct epoll_event) is 12 on x86 and x86_64, but is 16 on other 64-bit platforms
@@ -89,4 +83 @@ class EpollEvent
-         // per bits/epoll.h, epoll_event is created with __attribute__ ((__packed__)), which disables
-         // applying padding to optimize alignment. epoll_event is memory-aligned on 32-bit platforms,
-         // but not on 64-bit platforms (i.e. it uses 32-bit alignment on 64-bit platforms)
-         super(ALIGN_GNUC); // super(ALIGN_NONE);
+         super(detectAlignment());
@@ -108,0 +100,17 @@ class EpollEvent
+      /**
+       * Uses the OS architecture to reproduce the following logic from the epoll header:
+       * <code><pre>
+       * #ifdef __x86_64__
+       * #define EPOLL_PACKED __attribute__((packed))
+       * #else
+       * #define EPOLL_PACKED
+       * #endif
+       * </pre></code>
+       *
+       * On x86-64 (amd64) platforms, {@code ALIGN_NONE} is used (to emulate {@code __attribute__((packed))}),
+       * and on all other platforms {@code ALIGN_GNUC} is used.
+       */
+      private static int detectAlignment() {
+         return Platform.isIntel() && Platform.is64Bit() ? ALIGN_NONE : ALIGN_GNUC;
+      }
+
diff --git a/src/test/java/com/zaxxer/nuprocess/linux/EpollEventTest.java b/src/test/java/com/zaxxer/nuprocess/linux/EpollEventTest.java
index 5161e7a..1662660 100644
--- a/src/test/java/com/zaxxer/nuprocess/linux/EpollEventTest.java
+++ b/src/test/java/com/zaxxer/nuprocess/linux/EpollEventTest.java
@@ -2,0 +3 @@ package com.zaxxer.nuprocess.linux;
+import com.sun.jna.Platform;
@@ -8 +9,4 @@ public class EpollEventTest
-   // ensure EpollEvent is 12 bytes, to match its size in C
+   // ensure EpollEvent's size matches the platform:
+   // - 12 bytes on all 32-bit architectures (4 byte aligned)
+   // - 12 bytes on x86-64, where it's compiled with __attribute__((packed)) (1 byte aligned)
+   // - 16 bytes on all other 64-bit architectures (8 byte aligned)
@@ -11,0 +16,4 @@ public class EpollEventTest
+      // 64-bit architectures use a 16 byte struct, except on AMD/Intel, where the struct is 12 bytes
+      // on both 32- and 64-bit. The struct is 12 bytes on all 32-bit architectures
+      int expectedSize = (Platform.is64Bit() && !Platform.isIntel()) ? 16 : 12;
+
@@ -13,3 +21 @@ public class EpollEventTest
-      Assert.assertEquals(16, event.size());
-      // When alignment is ALIGN_NONE
-      // Assert.assertEquals(12, event.size());
+      Assert.assertEquals(expectedSize, event.size());
