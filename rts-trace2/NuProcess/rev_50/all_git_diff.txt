diff --git a/CHANGES.md b/CHANGES.md
index d9b3819..01a3dc5 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -0,0 +1,19 @@
+Changes in 2.0.5
+
+ * Fix command line injection vulnerability (CVE-2022-39243) (#143)
+
+Changes in 2.0.4
+
+ * Add `Automatic-Module-Name` to `MANIFEST.MF` to better support Java 9+ modules (#142)
+
+Changes in 2.0.3
+
+ * Add handling for `EINTR` during `epoll_wait` and `ESRCH` from `kill` to prevent zombie processes (#125, #131)
+ * Remove static `EpollEvent` queue to avoid blocking under heavy load, which can lead to leaking zombie processes if a blocked thread is interrupted (#138)
+
+Changes in 2.0.2
+
+ * Ensure pipes are closed after failing to start a process on Linux, to prevent leaking descriptors (#120)
+ * Reduce pipe buffer size on Windows to increase process throughput to `stdout` and `stderr` (#118)
+ * Update JNA dependency to v5.8.0 to pick up support for the Apple M1 (#123)
+
@@ -3,2 +22,2 @@ Changes in 2.0.1
- * Fix race condition between the onStdinReady() and userWantsWrite() methods that causes the state to
-   become incorrect, resulting in failure to continue processing wanted stdin writes
+ * Fix race condition between the `onStdinReady()` and `userWantsWrite()` methods that causes the state to
+   become incorrect, resulting in failure to continue processing wanted `stdin` writes (#113)
@@ -9 +27,0 @@ Changes in 2.0.0
-
@@ -11 +28,0 @@ Changes in 2.0.0
-
@@ -17 +34 @@ Changes in 1.2.6
-   a wide variety of JVMs.
+   a wide variety of JVMs. (#107)
@@ -21,3 +38,2 @@ Changes in 1.2.5
- * Handle SystemRoot case-insensitively (Windows).
- 
- * Comptibility changes for JNA 5.2.0.
+ * Handle `SystemRoot` case-insensitively (Windows) (#103).
+ * Compatibility changes for JNA 5.2.0 (#99).
@@ -27,3 +43,2 @@ Changes in 1.2.4
- * Fix structure alignment (ALIGN_GNUC) on various platforms.
-
- * Add support for JDK 10/11.
+ * Fix structure alignment (`ALIGN_GNUC`) on various platforms (#94).
+ * Add support for JDK 10/11. (#92)
@@ -33 +48 @@ Changes in 1.2.3
- * Resolve launch issue on Linux/MacOS X w/Zulu JVM.
+ * Resolve launch issue on Linux/macOS w/Zulu JVM.
@@ -41 +56 @@ Changes in 1.2.1
-* On OS X, continue to use posix_spawnp directly, POSIX_SPAWN_START_SUSPENDED solves a lot of potential race conditions that we have to contend with on Linux.
+* On macOS, continue to use `posix_spawnp` directly, `POSIX_SPAWN_START_SUSPENDED` solves a lot of potential race conditions that we have to contend with on Linux.
@@ -44 +58,0 @@ Changes in 1.2.0
- * Spawn processes on Linux and MacOS X using JVM internal method Java_java_lang_UNIXProcess_forkAndExec.
@@ -46 +60 @@ Changes in 1.2.0
-Changes in 1.1.3
+ * Spawn processes on Linux and macOS using JVM internal method `Java_java_lang_UNIXProcess_forkAndExec`.
@@ -48 +62 @@ Changes in 1.1.3
- * Add constructor with Pointer to LibKevent.Kevent (#82) that reduces reflection code executed in JNA.
+Changes in 1.1.3
@@ -50,3 +64,3 @@ Changes in 1.1.3
- * Change to Linux epoll implementation that massively decreases the amount of memory used.
- 
- * Optimize epoll_wait loop to avoid memory churn. (#80)
+ * Add constructor with `Pointer` to `LibKevent.Kevent` (#82) that reduces reflection code executed in JNA.
+ * Change to Linux `epoll` implementation that massively decreases the amount of memory used.
+ * Optimize `epoll_wait` loop to avoid memory churn. (#80)
@@ -56 +70 @@ Changes in 1.1.2
- * Fix issue on Mac OS X where pipes would leak after many calls to closeStdin
+ * Fix issue on macOS where pipes would leak after many calls to `closeStdin`
@@ -60 +74 @@ Changes in 1.1.1
- * Fixed issue where calling writeStdin with a buffer larger than 65kb would hang.
+ * Fixed issue where calling `writeStdin` with a buffer larger than 65kb would hang.
@@ -64,5 +78,3 @@ Changes in 1.1.0
- * Expose new NuProcess.getPID() method on all platforms.
-
- * Fix wrong position and limit value on inBuffer caused by incorrect inBuffer clear.
-
- * Fix source of memory leak and DirectWriteTest failure on MacOS X; clear wantsWrite 
+ * Expose new `NuProcess.getPID()` method on all platforms.
+ * Fix wrong position and limit value on `inBuffer` caused by incorrect `inBuffer` clear.
+ * Fix source of memory leak and `DirectWriteTest` failure on macOS; clear `wantsWrite` 
@@ -70,2 +82 @@ Changes in 1.1.0
-
- * Remove System.exit() call from unit test.
+ * Remove `System.exit()` call from unit test.
@@ -76 +86,0 @@ Changes in 1.0.4
-
@@ -78,5 +88,3 @@ Changes in 1.0.4
-
- * Introduce 'force' parameter to NuProcess.closeStdin(), and enqueue special
-   tombstone marker into the pendingWrites queue for non-forced closes.
-
- * Remove use of sun.misc.Unsafe.
+ * Introduce 'force' parameter to `NuProcess.closeStdin()`, and enqueue special
+   tombstone marker into the `pendingWrites` queue for non-forced closes.
+ * Remove use of `sun.misc.Unsafe`.
@@ -86,2 +94 @@ Changes in 1.0.3
- * Remove dependency on jna-platform.
-
+ * Remove dependency on `jna-platform`.
@@ -89 +95,0 @@ Changes in 1.0.3
-
@@ -91 +96,0 @@ Changes in 1.0.3
-
@@ -96,3 +101,2 @@ Changes in 1.0.2
- * Process cwd support for Mac, Linux, and Win32.
-
- * Remove ThreadLocal usage for MacOS X.
+ * Process `cwd` support for Mac, Linux, and Win32.
+ * Remove `ThreadLocal` usage for macOS.
@@ -102,3 +106,2 @@ Changes in 1.0.1
- * Performance improvements for OS X kqueue / kevent.
-
- * Fix issue where stdout and stderr are empty for quick exiting processes.
+ * Performance improvements for macOS `kqueue` / `kevent`.
+ * Fix issue where `stdout` and `stderr` are empty for quick exiting processes.
diff --git a/README.md b/README.md
index 6d37244..878e661 100644
--- a/README.md
+++ b/README.md
@@ -30 +30 @@ Java process and the spawned processes:
-        <version>2.0.2</version>
+        <version>2.0.5</version>
diff --git a/pom.xml b/pom.xml
index fca7613..1cdff0f 100644
--- a/pom.xml
+++ b/pom.xml
@@ -7 +7 @@
-    <version>2.0.5-SNAPSHOT</version>
+    <version>2.0.6-SNAPSHOT</version>
diff --git a/src/main/java/com/zaxxer/nuprocess/NuProcessBuilder.java b/src/main/java/com/zaxxer/nuprocess/NuProcessBuilder.java
index 890cfc1..ac18538 100644
--- a/src/main/java/com/zaxxer/nuprocess/NuProcessBuilder.java
+++ b/src/main/java/com/zaxxer/nuprocess/NuProcessBuilder.java
@@ -292,0 +293,6 @@ public class NuProcessBuilder
+   private void ensureNoNullCharacters(String environment) {
+      if (environment.indexOf('\u0000') >= 0) {
+         throw new IllegalArgumentException("Environment may not contain null characters");
+      }
+   }
+
@@ -298 +304,5 @@ public class NuProcessBuilder
-         env[i++] = entrySet.getKey() + "=" + entrySet.getValue();
+         String key = entrySet.getKey();
+         String value = entrySet.getValue();
+         ensureNoNullCharacters(key);
+         ensureNoNullCharacters(value);
+         env[i++] = key + "=" + value;
diff --git a/src/test/java/com/zaxxer/nuprocess/RunTest.java b/src/test/java/com/zaxxer/nuprocess/RunTest.java
index 5207ddd..8953b45 100644
--- a/src/test/java/com/zaxxer/nuprocess/RunTest.java
+++ b/src/test/java/com/zaxxer/nuprocess/RunTest.java
@@ -30,0 +31 @@ import java.nio.file.Paths;
+import java.util.Collections;
@@ -344,0 +346,30 @@ public class RunTest
+   @Test(expected = IllegalArgumentException.class)
+   public void nullEnvironmentKeyViaConstructor() {
+      NuProcessBuilder pb = new NuProcessBuilder(Collections.singletonList(command),
+              Collections.singletonMap("FOO=foo\0BAD=bad", ""));
+      pb.setProcessListener(new NullProcessHandler());
+      pb.run();
+   }
+
+   @Test(expected = IllegalArgumentException.class)
+   public void nullEnvironmentValueViaConstructor() {
+      NuProcessBuilder pb = new NuProcessBuilder(Collections.singletonList(command),
+              Collections.singletonMap("FOO", "foo\0BAD=bad"));
+      pb.setProcessListener(new NullProcessHandler());
+      pb.run();
+   }
+
+   @Test(expected = IllegalArgumentException.class)
+   public void nullEnvironmentKeyViaEnvironmentMutation() {
+      NuProcessBuilder pb = new NuProcessBuilder(new NullProcessHandler(), command);
+      pb.environment().put("FOO=foo\0BAD=bad", "");
+      pb.start();
+   }
+
+   @Test(expected = IllegalArgumentException.class)
+   public void nullEnvironmentValueViaEnvironmentMutation() {
+      NuProcessBuilder pb = new NuProcessBuilder(new NullProcessHandler(), command);
+      pb.environment().put("FOO", "foo\0BAD=bad");
+      pb.start();
+   }
+
