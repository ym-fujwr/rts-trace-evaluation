package
org
.
apache
.
commons
.
cli
.
bug
;
import
static
org
.
junit
.
Assert
.
assertEquals
;
import
static
org
.
junit
.
Assert
.
assertFalse
;
import
static
org
.
junit
.
Assert
.
assertNotEquals
;
import
static
org
.
junit
.
Assert
.
assertNull
;
import
static
org
.
junit
.
Assert
.
assertTrue
;
import
org
.
apache
.
commons
.
cli
.
CommandLine
;
import
org
.
apache
.
commons
.
cli
.
DefaultParser
;
import
org
.
apache
.
commons
.
cli
.
Option
;
import
org
.
apache
.
commons
.
cli
.
Options
;
import
org
.
junit
.
Before
;
import
org
.
junit
.
Test
;
public
class
BugCLI265Test
{
private
DefaultParser
parser
;
private
Options
options
;
@
Before
public
void
setUp
(
)
{
parser
=
new
DefaultParser
(
)
;
final
Option
optionT1
=
Option
.
builder
(
"t1"
)
.
hasArg
(
)
.
numberOfArgs
(
1
)
.
optionalArg
(
true
)
.
argName
(
"t1_path"
)
.
build
(
)
;
final
Option
optionA
=
Option
.
builder
(
"a"
)
.
hasArg
(
false
)
.
build
(
)
;
final
Option
optionB
=
Option
.
builder
(
"b"
)
.
hasArg
(
false
)
.
build
(
)
;
final
Option
optionLast
=
Option
.
builder
(
"last"
)
.
hasArg
(
false
)
.
build
(
)
;
options
=
new
Options
(
)
.
addOption
(
optionT1
)
.
addOption
(
optionA
)
.
addOption
(
optionB
)
.
addOption
(
optionLast
)
;
}
@
Test
public
void
testShouldParseConcatenatedShortOptions
(
)
throws
Exception
{
final
String
[
]
concatenatedShortOptions
=
{
"-t1"
,
"-ab"
}
;
final
CommandLine
commandLine
=
parser
.
parse
(
options
,
concatenatedShortOptions
)
;
assertTrue
(
commandLine
.
hasOption
(
"t1"
)
)
;
assertNull
(
commandLine
.
getOptionValue
(
"t1"
)
)
;
assertTrue
(
commandLine
.
hasOption
(
"a"
)
)
;
assertTrue
(
commandLine
.
hasOption
(
"b"
)
)
;
assertFalse
(
commandLine
.
hasOption
(
"last"
)
)
;
}
@
Test
public
void
testShouldParseShortOptionWithoutValue
(
)
throws
Exception
{
final
String
[
]
twoShortOptions
=
{
"-t1"
,
"-last"
}
;
final
CommandLine
commandLine
=
parser
.
parse
(
options
,
twoShortOptions
)
;
assertTrue
(
commandLine
.
hasOption
(
"t1"
)
)
;
assertNotEquals
(
"Second option has been used as value for first option"
,
"-last"
,
commandLine
.
getOptionValue
(
"t1"
)
)
;
assertTrue
(
"Second option has not been detected"
,
commandLine
.
hasOption
(
"last"
)
)
;
}
@
Test
public
void
testShouldParseShortOptionWithValue
(
)
throws
Exception
{
final
String
[
]
shortOptionWithValue
=
{
"-t1"
,
"path/to/my/db"
}
;
final
CommandLine
commandLine
=
parser
.
parse
(
options
,
shortOptionWithValue
)
;
assertEquals
(
"path/to/my/db"
,
commandLine
.
getOptionValue
(
"t1"
)
)
;
assertFalse
(
commandLine
.
hasOption
(
"last"
)
)
;
}
}
<EOF>
