package
org
.
apache
.
commons
.
jxpath
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
import
java
.
util
.
Set
;
public
class
FunctionLibrary
implements
Functions
{
private
final
List
allFunctions
=
new
ArrayList
(
)
;
private
Map
byNamespace
;
public
void
addFunctions
(
Functions
functions
)
{
allFunctions
.
add
(
functions
)
;
synchronized
(
this
)
{
byNamespace
=
null
;
}
}
public
void
removeFunctions
(
Functions
functions
)
{
allFunctions
.
remove
(
functions
)
;
synchronized
(
this
)
{
byNamespace
=
null
;
}
}
public
Set
getUsedNamespaces
(
)
{
return
functionCache
(
)
.
keySet
(
)
;
}
public
Function
getFunction
(
String
namespace
,
String
name
,
Object
[
]
parameters
)
{
Object
candidates
=
functionCache
(
)
.
get
(
namespace
)
;
if
(
candidates
instanceof
Functions
)
{
return
(
(
Functions
)
candidates
)
.
getFunction
(
namespace
,
name
,
parameters
)
;
}
if
(
candidates
instanceof
List
)
{
List
list
=
(
List
)
candidates
;
int
count
=
list
.
size
(
)
;
for
(
int
i
=
0
;
i
<
count
;
i
++
)
{
Function
function
=
(
(
Functions
)
list
.
get
(
i
)
)
.
getFunction
(
namespace
,
name
,
parameters
)
;
if
(
function
!=
null
)
{
return
function
;
}
}
}
return
null
;
}
private
synchronized
Map
functionCache
(
)
{
if
(
byNamespace
==
null
)
{
byNamespace
=
new
HashMap
(
)
;
int
count
=
allFunctions
.
size
(
)
;
for
(
int
i
=
0
;
i
<
count
;
i
++
)
{
Functions
funcs
=
(
Functions
)
allFunctions
.
get
(
i
)
;
Set
namespaces
=
funcs
.
getUsedNamespaces
(
)
;
for
(
Iterator
it
=
namespaces
.
iterator
(
)
;
it
.
hasNext
(
)
;
)
{
String
ns
=
(
String
)
it
.
next
(
)
;
Object
candidates
=
byNamespace
.
get
(
ns
)
;
if
(
candidates
==
null
)
{
byNamespace
.
put
(
ns
,
funcs
)
;
}
else
if
(
candidates
instanceof
Functions
)
{
List
lst
=
new
ArrayList
(
)
;
lst
.
add
(
candidates
)
;
lst
.
add
(
funcs
)
;
byNamespace
.
put
(
ns
,
lst
)
;
}
else
{
(
(
List
)
candidates
)
.
add
(
funcs
)
;
}
}
}
}
return
byNamespace
;
}
}
<EOF>
