package
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
beans
;
import
org
.
apache
.
commons
.
jxpath
.
AbstractFactory
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathAbstractFactoryException
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathContext
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathIntrospector
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
QName
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodePointer
;
import
org
.
apache
.
commons
.
jxpath
.
util
.
ValueUtils
;
public
abstract
class
PropertyPointer
extends
NodePointer
{
public
static
final
int
UNSPECIFIED_PROPERTY
=
Integer
.
MIN_VALUE
;
protected
int
propertyIndex
=
UNSPECIFIED_PROPERTY
;
protected
Object
bean
;
public
PropertyPointer
(
NodePointer
parent
)
{
super
(
parent
)
;
}
public
int
getPropertyIndex
(
)
{
return
propertyIndex
;
}
public
void
setPropertyIndex
(
int
index
)
{
if
(
propertyIndex
!=
index
)
{
propertyIndex
=
index
;
setIndex
(
WHOLE_COLLECTION
)
;
}
}
public
Object
getBean
(
)
{
if
(
bean
==
null
)
{
bean
=
getImmediateParentPointer
(
)
.
getNode
(
)
;
}
return
bean
;
}
public
QName
getName
(
)
{
return
new
QName
(
null
,
getPropertyName
(
)
)
;
}
public
abstract
String
getPropertyName
(
)
;
public
abstract
void
setPropertyName
(
String
propertyName
)
;
public
abstract
int
getPropertyCount
(
)
;
public
abstract
String
[
]
getPropertyNames
(
)
;
protected
abstract
boolean
isActualProperty
(
)
;
public
boolean
isActual
(
)
{
if
(
!
isActualProperty
(
)
)
{
return
false
;
}
return
super
.
isActual
(
)
;
}
private
static
final
Object
UNINITIALIZED
=
new
Object
(
)
;
private
Object
value
=
UNINITIALIZED
;
public
Object
getImmediateNode
(
)
{
if
(
value
==
UNINITIALIZED
)
{
value
=
index
==
WHOLE_COLLECTION
?
ValueUtils
.
getValue
(
getBaseValue
(
)
)
:
ValueUtils
.
getValue
(
getBaseValue
(
)
,
index
)
;
}
return
value
;
}
public
boolean
isCollection
(
)
{
Object
value
=
getBaseValue
(
)
;
return
value
!=
null
&&
ValueUtils
.
isCollection
(
value
)
;
}
public
boolean
isLeaf
(
)
{
Object
value
=
getNode
(
)
;
return
value
==
null
||
JXPathIntrospector
.
getBeanInfo
(
value
.
getClass
(
)
)
.
isAtomic
(
)
;
}
public
int
getLength
(
)
{
Object
baseValue
=
getBaseValue
(
)
;
return
baseValue
==
null
?
1
:
ValueUtils
.
getLength
(
baseValue
)
;
}
public
NodePointer
getImmediateValuePointer
(
)
{
return
NodePointer
.
newChildNodePointer
(
(
NodePointer
)
this
.
clone
(
)
,
getName
(
)
,
getImmediateNode
(
)
)
;
}
public
NodePointer
createPath
(
JXPathContext
context
)
{
if
(
getImmediateNode
(
)
==
null
)
{
AbstractFactory
factory
=
getAbstractFactory
(
context
)
;
int
inx
=
(
index
==
WHOLE_COLLECTION
?
0
:
index
)
;
boolean
success
=
factory
.
createObject
(
context
,
this
,
getBean
(
)
,
getPropertyName
(
)
,
inx
)
;
if
(
!
success
)
{
throw
new
JXPathAbstractFactoryException
(
"Factory "
+
factory
+
" could not create an object for path: "
+
asPath
(
)
)
;
}
}
return
this
;
}
public
NodePointer
createPath
(
JXPathContext
context
,
Object
value
)
{
if
(
index
!=
WHOLE_COLLECTION
&&
index
>=
getLength
(
)
)
{
createPath
(
context
)
;
}
setValue
(
value
)
;
return
this
;
}
public
NodePointer
createChild
(
JXPathContext
context
,
QName
name
,
int
index
,
Object
value
)
{
PropertyPointer
prop
=
(
PropertyPointer
)
clone
(
)
;
if
(
name
!=
null
)
{
prop
.
setPropertyName
(
name
.
toString
(
)
)
;
}
prop
.
setIndex
(
index
)
;
return
prop
.
createPath
(
context
,
value
)
;
}
public
NodePointer
createChild
(
JXPathContext
context
,
QName
name
,
int
index
)
{
PropertyPointer
prop
=
(
PropertyPointer
)
clone
(
)
;
if
(
name
!=
null
)
{
prop
.
setPropertyName
(
name
.
toString
(
)
)
;
}
prop
.
setIndex
(
index
)
;
return
prop
.
createPath
(
context
)
;
}
public
int
hashCode
(
)
{
return
getImmediateParentPointer
(
)
.
hashCode
(
)
+
propertyIndex
+
index
;
}
public
boolean
equals
(
Object
object
)
{
if
(
object
==
this
)
{
return
true
;
}
if
(
!
(
object
instanceof
PropertyPointer
)
)
{
return
false
;
}
PropertyPointer
other
=
(
PropertyPointer
)
object
;
if
(
parent
!=
other
.
parent
&&
(
parent
==
null
||
!
parent
.
equals
(
other
.
parent
)
)
)
{
return
false
;
}
if
(
getPropertyIndex
(
)
!=
other
.
getPropertyIndex
(
)
||
!
getPropertyName
(
)
.
equals
(
other
.
getPropertyName
(
)
)
)
{
return
false
;
}
int
iThis
=
(
index
==
WHOLE_COLLECTION
?
0
:
index
)
;
int
iOther
=
(
other
.
index
==
WHOLE_COLLECTION
?
0
:
other
.
index
)
;
return
iThis
==
iOther
;
}
public
int
compareChildNodePointers
(
NodePointer
pointer1
,
NodePointer
pointer2
)
{
return
getValuePointer
(
)
.
compareChildNodePointers
(
pointer1
,
pointer2
)
;
}
}
<EOF>
