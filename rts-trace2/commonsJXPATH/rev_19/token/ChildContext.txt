package
org
.
apache
.
commons
.
jxpath
.
ri
.
axes
;
import
org
.
apache
.
commons
.
jxpath
.
Pointer
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
EvalContext
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
compiler
.
NodeTest
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodeIterator
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
model
.
NodePointer
;
public
class
ChildContext
extends
EvalContext
{
private
NodeTest
nodeTest
;
private
boolean
startFromParentLocation
;
private
boolean
reverse
;
private
NodeIterator
iterator
;
public
ChildContext
(
EvalContext
parentContext
,
NodeTest
nodeTest
,
boolean
startFromParentLocation
,
boolean
reverse
)
{
super
(
parentContext
)
;
this
.
nodeTest
=
nodeTest
;
this
.
startFromParentLocation
=
startFromParentLocation
;
this
.
reverse
=
reverse
;
}
public
NodePointer
getCurrentNodePointer
(
)
{
if
(
position
==
0
&&
!
setPosition
(
1
)
)
{
return
null
;
}
return
iterator
==
null
?
null
:
iterator
.
getNodePointer
(
)
;
}
public
Pointer
getSingleNodePointer
(
)
{
if
(
position
==
0
)
{
while
(
nextSet
(
)
)
{
prepare
(
)
;
if
(
iterator
==
null
)
{
return
null
;
}
NodePointer
pointer
=
iterator
.
getNodePointer
(
)
;
if
(
pointer
!=
null
)
{
return
pointer
;
}
}
return
null
;
}
return
getCurrentNodePointer
(
)
;
}
public
boolean
nextNode
(
)
{
return
setPosition
(
getCurrentPosition
(
)
+
1
)
;
}
public
void
reset
(
)
{
super
.
reset
(
)
;
iterator
=
null
;
}
public
boolean
setPosition
(
int
position
)
{
int
oldPosition
=
getCurrentPosition
(
)
;
super
.
setPosition
(
position
)
;
if
(
oldPosition
==
0
)
{
prepare
(
)
;
}
return
iterator
==
null
?
false
:
iterator
.
setPosition
(
position
)
;
}
private
void
prepare
(
)
{
NodePointer
parent
=
parentContext
.
getCurrentNodePointer
(
)
;
if
(
parent
==
null
)
{
return
;
}
NodePointer
useParent
=
startFromParentLocation
?
parent
.
getParent
(
)
:
parent
;
iterator
=
useParent
==
null
?
null
:
useParent
.
childIterator
(
nodeTest
,
reverse
,
startFromParentLocation
?
parent
:
null
)
;
}
}
<EOF>
