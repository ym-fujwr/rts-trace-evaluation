package
org
.
apache
.
commons
.
jxpath
.
ri
.
compiler
;
import
java
.
util
.
Arrays
;
import
org
.
apache
.
commons
.
jxpath
.
Function
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathFunctionNotFoundException
;
import
org
.
apache
.
commons
.
jxpath
.
NodeSet
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
EvalContext
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
QName
;
import
org
.
apache
.
commons
.
jxpath
.
ri
.
axes
.
NodeSetContext
;
public
class
ExtensionFunction
extends
Operation
{
private
final
QName
functionName
;
public
ExtensionFunction
(
final
QName
functionName
,
final
Expression
[
]
args
)
{
super
(
args
)
;
this
.
functionName
=
functionName
;
}
public
QName
getFunctionName
(
)
{
return
functionName
;
}
@
Override
public
boolean
computeContextDependent
(
)
{
return
true
;
}
@
Override
public
String
toString
(
)
{
final
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
functionName
)
;
buffer
.
append
(
'('
)
;
final
Expression
[
]
args
=
getArguments
(
)
;
if
(
args
!=
null
)
{
for
(
int
i
=
0
;
i
<
args
.
length
;
i
++
)
{
if
(
i
>
0
)
{
buffer
.
append
(
", "
)
;
}
buffer
.
append
(
args
[
i
]
)
;
}
}
buffer
.
append
(
')'
)
;
return
buffer
.
toString
(
)
;
}
@
Override
public
Object
compute
(
final
EvalContext
context
)
{
return
computeValue
(
context
)
;
}
@
Override
public
Object
computeValue
(
final
EvalContext
context
)
{
Object
[
]
parameters
=
null
;
if
(
args
!=
null
)
{
parameters
=
new
Object
[
args
.
length
]
;
for
(
int
i
=
0
;
i
<
args
.
length
;
i
++
)
{
parameters
[
i
]
=
convert
(
args
[
i
]
.
compute
(
context
)
)
;
}
}
final
Function
function
=
context
.
getRootContext
(
)
.
getFunction
(
functionName
,
parameters
)
;
if
(
function
==
null
)
{
throw
new
JXPathFunctionNotFoundException
(
"No such function: "
+
functionName
+
Arrays
.
asList
(
parameters
)
)
;
}
final
Object
result
=
function
.
invoke
(
context
,
parameters
)
;
return
result
instanceof
NodeSet
?
new
NodeSetContext
(
context
,
(
NodeSet
)
result
)
:
result
;
}
private
Object
convert
(
final
Object
object
)
{
return
object
instanceof
EvalContext
?
(
(
EvalContext
)
object
)
.
getValue
(
)
:
object
;
}
}
<EOF>
