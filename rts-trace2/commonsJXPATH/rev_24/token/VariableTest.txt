package
org
.
apache
.
commons
.
jxpath
.
ri
.
compiler
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathContext
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathTestCase
;
import
org
.
apache
.
commons
.
jxpath
.
TestMixedModelBean
;
import
org
.
apache
.
commons
.
jxpath
.
Variables
;
public
class
VariableTest
extends
JXPathTestCase
{
private
JXPathContext
context
;
@
Override
public
void
setUp
(
)
{
if
(
context
==
null
)
{
context
=
JXPathContext
.
newContext
(
new
TestMixedModelBean
(
)
)
;
context
.
setFactory
(
new
VariableFactory
(
)
)
;
final
Variables
vars
=
context
.
getVariables
(
)
;
vars
.
declareVariable
(
"a"
,
Double
.
valueOf
(
1
)
)
;
vars
.
declareVariable
(
"b"
,
Double
.
valueOf
(
1
)
)
;
vars
.
declareVariable
(
"c"
,
null
)
;
vars
.
declareVariable
(
"d"
,
new
String
[
]
{
"a"
,
"b"
}
)
;
vars
.
declareVariable
(
"integer"
,
Integer
.
valueOf
(
1
)
)
;
vars
.
declareVariable
(
"nan"
,
Double
.
valueOf
(
Double
.
NaN
)
)
;
vars
.
declareVariable
(
"x"
,
null
)
;
}
}
public
void
testVariables
(
)
{
assertXPathValueAndPointer
(
context
,
"$a"
,
Double
.
valueOf
(
1
)
,
"$a"
)
;
}
public
void
testVariablesInExpressions
(
)
{
assertXPathValue
(
context
,
"$a = $b"
,
Boolean
.
TRUE
)
;
assertXPathValue
(
context
,
"$a = $nan"
,
Boolean
.
FALSE
)
;
assertXPathValue
(
context
,
"$a + 1"
,
Double
.
valueOf
(
2
)
)
;
assertXPathValue
(
context
,
"$c"
,
null
)
;
assertXPathValue
(
context
,
"$d[2]"
,
"b"
)
;
}
public
void
testInvalidVariableName
(
)
{
boolean
exception
=
false
;
try
{
context
.
getValue
(
"$none"
)
;
}
catch
(
final
Exception
ex
)
{
exception
=
true
;
}
assertTrue
(
"Evaluating '$none', expected exception - did not get it"
,
exception
)
;
exception
=
false
;
try
{
context
.
setValue
(
"$none"
,
Integer
.
valueOf
(
1
)
)
;
}
catch
(
final
Exception
ex
)
{
exception
=
true
;
}
assertTrue
(
"Setting '$none = 1', expected exception - did not get it"
,
exception
)
;
}
public
void
testNestedContext
(
)
{
final
JXPathContext
nestedContext
=
JXPathContext
.
newContext
(
context
,
null
)
;
assertXPathValue
(
nestedContext
,
"$a"
,
Double
.
valueOf
(
1
)
)
;
}
public
void
testSetValue
(
)
{
assertXPathSetValue
(
context
,
"$x"
,
Integer
.
valueOf
(
1
)
)
;
}
public
void
testCreatePathDeclareVariable
(
)
{
assertXPathCreatePath
(
context
,
"$string"
,
null
,
"$string"
)
;
}
public
void
testCreatePathAndSetValueDeclareVariable
(
)
{
assertXPathCreatePathAndSetValue
(
context
,
"$string"
,
"Value"
,
"$string"
)
;
}
public
void
testCreatePathDeclareVariableSetCollectionElement
(
)
{
assertXPathCreatePath
(
context
,
"$stringArray[2]"
,
""
,
"$stringArray[2]"
)
;
assertEquals
(
"Created <"
+
"$stringArray[1]"
+
">"
,
"Value1"
,
context
.
getValue
(
"$stringArray[1]"
)
)
;
}
public
void
testCreateAndSetValuePathDeclareVariableSetCollectionElement
(
)
{
assertXPathCreatePathAndSetValue
(
context
,
"$stringArray[2]"
,
"Value2"
,
"$stringArray[2]"
)
;
assertEquals
(
"Created <"
+
"$stringArray[1]"
+
">"
,
"Value1"
,
context
.
getValue
(
"$stringArray[1]"
)
)
;
}
public
void
testCreatePathExpandCollection
(
)
{
context
.
getVariables
(
)
.
declareVariable
(
"array"
,
new
String
[
]
{
"Value1"
}
)
;
assertXPathCreatePath
(
context
,
"$array[2]"
,
""
,
"$array[2]"
)
;
assertEquals
(
"Created <"
+
"$array[1]"
+
">"
,
"Value1"
,
context
.
getValue
(
"$array[1]"
)
)
;
}
public
void
testCreatePathAndSetValueExpandCollection
(
)
{
context
.
getVariables
(
)
.
declareVariable
(
"array"
,
new
String
[
]
{
"Value1"
}
)
;
assertXPathCreatePathAndSetValue
(
context
,
"$array[2]"
,
"Value2"
,
"$array[2]"
)
;
assertEquals
(
"Created <"
+
"$array[1]"
+
">"
,
"Value1"
,
context
.
getValue
(
"$array[1]"
)
)
;
}
public
void
testCreatePathDeclareVariableSetProperty
(
)
{
assertXPathCreatePath
(
context
,
"$test/boolean"
,
Boolean
.
FALSE
,
"$test/boolean"
)
;
}
public
void
testCreatePathAndSetValueDeclareVariableSetProperty
(
)
{
assertXPathCreatePathAndSetValue
(
context
,
"$test/boolean"
,
Boolean
.
TRUE
,
"$test/boolean"
)
;
}
public
void
testCreatePathDeclareVariableSetCollectionElementProperty
(
)
{
assertXPathCreatePath
(
context
,
"$testArray[2]/boolean"
,
Boolean
.
FALSE
,
"$testArray[2]/boolean"
)
;
}
public
void
testCreatePathAndSetValueDeclVarSetCollectionElementProperty
(
)
{
assertXPathCreatePathAndSetValue
(
context
,
"$testArray[2]/boolean"
,
Boolean
.
TRUE
,
"$testArray[2]/boolean"
)
;
}
public
void
testRemovePathUndeclareVariable
(
)
{
context
.
getVariables
(
)
.
declareVariable
(
"temp"
,
"temp"
)
;
context
.
removePath
(
"$temp"
)
;
assertTrue
(
"Undeclare variable"
,
!
context
.
getVariables
(
)
.
isDeclaredVariable
(
"temp"
)
)
;
}
public
void
testRemovePathArrayElement
(
)
{
context
.
getVariables
(
)
.
declareVariable
(
"temp"
,
new
String
[
]
{
"temp1"
,
"temp2"
}
)
;
context
.
removePath
(
"$temp[1]"
)
;
assertEquals
(
"Remove array element"
,
"temp2"
,
context
.
getValue
(
"$temp[1]"
)
)
;
}
public
void
testRemovePathCollectionElement
(
)
{
context
.
getVariables
(
)
.
declareVariable
(
"temp"
,
list
(
"temp1"
,
"temp2"
)
)
;
context
.
removePath
(
"$temp[1]"
)
;
assertEquals
(
"Remove collection element"
,
"temp2"
,
context
.
getValue
(
"$temp[1]"
)
)
;
}
public
void
testUnionOfVariableAndNode
(
)
throws
Exception
{
assertXPathValue
(
context
,
"count($a | /document/vendor/location)"
,
Double
.
valueOf
(
3
)
)
;
assertXPathValue
(
context
,
"count($a | /list)"
,
Double
.
valueOf
(
7
)
)
;
}
public
void
testIterateVariable
(
)
throws
Exception
{
assertXPathValueIterator
(
context
,
"$d"
,
list
(
"a"
,
"b"
)
)
;
assertXPathValue
(
context
,
"$d = 'a'"
,
Boolean
.
TRUE
)
;
assertXPathValue
(
context
,
"$d = 'b'"
,
Boolean
.
TRUE
)
;
}
}
<EOF>
