package
org
.
apache
.
commons
.
net
.
ntp
;
public
final
class
NtpUtils
{
public
static
String
getHostAddress
(
final
int
address
)
{
return
(
(
address
>
>
>
24
)
&
0xFF
)
+
"."
+
(
(
address
>
>
>
16
)
&
0xFF
)
+
"."
+
(
(
address
>
>
>
8
)
&
0xFF
)
+
"."
+
(
(
address
>
>
>
0
)
&
0xFF
)
;
}
public
static
String
getModeName
(
final
int
mode
)
{
switch
(
mode
)
{
case
NtpV3Packet
.
MODE_RESERVED
:
return
"Reserved"
;
case
NtpV3Packet
.
MODE_SYMMETRIC_ACTIVE
:
return
"Symmetric Active"
;
case
NtpV3Packet
.
MODE_SYMMETRIC_PASSIVE
:
return
"Symmetric Passive"
;
case
NtpV3Packet
.
MODE_CLIENT
:
return
"Client"
;
case
NtpV3Packet
.
MODE_SERVER
:
return
"Server"
;
case
NtpV3Packet
.
MODE_BROADCAST
:
return
"Broadcast"
;
case
NtpV3Packet
.
MODE_CONTROL_MESSAGE
:
return
"Control"
;
case
NtpV3Packet
.
MODE_PRIVATE
:
return
"Private"
;
default
:
return
"Unknown"
;
}
}
public
static
String
getRefAddress
(
final
NtpV3Packet
packet
)
{
final
int
address
=
(
packet
==
null
)
?
0
:
packet
.
getReferenceId
(
)
;
return
getHostAddress
(
address
)
;
}
public
static
String
getReferenceClock
(
final
NtpV3Packet
message
)
{
if
(
message
==
null
)
{
return
""
;
}
final
int
refId
=
message
.
getReferenceId
(
)
;
if
(
refId
==
0
)
{
return
""
;
}
final
StringBuilder
buf
=
new
StringBuilder
(
4
)
;
for
(
int
shiftBits
=
24
;
shiftBits
>=
0
;
shiftBits
-=
8
)
{
final
char
c
=
(
char
)
(
(
refId
>
>
>
shiftBits
)
&
0xff
)
;
if
(
c
==
0
)
{
break
;
}
if
(
!
Character
.
isLetterOrDigit
(
c
)
)
{
return
""
;
}
buf
.
append
(
c
)
;
}
return
buf
.
toString
(
)
;
}
}
<EOF>
