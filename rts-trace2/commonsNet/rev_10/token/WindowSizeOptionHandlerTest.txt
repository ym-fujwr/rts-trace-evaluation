package
org
.
apache
.
commons
.
net
.
telnet
;
public
class
WindowSizeOptionHandlerTest
extends
TelnetOptionHandlerTestAbstract
{
private
void
equalInts
(
final
int
a1
[
]
,
final
int
a2
[
]
)
{
assertEquals
(
"Arrays should be the same length"
,
a1
.
length
,
a2
.
length
)
;
for
(
int
ii
=
0
;
ii
<
a1
.
length
;
ii
++
)
{
assertEquals
(
"Array entry "
+
ii
+
" should match"
,
a1
[
ii
]
,
a2
[
ii
]
)
;
}
}
@
Override
protected
void
setUp
(
)
{
opthand1
=
new
WindowSizeOptionHandler
(
80
,
24
)
;
opthand2
=
new
WindowSizeOptionHandler
(
255
,
255
,
true
,
true
,
true
,
true
)
;
opthand3
=
new
WindowSizeOptionHandler
(
0xFFFF
,
0x00FF
,
false
,
false
,
false
,
false
)
;
}
@
Override
public
void
testAnswerSubnegotiation
(
)
{
final
int
subn
[
]
=
{
TelnetOption
.
WINDOW_SIZE
,
24
,
80
}
;
final
int
resp1
[
]
=
opthand1
.
answerSubnegotiation
(
subn
,
subn
.
length
)
;
final
int
resp2
[
]
=
opthand2
.
answerSubnegotiation
(
subn
,
subn
.
length
)
;
final
int
resp3
[
]
=
opthand3
.
answerSubnegotiation
(
subn
,
subn
.
length
)
;
assertNull
(
resp1
)
;
assertNull
(
resp2
)
;
assertNull
(
resp3
)
;
}
@
Override
public
void
testConstructors
(
)
{
assertEquals
(
TelnetOption
.
WINDOW_SIZE
,
opthand1
.
getOptionCode
(
)
)
;
super
.
testConstructors
(
)
;
}
@
Override
public
void
testStartSubnegotiation
(
)
{
assertNull
(
opthand1
.
startSubnegotiationRemote
(
)
)
;
assertNull
(
opthand2
.
startSubnegotiationRemote
(
)
)
;
assertNull
(
opthand3
.
startSubnegotiationRemote
(
)
)
;
}
public
void
testStartSubnegotiationLocal
(
)
{
final
int
[
]
exp1
=
{
31
,
0
,
80
,
0
,
24
}
;
final
int
[
]
start1
=
opthand1
.
startSubnegotiationLocal
(
)
;
assertEquals
(
5
,
start1
.
length
)
;
equalInts
(
exp1
,
start1
)
;
final
int
[
]
exp2
=
{
31
,
0
,
255
,
255
,
0
,
255
,
255
}
;
final
int
[
]
start2
=
opthand2
.
startSubnegotiationLocal
(
)
;
equalInts
(
exp2
,
start2
)
;
final
int
[
]
exp3
=
{
31
,
255
,
255
,
255
,
255
,
0
,
255
,
255
}
;
final
int
[
]
start3
=
opthand3
.
startSubnegotiationLocal
(
)
;
equalInts
(
exp3
,
start3
)
;
}
}
<EOF>
