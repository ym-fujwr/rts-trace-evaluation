package
org
.
apache
.
commons
.
net
;
import
java
.
io
.
PrintStream
;
import
java
.
io
.
PrintWriter
;
public
class
PrintCommandListener
implements
ProtocolCommandListener
{
private
final
PrintWriter
writer
;
private
final
boolean
nologin
;
private
final
char
eolMarker
;
private
final
boolean
directionMarker
;
public
PrintCommandListener
(
final
PrintStream
stream
)
{
this
(
new
PrintWriter
(
stream
)
)
;
}
public
PrintCommandListener
(
final
PrintStream
stream
,
final
boolean
suppressLogin
)
{
this
(
new
PrintWriter
(
stream
)
,
suppressLogin
)
;
}
public
PrintCommandListener
(
final
PrintStream
stream
,
final
boolean
suppressLogin
,
final
char
eolMarker
)
{
this
(
new
PrintWriter
(
stream
)
,
suppressLogin
,
eolMarker
)
;
}
public
PrintCommandListener
(
final
PrintStream
stream
,
final
boolean
suppressLogin
,
final
char
eolMarker
,
final
boolean
showDirection
)
{
this
(
new
PrintWriter
(
stream
)
,
suppressLogin
,
eolMarker
,
showDirection
)
;
}
public
PrintCommandListener
(
final
PrintWriter
writer
)
{
this
(
writer
,
false
)
;
}
public
PrintCommandListener
(
final
PrintWriter
writer
,
final
boolean
suppressLogin
)
{
this
(
writer
,
suppressLogin
,
(
char
)
0
)
;
}
public
PrintCommandListener
(
final
PrintWriter
writer
,
final
boolean
suppressLogin
,
final
char
eolMarker
)
{
this
(
writer
,
suppressLogin
,
eolMarker
,
false
)
;
}
public
PrintCommandListener
(
final
PrintWriter
writer
,
final
boolean
suppressLogin
,
final
char
eolMarker
,
final
boolean
showDirection
)
{
this
.
writer
=
writer
;
this
.
nologin
=
suppressLogin
;
this
.
eolMarker
=
eolMarker
;
this
.
directionMarker
=
showDirection
;
}
private
String
getPrintableString
(
final
String
msg
)
{
if
(
eolMarker
==
0
)
{
return
msg
;
}
final
int
pos
=
msg
.
indexOf
(
SocketClient
.
NETASCII_EOL
)
;
if
(
pos
>
0
)
{
final
StringBuilder
sb
=
new
StringBuilder
(
)
;
sb
.
append
(
msg
.
substring
(
0
,
pos
)
)
;
sb
.
append
(
eolMarker
)
;
sb
.
append
(
msg
.
substring
(
pos
)
)
;
return
sb
.
toString
(
)
;
}
return
msg
;
}
@
Override
public
void
protocolCommandSent
(
final
ProtocolCommandEvent
event
)
{
if
(
directionMarker
)
{
writer
.
print
(
"> "
)
;
}
if
(
nologin
)
{
final
String
cmd
=
event
.
getCommand
(
)
;
if
(
"PASS"
.
equalsIgnoreCase
(
cmd
)
||
"USER"
.
equalsIgnoreCase
(
cmd
)
)
{
writer
.
print
(
cmd
)
;
writer
.
println
(
" *******"
)
;
}
else
{
final
String
IMAP_LOGIN
=
"LOGIN"
;
if
(
IMAP_LOGIN
.
equalsIgnoreCase
(
cmd
)
)
{
String
msg
=
event
.
getMessage
(
)
;
msg
=
msg
.
substring
(
0
,
msg
.
indexOf
(
IMAP_LOGIN
)
+
IMAP_LOGIN
.
length
(
)
)
;
writer
.
print
(
msg
)
;
writer
.
println
(
" *******"
)
;
}
else
{
writer
.
print
(
getPrintableString
(
event
.
getMessage
(
)
)
)
;
}
}
}
else
{
writer
.
print
(
getPrintableString
(
event
.
getMessage
(
)
)
)
;
}
writer
.
flush
(
)
;
}
@
Override
public
void
protocolReplyReceived
(
final
ProtocolCommandEvent
event
)
{
if
(
directionMarker
)
{
writer
.
print
(
"< "
)
;
}
writer
.
print
(
event
.
getMessage
(
)
)
;
writer
.
flush
(
)
;
}
}
<EOF>
