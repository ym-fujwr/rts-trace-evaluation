package
org
.
apache
.
commons
.
net
.
tftp
;
import
java
.
net
.
DatagramPacket
;
import
java
.
net
.
InetAddress
;
public
final
class
TFTPErrorPacket
extends
TFTPPacket
{
public
static
final
int
UNDEFINED
=
0
;
public
static
final
int
FILE_NOT_FOUND
=
1
;
public
static
final
int
ACCESS_VIOLATION
=
2
;
public
static
final
int
OUT_OF_SPACE
=
3
;
public
static
final
int
ILLEGAL_OPERATION
=
4
;
public
static
final
int
UNKNOWN_TID
=
5
;
public
static
final
int
FILE_EXISTS
=
6
;
public
static
final
int
NO_SUCH_USER
=
7
;
private
final
int
error
;
private
final
String
message
;
TFTPErrorPacket
(
final
DatagramPacket
datagram
)
throws
TFTPPacketException
{
super
(
TFTPPacket
.
ERROR
,
datagram
.
getAddress
(
)
,
datagram
.
getPort
(
)
)
;
int
index
;
final
int
length
;
final
byte
[
]
data
;
final
StringBuilder
buffer
;
data
=
datagram
.
getData
(
)
;
length
=
datagram
.
getLength
(
)
;
if
(
getType
(
)
!=
data
[
1
]
)
{
throw
new
TFTPPacketException
(
"TFTP operator code does not match type."
)
;
}
error
=
(
data
[
2
]
&
0xff
)
<
<
8
|
data
[
3
]
&
0xff
;
if
(
length
<
5
)
{
throw
new
TFTPPacketException
(
"Bad error packet. No message."
)
;
}
index
=
4
;
buffer
=
new
StringBuilder
(
)
;
while
(
index
<
length
&&
data
[
index
]
!=
0
)
{
buffer
.
append
(
(
char
)
data
[
index
]
)
;
++
index
;
}
message
=
buffer
.
toString
(
)
;
}
public
TFTPErrorPacket
(
final
InetAddress
destination
,
final
int
port
,
final
int
error
,
final
String
message
)
{
super
(
TFTPPacket
.
ERROR
,
destination
,
port
)
;
this
.
error
=
error
;
this
.
message
=
message
;
}
public
int
getError
(
)
{
return
error
;
}
public
String
getMessage
(
)
{
return
message
;
}
@
Override
public
DatagramPacket
newDatagram
(
)
{
final
byte
[
]
data
;
final
int
length
;
length
=
message
.
length
(
)
;
data
=
new
byte
[
length
+
5
]
;
data
[
0
]
=
0
;
data
[
1
]
=
(
byte
)
type
;
data
[
2
]
=
(
byte
)
(
(
error
&
0xffff
)
>
>
8
)
;
data
[
3
]
=
(
byte
)
(
error
&
0xff
)
;
System
.
arraycopy
(
message
.
getBytes
(
)
,
0
,
data
,
4
,
length
)
;
data
[
length
+
4
]
=
0
;
return
new
DatagramPacket
(
data
,
data
.
length
,
address
,
port
)
;
}
@
Override
DatagramPacket
newDatagram
(
final
DatagramPacket
datagram
,
final
byte
[
]
data
)
{
final
int
length
;
length
=
message
.
length
(
)
;
data
[
0
]
=
0
;
data
[
1
]
=
(
byte
)
type
;
data
[
2
]
=
(
byte
)
(
(
error
&
0xffff
)
>
>
8
)
;
data
[
3
]
=
(
byte
)
(
error
&
0xff
)
;
System
.
arraycopy
(
message
.
getBytes
(
)
,
0
,
data
,
4
,
length
)
;
data
[
length
+
4
]
=
0
;
datagram
.
setAddress
(
address
)
;
datagram
.
setPort
(
port
)
;
datagram
.
setData
(
data
)
;
datagram
.
setLength
(
length
+
4
)
;
return
datagram
;
}
@
Override
public
String
toString
(
)
{
return
super
.
toString
(
)
+
" ERR "
+
error
+
" "
+
message
;
}
}
<EOF>
