package
org
.
apache
.
commons
.
net
.
examples
.
ntp
;
import
java
.
io
.
IOException
;
import
java
.
net
.
InetAddress
;
import
java
.
net
.
SocketException
;
import
java
.
net
.
UnknownHostException
;
import
java
.
text
.
NumberFormat
;
import
org
.
apache
.
commons
.
net
.
ntp
.
NTPUDPClient
;
import
org
.
apache
.
commons
.
net
.
ntp
.
NtpUtils
;
import
org
.
apache
.
commons
.
net
.
ntp
.
NtpV3Packet
;
import
org
.
apache
.
commons
.
net
.
ntp
.
TimeInfo
;
import
org
.
apache
.
commons
.
net
.
ntp
.
TimeStamp
;
public
final
class
NTPClient
{
private
static
final
NumberFormat
numberFormat
=
new
java
.
text
.
DecimalFormat
(
"0.00"
)
;
public
static
void
main
(
final
String
[
]
args
)
{
if
(
args
.
length
==
0
)
{
System
.
err
.
println
(
"Usage: NTPClient <hostname-or-address-list>"
)
;
System
.
exit
(
1
)
;
}
final
NTPUDPClient
client
=
new
NTPUDPClient
(
)
;
client
.
setDefaultTimeout
(
10000
)
;
try
{
client
.
open
(
)
;
for
(
final
String
arg
:
args
)
{
System
.
out
.
println
(
)
;
try
{
final
InetAddress
hostAddr
=
InetAddress
.
getByName
(
arg
)
;
System
.
out
.
println
(
"> "
+
hostAddr
.
getHostName
(
)
+
"/"
+
hostAddr
.
getHostAddress
(
)
)
;
final
TimeInfo
info
=
client
.
getTime
(
hostAddr
)
;
processResponse
(
info
)
;
}
catch
(
final
IOException
ioe
)
{
ioe
.
printStackTrace
(
)
;
}
}
}
catch
(
final
SocketException
e
)
{
e
.
printStackTrace
(
)
;
}
client
.
close
(
)
;
}
public
static
void
processResponse
(
final
TimeInfo
info
)
{
final
NtpV3Packet
message
=
info
.
getMessage
(
)
;
final
int
stratum
=
message
.
getStratum
(
)
;
final
String
refType
;
if
(
stratum
<=
0
)
{
refType
=
"(Unspecified or Unavailable)"
;
}
else
if
(
stratum
==
1
)
{
refType
=
"(Primary Reference; e.g., GPS)"
;
}
else
{
refType
=
"(Secondary Reference; e.g. via NTP or SNTP)"
;
}
System
.
out
.
println
(
" Stratum: "
+
stratum
+
" "
+
refType
)
;
final
int
version
=
message
.
getVersion
(
)
;
final
int
li
=
message
.
getLeapIndicator
(
)
;
System
.
out
.
println
(
" leap="
+
li
+
", version="
+
version
+
", precision="
+
message
.
getPrecision
(
)
)
;
System
.
out
.
println
(
" mode: "
+
message
.
getModeName
(
)
+
" ("
+
message
.
getMode
(
)
+
")"
)
;
final
int
poll
=
message
.
getPoll
(
)
;
System
.
out
.
println
(
" poll: "
+
(
poll
<=
0
?
1
:
(
int
)
Math
.
pow
(
2
,
poll
)
)
+
" seconds"
+
" (2 ** "
+
poll
+
")"
)
;
final
double
disp
=
message
.
getRootDispersionInMillisDouble
(
)
;
System
.
out
.
println
(
" rootdelay="
+
numberFormat
.
format
(
message
.
getRootDelayInMillisDouble
(
)
)
+
", rootdispersion(ms): "
+
numberFormat
.
format
(
disp
)
)
;
final
int
refId
=
message
.
getReferenceId
(
)
;
String
refAddr
=
NtpUtils
.
getHostAddress
(
refId
)
;
String
refName
=
null
;
if
(
refId
!=
0
)
{
if
(
refAddr
.
equals
(
"127.127.1.0"
)
)
{
refName
=
"LOCAL"
;
}
else
if
(
stratum
>=
2
)
{
if
(
!
refAddr
.
startsWith
(
"127.127"
)
)
{
try
{
final
InetAddress
addr
=
InetAddress
.
getByName
(
refAddr
)
;
final
String
name
=
addr
.
getHostName
(
)
;
if
(
name
!=
null
&&
!
name
.
equals
(
refAddr
)
)
{
refName
=
name
;
}
}
catch
(
final
UnknownHostException
e
)
{
refName
=
NtpUtils
.
getReferenceClock
(
message
)
;
}
}
}
else
if
(
version
>=
3
&&
(
stratum
==
0
||
stratum
==
1
)
)
{
refName
=
NtpUtils
.
getReferenceClock
(
message
)
;
}
}
if
(
refName
!=
null
&&
refName
.
length
(
)
>
1
)
{
refAddr
+=
" ("
+
refName
+
")"
;
}
System
.
out
.
println
(
" Reference Identifier:\t"
+
refAddr
)
;
final
TimeStamp
refNtpTime
=
message
.
getReferenceTimeStamp
(
)
;
System
.
out
.
println
(
" Reference Timestamp:\t"
+
refNtpTime
+
"  "
+
refNtpTime
.
toDateString
(
)
)
;
final
TimeStamp
origNtpTime
=
message
.
getOriginateTimeStamp
(
)
;
System
.
out
.
println
(
" Originate Timestamp:\t"
+
origNtpTime
+
"  "
+
origNtpTime
.
toDateString
(
)
)
;
final
long
destTimeMillis
=
info
.
getReturnTime
(
)
;
final
TimeStamp
rcvNtpTime
=
message
.
getReceiveTimeStamp
(
)
;
System
.
out
.
println
(
" Receive Timestamp:\t"
+
rcvNtpTime
+
"  "
+
rcvNtpTime
.
toDateString
(
)
)
;
final
TimeStamp
xmitNtpTime
=
message
.
getTransmitTimeStamp
(
)
;
System
.
out
.
println
(
" Transmit Timestamp:\t"
+
xmitNtpTime
+
"  "
+
xmitNtpTime
.
toDateString
(
)
)
;
final
TimeStamp
destNtpTime
=
TimeStamp
.
getNtpTime
(
destTimeMillis
)
;
System
.
out
.
println
(
" Destination Timestamp:\t"
+
destNtpTime
+
"  "
+
destNtpTime
.
toDateString
(
)
)
;
info
.
computeDetails
(
)
;
final
Long
offsetMillis
=
info
.
getOffset
(
)
;
final
Long
delayMillis
=
info
.
getDelay
(
)
;
final
String
delay
=
delayMillis
==
null
?
"N/A"
:
delayMillis
.
toString
(
)
;
final
String
offset
=
offsetMillis
==
null
?
"N/A"
:
offsetMillis
.
toString
(
)
;
System
.
out
.
println
(
" Roundtrip delay(ms)="
+
delay
+
", clock offset(ms)="
+
offset
)
;
}
}
<EOF>
