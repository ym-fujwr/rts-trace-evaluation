package
org
.
apache
.
commons
.
net
.
imap
;
import
java
.
io
.
IOException
;
public
class
IMAPClient
extends
IMAP
{
public
enum
FETCH_ITEM_NAMES
{
ALL
,
FAST
,
FULL
,
BODY
,
BODYSTRUCTURE
,
ENVELOPE
,
FLAGS
,
INTERNALDATE
,
RFC822
,
UID
}
public
enum
SEARCH_CRITERIA
{
ALL
,
ANSWERED
,
BCC
,
BEFORE
,
BODY
,
CC
,
DELETED
,
DRAFT
,
FLAGGED
,
FROM
,
HEADER
,
KEYWORD
,
LARGER
,
NEW
,
NOT
,
OLD
,
ON
,
OR
,
RECENT
,
SEEN
,
SENTBEFORE
,
SENTON
,
SENTSINCE
,
SINCE
,
SMALLER
,
SUBJECT
,
TEXT
,
TO
,
UID
,
UNANSWERED
,
UNDELETED
,
UNDRAFT
,
UNFLAGGED
,
UNKEYWORD
,
UNSEEN
}
public
enum
STATUS_DATA_ITEMS
{
MESSAGES
,
RECENT
,
UIDNEXT
,
UIDVALIDITY
,
UNSEEN
}
private
static
final
char
DQUOTE
=
'"'
;
private
static
final
String
DQUOTE_S
=
"\""
;
@
Deprecated
public
boolean
append
(
final
String
mailboxName
)
throws
IOException
{
return
append
(
mailboxName
,
null
,
null
)
;
}
@
Deprecated
public
boolean
append
(
final
String
mailboxName
,
final
String
flags
,
final
String
datetime
)
throws
IOException
{
String
args
=
mailboxName
;
if
(
flags
!=
null
)
{
args
+=
" "
+
flags
;
}
if
(
datetime
!=
null
)
{
if
(
datetime
.
charAt
(
0
)
==
'{'
)
{
args
+=
" "
+
datetime
;
}
else
{
args
+=
" {"
+
datetime
+
"}"
;
}
}
return
doCommand
(
IMAPCommand
.
APPEND
,
args
)
;
}
public
boolean
append
(
final
String
mailboxName
,
final
String
flags
,
final
String
datetime
,
final
String
message
)
throws
IOException
{
final
StringBuilder
args
=
new
StringBuilder
(
quoteMailboxName
(
mailboxName
)
)
;
if
(
flags
!=
null
)
{
args
.
append
(
" "
)
.
append
(
flags
)
;
}
if
(
datetime
!=
null
)
{
args
.
append
(
" "
)
;
if
(
datetime
.
charAt
(
0
)
==
DQUOTE
)
{
args
.
append
(
datetime
)
;
}
else
{
args
.
append
(
DQUOTE
)
.
append
(
datetime
)
.
append
(
DQUOTE
)
;
}
}
args
.
append
(
" "
)
;
if
(
message
.
startsWith
(
DQUOTE_S
)
&&
message
.
endsWith
(
DQUOTE_S
)
)
{
args
.
append
(
message
)
;
return
doCommand
(
IMAPCommand
.
APPEND
,
args
.
toString
(
)
)
;
}
args
.
append
(
'{'
)
.
append
(
message
.
getBytes
(
IMAP
.
__DEFAULT_ENCODING
)
.
length
)
.
append
(
'}'
)
;
final
int
status
=
sendCommand
(
IMAPCommand
.
APPEND
,
args
.
toString
(
)
)
;
return
IMAPReply
.
isContinuation
(
status
)
&&
IMAPReply
.
isSuccess
(
sendData
(
message
)
)
;
}
public
boolean
capability
(
)
throws
IOException
{
return
doCommand
(
IMAPCommand
.
CAPABILITY
)
;
}
public
boolean
check
(
)
throws
IOException
{
return
doCommand
(
IMAPCommand
.
CHECK
)
;
}
public
boolean
close
(
)
throws
IOException
{
return
doCommand
(
IMAPCommand
.
CLOSE
)
;
}
public
boolean
copy
(
final
String
sequenceSet
,
final
String
mailboxName
)
throws
IOException
{
return
doCommand
(
IMAPCommand
.
COPY
,
sequenceSet
+
" "
+
quoteMailboxName
(
mailboxName
)
)
;
}
public
boolean
create
(
final
String
mailboxName
)
throws
IOException
{
return
doCommand
(
IMAPCommand
.
CREATE
,
quoteMailboxName
(
mailboxName
)
)
;
}
public
boolean
delete
(
final
String
mailboxName
)
throws
IOException
{
return
doCommand
(
IMAPCommand
.
DELETE
,
quoteMailboxName
(
mailboxName
)
)
;
}
public
boolean
examine
(
final
String
mailboxName
)
throws
IOException
{
return
doCommand
(
IMAPCommand
.
EXAMINE
,
quoteMailboxName
(
mailboxName
)
)
;
}
public
boolean
expunge
(
)
throws
IOException
{
return
doCommand
(
IMAPCommand
.
EXPUNGE
)
;
}
public
boolean
fetch
(
final
String
sequenceSet
,
final
String
itemNames
)
throws
IOException
{
return
doCommand
(
IMAPCommand
.
FETCH
,
sequenceSet
+
" "
+
itemNames
)
;
}
public
boolean
list
(
final
String
refName
,
final
String
mailboxName
)
throws
IOException
{
return
doCommand
(
IMAPCommand
.
LIST
,
quoteMailboxName
(
refName
)
+
" "
+
quoteMailboxName
(
mailboxName
)
)
;
}
public
boolean
login
(
final
String
username
,
final
String
password
)
throws
IOException
{
if
(
getState
(
)
!=
IMAP
.
IMAPState
.
NOT_AUTH_STATE
)
{
return
false
;
}
if
(
!
doCommand
(
IMAPCommand
.
LOGIN
,
username
+
" "
+
password
)
)
{
return
false
;
}
setState
(
IMAP
.
IMAPState
.
AUTH_STATE
)
;
return
true
;
}
public
boolean
logout
(
)
throws
IOException
{
return
doCommand
(
IMAPCommand
.
LOGOUT
)
;
}
public
boolean
lsub
(
final
String
refName
,
final
String
mailboxName
)
throws
IOException
{
return
doCommand
(
IMAPCommand
.
LSUB
,
quoteMailboxName
(
refName
)
+
" "
+
quoteMailboxName
(
mailboxName
)
)
;
}
public
boolean
noop
(
)
throws
IOException
{
return
doCommand
(
IMAPCommand
.
NOOP
)
;
}
public
boolean
rename
(
final
String
oldMailboxName
,
final
String
newMailboxName
)
throws
IOException
{
return
doCommand
(
IMAPCommand
.
RENAME
,
quoteMailboxName
(
oldMailboxName
)
+
" "
+
quoteMailboxName
(
newMailboxName
)
)
;
}
public
boolean
search
(
final
String
criteria
)
throws
IOException
{
return
search
(
null
,
criteria
)
;
}
public
boolean
search
(
final
String
charset
,
final
String
criteria
)
throws
IOException
{
String
args
=
""
;
if
(
charset
!=
null
)
{
args
+=
"CHARSET "
+
charset
;
}
args
+=
criteria
;
return
doCommand
(
IMAPCommand
.
SEARCH
,
args
)
;
}
public
boolean
select
(
final
String
mailboxName
)
throws
IOException
{
return
doCommand
(
IMAPCommand
.
SELECT
,
quoteMailboxName
(
mailboxName
)
)
;
}
public
boolean
status
(
final
String
mailboxName
,
final
String
[
]
itemNames
)
throws
IOException
{
if
(
itemNames
==
null
||
itemNames
.
length
<
1
)
{
throw
new
IllegalArgumentException
(
"STATUS command requires at least one data item name"
)
;
}
final
StringBuilder
sb
=
new
StringBuilder
(
)
;
sb
.
append
(
quoteMailboxName
(
mailboxName
)
)
;
sb
.
append
(
" ("
)
;
for
(
int
i
=
0
;
i
<
itemNames
.
length
;
i
++
)
{
if
(
i
>
0
)
{
sb
.
append
(
" "
)
;
}
sb
.
append
(
itemNames
[
i
]
)
;
}
sb
.
append
(
")"
)
;
return
doCommand
(
IMAPCommand
.
STATUS
,
sb
.
toString
(
)
)
;
}
public
boolean
store
(
final
String
sequenceSet
,
final
String
itemNames
,
final
String
itemValues
)
throws
IOException
{
return
doCommand
(
IMAPCommand
.
STORE
,
sequenceSet
+
" "
+
itemNames
+
" "
+
itemValues
)
;
}
public
boolean
subscribe
(
final
String
mailboxName
)
throws
IOException
{
return
doCommand
(
IMAPCommand
.
SUBSCRIBE
,
quoteMailboxName
(
mailboxName
)
)
;
}
public
boolean
uid
(
final
String
command
,
final
String
commandArgs
)
throws
IOException
{
return
doCommand
(
IMAPCommand
.
UID
,
command
+
" "
+
commandArgs
)
;
}
public
boolean
unsubscribe
(
final
String
mailboxName
)
throws
IOException
{
return
doCommand
(
IMAPCommand
.
UNSUBSCRIBE
,
quoteMailboxName
(
mailboxName
)
)
;
}
}
<EOF>
