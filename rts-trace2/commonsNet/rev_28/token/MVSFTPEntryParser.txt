package
org
.
apache
.
commons
.
net
.
ftp
.
parser
;
import
java
.
text
.
ParseException
;
import
java
.
util
.
List
;
import
org
.
apache
.
commons
.
net
.
ftp
.
FTPClientConfig
;
import
org
.
apache
.
commons
.
net
.
ftp
.
FTPFile
;
public
class
MVSFTPEntryParser
extends
ConfigurableFTPFileEntryParserImpl
{
static
final
int
UNKNOWN_LIST_TYPE
=
-
1
;
static
final
int
FILE_LIST_TYPE
=
0
;
static
final
int
MEMBER_LIST_TYPE
=
1
;
static
final
int
UNIX_LIST_TYPE
=
2
;
static
final
int
JES_LEVEL_1_LIST_TYPE
=
3
;
static
final
int
JES_LEVEL_2_LIST_TYPE
=
4
;
static
final
String
DEFAULT_DATE_FORMAT
=
"yyyy/MM/dd HH:mm"
;
static
final
String
FILE_LIST_REGEX
=
"\\S+\\s+"
+
"\\S+\\s+"
+
"\\S+\\s+"
+
"\\S+\\s+"
+
"(?:\\S+\\s+)?"
+
"(?:F|FB|V|VB|U)\\s+"
+
"\\S+\\s+"
+
"\\S+\\s+"
+
"(PS|PO|PO-E)\\s+"
+
"(\\S+)\\s*"
;
static
final
String
MEMBER_LIST_REGEX
=
"(\\S+)\\s+"
+
"\\S+\\s+"
+
"\\S+\\s+"
+
"(\\S+)\\s+"
+
"(\\S+)\\s+"
+
"\\S+\\s+"
+
"\\S+\\s+"
+
"\\S+\\s+"
+
"\\S+\\s*"
;
static
final
String
JES_LEVEL_1_LIST_REGEX
=
"(\\S+)\\s+"
+
"(\\S+)\\s+"
+
"(\\S+)\\s+"
+
"(\\S+)\\s+"
+
"(\\S+)\\s+"
+
"(\\S+)\\s*"
;
static
final
String
JES_LEVEL_2_LIST_REGEX
=
"(\\S+)\\s+"
+
"(\\S+)\\s+"
+
"(\\S+)\\s+"
+
"(\\S+)\\s+"
+
"(\\S+)\\s+"
+
"(\\S+).*"
;
private
int
isType
=
UNKNOWN_LIST_TYPE
;
private
UnixFTPEntryParser
unixFTPEntryParser
;
public
MVSFTPEntryParser
(
)
{
super
(
""
)
;
super
.
configure
(
null
)
;
}
@
Override
protected
FTPClientConfig
getDefaultConfiguration
(
)
{
return
new
FTPClientConfig
(
FTPClientConfig
.
SYST_MVS
,
DEFAULT_DATE_FORMAT
,
null
)
;
}
private
FTPFile
parseFileList
(
final
String
entry
)
{
if
(
matches
(
entry
)
)
{
final
FTPFile
file
=
new
FTPFile
(
)
;
file
.
setRawListing
(
entry
)
;
final
String
name
=
group
(
2
)
;
final
String
dsorg
=
group
(
1
)
;
file
.
setName
(
name
)
;
if
(
"PS"
.
equals
(
dsorg
)
)
{
file
.
setType
(
FTPFile
.
FILE_TYPE
)
;
}
else
if
(
"PO"
.
equals
(
dsorg
)
||
"PO-E"
.
equals
(
dsorg
)
)
{
file
.
setType
(
FTPFile
.
DIRECTORY_TYPE
)
;
}
else
{
return
null
;
}
return
file
;
}
return
null
;
}
@
Override
public
FTPFile
parseFTPEntry
(
final
String
entry
)
{
if
(
isType
==
FILE_LIST_TYPE
)
{
return
parseFileList
(
entry
)
;
}
if
(
isType
==
MEMBER_LIST_TYPE
)
{
return
parseMemberList
(
entry
)
;
}
if
(
isType
==
UNIX_LIST_TYPE
)
{
return
unixFTPEntryParser
.
parseFTPEntry
(
entry
)
;
}
if
(
isType
==
JES_LEVEL_1_LIST_TYPE
)
{
return
parseJeslevel1List
(
entry
)
;
}
if
(
isType
==
JES_LEVEL_2_LIST_TYPE
)
{
return
parseJeslevel2List
(
entry
)
;
}
return
null
;
}
private
FTPFile
parseJeslevel1List
(
final
String
entry
)
{
if
(
matches
(
entry
)
)
{
final
FTPFile
file
=
new
FTPFile
(
)
;
if
(
group
(
3
)
.
equalsIgnoreCase
(
"OUTPUT"
)
)
{
file
.
setRawListing
(
entry
)
;
final
String
name
=
group
(
2
)
;
file
.
setName
(
name
)
;
file
.
setType
(
FTPFile
.
FILE_TYPE
)
;
return
file
;
}
}
return
null
;
}
private
FTPFile
parseJeslevel2List
(
final
String
entry
)
{
if
(
matches
(
entry
)
)
{
final
FTPFile
file
=
new
FTPFile
(
)
;
if
(
group
(
4
)
.
equalsIgnoreCase
(
"OUTPUT"
)
)
{
file
.
setRawListing
(
entry
)
;
final
String
name
=
group
(
2
)
;
file
.
setName
(
name
)
;
file
.
setType
(
FTPFile
.
FILE_TYPE
)
;
return
file
;
}
}
return
null
;
}
private
FTPFile
parseMemberList
(
final
String
entry
)
{
final
FTPFile
file
=
new
FTPFile
(
)
;
if
(
matches
(
entry
)
)
{
file
.
setRawListing
(
entry
)
;
final
String
name
=
group
(
1
)
;
final
String
datestr
=
group
(
2
)
+
" "
+
group
(
3
)
;
file
.
setName
(
name
)
;
file
.
setType
(
FTPFile
.
FILE_TYPE
)
;
try
{
file
.
setTimestamp
(
super
.
parseTimestamp
(
datestr
)
)
;
}
catch
(
final
ParseException
e
)
{
}
return
file
;
}
if
(
entry
!=
null
&&
!
entry
.
trim
(
)
.
isEmpty
(
)
)
{
file
.
setRawListing
(
entry
)
;
final
String
name
=
entry
.
split
(
" "
)
[
0
]
;
file
.
setName
(
name
)
;
file
.
setType
(
FTPFile
.
FILE_TYPE
)
;
return
file
;
}
return
null
;
}
@
Override
public
List
<
String
>
preParse
(
final
List
<
String
>
orig
)
{
if
(
orig
!=
null
&&
!
orig
.
isEmpty
(
)
)
{
final
String
header
=
orig
.
get
(
0
)
;
if
(
header
.
contains
(
"Volume"
)
&&
header
.
contains
(
"Dsname"
)
)
{
setType
(
FILE_LIST_TYPE
)
;
super
.
setRegex
(
FILE_LIST_REGEX
)
;
}
else
if
(
header
.
contains
(
"Name"
)
&&
header
.
contains
(
"Id"
)
)
{
setType
(
MEMBER_LIST_TYPE
)
;
super
.
setRegex
(
MEMBER_LIST_REGEX
)
;
}
else
if
(
header
.
indexOf
(
"total"
)
==
0
)
{
setType
(
UNIX_LIST_TYPE
)
;
unixFTPEntryParser
=
new
UnixFTPEntryParser
(
)
;
}
else
if
(
header
.
indexOf
(
"Spool Files"
)
>=
30
)
{
setType
(
JES_LEVEL_1_LIST_TYPE
)
;
super
.
setRegex
(
JES_LEVEL_1_LIST_REGEX
)
;
}
else
if
(
header
.
indexOf
(
"JOBNAME"
)
==
0
&&
header
.
indexOf
(
"JOBID"
)
>
8
)
{
setType
(
JES_LEVEL_2_LIST_TYPE
)
;
super
.
setRegex
(
JES_LEVEL_2_LIST_REGEX
)
;
}
else
{
setType
(
UNKNOWN_LIST_TYPE
)
;
}
if
(
isType
!=
JES_LEVEL_1_LIST_TYPE
)
{
orig
.
remove
(
0
)
;
}
}
return
orig
;
}
void
setType
(
final
int
type
)
{
isType
=
type
;
}
}
<EOF>
