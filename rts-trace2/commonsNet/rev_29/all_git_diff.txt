diff --git a/checkstyle.xml b/checkstyle.xml
index 787cb1aef..a34cbfc10 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -52 +52 @@ limitations under the License.
-    <property name="max" value="132"/>
+    <property name="max" value="160"/>
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index cb8160b18..f2dbd6859 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -76,0 +77,3 @@ The <action> type attribute can be add,update,fix,remove.
+      <action type="fix" dev="ggregory" due-to="Jochen Wiedmann, Gary Gregory">
+        FTP client trusts the host from PASV response by default.
+      </action>
diff --git a/src/main/java/org/apache/commons/net/ftp/FTPClient.java b/src/main/java/org/apache/commons/net/ftp/FTPClient.java
index 09b5f02fa..ec91c6dbb 100644
--- a/src/main/java/org/apache/commons/net/ftp/FTPClient.java
+++ b/src/main/java/org/apache/commons/net/ftp/FTPClient.java
@@ -298 +297,0 @@ import org.apache.commons.net.util.NetConstants;
- *
@@ -301,0 +301 @@ public class FTPClient extends FTP implements Configurable {
+
@@ -439,0 +440,12 @@ public class FTPClient extends FTP implements Configurable {
+    /**
+     * The system property that defines the default for {@link #isIpAddressFromPasvResponse()}. This property, if present, configures the default for the
+     * following: If the client receives the servers response for a PASV request, then that response will contain an IP address. If this property is true, then
+     * the client will use that IP address, as requested by the server. This is compatible to version {@code 3.8.0}, and before. If this property is false, or
+     * absent, then the client will ignore that IP address, and instead use the remote address of the control connection.
+     *
+     * @see #isIpAddressFromPasvResponse()
+     * @see #setIpAddressFromPasvResponse(boolean)
+     * @since 3.9.0
+     */
+    public static final String FTP_IP_ADDRESS_FROM_PASV_RESPONSE = "org.apache.commons.net.ftp.ipAddressFromPasvResponse";
+
@@ -627,0 +640,2 @@ public class FTPClient extends FTP implements Configurable {
+    private boolean ipAddressFromPasvResponse = Boolean.parseBoolean(System.getProperty(FTPClient.FTP_IP_ADDRESS_FROM_PASV_RESPONSE));
+
@@ -931,2 +945 @@ public class FTPClient extends FTP implements Configurable {
-            throw new MalformedServerReplyException(
-                "Could not parse passive host information.\nServer Reply: " + reply);
+            throw new MalformedServerReplyException("Could not parse passive host information.\nServer Reply: " + reply);
@@ -935,2 +948,3 @@ public class FTPClient extends FTP implements Configurable {
-        this.passiveHost = "0,0,0,0".equals(m.group(1)) ? _socket_.getInetAddress().getHostAddress()
-            : m.group(1).replace(',', '.'); // Fix up to look like IP address
+        int pasvPort;
+        // Fix up to look like IP address
+        String pasvHost = "0,0,0,0".equals(m.group(1)) ? _socket_.getInetAddress().getHostAddress() : m.group(1).replace(',', '.');
@@ -941 +955 @@ public class FTPClient extends FTP implements Configurable {
-            passivePort = (oct1 << 8) | oct2;
+            pasvPort = (oct1 << 8) | oct2;
@@ -943,2 +957 @@ public class FTPClient extends FTP implements Configurable {
-            throw new MalformedServerReplyException(
-                "Could not parse passive port information.\nServer Reply: " + reply);
+            throw new MalformedServerReplyException("Could not parse passive port information.\nServer Reply: " + reply);
@@ -947,7 +960,11 @@ public class FTPClient extends FTP implements Configurable {
-        if (passiveNatWorkaroundStrategy != null) {
-            try {
-                final String newPassiveHost = passiveNatWorkaroundStrategy.resolve(this.passiveHost);
-                if (!this.passiveHost.equals(newPassiveHost)) {
-                    fireReplyReceived(0,
-                        "[Replacing PASV mode reply address " + this.passiveHost + " with " + newPassiveHost + "]\n");
-                    this.passiveHost = newPassiveHost;
+        if (isIpAddressFromPasvResponse()) {
+            // Pre-3.9.0 behavior
+            if (passiveNatWorkaroundStrategy != null) {
+                try {
+                    final String newPassiveHost = passiveNatWorkaroundStrategy.resolve(pasvHost);
+                    if (!pasvHost.equals(newPassiveHost)) {
+                        fireReplyReceived(0, "[Replacing PASV mode reply address " + this.passiveHost + " with " + newPassiveHost + "]\n");
+                        pasvHost = newPassiveHost;
+                    }
+                } catch (final UnknownHostException e) { // Should not happen as we are passing in an IP address
+                    throw new MalformedServerReplyException("Could not parse passive host information.\nServer Reply: " + reply);
@@ -955,3 +972,7 @@ public class FTPClient extends FTP implements Configurable {
-            } catch (final UnknownHostException e) { // Should not happen as we are passing in an IP address
-                throw new MalformedServerReplyException(
-                    "Could not parse passive host information.\nServer Reply: " + reply);
+            }
+        } else {
+            // Post-3.8 behavior
+            if (_socket_ == null) {
+                pasvHost = null; // For unit testing.
+            } else {
+                pasvHost = _socket_.getInetAddress().getHostAddress();
@@ -959,0 +981,2 @@ public class FTPClient extends FTP implements Configurable {
+        this.passiveHost = pasvHost;
+        this.passivePort = pasvPort;
@@ -4142,0 +4166,37 @@ public class FTPClient extends FTP implements Configurable {
+
+    /**
+     * Returns, whether the IP address from the server's response should be used.
+     * Until 3.9.0, this has always been the case. Beginning with 3.9.0,
+     * that IP address will be silently ignored, and replaced with the remote
+     * IP address of the control connection, unless this configuration option is
+     * given, which restores the old behavior. To enable this by default, use
+     * the system property {@link FTPClient#FTP_IP_ADDRESS_FROM_PASV_RESPONSE}.
+     * @return True, if the IP address from the server's response will be used
+     *  (pre-3.9 compatible behavior), or false (ignore that IP address).
+     *
+     * @see FTPClient#FTP_IP_ADDRESS_FROM_PASV_RESPONSE
+     * @see #setIpAddressFromPasvResponse(boolean)
+     * @since 3.9.0
+     */
+    public boolean isIpAddressFromPasvResponse() {
+        return ipAddressFromPasvResponse;
+    }
+
+    /**
+     * Sets whether the IP address from the server's response should be used.
+     * Until 3.9.0, this has always been the case. Beginning with 3.9.0,
+     * that IP address will be silently ignored, and replaced with the remote
+     * IP address of the control connection, unless this configuration option is
+     * given, which restores the old behavior. To enable this by default, use
+     * the system property {@link FTPClient#FTP_IP_ADDRESS_FROM_PASV_RESPONSE}.
+     *
+     * @param usingIpAddressFromPasvResponse True, if the IP address from the
+     *   server's response should be used (pre-3.9.0 compatible behavior), or
+     *   false (ignore that IP address).
+     * @see FTPClient#FTP_IP_ADDRESS_FROM_PASV_RESPONSE
+     * @see #isIpAddressFromPasvResponse
+     * @since 3.9.0
+     */
+    public void setIpAddressFromPasvResponse(boolean usingIpAddressFromPasvResponse) {
+        this.ipAddressFromPasvResponse = usingIpAddressFromPasvResponse;
+    }
diff --git a/src/test/java/org/apache/commons/net/ftp/FTPClientTest.java b/src/test/java/org/apache/commons/net/ftp/FTPClientTest.java
index fcba3a761..334580633 100644
--- a/src/test/java/org/apache/commons/net/ftp/FTPClientTest.java
+++ b/src/test/java/org/apache/commons/net/ftp/FTPClientTest.java
@@ -39,0 +40 @@ public class FTPClientTest extends TestCase {
+
@@ -100,0 +102 @@ public class FTPClientTest extends TestCase {
+        client.setIpAddressFromPasvResponse(true);
@@ -102,0 +105,3 @@ public class FTPClientTest extends TestCase {
+        client.setIpAddressFromPasvResponse(false);
+        client._parsePassiveModeReply("227 Entering Passive Mode (172,16,204,138,192,22).");
+        assertNull(client.getPassiveHost());
@@ -108,0 +114 @@ public class FTPClientTest extends TestCase {
+        client.setIpAddressFromPasvResponse(true);
@@ -110,0 +117,3 @@ public class FTPClientTest extends TestCase {
+        client.setIpAddressFromPasvResponse(false);
+        client._parsePassiveModeReply("227 Entering Passive Mode (172,16,204,138,192,22).");
+        assertNull(client.getPassiveHost());
@@ -116,0 +126 @@ public class FTPClientTest extends TestCase {
+        client.setIpAddressFromPasvResponse(true);
@@ -118,0 +129,3 @@ public class FTPClientTest extends TestCase {
+        client.setIpAddressFromPasvResponse(false);
+        client._parsePassiveModeReply("227 Entering Passive Mode (172,16,204,138,192,22).");
+        assertNull(client.getPassiveHost());
@@ -123,0 +137 @@ public class FTPClientTest extends TestCase {
+        client.setIpAddressFromPasvResponse(true);
@@ -125,0 +140,3 @@ public class FTPClientTest extends TestCase {
+        client.setIpAddressFromPasvResponse(false);
+        client._parsePassiveModeReply("227 Entering Passive Mode (172,16,204,138,192,22).");
+        assertNull(client.getPassiveHost());
@@ -129,0 +147 @@ public class FTPClientTest extends TestCase {
+        client.setIpAddressFromPasvResponse(true);
@@ -131,0 +150,3 @@ public class FTPClientTest extends TestCase {
+        client.setIpAddressFromPasvResponse(false);
+        client._parsePassiveModeReply("227 Entering Passive Mode (8,8,4,4,192,22).");
+        assertNull(client.getPassiveHost());
@@ -137,0 +159 @@ public class FTPClientTest extends TestCase {
+        client.setIpAddressFromPasvResponse(true);
@@ -139,0 +162,3 @@ public class FTPClientTest extends TestCase {
+        client.setIpAddressFromPasvResponse(false);
+        client._parsePassiveModeReply("227 Entering Passive Mode (8,8,4,4,192,22).");
+        assertNull(client.getPassiveHost());
@@ -144,0 +170 @@ public class FTPClientTest extends TestCase {
+        client.setIpAddressFromPasvResponse(true);
@@ -146,0 +173,3 @@ public class FTPClientTest extends TestCase {
+        client.setIpAddressFromPasvResponse(false);
+        client._parsePassiveModeReply("227 Entering Passive Mode (8,8,4,4,192,22).");
+        assertNull(client.getPassiveHost());
