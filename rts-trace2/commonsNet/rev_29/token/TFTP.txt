package
org
.
apache
.
commons
.
net
.
tftp
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InterruptedIOException
;
import
java
.
net
.
DatagramPacket
;
import
java
.
net
.
SocketException
;
import
org
.
apache
.
commons
.
net
.
DatagramSocketClient
;
public
class
TFTP
extends
DatagramSocketClient
{
public
static
final
int
ASCII_MODE
=
0
;
public
static
final
int
NETASCII_MODE
=
0
;
public
static
final
int
BINARY_MODE
=
1
;
public
static
final
int
IMAGE_MODE
=
1
;
public
static
final
int
OCTET_MODE
=
1
;
public
static
final
int
DEFAULT_TIMEOUT
=
5000
;
public
static
final
int
DEFAULT_PORT
=
69
;
static
final
int
PACKET_SIZE
=
TFTPPacket
.
SEGMENT_SIZE
+
4
;
public
static
final
String
getModeName
(
final
int
mode
)
{
return
TFTPRequestPacket
.
modeStrings
[
mode
]
;
}
private
byte
[
]
receiveBuffer
;
private
DatagramPacket
receiveDatagram
;
private
DatagramPacket
sendDatagram
;
byte
[
]
sendBuffer
;
public
TFTP
(
)
{
setDefaultTimeout
(
DEFAULT_TIMEOUT
)
;
receiveBuffer
=
null
;
receiveDatagram
=
null
;
}
public
final
void
beginBufferedOps
(
)
{
receiveBuffer
=
new
byte
[
PACKET_SIZE
]
;
receiveDatagram
=
new
DatagramPacket
(
receiveBuffer
,
receiveBuffer
.
length
)
;
sendBuffer
=
new
byte
[
PACKET_SIZE
]
;
sendDatagram
=
new
DatagramPacket
(
sendBuffer
,
sendBuffer
.
length
)
;
}
public
final
TFTPPacket
bufferedReceive
(
)
throws
IOException
,
InterruptedIOException
,
SocketException
,
TFTPPacketException
{
receiveDatagram
.
setData
(
receiveBuffer
)
;
receiveDatagram
.
setLength
(
receiveBuffer
.
length
)
;
_socket_
.
receive
(
receiveDatagram
)
;
final
TFTPPacket
newTFTPPacket
=
TFTPPacket
.
newTFTPPacket
(
receiveDatagram
)
;
trace
(
"<"
,
newTFTPPacket
)
;
return
newTFTPPacket
;
}
public
final
void
bufferedSend
(
final
TFTPPacket
packet
)
throws
IOException
{
trace
(
">"
,
packet
)
;
_socket_
.
send
(
packet
.
newDatagram
(
sendDatagram
,
sendBuffer
)
)
;
}
public
final
void
discardPackets
(
)
throws
IOException
{
final
int
to
;
final
DatagramPacket
datagram
;
datagram
=
new
DatagramPacket
(
new
byte
[
PACKET_SIZE
]
,
PACKET_SIZE
)
;
to
=
getSoTimeout
(
)
;
setSoTimeout
(
1
)
;
try
{
while
(
true
)
{
_socket_
.
receive
(
datagram
)
;
}
}
catch
(
final
SocketException
|
InterruptedIOException
e
)
{
}
setSoTimeout
(
to
)
;
}
public
final
void
endBufferedOps
(
)
{
receiveBuffer
=
null
;
receiveDatagram
=
null
;
sendBuffer
=
null
;
sendDatagram
=
null
;
}
public
final
TFTPPacket
receive
(
)
throws
IOException
,
InterruptedIOException
,
SocketException
,
TFTPPacketException
{
final
DatagramPacket
packet
;
packet
=
new
DatagramPacket
(
new
byte
[
PACKET_SIZE
]
,
PACKET_SIZE
)
;
_socket_
.
receive
(
packet
)
;
final
TFTPPacket
newTFTPPacket
=
TFTPPacket
.
newTFTPPacket
(
packet
)
;
trace
(
"<"
,
newTFTPPacket
)
;
return
newTFTPPacket
;
}
public
final
void
send
(
final
TFTPPacket
packet
)
throws
IOException
{
trace
(
">"
,
packet
)
;
_socket_
.
send
(
packet
.
newDatagram
(
)
)
;
}
protected
void
trace
(
final
String
direction
,
final
TFTPPacket
packet
)
{
}
}
<EOF>
