package
org
.
apache
.
commons
.
net
.
pop3
;
import
java
.
io
.
IOException
;
import
java
.
security
.
InvalidKeyException
;
import
java
.
security
.
NoSuchAlgorithmException
;
import
java
.
security
.
spec
.
InvalidKeySpecException
;
import
javax
.
crypto
.
Mac
;
import
javax
.
crypto
.
spec
.
SecretKeySpec
;
import
org
.
apache
.
commons
.
net
.
util
.
Base64
;
public
class
ExtendedPOP3Client
extends
POP3SClient
{
public
enum
AUTH_METHOD
{
PLAIN
(
"PLAIN"
)
,
CRAM_MD5
(
"CRAM-MD5"
)
;
private
final
String
methodName
;
AUTH_METHOD
(
final
String
methodName
)
{
this
.
methodName
=
methodName
;
}
public
final
String
getAuthName
(
)
{
return
this
.
methodName
;
}
}
public
ExtendedPOP3Client
(
)
throws
NoSuchAlgorithmException
{
}
public
boolean
auth
(
final
AUTH_METHOD
method
,
final
String
username
,
final
String
password
)
throws
IOException
,
NoSuchAlgorithmException
,
InvalidKeyException
,
InvalidKeySpecException
{
if
(
sendCommand
(
POP3Command
.
AUTH
,
method
.
getAuthName
(
)
)
!=
POP3Reply
.
OK_INT
)
{
return
false
;
}
switch
(
method
)
{
case
PLAIN
:
return
sendCommand
(
new
String
(
Base64
.
encodeBase64
(
(
"\000"
+
username
+
"\000"
+
password
)
.
getBytes
(
getCharset
(
)
)
)
,
getCharset
(
)
)
)
==
POP3Reply
.
OK
;
case
CRAM_MD5
:
final
byte
[
]
serverChallenge
=
Base64
.
decodeBase64
(
getReplyString
(
)
.
substring
(
2
)
.
trim
(
)
)
;
final
Mac
hmac_md5
=
Mac
.
getInstance
(
"HmacMD5"
)
;
hmac_md5
.
init
(
new
SecretKeySpec
(
password
.
getBytes
(
getCharset
(
)
)
,
"HmacMD5"
)
)
;
final
byte
[
]
hmacResult
=
convertToHexString
(
hmac_md5
.
doFinal
(
serverChallenge
)
)
.
getBytes
(
getCharset
(
)
)
;
final
byte
[
]
usernameBytes
=
username
.
getBytes
(
getCharset
(
)
)
;
final
byte
[
]
toEncode
=
new
byte
[
usernameBytes
.
length
+
1
+
hmacResult
.
length
]
;
System
.
arraycopy
(
usernameBytes
,
0
,
toEncode
,
0
,
usernameBytes
.
length
)
;
toEncode
[
usernameBytes
.
length
]
=
' '
;
System
.
arraycopy
(
hmacResult
,
0
,
toEncode
,
usernameBytes
.
length
+
1
,
hmacResult
.
length
)
;
return
sendCommand
(
Base64
.
encodeBase64StringUnChunked
(
toEncode
)
)
==
POP3Reply
.
OK
;
default
:
return
false
;
}
}
private
String
convertToHexString
(
final
byte
[
]
a
)
{
final
StringBuilder
result
=
new
StringBuilder
(
a
.
length
*
2
)
;
for
(
final
byte
element
:
a
)
{
if
(
(
element
&
0x0FF
)
<=
15
)
{
result
.
append
(
"0"
)
;
}
result
.
append
(
Integer
.
toHexString
(
element
&
0x0FF
)
)
;
}
return
result
.
toString
(
)
;
}
}
<EOF>
