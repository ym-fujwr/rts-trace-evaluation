package
org
.
apache
.
commons
.
net
.
util
;
import
java
.
security
.
GeneralSecurityException
;
import
java
.
security
.
KeyStore
;
import
java
.
security
.
cert
.
CertificateException
;
import
java
.
security
.
cert
.
X509Certificate
;
import
javax
.
net
.
ssl
.
TrustManagerFactory
;
import
javax
.
net
.
ssl
.
X509TrustManager
;
public
final
class
TrustManagerUtils
{
private
static
class
TrustManager
implements
X509TrustManager
{
private
final
boolean
checkServerValidity
;
TrustManager
(
final
boolean
checkServerValidity
)
{
this
.
checkServerValidity
=
checkServerValidity
;
}
@
Override
public
void
checkClientTrusted
(
final
X509Certificate
[
]
certificates
,
final
String
authType
)
{
}
@
Override
public
void
checkServerTrusted
(
final
X509Certificate
[
]
certificates
,
final
String
authType
)
throws
CertificateException
{
if
(
checkServerValidity
)
{
for
(
final
X509Certificate
certificate
:
certificates
)
{
certificate
.
checkValidity
(
)
;
}
}
}
@
Override
public
X509Certificate
[
]
getAcceptedIssuers
(
)
{
return
NetConstants
.
EMPTY_X509_CERTIFICATE_ARRAY
;
}
}
private
static
final
X509TrustManager
ACCEPT_ALL
=
new
TrustManager
(
false
)
;
private
static
final
X509TrustManager
CHECK_SERVER_VALIDITY
=
new
TrustManager
(
true
)
;
public
static
X509TrustManager
getAcceptAllTrustManager
(
)
{
return
ACCEPT_ALL
;
}
public
static
X509TrustManager
getDefaultTrustManager
(
final
KeyStore
keyStore
)
throws
GeneralSecurityException
{
final
String
defaultAlgorithm
=
TrustManagerFactory
.
getDefaultAlgorithm
(
)
;
final
TrustManagerFactory
instance
=
TrustManagerFactory
.
getInstance
(
defaultAlgorithm
)
;
instance
.
init
(
keyStore
)
;
return
(
X509TrustManager
)
instance
.
getTrustManagers
(
)
[
0
]
;
}
public
static
X509TrustManager
getValidateServerCertificateTrustManager
(
)
{
return
CHECK_SERVER_VALIDITY
;
}
}
<EOF>
