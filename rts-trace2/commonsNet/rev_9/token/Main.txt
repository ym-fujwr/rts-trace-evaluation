package
org
.
apache
.
commons
.
net
.
examples
;
import
java
.
io
.
InputStream
;
import
java
.
lang
.
reflect
.
InvocationTargetException
;
import
java
.
lang
.
reflect
.
Method
;
import
java
.
security
.
CodeSource
;
import
java
.
util
.
Collections
;
import
java
.
util
.
List
;
import
java
.
util
.
Properties
;
public
class
Main
{
private
static
boolean
fromJar
(
)
{
final
CodeSource
codeSource
=
Main
.
class
.
getProtectionDomain
(
)
.
getCodeSource
(
)
;
if
(
codeSource
!=
null
)
{
return
codeSource
.
getLocation
(
)
.
getFile
(
)
.
endsWith
(
".jar"
)
;
}
return
false
;
}
public
static
void
main
(
final
String
[
]
args
)
throws
Throwable
{
final
Properties
fp
=
new
Properties
(
)
;
final
InputStream
ras
=
Main
.
class
.
getResourceAsStream
(
"examples.properties"
)
;
if
(
ras
!=
null
)
{
fp
.
load
(
ras
)
;
}
else
{
System
.
err
.
println
(
"[Cannot find examples.properties file, so aliases cannot be used]"
)
;
}
if
(
args
.
length
==
0
)
{
if
(
Thread
.
currentThread
(
)
.
getStackTrace
(
)
.
length
>
2
)
{
System
.
out
.
println
(
"Usage: mvn -q exec:java  -Dexec.arguments=<alias or"
+
" exampleClass>,<exampleClass parameters> (comma-separated, no spaces)"
)
;
System
.
out
.
println
(
"Or   : mvn -q exec:java  -Dexec.args=\"<alias"
+
" or exampleClass> <exampleClass parameters>\" (space separated)"
)
;
}
else
if
(
fromJar
(
)
)
{
System
.
out
.
println
(
"Usage: java -jar commons-net-examples-m.n.jar <alias or exampleClass> <exampleClass parameters>"
)
;
}
else
{
System
.
out
.
println
(
"Usage: java -cp target/classes org.apache.commons.net.examples.Main <alias or exampleClass> <exampleClass parameters>"
)
;
}
@
SuppressWarnings
(
"unchecked"
)
final
List
<
String
>
l
=
(
List
<
String
>
)
Collections
.
list
(
fp
.
propertyNames
(
)
)
;
if
(
l
.
isEmpty
(
)
)
{
return
;
}
l
.
sort
(
null
)
;
System
.
out
.
println
(
"\nAliases and their classes:"
)
;
for
(
final
String
s
:
l
)
{
System
.
out
.
printf
(
"%-25s %s%n"
,
s
,
fp
.
getProperty
(
s
)
)
;
}
return
;
}
final
String
shortName
=
args
[
0
]
;
String
fullName
=
fp
.
getProperty
(
shortName
)
;
if
(
fullName
==
null
)
{
fullName
=
shortName
;
}
fullName
=
fullName
.
replace
(
'/'
,
'.'
)
;
try
{
final
Class
<
?
>
clazz
=
Class
.
forName
(
fullName
)
;
final
Method
m
=
clazz
.
getDeclaredMethod
(
"main"
,
args
.
getClass
(
)
)
;
final
String
[
]
args2
=
new
String
[
args
.
length
-
1
]
;
System
.
arraycopy
(
args
,
1
,
args2
,
0
,
args2
.
length
)
;
try
{
m
.
invoke
(
null
,
(
Object
)
args2
)
;
}
catch
(
final
InvocationTargetException
ite
)
{
final
Throwable
cause
=
ite
.
getCause
(
)
;
if
(
cause
!=
null
)
{
throw
cause
;
}
throw
ite
;
}
}
catch
(
final
ClassNotFoundException
e
)
{
System
.
out
.
println
(
e
)
;
}
}
}
<EOF>
