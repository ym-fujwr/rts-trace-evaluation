package
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
misc
;
import
java
.
io
.
IOException
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Arrays
;
import
com
.
fasterxml
.
jackson
.
databind
.
ObjectWriter
;
import
com
.
fasterxml
.
jackson
.
databind
.
PropertyName
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
*
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
annotation
.
JacksonXmlRootElement
;
public
class
RootNameTest
extends
XmlTestBase
{
static
class
RootBeanBase
{
public
String
value
;
protected
RootBeanBase
(
)
{
this
(
"123"
)
;
}
public
RootBeanBase
(
String
v
)
{
value
=
v
;
}
}
@
JacksonXmlRootElement
(
localName
=
"root"
)
static
class
RootBean
extends
RootBeanBase
{
protected
RootBean
(
)
{
super
(
)
;
}
}
@
JacksonXmlRootElement
(
localName
=
"nsRoot"
,
namespace
=
"http://foo"
)
static
class
NsRootBean
{
public
String
value
=
"abc"
;
}
@
SuppressWarnings
(
"serial"
)
@
JacksonXmlRootElement
(
localName
=
"TheStrings"
)
static
class
StringList
extends
ArrayList
<
String
>
{
public
StringList
(
String
...
strings
)
{
addAll
(
Arrays
.
asList
(
strings
)
)
;
}
}
protected
XmlMapper
_xmlMapper
=
new
XmlMapper
(
)
;
public
void
testRootNameAnnotation
(
)
throws
IOException
{
String
xml
=
_xmlMapper
.
writeValueAsString
(
new
StringBean
(
)
)
;
if
(
!
xml
.
startsWith
(
"<StringBean"
)
)
{
fail
(
"Expected root name of 'StringBean'; but XML document is ["
+
xml
+
"]"
)
;
}
xml
=
_xmlMapper
.
writeValueAsString
(
new
RootBean
(
)
)
;
assertEquals
(
"<root><value>123</value></root>"
,
xml
)
;
xml
=
_xmlMapper
.
writeValueAsString
(
new
NsRootBean
(
)
)
;
if
(
xml
.
indexOf
(
"nsRoot"
)
<
0
)
{
fail
(
"Expected root name of 'nsRoot'; but XML document is ["
+
xml
+
"]"
)
;
}
if
(
xml
.
indexOf
(
"http://foo"
)
<
0
)
{
fail
(
"Expected NS declaration for 'http://foo', not found, XML document is ["
+
xml
+
"]"
)
;
}
}
public
void
testDynamicRootName
(
)
throws
IOException
{
String
xml
;
ObjectWriter
w
=
_xmlMapper
.
writer
(
)
.
withRootName
(
PropertyName
.
construct
(
"rudy"
,
"localhost"
)
)
;
xml
=
w
.
writeValueAsString
(
new
StringBean
(
"foo"
)
)
;
assertEquals
(
"<rudy xmlns=\"localhost\"><text xmlns=\"\">foo</text></rudy>"
,
xml
)
;
xml
=
w
.
writeValueAsString
(
new
StringBean
(
null
)
)
;
assertEquals
(
"<rudy xmlns=\"localhost\"><text xmlns=\"\"/></rudy>"
,
xml
)
;
xml
=
w
.
writeValueAsString
(
null
)
;
assertEquals
(
"<rudy xmlns=\"localhost\"/>"
,
xml
)
;
}
public
void
testDynamicRootNameForList
(
)
throws
IOException
{
String
xml
;
xml
=
_xmlMapper
.
writer
(
)
.
withRootName
(
"Listy"
)
.
writeValueAsString
(
Arrays
.
asList
(
"abc"
,
"def"
)
)
;
assertEquals
(
"<Listy><item>abc</item><item>def</item></Listy>"
,
xml
)
;
xml
=
_xmlMapper
.
writer
(
)
.
withRootName
(
PropertyName
.
construct
(
"Spaced"
,
"http://foo"
)
)
.
writeValueAsString
(
Arrays
.
asList
(
"foo"
,
"bar"
)
)
;
assertEquals
(
"<Spaced xmlns=\"http://foo\"><item>foo</item><item>bar</item></Spaced>"
,
xml
)
;
xml
=
_xmlMapper
.
writer
(
)
.
writeValueAsString
(
new
StringList
(
"a"
,
"b"
)
)
;
assertEquals
(
"<TheStrings><item>a</item><item>b</item></TheStrings>"
,
xml
)
;
}
}
<EOF>
