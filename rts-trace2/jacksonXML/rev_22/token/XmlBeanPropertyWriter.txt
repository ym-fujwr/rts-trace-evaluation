package
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
ser
;
import
javax
.
xml
.
namespace
.
QName
;
import
com
.
fasterxml
.
jackson
.
core
.
JsonGenerator
;
import
com
.
fasterxml
.
jackson
.
databind
.
*
;
import
com
.
fasterxml
.
jackson
.
databind
.
ser
.
*
;
import
com
.
fasterxml
.
jackson
.
databind
.
ser
.
impl
.
PropertySerializerMap
;
public
class
XmlBeanPropertyWriter
extends
BeanPropertyWriter
{
private
static
final
long
serialVersionUID
=
1L
;
protected
final
QName
_wrapperQName
;
protected
final
QName
_wrappedQName
;
public
XmlBeanPropertyWriter
(
BeanPropertyWriter
wrapped
,
PropertyName
wrapperName
,
PropertyName
wrappedName
)
{
this
(
wrapped
,
wrapperName
,
wrappedName
,
null
)
;
}
public
XmlBeanPropertyWriter
(
BeanPropertyWriter
wrapped
,
PropertyName
wrapperName
,
PropertyName
wrappedName
,
JsonSerializer
<
Object
>
serializer
)
{
super
(
wrapped
)
;
_wrapperQName
=
_qname
(
wrapperName
)
;
_wrappedQName
=
_qname
(
wrappedName
)
;
if
(
serializer
!=
null
)
{
assignSerializer
(
serializer
)
;
}
}
private
QName
_qname
(
PropertyName
n
)
{
String
ns
=
n
.
getNamespace
(
)
;
if
(
ns
==
null
)
{
ns
=
""
;
}
return
new
QName
(
ns
,
n
.
getSimpleName
(
)
)
;
}
@
Override
public
void
serializeAsField
(
Object
bean
,
JsonGenerator
jgen
,
SerializerProvider
prov
)
throws
Exception
{
Object
value
=
get
(
bean
)
;
if
(
value
==
null
)
{
return
;
}
JsonSerializer
<
Object
>
ser
=
_serializer
;
if
(
ser
==
null
)
{
Class
<
?
>
cls
=
value
.
getClass
(
)
;
PropertySerializerMap
map
=
_dynamicSerializers
;
ser
=
map
.
serializerFor
(
cls
)
;
if
(
ser
==
null
)
{
ser
=
_findAndAddDynamic
(
map
,
cls
,
prov
)
;
}
}
if
(
_suppressableValue
!=
null
)
{
if
(
MARKER_FOR_EMPTY
==
_suppressableValue
)
{
if
(
ser
.
isEmpty
(
prov
,
value
)
)
{
return
;
}
}
else
if
(
_suppressableValue
.
equals
(
value
)
)
{
return
;
}
}
if
(
value
==
bean
)
{
if
(
_handleSelfReference
(
bean
,
jgen
,
prov
,
ser
)
)
{
return
;
}
}
final
ToXmlGenerator
xmlGen
=
(
jgen
instanceof
ToXmlGenerator
)
?
(
ToXmlGenerator
)
jgen
:
null
;
if
(
xmlGen
!=
null
)
{
xmlGen
.
startWrappedValue
(
_wrapperQName
,
_wrappedQName
)
;
}
jgen
.
writeFieldName
(
_name
)
;
if
(
_typeSerializer
==
null
)
{
ser
.
serialize
(
value
,
jgen
,
prov
)
;
}
else
{
ser
.
serializeWithType
(
value
,
jgen
,
prov
,
_typeSerializer
)
;
}
if
(
xmlGen
!=
null
)
{
xmlGen
.
finishWrappedValue
(
_wrapperQName
,
_wrappedQName
)
;
}
}
}
<EOF>
