package
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
misc
;
import
com
.
fasterxml
.
jackson
.
annotation
.
JsonRootName
;
import
com
.
fasterxml
.
jackson
.
databind
.
DeserializationFeature
;
import
com
.
fasterxml
.
jackson
.
databind
.
SerializationFeature
;
import
com
.
fasterxml
.
jackson
.
dataformat
.
xml
.
*
;
public
class
RootNameWrapping374Test
extends
XmlTestBase
{
@
JsonRootName
(
"Root"
)
static
class
Root
{
public
int
id
=
1
;
}
private
final
XmlMapper
DEFAULT_MAPPER
=
newMapper
(
)
;
private
final
XmlMapper
WRAPPING_MAPPER
=
mapperBuilder
(
)
.
enable
(
SerializationFeature
.
WRAP_ROOT_VALUE
)
.
enable
(
DeserializationFeature
.
UNWRAP_ROOT_VALUE
)
.
build
(
)
;
public
void
testWriteIgnoresWrapping
(
)
throws
Exception
{
String
xmlDefault
=
DEFAULT_MAPPER
.
writeValueAsString
(
new
Root
(
)
)
;
String
xmlWrapEnabled
=
WRAPPING_MAPPER
.
writeValueAsString
(
new
Root
(
)
)
;
assertEquals
(
"<Root><id>1</id></Root>"
,
xmlDefault
)
;
assertEquals
(
xmlDefault
,
xmlWrapEnabled
)
;
}
public
void
testReadWithoutWrapping
(
)
throws
Exception
{
String
xml
=
DEFAULT_MAPPER
.
writeValueAsString
(
new
Root
(
)
)
;
Root
result
=
DEFAULT_MAPPER
.
readValue
(
xml
,
Root
.
class
)
;
assertNotNull
(
result
)
;
}
public
void
testReadWithWrapping
(
)
throws
Exception
{
String
xml
=
DEFAULT_MAPPER
.
writeValueAsString
(
new
Root
(
)
)
;
assertEquals
(
"<Root><id>1</id></Root>"
,
xml
)
;
String
wrapped
=
"<ignoreMe>"
+
xml
+
"</ignoreMe>"
;
Root
result
=
WRAPPING_MAPPER
.
readValue
(
wrapped
,
Root
.
class
)
;
assertNotNull
(
result
)
;
}
}
<EOF>
