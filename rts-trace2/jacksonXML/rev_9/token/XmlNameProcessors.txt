package
com
.
fasterxml
.
jackson
.
dataformat
.
xml
;
import
java
.
util
.
Base64
;
import
java
.
util
.
regex
.
Pattern
;
import
static
java
.
nio
.
charset
.
StandardCharsets
.
UTF_8
;
public
final
class
XmlNameProcessors
{
private
XmlNameProcessors
(
)
{
}
public
static
XmlNameProcessor
newPassthroughProcessor
(
)
{
return
new
PassthroughProcessor
(
)
;
}
public
static
XmlNameProcessor
newReplacementProcessor
(
String
replacement
)
{
return
new
ReplaceNameProcessor
(
replacement
)
;
}
public
static
XmlNameProcessor
newReplacementProcessor
(
)
{
return
newReplacementProcessor
(
"_"
)
;
}
public
static
XmlNameProcessor
newBase64Processor
(
String
prefix
)
{
return
new
Base64NameProcessor
(
prefix
)
;
}
public
static
XmlNameProcessor
newBase64Processor
(
)
{
return
newBase64Processor
(
"base64_tag_"
)
;
}
public
static
XmlNameProcessor
newAlwaysOnBase64Processor
(
)
{
return
new
AlwaysOnBase64NameProcessor
(
)
;
}
static
class
PassthroughProcessor
implements
XmlNameProcessor
{
private
static
final
long
serialVersionUID
=
1L
;
public
PassthroughProcessor
(
)
{
}
@
Override
public
void
encodeName
(
XmlName
name
)
{
}
@
Override
public
void
decodeName
(
XmlName
name
)
{
}
}
static
class
ReplaceNameProcessor
implements
XmlNameProcessor
{
private
static
final
long
serialVersionUID
=
1L
;
private
static
final
Pattern
BEGIN_MATCHER
=
Pattern
.
compile
(
"^[^a-zA-Z_:]"
)
;
private
static
final
Pattern
MAIN_MATCHER
=
Pattern
.
compile
(
"[^a-zA-Z0-9_:-]"
)
;
private
final
String
_replacement
;
public
ReplaceNameProcessor
(
String
replacement
)
{
_replacement
=
replacement
;
}
@
Override
public
void
encodeName
(
XmlName
name
)
{
String
newLocalPart
=
name
.
localPart
;
newLocalPart
=
BEGIN_MATCHER
.
matcher
(
newLocalPart
)
.
replaceAll
(
_replacement
)
;
name
.
localPart
=
MAIN_MATCHER
.
matcher
(
newLocalPart
)
.
replaceAll
(
_replacement
)
;
}
@
Override
public
void
decodeName
(
XmlName
name
)
{
}
}
static
class
Base64NameProcessor
implements
XmlNameProcessor
{
private
static
final
long
serialVersionUID
=
1L
;
private
static
final
Base64
.
Decoder
BASE64_DECODER
=
Base64
.
getUrlDecoder
(
)
;
private
static
final
Base64
.
Encoder
BASE64_ENCODER
=
Base64
.
getUrlEncoder
(
)
.
withoutPadding
(
)
;
private
static
final
Pattern
VALID_XML_NAME
=
Pattern
.
compile
(
"[a-zA-Z_:]([a-zA-Z0-9_:.-])*"
)
;
private
final
String
_prefix
;
public
Base64NameProcessor
(
String
prefix
)
{
_prefix
=
prefix
;
}
@
Override
public
void
encodeName
(
XmlName
name
)
{
if
(
!
VALID_XML_NAME
.
matcher
(
name
.
localPart
)
.
matches
(
)
)
{
name
.
localPart
=
_prefix
+
new
String
(
BASE64_ENCODER
.
encode
(
name
.
localPart
.
getBytes
(
UTF_8
)
)
,
UTF_8
)
;
}
}
@
Override
public
void
decodeName
(
XmlName
name
)
{
if
(
name
.
localPart
.
startsWith
(
_prefix
)
)
{
String
localName
=
name
.
localPart
;
localName
=
localName
.
substring
(
_prefix
.
length
(
)
)
;
name
.
localPart
=
new
String
(
BASE64_DECODER
.
decode
(
localName
)
,
UTF_8
)
;
}
}
}
static
class
AlwaysOnBase64NameProcessor
implements
XmlNameProcessor
{
private
static
final
long
serialVersionUID
=
1L
;
private
static
final
Base64
.
Decoder
BASE64_DECODER
=
Base64
.
getUrlDecoder
(
)
;
private
static
final
Base64
.
Encoder
BASE64_ENCODER
=
Base64
.
getUrlEncoder
(
)
.
withoutPadding
(
)
;
public
AlwaysOnBase64NameProcessor
(
)
{
}
@
Override
public
void
encodeName
(
XmlName
name
)
{
name
.
localPart
=
new
String
(
BASE64_ENCODER
.
encode
(
name
.
localPart
.
getBytes
(
UTF_8
)
)
,
UTF_8
)
;
}
@
Override
public
void
decodeName
(
XmlName
name
)
{
name
.
localPart
=
new
String
(
BASE64_DECODER
.
decode
(
name
.
localPart
)
,
UTF_8
)
;
}
}
}
<EOF>
