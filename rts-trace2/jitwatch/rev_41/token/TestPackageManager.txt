package
org
.
adoptopenjdk
.
jitwatch
.
test
;
import
org
.
adoptopenjdk
.
jitwatch
.
model
.
MetaPackage
;
import
org
.
adoptopenjdk
.
jitwatch
.
model
.
PackageManager
;
import
org
.
junit
.
Test
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
List
;
import
static
org
.
hamcrest
.
CoreMatchers
.
equalTo
;
import
static
org
.
hamcrest
.
CoreMatchers
.
is
;
import
static
org
.
junit
.
Assert
.
assertThat
;
import
static
org
.
adoptopenjdk
.
jitwatch
.
core
.
JITWatchConstants
.
*
;
public
class
TestPackageManager
{
@
Test
public
void
givenUnknownPackageNameIsUsedWithPackageManager_WhenPackageIsBuilt_ThenEmptyMetaPackage
(
)
{
MetaPackage
expectedPackage
=
new
MetaPackage
(
S_EMPTY
)
;
PackageManager
packageManager
=
new
PackageManager
(
)
;
MetaPackage
actualPackage
=
packageManager
.
buildPackage
(
S_EMPTY
)
;
assertThat
(
actualPackage
,
is
(
equalTo
(
expectedPackage
)
)
)
;
}
@
Test
public
void
givenKnownPackageNameIsUsedWithPackageManager_WhenPackageIsBuiltAndRootPackagesAreRequested_ThenRootPackagesAreReturned
(
)
{
List
<
MetaPackage
>
expectedRootPackages
=
Arrays
.
asList
(
new
MetaPackage
(
"com"
)
)
;
PackageManager
packageManager
=
new
PackageManager
(
)
;
packageManager
.
buildPackage
(
"com.sun.java"
)
;
List
<
MetaPackage
>
actualRootPackages
=
packageManager
.
getRootPackages
(
)
;
assertThat
(
actualRootPackages
,
is
(
equalTo
(
expectedRootPackages
)
)
)
;
}
}
<EOF>
