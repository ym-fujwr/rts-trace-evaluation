package
org
.
apache
.
commons
.
jxpath
.
ri
;
import
org
.
apache
.
commons
.
jxpath
.
ExceptionHandler
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathContext
;
import
org
.
apache
.
commons
.
jxpath
.
JXPathTestCase
;
import
org
.
apache
.
commons
.
jxpath
.
Pointer
;
public
class
ExceptionHandlerTest
extends
JXPathTestCase
{
public
static
class
Bar
{
public
Object
getBaz
(
)
{
throw
new
IllegalStateException
(
"baz unavailable"
)
;
}
}
private
JXPathContext
context
;
private
Bar
bar
=
new
Bar
(
)
;
public
void
setUp
(
)
throws
Exception
{
context
=
JXPathContext
.
newContext
(
this
)
;
context
.
setExceptionHandler
(
new
ExceptionHandler
(
)
{
public
void
handle
(
Throwable
t
,
Pointer
ptr
)
{
if
(
t
instanceof
Error
)
{
throw
(
Error
)
t
;
}
if
(
t
instanceof
RuntimeException
)
{
throw
(
RuntimeException
)
t
;
}
throw
new
RuntimeException
(
t
)
;
}
}
)
;
}
public
Object
getFoo
(
)
{
throw
new
IllegalStateException
(
"foo unavailable"
)
;
}
public
void
testHandleFoo
(
)
throws
Exception
{
try
{
context
.
getValue
(
"foo"
)
;
fail
(
"expected Throwable"
)
;
}
catch
(
Throwable
t
)
{
while
(
t
!=
null
)
{
if
(
"foo unavailable"
.
equals
(
t
.
getMessage
(
)
)
)
{
return
;
}
t
=
t
.
getCause
(
)
;
}
fail
(
"expected \"foo unavailable\" in throwable chain"
)
;
}
}
public
void
testHandleBarBaz
(
)
throws
Exception
{
try
{
context
.
getValue
(
"bar/baz"
)
;
fail
(
"expected Throwable"
)
;
}
catch
(
Throwable
t
)
{
while
(
t
!=
null
)
{
if
(
"baz unavailable"
.
equals
(
t
.
getMessage
(
)
)
)
{
return
;
}
t
=
t
.
getCause
(
)
;
}
fail
(
"expected \"baz unavailable\" in throwable chain"
)
;
}
}
public
Bar
getBar
(
)
{
return
bar
;
}
}
<EOF>
