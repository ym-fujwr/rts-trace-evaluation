package
org
.
apache
.
commons
.
net
.
smtp
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
BufferedWriter
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStreamReader
;
import
java
.
io
.
OutputStreamWriter
;
import
java
.
util
.
ArrayList
;
import
org
.
apache
.
commons
.
net
.
MalformedServerReplyException
;
import
org
.
apache
.
commons
.
net
.
ProtocolCommandSupport
;
import
org
.
apache
.
commons
.
net
.
SocketClient
;
import
org
.
apache
.
commons
.
net
.
io
.
CRLFLineReader
;
import
org
.
apache
.
commons
.
net
.
util
.
NetConstants
;
public
class
SMTP
extends
SocketClient
{
public
static
final
int
DEFAULT_PORT
=
25
;
private
static
final
String
DEFAULT_ENCODING
=
"ISO-8859-1"
;
protected
final
String
encoding
;
protected
ProtocolCommandSupport
_commandSupport_
;
BufferedReader
reader
;
BufferedWriter
writer
;
private
int
replyCode
;
private
final
ArrayList
<
String
>
replyLines
;
private
boolean
newReplyString
;
private
String
replyString
;
public
SMTP
(
)
{
this
(
DEFAULT_ENCODING
)
;
}
public
SMTP
(
final
String
encoding
)
{
setDefaultPort
(
DEFAULT_PORT
)
;
replyLines
=
new
ArrayList
<
>
(
)
;
newReplyString
=
false
;
replyString
=
null
;
_commandSupport_
=
new
ProtocolCommandSupport
(
this
)
;
this
.
encoding
=
encoding
;
}
@
Override
protected
void
_connectAction_
(
)
throws
IOException
{
super
.
_connectAction_
(
)
;
reader
=
new
CRLFLineReader
(
new
InputStreamReader
(
_input_
,
encoding
)
)
;
writer
=
new
BufferedWriter
(
new
OutputStreamWriter
(
_output_
,
encoding
)
)
;
getReply
(
)
;
}
public
int
data
(
)
throws
IOException
{
return
sendCommand
(
SMTPCommand
.
DATA
)
;
}
@
Override
public
void
disconnect
(
)
throws
IOException
{
super
.
disconnect
(
)
;
reader
=
null
;
writer
=
null
;
replyString
=
null
;
replyLines
.
clear
(
)
;
newReplyString
=
false
;
}
public
int
expn
(
final
String
name
)
throws
IOException
{
return
sendCommand
(
SMTPCommand
.
EXPN
,
name
)
;
}
@
Override
protected
ProtocolCommandSupport
getCommandSupport
(
)
{
return
_commandSupport_
;
}
public
int
getReply
(
)
throws
IOException
{
final
int
length
;
newReplyString
=
true
;
replyLines
.
clear
(
)
;
String
line
=
reader
.
readLine
(
)
;
if
(
line
==
null
)
{
throw
new
SMTPConnectionClosedException
(
"Connection closed without indication."
)
;
}
length
=
line
.
length
(
)
;
if
(
length
<
3
)
{
throw
new
MalformedServerReplyException
(
"Truncated server reply: "
+
line
)
;
}
try
{
final
String
code
=
line
.
substring
(
0
,
3
)
;
replyCode
=
Integer
.
parseInt
(
code
)
;
}
catch
(
final
NumberFormatException
e
)
{
throw
new
MalformedServerReplyException
(
"Could not parse response code.\nServer Reply: "
+
line
)
;
}
replyLines
.
add
(
line
)
;
if
(
length
>
3
&&
line
.
charAt
(
3
)
==
'-'
)
{
do
{
line
=
reader
.
readLine
(
)
;
if
(
line
==
null
)
{
throw
new
SMTPConnectionClosedException
(
"Connection closed without indication."
)
;
}
replyLines
.
add
(
line
)
;
}
while
(
!
(
line
.
length
(
)
>=
4
&&
line
.
charAt
(
3
)
!=
'-'
&&
Character
.
isDigit
(
line
.
charAt
(
0
)
)
)
)
;
}
fireReplyReceived
(
replyCode
,
getReplyString
(
)
)
;
if
(
replyCode
==
SMTPReply
.
SERVICE_NOT_AVAILABLE
)
{
throw
new
SMTPConnectionClosedException
(
"SMTP response 421 received.  Server closed connection."
)
;
}
return
replyCode
;
}
public
int
getReplyCode
(
)
{
return
replyCode
;
}
public
String
getReplyString
(
)
{
final
StringBuilder
buffer
;
if
(
!
newReplyString
)
{
return
replyString
;
}
buffer
=
new
StringBuilder
(
)
;
for
(
final
String
line
:
replyLines
)
{
buffer
.
append
(
line
)
;
buffer
.
append
(
SocketClient
.
NETASCII_EOL
)
;
}
newReplyString
=
false
;
replyString
=
buffer
.
toString
(
)
;
return
replyString
;
}
public
String
[
]
getReplyStrings
(
)
{
return
replyLines
.
toArray
(
NetConstants
.
EMPTY_STRING_ARRAY
)
;
}
public
int
helo
(
final
String
hostname
)
throws
IOException
{
return
sendCommand
(
SMTPCommand
.
HELO
,
hostname
)
;
}
public
int
help
(
)
throws
IOException
{
return
sendCommand
(
SMTPCommand
.
HELP
)
;
}
public
int
help
(
final
String
command
)
throws
IOException
{
return
sendCommand
(
SMTPCommand
.
HELP
,
command
)
;
}
public
int
mail
(
final
String
reversePath
)
throws
IOException
{
return
sendCommand
(
SMTPCommand
.
MAIL
,
reversePath
,
false
)
;
}
public
int
noop
(
)
throws
IOException
{
return
sendCommand
(
SMTPCommand
.
NOOP
)
;
}
public
int
quit
(
)
throws
IOException
{
return
sendCommand
(
SMTPCommand
.
QUIT
)
;
}
public
int
rcpt
(
final
String
forwardPath
)
throws
IOException
{
return
sendCommand
(
SMTPCommand
.
RCPT
,
forwardPath
,
false
)
;
}
public
void
removeProtocolCommandistener
(
final
org
.
apache
.
commons
.
net
.
ProtocolCommandListener
listener
)
{
removeProtocolCommandListener
(
listener
)
;
}
public
int
rset
(
)
throws
IOException
{
return
sendCommand
(
SMTPCommand
.
RSET
)
;
}
public
int
saml
(
final
String
reversePath
)
throws
IOException
{
return
sendCommand
(
SMTPCommand
.
SAML
,
reversePath
)
;
}
public
int
send
(
final
String
reversePath
)
throws
IOException
{
return
sendCommand
(
SMTPCommand
.
SEND
,
reversePath
)
;
}
public
int
sendCommand
(
final
int
command
)
throws
IOException
{
return
sendCommand
(
command
,
null
)
;
}
public
int
sendCommand
(
final
int
command
,
final
String
args
)
throws
IOException
{
return
sendCommand
(
SMTPCommand
.
getCommand
(
command
)
,
args
)
;
}
private
int
sendCommand
(
final
int
command
,
final
String
args
,
final
boolean
includeSpace
)
throws
IOException
{
return
sendCommand
(
SMTPCommand
.
getCommand
(
command
)
,
args
,
includeSpace
)
;
}
public
int
sendCommand
(
final
String
command
)
throws
IOException
{
return
sendCommand
(
command
,
null
)
;
}
public
int
sendCommand
(
final
String
command
,
final
String
args
)
throws
IOException
{
return
sendCommand
(
command
,
args
,
true
)
;
}
private
int
sendCommand
(
final
String
command
,
final
String
args
,
final
boolean
includeSpace
)
throws
IOException
{
final
StringBuilder
__commandBuffer
=
new
StringBuilder
(
)
;
__commandBuffer
.
append
(
command
)
;
if
(
args
!=
null
)
{
if
(
includeSpace
)
{
__commandBuffer
.
append
(
' '
)
;
}
__commandBuffer
.
append
(
args
)
;
}
__commandBuffer
.
append
(
SocketClient
.
NETASCII_EOL
)
;
final
String
message
=
__commandBuffer
.
toString
(
)
;
writer
.
write
(
message
)
;
writer
.
flush
(
)
;
fireCommandSent
(
command
,
message
)
;
return
getReply
(
)
;
}
public
int
soml
(
final
String
reversePath
)
throws
IOException
{
return
sendCommand
(
SMTPCommand
.
SOML
,
reversePath
)
;
}
public
int
turn
(
)
throws
IOException
{
return
sendCommand
(
SMTPCommand
.
TURN
)
;
}
public
int
vrfy
(
final
String
user
)
throws
IOException
{
return
sendCommand
(
SMTPCommand
.
VRFY
,
user
)
;
}
}
<EOF>
